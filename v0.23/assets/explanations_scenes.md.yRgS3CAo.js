import{_ as o,C as r,c as h,o as p,aA as t,j as e,G as a,a as n,w as l}from"./chunks/framework.BZ-eoJP1.js";const F=JSON.parse('{"title":"Scenes","description":"","frontmatter":{},"headers":[],"relativePath":"explanations/scenes.md","filePath":"explanations/scenes.md","lastUpdated":null}'),d={name:"explanations/scenes.md"},c={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""};function b(y,s,E,f,m,_){const i=r("Badge");return p(),h("div",null,[s[26]||(s[26]=t('<h1 id="Scenes" tabindex="-1">Scenes <a class="header-anchor" href="#Scenes" aria-label="Permalink to &quot;Scenes {#Scenes}&quot;">​</a></h1><h2 id="What-is-a-Scene?" tabindex="-1">What is a <code>Scene</code>? <a class="header-anchor" href="#What-is-a-Scene?" aria-label="Permalink to &quot;What is a `Scene`? {#What-is-a-Scene?}&quot;">​</a></h2><p><code>Scene</code>s are fundamental building blocks of Makie figures. A Scene is like a container for <code>Plot</code>s and other <code>Scene</code>s. <code>Scenes</code> have <code>Plot</code>s and <code>Subscenes</code> associated with them. Every Scene also has a transformation, made up of <em>scale</em>, <em>translation</em>, and <em>rotation</em>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Before the introduction of the <code>Figure</code> workflow, <code>Scene</code>s used to be the main container object which was returned from all plotting functions. Now, scenes are mostly an implementation detail for many users, unless they want to build custom solutions that go beyond what the default system offers.</p></div><p>A Scene&#39;s plots can be accessed via <code>scene.plots</code>.</p><p>A Scene&#39;s subscenes (also called children) can be accessed through <code>scene.children</code>. This will return an Array of the <code>Scene</code>&#39;s child scenes. A child scene can be created by <code>childscene = Scene(parentscene)</code>.</p><p>Any <code>Scene</code> with an axis also has a <code>camera</code> associated with it; this can be accessed through <code>camera(scene)</code>, and its controls through <code>cameracontrols(scene)</code>. More documentation about these is in the <a href="/v0.23/explanations/cameras#Cameras">Cameras</a> section.</p><p><code>Scene</code>s have a configurable size. You can set the size in device-independent pixels by doing <code>Scene(size = (500, 500))</code>. (More about sizes, resolutions and units in <a href="/v0.23/explanations/figure#Figure-size-and-resolution">Figure size and resolution</a> or <a href="/v0.23/how-to/match-figure-size-font-sizes-and-dpi#How-to-match-figure-size,-font-sizes-and-dpi">How to match figure size, font sizes and dpi</a>)</p><p>Any keyword argument given to the <code>Scene</code> will be propagated to its plots; therefore, you can set the palette or the colormap in the Scene itself.</p><h2 id="Subscenes" tabindex="-1">Subscenes <a class="header-anchor" href="#Subscenes" aria-label="Permalink to &quot;Subscenes {#Subscenes}&quot;">​</a></h2><p>A subscene is no different than a normal Scene, except that it is linked to a &quot;parent&quot; Scene. It inherits the transformations of the parent Scene, but can then be transformed independently of it.</p><h2 id="Scene-Attributes" tabindex="-1">Scene Attributes <a class="header-anchor" href="#Scene-Attributes" aria-label="Permalink to &quot;Scene Attributes {#Scene-Attributes}&quot;">​</a></h2><ul><li><p><code>scene.clear = true</code>: Scenes are drawn parent first onto the same image. If <code>clear = true</code> for a (sub)scene it will clear the previously drawn things in its region to its <code>backgroundcolor</code>. Otherwise the plots in <code>scene</code> will be drawn on top and the backgroundcolor will be ignored. Note that this is not technically an attribute but just a field of <code>Scene</code>.</p></li><li><p><code>ssao = SSAO(bias = 0.025, blur=2, radius=0.5)</code>: Controls SSAO settings, see lighting documentation.</p></li><li><p><code>size = (800, 600)</code>: Sets the size of the created window if the scene is the root scene.</p></li></ul><h2 id="Modifying-A-Scene" tabindex="-1">Modifying A Scene <a class="header-anchor" href="#Modifying-A-Scene" aria-label="Permalink to &quot;Modifying A Scene {#Modifying-A-Scene}&quot;">​</a></h2><p>Makie offers mutation functions to scale, translate and rotate your Scenes on the fly.</p>',15)),e("details",c,[e("summary",null,[s[0]||(s[0]=e("a",{id:"Makie.translate!-explanations-scenes",href:"#Makie.translate!-explanations-scenes"},[e("span",{class:"jlbinding"},"Makie.translate!")],-1)),s[1]||(s[1]=n()),a(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[4]||(s[4]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Transformable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xyz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VecTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Transformable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xyz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Apply an absolute translation to the given <code>Transformable</code> (a Scene or Plot), translating it to <code>x, y, z</code>.</p>`,2)),a(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[2]||(s[2]=[e("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/f06b9848530058300363513a1bccc2ba01f19d3b/src/layouting/transformation.jl#L176-L181",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]}),s[5]||(s[5]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Accum, t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Transformable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xyz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Translate the given <code>Transformable</code> (a Scene or Plot), relative to its current position.</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[3]||(s[3]=[e("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/f06b9848530058300363513a1bccc2ba01f19d3b/src/layouting/transformation.jl#L185-L189",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[3]})]),e("details",k,[e("summary",null,[s[6]||(s[6]=e("a",{id:"Makie.rotate!-explanations-scenes",href:"#Makie.rotate!-explanations-scenes"},[e("span",{class:"jlbinding"},"Makie.rotate!")],-1)),s[7]||(s[7]=n()),a(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[10]||(s[10]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotate!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Accum, t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Transformable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, axis_rot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Apply a relative rotation to the transformable, by multiplying by the current rotation.</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[8]||(s[8]=[e("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/f06b9848530058300363513a1bccc2ba01f19d3b/src/layouting/transformation.jl#L146-L150",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[8]}),s[11]||(s[11]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotate!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Transformable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, axis_rot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Quaternion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotate!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Transformable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, axis_rot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotate!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Transformable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, axis_rot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Apply an absolute rotation to the transformable. Rotations are all internally converted to <code>Quaternion</code>s.</p>`,2)),a(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[9]||(s[9]=[e("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/f06b9848530058300363513a1bccc2ba01f19d3b/src/layouting/transformation.jl#L153-L159",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[9]})]),e("details",u,[e("summary",null,[s[12]||(s[12]=e("a",{id:"Makie.scale!-explanations-scenes",href:"#Makie.scale!-explanations-scenes"},[e("span",{class:"jlbinding"},"Makie.scale!")],-1)),s[13]||(s[13]=n()),a(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[15]||(s[15]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scale!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Absolute], t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Transformable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xyz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scale!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Absolute], t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Transformable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xyz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VecTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Scale the given <code>t::Transformable</code> (a Scene or Plot) to the given arguments <code>xyz</code>. Any missing dimension will be scaled by 1. If <code>mode == Accum</code> the given scaling will be multiplied with the previous one.</p>`,2)),a(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[14]||(s[14]=[e("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/f06b9848530058300363513a1bccc2ba01f19d3b/src/layouting/transformation.jl#L120-L127",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),s[27]||(s[27]=e("h2",{id:"Updating-the-Scene",tabindex:"-1"},[n("Updating the Scene "),e("a",{class:"header-anchor",href:"#Updating-the-Scene","aria-label":'Permalink to "Updating the Scene {#Updating-the-Scene}"'},"​")],-1)),s[28]||(s[28]=e("p",null,"When the Scene is changed, you may need to update several aspects of it. Makie provides three main updating functions:",-1)),e("details",g,[e("summary",null,[s[16]||(s[16]=e("a",{id:"Makie.update_cam!",href:"#Makie.update_cam!"},[e("span",{class:"jlbinding"},"Makie.update_cam!")],-1)),s[17]||(s[17]=n()),a(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[22]||(s[22]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">update_cam!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SceneLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, area)</span></span></code></pre></div><p>Updates the camera for the given <code>scene</code> to cover the given <code>area</code> in 2d.</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[18]||(s[18]=[e("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/f06b9848530058300363513a1bccc2ba01f19d3b/src/camera/camera2d.jl#L54-L58",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]}),s[23]||(s[23]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">update_cam!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SceneLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Updates the camera for the given <code>scene</code> to cover the limits of the <code>Scene</code>. Useful when using the <code>Observable</code> pipeline.</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[19]||(s[19]=[e("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/f06b9848530058300363513a1bccc2ba01f19d3b/src/camera/camera2d.jl#L67-L72",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[19]}),s[24]||(s[24]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">update_cam!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scene, cam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Camera3D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ϕ, θ[, radius])</span></span></code></pre></div><p>Set the camera position based on two angles <code>0 ≤ ϕ ≤ 2π</code> and <code>-pi/2 ≤ θ ≤ pi/2</code> and an optional radius around the current <code>cam.lookat[]</code>.</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[20]||(s[20]=[e("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/f06b9848530058300363513a1bccc2ba01f19d3b/src/camera/camera3d.jl#L784-L789",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[20]}),s[25]||(s[25]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">update_cam!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, eyeposition, lookat, up </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Vec3d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>Updates the camera&#39;s controls to point to the specified location.</p>',2)),a(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[21]||(s[21]=[e("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/f06b9848530058300363513a1bccc2ba01f19d3b/src/camera/old_camera3d.jl#L358-L362",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[21]})]),s[29]||(s[29]=e("h2",{id:"Events",tabindex:"-1"},[n("Events "),e("a",{class:"header-anchor",href:"#Events","aria-label":'Permalink to "Events {#Events}"'},"​")],-1)),s[30]||(s[30]=e("p",null,[n('Scenes have several pre-created event "hooks" (through Observables) that you can handle. These can be accessed through '),e("code",null,"scene.events"),n(", which returns an "),e("a",{href:"/v0.23/api#Makie.Events"},[e("code",null,"Events")]),n(" struct.")],-1))])}const S=o(d,[["render",b]]);export{F as __pageData,S as default};
