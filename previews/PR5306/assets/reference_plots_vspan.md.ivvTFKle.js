import{_ as l,C as r,c as n,o as c,j as a,aA as t,a as i,G as s,w as d}from"./chunks/framework.CH1iYJ72.js";const h="/previews/PR5306/assets/f0760a7.J1U4K8yI.png",_=JSON.parse('{"title":"vspan","description":"","frontmatter":{},"headers":[],"relativePath":"reference/plots/vspan.md","filePath":"reference/plots/vspan.md","lastUpdated":null}'),p={name:"reference/plots/vspan.md"},u={class:"jldocstring custom-block",open:""};function f(k,e,m,b,g,y){const o=r("Badge");return c(),n("div",null,[e[4]||(e[4]=a("h1",{id:"vspan",tabindex:"-1"},[i("vspan "),a("a",{class:"header-anchor",href:"#vspan","aria-label":'Permalink to "vspan {#vspan}"'},"​")],-1)),a("details",u,[a("summary",null,[e[0]||(e[0]=a("a",{id:"Makie.vspan-reference-plots-vspan",href:"#Makie.vspan-reference-plots-vspan"},[a("span",{class:"jlbinding"},"Makie.vspan")],-1)),e[1]||(e[1]=i()),s(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[3]||(e[3]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vspan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xs_low, xs_high; ymin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ymax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, attributes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vspan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xs_lowhigh; ymin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ymax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, attributes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Draws vertical bands spanning across an <code>Axis</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>xs_low</code>: A <code>Real</code> or <code>AbstractVector{&lt;:Real}</code> setting the x start position of bands.</p></li><li><p><code>xs_high</code>: A <code>Real</code> or <code>AbstractVector{&lt;:Real}</code> setting the x end position of bands.</p></li><li><p><code>xs_lowhigh</code>: An <code>Interval</code> or <code>AbstractVector{&lt;:Interval}</code> setting the x start and end positions together.</p></li><li><p><code>ymin</code>: A <code>Real</code> or <code>AbstractVector{&lt;:Real}</code> setting the y start position of bands in relative (0 .. 1) space. (Attribute)</p></li><li><p><code>ymax</code>: A <code>Real</code> or <code>AbstractVector{&lt;:Real}</code> setting the y end position of bands in relative (0 .. 1) space. (Attribute)</p></li></ul><p><strong>Plot type</strong></p><p>The plot type alias for the <code>vspan</code> function is <code>VSpan</code>.</p>`,6)),s(o,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...e[2]||(e[2]=[a("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/032fa3ae501757931f00301cc43814e0534abda6/Makie/src/recipes.jl#L540-L677",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e[5]||(e[5]=t(`<a id="example-f0760a7"></a><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vspan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><img src="`+h+'" width="600px" height="450px"><h2 id="Attributes" tabindex="-1">Attributes <a class="header-anchor" href="#Attributes" aria-label="Permalink to &quot;Attributes {#Attributes}&quot;">​</a></h2><h3 id="alpha" tabindex="-1">alpha <a class="header-anchor" href="#alpha" aria-label="Permalink to &quot;alpha {#alpha}&quot;">​</a></h3><p>Defaults to <code>1.0</code></p><p>The alpha value of the colormap or color attribute. Multiple alphas like in <code>plot(alpha=0.2, color=(:red, 0.5)</code>, will get multiplied.</p><h3 id="clip_planes" tabindex="-1">clip_planes <a class="header-anchor" href="#clip_planes" aria-label="Permalink to &quot;clip_planes {#clip_planes}&quot;">​</a></h3><p>Defaults to <code>@inherit clip_planes automatic</code></p><p>Clip planes offer a way to do clipping in 3D space. You can set a Vector of up to 8 <code>Plane3f</code> planes here, behind which plots will be clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene. You can remove parent <code>clip_planes</code> by passing <code>Plane3f[]</code>.</p><h3 id="color" tabindex="-1">color <a class="header-anchor" href="#color" aria-label="Permalink to &quot;color {#color}&quot;">​</a></h3><p>Defaults to <code>@inherit patchcolor</code></p><p>Sets the color of the poly. Can be a <code>Vector{&lt;:Colorant}</code> for per vertex colors or a single <code>Colorant</code>. A <code>Matrix{&lt;:Colorant}</code> can be used to color the mesh with a texture, which requires the mesh to contain texture coordinates. Vector or Matrices of numbers can be used as well, which will use the colormap arguments to map the numbers to colors. One can also use a <code>&lt;: AbstractPattern</code>, to cover the poly with a regular pattern, e.g. for hatching.</p><h3 id="colormap" tabindex="-1">colormap <a class="header-anchor" href="#colormap" aria-label="Permalink to &quot;colormap {#colormap}&quot;">​</a></h3><p>Defaults to <code>@inherit colormap :viridis</code></p><p>Sets the colormap that is sampled for numeric <code>color</code>s. <code>PlotUtils.cgrad(...)</code>, <code>Makie.Reverse(any_colormap)</code> can be used as well, or any symbol from ColorBrewer or PlotUtils. To see all available color gradients, you can call <code>Makie.available_gradients()</code>.</p><h3 id="colorrange" tabindex="-1">colorrange <a class="header-anchor" href="#colorrange" aria-label="Permalink to &quot;colorrange {#colorrange}&quot;">​</a></h3><p>Defaults to <code>automatic</code></p><p>The values representing the start and end points of <code>colormap</code>.</p><h3 id="colorscale" tabindex="-1">colorscale <a class="header-anchor" href="#colorscale" aria-label="Permalink to &quot;colorscale {#colorscale}&quot;">​</a></h3><p>Defaults to <code>identity</code></p><p>The color transform function. Can be any function, but only works well together with <code>Colorbar</code> for <code>identity</code>, <code>log</code>, <code>log2</code>, <code>log10</code>, <code>sqrt</code>, <code>logit</code>, <code>Makie.pseudolog10</code>, <code>Makie.Symlog10</code>, <code>Makie.AsinhScale</code>, <code>Makie.SinhScale</code>, <code>Makie.LogScale</code>, <code>Makie.LuptonAsinhScale</code>, and <code>Makie.PowerScale</code>.</p><h3 id="cycle" tabindex="-1">cycle <a class="header-anchor" href="#cycle" aria-label="Permalink to &quot;cycle {#cycle}&quot;">​</a></h3><p>Defaults to <code>[:color =&gt; :patchcolor]</code></p><p>Sets which attributes to cycle when creating multiple plots. The values to cycle through are defined by the parent Theme. Multiple cycled attributes can be set by passing a vector. Elements can</p><ul><li><p>directly refer to a cycled attribute, e.g. <code>:color</code></p></li><li><p>map a cycled attribute to a palette attribute, e.g. <code>:linecolor =&gt; :color</code></p></li><li><p>map multiple cycled attributes to a palette attribute, e.g. <code>[:linecolor, :markercolor] =&gt; :color</code></p></li></ul><h3 id="depth_shift" tabindex="-1">depth_shift <a class="header-anchor" href="#depth_shift" aria-label="Permalink to &quot;depth_shift {#depth_shift}&quot;">​</a></h3><p>Defaults to <code>0.0</code></p><p>Adjusts the depth value of a plot after all other transformations, i.e. in clip space, where <code>-1 &lt;= depth &lt;= 1</code>. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).</p><h3 id="fxaa" tabindex="-1">fxaa <a class="header-anchor" href="#fxaa" aria-label="Permalink to &quot;fxaa {#fxaa}&quot;">​</a></h3><p>Defaults to <code>true</code></p><p>Adjusts whether the plot is rendered with fxaa (fast approximate anti-aliasing, GLMakie only). Note that some plots implement a better native anti-aliasing solution (scatter, text, lines). For them <code>fxaa = true</code> generally lowers quality. Plots that show smoothly interpolated data (e.g. image, surface) may also degrade in quality as <code>fxaa = true</code> can cause blurring.</p><h3 id="highclip" tabindex="-1">highclip <a class="header-anchor" href="#highclip" aria-label="Permalink to &quot;highclip {#highclip}&quot;">​</a></h3><p>Defaults to <code>automatic</code></p><p>The color for any value above the colorrange.</p><h3 id="inspectable" tabindex="-1">inspectable <a class="header-anchor" href="#inspectable" aria-label="Permalink to &quot;inspectable {#inspectable}&quot;">​</a></h3><p>Defaults to <code>@inherit inspectable</code></p><p>Sets whether this plot should be seen by <code>DataInspector</code>. The default depends on the theme of the parent scene.</p><h3 id="inspector_clear" tabindex="-1">inspector_clear <a class="header-anchor" href="#inspector_clear" aria-label="Permalink to &quot;inspector_clear {#inspector_clear}&quot;">​</a></h3><p>Defaults to <code>automatic</code></p><p>Sets a callback function <code>(inspector, plot) -&gt; ...</code> for cleaning up custom indicators in DataInspector.</p><h3 id="inspector_hover" tabindex="-1">inspector_hover <a class="header-anchor" href="#inspector_hover" aria-label="Permalink to &quot;inspector_hover {#inspector_hover}&quot;">​</a></h3><p>Defaults to <code>automatic</code></p><p>Sets a callback function <code>(inspector, plot, index) -&gt; ...</code> which replaces the default <code>show_data</code> methods.</p><h3 id="inspector_label" tabindex="-1">inspector_label <a class="header-anchor" href="#inspector_label" aria-label="Permalink to &quot;inspector_label {#inspector_label}&quot;">​</a></h3><p>Defaults to <code>automatic</code></p><p>Sets a callback function <code>(plot, index, position) -&gt; string</code> which replaces the default label generated by DataInspector.</p><h3 id="joinstyle" tabindex="-1">joinstyle <a class="header-anchor" href="#joinstyle" aria-label="Permalink to &quot;joinstyle {#joinstyle}&quot;">​</a></h3><p>Defaults to <code>@inherit joinstyle</code></p><p>Controls the rendering of outline corners. Options are <code>:miter</code> for sharp corners, <code>:bevel</code> for &quot;cut off&quot; corners, and <code>:round</code> for rounded corners. If the corner angle is below <code>miter_limit</code>, <code>:miter</code> is equivalent to <code>:bevel</code> to avoid long spikes.</p><h3 id="linecap" tabindex="-1">linecap <a class="header-anchor" href="#linecap" aria-label="Permalink to &quot;linecap {#linecap}&quot;">​</a></h3><p>Defaults to <code>@inherit linecap</code></p><p>Sets the type of line cap used for outlines. Options are <code>:butt</code> (flat without extrusion), <code>:square</code> (flat with half a linewidth extrusion) or <code>:round</code>.</p><h3 id="linestyle" tabindex="-1">linestyle <a class="header-anchor" href="#linestyle" aria-label="Permalink to &quot;linestyle {#linestyle}&quot;">​</a></h3><p>Defaults to <code>nothing</code></p><p>Sets the dash pattern of the line. Options are <code>:solid</code> (equivalent to <code>nothing</code>), <code>:dot</code>, <code>:dash</code>, <code>:dashdot</code> and <code>:dashdotdot</code>. These can also be given in a tuple with a gap style modifier, either <code>:normal</code>, <code>:dense</code> or <code>:loose</code>. For example, <code>(:dot, :loose)</code> or <code>(:dashdot, :dense)</code>.</p><p>For custom patterns have a look at <a href="/previews/PR5306/api#Makie.Linestyle"><code>Makie.Linestyle</code></a>.</p><h3 id="lowclip" tabindex="-1">lowclip <a class="header-anchor" href="#lowclip" aria-label="Permalink to &quot;lowclip {#lowclip}&quot;">​</a></h3><p>Defaults to <code>automatic</code></p><p>The color for any value below the colorrange.</p><h3 id="miter_limit" tabindex="-1">miter_limit <a class="header-anchor" href="#miter_limit" aria-label="Permalink to &quot;miter_limit {#miter_limit}&quot;">​</a></h3><p>Defaults to <code>@inherit miter_limit</code></p><p>Sets the minimum inner join angle below which miter line joins truncate. See also <code>Makie.miter_distance_to_angle</code>.</p><h3 id="model" tabindex="-1">model <a class="header-anchor" href="#model" aria-label="Permalink to &quot;model {#model}&quot;">​</a></h3><p>Defaults to <code>automatic</code></p><p>Sets a model matrix for the plot. This overrides adjustments made with <code>translate!</code>, <code>rotate!</code> and <code>scale!</code>.</p><h3 id="nan_color" tabindex="-1">nan_color <a class="header-anchor" href="#nan_color" aria-label="Permalink to &quot;nan_color {#nan_color}&quot;">​</a></h3><p>Defaults to <code>:transparent</code></p><p>The color for NaN values.</p><h3 id="overdraw" tabindex="-1">overdraw <a class="header-anchor" href="#overdraw" aria-label="Permalink to &quot;overdraw {#overdraw}&quot;">​</a></h3><p>Defaults to <code>false</code></p><p>Controls if the plot will draw over other plots. This specifically means ignoring depth checks in GL backends</p><h3 id="shading" tabindex="-1">shading <a class="header-anchor" href="#shading" aria-label="Permalink to &quot;shading {#shading}&quot;">​</a></h3><p>Defaults to <code>false</code></p><p>Controls whether lights affect the polygon.</p><h3 id="space" tabindex="-1">space <a class="header-anchor" href="#space" aria-label="Permalink to &quot;space {#space}&quot;">​</a></h3><p>Defaults to <code>:data</code></p><p>Sets the transformation space for box encompassing the plot. See <code>Makie.spaces()</code> for possible inputs.</p><h3 id="ssao" tabindex="-1">ssao <a class="header-anchor" href="#ssao" aria-label="Permalink to &quot;ssao {#ssao}&quot;">​</a></h3><p>Defaults to <code>false</code></p><p>Adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with <code>fxaa = true</code>.</p><h3 id="stroke_depth_shift" tabindex="-1">stroke_depth_shift <a class="header-anchor" href="#stroke_depth_shift" aria-label="Permalink to &quot;stroke_depth_shift {#stroke_depth_shift}&quot;">​</a></h3><p>Defaults to <code>-1.0e-5</code></p><p>Depth shift of stroke plot. This is useful to avoid z-fighting between the stroke and the fill.</p><h3 id="strokecolor" tabindex="-1">strokecolor <a class="header-anchor" href="#strokecolor" aria-label="Permalink to &quot;strokecolor {#strokecolor}&quot;">​</a></h3><p>Defaults to <code>@inherit patchstrokecolor</code></p><p>Sets the color of the outline around a marker.</p><h3 id="strokecolormap" tabindex="-1">strokecolormap <a class="header-anchor" href="#strokecolormap" aria-label="Permalink to &quot;strokecolormap {#strokecolormap}&quot;">​</a></h3><p>Defaults to <code>@inherit colormap</code></p><p>Sets the colormap that is sampled for numeric <code>color</code>s.</p><h3 id="strokewidth" tabindex="-1">strokewidth <a class="header-anchor" href="#strokewidth" aria-label="Permalink to &quot;strokewidth {#strokewidth}&quot;">​</a></h3><p>Defaults to <code>@inherit patchstrokewidth</code></p><p>Sets the width of the outline.</p><h3 id="transformation" tabindex="-1">transformation <a class="header-anchor" href="#transformation" aria-label="Permalink to &quot;transformation {#transformation}&quot;">​</a></h3><p>Defaults to <code>:automatic</code></p><p>Controls the inheritance or directly sets the transformations of a plot. Transformations include the transform function and model matrix as generated by <code>translate!(...)</code>, <code>scale!(...)</code> and <code>rotate!(...)</code>. They can be set directly by passing a <code>Transformation()</code> object or inherited from the parent plot or scene. Inheritance options include:</p><ul><li><p><code>:automatic</code>: Inherit transformations if the parent and child <code>space</code> is compatible</p></li><li><p><code>:inherit</code>: Inherit transformations</p></li><li><p><code>:inherit_model</code>: Inherit only model transformations</p></li><li><p><code>:inherit_transform_func</code>: Inherit only the transform function</p></li><li><p><code>:nothing</code>: Inherit neither, fully disconnecting the child&#39;s transformations from the parent</p></li></ul><p>Another option is to pass arguments to the <code>transform!()</code> function which then get applied to the plot. For example <code>transformation = (:xz, 1.0)</code> which rotates the <code>xy</code> plane to the <code>xz</code> plane and translates by <code>1.0</code>. For this inheritance defaults to <code>:automatic</code> but can also be set through e.g. <code>(:nothing, (:xz, 1.0))</code>.</p><h3 id="transparency" tabindex="-1">transparency <a class="header-anchor" href="#transparency" aria-label="Permalink to &quot;transparency {#transparency}&quot;">​</a></h3><p>Defaults to <code>false</code></p><p>Adjusts how the plot deals with transparency. In GLMakie <code>transparency = true</code> results in using Order Independent Transparency.</p><h3 id="visible" tabindex="-1">visible <a class="header-anchor" href="#visible" aria-label="Permalink to &quot;visible {#visible}&quot;">​</a></h3><p>Defaults to <code>true</code></p><p>Controls whether the plot gets rendered or not.</p><h3 id="ymax" tabindex="-1">ymax <a class="header-anchor" href="#ymax" aria-label="Permalink to &quot;ymax {#ymax}&quot;">​</a></h3><p>Defaults to <code>1</code></p><p>The end of the bands in relative axis units (0 to 1) along the y dimension.</p><h3 id="ymin" tabindex="-1">ymin <a class="header-anchor" href="#ymin" aria-label="Permalink to &quot;ymin {#ymin}&quot;">​</a></h3><p>Defaults to <code>0</code></p><p>The start of the bands in relative axis units (0 to 1) along the y dimension.</p>',110))])}const v=l(p,[["render",f]]);export{_ as __pageData,v as default};
