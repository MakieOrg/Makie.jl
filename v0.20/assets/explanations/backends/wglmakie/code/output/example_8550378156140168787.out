~~~
<div class="bonito-fragment" id="76e32b1f-4f59-4a4b-8bc2-60eb9af577d0" data-jscall-id="subsession-application-dom">
  <div>
    <style>.style_3 {
  justify-items: center;
  align-items: center;
  height: 100%;
  display: grid;
  align-content: center;
  grid-gap: 10px;
  grid-template-rows: none;
  justify-content: center;
  grid-template-columns: 1fr;
  width: 100%;
  grid-column: 1 / 3;
  grid-template-areas: none;
}
.style_4 {
  justify-items: stretch;
  align-items: legacy;
  height: 100%;
  display: grid;
  align-content: normal;
  grid-gap: 10px;
  grid-template-rows: none;
  justify-content: normal;
  grid-template-columns: 1fr 1fr;
  width: 100%;
  grid-template-areas: none;
}
.style_5 {
  align-items: center;
  grid-column: 1 / 3;
  display: grid;
  background-color: transparent;
  grid-template-columns: 1fr;
  padding-right: 9.5px;
  position: relative;
  margin: 5px;
  grid-template-rows: 15px;
  padding-left: 9.5px;
}
.style_6 {
  height: 9.5px;
  border: 1px solid #ccc;
  background-color: #ddd;
  position: absolute;
  width: 0px;
  border-radius: 3px;
}
.style_7 {
  left: -7.5px;
  height: 15px;
  border: 1px solid #ccc;
  background-color: #fff;
  position: absolute;
  width: 15px;
  border-radius: 50%;
  cursor: pointer;
}
.style_8 {
  height: auto;
  padding: 12px;
  background-color: rgba(255.0, 255.0, 255.0, 0.2);
  box-shadow: 0 4px 8px rgba(0.0, 0.0, 51.0, 0.2);
  width: auto;
  border-radius: 10px;
  margin: 2px;
}
.style_9 {
  height: 7.5px;
  border: 1px solid #ccc;
  background-color: #eee;
  position: absolute;
  width: 100%;
  border-radius: 3px;
}
</style>
    <div>
      <script src="data:application/javascript;base64,// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

var Hc = "157", zx = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2
}, Vx = {
    ROTATE: 0,
    PAN: 1,
    DOLLY_PAN: 2,
    DOLLY_ROTATE: 3
}, kd = 0, rl = 1, Hd = 2, kx = 3, Hx = 0, cd = 1, Gd = 2, pn = 3, Bn = 0, Ft = 1, gn = 2, Gx = 2, Dn = 0, Wi = 1, al = 2, ol = 3, cl = 4, Wd = 5, Bi = 100, Xd = 101, qd = 102, ll = 103, hl = 104, Yd = 200, Zd = 201, Jd = 202, $d = 203, ld = 204, hd = 205, Kd = 206, Qd = 207, jd = 208, ef = 209, tf = 210, nf = 0, sf = 1, rf = 2, uo = 3, af = 4, of = 5, cf = 6, lf = 7, xa = 0, hf = 1, uf = 2, Nn = 0, df = 1, ff = 2, pf = 3, mf = 4, gf = 5, Gc = 300, zn = 301, ci = 302, Ir = 303, Ur = 304, Vs = 306, Dr = 1e3, It = 1001, Nr = 1002, pt = 1003, fo = 1004, Wx = 1004, Lr = 1005, Xx = 1005, mt = 1006, ud = 1007, qx = 1007, li = 1008, Yx = 1008, On = 1009, _f = 1010, xf = 1011, Wc = 1012, dd = 1013, Ln = 1014, xn = 1015, Ts = 1016, fd = 1017, pd = 1018, ii = 1020, vf = 1021, Wt = 1023, yf = 1024, Mf = 1025, si = 1026, Yi = 1027, Sf = 1028, md = 1029, bf = 1030, gd = 1031, _d = 1033, wa = 33776, Aa = 33777, Ra = 33778, Ca = 33779, ul = 35840, dl = 35841, fl = 35842, pl = 35843, Ef = 36196, ml = 37492, gl = 37496, _l = 37808, xl = 37809, vl = 37810, yl = 37811, Ml = 37812, Sl = 37813, bl = 37814, El = 37815, Tl = 37816, wl = 37817, Al = 37818, Rl = 37819, Cl = 37820, Pl = 37821, Pa = 36492, Ll = 36494, Il = 36495, Tf = 36283, Ul = 36284, Dl = 36285, Nl = 36286, wf = 2200, Af = 2201, Rf = 2202, Or = 2300, Fr = 2301, La = 2302, zi = 2400, Vi = 2401, Br = 2402, Xc = 2500, xd = 2501, Zx = 0, Jx = 1, $x = 2, vd = 3e3, ri = 3001, Cf = 3200, Pf = 3201, mi = 0, Lf = 1, Xt = "", vt = "srgb", Mn = "srgb-linear", qc = "display-p3", va = "display-p3-linear", zr = "linear", nt = "srgb", Vr = "rec709", kr = "p3", Kx = 0, Ia = 7680, Qx = 7681, jx = 7682, ev = 7683, tv = 34055, nv = 34056, iv = 5386, sv = 512, rv = 513, av = 514, ov = 515, cv = 516, lv = 517, hv = 518, If = 519, Uf = 512, Df = 513, Nf = 514, Of = 515, Ff = 516, Bf = 517, zf = 518, Vf = 519, Hr = 35044, uv = 35048, dv = 35040, fv = 35045, pv = 35049, mv = 35041, gv = 35046, _v = 35050, xv = 35042, vv = "100", Ol = "300 es", po = 1035, vn = 2e3, Gr = 2001, sn = class {
    addEventListener(e, t) {
        this._listeners === void 0 && (this._listeners = {});
        let n = this._listeners;
        n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
    }
    hasEventListener(e, t) {
        if (this._listeners === void 0) return !1;
        let n = this._listeners;
        return n[e] !== void 0 && n[e].indexOf(t) !== -1;
    }
    removeEventListener(e, t) {
        if (this._listeners === void 0) return;
        let i = this._listeners[e];
        if (i !== void 0) {
            let r = i.indexOf(t);
            r !== -1 && i.splice(r, 1);
        }
    }
    dispatchEvent(e) {
        if (this._listeners === void 0) return;
        let n = this._listeners[e.type];
        if (n !== void 0) {
            e.target = this;
            let i = n.slice(0);
            for(let r = 0, a = i.length; r < a; r++)i[r].call(this, e);
            e.target = null;
        }
    }
}, Et = [
    "00",
    "01",
    "02",
    "03",
    "04",
    "05",
    "06",
    "07",
    "08",
    "09",
    "0a",
    "0b",
    "0c",
    "0d",
    "0e",
    "0f",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "1a",
    "1b",
    "1c",
    "1d",
    "1e",
    "1f",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "2a",
    "2b",
    "2c",
    "2d",
    "2e",
    "2f",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "3a",
    "3b",
    "3c",
    "3d",
    "3e",
    "3f",
    "40",
    "41",
    "42",
    "43",
    "44",
    "45",
    "46",
    "47",
    "48",
    "49",
    "4a",
    "4b",
    "4c",
    "4d",
    "4e",
    "4f",
    "50",
    "51",
    "52",
    "53",
    "54",
    "55",
    "56",
    "57",
    "58",
    "59",
    "5a",
    "5b",
    "5c",
    "5d",
    "5e",
    "5f",
    "60",
    "61",
    "62",
    "63",
    "64",
    "65",
    "66",
    "67",
    "68",
    "69",
    "6a",
    "6b",
    "6c",
    "6d",
    "6e",
    "6f",
    "70",
    "71",
    "72",
    "73",
    "74",
    "75",
    "76",
    "77",
    "78",
    "79",
    "7a",
    "7b",
    "7c",
    "7d",
    "7e",
    "7f",
    "80",
    "81",
    "82",
    "83",
    "84",
    "85",
    "86",
    "87",
    "88",
    "89",
    "8a",
    "8b",
    "8c",
    "8d",
    "8e",
    "8f",
    "90",
    "91",
    "92",
    "93",
    "94",
    "95",
    "96",
    "97",
    "98",
    "99",
    "9a",
    "9b",
    "9c",
    "9d",
    "9e",
    "9f",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "a6",
    "a7",
    "a8",
    "a9",
    "aa",
    "ab",
    "ac",
    "ad",
    "ae",
    "af",
    "b0",
    "b1",
    "b2",
    "b3",
    "b4",
    "b5",
    "b6",
    "b7",
    "b8",
    "b9",
    "ba",
    "bb",
    "bc",
    "bd",
    "be",
    "bf",
    "c0",
    "c1",
    "c2",
    "c3",
    "c4",
    "c5",
    "c6",
    "c7",
    "c8",
    "c9",
    "ca",
    "cb",
    "cc",
    "cd",
    "ce",
    "cf",
    "d0",
    "d1",
    "d2",
    "d3",
    "d4",
    "d5",
    "d6",
    "d7",
    "d8",
    "d9",
    "da",
    "db",
    "dc",
    "dd",
    "de",
    "df",
    "e0",
    "e1",
    "e2",
    "e3",
    "e4",
    "e5",
    "e6",
    "e7",
    "e8",
    "e9",
    "ea",
    "eb",
    "ec",
    "ed",
    "ee",
    "ef",
    "f0",
    "f1",
    "f2",
    "f3",
    "f4",
    "f5",
    "f6",
    "f7",
    "f8",
    "f9",
    "fa",
    "fb",
    "fc",
    "fd",
    "fe",
    "ff"
], Fl = 1234567, ai = Math.PI / 180, Zi = 180 / Math.PI;
function kt() {
    let s1 = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0;
    return (Et[s1 & 255] + Et[s1 >> 8 & 255] + Et[s1 >> 16 & 255] + Et[s1 >> 24 & 255] + "-" + Et[e & 255] + Et[e >> 8 & 255] + "-" + Et[e >> 16 & 15 | 64] + Et[e >> 24 & 255] + "-" + Et[t & 63 | 128] + Et[t >> 8 & 255] + "-" + Et[t >> 16 & 255] + Et[t >> 24 & 255] + Et[n & 255] + Et[n >> 8 & 255] + Et[n >> 16 & 255] + Et[n >> 24 & 255]).toLowerCase();
}
function ct(s1, e, t) {
    return Math.max(e, Math.min(t, s1));
}
function Yc(s1, e) {
    return (s1 % e + e) % e;
}
function kf(s1, e, t, n, i) {
    return n + (s1 - e) * (i - n) / (t - e);
}
function Hf(s1, e, t) {
    return s1 !== e ? (t - s1) / (e - s1) : 0;
}
function ys(s1, e, t) {
    return (1 - t) * s1 + t * e;
}
function Gf(s1, e, t, n) {
    return ys(s1, e, 1 - Math.exp(-t * n));
}
function Wf(s1, e = 1) {
    return e - Math.abs(Yc(s1, e * 2) - e);
}
function Xf(s1, e, t) {
    return s1 <= e ? 0 : s1 >= t ? 1 : (s1 = (s1 - e) / (t - e), s1 * s1 * (3 - 2 * s1));
}
function qf(s1, e, t) {
    return s1 <= e ? 0 : s1 >= t ? 1 : (s1 = (s1 - e) / (t - e), s1 * s1 * s1 * (s1 * (s1 * 6 - 15) + 10));
}
function Yf(s1, e) {
    return s1 + Math.floor(Math.random() * (e - s1 + 1));
}
function Zf(s1, e) {
    return s1 + Math.random() * (e - s1);
}
function Jf(s1) {
    return s1 * (.5 - Math.random());
}
function $f(s1) {
    s1 !== void 0 && (Fl = s1);
    let e = Fl += 1831565813;
    return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function Kf(s1) {
    return s1 * ai;
}
function Qf(s1) {
    return s1 * Zi;
}
function mo(s1) {
    return (s1 & s1 - 1) === 0 && s1 !== 0;
}
function yd(s1) {
    return Math.pow(2, Math.ceil(Math.log(s1) / Math.LN2));
}
function Wr(s1) {
    return Math.pow(2, Math.floor(Math.log(s1) / Math.LN2));
}
function jf(s1, e, t, n, i) {
    let r = Math.cos, a = Math.sin, o = r(t / 2), c = a(t / 2), l = r((e + n) / 2), h = a((e + n) / 2), u = r((e - n) / 2), d = a((e - n) / 2), f = r((n - e) / 2), m = a((n - e) / 2);
    switch(i){
        case "XYX":
            s1.set(o * h, c * u, c * d, o * l);
            break;
        case "YZY":
            s1.set(c * d, o * h, c * u, o * l);
            break;
        case "ZXZ":
            s1.set(c * u, c * d, o * h, o * l);
            break;
        case "XZX":
            s1.set(o * h, c * m, c * f, o * l);
            break;
        case "YXY":
            s1.set(c * f, o * h, c * m, o * l);
            break;
        case "ZYZ":
            s1.set(c * m, c * f, o * h, o * l);
            break;
        default:
            console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i);
    }
}
function Ot(s1, e) {
    switch(e.constructor){
        case Float32Array:
            return s1;
        case Uint32Array:
            return s1 / 4294967295;
        case Uint16Array:
            return s1 / 65535;
        case Uint8Array:
            return s1 / 255;
        case Int32Array:
            return Math.max(s1 / 2147483647, -1);
        case Int16Array:
            return Math.max(s1 / 32767, -1);
        case Int8Array:
            return Math.max(s1 / 127, -1);
        default:
            throw new Error("Invalid component type.");
    }
}
function Be(s1, e) {
    switch(e.constructor){
        case Float32Array:
            return s1;
        case Uint32Array:
            return Math.round(s1 * 4294967295);
        case Uint16Array:
            return Math.round(s1 * 65535);
        case Uint8Array:
            return Math.round(s1 * 255);
        case Int32Array:
            return Math.round(s1 * 2147483647);
        case Int16Array:
            return Math.round(s1 * 32767);
        case Int8Array:
            return Math.round(s1 * 127);
        default:
            throw new Error("Invalid component type.");
    }
}
var yv = {
    DEG2RAD: ai,
    RAD2DEG: Zi,
    generateUUID: kt,
    clamp: ct,
    euclideanModulo: Yc,
    mapLinear: kf,
    inverseLerp: Hf,
    lerp: ys,
    damp: Gf,
    pingpong: Wf,
    smoothstep: Xf,
    smootherstep: qf,
    randInt: Yf,
    randFloat: Zf,
    randFloatSpread: Jf,
    seededRandom: $f,
    degToRad: Kf,
    radToDeg: Qf,
    isPowerOfTwo: mo,
    ceilPowerOfTwo: yd,
    floorPowerOfTwo: Wr,
    setQuaternionFromProperEuler: jf,
    normalize: Be,
    denormalize: Ot
}, Z = class s1 {
    constructor(e = 0, t = 0){
        s1.prototype.isVector2 = !0, this.x = e, this.y = t;
    }
    get width() {
        return this.x;
    }
    set width(e) {
        this.x = e;
    }
    get height() {
        return this.y;
    }
    set height(e) {
        this.y = e;
    }
    set(e, t) {
        return this.x = e, this.y = t, this;
    }
    setScalar(e) {
        return this.x = e, this.y = e, this;
    }
    setX(e) {
        return this.x = e, this;
    }
    setY(e) {
        return this.y = e, this;
    }
    setComponent(e, t) {
        switch(e){
            case 0:
                this.x = t;
                break;
            case 1:
                this.y = t;
                break;
            default:
                throw new Error("index is out of range: " + e);
        }
        return this;
    }
    getComponent(e) {
        switch(e){
            case 0:
                return this.x;
            case 1:
                return this.y;
            default:
                throw new Error("index is out of range: " + e);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y);
    }
    copy(e) {
        return this.x = e.x, this.y = e.y, this;
    }
    add(e) {
        return this.x += e.x, this.y += e.y, this;
    }
    addScalar(e) {
        return this.x += e, this.y += e, this;
    }
    addVectors(e, t) {
        return this.x = e.x + t.x, this.y = e.y + t.y, this;
    }
    addScaledVector(e, t) {
        return this.x += e.x * t, this.y += e.y * t, this;
    }
    sub(e) {
        return this.x -= e.x, this.y -= e.y, this;
    }
    subScalar(e) {
        return this.x -= e, this.y -= e, this;
    }
    subVectors(e, t) {
        return this.x = e.x - t.x, this.y = e.y - t.y, this;
    }
    multiply(e) {
        return this.x *= e.x, this.y *= e.y, this;
    }
    multiplyScalar(e) {
        return this.x *= e, this.y *= e, this;
    }
    divide(e) {
        return this.x /= e.x, this.y /= e.y, this;
    }
    divideScalar(e) {
        return this.multiplyScalar(1 / e);
    }
    applyMatrix3(e) {
        let t = this.x, n = this.y, i = e.elements;
        return this.x = i[0] * t + i[3] * n + i[6], this.y = i[1] * t + i[4] * n + i[7], this;
    }
    min(e) {
        return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
    }
    max(e) {
        return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
    }
    clamp(e, t) {
        return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this;
    }
    clampScalar(e, t) {
        return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this;
    }
    clampLength(e, t) {
        let n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
    }
    floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
    }
    ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
    }
    round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
    }
    roundToZero() {
        return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
    }
    negate() {
        return this.x = -this.x, this.y = -this.y, this;
    }
    dot(e) {
        return this.x * e.x + this.y * e.y;
    }
    cross(e) {
        return this.x * e.y - this.y * e.x;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    angle() {
        return Math.atan2(-this.y, -this.x) + Math.PI;
    }
    angleTo(e) {
        let t = Math.sqrt(this.lengthSq() * e.lengthSq());
        if (t === 0) return Math.PI / 2;
        let n = this.dot(e) / t;
        return Math.acos(ct(n, -1, 1));
    }
    distanceTo(e) {
        return Math.sqrt(this.distanceToSquared(e));
    }
    distanceToSquared(e) {
        let t = this.x - e.x, n = this.y - e.y;
        return t * t + n * n;
    }
    manhattanDistanceTo(e) {
        return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
    }
    setLength(e) {
        return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
        return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
    }
    lerpVectors(e, t, n) {
        return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this;
    }
    equals(e) {
        return e.x === this.x && e.y === this.y;
    }
    fromArray(e, t = 0) {
        return this.x = e[t], this.y = e[t + 1], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.x, e[t + 1] = this.y, e;
    }
    fromBufferAttribute(e, t) {
        return this.x = e.getX(t), this.y = e.getY(t), this;
    }
    rotateAround(e, t) {
        let n = Math.cos(t), i = Math.sin(t), r = this.x - e.x, a = this.y - e.y;
        return this.x = r * n - a * i + e.x, this.y = r * i + a * n + e.y, this;
    }
    random() {
        return this.x = Math.random(), this.y = Math.random(), this;
    }
    *[Symbol.iterator]() {
        yield this.x, yield this.y;
    }
}, He = class s1 {
    constructor(e, t, n, i, r, a, o, c, l){
        s1.prototype.isMatrix3 = !0, this.elements = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ], e !== void 0 && this.set(e, t, n, i, r, a, o, c, l);
    }
    set(e, t, n, i, r, a, o, c, l) {
        let h = this.elements;
        return h[0] = e, h[1] = i, h[2] = o, h[3] = t, h[4] = r, h[5] = c, h[6] = n, h[7] = a, h[8] = l, this;
    }
    identity() {
        return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
    }
    copy(e) {
        let t = this.elements, n = e.elements;
        return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this;
    }
    extractBasis(e, t, n) {
        return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
    }
    setFromMatrix4(e) {
        let t = e.elements;
        return this.set(t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]), this;
    }
    multiply(e) {
        return this.multiplyMatrices(this, e);
    }
    premultiply(e) {
        return this.multiplyMatrices(e, this);
    }
    multiplyMatrices(e, t) {
        let n = e.elements, i = t.elements, r = this.elements, a = n[0], o = n[3], c = n[6], l = n[1], h = n[4], u = n[7], d = n[2], f = n[5], m = n[8], _ = i[0], g = i[3], p = i[6], v = i[1], x = i[4], y = i[7], b = i[2], w = i[5], R = i[8];
        return r[0] = a * _ + o * v + c * b, r[3] = a * g + o * x + c * w, r[6] = a * p + o * y + c * R, r[1] = l * _ + h * v + u * b, r[4] = l * g + h * x + u * w, r[7] = l * p + h * y + u * R, r[2] = d * _ + f * v + m * b, r[5] = d * g + f * x + m * w, r[8] = d * p + f * y + m * R, this;
    }
    multiplyScalar(e) {
        let t = this.elements;
        return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
    }
    determinant() {
        let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8];
        return t * a * h - t * o * l - n * r * h + n * o * c + i * r * l - i * a * c;
    }
    invert() {
        let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8], u = h * a - o * l, d = o * c - h * r, f = l * r - a * c, m = t * u + n * d + i * f;
        if (m === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
        let _ = 1 / m;
        return e[0] = u * _, e[1] = (i * l - h * n) * _, e[2] = (o * n - i * a) * _, e[3] = d * _, e[4] = (h * t - i * c) * _, e[5] = (i * r - o * t) * _, e[6] = f * _, e[7] = (n * c - l * t) * _, e[8] = (a * t - n * r) * _, this;
    }
    transpose() {
        let e, t = this.elements;
        return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
    }
    getNormalMatrix(e) {
        return this.setFromMatrix4(e).invert().transpose();
    }
    transposeIntoArray(e) {
        let t = this.elements;
        return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
    }
    setUvTransform(e, t, n, i, r, a, o) {
        let c = Math.cos(r), l = Math.sin(r);
        return this.set(n * c, n * l, -n * (c * a + l * o) + a + e, -i * l, i * c, -i * (-l * a + c * o) + o + t, 0, 0, 1), this;
    }
    scale(e, t) {
        return this.premultiply(Ua.makeScale(e, t)), this;
    }
    rotate(e) {
        return this.premultiply(Ua.makeRotation(-e)), this;
    }
    translate(e, t) {
        return this.premultiply(Ua.makeTranslation(e, t)), this;
    }
    makeTranslation(e, t) {
        return e.isVector2 ? this.set(1, 0, e.x, 0, 1, e.y, 0, 0, 1) : this.set(1, 0, e, 0, 1, t, 0, 0, 1), this;
    }
    makeRotation(e) {
        let t = Math.cos(e), n = Math.sin(e);
        return this.set(t, -n, 0, n, t, 0, 0, 0, 1), this;
    }
    makeScale(e, t) {
        return this.set(e, 0, 0, 0, t, 0, 0, 0, 1), this;
    }
    equals(e) {
        let t = this.elements, n = e.elements;
        for(let i = 0; i < 9; i++)if (t[i] !== n[i]) return !1;
        return !0;
    }
    fromArray(e, t = 0) {
        for(let n = 0; n < 9; n++)this.elements[n] = e[n + t];
        return this;
    }
    toArray(e = [], t = 0) {
        let n = this.elements;
        return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e;
    }
    clone() {
        return new this.constructor().fromArray(this.elements);
    }
}, Ua = new He;
function Md(s1) {
    for(let e = s1.length - 1; e >= 0; --e)if (s1[e] >= 65535) return !0;
    return !1;
}
var ep = {
    Int8Array,
    Uint8Array,
    Uint8ClampedArray,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    Float32Array,
    Float64Array
};
function ki(s1, e) {
    return new ep[s1](e);
}
function ws(s1) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", s1);
}
function tp() {
    let s1 = ws("canvas");
    return s1.style.display = "block", s1;
}
var Bl = {};
function Ms(s1) {
    s1 in Bl || (Bl[s1] = !0, console.warn(s1));
}
var zl = new He().set(.8224621, .177538, 0, .0331941, .9668058, 0, .0170827, .0723974, .9105199), Vl = new He().set(1.2249401, -.2249404, 0, -.0420569, 1.0420571, 0, -.0196376, -.0786361, 1.0982735), Gs = {
    [Mn]: {
        transfer: zr,
        primaries: Vr,
        toReference: (s1)=>s1,
        fromReference: (s1)=>s1
    },
    [vt]: {
        transfer: nt,
        primaries: Vr,
        toReference: (s1)=>s1.convertSRGBToLinear(),
        fromReference: (s1)=>s1.convertLinearToSRGB()
    },
    [va]: {
        transfer: zr,
        primaries: kr,
        toReference: (s1)=>s1.applyMatrix3(Vl),
        fromReference: (s1)=>s1.applyMatrix3(zl)
    },
    [qc]: {
        transfer: nt,
        primaries: kr,
        toReference: (s1)=>s1.convertSRGBToLinear().applyMatrix3(Vl),
        fromReference: (s1)=>s1.applyMatrix3(zl).convertLinearToSRGB()
    }
}, np = new Set([
    Mn,
    va
]), Qe = {
    enabled: !0,
    _workingColorSpace: Mn,
    get legacyMode () {
        return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), !this.enabled;
    },
    set legacyMode (s){
        console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), this.enabled = !s;
    },
    get workingColorSpace () {
        return this._workingColorSpace;
    },
    set workingColorSpace (s){
        if (!np.has(s)) throw new Error(`Unsupported working color space, "${s}".`);
        this._workingColorSpace = s;
    },
    convert: function(s1, e, t) {
        if (this.enabled === !1 || e === t || !e || !t) return s1;
        let n = Gs[e].toReference, i = Gs[t].fromReference;
        return i(n(s1));
    },
    fromWorkingColorSpace: function(s1, e) {
        return this.convert(s1, this._workingColorSpace, e);
    },
    toWorkingColorSpace: function(s1, e) {
        return this.convert(s1, e, this._workingColorSpace);
    },
    getPrimaries: function(s1) {
        return Gs[s1].primaries;
    },
    getTransfer: function(s1) {
        return s1 === Xt ? zr : Gs[s1].transfer;
    }
};
function Xi(s1) {
    return s1 < .04045 ? s1 * .0773993808 : Math.pow(s1 * .9478672986 + .0521327014, 2.4);
}
function Da(s1) {
    return s1 < .0031308 ? s1 * 12.92 : 1.055 * Math.pow(s1, .41666) - .055;
}
var gi, Xr = class {
    static getDataURL(e) {
        if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u") return e.src;
        let t;
        if (e instanceof HTMLCanvasElement) t = e;
        else {
            gi === void 0 && (gi = ws("canvas")), gi.width = e.width, gi.height = e.height;
            let n = gi.getContext("2d");
            e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = gi;
        }
        return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", .6)) : t.toDataURL("image/png");
    }
    static sRGBToLinear(e) {
        if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
            let t = ws("canvas");
            t.width = e.width, t.height = e.height;
            let n = t.getContext("2d");
            n.drawImage(e, 0, 0, e.width, e.height);
            let i = n.getImageData(0, 0, e.width, e.height), r = i.data;
            for(let a = 0; a < r.length; a++)r[a] = Xi(r[a] / 255) * 255;
            return n.putImageData(i, 0, 0), t;
        } else if (e.data) {
            let t = e.data.slice(0);
            for(let n = 0; n < t.length; n++)t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[n] = Math.floor(Xi(t[n] / 255) * 255) : t[n] = Xi(t[n]);
            return {
                data: t,
                width: e.width,
                height: e.height
            };
        } else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
    }
}, ip = 0, In = class {
    constructor(e = null){
        this.isSource = !0, Object.defineProperty(this, "id", {
            value: ip++
        }), this.uuid = kt(), this.data = e, this.version = 0;
    }
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
    toJSON(e) {
        let t = e === void 0 || typeof e == "string";
        if (!t && e.images[this.uuid] !== void 0) return e.images[this.uuid];
        let n = {
            uuid: this.uuid,
            url: ""
        }, i = this.data;
        if (i !== null) {
            let r;
            if (Array.isArray(i)) {
                r = [];
                for(let a = 0, o = i.length; a < o; a++)i[a].isDataTexture ? r.push(Na(i[a].image)) : r.push(Na(i[a]));
            } else r = Na(i);
            n.url = r;
        }
        return t || (e.images[this.uuid] = n), n;
    }
};
function Na(s1) {
    return typeof HTMLImageElement < "u" && s1 instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && s1 instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && s1 instanceof ImageBitmap ? Xr.getDataURL(s1) : s1.data ? {
        data: Array.from(s1.data),
        width: s1.width,
        height: s1.height,
        type: s1.data.constructor.name
    } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
var sp = 0, St = class s1 extends sn {
    constructor(e = s1.DEFAULT_IMAGE, t = s1.DEFAULT_MAPPING, n = It, i = It, r = mt, a = li, o = Wt, c = On, l = s1.DEFAULT_ANISOTROPY, h = Xt){
        super(), this.isTexture = !0, Object.defineProperty(this, "id", {
            value: sp++
        }), this.uuid = kt(), this.name = "", this.source = new In(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = n, this.wrapT = i, this.magFilter = r, this.minFilter = a, this.anisotropy = l, this.format = o, this.internalFormat = null, this.type = c, this.offset = new Z(0, 0), this.repeat = new Z(1, 1), this.center = new Z(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new He, this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, typeof h == "string" ? this.colorSpace = h : (Ms("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace = h === ri ? vt : Xt), this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1, this.needsPMREMUpdate = !1;
    }
    get image() {
        return this.source.data;
    }
    set image(e = null) {
        this.source.data = e;
    }
    updateMatrix() {
        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.colorSpace = e.colorSpace, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
    }
    toJSON(e) {
        let t = e === void 0 || typeof e == "string";
        if (!t && e.textures[this.uuid] !== void 0) return e.textures[this.uuid];
        let n = {
            metadata: {
                version: 4.6,
                type: "Texture",
                generator: "Texture.toJSON"
            },
            uuid: this.uuid,
            name: this.name,
            image: this.source.toJSON(e).uuid,
            mapping: this.mapping,
            channel: this.channel,
            repeat: [
                this.repeat.x,
                this.repeat.y
            ],
            offset: [
                this.offset.x,
                this.offset.y
            ],
            center: [
                this.center.x,
                this.center.y
            ],
            rotation: this.rotation,
            wrap: [
                this.wrapS,
                this.wrapT
            ],
            format: this.format,
            internalFormat: this.internalFormat,
            type: this.type,
            colorSpace: this.colorSpace,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            generateMipmaps: this.generateMipmaps,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment
        };
        return Object.keys(this.userData).length > 0 && (n.userData = this.userData), t || (e.textures[this.uuid] = n), n;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
    transformUv(e) {
        if (this.mapping !== Gc) return e;
        if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1) switch(this.wrapS){
            case Dr:
                e.x = e.x - Math.floor(e.x);
                break;
            case It:
                e.x = e.x < 0 ? 0 : 1;
                break;
            case Nr:
                Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
                break;
        }
        if (e.y < 0 || e.y > 1) switch(this.wrapT){
            case Dr:
                e.y = e.y - Math.floor(e.y);
                break;
            case It:
                e.y = e.y < 0 ? 0 : 1;
                break;
            case Nr:
                Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
                break;
        }
        return this.flipY && (e.y = 1 - e.y), e;
    }
    set needsUpdate(e) {
        e === !0 && (this.version++, this.source.needsUpdate = !0);
    }
    get encoding() {
        return Ms("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace === vt ? ri : vd;
    }
    set encoding(e) {
        Ms("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace = e === ri ? vt : Xt;
    }
};
St.DEFAULT_IMAGE = null;
St.DEFAULT_MAPPING = Gc;
St.DEFAULT_ANISOTROPY = 1;
var je = class s1 {
    constructor(e = 0, t = 0, n = 0, i = 1){
        s1.prototype.isVector4 = !0, this.x = e, this.y = t, this.z = n, this.w = i;
    }
    get width() {
        return this.z;
    }
    set width(e) {
        this.z = e;
    }
    get height() {
        return this.w;
    }
    set height(e) {
        this.w = e;
    }
    set(e, t, n, i) {
        return this.x = e, this.y = t, this.z = n, this.w = i, this;
    }
    setScalar(e) {
        return this.x = e, this.y = e, this.z = e, this.w = e, this;
    }
    setX(e) {
        return this.x = e, this;
    }
    setY(e) {
        return this.y = e, this;
    }
    setZ(e) {
        return this.z = e, this;
    }
    setW(e) {
        return this.w = e, this;
    }
    setComponent(e, t) {
        switch(e){
            case 0:
                this.x = t;
                break;
            case 1:
                this.y = t;
                break;
            case 2:
                this.z = t;
                break;
            case 3:
                this.w = t;
                break;
            default:
                throw new Error("index is out of range: " + e);
        }
        return this;
    }
    getComponent(e) {
        switch(e){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            case 3:
                return this.w;
            default:
                throw new Error("index is out of range: " + e);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(e) {
        return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
    }
    add(e) {
        return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
    }
    addScalar(e) {
        return this.x += e, this.y += e, this.z += e, this.w += e, this;
    }
    addVectors(e, t) {
        return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
    }
    addScaledVector(e, t) {
        return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
    }
    sub(e) {
        return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
    }
    subScalar(e) {
        return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
    }
    subVectors(e, t) {
        return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
    }
    multiply(e) {
        return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
    }
    multiplyScalar(e) {
        return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
    }
    applyMatrix4(e) {
        let t = this.x, n = this.y, i = this.z, r = this.w, a = e.elements;
        return this.x = a[0] * t + a[4] * n + a[8] * i + a[12] * r, this.y = a[1] * t + a[5] * n + a[9] * i + a[13] * r, this.z = a[2] * t + a[6] * n + a[10] * i + a[14] * r, this.w = a[3] * t + a[7] * n + a[11] * i + a[15] * r, this;
    }
    divideScalar(e) {
        return this.multiplyScalar(1 / e);
    }
    setAxisAngleFromQuaternion(e) {
        this.w = 2 * Math.acos(e.w);
        let t = Math.sqrt(1 - e.w * e.w);
        return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
    }
    setAxisAngleFromRotationMatrix(e) {
        let t, n, i, r, c = e.elements, l = c[0], h = c[4], u = c[8], d = c[1], f = c[5], m = c[9], _ = c[2], g = c[6], p = c[10];
        if (Math.abs(h - d) < .01 && Math.abs(u - _) < .01 && Math.abs(m - g) < .01) {
            if (Math.abs(h + d) < .1 && Math.abs(u + _) < .1 && Math.abs(m + g) < .1 && Math.abs(l + f + p - 3) < .1) return this.set(1, 0, 0, 0), this;
            t = Math.PI;
            let x = (l + 1) / 2, y = (f + 1) / 2, b = (p + 1) / 2, w = (h + d) / 4, R = (u + _) / 4, I = (m + g) / 4;
            return x > y && x > b ? x < .01 ? (n = 0, i = .707106781, r = .707106781) : (n = Math.sqrt(x), i = w / n, r = R / n) : y > b ? y < .01 ? (n = .707106781, i = 0, r = .707106781) : (i = Math.sqrt(y), n = w / i, r = I / i) : b < .01 ? (n = .707106781, i = .707106781, r = 0) : (r = Math.sqrt(b), n = R / r, i = I / r), this.set(n, i, r, t), this;
        }
        let v = Math.sqrt((g - m) * (g - m) + (u - _) * (u - _) + (d - h) * (d - h));
        return Math.abs(v) < .001 && (v = 1), this.x = (g - m) / v, this.y = (u - _) / v, this.z = (d - h) / v, this.w = Math.acos((l + f + p - 1) / 2), this;
    }
    min(e) {
        return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
    }
    max(e) {
        return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
    }
    clamp(e, t) {
        return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this;
    }
    clampScalar(e, t) {
        return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this;
    }
    clampLength(e, t) {
        let n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
    }
    floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
    }
    ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
    }
    round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
    }
    roundToZero() {
        return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
    }
    negate() {
        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
    }
    dot(e) {
        return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(e) {
        return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
        return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
    }
    lerpVectors(e, t, n) {
        return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this;
    }
    equals(e) {
        return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
    }
    fromArray(e, t = 0) {
        return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
    }
    fromBufferAttribute(e, t) {
        return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
    }
    random() {
        return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
    }
    *[Symbol.iterator]() {
        yield this.x, yield this.y, yield this.z, yield this.w;
    }
}, go = class extends sn {
    constructor(e = 1, t = 1, n = {}){
        super(), this.isRenderTarget = !0, this.width = e, this.height = t, this.depth = 1, this.scissor = new je(0, 0, e, t), this.scissorTest = !1, this.viewport = new je(0, 0, e, t);
        let i = {
            width: e,
            height: t,
            depth: 1
        };
        n.encoding !== void 0 && (Ms("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."), n.colorSpace = n.encoding === ri ? vt : Xt), n = Object.assign({
            generateMipmaps: !1,
            internalFormat: null,
            minFilter: mt,
            depthBuffer: !0,
            stencilBuffer: !1,
            depthTexture: null,
            samples: 0
        }, n), this.texture = new St(i, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.flipY = !1, this.texture.generateMipmaps = n.generateMipmaps, this.texture.internalFormat = n.internalFormat, this.depthBuffer = n.depthBuffer, this.stencilBuffer = n.stencilBuffer, this.depthTexture = n.depthTexture, this.samples = n.samples;
    }
    setSize(e, t, n = 1) {
        (this.width !== e || this.height !== t || this.depth !== n) && (this.width = e, this.height = t, this.depth = n, this.texture.image.width = e, this.texture.image.height = t, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.texture = e.texture.clone(), this.texture.isRenderTargetTexture = !0;
        let t = Object.assign({}, e.texture.image);
        return this.texture.source = new In(t), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}, qt = class extends go {
    constructor(e = 1, t = 1, n = {}){
        super(e, t, n), this.isWebGLRenderTarget = !0;
    }
}, As = class extends St {
    constructor(e = null, t = 1, n = 1, i = 1){
        super(null), this.isDataArrayTexture = !0, this.image = {
            data: e,
            width: t,
            height: n,
            depth: i
        }, this.magFilter = pt, this.minFilter = pt, this.wrapR = It, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
    }
}, kl = class extends qt {
    constructor(e = 1, t = 1, n = 1){
        super(e, t), this.isWebGLArrayRenderTarget = !0, this.depth = n, this.texture = new As(null, e, t, n), this.texture.isRenderTargetTexture = !0;
    }
}, qr = class extends St {
    constructor(e = null, t = 1, n = 1, i = 1){
        super(null), this.isData3DTexture = !0, this.image = {
            data: e,
            width: t,
            height: n,
            depth: i
        }, this.magFilter = pt, this.minFilter = pt, this.wrapR = It, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
    }
}, Hl = class extends qt {
    constructor(e = 1, t = 1, n = 1){
        super(e, t), this.isWebGL3DRenderTarget = !0, this.depth = n, this.texture = new qr(null, e, t, n), this.texture.isRenderTargetTexture = !0;
    }
}, Gl = class extends qt {
    constructor(e = 1, t = 1, n = 1, i = {}){
        super(e, t, i), this.isWebGLMultipleRenderTargets = !0;
        let r = this.texture;
        this.texture = [];
        for(let a = 0; a < n; a++)this.texture[a] = r.clone(), this.texture[a].isRenderTargetTexture = !0;
    }
    setSize(e, t, n = 1) {
        if (this.width !== e || this.height !== t || this.depth !== n) {
            this.width = e, this.height = t, this.depth = n;
            for(let i = 0, r = this.texture.length; i < r; i++)this.texture[i].image.width = e, this.texture[i].image.height = t, this.texture[i].image.depth = n;
            this.dispose();
        }
        this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
    }
    copy(e) {
        this.dispose(), this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.texture.length = 0;
        for(let t = 0, n = e.texture.length; t < n; t++)this.texture[t] = e.texture[t].clone(), this.texture[t].isRenderTargetTexture = !0;
        return this;
    }
}, Ut = class {
    constructor(e = 0, t = 0, n = 0, i = 1){
        this.isQuaternion = !0, this._x = e, this._y = t, this._z = n, this._w = i;
    }
    static slerpFlat(e, t, n, i, r, a, o) {
        let c = n[i + 0], l = n[i + 1], h = n[i + 2], u = n[i + 3], d = r[a + 0], f = r[a + 1], m = r[a + 2], _ = r[a + 3];
        if (o === 0) {
            e[t + 0] = c, e[t + 1] = l, e[t + 2] = h, e[t + 3] = u;
            return;
        }
        if (o === 1) {
            e[t + 0] = d, e[t + 1] = f, e[t + 2] = m, e[t + 3] = _;
            return;
        }
        if (u !== _ || c !== d || l !== f || h !== m) {
            let g = 1 - o, p = c * d + l * f + h * m + u * _, v = p >= 0 ? 1 : -1, x = 1 - p * p;
            if (x > Number.EPSILON) {
                let b = Math.sqrt(x), w = Math.atan2(b, p * v);
                g = Math.sin(g * w) / b, o = Math.sin(o * w) / b;
            }
            let y = o * v;
            if (c = c * g + d * y, l = l * g + f * y, h = h * g + m * y, u = u * g + _ * y, g === 1 - o) {
                let b = 1 / Math.sqrt(c * c + l * l + h * h + u * u);
                c *= b, l *= b, h *= b, u *= b;
            }
        }
        e[t] = c, e[t + 1] = l, e[t + 2] = h, e[t + 3] = u;
    }
    static multiplyQuaternionsFlat(e, t, n, i, r, a) {
        let o = n[i], c = n[i + 1], l = n[i + 2], h = n[i + 3], u = r[a], d = r[a + 1], f = r[a + 2], m = r[a + 3];
        return e[t] = o * m + h * u + c * f - l * d, e[t + 1] = c * m + h * d + l * u - o * f, e[t + 2] = l * m + h * f + o * d - c * u, e[t + 3] = h * m - o * u - c * d - l * f, e;
    }
    get x() {
        return this._x;
    }
    set x(e) {
        this._x = e, this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(e) {
        this._y = e, this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(e) {
        this._z = e, this._onChangeCallback();
    }
    get w() {
        return this._w;
    }
    set w(e) {
        this._w = e, this._onChangeCallback();
    }
    set(e, t, n, i) {
        return this._x = e, this._y = t, this._z = n, this._w = i, this._onChangeCallback(), this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(e) {
        return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
    }
    setFromEuler(e, t) {
        let n = e._x, i = e._y, r = e._z, a = e._order, o = Math.cos, c = Math.sin, l = o(n / 2), h = o(i / 2), u = o(r / 2), d = c(n / 2), f = c(i / 2), m = c(r / 2);
        switch(a){
            case "XYZ":
                this._x = d * h * u + l * f * m, this._y = l * f * u - d * h * m, this._z = l * h * m + d * f * u, this._w = l * h * u - d * f * m;
                break;
            case "YXZ":
                this._x = d * h * u + l * f * m, this._y = l * f * u - d * h * m, this._z = l * h * m - d * f * u, this._w = l * h * u + d * f * m;
                break;
            case "ZXY":
                this._x = d * h * u - l * f * m, this._y = l * f * u + d * h * m, this._z = l * h * m + d * f * u, this._w = l * h * u - d * f * m;
                break;
            case "ZYX":
                this._x = d * h * u - l * f * m, this._y = l * f * u + d * h * m, this._z = l * h * m - d * f * u, this._w = l * h * u + d * f * m;
                break;
            case "YZX":
                this._x = d * h * u + l * f * m, this._y = l * f * u + d * h * m, this._z = l * h * m - d * f * u, this._w = l * h * u - d * f * m;
                break;
            case "XZY":
                this._x = d * h * u - l * f * m, this._y = l * f * u - d * h * m, this._z = l * h * m + d * f * u, this._w = l * h * u + d * f * m;
                break;
            default:
                console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + a);
        }
        return t !== !1 && this._onChangeCallback(), this;
    }
    setFromAxisAngle(e, t) {
        let n = t / 2, i = Math.sin(n);
        return this._x = e.x * i, this._y = e.y * i, this._z = e.z * i, this._w = Math.cos(n), this._onChangeCallback(), this;
    }
    setFromRotationMatrix(e) {
        let t = e.elements, n = t[0], i = t[4], r = t[8], a = t[1], o = t[5], c = t[9], l = t[2], h = t[6], u = t[10], d = n + o + u;
        if (d > 0) {
            let f = .5 / Math.sqrt(d + 1);
            this._w = .25 / f, this._x = (h - c) * f, this._y = (r - l) * f, this._z = (a - i) * f;
        } else if (n > o && n > u) {
            let f = 2 * Math.sqrt(1 + n - o - u);
            this._w = (h - c) / f, this._x = .25 * f, this._y = (i + a) / f, this._z = (r + l) / f;
        } else if (o > u) {
            let f = 2 * Math.sqrt(1 + o - n - u);
            this._w = (r - l) / f, this._x = (i + a) / f, this._y = .25 * f, this._z = (c + h) / f;
        } else {
            let f = 2 * Math.sqrt(1 + u - n - o);
            this._w = (a - i) / f, this._x = (r + l) / f, this._y = (c + h) / f, this._z = .25 * f;
        }
        return this._onChangeCallback(), this;
    }
    setFromUnitVectors(e, t) {
        let n = e.dot(t) + 1;
        return n < Number.EPSILON ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize();
    }
    angleTo(e) {
        return 2 * Math.acos(Math.abs(ct(this.dot(e), -1, 1)));
    }
    rotateTowards(e, t) {
        let n = this.angleTo(e);
        if (n === 0) return this;
        let i = Math.min(1, t / n);
        return this.slerp(e, i), this;
    }
    identity() {
        return this.set(0, 0, 0, 1);
    }
    invert() {
        return this.conjugate();
    }
    conjugate() {
        return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
    }
    dot(e) {
        return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
    }
    lengthSq() {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
        let e = this.length();
        return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
    }
    multiply(e) {
        return this.multiplyQuaternions(this, e);
    }
    premultiply(e) {
        return this.multiplyQuaternions(e, this);
    }
    multiplyQuaternions(e, t) {
        let n = e._x, i = e._y, r = e._z, a = e._w, o = t._x, c = t._y, l = t._z, h = t._w;
        return this._x = n * h + a * o + i * l - r * c, this._y = i * h + a * c + r * o - n * l, this._z = r * h + a * l + n * c - i * o, this._w = a * h - n * o - i * c - r * l, this._onChangeCallback(), this;
    }
    slerp(e, t) {
        if (t === 0) return this;
        if (t === 1) return this.copy(e);
        let n = this._x, i = this._y, r = this._z, a = this._w, o = a * e._w + n * e._x + i * e._y + r * e._z;
        if (o < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, o = -o) : this.copy(e), o >= 1) return this._w = a, this._x = n, this._y = i, this._z = r, this;
        let c = 1 - o * o;
        if (c <= Number.EPSILON) {
            let f = 1 - t;
            return this._w = f * a + t * this._w, this._x = f * n + t * this._x, this._y = f * i + t * this._y, this._z = f * r + t * this._z, this.normalize(), this._onChangeCallback(), this;
        }
        let l = Math.sqrt(c), h = Math.atan2(l, o), u = Math.sin((1 - t) * h) / l, d = Math.sin(t * h) / l;
        return this._w = a * u + this._w * d, this._x = n * u + this._x * d, this._y = i * u + this._y * d, this._z = r * u + this._z * d, this._onChangeCallback(), this;
    }
    slerpQuaternions(e, t, n) {
        return this.copy(e).slerp(t, n);
    }
    random() {
        let e = Math.random(), t = Math.sqrt(1 - e), n = Math.sqrt(e), i = 2 * Math.PI * Math.random(), r = 2 * Math.PI * Math.random();
        return this.set(t * Math.cos(i), n * Math.sin(r), n * Math.cos(r), t * Math.sin(i));
    }
    equals(e) {
        return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
    }
    fromArray(e, t = 0) {
        return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
    }
    fromBufferAttribute(e, t) {
        return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this;
    }
    toJSON() {
        return this.toArray();
    }
    _onChange(e) {
        return this._onChangeCallback = e, this;
    }
    _onChangeCallback() {}
    *[Symbol.iterator]() {
        yield this._x, yield this._y, yield this._z, yield this._w;
    }
}, A = class s1 {
    constructor(e = 0, t = 0, n = 0){
        s1.prototype.isVector3 = !0, this.x = e, this.y = t, this.z = n;
    }
    set(e, t, n) {
        return n === void 0 && (n = this.z), this.x = e, this.y = t, this.z = n, this;
    }
    setScalar(e) {
        return this.x = e, this.y = e, this.z = e, this;
    }
    setX(e) {
        return this.x = e, this;
    }
    setY(e) {
        return this.y = e, this;
    }
    setZ(e) {
        return this.z = e, this;
    }
    setComponent(e, t) {
        switch(e){
            case 0:
                this.x = t;
                break;
            case 1:
                this.y = t;
                break;
            case 2:
                this.z = t;
                break;
            default:
                throw new Error("index is out of range: " + e);
        }
        return this;
    }
    getComponent(e) {
        switch(e){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            default:
                throw new Error("index is out of range: " + e);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z);
    }
    copy(e) {
        return this.x = e.x, this.y = e.y, this.z = e.z, this;
    }
    add(e) {
        return this.x += e.x, this.y += e.y, this.z += e.z, this;
    }
    addScalar(e) {
        return this.x += e, this.y += e, this.z += e, this;
    }
    addVectors(e, t) {
        return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
    }
    addScaledVector(e, t) {
        return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
    }
    sub(e) {
        return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
    }
    subScalar(e) {
        return this.x -= e, this.y -= e, this.z -= e, this;
    }
    subVectors(e, t) {
        return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
    }
    multiply(e) {
        return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
    }
    multiplyScalar(e) {
        return this.x *= e, this.y *= e, this.z *= e, this;
    }
    multiplyVectors(e, t) {
        return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
    }
    applyEuler(e) {
        return this.applyQuaternion(Wl.setFromEuler(e));
    }
    applyAxisAngle(e, t) {
        return this.applyQuaternion(Wl.setFromAxisAngle(e, t));
    }
    applyMatrix3(e) {
        let t = this.x, n = this.y, i = this.z, r = e.elements;
        return this.x = r[0] * t + r[3] * n + r[6] * i, this.y = r[1] * t + r[4] * n + r[7] * i, this.z = r[2] * t + r[5] * n + r[8] * i, this;
    }
    applyNormalMatrix(e) {
        return this.applyMatrix3(e).normalize();
    }
    applyMatrix4(e) {
        let t = this.x, n = this.y, i = this.z, r = e.elements, a = 1 / (r[3] * t + r[7] * n + r[11] * i + r[15]);
        return this.x = (r[0] * t + r[4] * n + r[8] * i + r[12]) * a, this.y = (r[1] * t + r[5] * n + r[9] * i + r[13]) * a, this.z = (r[2] * t + r[6] * n + r[10] * i + r[14]) * a, this;
    }
    applyQuaternion(e) {
        let t = this.x, n = this.y, i = this.z, r = e.x, a = e.y, o = e.z, c = e.w, l = c * t + a * i - o * n, h = c * n + o * t - r * i, u = c * i + r * n - a * t, d = -r * t - a * n - o * i;
        return this.x = l * c + d * -r + h * -o - u * -a, this.y = h * c + d * -a + u * -r - l * -o, this.z = u * c + d * -o + l * -a - h * -r, this;
    }
    project(e) {
        return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
    }
    unproject(e) {
        return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
    }
    transformDirection(e) {
        let t = this.x, n = this.y, i = this.z, r = e.elements;
        return this.x = r[0] * t + r[4] * n + r[8] * i, this.y = r[1] * t + r[5] * n + r[9] * i, this.z = r[2] * t + r[6] * n + r[10] * i, this.normalize();
    }
    divide(e) {
        return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
    }
    divideScalar(e) {
        return this.multiplyScalar(1 / e);
    }
    min(e) {
        return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
    }
    max(e) {
        return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
    }
    clamp(e, t) {
        return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this;
    }
    clampScalar(e, t) {
        return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this;
    }
    clampLength(e, t) {
        let n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
    }
    floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
    }
    ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
    }
    round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
    }
    roundToZero() {
        return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
    }
    negate() {
        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
    }
    dot(e) {
        return this.x * e.x + this.y * e.y + this.z * e.z;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(e) {
        return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
        return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
    }
    lerpVectors(e, t, n) {
        return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this;
    }
    cross(e) {
        return this.crossVectors(this, e);
    }
    crossVectors(e, t) {
        let n = e.x, i = e.y, r = e.z, a = t.x, o = t.y, c = t.z;
        return this.x = i * c - r * o, this.y = r * a - n * c, this.z = n * o - i * a, this;
    }
    projectOnVector(e) {
        let t = e.lengthSq();
        if (t === 0) return this.set(0, 0, 0);
        let n = e.dot(this) / t;
        return this.copy(e).multiplyScalar(n);
    }
    projectOnPlane(e) {
        return Oa.copy(this).projectOnVector(e), this.sub(Oa);
    }
    reflect(e) {
        return this.sub(Oa.copy(e).multiplyScalar(2 * this.dot(e)));
    }
    angleTo(e) {
        let t = Math.sqrt(this.lengthSq() * e.lengthSq());
        if (t === 0) return Math.PI / 2;
        let n = this.dot(e) / t;
        return Math.acos(ct(n, -1, 1));
    }
    distanceTo(e) {
        return Math.sqrt(this.distanceToSquared(e));
    }
    distanceToSquared(e) {
        let t = this.x - e.x, n = this.y - e.y, i = this.z - e.z;
        return t * t + n * n + i * i;
    }
    manhattanDistanceTo(e) {
        return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
    }
    setFromSpherical(e) {
        return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
    }
    setFromSphericalCoords(e, t, n) {
        let i = Math.sin(t) * e;
        return this.x = i * Math.sin(n), this.y = Math.cos(t) * e, this.z = i * Math.cos(n), this;
    }
    setFromCylindrical(e) {
        return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
    }
    setFromCylindricalCoords(e, t, n) {
        return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this;
    }
    setFromMatrixPosition(e) {
        let t = e.elements;
        return this.x = t[12], this.y = t[13], this.z = t[14], this;
    }
    setFromMatrixScale(e) {
        let t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(), i = this.setFromMatrixColumn(e, 2).length();
        return this.x = t, this.y = n, this.z = i, this;
    }
    setFromMatrixColumn(e, t) {
        return this.fromArray(e.elements, t * 4);
    }
    setFromMatrix3Column(e, t) {
        return this.fromArray(e.elements, t * 3);
    }
    setFromEuler(e) {
        return this.x = e._x, this.y = e._y, this.z = e._z, this;
    }
    setFromColor(e) {
        return this.x = e.r, this.y = e.g, this.z = e.b, this;
    }
    equals(e) {
        return e.x === this.x && e.y === this.y && e.z === this.z;
    }
    fromArray(e, t = 0) {
        return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
    }
    fromBufferAttribute(e, t) {
        return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
    }
    random() {
        return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
    }
    randomDirection() {
        let e = (Math.random() - .5) * 2, t = Math.random() * Math.PI * 2, n = Math.sqrt(1 - e ** 2);
        return this.x = n * Math.cos(t), this.y = n * Math.sin(t), this.z = e, this;
    }
    *[Symbol.iterator]() {
        yield this.x, yield this.y, yield this.z;
    }
}, Oa = new A, Wl = new Ut, Qt = class {
    constructor(e = new A(1 / 0, 1 / 0, 1 / 0), t = new A(-1 / 0, -1 / 0, -1 / 0)){
        this.isBox3 = !0, this.min = e, this.max = t;
    }
    set(e, t) {
        return this.min.copy(e), this.max.copy(t), this;
    }
    setFromArray(e) {
        this.makeEmpty();
        for(let t = 0, n = e.length; t < n; t += 3)this.expandByPoint(cn.fromArray(e, t));
        return this;
    }
    setFromBufferAttribute(e) {
        this.makeEmpty();
        for(let t = 0, n = e.count; t < n; t++)this.expandByPoint(cn.fromBufferAttribute(e, t));
        return this;
    }
    setFromPoints(e) {
        this.makeEmpty();
        for(let t = 0, n = e.length; t < n; t++)this.expandByPoint(e[t]);
        return this;
    }
    setFromCenterAndSize(e, t) {
        let n = cn.copy(t).multiplyScalar(.5);
        return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
    }
    setFromObject(e, t = !1) {
        return this.makeEmpty(), this.expandByObject(e, t);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.min.copy(e.min), this.max.copy(e.max), this;
    }
    makeEmpty() {
        return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
    }
    isEmpty() {
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(e) {
        return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5);
    }
    getSize(e) {
        return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
    }
    expandByPoint(e) {
        return this.min.min(e), this.max.max(e), this;
    }
    expandByVector(e) {
        return this.min.sub(e), this.max.add(e), this;
    }
    expandByScalar(e) {
        return this.min.addScalar(-e), this.max.addScalar(e), this;
    }
    expandByObject(e, t = !1) {
        if (e.updateWorldMatrix(!1, !1), e.boundingBox !== void 0) e.boundingBox === null && e.computeBoundingBox(), _i.copy(e.boundingBox), _i.applyMatrix4(e.matrixWorld), this.union(_i);
        else {
            let i = e.geometry;
            if (i !== void 0) if (t && i.attributes !== void 0 && i.attributes.position !== void 0) {
                let r = i.attributes.position;
                for(let a = 0, o = r.count; a < o; a++)cn.fromBufferAttribute(r, a).applyMatrix4(e.matrixWorld), this.expandByPoint(cn);
            } else i.boundingBox === null && i.computeBoundingBox(), _i.copy(i.boundingBox), _i.applyMatrix4(e.matrixWorld), this.union(_i);
        }
        let n = e.children;
        for(let i = 0, r = n.length; i < r; i++)this.expandByObject(n[i], t);
        return this;
    }
    containsPoint(e) {
        return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z);
    }
    containsBox(e) {
        return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
    }
    getParameter(e, t) {
        return t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y), (e.z - this.min.z) / (this.max.z - this.min.z));
    }
    intersectsBox(e) {
        return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z);
    }
    intersectsSphere(e) {
        return this.clampPoint(e.center, cn), cn.distanceToSquared(e.center) <= e.radius * e.radius;
    }
    intersectsPlane(e) {
        let t, n;
        return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant;
    }
    intersectsTriangle(e) {
        if (this.isEmpty()) return !1;
        this.getCenter(cs), Ws.subVectors(this.max, cs), xi.subVectors(e.a, cs), vi.subVectors(e.b, cs), yi.subVectors(e.c, cs), Tn.subVectors(vi, xi), wn.subVectors(yi, vi), Wn.subVectors(xi, yi);
        let t = [
            0,
            -Tn.z,
            Tn.y,
            0,
            -wn.z,
            wn.y,
            0,
            -Wn.z,
            Wn.y,
            Tn.z,
            0,
            -Tn.x,
            wn.z,
            0,
            -wn.x,
            Wn.z,
            0,
            -Wn.x,
            -Tn.y,
            Tn.x,
            0,
            -wn.y,
            wn.x,
            0,
            -Wn.y,
            Wn.x,
            0
        ];
        return !Fa(t, xi, vi, yi, Ws) || (t = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ], !Fa(t, xi, vi, yi, Ws)) ? !1 : (Xs.crossVectors(Tn, wn), t = [
            Xs.x,
            Xs.y,
            Xs.z
        ], Fa(t, xi, vi, yi, Ws));
    }
    clampPoint(e, t) {
        return t.copy(e).clamp(this.min, this.max);
    }
    distanceToPoint(e) {
        return this.clampPoint(e, cn).distanceTo(e);
    }
    getBoundingSphere(e) {
        return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(cn).length() * .5), e;
    }
    intersect(e) {
        return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
    }
    union(e) {
        return this.min.min(e.min), this.max.max(e.max), this;
    }
    applyMatrix4(e) {
        return this.isEmpty() ? this : (on[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), on[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), on[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), on[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), on[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), on[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), on[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), on[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(on), this);
    }
    translate(e) {
        return this.min.add(e), this.max.add(e), this;
    }
    equals(e) {
        return e.min.equals(this.min) && e.max.equals(this.max);
    }
}, on = [
    new A,
    new A,
    new A,
    new A,
    new A,
    new A,
    new A,
    new A
], cn = new A, _i = new Qt, xi = new A, vi = new A, yi = new A, Tn = new A, wn = new A, Wn = new A, cs = new A, Ws = new A, Xs = new A, Xn = new A;
function Fa(s1, e, t, n, i) {
    for(let r = 0, a = s1.length - 3; r <= a; r += 3){
        Xn.fromArray(s1, r);
        let o = i.x * Math.abs(Xn.x) + i.y * Math.abs(Xn.y) + i.z * Math.abs(Xn.z), c = e.dot(Xn), l = t.dot(Xn), h = n.dot(Xn);
        if (Math.max(-Math.max(c, l, h), Math.min(c, l, h)) > o) return !1;
    }
    return !0;
}
var rp = new Qt, ls = new A, Ba = new A, Yt = class {
    constructor(e = new A, t = -1){
        this.center = e, this.radius = t;
    }
    set(e, t) {
        return this.center.copy(e), this.radius = t, this;
    }
    setFromPoints(e, t) {
        let n = this.center;
        t !== void 0 ? n.copy(t) : rp.setFromPoints(e).getCenter(n);
        let i = 0;
        for(let r = 0, a = e.length; r < a; r++)i = Math.max(i, n.distanceToSquared(e[r]));
        return this.radius = Math.sqrt(i), this;
    }
    copy(e) {
        return this.center.copy(e.center), this.radius = e.radius, this;
    }
    isEmpty() {
        return this.radius < 0;
    }
    makeEmpty() {
        return this.center.set(0, 0, 0), this.radius = -1, this;
    }
    containsPoint(e) {
        return e.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(e) {
        return e.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(e) {
        let t = this.radius + e.radius;
        return e.center.distanceToSquared(this.center) <= t * t;
    }
    intersectsBox(e) {
        return e.intersectsSphere(this);
    }
    intersectsPlane(e) {
        return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(e, t) {
        let n = this.center.distanceToSquared(e);
        return t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
    }
    getBoundingBox(e) {
        return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
    }
    applyMatrix4(e) {
        return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
    }
    translate(e) {
        return this.center.add(e), this;
    }
    expandByPoint(e) {
        if (this.isEmpty()) return this.center.copy(e), this.radius = 0, this;
        ls.subVectors(e, this.center);
        let t = ls.lengthSq();
        if (t > this.radius * this.radius) {
            let n = Math.sqrt(t), i = (n - this.radius) * .5;
            this.center.addScaledVector(ls, i / n), this.radius += i;
        }
        return this;
    }
    union(e) {
        return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (Ba.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(ls.copy(e.center).add(Ba)), this.expandByPoint(ls.copy(e.center).sub(Ba))), this);
    }
    equals(e) {
        return e.center.equals(this.center) && e.radius === this.radius;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, ln = new A, za = new A, qs = new A, An = new A, Va = new A, Ys = new A, ka = new A, hi = class {
    constructor(e = new A, t = new A(0, 0, -1)){
        this.origin = e, this.direction = t;
    }
    set(e, t) {
        return this.origin.copy(e), this.direction.copy(t), this;
    }
    copy(e) {
        return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
    }
    at(e, t) {
        return t.copy(this.origin).addScaledVector(this.direction, e);
    }
    lookAt(e) {
        return this.direction.copy(e).sub(this.origin).normalize(), this;
    }
    recast(e) {
        return this.origin.copy(this.at(e, ln)), this;
    }
    closestPointToPoint(e, t) {
        t.subVectors(e, this.origin);
        let n = t.dot(this.direction);
        return n < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, n);
    }
    distanceToPoint(e) {
        return Math.sqrt(this.distanceSqToPoint(e));
    }
    distanceSqToPoint(e) {
        let t = ln.subVectors(e, this.origin).dot(this.direction);
        return t < 0 ? this.origin.distanceToSquared(e) : (ln.copy(this.origin).addScaledVector(this.direction, t), ln.distanceToSquared(e));
    }
    distanceSqToSegment(e, t, n, i) {
        za.copy(e).add(t).multiplyScalar(.5), qs.copy(t).sub(e).normalize(), An.copy(this.origin).sub(za);
        let r = e.distanceTo(t) * .5, a = -this.direction.dot(qs), o = An.dot(this.direction), c = -An.dot(qs), l = An.lengthSq(), h = Math.abs(1 - a * a), u, d, f, m;
        if (h > 0) if (u = a * c - o, d = a * o - c, m = r * h, u >= 0) if (d >= -m) if (d <= m) {
            let _ = 1 / h;
            u *= _, d *= _, f = u * (u + a * d + 2 * o) + d * (a * u + d + 2 * c) + l;
        } else d = r, u = Math.max(0, -(a * d + o)), f = -u * u + d * (d + 2 * c) + l;
        else d = -r, u = Math.max(0, -(a * d + o)), f = -u * u + d * (d + 2 * c) + l;
        else d <= -m ? (u = Math.max(0, -(-a * r + o)), d = u > 0 ? -r : Math.min(Math.max(-r, -c), r), f = -u * u + d * (d + 2 * c) + l) : d <= m ? (u = 0, d = Math.min(Math.max(-r, -c), r), f = d * (d + 2 * c) + l) : (u = Math.max(0, -(a * r + o)), d = u > 0 ? r : Math.min(Math.max(-r, -c), r), f = -u * u + d * (d + 2 * c) + l);
        else d = a > 0 ? -r : r, u = Math.max(0, -(a * d + o)), f = -u * u + d * (d + 2 * c) + l;
        return n && n.copy(this.origin).addScaledVector(this.direction, u), i && i.copy(za).addScaledVector(qs, d), f;
    }
    intersectSphere(e, t) {
        ln.subVectors(e.center, this.origin);
        let n = ln.dot(this.direction), i = ln.dot(ln) - n * n, r = e.radius * e.radius;
        if (i > r) return null;
        let a = Math.sqrt(r - i), o = n - a, c = n + a;
        return c < 0 ? null : o < 0 ? this.at(c, t) : this.at(o, t);
    }
    intersectsSphere(e) {
        return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
    }
    distanceToPlane(e) {
        let t = e.normal.dot(this.direction);
        if (t === 0) return e.distanceToPoint(this.origin) === 0 ? 0 : null;
        let n = -(this.origin.dot(e.normal) + e.constant) / t;
        return n >= 0 ? n : null;
    }
    intersectPlane(e, t) {
        let n = this.distanceToPlane(e);
        return n === null ? null : this.at(n, t);
    }
    intersectsPlane(e) {
        let t = e.distanceToPoint(this.origin);
        return t === 0 || e.normal.dot(this.direction) * t < 0;
    }
    intersectBox(e, t) {
        let n, i, r, a, o, c, l = 1 / this.direction.x, h = 1 / this.direction.y, u = 1 / this.direction.z, d = this.origin;
        return l >= 0 ? (n = (e.min.x - d.x) * l, i = (e.max.x - d.x) * l) : (n = (e.max.x - d.x) * l, i = (e.min.x - d.x) * l), h >= 0 ? (r = (e.min.y - d.y) * h, a = (e.max.y - d.y) * h) : (r = (e.max.y - d.y) * h, a = (e.min.y - d.y) * h), n > a || r > i || ((r > n || isNaN(n)) && (n = r), (a < i || isNaN(i)) && (i = a), u >= 0 ? (o = (e.min.z - d.z) * u, c = (e.max.z - d.z) * u) : (o = (e.max.z - d.z) * u, c = (e.min.z - d.z) * u), n > c || o > i) || ((o > n || n !== n) && (n = o), (c < i || i !== i) && (i = c), i < 0) ? null : this.at(n >= 0 ? n : i, t);
    }
    intersectsBox(e) {
        return this.intersectBox(e, ln) !== null;
    }
    intersectTriangle(e, t, n, i, r) {
        Va.subVectors(t, e), Ys.subVectors(n, e), ka.crossVectors(Va, Ys);
        let a = this.direction.dot(ka), o;
        if (a > 0) {
            if (i) return null;
            o = 1;
        } else if (a < 0) o = -1, a = -a;
        else return null;
        An.subVectors(this.origin, e);
        let c = o * this.direction.dot(Ys.crossVectors(An, Ys));
        if (c < 0) return null;
        let l = o * this.direction.dot(Va.cross(An));
        if (l < 0 || c + l > a) return null;
        let h = -o * An.dot(ka);
        return h < 0 ? null : this.at(h / a, r);
    }
    applyMatrix4(e) {
        return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
    }
    equals(e) {
        return e.origin.equals(this.origin) && e.direction.equals(this.direction);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, ze = class s1 {
    constructor(e, t, n, i, r, a, o, c, l, h, u, d, f, m, _, g){
        s1.prototype.isMatrix4 = !0, this.elements = [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ], e !== void 0 && this.set(e, t, n, i, r, a, o, c, l, h, u, d, f, m, _, g);
    }
    set(e, t, n, i, r, a, o, c, l, h, u, d, f, m, _, g) {
        let p = this.elements;
        return p[0] = e, p[4] = t, p[8] = n, p[12] = i, p[1] = r, p[5] = a, p[9] = o, p[13] = c, p[2] = l, p[6] = h, p[10] = u, p[14] = d, p[3] = f, p[7] = m, p[11] = _, p[15] = g, this;
    }
    identity() {
        return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    }
    clone() {
        return new s1().fromArray(this.elements);
    }
    copy(e) {
        let t = this.elements, n = e.elements;
        return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this;
    }
    copyPosition(e) {
        let t = this.elements, n = e.elements;
        return t[12] = n[12], t[13] = n[13], t[14] = n[14], this;
    }
    setFromMatrix3(e) {
        let t = e.elements;
        return this.set(t[0], t[3], t[6], 0, t[1], t[4], t[7], 0, t[2], t[5], t[8], 0, 0, 0, 0, 1), this;
    }
    extractBasis(e, t, n) {
        return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
    }
    makeBasis(e, t, n) {
        return this.set(e.x, t.x, n.x, 0, e.y, t.y, n.y, 0, e.z, t.z, n.z, 0, 0, 0, 0, 1), this;
    }
    extractRotation(e) {
        let t = this.elements, n = e.elements, i = 1 / Mi.setFromMatrixColumn(e, 0).length(), r = 1 / Mi.setFromMatrixColumn(e, 1).length(), a = 1 / Mi.setFromMatrixColumn(e, 2).length();
        return t[0] = n[0] * i, t[1] = n[1] * i, t[2] = n[2] * i, t[3] = 0, t[4] = n[4] * r, t[5] = n[5] * r, t[6] = n[6] * r, t[7] = 0, t[8] = n[8] * a, t[9] = n[9] * a, t[10] = n[10] * a, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
    }
    makeRotationFromEuler(e) {
        let t = this.elements, n = e.x, i = e.y, r = e.z, a = Math.cos(n), o = Math.sin(n), c = Math.cos(i), l = Math.sin(i), h = Math.cos(r), u = Math.sin(r);
        if (e.order === "XYZ") {
            let d = a * h, f = a * u, m = o * h, _ = o * u;
            t[0] = c * h, t[4] = -c * u, t[8] = l, t[1] = f + m * l, t[5] = d - _ * l, t[9] = -o * c, t[2] = _ - d * l, t[6] = m + f * l, t[10] = a * c;
        } else if (e.order === "YXZ") {
            let d = c * h, f = c * u, m = l * h, _ = l * u;
            t[0] = d + _ * o, t[4] = m * o - f, t[8] = a * l, t[1] = a * u, t[5] = a * h, t[9] = -o, t[2] = f * o - m, t[6] = _ + d * o, t[10] = a * c;
        } else if (e.order === "ZXY") {
            let d = c * h, f = c * u, m = l * h, _ = l * u;
            t[0] = d - _ * o, t[4] = -a * u, t[8] = m + f * o, t[1] = f + m * o, t[5] = a * h, t[9] = _ - d * o, t[2] = -a * l, t[6] = o, t[10] = a * c;
        } else if (e.order === "ZYX") {
            let d = a * h, f = a * u, m = o * h, _ = o * u;
            t[0] = c * h, t[4] = m * l - f, t[8] = d * l + _, t[1] = c * u, t[5] = _ * l + d, t[9] = f * l - m, t[2] = -l, t[6] = o * c, t[10] = a * c;
        } else if (e.order === "YZX") {
            let d = a * c, f = a * l, m = o * c, _ = o * l;
            t[0] = c * h, t[4] = _ - d * u, t[8] = m * u + f, t[1] = u, t[5] = a * h, t[9] = -o * h, t[2] = -l * h, t[6] = f * u + m, t[10] = d - _ * u;
        } else if (e.order === "XZY") {
            let d = a * c, f = a * l, m = o * c, _ = o * l;
            t[0] = c * h, t[4] = -u, t[8] = l * h, t[1] = d * u + _, t[5] = a * h, t[9] = f * u - m, t[2] = m * u - f, t[6] = o * h, t[10] = _ * u + d;
        }
        return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
    }
    makeRotationFromQuaternion(e) {
        return this.compose(ap, e, op);
    }
    lookAt(e, t, n) {
        let i = this.elements;
        return zt.subVectors(e, t), zt.lengthSq() === 0 && (zt.z = 1), zt.normalize(), Rn.crossVectors(n, zt), Rn.lengthSq() === 0 && (Math.abs(n.z) === 1 ? zt.x += 1e-4 : zt.z += 1e-4, zt.normalize(), Rn.crossVectors(n, zt)), Rn.normalize(), Zs.crossVectors(zt, Rn), i[0] = Rn.x, i[4] = Zs.x, i[8] = zt.x, i[1] = Rn.y, i[5] = Zs.y, i[9] = zt.y, i[2] = Rn.z, i[6] = Zs.z, i[10] = zt.z, this;
    }
    multiply(e) {
        return this.multiplyMatrices(this, e);
    }
    premultiply(e) {
        return this.multiplyMatrices(e, this);
    }
    multiplyMatrices(e, t) {
        let n = e.elements, i = t.elements, r = this.elements, a = n[0], o = n[4], c = n[8], l = n[12], h = n[1], u = n[5], d = n[9], f = n[13], m = n[2], _ = n[6], g = n[10], p = n[14], v = n[3], x = n[7], y = n[11], b = n[15], w = i[0], R = i[4], I = i[8], M = i[12], T = i[1], O = i[5], Y = i[9], $ = i[13], U = i[2], z = i[6], q = i[10], H = i[14], ne = i[3], W = i[7], K = i[11], D = i[15];
        return r[0] = a * w + o * T + c * U + l * ne, r[4] = a * R + o * O + c * z + l * W, r[8] = a * I + o * Y + c * q + l * K, r[12] = a * M + o * $ + c * H + l * D, r[1] = h * w + u * T + d * U + f * ne, r[5] = h * R + u * O + d * z + f * W, r[9] = h * I + u * Y + d * q + f * K, r[13] = h * M + u * $ + d * H + f * D, r[2] = m * w + _ * T + g * U + p * ne, r[6] = m * R + _ * O + g * z + p * W, r[10] = m * I + _ * Y + g * q + p * K, r[14] = m * M + _ * $ + g * H + p * D, r[3] = v * w + x * T + y * U + b * ne, r[7] = v * R + x * O + y * z + b * W, r[11] = v * I + x * Y + y * q + b * K, r[15] = v * M + x * $ + y * H + b * D, this;
    }
    multiplyScalar(e) {
        let t = this.elements;
        return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
    }
    determinant() {
        let e = this.elements, t = e[0], n = e[4], i = e[8], r = e[12], a = e[1], o = e[5], c = e[9], l = e[13], h = e[2], u = e[6], d = e[10], f = e[14], m = e[3], _ = e[7], g = e[11], p = e[15];
        return m * (+r * c * u - i * l * u - r * o * d + n * l * d + i * o * f - n * c * f) + _ * (+t * c * f - t * l * d + r * a * d - i * a * f + i * l * h - r * c * h) + g * (+t * l * u - t * o * f - r * a * u + n * a * f + r * o * h - n * l * h) + p * (-i * o * h - t * c * u + t * o * d + i * a * u - n * a * d + n * c * h);
    }
    transpose() {
        let e = this.elements, t;
        return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
    }
    setPosition(e, t, n) {
        let i = this.elements;
        return e.isVector3 ? (i[12] = e.x, i[13] = e.y, i[14] = e.z) : (i[12] = e, i[13] = t, i[14] = n), this;
    }
    invert() {
        let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8], u = e[9], d = e[10], f = e[11], m = e[12], _ = e[13], g = e[14], p = e[15], v = u * g * l - _ * d * l + _ * c * f - o * g * f - u * c * p + o * d * p, x = m * d * l - h * g * l - m * c * f + a * g * f + h * c * p - a * d * p, y = h * _ * l - m * u * l + m * o * f - a * _ * f - h * o * p + a * u * p, b = m * u * c - h * _ * c - m * o * d + a * _ * d + h * o * g - a * u * g, w = t * v + n * x + i * y + r * b;
        if (w === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        let R = 1 / w;
        return e[0] = v * R, e[1] = (_ * d * r - u * g * r - _ * i * f + n * g * f + u * i * p - n * d * p) * R, e[2] = (o * g * r - _ * c * r + _ * i * l - n * g * l - o * i * p + n * c * p) * R, e[3] = (u * c * r - o * d * r - u * i * l + n * d * l + o * i * f - n * c * f) * R, e[4] = x * R, e[5] = (h * g * r - m * d * r + m * i * f - t * g * f - h * i * p + t * d * p) * R, e[6] = (m * c * r - a * g * r - m * i * l + t * g * l + a * i * p - t * c * p) * R, e[7] = (a * d * r - h * c * r + h * i * l - t * d * l - a * i * f + t * c * f) * R, e[8] = y * R, e[9] = (m * u * r - h * _ * r - m * n * f + t * _ * f + h * n * p - t * u * p) * R, e[10] = (a * _ * r - m * o * r + m * n * l - t * _ * l - a * n * p + t * o * p) * R, e[11] = (h * o * r - a * u * r - h * n * l + t * u * l + a * n * f - t * o * f) * R, e[12] = b * R, e[13] = (h * _ * i - m * u * i + m * n * d - t * _ * d - h * n * g + t * u * g) * R, e[14] = (m * o * i - a * _ * i - m * n * c + t * _ * c + a * n * g - t * o * g) * R, e[15] = (a * u * i - h * o * i + h * n * c - t * u * c - a * n * d + t * o * d) * R, this;
    }
    scale(e) {
        let t = this.elements, n = e.x, i = e.y, r = e.z;
        return t[0] *= n, t[4] *= i, t[8] *= r, t[1] *= n, t[5] *= i, t[9] *= r, t[2] *= n, t[6] *= i, t[10] *= r, t[3] *= n, t[7] *= i, t[11] *= r, this;
    }
    getMaxScaleOnAxis() {
        let e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], i = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
        return Math.sqrt(Math.max(t, n, i));
    }
    makeTranslation(e, t, n) {
        return e.isVector3 ? this.set(1, 0, 0, e.x, 0, 1, 0, e.y, 0, 0, 1, e.z, 0, 0, 0, 1) : this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, n, 0, 0, 0, 1), this;
    }
    makeRotationX(e) {
        let t = Math.cos(e), n = Math.sin(e);
        return this.set(1, 0, 0, 0, 0, t, -n, 0, 0, n, t, 0, 0, 0, 0, 1), this;
    }
    makeRotationY(e) {
        let t = Math.cos(e), n = Math.sin(e);
        return this.set(t, 0, n, 0, 0, 1, 0, 0, -n, 0, t, 0, 0, 0, 0, 1), this;
    }
    makeRotationZ(e) {
        let t = Math.cos(e), n = Math.sin(e);
        return this.set(t, -n, 0, 0, n, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    }
    makeRotationAxis(e, t) {
        let n = Math.cos(t), i = Math.sin(t), r = 1 - n, a = e.x, o = e.y, c = e.z, l = r * a, h = r * o;
        return this.set(l * a + n, l * o - i * c, l * c + i * o, 0, l * o + i * c, h * o + n, h * c - i * a, 0, l * c - i * o, h * c + i * a, r * c * c + n, 0, 0, 0, 0, 1), this;
    }
    makeScale(e, t, n) {
        return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this;
    }
    makeShear(e, t, n, i, r, a) {
        return this.set(1, n, r, 0, e, 1, a, 0, t, i, 1, 0, 0, 0, 0, 1), this;
    }
    compose(e, t, n) {
        let i = this.elements, r = t._x, a = t._y, o = t._z, c = t._w, l = r + r, h = a + a, u = o + o, d = r * l, f = r * h, m = r * u, _ = a * h, g = a * u, p = o * u, v = c * l, x = c * h, y = c * u, b = n.x, w = n.y, R = n.z;
        return i[0] = (1 - (_ + p)) * b, i[1] = (f + y) * b, i[2] = (m - x) * b, i[3] = 0, i[4] = (f - y) * w, i[5] = (1 - (d + p)) * w, i[6] = (g + v) * w, i[7] = 0, i[8] = (m + x) * R, i[9] = (g - v) * R, i[10] = (1 - (d + _)) * R, i[11] = 0, i[12] = e.x, i[13] = e.y, i[14] = e.z, i[15] = 1, this;
    }
    decompose(e, t, n) {
        let i = this.elements, r = Mi.set(i[0], i[1], i[2]).length(), a = Mi.set(i[4], i[5], i[6]).length(), o = Mi.set(i[8], i[9], i[10]).length();
        this.determinant() < 0 && (r = -r), e.x = i[12], e.y = i[13], e.z = i[14], $t.copy(this);
        let l = 1 / r, h = 1 / a, u = 1 / o;
        return $t.elements[0] *= l, $t.elements[1] *= l, $t.elements[2] *= l, $t.elements[4] *= h, $t.elements[5] *= h, $t.elements[6] *= h, $t.elements[8] *= u, $t.elements[9] *= u, $t.elements[10] *= u, t.setFromRotationMatrix($t), n.x = r, n.y = a, n.z = o, this;
    }
    makePerspective(e, t, n, i, r, a, o = vn) {
        let c = this.elements, l = 2 * r / (t - e), h = 2 * r / (n - i), u = (t + e) / (t - e), d = (n + i) / (n - i), f, m;
        if (o === vn) f = -(a + r) / (a - r), m = -2 * a * r / (a - r);
        else if (o === Gr) f = -a / (a - r), m = -a * r / (a - r);
        else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + o);
        return c[0] = l, c[4] = 0, c[8] = u, c[12] = 0, c[1] = 0, c[5] = h, c[9] = d, c[13] = 0, c[2] = 0, c[6] = 0, c[10] = f, c[14] = m, c[3] = 0, c[7] = 0, c[11] = -1, c[15] = 0, this;
    }
    makeOrthographic(e, t, n, i, r, a, o = vn) {
        let c = this.elements, l = 1 / (t - e), h = 1 / (n - i), u = 1 / (a - r), d = (t + e) * l, f = (n + i) * h, m, _;
        if (o === vn) m = (a + r) * u, _ = -2 * u;
        else if (o === Gr) m = r * u, _ = -1 * u;
        else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + o);
        return c[0] = 2 * l, c[4] = 0, c[8] = 0, c[12] = -d, c[1] = 0, c[5] = 2 * h, c[9] = 0, c[13] = -f, c[2] = 0, c[6] = 0, c[10] = _, c[14] = -m, c[3] = 0, c[7] = 0, c[11] = 0, c[15] = 1, this;
    }
    equals(e) {
        let t = this.elements, n = e.elements;
        for(let i = 0; i < 16; i++)if (t[i] !== n[i]) return !1;
        return !0;
    }
    fromArray(e, t = 0) {
        for(let n = 0; n < 16; n++)this.elements[n] = e[n + t];
        return this;
    }
    toArray(e = [], t = 0) {
        let n = this.elements;
        return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e;
    }
}, Mi = new A, $t = new ze, ap = new A(0, 0, 0), op = new A(1, 1, 1), Rn = new A, Zs = new A, zt = new A, Xl = new ze, ql = new Ut, Yr = class s1 {
    constructor(e = 0, t = 0, n = 0, i = s1.DEFAULT_ORDER){
        this.isEuler = !0, this._x = e, this._y = t, this._z = n, this._order = i;
    }
    get x() {
        return this._x;
    }
    set x(e) {
        this._x = e, this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(e) {
        this._y = e, this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(e) {
        this._z = e, this._onChangeCallback();
    }
    get order() {
        return this._order;
    }
    set order(e) {
        this._order = e, this._onChangeCallback();
    }
    set(e, t, n, i = this._order) {
        return this._x = e, this._y = t, this._z = n, this._order = i, this._onChangeCallback(), this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(e) {
        return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
    }
    setFromRotationMatrix(e, t = this._order, n = !0) {
        let i = e.elements, r = i[0], a = i[4], o = i[8], c = i[1], l = i[5], h = i[9], u = i[2], d = i[6], f = i[10];
        switch(t){
            case "XYZ":
                this._y = Math.asin(ct(o, -1, 1)), Math.abs(o) < .9999999 ? (this._x = Math.atan2(-h, f), this._z = Math.atan2(-a, r)) : (this._x = Math.atan2(d, l), this._z = 0);
                break;
            case "YXZ":
                this._x = Math.asin(-ct(h, -1, 1)), Math.abs(h) < .9999999 ? (this._y = Math.atan2(o, f), this._z = Math.atan2(c, l)) : (this._y = Math.atan2(-u, r), this._z = 0);
                break;
            case "ZXY":
                this._x = Math.asin(ct(d, -1, 1)), Math.abs(d) < .9999999 ? (this._y = Math.atan2(-u, f), this._z = Math.atan2(-a, l)) : (this._y = 0, this._z = Math.atan2(c, r));
                break;
            case "ZYX":
                this._y = Math.asin(-ct(u, -1, 1)), Math.abs(u) < .9999999 ? (this._x = Math.atan2(d, f), this._z = Math.atan2(c, r)) : (this._x = 0, this._z = Math.atan2(-a, l));
                break;
            case "YZX":
                this._z = Math.asin(ct(c, -1, 1)), Math.abs(c) < .9999999 ? (this._x = Math.atan2(-h, l), this._y = Math.atan2(-u, r)) : (this._x = 0, this._y = Math.atan2(o, f));
                break;
            case "XZY":
                this._z = Math.asin(-ct(a, -1, 1)), Math.abs(a) < .9999999 ? (this._x = Math.atan2(d, l), this._y = Math.atan2(o, r)) : (this._x = Math.atan2(-h, f), this._y = 0);
                break;
            default:
                console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
        }
        return this._order = t, n === !0 && this._onChangeCallback(), this;
    }
    setFromQuaternion(e, t, n) {
        return Xl.makeRotationFromQuaternion(e), this.setFromRotationMatrix(Xl, t, n);
    }
    setFromVector3(e, t = this._order) {
        return this.set(e.x, e.y, e.z, t);
    }
    reorder(e) {
        return ql.setFromEuler(this), this.setFromQuaternion(ql, e);
    }
    equals(e) {
        return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
    }
    fromArray(e) {
        return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
    }
    _onChange(e) {
        return this._onChangeCallback = e, this;
    }
    _onChangeCallback() {}
    *[Symbol.iterator]() {
        yield this._x, yield this._y, yield this._z, yield this._order;
    }
};
Yr.DEFAULT_ORDER = "XYZ";
var Rs = class {
    constructor(){
        this.mask = 1;
    }
    set(e) {
        this.mask = (1 << e | 0) >>> 0;
    }
    enable(e) {
        this.mask |= 1 << e | 0;
    }
    enableAll() {
        this.mask = -1;
    }
    toggle(e) {
        this.mask ^= 1 << e | 0;
    }
    disable(e) {
        this.mask &= ~(1 << e | 0);
    }
    disableAll() {
        this.mask = 0;
    }
    test(e) {
        return (this.mask & e.mask) !== 0;
    }
    isEnabled(e) {
        return (this.mask & (1 << e | 0)) !== 0;
    }
}, cp = 0, Yl = new A, Si = new Ut, hn = new ze, Js = new A, hs = new A, lp = new A, hp = new Ut, Zl = new A(1, 0, 0), Jl = new A(0, 1, 0), $l = new A(0, 0, 1), up = {
    type: "added"
}, dp = {
    type: "removed"
}, Je = class s1 extends sn {
    constructor(){
        super(), this.isObject3D = !0, Object.defineProperty(this, "id", {
            value: cp++
        }), this.uuid = kt(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = s1.DEFAULT_UP.clone();
        let e = new A, t = new Yr, n = new Ut, i = new A(1, 1, 1);
        function r() {
            n.setFromEuler(t, !1);
        }
        function a() {
            t.setFromQuaternion(n, void 0, !1);
        }
        t._onChange(r), n._onChange(a), Object.defineProperties(this, {
            position: {
                configurable: !0,
                enumerable: !0,
                value: e
            },
            rotation: {
                configurable: !0,
                enumerable: !0,
                value: t
            },
            quaternion: {
                configurable: !0,
                enumerable: !0,
                value: n
            },
            scale: {
                configurable: !0,
                enumerable: !0,
                value: i
            },
            modelViewMatrix: {
                value: new ze
            },
            normalMatrix: {
                value: new He
            }
        }), this.matrix = new ze, this.matrixWorld = new ze, this.matrixAutoUpdate = s1.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.matrixWorldAutoUpdate = s1.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.layers = new Rs, this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
    }
    onBeforeRender() {}
    onAfterRender() {}
    applyMatrix4(e) {
        this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(e) {
        return this.quaternion.premultiply(e), this;
    }
    setRotationFromAxisAngle(e, t) {
        this.quaternion.setFromAxisAngle(e, t);
    }
    setRotationFromEuler(e) {
        this.quaternion.setFromEuler(e, !0);
    }
    setRotationFromMatrix(e) {
        this.quaternion.setFromRotationMatrix(e);
    }
    setRotationFromQuaternion(e) {
        this.quaternion.copy(e);
    }
    rotateOnAxis(e, t) {
        return Si.setFromAxisAngle(e, t), this.quaternion.multiply(Si), this;
    }
    rotateOnWorldAxis(e, t) {
        return Si.setFromAxisAngle(e, t), this.quaternion.premultiply(Si), this;
    }
    rotateX(e) {
        return this.rotateOnAxis(Zl, e);
    }
    rotateY(e) {
        return this.rotateOnAxis(Jl, e);
    }
    rotateZ(e) {
        return this.rotateOnAxis($l, e);
    }
    translateOnAxis(e, t) {
        return Yl.copy(e).applyQuaternion(this.quaternion), this.position.add(Yl.multiplyScalar(t)), this;
    }
    translateX(e) {
        return this.translateOnAxis(Zl, e);
    }
    translateY(e) {
        return this.translateOnAxis(Jl, e);
    }
    translateZ(e) {
        return this.translateOnAxis($l, e);
    }
    localToWorld(e) {
        return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(e) {
        return this.updateWorldMatrix(!0, !1), e.applyMatrix4(hn.copy(this.matrixWorld).invert());
    }
    lookAt(e, t, n) {
        e.isVector3 ? Js.copy(e) : Js.set(e, t, n);
        let i = this.parent;
        this.updateWorldMatrix(!0, !1), hs.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? hn.lookAt(hs, Js, this.up) : hn.lookAt(Js, hs, this.up), this.quaternion.setFromRotationMatrix(hn), i && (hn.extractRotation(i.matrixWorld), Si.setFromRotationMatrix(hn), this.quaternion.premultiply(Si.invert()));
    }
    add(e) {
        if (arguments.length > 1) {
            for(let t = 0; t < arguments.length; t++)this.add(arguments[t]);
            return this;
        }
        return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.parent !== null && e.parent.remove(e), e.parent = this, this.children.push(e), e.dispatchEvent(up)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
    }
    remove(e) {
        if (arguments.length > 1) {
            for(let n = 0; n < arguments.length; n++)this.remove(arguments[n]);
            return this;
        }
        let t = this.children.indexOf(e);
        return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(dp)), this;
    }
    removeFromParent() {
        let e = this.parent;
        return e !== null && e.remove(this), this;
    }
    clear() {
        return this.remove(...this.children);
    }
    attach(e) {
        return this.updateWorldMatrix(!0, !1), hn.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), hn.multiply(e.parent.matrixWorld)), e.applyMatrix4(hn), this.add(e), e.updateWorldMatrix(!1, !0), this;
    }
    getObjectById(e) {
        return this.getObjectByProperty("id", e);
    }
    getObjectByName(e) {
        return this.getObjectByProperty("name", e);
    }
    getObjectByProperty(e, t) {
        if (this[e] === t) return this;
        for(let n = 0, i = this.children.length; n < i; n++){
            let a = this.children[n].getObjectByProperty(e, t);
            if (a !== void 0) return a;
        }
    }
    getObjectsByProperty(e, t) {
        let n = [];
        this[e] === t && n.push(this);
        for(let i = 0, r = this.children.length; i < r; i++){
            let a = this.children[i].getObjectsByProperty(e, t);
            a.length > 0 && (n = n.concat(a));
        }
        return n;
    }
    getWorldPosition(e) {
        return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(e) {
        return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(hs, e, lp), e;
    }
    getWorldScale(e) {
        return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(hs, hp, e), e;
    }
    getWorldDirection(e) {
        this.updateWorldMatrix(!0, !1);
        let t = this.matrixWorld.elements;
        return e.set(t[8], t[9], t[10]).normalize();
    }
    raycast() {}
    traverse(e) {
        e(this);
        let t = this.children;
        for(let n = 0, i = t.length; n < i; n++)t[n].traverse(e);
    }
    traverseVisible(e) {
        if (this.visible === !1) return;
        e(this);
        let t = this.children;
        for(let n = 0, i = t.length; n < i; n++)t[n].traverseVisible(e);
    }
    traverseAncestors(e) {
        let t = this.parent;
        t !== null && (e(t), t.traverseAncestors(e));
    }
    updateMatrix() {
        this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
    }
    updateMatrixWorld(e) {
        this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, e = !0);
        let t = this.children;
        for(let n = 0, i = t.length; n < i; n++){
            let r = t[n];
            (r.matrixWorldAutoUpdate === !0 || e === !0) && r.updateMatrixWorld(e);
        }
    }
    updateWorldMatrix(e, t) {
        let n = this.parent;
        if (e === !0 && n !== null && n.matrixWorldAutoUpdate === !0 && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), t === !0) {
            let i = this.children;
            for(let r = 0, a = i.length; r < a; r++){
                let o = i[r];
                o.matrixWorldAutoUpdate === !0 && o.updateWorldMatrix(!1, !0);
            }
        }
    }
    toJSON(e) {
        let t = e === void 0 || typeof e == "string", n = {};
        t && (e = {
            geometries: {},
            materials: {},
            textures: {},
            images: {},
            shapes: {},
            skeletons: {},
            animations: {},
            nodes: {}
        }, n.metadata = {
            version: 4.6,
            type: "Object",
            generator: "Object3D.toJSON"
        });
        let i = {};
        i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.castShadow === !0 && (i.castShadow = !0), this.receiveShadow === !0 && (i.receiveShadow = !0), this.visible === !1 && (i.visible = !1), this.frustumCulled === !1 && (i.frustumCulled = !1), this.renderOrder !== 0 && (i.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (i.userData = this.userData), i.layers = this.layers.mask, i.matrix = this.matrix.toArray(), i.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (i.matrixAutoUpdate = !1), this.isInstancedMesh && (i.type = "InstancedMesh", i.count = this.count, i.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (i.instanceColor = this.instanceColor.toJSON()));
        function r(o, c) {
            return o[c.uuid] === void 0 && (o[c.uuid] = c.toJSON(e)), c.uuid;
        }
        if (this.isScene) this.background && (this.background.isColor ? i.background = this.background.toJSON() : this.background.isTexture && (i.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (i.environment = this.environment.toJSON(e).uuid);
        else if (this.isMesh || this.isLine || this.isPoints) {
            i.geometry = r(e.geometries, this.geometry);
            let o = this.geometry.parameters;
            if (o !== void 0 && o.shapes !== void 0) {
                let c = o.shapes;
                if (Array.isArray(c)) for(let l = 0, h = c.length; l < h; l++){
                    let u = c[l];
                    r(e.shapes, u);
                }
                else r(e.shapes, c);
            }
        }
        if (this.isSkinnedMesh && (i.bindMode = this.bindMode, i.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (r(e.skeletons, this.skeleton), i.skeleton = this.skeleton.uuid)), this.material !== void 0) if (Array.isArray(this.material)) {
            let o = [];
            for(let c = 0, l = this.material.length; c < l; c++)o.push(r(e.materials, this.material[c]));
            i.material = o;
        } else i.material = r(e.materials, this.material);
        if (this.children.length > 0) {
            i.children = [];
            for(let o = 0; o < this.children.length; o++)i.children.push(this.children[o].toJSON(e).object);
        }
        if (this.animations.length > 0) {
            i.animations = [];
            for(let o = 0; o < this.animations.length; o++){
                let c = this.animations[o];
                i.animations.push(r(e.animations, c));
            }
        }
        if (t) {
            let o = a(e.geometries), c = a(e.materials), l = a(e.textures), h = a(e.images), u = a(e.shapes), d = a(e.skeletons), f = a(e.animations), m = a(e.nodes);
            o.length > 0 && (n.geometries = o), c.length > 0 && (n.materials = c), l.length > 0 && (n.textures = l), h.length > 0 && (n.images = h), u.length > 0 && (n.shapes = u), d.length > 0 && (n.skeletons = d), f.length > 0 && (n.animations = f), m.length > 0 && (n.nodes = m);
        }
        return n.object = i, n;
        function a(o) {
            let c = [];
            for(let l in o){
                let h = o[l];
                delete h.metadata, c.push(h);
            }
            return c;
        }
    }
    clone(e) {
        return new this.constructor().copy(this, e);
    }
    copy(e, t = !0) {
        if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.animations = e.animations.slice(), this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0) for(let n = 0; n < e.children.length; n++){
            let i = e.children[n];
            this.add(i.clone());
        }
        return this;
    }
};
Je.DEFAULT_UP = new A(0, 1, 0);
Je.DEFAULT_MATRIX_AUTO_UPDATE = !0;
Je.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
var Kt = new A, un = new A, Ha = new A, dn = new A, bi = new A, Ei = new A, Kl = new A, Ga = new A, Wa = new A, Xa = new A, $s = !1, Un = class s1 {
    constructor(e = new A, t = new A, n = new A){
        this.a = e, this.b = t, this.c = n;
    }
    static getNormal(e, t, n, i) {
        i.subVectors(n, t), Kt.subVectors(e, t), i.cross(Kt);
        let r = i.lengthSq();
        return r > 0 ? i.multiplyScalar(1 / Math.sqrt(r)) : i.set(0, 0, 0);
    }
    static getBarycoord(e, t, n, i, r) {
        Kt.subVectors(i, t), un.subVectors(n, t), Ha.subVectors(e, t);
        let a = Kt.dot(Kt), o = Kt.dot(un), c = Kt.dot(Ha), l = un.dot(un), h = un.dot(Ha), u = a * l - o * o;
        if (u === 0) return r.set(-2, -1, -1);
        let d = 1 / u, f = (l * c - o * h) * d, m = (a * h - o * c) * d;
        return r.set(1 - f - m, m, f);
    }
    static containsPoint(e, t, n, i) {
        return this.getBarycoord(e, t, n, i, dn), dn.x >= 0 && dn.y >= 0 && dn.x + dn.y <= 1;
    }
    static getUV(e, t, n, i, r, a, o, c) {
        return $s === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), $s = !0), this.getInterpolation(e, t, n, i, r, a, o, c);
    }
    static getInterpolation(e, t, n, i, r, a, o, c) {
        return this.getBarycoord(e, t, n, i, dn), c.setScalar(0), c.addScaledVector(r, dn.x), c.addScaledVector(a, dn.y), c.addScaledVector(o, dn.z), c;
    }
    static isFrontFacing(e, t, n, i) {
        return Kt.subVectors(n, t), un.subVectors(e, t), Kt.cross(un).dot(i) < 0;
    }
    set(e, t, n) {
        return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
    }
    setFromPointsAndIndices(e, t, n, i) {
        return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[i]), this;
    }
    setFromAttributeAndIndices(e, t, n, i) {
        return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, n), this.c.fromBufferAttribute(e, i), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
    }
    getArea() {
        return Kt.subVectors(this.c, this.b), un.subVectors(this.a, this.b), Kt.cross(un).length() * .5;
    }
    getMidpoint(e) {
        return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(e) {
        return s1.getNormal(this.a, this.b, this.c, e);
    }
    getPlane(e) {
        return e.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(e, t) {
        return s1.getBarycoord(e, this.a, this.b, this.c, t);
    }
    getUV(e, t, n, i, r) {
        return $s === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), $s = !0), s1.getInterpolation(e, this.a, this.b, this.c, t, n, i, r);
    }
    getInterpolation(e, t, n, i, r) {
        return s1.getInterpolation(e, this.a, this.b, this.c, t, n, i, r);
    }
    containsPoint(e) {
        return s1.containsPoint(e, this.a, this.b, this.c);
    }
    isFrontFacing(e) {
        return s1.isFrontFacing(this.a, this.b, this.c, e);
    }
    intersectsBox(e) {
        return e.intersectsTriangle(this);
    }
    closestPointToPoint(e, t) {
        let n = this.a, i = this.b, r = this.c, a, o;
        bi.subVectors(i, n), Ei.subVectors(r, n), Ga.subVectors(e, n);
        let c = bi.dot(Ga), l = Ei.dot(Ga);
        if (c <= 0 && l <= 0) return t.copy(n);
        Wa.subVectors(e, i);
        let h = bi.dot(Wa), u = Ei.dot(Wa);
        if (h >= 0 && u <= h) return t.copy(i);
        let d = c * u - h * l;
        if (d <= 0 && c >= 0 && h <= 0) return a = c / (c - h), t.copy(n).addScaledVector(bi, a);
        Xa.subVectors(e, r);
        let f = bi.dot(Xa), m = Ei.dot(Xa);
        if (m >= 0 && f <= m) return t.copy(r);
        let _ = f * l - c * m;
        if (_ <= 0 && l >= 0 && m <= 0) return o = l / (l - m), t.copy(n).addScaledVector(Ei, o);
        let g = h * m - f * u;
        if (g <= 0 && u - h >= 0 && f - m >= 0) return Kl.subVectors(r, i), o = (u - h) / (u - h + (f - m)), t.copy(i).addScaledVector(Kl, o);
        let p = 1 / (g + _ + d);
        return a = _ * p, o = d * p, t.copy(n).addScaledVector(bi, a).addScaledVector(Ei, o);
    }
    equals(e) {
        return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
    }
}, fp = 0, bt = class extends sn {
    constructor(){
        super(), this.isMaterial = !0, Object.defineProperty(this, "id", {
            value: fp++
        }), this.uuid = kt(), this.name = "", this.type = "Material", this.blending = Wi, this.side = Bn, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = ld, this.blendDst = hd, this.blendEquation = Bi, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = uo, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = If, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = Ia, this.stencilZFail = Ia, this.stencilZPass = Ia, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
    }
    get alphaTest() {
        return this._alphaTest;
    }
    set alphaTest(e) {
        this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
    }
    onBuild() {}
    onBeforeRender() {}
    onBeforeCompile() {}
    customProgramCacheKey() {
        return this.onBeforeCompile.toString();
    }
    setValues(e) {
        if (e !== void 0) for(let t in e){
            let n = e[t];
            if (n === void 0) {
                console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
                continue;
            }
            let i = this[t];
            if (i === void 0) {
                console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
                continue;
            }
            i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : this[t] = n;
        }
    }
    toJSON(e) {
        let t = e === void 0 || typeof e == "string";
        t && (e = {
            textures: {},
            images: {}
        });
        let n = {
            metadata: {
                version: 4.6,
                type: "Material",
                generator: "Material.toJSON"
            }
        };
        n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.iridescence !== void 0 && (n.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.anisotropy !== void 0 && (n.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (n.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (n.anisotropyMap = this.anisotropyMap.toJSON(e).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== Wi && (n.blending = this.blending), this.side !== Bn && (n.side = this.side), this.vertexColors === !0 && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.transparent === !0 && (n.transparent = !0), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.colorWrite = this.colorWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaHash === !0 && (n.alphaHash = !0), this.alphaToCoverage === !0 && (n.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = !0), this.forceSinglePass === !0 && (n.forceSinglePass = !0), this.wireframe === !0 && (n.wireframe = !0), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = !0), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), this.fog === !1 && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData);
        function i(r) {
            let a = [];
            for(let o in r){
                let c = r[o];
                delete c.metadata, a.push(c);
            }
            return a;
        }
        if (t) {
            let r = i(e.textures), a = i(e.images);
            r.length > 0 && (n.textures = r), a.length > 0 && (n.images = a);
        }
        return n;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
        let t = e.clippingPlanes, n = null;
        if (t !== null) {
            let i = t.length;
            n = new Array(i);
            for(let r = 0; r !== i; ++r)n[r] = t[r].clone();
        }
        return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaHash = e.alphaHash, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
}, Sd = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
}, Cn = {
    h: 0,
    s: 0,
    l: 0
}, Ks = {
    h: 0,
    s: 0,
    l: 0
};
function qa(s1, e, t) {
    return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? s1 + (e - s1) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? s1 + (e - s1) * 6 * (2 / 3 - t) : s1;
}
var pe = class {
    constructor(e, t, n){
        return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(e, t, n);
    }
    set(e, t, n) {
        if (t === void 0 && n === void 0) {
            let i = e;
            i && i.isColor ? this.copy(i) : typeof i == "number" ? this.setHex(i) : typeof i == "string" && this.setStyle(i);
        } else this.setRGB(e, t, n);
        return this;
    }
    setScalar(e) {
        return this.r = e, this.g = e, this.b = e, this;
    }
    setHex(e, t = vt) {
        return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, Qe.toWorkingColorSpace(this, t), this;
    }
    setRGB(e, t, n, i = Qe.workingColorSpace) {
        return this.r = e, this.g = t, this.b = n, Qe.toWorkingColorSpace(this, i), this;
    }
    setHSL(e, t, n, i = Qe.workingColorSpace) {
        if (e = Yc(e, 1), t = ct(t, 0, 1), n = ct(n, 0, 1), t === 0) this.r = this.g = this.b = n;
        else {
            let r = n <= .5 ? n * (1 + t) : n + t - n * t, a = 2 * n - r;
            this.r = qa(a, r, e + 1 / 3), this.g = qa(a, r, e), this.b = qa(a, r, e - 1 / 3);
        }
        return Qe.toWorkingColorSpace(this, i), this;
    }
    setStyle(e, t = vt) {
        function n(r) {
            r !== void 0 && parseFloat(r) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
        }
        let i;
        if (i = /^(\w+)\(([^\)]*)\)/.exec(e)) {
            let r, a = i[1], o = i[2];
            switch(a){
                case "rgb":
                case "rgba":
                    if (r = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return n(r[4]), this.setRGB(Math.min(255, parseInt(r[1], 10)) / 255, Math.min(255, parseInt(r[2], 10)) / 255, Math.min(255, parseInt(r[3], 10)) / 255, t);
                    if (r = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return n(r[4]), this.setRGB(Math.min(100, parseInt(r[1], 10)) / 100, Math.min(100, parseInt(r[2], 10)) / 100, Math.min(100, parseInt(r[3], 10)) / 100, t);
                    break;
                case "hsl":
                case "hsla":
                    if (r = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return n(r[4]), this.setHSL(parseFloat(r[1]) / 360, parseFloat(r[2]) / 100, parseFloat(r[3]) / 100, t);
                    break;
                default:
                    console.warn("THREE.Color: Unknown color model " + e);
            }
        } else if (i = /^\#([A-Fa-f\d]+)$/.exec(e)) {
            let r = i[1], a = r.length;
            if (a === 3) return this.setRGB(parseInt(r.charAt(0), 16) / 15, parseInt(r.charAt(1), 16) / 15, parseInt(r.charAt(2), 16) / 15, t);
            if (a === 6) return this.setHex(parseInt(r, 16), t);
            console.warn("THREE.Color: Invalid hex color " + e);
        } else if (e && e.length > 0) return this.setColorName(e, t);
        return this;
    }
    setColorName(e, t = vt) {
        let n = Sd[e.toLowerCase()];
        return n !== void 0 ? this.setHex(n, t) : console.warn("THREE.Color: Unknown color " + e), this;
    }
    clone() {
        return new this.constructor(this.r, this.g, this.b);
    }
    copy(e) {
        return this.r = e.r, this.g = e.g, this.b = e.b, this;
    }
    copySRGBToLinear(e) {
        return this.r = Xi(e.r), this.g = Xi(e.g), this.b = Xi(e.b), this;
    }
    copyLinearToSRGB(e) {
        return this.r = Da(e.r), this.g = Da(e.g), this.b = Da(e.b), this;
    }
    convertSRGBToLinear() {
        return this.copySRGBToLinear(this), this;
    }
    convertLinearToSRGB() {
        return this.copyLinearToSRGB(this), this;
    }
    getHex(e = vt) {
        return Qe.fromWorkingColorSpace(Tt.copy(this), e), Math.round(ct(Tt.r * 255, 0, 255)) * 65536 + Math.round(ct(Tt.g * 255, 0, 255)) * 256 + Math.round(ct(Tt.b * 255, 0, 255));
    }
    getHexString(e = vt) {
        return ("000000" + this.getHex(e).toString(16)).slice(-6);
    }
    getHSL(e, t = Qe.workingColorSpace) {
        Qe.fromWorkingColorSpace(Tt.copy(this), t);
        let n = Tt.r, i = Tt.g, r = Tt.b, a = Math.max(n, i, r), o = Math.min(n, i, r), c, l, h = (o + a) / 2;
        if (o === a) c = 0, l = 0;
        else {
            let u = a - o;
            switch(l = h <= .5 ? u / (a + o) : u / (2 - a - o), a){
                case n:
                    c = (i - r) / u + (i < r ? 6 : 0);
                    break;
                case i:
                    c = (r - n) / u + 2;
                    break;
                case r:
                    c = (n - i) / u + 4;
                    break;
            }
            c /= 6;
        }
        return e.h = c, e.s = l, e.l = h, e;
    }
    getRGB(e, t = Qe.workingColorSpace) {
        return Qe.fromWorkingColorSpace(Tt.copy(this), t), e.r = Tt.r, e.g = Tt.g, e.b = Tt.b, e;
    }
    getStyle(e = vt) {
        Qe.fromWorkingColorSpace(Tt.copy(this), e);
        let t = Tt.r, n = Tt.g, i = Tt.b;
        return e !== vt ? `color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})` : `rgb(${Math.round(t * 255)},${Math.round(n * 255)},${Math.round(i * 255)})`;
    }
    offsetHSL(e, t, n) {
        return this.getHSL(Cn), this.setHSL(Cn.h + e, Cn.s + t, Cn.l + n);
    }
    add(e) {
        return this.r += e.r, this.g += e.g, this.b += e.b, this;
    }
    addColors(e, t) {
        return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
    }
    addScalar(e) {
        return this.r += e, this.g += e, this.b += e, this;
    }
    sub(e) {
        return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
    }
    multiply(e) {
        return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
    }
    multiplyScalar(e) {
        return this.r *= e, this.g *= e, this.b *= e, this;
    }
    lerp(e, t) {
        return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
    }
    lerpColors(e, t, n) {
        return this.r = e.r + (t.r - e.r) * n, this.g = e.g + (t.g - e.g) * n, this.b = e.b + (t.b - e.b) * n, this;
    }
    lerpHSL(e, t) {
        this.getHSL(Cn), e.getHSL(Ks);
        let n = ys(Cn.h, Ks.h, t), i = ys(Cn.s, Ks.s, t), r = ys(Cn.l, Ks.l, t);
        return this.setHSL(n, i, r), this;
    }
    setFromVector3(e) {
        return this.r = e.x, this.g = e.y, this.b = e.z, this;
    }
    applyMatrix3(e) {
        let t = this.r, n = this.g, i = this.b, r = e.elements;
        return this.r = r[0] * t + r[3] * n + r[6] * i, this.g = r[1] * t + r[4] * n + r[7] * i, this.b = r[2] * t + r[5] * n + r[8] * i, this;
    }
    equals(e) {
        return e.r === this.r && e.g === this.g && e.b === this.b;
    }
    fromArray(e, t = 0) {
        return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
    }
    fromBufferAttribute(e, t) {
        return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
    }
    toJSON() {
        return this.getHex();
    }
    *[Symbol.iterator]() {
        yield this.r, yield this.g, yield this.b;
    }
}, Tt = new pe;
pe.NAMES = Sd;
var Sn = class extends bt {
    constructor(e){
        super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new pe(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = xa, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
    }
}, _n = pp();
function pp() {
    let s1 = new ArrayBuffer(4), e = new Float32Array(s1), t = new Uint32Array(s1), n = new Uint32Array(512), i = new Uint32Array(512);
    for(let c = 0; c < 256; ++c){
        let l = c - 127;
        l < -27 ? (n[c] = 0, n[c | 256] = 32768, i[c] = 24, i[c | 256] = 24) : l < -14 ? (n[c] = 1024 >> -l - 14, n[c | 256] = 1024 >> -l - 14 | 32768, i[c] = -l - 1, i[c | 256] = -l - 1) : l <= 15 ? (n[c] = l + 15 << 10, n[c | 256] = l + 15 << 10 | 32768, i[c] = 13, i[c | 256] = 13) : l < 128 ? (n[c] = 31744, n[c | 256] = 64512, i[c] = 24, i[c | 256] = 24) : (n[c] = 31744, n[c | 256] = 64512, i[c] = 13, i[c | 256] = 13);
    }
    let r = new Uint32Array(2048), a = new Uint32Array(64), o = new Uint32Array(64);
    for(let c = 1; c < 1024; ++c){
        let l = c << 13, h = 0;
        for(; !(l & 8388608);)l <<= 1, h -= 8388608;
        l &= -8388609, h += 947912704, r[c] = l | h;
    }
    for(let c = 1024; c < 2048; ++c)r[c] = 939524096 + (c - 1024 << 13);
    for(let c = 1; c < 31; ++c)a[c] = c << 23;
    a[31] = 1199570944, a[32] = 2147483648;
    for(let c = 33; c < 63; ++c)a[c] = 2147483648 + (c - 32 << 23);
    a[63] = 3347054592;
    for(let c = 1; c < 64; ++c)c !== 32 && (o[c] = 1024);
    return {
        floatView: e,
        uint32View: t,
        baseTable: n,
        shiftTable: i,
        mantissaTable: r,
        exponentTable: a,
        offsetTable: o
    };
}
function Nt(s1) {
    Math.abs(s1) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), s1 = ct(s1, -65504, 65504), _n.floatView[0] = s1;
    let e = _n.uint32View[0], t = e >> 23 & 511;
    return _n.baseTable[t] + ((e & 8388607) >> _n.shiftTable[t]);
}
function xs(s1) {
    let e = s1 >> 10;
    return _n.uint32View[0] = _n.mantissaTable[_n.offsetTable[e] + (s1 & 1023)] + _n.exponentTable[e], _n.floatView[0];
}
var Mv = {
    toHalfFloat: Nt,
    fromHalfFloat: xs
}, ft = new A, Qs = new Z, et = class {
    constructor(e, t, n = !1){
        if (Array.isArray(e)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        this.isBufferAttribute = !0, this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = n, this.usage = Hr, this.updateRange = {
            offset: 0,
            count: -1
        }, this.gpuType = xn, this.version = 0;
    }
    onUploadCallback() {}
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
    setUsage(e) {
        return this.usage = e, this;
    }
    copy(e) {
        return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this.gpuType = e.gpuType, this;
    }
    copyAt(e, t, n) {
        e *= this.itemSize, n *= t.itemSize;
        for(let i = 0, r = this.itemSize; i < r; i++)this.array[e + i] = t.array[n + i];
        return this;
    }
    copyArray(e) {
        return this.array.set(e), this;
    }
    applyMatrix3(e) {
        if (this.itemSize === 2) for(let t = 0, n = this.count; t < n; t++)Qs.fromBufferAttribute(this, t), Qs.applyMatrix3(e), this.setXY(t, Qs.x, Qs.y);
        else if (this.itemSize === 3) for(let t = 0, n = this.count; t < n; t++)ft.fromBufferAttribute(this, t), ft.applyMatrix3(e), this.setXYZ(t, ft.x, ft.y, ft.z);
        return this;
    }
    applyMatrix4(e) {
        for(let t = 0, n = this.count; t < n; t++)ft.fromBufferAttribute(this, t), ft.applyMatrix4(e), this.setXYZ(t, ft.x, ft.y, ft.z);
        return this;
    }
    applyNormalMatrix(e) {
        for(let t = 0, n = this.count; t < n; t++)ft.fromBufferAttribute(this, t), ft.applyNormalMatrix(e), this.setXYZ(t, ft.x, ft.y, ft.z);
        return this;
    }
    transformDirection(e) {
        for(let t = 0, n = this.count; t < n; t++)ft.fromBufferAttribute(this, t), ft.transformDirection(e), this.setXYZ(t, ft.x, ft.y, ft.z);
        return this;
    }
    set(e, t = 0) {
        return this.array.set(e, t), this;
    }
    getComponent(e, t) {
        let n = this.array[e * this.itemSize + t];
        return this.normalized && (n = Ot(n, this.array)), n;
    }
    setComponent(e, t, n) {
        return this.normalized && (n = Be(n, this.array)), this.array[e * this.itemSize + t] = n, this;
    }
    getX(e) {
        let t = this.array[e * this.itemSize];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setX(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize] = t, this;
    }
    getY(e) {
        let t = this.array[e * this.itemSize + 1];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setY(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
    }
    getZ(e) {
        let t = this.array[e * this.itemSize + 2];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setZ(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
    }
    getW(e) {
        let t = this.array[e * this.itemSize + 3];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setW(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
    }
    setXY(e, t, n) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this;
    }
    setXYZ(e, t, n, i) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this;
    }
    setXYZW(e, t, n, i, r) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array), r = Be(r, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this.array[e + 3] = r, this;
    }
    onUpload(e) {
        return this.onUploadCallback = e, this;
    }
    clone() {
        return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
        let e = {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: Array.from(this.array),
            normalized: this.normalized
        };
        return this.name !== "" && (e.name = this.name), this.usage !== Hr && (e.usage = this.usage), (this.updateRange.offset !== 0 || this.updateRange.count !== -1) && (e.updateRange = this.updateRange), e;
    }
}, Ql = class extends et {
    constructor(e, t, n){
        super(new Int8Array(e), t, n);
    }
}, jl = class extends et {
    constructor(e, t, n){
        super(new Uint8Array(e), t, n);
    }
}, eh = class extends et {
    constructor(e, t, n){
        super(new Uint8ClampedArray(e), t, n);
    }
}, th = class extends et {
    constructor(e, t, n){
        super(new Int16Array(e), t, n);
    }
}, Zr = class extends et {
    constructor(e, t, n){
        super(new Uint16Array(e), t, n);
    }
}, nh = class extends et {
    constructor(e, t, n){
        super(new Int32Array(e), t, n);
    }
}, Jr = class extends et {
    constructor(e, t, n){
        super(new Uint32Array(e), t, n);
    }
}, ih = class extends et {
    constructor(e, t, n){
        super(new Uint16Array(e), t, n), this.isFloat16BufferAttribute = !0;
    }
    getX(e) {
        let t = xs(this.array[e * this.itemSize]);
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setX(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize] = Nt(t), this;
    }
    getY(e) {
        let t = xs(this.array[e * this.itemSize + 1]);
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setY(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 1] = Nt(t), this;
    }
    getZ(e) {
        let t = xs(this.array[e * this.itemSize + 2]);
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setZ(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 2] = Nt(t), this;
    }
    getW(e) {
        let t = xs(this.array[e * this.itemSize + 3]);
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setW(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.array[e * this.itemSize + 3] = Nt(t), this;
    }
    setXY(e, t, n) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array)), this.array[e + 0] = Nt(t), this.array[e + 1] = Nt(n), this;
    }
    setXYZ(e, t, n, i) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array)), this.array[e + 0] = Nt(t), this.array[e + 1] = Nt(n), this.array[e + 2] = Nt(i), this;
    }
    setXYZW(e, t, n, i, r) {
        return e *= this.itemSize, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array), r = Be(r, this.array)), this.array[e + 0] = Nt(t), this.array[e + 1] = Nt(n), this.array[e + 2] = Nt(i), this.array[e + 3] = Nt(r), this;
    }
}, ve = class extends et {
    constructor(e, t, n){
        super(new Float32Array(e), t, n);
    }
}, sh = class extends et {
    constructor(e, t, n){
        super(new Float64Array(e), t, n);
    }
}, mp = 0, Gt = new ze, Ya = new Je, Ti = new A, Vt = new Qt, us = new Qt, xt = new A, Ge = class s1 extends sn {
    constructor(){
        super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", {
            value: mp++
        }), this.uuid = kt(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = {
            start: 0,
            count: 1 / 0
        }, this.userData = {};
    }
    getIndex() {
        return this.index;
    }
    setIndex(e) {
        return Array.isArray(e) ? this.index = new (Md(e) ? Jr : Zr)(e, 1) : this.index = e, this;
    }
    getAttribute(e) {
        return this.attributes[e];
    }
    setAttribute(e, t) {
        return this.attributes[e] = t, this;
    }
    deleteAttribute(e) {
        return delete this.attributes[e], this;
    }
    hasAttribute(e) {
        return this.attributes[e] !== void 0;
    }
    addGroup(e, t, n = 0) {
        this.groups.push({
            start: e,
            count: t,
            materialIndex: n
        });
    }
    clearGroups() {
        this.groups = [];
    }
    setDrawRange(e, t) {
        this.drawRange.start = e, this.drawRange.count = t;
    }
    applyMatrix4(e) {
        let t = this.attributes.position;
        t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
        let n = this.attributes.normal;
        if (n !== void 0) {
            let r = new He().getNormalMatrix(e);
            n.applyNormalMatrix(r), n.needsUpdate = !0;
        }
        let i = this.attributes.tangent;
        return i !== void 0 && (i.transformDirection(e), i.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
    }
    applyQuaternion(e) {
        return Gt.makeRotationFromQuaternion(e), this.applyMatrix4(Gt), this;
    }
    rotateX(e) {
        return Gt.makeRotationX(e), this.applyMatrix4(Gt), this;
    }
    rotateY(e) {
        return Gt.makeRotationY(e), this.applyMatrix4(Gt), this;
    }
    rotateZ(e) {
        return Gt.makeRotationZ(e), this.applyMatrix4(Gt), this;
    }
    translate(e, t, n) {
        return Gt.makeTranslation(e, t, n), this.applyMatrix4(Gt), this;
    }
    scale(e, t, n) {
        return Gt.makeScale(e, t, n), this.applyMatrix4(Gt), this;
    }
    lookAt(e) {
        return Ya.lookAt(e), Ya.updateMatrix(), this.applyMatrix4(Ya.matrix), this;
    }
    center() {
        return this.computeBoundingBox(), this.boundingBox.getCenter(Ti).negate(), this.translate(Ti.x, Ti.y, Ti.z), this;
    }
    setFromPoints(e) {
        let t = [];
        for(let n = 0, i = e.length; n < i; n++){
            let r = e[n];
            t.push(r.x, r.y, r.z || 0);
        }
        return this.setAttribute("position", new ve(t, 3)), this;
    }
    computeBoundingBox() {
        this.boundingBox === null && (this.boundingBox = new Qt);
        let e = this.attributes.position, t = this.morphAttributes.position;
        if (e && e.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingBox.set(new A(-1 / 0, -1 / 0, -1 / 0), new A(1 / 0, 1 / 0, 1 / 0));
            return;
        }
        if (e !== void 0) {
            if (this.boundingBox.setFromBufferAttribute(e), t) for(let n = 0, i = t.length; n < i; n++){
                let r = t[n];
                Vt.setFromBufferAttribute(r), this.morphTargetsRelative ? (xt.addVectors(this.boundingBox.min, Vt.min), this.boundingBox.expandByPoint(xt), xt.addVectors(this.boundingBox.max, Vt.max), this.boundingBox.expandByPoint(xt)) : (this.boundingBox.expandByPoint(Vt.min), this.boundingBox.expandByPoint(Vt.max));
            }
        } else this.boundingBox.makeEmpty();
        (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
    computeBoundingSphere() {
        this.boundingSphere === null && (this.boundingSphere = new Yt);
        let e = this.attributes.position, t = this.morphAttributes.position;
        if (e && e.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingSphere.set(new A, 1 / 0);
            return;
        }
        if (e) {
            let n = this.boundingSphere.center;
            if (Vt.setFromBufferAttribute(e), t) for(let r = 0, a = t.length; r < a; r++){
                let o = t[r];
                us.setFromBufferAttribute(o), this.morphTargetsRelative ? (xt.addVectors(Vt.min, us.min), Vt.expandByPoint(xt), xt.addVectors(Vt.max, us.max), Vt.expandByPoint(xt)) : (Vt.expandByPoint(us.min), Vt.expandByPoint(us.max));
            }
            Vt.getCenter(n);
            let i = 0;
            for(let r = 0, a = e.count; r < a; r++)xt.fromBufferAttribute(e, r), i = Math.max(i, n.distanceToSquared(xt));
            if (t) for(let r = 0, a = t.length; r < a; r++){
                let o = t[r], c = this.morphTargetsRelative;
                for(let l = 0, h = o.count; l < h; l++)xt.fromBufferAttribute(o, l), c && (Ti.fromBufferAttribute(e, l), xt.add(Ti)), i = Math.max(i, n.distanceToSquared(xt));
            }
            this.boundingSphere.radius = Math.sqrt(i), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
    }
    computeTangents() {
        let e = this.index, t = this.attributes;
        if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
            console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
            return;
        }
        let n = e.array, i = t.position.array, r = t.normal.array, a = t.uv.array, o = i.length / 3;
        this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new et(new Float32Array(4 * o), 4));
        let c = this.getAttribute("tangent").array, l = [], h = [];
        for(let T = 0; T < o; T++)l[T] = new A, h[T] = new A;
        let u = new A, d = new A, f = new A, m = new Z, _ = new Z, g = new Z, p = new A, v = new A;
        function x(T, O, Y) {
            u.fromArray(i, T * 3), d.fromArray(i, O * 3), f.fromArray(i, Y * 3), m.fromArray(a, T * 2), _.fromArray(a, O * 2), g.fromArray(a, Y * 2), d.sub(u), f.sub(u), _.sub(m), g.sub(m);
            let $ = 1 / (_.x * g.y - g.x * _.y);
            isFinite($) && (p.copy(d).multiplyScalar(g.y).addScaledVector(f, -_.y).multiplyScalar($), v.copy(f).multiplyScalar(_.x).addScaledVector(d, -g.x).multiplyScalar($), l[T].add(p), l[O].add(p), l[Y].add(p), h[T].add(v), h[O].add(v), h[Y].add(v));
        }
        let y = this.groups;
        y.length === 0 && (y = [
            {
                start: 0,
                count: n.length
            }
        ]);
        for(let T = 0, O = y.length; T < O; ++T){
            let Y = y[T], $ = Y.start, U = Y.count;
            for(let z = $, q = $ + U; z < q; z += 3)x(n[z + 0], n[z + 1], n[z + 2]);
        }
        let b = new A, w = new A, R = new A, I = new A;
        function M(T) {
            R.fromArray(r, T * 3), I.copy(R);
            let O = l[T];
            b.copy(O), b.sub(R.multiplyScalar(R.dot(O))).normalize(), w.crossVectors(I, O);
            let $ = w.dot(h[T]) < 0 ? -1 : 1;
            c[T * 4] = b.x, c[T * 4 + 1] = b.y, c[T * 4 + 2] = b.z, c[T * 4 + 3] = $;
        }
        for(let T = 0, O = y.length; T < O; ++T){
            let Y = y[T], $ = Y.start, U = Y.count;
            for(let z = $, q = $ + U; z < q; z += 3)M(n[z + 0]), M(n[z + 1]), M(n[z + 2]);
        }
    }
    computeVertexNormals() {
        let e = this.index, t = this.getAttribute("position");
        if (t !== void 0) {
            let n = this.getAttribute("normal");
            if (n === void 0) n = new et(new Float32Array(t.count * 3), 3), this.setAttribute("normal", n);
            else for(let d = 0, f = n.count; d < f; d++)n.setXYZ(d, 0, 0, 0);
            let i = new A, r = new A, a = new A, o = new A, c = new A, l = new A, h = new A, u = new A;
            if (e) for(let d = 0, f = e.count; d < f; d += 3){
                let m = e.getX(d + 0), _ = e.getX(d + 1), g = e.getX(d + 2);
                i.fromBufferAttribute(t, m), r.fromBufferAttribute(t, _), a.fromBufferAttribute(t, g), h.subVectors(a, r), u.subVectors(i, r), h.cross(u), o.fromBufferAttribute(n, m), c.fromBufferAttribute(n, _), l.fromBufferAttribute(n, g), o.add(h), c.add(h), l.add(h), n.setXYZ(m, o.x, o.y, o.z), n.setXYZ(_, c.x, c.y, c.z), n.setXYZ(g, l.x, l.y, l.z);
            }
            else for(let d = 0, f = t.count; d < f; d += 3)i.fromBufferAttribute(t, d + 0), r.fromBufferAttribute(t, d + 1), a.fromBufferAttribute(t, d + 2), h.subVectors(a, r), u.subVectors(i, r), h.cross(u), n.setXYZ(d + 0, h.x, h.y, h.z), n.setXYZ(d + 1, h.x, h.y, h.z), n.setXYZ(d + 2, h.x, h.y, h.z);
            this.normalizeNormals(), n.needsUpdate = !0;
        }
    }
    normalizeNormals() {
        let e = this.attributes.normal;
        for(let t = 0, n = e.count; t < n; t++)xt.fromBufferAttribute(e, t), xt.normalize(), e.setXYZ(t, xt.x, xt.y, xt.z);
    }
    toNonIndexed() {
        function e(o, c) {
            let l = o.array, h = o.itemSize, u = o.normalized, d = new l.constructor(c.length * h), f = 0, m = 0;
            for(let _ = 0, g = c.length; _ < g; _++){
                o.isInterleavedBufferAttribute ? f = c[_] * o.data.stride + o.offset : f = c[_] * h;
                for(let p = 0; p < h; p++)d[m++] = l[f++];
            }
            return new et(d, h, u);
        }
        if (this.index === null) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
        let t = new s1, n = this.index.array, i = this.attributes;
        for(let o in i){
            let c = i[o], l = e(c, n);
            t.setAttribute(o, l);
        }
        let r = this.morphAttributes;
        for(let o in r){
            let c = [], l = r[o];
            for(let h = 0, u = l.length; h < u; h++){
                let d = l[h], f = e(d, n);
                c.push(f);
            }
            t.morphAttributes[o] = c;
        }
        t.morphTargetsRelative = this.morphTargetsRelative;
        let a = this.groups;
        for(let o = 0, c = a.length; o < c; o++){
            let l = a[o];
            t.addGroup(l.start, l.count, l.materialIndex);
        }
        return t;
    }
    toJSON() {
        let e = {
            metadata: {
                version: 4.6,
                type: "BufferGeometry",
                generator: "BufferGeometry.toJSON"
            }
        };
        if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
            let c = this.parameters;
            for(let l in c)c[l] !== void 0 && (e[l] = c[l]);
            return e;
        }
        e.data = {
            attributes: {}
        };
        let t = this.index;
        t !== null && (e.data.index = {
            type: t.array.constructor.name,
            array: Array.prototype.slice.call(t.array)
        });
        let n = this.attributes;
        for(let c in n){
            let l = n[c];
            e.data.attributes[c] = l.toJSON(e.data);
        }
        let i = {}, r = !1;
        for(let c in this.morphAttributes){
            let l = this.morphAttributes[c], h = [];
            for(let u = 0, d = l.length; u < d; u++){
                let f = l[u];
                h.push(f.toJSON(e.data));
            }
            h.length > 0 && (i[c] = h, r = !0);
        }
        r && (e.data.morphAttributes = i, e.data.morphTargetsRelative = this.morphTargetsRelative);
        let a = this.groups;
        a.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(a)));
        let o = this.boundingSphere;
        return o !== null && (e.data.boundingSphere = {
            center: o.center.toArray(),
            radius: o.radius
        }), e;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
        let t = {};
        this.name = e.name;
        let n = e.index;
        n !== null && this.setIndex(n.clone(t));
        let i = e.attributes;
        for(let l in i){
            let h = i[l];
            this.setAttribute(l, h.clone(t));
        }
        let r = e.morphAttributes;
        for(let l in r){
            let h = [], u = r[l];
            for(let d = 0, f = u.length; d < f; d++)h.push(u[d].clone(t));
            this.morphAttributes[l] = h;
        }
        this.morphTargetsRelative = e.morphTargetsRelative;
        let a = e.groups;
        for(let l = 0, h = a.length; l < h; l++){
            let u = a[l];
            this.addGroup(u.start, u.count, u.materialIndex);
        }
        let o = e.boundingBox;
        o !== null && (this.boundingBox = o.clone());
        let c = e.boundingSphere;
        return c !== null && (this.boundingSphere = c.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}, rh = new ze, qn = new hi, js = new Yt, ah = new A, wi = new A, Ai = new A, Ri = new A, Za = new A, er = new A, tr = new Z, nr = new Z, ir = new Z, oh = new A, ch = new A, lh = new A, sr = new A, rr = new A, Mt = class extends Je {
    constructor(e = new Ge, t = new Sn){
        super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets();
    }
    copy(e, t) {
        return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
    }
    updateMorphTargets() {
        let t = this.geometry.morphAttributes, n = Object.keys(t);
        if (n.length > 0) {
            let i = t[n[0]];
            if (i !== void 0) {
                this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                for(let r = 0, a = i.length; r < a; r++){
                    let o = i[r].name || String(r);
                    this.morphTargetInfluences.push(0), this.morphTargetDictionary[o] = r;
                }
            }
        }
    }
    getVertexPosition(e, t) {
        let n = this.geometry, i = n.attributes.position, r = n.morphAttributes.position, a = n.morphTargetsRelative;
        t.fromBufferAttribute(i, e);
        let o = this.morphTargetInfluences;
        if (r && o) {
            er.set(0, 0, 0);
            for(let c = 0, l = r.length; c < l; c++){
                let h = o[c], u = r[c];
                h !== 0 && (Za.fromBufferAttribute(u, e), a ? er.addScaledVector(Za, h) : er.addScaledVector(Za.sub(t), h));
            }
            t.add(er);
        }
        return t;
    }
    raycast(e, t) {
        let n = this.geometry, i = this.material, r = this.matrixWorld;
        i !== void 0 && (n.boundingSphere === null && n.computeBoundingSphere(), js.copy(n.boundingSphere), js.applyMatrix4(r), qn.copy(e.ray).recast(e.near), !(js.containsPoint(qn.origin) === !1 && (qn.intersectSphere(js, ah) === null || qn.origin.distanceToSquared(ah) > (e.far - e.near) ** 2)) && (rh.copy(r).invert(), qn.copy(e.ray).applyMatrix4(rh), !(n.boundingBox !== null && qn.intersectsBox(n.boundingBox) === !1) && this._computeIntersections(e, t, qn)));
    }
    _computeIntersections(e, t, n) {
        let i, r = this.geometry, a = this.material, o = r.index, c = r.attributes.position, l = r.attributes.uv, h = r.attributes.uv1, u = r.attributes.normal, d = r.groups, f = r.drawRange;
        if (o !== null) if (Array.isArray(a)) for(let m = 0, _ = d.length; m < _; m++){
            let g = d[m], p = a[g.materialIndex], v = Math.max(g.start, f.start), x = Math.min(o.count, Math.min(g.start + g.count, f.start + f.count));
            for(let y = v, b = x; y < b; y += 3){
                let w = o.getX(y), R = o.getX(y + 1), I = o.getX(y + 2);
                i = ar(this, p, e, n, l, h, u, w, R, I), i && (i.faceIndex = Math.floor(y / 3), i.face.materialIndex = g.materialIndex, t.push(i));
            }
        }
        else {
            let m = Math.max(0, f.start), _ = Math.min(o.count, f.start + f.count);
            for(let g = m, p = _; g < p; g += 3){
                let v = o.getX(g), x = o.getX(g + 1), y = o.getX(g + 2);
                i = ar(this, a, e, n, l, h, u, v, x, y), i && (i.faceIndex = Math.floor(g / 3), t.push(i));
            }
        }
        else if (c !== void 0) if (Array.isArray(a)) for(let m = 0, _ = d.length; m < _; m++){
            let g = d[m], p = a[g.materialIndex], v = Math.max(g.start, f.start), x = Math.min(c.count, Math.min(g.start + g.count, f.start + f.count));
            for(let y = v, b = x; y < b; y += 3){
                let w = y, R = y + 1, I = y + 2;
                i = ar(this, p, e, n, l, h, u, w, R, I), i && (i.faceIndex = Math.floor(y / 3), i.face.materialIndex = g.materialIndex, t.push(i));
            }
        }
        else {
            let m = Math.max(0, f.start), _ = Math.min(c.count, f.start + f.count);
            for(let g = m, p = _; g < p; g += 3){
                let v = g, x = g + 1, y = g + 2;
                i = ar(this, a, e, n, l, h, u, v, x, y), i && (i.faceIndex = Math.floor(g / 3), t.push(i));
            }
        }
    }
};
function gp(s1, e, t, n, i, r, a, o) {
    let c;
    if (e.side === Ft ? c = n.intersectTriangle(a, r, i, !0, o) : c = n.intersectTriangle(i, r, a, e.side === Bn, o), c === null) return null;
    rr.copy(o), rr.applyMatrix4(s1.matrixWorld);
    let l = t.ray.origin.distanceTo(rr);
    return l < t.near || l > t.far ? null : {
        distance: l,
        point: rr.clone(),
        object: s1
    };
}
function ar(s1, e, t, n, i, r, a, o, c, l) {
    s1.getVertexPosition(o, wi), s1.getVertexPosition(c, Ai), s1.getVertexPosition(l, Ri);
    let h = gp(s1, e, t, n, wi, Ai, Ri, sr);
    if (h) {
        i && (tr.fromBufferAttribute(i, o), nr.fromBufferAttribute(i, c), ir.fromBufferAttribute(i, l), h.uv = Un.getInterpolation(sr, wi, Ai, Ri, tr, nr, ir, new Z)), r && (tr.fromBufferAttribute(r, o), nr.fromBufferAttribute(r, c), ir.fromBufferAttribute(r, l), h.uv1 = Un.getInterpolation(sr, wi, Ai, Ri, tr, nr, ir, new Z), h.uv2 = h.uv1), a && (oh.fromBufferAttribute(a, o), ch.fromBufferAttribute(a, c), lh.fromBufferAttribute(a, l), h.normal = Un.getInterpolation(sr, wi, Ai, Ri, oh, ch, lh, new A), h.normal.dot(n.direction) > 0 && h.normal.multiplyScalar(-1));
        let u = {
            a: o,
            b: c,
            c: l,
            normal: new A,
            materialIndex: 0
        };
        Un.getNormal(wi, Ai, Ri, u.normal), h.face = u;
    }
    return h;
}
var Ji = class s1 extends Ge {
    constructor(e = 1, t = 1, n = 1, i = 1, r = 1, a = 1){
        super(), this.type = "BoxGeometry", this.parameters = {
            width: e,
            height: t,
            depth: n,
            widthSegments: i,
            heightSegments: r,
            depthSegments: a
        };
        let o = this;
        i = Math.floor(i), r = Math.floor(r), a = Math.floor(a);
        let c = [], l = [], h = [], u = [], d = 0, f = 0;
        m("z", "y", "x", -1, -1, n, t, e, a, r, 0), m("z", "y", "x", 1, -1, n, t, -e, a, r, 1), m("x", "z", "y", 1, 1, e, n, t, i, a, 2), m("x", "z", "y", 1, -1, e, n, -t, i, a, 3), m("x", "y", "z", 1, -1, e, t, n, i, r, 4), m("x", "y", "z", -1, -1, e, t, -n, i, r, 5), this.setIndex(c), this.setAttribute("position", new ve(l, 3)), this.setAttribute("normal", new ve(h, 3)), this.setAttribute("uv", new ve(u, 2));
        function m(_, g, p, v, x, y, b, w, R, I, M) {
            let T = y / R, O = b / I, Y = y / 2, $ = b / 2, U = w / 2, z = R + 1, q = I + 1, H = 0, ne = 0, W = new A;
            for(let K = 0; K < q; K++){
                let D = K * O - $;
                for(let G = 0; G < z; G++){
                    let he = G * T - Y;
                    W[_] = he * v, W[g] = D * x, W[p] = U, l.push(W.x, W.y, W.z), W[_] = 0, W[g] = 0, W[p] = w > 0 ? 1 : -1, h.push(W.x, W.y, W.z), u.push(G / R), u.push(1 - K / I), H += 1;
                }
            }
            for(let K = 0; K < I; K++)for(let D = 0; D < R; D++){
                let G = d + D + z * K, he = d + D + z * (K + 1), fe = d + (D + 1) + z * (K + 1), _e = d + (D + 1) + z * K;
                c.push(G, he, _e), c.push(he, fe, _e), ne += 6;
            }
            o.addGroup(f, ne, M), f += ne, d += H;
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
    }
};
function $i(s1) {
    let e = {};
    for(let t in s1){
        e[t] = {};
        for(let n in s1[t]){
            let i = s1[t][n];
            i && (i.isColor || i.isMatrix3 || i.isMatrix4 || i.isVector2 || i.isVector3 || i.isVector4 || i.isTexture || i.isQuaternion) ? i.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][n] = null) : e[t][n] = i.clone() : Array.isArray(i) ? e[t][n] = i.slice() : e[t][n] = i;
        }
    }
    return e;
}
function Lt(s1) {
    let e = {};
    for(let t = 0; t < s1.length; t++){
        let n = $i(s1[t]);
        for(let i in n)e[i] = n[i];
    }
    return e;
}
function _p(s1) {
    let e = [];
    for(let t = 0; t < s1.length; t++)e.push(s1[t].clone());
    return e;
}
function bd(s1) {
    return s1.getRenderTarget() === null ? s1.outputColorSpace : Qe.workingColorSpace;
}
var xp = {
    clone: $i,
    merge: Lt
}, vp = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, yp = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`, jt = class extends bt {
    constructor(e){
        super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = vp, this.fragmentShader = yp, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
            derivatives: !1,
            fragDepth: !1,
            drawBuffers: !1,
            shaderTextureLOD: !1
        }, this.defaultAttributeValues = {
            color: [
                1,
                1,
                1
            ],
            uv: [
                0,
                0
            ],
            uv1: [
                0,
                0
            ]
        }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = $i(e.uniforms), this.uniformsGroups = _p(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        t.glslVersion = this.glslVersion, t.uniforms = {};
        for(let i in this.uniforms){
            let a = this.uniforms[i].value;
            a && a.isTexture ? t.uniforms[i] = {
                type: "t",
                value: a.toJSON(e).uuid
            } : a && a.isColor ? t.uniforms[i] = {
                type: "c",
                value: a.getHex()
            } : a && a.isVector2 ? t.uniforms[i] = {
                type: "v2",
                value: a.toArray()
            } : a && a.isVector3 ? t.uniforms[i] = {
                type: "v3",
                value: a.toArray()
            } : a && a.isVector4 ? t.uniforms[i] = {
                type: "v4",
                value: a.toArray()
            } : a && a.isMatrix3 ? t.uniforms[i] = {
                type: "m3",
                value: a.toArray()
            } : a && a.isMatrix4 ? t.uniforms[i] = {
                type: "m4",
                value: a.toArray()
            } : t.uniforms[i] = {
                value: a
            };
        }
        Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader, t.lights = this.lights, t.clipping = this.clipping;
        let n = {};
        for(let i in this.extensions)this.extensions[i] === !0 && (n[i] = !0);
        return Object.keys(n).length > 0 && (t.extensions = n), t;
    }
}, Cs = class extends Je {
    constructor(){
        super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new ze, this.projectionMatrix = new ze, this.projectionMatrixInverse = new ze, this.coordinateSystem = vn;
    }
    copy(e, t) {
        return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this.coordinateSystem = e.coordinateSystem, this;
    }
    getWorldDirection(e) {
        return super.getWorldDirection(e).negate();
    }
    updateMatrixWorld(e) {
        super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(e, t) {
        super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, yt = class extends Cs {
    constructor(e = 50, t = 1, n = .1, i = 2e3){
        super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = n, this.far = i, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
    }
    copy(e, t) {
        return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
    }
    setFocalLength(e) {
        let t = .5 * this.getFilmHeight() / e;
        this.fov = Zi * 2 * Math.atan(t), this.updateProjectionMatrix();
    }
    getFocalLength() {
        let e = Math.tan(ai * .5 * this.fov);
        return .5 * this.getFilmHeight() / e;
    }
    getEffectiveFOV() {
        return Zi * 2 * Math.atan(Math.tan(ai * .5 * this.fov) / this.zoom);
    }
    getFilmWidth() {
        return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
        return this.filmGauge / Math.max(this.aspect, 1);
    }
    setViewOffset(e, t, n, i, r, a) {
        this.aspect = e / t, this.view === null && (this.view = {
            enabled: !0,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = a, this.updateProjectionMatrix();
    }
    clearViewOffset() {
        this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        let e = this.near, t = e * Math.tan(ai * .5 * this.fov) / this.zoom, n = 2 * t, i = this.aspect * n, r = -.5 * i, a = this.view;
        if (this.view !== null && this.view.enabled) {
            let c = a.fullWidth, l = a.fullHeight;
            r += a.offsetX * i / c, t -= a.offsetY * n / l, i *= a.width / c, n *= a.height / l;
        }
        let o = this.filmOffset;
        o !== 0 && (r += e * o / this.getFilmWidth()), this.projectionMatrix.makePerspective(r, r + i, t, t - n, e, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
    }
}, Ci = -90, Pi = 1, _o = class extends Je {
    constructor(e, t, n){
        super(), this.type = "CubeCamera", this.renderTarget = n, this.coordinateSystem = null, this.activeMipmapLevel = 0;
        let i = new yt(Ci, Pi, e, t);
        i.layers = this.layers, this.add(i);
        let r = new yt(Ci, Pi, e, t);
        r.layers = this.layers, this.add(r);
        let a = new yt(Ci, Pi, e, t);
        a.layers = this.layers, this.add(a);
        let o = new yt(Ci, Pi, e, t);
        o.layers = this.layers, this.add(o);
        let c = new yt(Ci, Pi, e, t);
        c.layers = this.layers, this.add(c);
        let l = new yt(Ci, Pi, e, t);
        l.layers = this.layers, this.add(l);
    }
    updateCoordinateSystem() {
        let e = this.coordinateSystem, t = this.children.concat(), [n, i, r, a, o, c] = t;
        for (let l of t)this.remove(l);
        if (e === vn) n.up.set(0, 1, 0), n.lookAt(1, 0, 0), i.up.set(0, 1, 0), i.lookAt(-1, 0, 0), r.up.set(0, 0, -1), r.lookAt(0, 1, 0), a.up.set(0, 0, 1), a.lookAt(0, -1, 0), o.up.set(0, 1, 0), o.lookAt(0, 0, 1), c.up.set(0, 1, 0), c.lookAt(0, 0, -1);
        else if (e === Gr) n.up.set(0, -1, 0), n.lookAt(-1, 0, 0), i.up.set(0, -1, 0), i.lookAt(1, 0, 0), r.up.set(0, 0, 1), r.lookAt(0, 1, 0), a.up.set(0, 0, -1), a.lookAt(0, -1, 0), o.up.set(0, -1, 0), o.lookAt(0, 0, 1), c.up.set(0, -1, 0), c.lookAt(0, 0, -1);
        else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
        for (let l of t)this.add(l), l.updateMatrixWorld();
    }
    update(e, t) {
        this.parent === null && this.updateMatrixWorld();
        let { renderTarget: n , activeMipmapLevel: i  } = this;
        this.coordinateSystem !== e.coordinateSystem && (this.coordinateSystem = e.coordinateSystem, this.updateCoordinateSystem());
        let [r, a, o, c, l, h] = this.children, u = e.getRenderTarget(), d = e.getActiveCubeFace(), f = e.getActiveMipmapLevel(), m = e.xr.enabled;
        e.xr.enabled = !1;
        let _ = n.texture.generateMipmaps;
        n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0, i), e.render(t, r), e.setRenderTarget(n, 1, i), e.render(t, a), e.setRenderTarget(n, 2, i), e.render(t, o), e.setRenderTarget(n, 3, i), e.render(t, c), e.setRenderTarget(n, 4, i), e.render(t, l), n.texture.generateMipmaps = _, e.setRenderTarget(n, 5, i), e.render(t, h), e.setRenderTarget(u, d, f), e.xr.enabled = m, n.texture.needsPMREMUpdate = !0;
    }
}, Ki = class extends St {
    constructor(e, t, n, i, r, a, o, c, l, h){
        e = e !== void 0 ? e : [], t = t !== void 0 ? t : zn, super(e, t, n, i, r, a, o, c, l, h), this.isCubeTexture = !0, this.flipY = !1;
    }
    get images() {
        return this.image;
    }
    set images(e) {
        this.image = e;
    }
}, xo = class extends qt {
    constructor(e = 1, t = {}){
        super(e, e, t), this.isWebGLCubeRenderTarget = !0;
        let n = {
            width: e,
            height: e,
            depth: 1
        }, i = [
            n,
            n,
            n,
            n,
            n,
            n
        ];
        t.encoding !== void 0 && (Ms("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."), t.colorSpace = t.encoding === ri ? vt : Xt), this.texture = new Ki(i, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : mt;
    }
    fromEquirectangularTexture(e, t) {
        this.texture.type = t.type, this.texture.colorSpace = t.colorSpace, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
        let n = {
            uniforms: {
                tEquirect: {
                    value: null
                }
            },
            vertexShader: `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
            fragmentShader: `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
        }, i = new Ji(5, 5, 5), r = new jt({
            name: "CubemapFromEquirect",
            uniforms: $i(n.uniforms),
            vertexShader: n.vertexShader,
            fragmentShader: n.fragmentShader,
            side: Ft,
            blending: Dn
        });
        r.uniforms.tEquirect.value = t;
        let a = new Mt(i, r), o = t.minFilter;
        return t.minFilter === li && (t.minFilter = mt), new _o(1, 10, this).update(e, a), t.minFilter = o, a.geometry.dispose(), a.material.dispose(), this;
    }
    clear(e, t, n, i) {
        let r = e.getRenderTarget();
        for(let a = 0; a < 6; a++)e.setRenderTarget(this, a), e.clear(t, n, i);
        e.setRenderTarget(r);
    }
}, Ja = new A, Mp = new A, Sp = new He, mn = class {
    constructor(e = new A(1, 0, 0), t = 0){
        this.isPlane = !0, this.normal = e, this.constant = t;
    }
    set(e, t) {
        return this.normal.copy(e), this.constant = t, this;
    }
    setComponents(e, t, n, i) {
        return this.normal.set(e, t, n), this.constant = i, this;
    }
    setFromNormalAndCoplanarPoint(e, t) {
        return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
    }
    setFromCoplanarPoints(e, t, n) {
        let i = Ja.subVectors(n, t).cross(Mp.subVectors(e, t)).normalize();
        return this.setFromNormalAndCoplanarPoint(i, e), this;
    }
    copy(e) {
        return this.normal.copy(e.normal), this.constant = e.constant, this;
    }
    normalize() {
        let e = 1 / this.normal.length();
        return this.normal.multiplyScalar(e), this.constant *= e, this;
    }
    negate() {
        return this.constant *= -1, this.normal.negate(), this;
    }
    distanceToPoint(e) {
        return this.normal.dot(e) + this.constant;
    }
    distanceToSphere(e) {
        return this.distanceToPoint(e.center) - e.radius;
    }
    projectPoint(e, t) {
        return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
    }
    intersectLine(e, t) {
        let n = e.delta(Ja), i = this.normal.dot(n);
        if (i === 0) return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
        let r = -(e.start.dot(this.normal) + this.constant) / i;
        return r < 0 || r > 1 ? null : t.copy(e.start).addScaledVector(n, r);
    }
    intersectsLine(e) {
        let t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end);
        return t < 0 && n > 0 || n < 0 && t > 0;
    }
    intersectsBox(e) {
        return e.intersectsPlane(this);
    }
    intersectsSphere(e) {
        return e.intersectsPlane(this);
    }
    coplanarPoint(e) {
        return e.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(e, t) {
        let n = t || Sp.getNormalMatrix(e), i = this.coplanarPoint(Ja).applyMatrix4(e), r = this.normal.applyMatrix3(n).normalize();
        return this.constant = -i.dot(r), this;
    }
    translate(e) {
        return this.constant -= e.dot(this.normal), this;
    }
    equals(e) {
        return e.normal.equals(this.normal) && e.constant === this.constant;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Yn = new Yt, or = new A, Ps = class {
    constructor(e = new mn, t = new mn, n = new mn, i = new mn, r = new mn, a = new mn){
        this.planes = [
            e,
            t,
            n,
            i,
            r,
            a
        ];
    }
    set(e, t, n, i, r, a) {
        let o = this.planes;
        return o[0].copy(e), o[1].copy(t), o[2].copy(n), o[3].copy(i), o[4].copy(r), o[5].copy(a), this;
    }
    copy(e) {
        let t = this.planes;
        for(let n = 0; n < 6; n++)t[n].copy(e.planes[n]);
        return this;
    }
    setFromProjectionMatrix(e, t = vn) {
        let n = this.planes, i = e.elements, r = i[0], a = i[1], o = i[2], c = i[3], l = i[4], h = i[5], u = i[6], d = i[7], f = i[8], m = i[9], _ = i[10], g = i[11], p = i[12], v = i[13], x = i[14], y = i[15];
        if (n[0].setComponents(c - r, d - l, g - f, y - p).normalize(), n[1].setComponents(c + r, d + l, g + f, y + p).normalize(), n[2].setComponents(c + a, d + h, g + m, y + v).normalize(), n[3].setComponents(c - a, d - h, g - m, y - v).normalize(), n[4].setComponents(c - o, d - u, g - _, y - x).normalize(), t === vn) n[5].setComponents(c + o, d + u, g + _, y + x).normalize();
        else if (t === Gr) n[5].setComponents(o, u, _, x).normalize();
        else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + t);
        return this;
    }
    intersectsObject(e) {
        if (e.boundingSphere !== void 0) e.boundingSphere === null && e.computeBoundingSphere(), Yn.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
        else {
            let t = e.geometry;
            t.boundingSphere === null && t.computeBoundingSphere(), Yn.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
        }
        return this.intersectsSphere(Yn);
    }
    intersectsSprite(e) {
        return Yn.center.set(0, 0, 0), Yn.radius = .7071067811865476, Yn.applyMatrix4(e.matrixWorld), this.intersectsSphere(Yn);
    }
    intersectsSphere(e) {
        let t = this.planes, n = e.center, i = -e.radius;
        for(let r = 0; r < 6; r++)if (t[r].distanceToPoint(n) < i) return !1;
        return !0;
    }
    intersectsBox(e) {
        let t = this.planes;
        for(let n = 0; n < 6; n++){
            let i = t[n];
            if (or.x = i.normal.x > 0 ? e.max.x : e.min.x, or.y = i.normal.y > 0 ? e.max.y : e.min.y, or.z = i.normal.z > 0 ? e.max.z : e.min.z, i.distanceToPoint(or) < 0) return !1;
        }
        return !0;
    }
    containsPoint(e) {
        let t = this.planes;
        for(let n = 0; n < 6; n++)if (t[n].distanceToPoint(e) < 0) return !1;
        return !0;
    }
    clone() {
        return new this.constructor().copy(this);
    }
};
function Ed() {
    let s1 = null, e = !1, t = null, n = null;
    function i(r, a) {
        t(r, a), n = s1.requestAnimationFrame(i);
    }
    return {
        start: function() {
            e !== !0 && t !== null && (n = s1.requestAnimationFrame(i), e = !0);
        },
        stop: function() {
            s1.cancelAnimationFrame(n), e = !1;
        },
        setAnimationLoop: function(r) {
            t = r;
        },
        setContext: function(r) {
            s1 = r;
        }
    };
}
function bp(s1, e) {
    let t = e.isWebGL2, n = new WeakMap;
    function i(l, h) {
        let u = l.array, d = l.usage, f = s1.createBuffer();
        s1.bindBuffer(h, f), s1.bufferData(h, u, d), l.onUploadCallback();
        let m;
        if (u instanceof Float32Array) m = s1.FLOAT;
        else if (u instanceof Uint16Array) if (l.isFloat16BufferAttribute) if (t) m = s1.HALF_FLOAT;
        else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
        else m = s1.UNSIGNED_SHORT;
        else if (u instanceof Int16Array) m = s1.SHORT;
        else if (u instanceof Uint32Array) m = s1.UNSIGNED_INT;
        else if (u instanceof Int32Array) m = s1.INT;
        else if (u instanceof Int8Array) m = s1.BYTE;
        else if (u instanceof Uint8Array) m = s1.UNSIGNED_BYTE;
        else if (u instanceof Uint8ClampedArray) m = s1.UNSIGNED_BYTE;
        else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + u);
        return {
            buffer: f,
            type: m,
            bytesPerElement: u.BYTES_PER_ELEMENT,
            version: l.version
        };
    }
    function r(l, h, u) {
        let d = h.array, f = h.updateRange;
        s1.bindBuffer(u, l), f.count === -1 ? s1.bufferSubData(u, 0, d) : (t ? s1.bufferSubData(u, f.offset * d.BYTES_PER_ELEMENT, d, f.offset, f.count) : s1.bufferSubData(u, f.offset * d.BYTES_PER_ELEMENT, d.subarray(f.offset, f.offset + f.count)), f.count = -1), h.onUploadCallback();
    }
    function a(l) {
        return l.isInterleavedBufferAttribute && (l = l.data), n.get(l);
    }
    function o(l) {
        l.isInterleavedBufferAttribute && (l = l.data);
        let h = n.get(l);
        h && (s1.deleteBuffer(h.buffer), n.delete(l));
    }
    function c(l, h) {
        if (l.isGLBufferAttribute) {
            let d = n.get(l);
            (!d || d.version < l.version) && n.set(l, {
                buffer: l.buffer,
                type: l.type,
                bytesPerElement: l.elementSize,
                version: l.version
            });
            return;
        }
        l.isInterleavedBufferAttribute && (l = l.data);
        let u = n.get(l);
        u === void 0 ? n.set(l, i(l, h)) : u.version < l.version && (r(u.buffer, l, h), u.version = l.version);
    }
    return {
        get: a,
        remove: o,
        update: c
    };
}
var $r = class s1 extends Ge {
    constructor(e = 1, t = 1, n = 1, i = 1){
        super(), this.type = "PlaneGeometry", this.parameters = {
            width: e,
            height: t,
            widthSegments: n,
            heightSegments: i
        };
        let r = e / 2, a = t / 2, o = Math.floor(n), c = Math.floor(i), l = o + 1, h = c + 1, u = e / o, d = t / c, f = [], m = [], _ = [], g = [];
        for(let p = 0; p < h; p++){
            let v = p * d - a;
            for(let x = 0; x < l; x++){
                let y = x * u - r;
                m.push(y, -v, 0), _.push(0, 0, 1), g.push(x / o), g.push(1 - p / c);
            }
        }
        for(let p = 0; p < c; p++)for(let v = 0; v < o; v++){
            let x = v + l * p, y = v + l * (p + 1), b = v + 1 + l * (p + 1), w = v + 1 + l * p;
            f.push(x, y, w), f.push(y, b, w);
        }
        this.setIndex(f), this.setAttribute("position", new ve(m, 3)), this.setAttribute("normal", new ve(_, 3)), this.setAttribute("uv", new ve(g, 2));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.width, e.height, e.widthSegments, e.heightSegments);
    }
}, Ep = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, Tp = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, wp = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, Ap = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, Rp = `#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`, Cp = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, Pp = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, Lp = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, Ip = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, Up = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, Dp = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, Np = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, Op = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, Fp = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`, Bp = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, zp = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, Vp = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, kp = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, Hp = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, Gp = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`, Wp = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`, Xp = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, qp = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, Yp = `vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, Zp = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, Jp = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, $p = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, Kp = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, Qp = "gl_FragColor = linearToOutputTexel( gl_FragColor );", jp = `
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return sRGBTransferOETF( value );
}`, em = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, tm = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, nm = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, im = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, sm = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, rm = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, am = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, om = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, cm = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, lm = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, hm = `#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`, um = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, dm = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, fm = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, pm = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, mm = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, gm = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, _m = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, xm = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, vm = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, ym = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	anisotropyV /= material.anisotropy;
	material.anisotropy = saturate( material.anisotropy );
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;
#endif`, Mm = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, Sm = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal;
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, bm = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, Em = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, Tm = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, wm = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, Am = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`, Rm = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`, Cm = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, Pm = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, Lm = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, Im = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, Um = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, Dm = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, Nm = `#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, Om = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`, Fm = `#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`, Bm = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`, zm = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, Vm = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, km = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, Hm = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, Gm = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, Wm = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, Xm = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, qm = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, Ym = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, Zm = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, Jm = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, $m = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, Km = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, Qm = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, jm = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, eg = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, tg = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, ng = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, ig = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`, sg = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, rg = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, ag = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, og = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, cg = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`, lg = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, hg = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, ug = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, dg = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, fg = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, pg = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, mg = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, gg = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, _g = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, xg = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, vg = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, yg = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`, Mg = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, Sg = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, bg = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, Eg = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, Tg = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, wg = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, Ag = `#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, Rg = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`, Cg = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, Pg = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, Lg = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, Ig = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, Ug = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, Dg = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, Ng = `#include <common>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, Og = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Fg = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Bg = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, zg = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, Vg = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, kg = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, Hg = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, Gg = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Wg = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Xg = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, qg = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Yg = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Zg = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Jg = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, $g = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, Kg = `#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Qg = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, jg = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, e_ = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, ke = {
    alphahash_fragment: Ep,
    alphahash_pars_fragment: Tp,
    alphamap_fragment: wp,
    alphamap_pars_fragment: Ap,
    alphatest_fragment: Rp,
    alphatest_pars_fragment: Cp,
    aomap_fragment: Pp,
    aomap_pars_fragment: Lp,
    begin_vertex: Ip,
    beginnormal_vertex: Up,
    bsdfs: Dp,
    iridescence_fragment: Np,
    bumpmap_pars_fragment: Op,
    clipping_planes_fragment: Fp,
    clipping_planes_pars_fragment: Bp,
    clipping_planes_pars_vertex: zp,
    clipping_planes_vertex: Vp,
    color_fragment: kp,
    color_pars_fragment: Hp,
    color_pars_vertex: Gp,
    color_vertex: Wp,
    common: Xp,
    cube_uv_reflection_fragment: qp,
    defaultnormal_vertex: Yp,
    displacementmap_pars_vertex: Zp,
    displacementmap_vertex: Jp,
    emissivemap_fragment: $p,
    emissivemap_pars_fragment: Kp,
    colorspace_fragment: Qp,
    colorspace_pars_fragment: jp,
    envmap_fragment: em,
    envmap_common_pars_fragment: tm,
    envmap_pars_fragment: nm,
    envmap_pars_vertex: im,
    envmap_physical_pars_fragment: mm,
    envmap_vertex: sm,
    fog_vertex: rm,
    fog_pars_vertex: am,
    fog_fragment: om,
    fog_pars_fragment: cm,
    gradientmap_pars_fragment: lm,
    lightmap_fragment: hm,
    lightmap_pars_fragment: um,
    lights_lambert_fragment: dm,
    lights_lambert_pars_fragment: fm,
    lights_pars_begin: pm,
    lights_toon_fragment: gm,
    lights_toon_pars_fragment: _m,
    lights_phong_fragment: xm,
    lights_phong_pars_fragment: vm,
    lights_physical_fragment: ym,
    lights_physical_pars_fragment: Mm,
    lights_fragment_begin: Sm,
    lights_fragment_maps: bm,
    lights_fragment_end: Em,
    logdepthbuf_fragment: Tm,
    logdepthbuf_pars_fragment: wm,
    logdepthbuf_pars_vertex: Am,
    logdepthbuf_vertex: Rm,
    map_fragment: Cm,
    map_pars_fragment: Pm,
    map_particle_fragment: Lm,
    map_particle_pars_fragment: Im,
    metalnessmap_fragment: Um,
    metalnessmap_pars_fragment: Dm,
    morphcolor_vertex: Nm,
    morphnormal_vertex: Om,
    morphtarget_pars_vertex: Fm,
    morphtarget_vertex: Bm,
    normal_fragment_begin: zm,
    normal_fragment_maps: Vm,
    normal_pars_fragment: km,
    normal_pars_vertex: Hm,
    normal_vertex: Gm,
    normalmap_pars_fragment: Wm,
    clearcoat_normal_fragment_begin: Xm,
    clearcoat_normal_fragment_maps: qm,
    clearcoat_pars_fragment: Ym,
    iridescence_pars_fragment: Zm,
    opaque_fragment: Jm,
    packing: $m,
    premultiplied_alpha_fragment: Km,
    project_vertex: Qm,
    dithering_fragment: jm,
    dithering_pars_fragment: eg,
    roughnessmap_fragment: tg,
    roughnessmap_pars_fragment: ng,
    shadowmap_pars_fragment: ig,
    shadowmap_pars_vertex: sg,
    shadowmap_vertex: rg,
    shadowmask_pars_fragment: ag,
    skinbase_vertex: og,
    skinning_pars_vertex: cg,
    skinning_vertex: lg,
    skinnormal_vertex: hg,
    specularmap_fragment: ug,
    specularmap_pars_fragment: dg,
    tonemapping_fragment: fg,
    tonemapping_pars_fragment: pg,
    transmission_fragment: mg,
    transmission_pars_fragment: gg,
    uv_pars_fragment: _g,
    uv_pars_vertex: xg,
    uv_vertex: vg,
    worldpos_vertex: yg,
    background_vert: Mg,
    background_frag: Sg,
    backgroundCube_vert: bg,
    backgroundCube_frag: Eg,
    cube_vert: Tg,
    cube_frag: wg,
    depth_vert: Ag,
    depth_frag: Rg,
    distanceRGBA_vert: Cg,
    distanceRGBA_frag: Pg,
    equirect_vert: Lg,
    equirect_frag: Ig,
    linedashed_vert: Ug,
    linedashed_frag: Dg,
    meshbasic_vert: Ng,
    meshbasic_frag: Og,
    meshlambert_vert: Fg,
    meshlambert_frag: Bg,
    meshmatcap_vert: zg,
    meshmatcap_frag: Vg,
    meshnormal_vert: kg,
    meshnormal_frag: Hg,
    meshphong_vert: Gg,
    meshphong_frag: Wg,
    meshphysical_vert: Xg,
    meshphysical_frag: qg,
    meshtoon_vert: Yg,
    meshtoon_frag: Zg,
    points_vert: Jg,
    points_frag: $g,
    shadow_vert: Kg,
    shadow_frag: Qg,
    sprite_vert: jg,
    sprite_frag: e_
}, le = {
    common: {
        diffuse: {
            value: new pe(16777215)
        },
        opacity: {
            value: 1
        },
        map: {
            value: null
        },
        mapTransform: {
            value: new He
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: new He
        },
        alphaTest: {
            value: 0
        }
    },
    specularmap: {
        specularMap: {
            value: null
        },
        specularMapTransform: {
            value: new He
        }
    },
    envmap: {
        envMap: {
            value: null
        },
        flipEnvMap: {
            value: -1
        },
        reflectivity: {
            value: 1
        },
        ior: {
            value: 1.5
        },
        refractionRatio: {
            value: .98
        }
    },
    aomap: {
        aoMap: {
            value: null
        },
        aoMapIntensity: {
            value: 1
        },
        aoMapTransform: {
            value: new He
        }
    },
    lightmap: {
        lightMap: {
            value: null
        },
        lightMapIntensity: {
            value: 1
        },
        lightMapTransform: {
            value: new He
        }
    },
    bumpmap: {
        bumpMap: {
            value: null
        },
        bumpMapTransform: {
            value: new He
        },
        bumpScale: {
            value: 1
        }
    },
    normalmap: {
        normalMap: {
            value: null
        },
        normalMapTransform: {
            value: new He
        },
        normalScale: {
            value: new Z(1, 1)
        }
    },
    displacementmap: {
        displacementMap: {
            value: null
        },
        displacementMapTransform: {
            value: new He
        },
        displacementScale: {
            value: 1
        },
        displacementBias: {
            value: 0
        }
    },
    emissivemap: {
        emissiveMap: {
            value: null
        },
        emissiveMapTransform: {
            value: new He
        }
    },
    metalnessmap: {
        metalnessMap: {
            value: null
        },
        metalnessMapTransform: {
            value: new He
        }
    },
    roughnessmap: {
        roughnessMap: {
            value: null
        },
        roughnessMapTransform: {
            value: new He
        }
    },
    gradientmap: {
        gradientMap: {
            value: null
        }
    },
    fog: {
        fogDensity: {
            value: 25e-5
        },
        fogNear: {
            value: 1
        },
        fogFar: {
            value: 2e3
        },
        fogColor: {
            value: new pe(16777215)
        }
    },
    lights: {
        ambientLightColor: {
            value: []
        },
        lightProbe: {
            value: []
        },
        directionalLights: {
            value: [],
            properties: {
                direction: {},
                color: {}
            }
        },
        directionalLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        directionalShadowMap: {
            value: []
        },
        directionalShadowMatrix: {
            value: []
        },
        spotLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                direction: {},
                distance: {},
                coneCos: {},
                penumbraCos: {},
                decay: {}
            }
        },
        spotLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        spotLightMap: {
            value: []
        },
        spotShadowMap: {
            value: []
        },
        spotLightMatrix: {
            value: []
        },
        pointLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                decay: {},
                distance: {}
            }
        },
        pointLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
                shadowCameraNear: {},
                shadowCameraFar: {}
            }
        },
        pointShadowMap: {
            value: []
        },
        pointShadowMatrix: {
            value: []
        },
        hemisphereLights: {
            value: [],
            properties: {
                direction: {},
                skyColor: {},
                groundColor: {}
            }
        },
        rectAreaLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                width: {},
                height: {}
            }
        },
        ltc_1: {
            value: null
        },
        ltc_2: {
            value: null
        }
    },
    points: {
        diffuse: {
            value: new pe(16777215)
        },
        opacity: {
            value: 1
        },
        size: {
            value: 1
        },
        scale: {
            value: 1
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: new He
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: new He
        }
    },
    sprite: {
        diffuse: {
            value: new pe(16777215)
        },
        opacity: {
            value: 1
        },
        center: {
            value: new Z(.5, .5)
        },
        rotation: {
            value: 0
        },
        map: {
            value: null
        },
        mapTransform: {
            value: new He
        },
        alphaMap: {
            value: null
        },
        alphaMapTransform: {
            value: new He
        },
        alphaTest: {
            value: 0
        }
    }
}, nn = {
    basic: {
        uniforms: Lt([
            le.common,
            le.specularmap,
            le.envmap,
            le.aomap,
            le.lightmap,
            le.fog
        ]),
        vertexShader: ke.meshbasic_vert,
        fragmentShader: ke.meshbasic_frag
    },
    lambert: {
        uniforms: Lt([
            le.common,
            le.specularmap,
            le.envmap,
            le.aomap,
            le.lightmap,
            le.emissivemap,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            le.fog,
            le.lights,
            {
                emissive: {
                    value: new pe(0)
                }
            }
        ]),
        vertexShader: ke.meshlambert_vert,
        fragmentShader: ke.meshlambert_frag
    },
    phong: {
        uniforms: Lt([
            le.common,
            le.specularmap,
            le.envmap,
            le.aomap,
            le.lightmap,
            le.emissivemap,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            le.fog,
            le.lights,
            {
                emissive: {
                    value: new pe(0)
                },
                specular: {
                    value: new pe(1118481)
                },
                shininess: {
                    value: 30
                }
            }
        ]),
        vertexShader: ke.meshphong_vert,
        fragmentShader: ke.meshphong_frag
    },
    standard: {
        uniforms: Lt([
            le.common,
            le.envmap,
            le.aomap,
            le.lightmap,
            le.emissivemap,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            le.roughnessmap,
            le.metalnessmap,
            le.fog,
            le.lights,
            {
                emissive: {
                    value: new pe(0)
                },
                roughness: {
                    value: 1
                },
                metalness: {
                    value: 0
                },
                envMapIntensity: {
                    value: 1
                }
            }
        ]),
        vertexShader: ke.meshphysical_vert,
        fragmentShader: ke.meshphysical_frag
    },
    toon: {
        uniforms: Lt([
            le.common,
            le.aomap,
            le.lightmap,
            le.emissivemap,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            le.gradientmap,
            le.fog,
            le.lights,
            {
                emissive: {
                    value: new pe(0)
                }
            }
        ]),
        vertexShader: ke.meshtoon_vert,
        fragmentShader: ke.meshtoon_frag
    },
    matcap: {
        uniforms: Lt([
            le.common,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            le.fog,
            {
                matcap: {
                    value: null
                }
            }
        ]),
        vertexShader: ke.meshmatcap_vert,
        fragmentShader: ke.meshmatcap_frag
    },
    points: {
        uniforms: Lt([
            le.points,
            le.fog
        ]),
        vertexShader: ke.points_vert,
        fragmentShader: ke.points_frag
    },
    dashed: {
        uniforms: Lt([
            le.common,
            le.fog,
            {
                scale: {
                    value: 1
                },
                dashSize: {
                    value: 1
                },
                totalSize: {
                    value: 2
                }
            }
        ]),
        vertexShader: ke.linedashed_vert,
        fragmentShader: ke.linedashed_frag
    },
    depth: {
        uniforms: Lt([
            le.common,
            le.displacementmap
        ]),
        vertexShader: ke.depth_vert,
        fragmentShader: ke.depth_frag
    },
    normal: {
        uniforms: Lt([
            le.common,
            le.bumpmap,
            le.normalmap,
            le.displacementmap,
            {
                opacity: {
                    value: 1
                }
            }
        ]),
        vertexShader: ke.meshnormal_vert,
        fragmentShader: ke.meshnormal_frag
    },
    sprite: {
        uniforms: Lt([
            le.sprite,
            le.fog
        ]),
        vertexShader: ke.sprite_vert,
        fragmentShader: ke.sprite_frag
    },
    background: {
        uniforms: {
            uvTransform: {
                value: new He
            },
            t2D: {
                value: null
            },
            backgroundIntensity: {
                value: 1
            }
        },
        vertexShader: ke.background_vert,
        fragmentShader: ke.background_frag
    },
    backgroundCube: {
        uniforms: {
            envMap: {
                value: null
            },
            flipEnvMap: {
                value: -1
            },
            backgroundBlurriness: {
                value: 0
            },
            backgroundIntensity: {
                value: 1
            }
        },
        vertexShader: ke.backgroundCube_vert,
        fragmentShader: ke.backgroundCube_frag
    },
    cube: {
        uniforms: {
            tCube: {
                value: null
            },
            tFlip: {
                value: -1
            },
            opacity: {
                value: 1
            }
        },
        vertexShader: ke.cube_vert,
        fragmentShader: ke.cube_frag
    },
    equirect: {
        uniforms: {
            tEquirect: {
                value: null
            }
        },
        vertexShader: ke.equirect_vert,
        fragmentShader: ke.equirect_frag
    },
    distanceRGBA: {
        uniforms: Lt([
            le.common,
            le.displacementmap,
            {
                referencePosition: {
                    value: new A
                },
                nearDistance: {
                    value: 1
                },
                farDistance: {
                    value: 1e3
                }
            }
        ]),
        vertexShader: ke.distanceRGBA_vert,
        fragmentShader: ke.distanceRGBA_frag
    },
    shadow: {
        uniforms: Lt([
            le.lights,
            le.fog,
            {
                color: {
                    value: new pe(0)
                },
                opacity: {
                    value: 1
                }
            }
        ]),
        vertexShader: ke.shadow_vert,
        fragmentShader: ke.shadow_frag
    }
};
nn.physical = {
    uniforms: Lt([
        nn.standard.uniforms,
        {
            clearcoat: {
                value: 0
            },
            clearcoatMap: {
                value: null
            },
            clearcoatMapTransform: {
                value: new He
            },
            clearcoatNormalMap: {
                value: null
            },
            clearcoatNormalMapTransform: {
                value: new He
            },
            clearcoatNormalScale: {
                value: new Z(1, 1)
            },
            clearcoatRoughness: {
                value: 0
            },
            clearcoatRoughnessMap: {
                value: null
            },
            clearcoatRoughnessMapTransform: {
                value: new He
            },
            iridescence: {
                value: 0
            },
            iridescenceMap: {
                value: null
            },
            iridescenceMapTransform: {
                value: new He
            },
            iridescenceIOR: {
                value: 1.3
            },
            iridescenceThicknessMinimum: {
                value: 100
            },
            iridescenceThicknessMaximum: {
                value: 400
            },
            iridescenceThicknessMap: {
                value: null
            },
            iridescenceThicknessMapTransform: {
                value: new He
            },
            sheen: {
                value: 0
            },
            sheenColor: {
                value: new pe(0)
            },
            sheenColorMap: {
                value: null
            },
            sheenColorMapTransform: {
                value: new He
            },
            sheenRoughness: {
                value: 1
            },
            sheenRoughnessMap: {
                value: null
            },
            sheenRoughnessMapTransform: {
                value: new He
            },
            transmission: {
                value: 0
            },
            transmissionMap: {
                value: null
            },
            transmissionMapTransform: {
                value: new He
            },
            transmissionSamplerSize: {
                value: new Z
            },
            transmissionSamplerMap: {
                value: null
            },
            thickness: {
                value: 0
            },
            thicknessMap: {
                value: null
            },
            thicknessMapTransform: {
                value: new He
            },
            attenuationDistance: {
                value: 0
            },
            attenuationColor: {
                value: new pe(0)
            },
            specularColor: {
                value: new pe(1, 1, 1)
            },
            specularColorMap: {
                value: null
            },
            specularColorMapTransform: {
                value: new He
            },
            specularIntensity: {
                value: 1
            },
            specularIntensityMap: {
                value: null
            },
            specularIntensityMapTransform: {
                value: new He
            },
            anisotropyVector: {
                value: new Z
            },
            anisotropyMap: {
                value: null
            },
            anisotropyMapTransform: {
                value: new He
            }
        }
    ]),
    vertexShader: ke.meshphysical_vert,
    fragmentShader: ke.meshphysical_frag
};
var cr = {
    r: 0,
    b: 0,
    g: 0
};
function t_(s1, e, t, n, i, r, a) {
    let o = new pe(0), c = r === !0 ? 0 : 1, l, h, u = null, d = 0, f = null;
    function m(g, p) {
        let v = !1, x = p.isScene === !0 ? p.background : null;
        x && x.isTexture && (x = (p.backgroundBlurriness > 0 ? t : e).get(x)), x === null ? _(o, c) : x && x.isColor && (_(x, 1), v = !0);
        let y = s1.xr.getEnvironmentBlendMode();
        y === "additive" ? n.buffers.color.setClear(0, 0, 0, 1, a) : y === "alpha-blend" && n.buffers.color.setClear(0, 0, 0, 0, a), (s1.autoClear || v) && s1.clear(s1.autoClearColor, s1.autoClearDepth, s1.autoClearStencil), x && (x.isCubeTexture || x.mapping === Vs) ? (h === void 0 && (h = new Mt(new Ji(1, 1, 1), new jt({
            name: "BackgroundCubeMaterial",
            uniforms: $i(nn.backgroundCube.uniforms),
            vertexShader: nn.backgroundCube.vertexShader,
            fragmentShader: nn.backgroundCube.fragmentShader,
            side: Ft,
            depthTest: !1,
            depthWrite: !1,
            fog: !1
        })), h.geometry.deleteAttribute("normal"), h.geometry.deleteAttribute("uv"), h.onBeforeRender = function(b, w, R) {
            this.matrixWorld.copyPosition(R.matrixWorld);
        }, Object.defineProperty(h.material, "envMap", {
            get: function() {
                return this.uniforms.envMap.value;
            }
        }), i.update(h)), h.material.uniforms.envMap.value = x, h.material.uniforms.flipEnvMap.value = x.isCubeTexture && x.isRenderTargetTexture === !1 ? -1 : 1, h.material.uniforms.backgroundBlurriness.value = p.backgroundBlurriness, h.material.uniforms.backgroundIntensity.value = p.backgroundIntensity, h.material.toneMapped = Qe.getTransfer(x.colorSpace) !== nt, (u !== x || d !== x.version || f !== s1.toneMapping) && (h.material.needsUpdate = !0, u = x, d = x.version, f = s1.toneMapping), h.layers.enableAll(), g.unshift(h, h.geometry, h.material, 0, 0, null)) : x && x.isTexture && (l === void 0 && (l = new Mt(new $r(2, 2), new jt({
            name: "BackgroundMaterial",
            uniforms: $i(nn.background.uniforms),
            vertexShader: nn.background.vertexShader,
            fragmentShader: nn.background.fragmentShader,
            side: Bn,
            depthTest: !1,
            depthWrite: !1,
            fog: !1
        })), l.geometry.deleteAttribute("normal"), Object.defineProperty(l.material, "map", {
            get: function() {
                return this.uniforms.t2D.value;
            }
        }), i.update(l)), l.material.uniforms.t2D.value = x, l.material.uniforms.backgroundIntensity.value = p.backgroundIntensity, l.material.toneMapped = Qe.getTransfer(x.colorSpace) !== nt, x.matrixAutoUpdate === !0 && x.updateMatrix(), l.material.uniforms.uvTransform.value.copy(x.matrix), (u !== x || d !== x.version || f !== s1.toneMapping) && (l.material.needsUpdate = !0, u = x, d = x.version, f = s1.toneMapping), l.layers.enableAll(), g.unshift(l, l.geometry, l.material, 0, 0, null));
    }
    function _(g, p) {
        g.getRGB(cr, bd(s1)), n.buffers.color.setClear(cr.r, cr.g, cr.b, p, a);
    }
    return {
        getClearColor: function() {
            return o;
        },
        setClearColor: function(g, p = 1) {
            o.set(g), c = p, _(o, c);
        },
        getClearAlpha: function() {
            return c;
        },
        setClearAlpha: function(g) {
            c = g, _(o, c);
        },
        render: m
    };
}
function n_(s1, e, t, n) {
    let i = s1.getParameter(s1.MAX_VERTEX_ATTRIBS), r = n.isWebGL2 ? null : e.get("OES_vertex_array_object"), a = n.isWebGL2 || r !== null, o = {}, c = g(null), l = c, h = !1;
    function u(U, z, q, H, ne) {
        let W = !1;
        if (a) {
            let K = _(H, q, z);
            l !== K && (l = K, f(l.object)), W = p(U, H, q, ne), W && v(U, H, q, ne);
        } else {
            let K = z.wireframe === !0;
            (l.geometry !== H.id || l.program !== q.id || l.wireframe !== K) && (l.geometry = H.id, l.program = q.id, l.wireframe = K, W = !0);
        }
        ne !== null && t.update(ne, s1.ELEMENT_ARRAY_BUFFER), (W || h) && (h = !1, I(U, z, q, H), ne !== null && s1.bindBuffer(s1.ELEMENT_ARRAY_BUFFER, t.get(ne).buffer));
    }
    function d() {
        return n.isWebGL2 ? s1.createVertexArray() : r.createVertexArrayOES();
    }
    function f(U) {
        return n.isWebGL2 ? s1.bindVertexArray(U) : r.bindVertexArrayOES(U);
    }
    function m(U) {
        return n.isWebGL2 ? s1.deleteVertexArray(U) : r.deleteVertexArrayOES(U);
    }
    function _(U, z, q) {
        let H = q.wireframe === !0, ne = o[U.id];
        ne === void 0 && (ne = {}, o[U.id] = ne);
        let W = ne[z.id];
        W === void 0 && (W = {}, ne[z.id] = W);
        let K = W[H];
        return K === void 0 && (K = g(d()), W[H] = K), K;
    }
    function g(U) {
        let z = [], q = [], H = [];
        for(let ne = 0; ne < i; ne++)z[ne] = 0, q[ne] = 0, H[ne] = 0;
        return {
            geometry: null,
            program: null,
            wireframe: !1,
            newAttributes: z,
            enabledAttributes: q,
            attributeDivisors: H,
            object: U,
            attributes: {},
            index: null
        };
    }
    function p(U, z, q, H) {
        let ne = l.attributes, W = z.attributes, K = 0, D = q.getAttributes();
        for(let G in D)if (D[G].location >= 0) {
            let fe = ne[G], _e = W[G];
            if (_e === void 0 && (G === "instanceMatrix" && U.instanceMatrix && (_e = U.instanceMatrix), G === "instanceColor" && U.instanceColor && (_e = U.instanceColor)), fe === void 0 || fe.attribute !== _e || _e && fe.data !== _e.data) return !0;
            K++;
        }
        return l.attributesNum !== K || l.index !== H;
    }
    function v(U, z, q, H) {
        let ne = {}, W = z.attributes, K = 0, D = q.getAttributes();
        for(let G in D)if (D[G].location >= 0) {
            let fe = W[G];
            fe === void 0 && (G === "instanceMatrix" && U.instanceMatrix && (fe = U.instanceMatrix), G === "instanceColor" && U.instanceColor && (fe = U.instanceColor));
            let _e = {};
            _e.attribute = fe, fe && fe.data && (_e.data = fe.data), ne[G] = _e, K++;
        }
        l.attributes = ne, l.attributesNum = K, l.index = H;
    }
    function x() {
        let U = l.newAttributes;
        for(let z = 0, q = U.length; z < q; z++)U[z] = 0;
    }
    function y(U) {
        b(U, 0);
    }
    function b(U, z) {
        let q = l.newAttributes, H = l.enabledAttributes, ne = l.attributeDivisors;
        q[U] = 1, H[U] === 0 && (s1.enableVertexAttribArray(U), H[U] = 1), ne[U] !== z && ((n.isWebGL2 ? s1 : e.get("ANGLE_instanced_arrays"))[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](U, z), ne[U] = z);
    }
    function w() {
        let U = l.newAttributes, z = l.enabledAttributes;
        for(let q = 0, H = z.length; q < H; q++)z[q] !== U[q] && (s1.disableVertexAttribArray(q), z[q] = 0);
    }
    function R(U, z, q, H, ne, W, K) {
        K === !0 ? s1.vertexAttribIPointer(U, z, q, ne, W) : s1.vertexAttribPointer(U, z, q, H, ne, W);
    }
    function I(U, z, q, H) {
        if (n.isWebGL2 === !1 && (U.isInstancedMesh || H.isInstancedBufferGeometry) && e.get("ANGLE_instanced_arrays") === null) return;
        x();
        let ne = H.attributes, W = q.getAttributes(), K = z.defaultAttributeValues;
        for(let D in W){
            let G = W[D];
            if (G.location >= 0) {
                let he = ne[D];
                if (he === void 0 && (D === "instanceMatrix" && U.instanceMatrix && (he = U.instanceMatrix), D === "instanceColor" && U.instanceColor && (he = U.instanceColor)), he !== void 0) {
                    let fe = he.normalized, _e = he.itemSize, we = t.get(he);
                    if (we === void 0) continue;
                    let Ee = we.buffer, Te = we.type, Ye = we.bytesPerElement, it = n.isWebGL2 === !0 && (Te === s1.INT || Te === s1.UNSIGNED_INT || he.gpuType === dd);
                    if (he.isInterleavedBufferAttribute) {
                        let Ce = he.data, L = Ce.stride, oe = he.offset;
                        if (Ce.isInstancedInterleavedBuffer) {
                            for(let X = 0; X < G.locationSize; X++)b(G.location + X, Ce.meshPerAttribute);
                            U.isInstancedMesh !== !0 && H._maxInstanceCount === void 0 && (H._maxInstanceCount = Ce.meshPerAttribute * Ce.count);
                        } else for(let X = 0; X < G.locationSize; X++)y(G.location + X);
                        s1.bindBuffer(s1.ARRAY_BUFFER, Ee);
                        for(let X = 0; X < G.locationSize; X++)R(G.location + X, _e / G.locationSize, Te, fe, L * Ye, (oe + _e / G.locationSize * X) * Ye, it);
                    } else {
                        if (he.isInstancedBufferAttribute) {
                            for(let Ce = 0; Ce < G.locationSize; Ce++)b(G.location + Ce, he.meshPerAttribute);
                            U.isInstancedMesh !== !0 && H._maxInstanceCount === void 0 && (H._maxInstanceCount = he.meshPerAttribute * he.count);
                        } else for(let Ce = 0; Ce < G.locationSize; Ce++)y(G.location + Ce);
                        s1.bindBuffer(s1.ARRAY_BUFFER, Ee);
                        for(let Ce = 0; Ce < G.locationSize; Ce++)R(G.location + Ce, _e / G.locationSize, Te, fe, _e * Ye, _e / G.locationSize * Ce * Ye, it);
                    }
                } else if (K !== void 0) {
                    let fe = K[D];
                    if (fe !== void 0) switch(fe.length){
                        case 2:
                            s1.vertexAttrib2fv(G.location, fe);
                            break;
                        case 3:
                            s1.vertexAttrib3fv(G.location, fe);
                            break;
                        case 4:
                            s1.vertexAttrib4fv(G.location, fe);
                            break;
                        default:
                            s1.vertexAttrib1fv(G.location, fe);
                    }
                }
            }
        }
        w();
    }
    function M() {
        Y();
        for(let U in o){
            let z = o[U];
            for(let q in z){
                let H = z[q];
                for(let ne in H)m(H[ne].object), delete H[ne];
                delete z[q];
            }
            delete o[U];
        }
    }
    function T(U) {
        if (o[U.id] === void 0) return;
        let z = o[U.id];
        for(let q in z){
            let H = z[q];
            for(let ne in H)m(H[ne].object), delete H[ne];
            delete z[q];
        }
        delete o[U.id];
    }
    function O(U) {
        for(let z in o){
            let q = o[z];
            if (q[U.id] === void 0) continue;
            let H = q[U.id];
            for(let ne in H)m(H[ne].object), delete H[ne];
            delete q[U.id];
        }
    }
    function Y() {
        $(), h = !0, l !== c && (l = c, f(l.object));
    }
    function $() {
        c.geometry = null, c.program = null, c.wireframe = !1;
    }
    return {
        setup: u,
        reset: Y,
        resetDefaultState: $,
        dispose: M,
        releaseStatesOfGeometry: T,
        releaseStatesOfProgram: O,
        initAttributes: x,
        enableAttribute: y,
        disableUnusedAttributes: w
    };
}
function i_(s1, e, t, n) {
    let i = n.isWebGL2, r;
    function a(l) {
        r = l;
    }
    function o(l, h) {
        s1.drawArrays(r, l, h), t.update(h, r, 1);
    }
    function c(l, h, u) {
        if (u === 0) return;
        let d, f;
        if (i) d = s1, f = "drawArraysInstanced";
        else if (d = e.get("ANGLE_instanced_arrays"), f = "drawArraysInstancedANGLE", d === null) {
            console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
        }
        d[f](r, l, h, u), t.update(h, r, u);
    }
    this.setMode = a, this.render = o, this.renderInstances = c;
}
function s_(s1, e, t) {
    let n;
    function i() {
        if (n !== void 0) return n;
        if (e.has("EXT_texture_filter_anisotropic") === !0) {
            let R = e.get("EXT_texture_filter_anisotropic");
            n = s1.getParameter(R.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        } else n = 0;
        return n;
    }
    function r(R) {
        if (R === "highp") {
            if (s1.getShaderPrecisionFormat(s1.VERTEX_SHADER, s1.HIGH_FLOAT).precision > 0 && s1.getShaderPrecisionFormat(s1.FRAGMENT_SHADER, s1.HIGH_FLOAT).precision > 0) return "highp";
            R = "mediump";
        }
        return R === "mediump" && s1.getShaderPrecisionFormat(s1.VERTEX_SHADER, s1.MEDIUM_FLOAT).precision > 0 && s1.getShaderPrecisionFormat(s1.FRAGMENT_SHADER, s1.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
    }
    let a = typeof WebGL2RenderingContext < "u" && s1.constructor.name === "WebGL2RenderingContext", o = t.precision !== void 0 ? t.precision : "highp", c = r(o);
    c !== o && (console.warn("THREE.WebGLRenderer:", o, "not supported, using", c, "instead."), o = c);
    let l = a || e.has("WEBGL_draw_buffers"), h = t.logarithmicDepthBuffer === !0, u = s1.getParameter(s1.MAX_TEXTURE_IMAGE_UNITS), d = s1.getParameter(s1.MAX_VERTEX_TEXTURE_IMAGE_UNITS), f = s1.getParameter(s1.MAX_TEXTURE_SIZE), m = s1.getParameter(s1.MAX_CUBE_MAP_TEXTURE_SIZE), _ = s1.getParameter(s1.MAX_VERTEX_ATTRIBS), g = s1.getParameter(s1.MAX_VERTEX_UNIFORM_VECTORS), p = s1.getParameter(s1.MAX_VARYING_VECTORS), v = s1.getParameter(s1.MAX_FRAGMENT_UNIFORM_VECTORS), x = d > 0, y = a || e.has("OES_texture_float"), b = x && y, w = a ? s1.getParameter(s1.MAX_SAMPLES) : 0;
    return {
        isWebGL2: a,
        drawBuffers: l,
        getMaxAnisotropy: i,
        getMaxPrecision: r,
        precision: o,
        logarithmicDepthBuffer: h,
        maxTextures: u,
        maxVertexTextures: d,
        maxTextureSize: f,
        maxCubemapSize: m,
        maxAttributes: _,
        maxVertexUniforms: g,
        maxVaryings: p,
        maxFragmentUniforms: v,
        vertexTextures: x,
        floatFragmentTextures: y,
        floatVertexTextures: b,
        maxSamples: w
    };
}
function r_(s1) {
    let e = this, t = null, n = 0, i = !1, r = !1, a = new mn, o = new He, c = {
        value: null,
        needsUpdate: !1
    };
    this.uniform = c, this.numPlanes = 0, this.numIntersection = 0, this.init = function(u, d) {
        let f = u.length !== 0 || d || n !== 0 || i;
        return i = d, n = u.length, f;
    }, this.beginShadows = function() {
        r = !0, h(null);
    }, this.endShadows = function() {
        r = !1;
    }, this.setGlobalState = function(u, d) {
        t = h(u, d, 0);
    }, this.setState = function(u, d, f) {
        let m = u.clippingPlanes, _ = u.clipIntersection, g = u.clipShadows, p = s1.get(u);
        if (!i || m === null || m.length === 0 || r && !g) r ? h(null) : l();
        else {
            let v = r ? 0 : n, x = v * 4, y = p.clippingState || null;
            c.value = y, y = h(m, d, x, f);
            for(let b = 0; b !== x; ++b)y[b] = t[b];
            p.clippingState = y, this.numIntersection = _ ? this.numPlanes : 0, this.numPlanes += v;
        }
    };
    function l() {
        c.value !== t && (c.value = t, c.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0;
    }
    function h(u, d, f, m) {
        let _ = u !== null ? u.length : 0, g = null;
        if (_ !== 0) {
            if (g = c.value, m !== !0 || g === null) {
                let p = f + _ * 4, v = d.matrixWorldInverse;
                o.getNormalMatrix(v), (g === null || g.length < p) && (g = new Float32Array(p));
                for(let x = 0, y = f; x !== _; ++x, y += 4)a.copy(u[x]).applyMatrix4(v, o), a.normal.toArray(g, y), g[y + 3] = a.constant;
            }
            c.value = g, c.needsUpdate = !0;
        }
        return e.numPlanes = _, e.numIntersection = 0, g;
    }
}
function a_(s1) {
    let e = new WeakMap;
    function t(a, o) {
        return o === Ir ? a.mapping = zn : o === Ur && (a.mapping = ci), a;
    }
    function n(a) {
        if (a && a.isTexture && a.isRenderTargetTexture === !1) {
            let o = a.mapping;
            if (o === Ir || o === Ur) if (e.has(a)) {
                let c = e.get(a).texture;
                return t(c, a.mapping);
            } else {
                let c = a.image;
                if (c && c.height > 0) {
                    let l = new xo(c.height / 2);
                    return l.fromEquirectangularTexture(s1, a), e.set(a, l), a.addEventListener("dispose", i), t(l.texture, a.mapping);
                } else return null;
            }
        }
        return a;
    }
    function i(a) {
        let o = a.target;
        o.removeEventListener("dispose", i);
        let c = e.get(o);
        c !== void 0 && (e.delete(o), c.dispose());
    }
    function r() {
        e = new WeakMap;
    }
    return {
        get: n,
        dispose: r
    };
}
var Ls = class extends Cs {
    constructor(e = -1, t = 1, n = 1, i = -1, r = .1, a = 2e3){
        super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = n, this.bottom = i, this.near = r, this.far = a, this.updateProjectionMatrix();
    }
    copy(e, t) {
        return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
    }
    setViewOffset(e, t, n, i, r, a) {
        this.view === null && (this.view = {
            enabled: !0,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = a, this.updateProjectionMatrix();
    }
    clearViewOffset() {
        this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        let e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, i = (this.top + this.bottom) / 2, r = n - e, a = n + e, o = i + t, c = i - t;
        if (this.view !== null && this.view.enabled) {
            let l = (this.right - this.left) / this.view.fullWidth / this.zoom, h = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            r += l * this.view.offsetX, a = r + l * this.view.width, o -= h * this.view.offsetY, c = o - h * this.view.height;
        }
        this.projectionMatrix.makeOrthographic(r, a, o, c, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
    }
}, Hi = 4, hh = [
    .125,
    .215,
    .35,
    .446,
    .526,
    .582
], ei = 20, $a = new Ls, uh = new pe, Ka = null, jn = (1 + Math.sqrt(5)) / 2, Li = 1 / jn, dh = [
    new A(1, 1, 1),
    new A(-1, 1, 1),
    new A(1, 1, -1),
    new A(-1, 1, -1),
    new A(0, jn, Li),
    new A(0, jn, -Li),
    new A(Li, 0, jn),
    new A(-Li, 0, jn),
    new A(jn, Li, 0),
    new A(-jn, Li, 0)
], Kr = class {
    constructor(e){
        this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
    }
    fromScene(e, t = 0, n = .1, i = 100) {
        Ka = this._renderer.getRenderTarget(), this._setSize(256);
        let r = this._allocateTargets();
        return r.depthBuffer = !0, this._sceneToCubeUV(e, n, i, r), t > 0 && this._blur(r, 0, 0, t), this._applyPMREM(r), this._cleanup(r), r;
    }
    fromEquirectangular(e, t = null) {
        return this._fromTexture(e, t);
    }
    fromCubemap(e, t = null) {
        return this._fromTexture(e, t);
    }
    compileCubemapShader() {
        this._cubemapMaterial === null && (this._cubemapMaterial = mh(), this._compileMaterial(this._cubemapMaterial));
    }
    compileEquirectangularShader() {
        this._equirectMaterial === null && (this._equirectMaterial = ph(), this._compileMaterial(this._equirectMaterial));
    }
    dispose() {
        this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
    }
    _setSize(e) {
        this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
    }
    _dispose() {
        this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
        for(let e = 0; e < this._lodPlanes.length; e++)this._lodPlanes[e].dispose();
    }
    _cleanup(e) {
        this._renderer.setRenderTarget(Ka), e.scissorTest = !1, lr(e, 0, 0, e.width, e.height);
    }
    _fromTexture(e, t) {
        e.mapping === zn || e.mapping === ci ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), Ka = this._renderer.getRenderTarget();
        let n = t || this._allocateTargets();
        return this._textureToCubeUV(e, n), this._applyPMREM(n), this._cleanup(n), n;
    }
    _allocateTargets() {
        let e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, n = {
            magFilter: mt,
            minFilter: mt,
            generateMipmaps: !1,
            type: Ts,
            format: Wt,
            colorSpace: Mn,
            depthBuffer: !1
        }, i = fh(e, t, n);
        if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
            this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = fh(e, t, n);
            let { _lodMax: r  } = this;
            ({ sizeLods: this._sizeLods , lodPlanes: this._lodPlanes , sigmas: this._sigmas  } = o_(r)), this._blurMaterial = c_(r, e, t);
        }
        return i;
    }
    _compileMaterial(e) {
        let t = new Mt(this._lodPlanes[0], e);
        this._renderer.compile(t, $a);
    }
    _sceneToCubeUV(e, t, n, i) {
        let o = new yt(90, 1, t, n), c = [
            1,
            -1,
            1,
            1,
            1,
            1
        ], l = [
            1,
            1,
            1,
            -1,
            -1,
            -1
        ], h = this._renderer, u = h.autoClear, d = h.toneMapping;
        h.getClearColor(uh), h.toneMapping = Nn, h.autoClear = !1;
        let f = new Sn({
            name: "PMREM.Background",
            side: Ft,
            depthWrite: !1,
            depthTest: !1
        }), m = new Mt(new Ji, f), _ = !1, g = e.background;
        g ? g.isColor && (f.color.copy(g), e.background = null, _ = !0) : (f.color.copy(uh), _ = !0);
        for(let p = 0; p < 6; p++){
            let v = p % 3;
            v === 0 ? (o.up.set(0, c[p], 0), o.lookAt(l[p], 0, 0)) : v === 1 ? (o.up.set(0, 0, c[p]), o.lookAt(0, l[p], 0)) : (o.up.set(0, c[p], 0), o.lookAt(0, 0, l[p]));
            let x = this._cubeSize;
            lr(i, v * x, p > 2 ? x : 0, x, x), h.setRenderTarget(i), _ && h.render(m, o), h.render(e, o);
        }
        m.geometry.dispose(), m.material.dispose(), h.toneMapping = d, h.autoClear = u, e.background = g;
    }
    _textureToCubeUV(e, t) {
        let n = this._renderer, i = e.mapping === zn || e.mapping === ci;
        i ? (this._cubemapMaterial === null && (this._cubemapMaterial = mh()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = ph());
        let r = i ? this._cubemapMaterial : this._equirectMaterial, a = new Mt(this._lodPlanes[0], r), o = r.uniforms;
        o.envMap.value = e;
        let c = this._cubeSize;
        lr(t, 0, 0, 3 * c, 2 * c), n.setRenderTarget(t), n.render(a, $a);
    }
    _applyPMREM(e) {
        let t = this._renderer, n = t.autoClear;
        t.autoClear = !1;
        for(let i = 1; i < this._lodPlanes.length; i++){
            let r = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]), a = dh[(i - 1) % dh.length];
            this._blur(e, i - 1, i, r, a);
        }
        t.autoClear = n;
    }
    _blur(e, t, n, i, r) {
        let a = this._pingPongRenderTarget;
        this._halfBlur(e, a, t, n, i, "latitudinal", r), this._halfBlur(a, e, n, n, i, "longitudinal", r);
    }
    _halfBlur(e, t, n, i, r, a, o) {
        let c = this._renderer, l = this._blurMaterial;
        a !== "latitudinal" && a !== "longitudinal" && console.error("blur direction must be either latitudinal or longitudinal!");
        let h = 3, u = new Mt(this._lodPlanes[i], l), d = l.uniforms, f = this._sizeLods[n] - 1, m = isFinite(r) ? Math.PI / (2 * f) : 2 * Math.PI / (2 * ei - 1), _ = r / m, g = isFinite(r) ? 1 + Math.floor(h * _) : ei;
        g > ei && console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${g} samples when the maximum is set to ${ei}`);
        let p = [], v = 0;
        for(let R = 0; R < ei; ++R){
            let I = R / _, M = Math.exp(-I * I / 2);
            p.push(M), R === 0 ? v += M : R < g && (v += 2 * M);
        }
        for(let R = 0; R < p.length; R++)p[R] = p[R] / v;
        d.envMap.value = e.texture, d.samples.value = g, d.weights.value = p, d.latitudinal.value = a === "latitudinal", o && (d.poleAxis.value = o);
        let { _lodMax: x  } = this;
        d.dTheta.value = m, d.mipInt.value = x - n;
        let y = this._sizeLods[i], b = 3 * y * (i > x - Hi ? i - x + Hi : 0), w = 4 * (this._cubeSize - y);
        lr(t, b, w, 3 * y, 2 * y), c.setRenderTarget(t), c.render(u, $a);
    }
};
function o_(s1) {
    let e = [], t = [], n = [], i = s1, r = s1 - Hi + 1 + hh.length;
    for(let a = 0; a < r; a++){
        let o = Math.pow(2, i);
        t.push(o);
        let c = 1 / o;
        a > s1 - Hi ? c = hh[a - s1 + Hi - 1] : a === 0 && (c = 0), n.push(c);
        let l = 1 / (o - 2), h = -l, u = 1 + l, d = [
            h,
            h,
            u,
            h,
            u,
            u,
            h,
            h,
            u,
            u,
            h,
            u
        ], f = 6, m = 6, _ = 3, g = 2, p = 1, v = new Float32Array(_ * m * f), x = new Float32Array(g * m * f), y = new Float32Array(p * m * f);
        for(let w = 0; w < f; w++){
            let R = w % 3 * 2 / 3 - 1, I = w > 2 ? 0 : -1, M = [
                R,
                I,
                0,
                R + 2 / 3,
                I,
                0,
                R + 2 / 3,
                I + 1,
                0,
                R,
                I,
                0,
                R + 2 / 3,
                I + 1,
                0,
                R,
                I + 1,
                0
            ];
            v.set(M, _ * m * w), x.set(d, g * m * w);
            let T = [
                w,
                w,
                w,
                w,
                w,
                w
            ];
            y.set(T, p * m * w);
        }
        let b = new Ge;
        b.setAttribute("position", new et(v, _)), b.setAttribute("uv", new et(x, g)), b.setAttribute("faceIndex", new et(y, p)), e.push(b), i > Hi && i--;
    }
    return {
        lodPlanes: e,
        sizeLods: t,
        sigmas: n
    };
}
function fh(s1, e, t) {
    let n = new qt(s1, e, t);
    return n.texture.mapping = Vs, n.texture.name = "PMREM.cubeUv", n.scissorTest = !0, n;
}
function lr(s1, e, t, n, i) {
    s1.viewport.set(e, t, n, i), s1.scissor.set(e, t, n, i);
}
function c_(s1, e, t) {
    let n = new Float32Array(ei), i = new A(0, 1, 0);
    return new jt({
        name: "SphericalGaussianBlur",
        defines: {
            n: ei,
            CUBEUV_TEXEL_WIDTH: 1 / e,
            CUBEUV_TEXEL_HEIGHT: 1 / t,
            CUBEUV_MAX_MIP: `${s1}.0`
        },
        uniforms: {
            envMap: {
                value: null
            },
            samples: {
                value: 1
            },
            weights: {
                value: n
            },
            latitudinal: {
                value: !1
            },
            dTheta: {
                value: 0
            },
            mipInt: {
                value: 0
            },
            poleAxis: {
                value: i
            }
        },
        vertexShader: Zc(),
        fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
        blending: Dn,
        depthTest: !1,
        depthWrite: !1
    });
}
function ph() {
    return new jt({
        name: "EquirectangularToCubeUV",
        uniforms: {
            envMap: {
                value: null
            }
        },
        vertexShader: Zc(),
        fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,
        blending: Dn,
        depthTest: !1,
        depthWrite: !1
    });
}
function mh() {
    return new jt({
        name: "CubemapToCubeUV",
        uniforms: {
            envMap: {
                value: null
            },
            flipEnvMap: {
                value: -1
            }
        },
        vertexShader: Zc(),
        fragmentShader: `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,
        blending: Dn,
        depthTest: !1,
        depthWrite: !1
    });
}
function Zc() {
    return `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
}
function l_(s1) {
    let e = new WeakMap, t = null;
    function n(o) {
        if (o && o.isTexture) {
            let c = o.mapping, l = c === Ir || c === Ur, h = c === zn || c === ci;
            if (l || h) if (o.isRenderTargetTexture && o.needsPMREMUpdate === !0) {
                o.needsPMREMUpdate = !1;
                let u = e.get(o);
                return t === null && (t = new Kr(s1)), u = l ? t.fromEquirectangular(o, u) : t.fromCubemap(o, u), e.set(o, u), u.texture;
            } else {
                if (e.has(o)) return e.get(o).texture;
                {
                    let u = o.image;
                    if (l && u && u.height > 0 || h && u && i(u)) {
                        t === null && (t = new Kr(s1));
                        let d = l ? t.fromEquirectangular(o) : t.fromCubemap(o);
                        return e.set(o, d), o.addEventListener("dispose", r), d.texture;
                    } else return null;
                }
            }
        }
        return o;
    }
    function i(o) {
        let c = 0, l = 6;
        for(let h = 0; h < l; h++)o[h] !== void 0 && c++;
        return c === l;
    }
    function r(o) {
        let c = o.target;
        c.removeEventListener("dispose", r);
        let l = e.get(c);
        l !== void 0 && (e.delete(c), l.dispose());
    }
    function a() {
        e = new WeakMap, t !== null && (t.dispose(), t = null);
    }
    return {
        get: n,
        dispose: a
    };
}
function h_(s1) {
    let e = {};
    function t(n) {
        if (e[n] !== void 0) return e[n];
        let i;
        switch(n){
            case "WEBGL_depth_texture":
                i = s1.getExtension("WEBGL_depth_texture") || s1.getExtension("MOZ_WEBGL_depth_texture") || s1.getExtension("WEBKIT_WEBGL_depth_texture");
                break;
            case "EXT_texture_filter_anisotropic":
                i = s1.getExtension("EXT_texture_filter_anisotropic") || s1.getExtension("MOZ_EXT_texture_filter_anisotropic") || s1.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                break;
            case "WEBGL_compressed_texture_s3tc":
                i = s1.getExtension("WEBGL_compressed_texture_s3tc") || s1.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || s1.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                break;
            case "WEBGL_compressed_texture_pvrtc":
                i = s1.getExtension("WEBGL_compressed_texture_pvrtc") || s1.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                break;
            default:
                i = s1.getExtension(n);
        }
        return e[n] = i, i;
    }
    return {
        has: function(n) {
            return t(n) !== null;
        },
        init: function(n) {
            n.isWebGL2 ? t("EXT_color_buffer_float") : (t("WEBGL_depth_texture"), t("OES_texture_float"), t("OES_texture_half_float"), t("OES_texture_half_float_linear"), t("OES_standard_derivatives"), t("OES_element_index_uint"), t("OES_vertex_array_object"), t("ANGLE_instanced_arrays")), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture");
        },
        get: function(n) {
            let i = t(n);
            return i === null && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), i;
        }
    };
}
function u_(s1, e, t, n) {
    let i = {}, r = new WeakMap;
    function a(u) {
        let d = u.target;
        d.index !== null && e.remove(d.index);
        for(let m in d.attributes)e.remove(d.attributes[m]);
        for(let m in d.morphAttributes){
            let _ = d.morphAttributes[m];
            for(let g = 0, p = _.length; g < p; g++)e.remove(_[g]);
        }
        d.removeEventListener("dispose", a), delete i[d.id];
        let f = r.get(d);
        f && (e.remove(f), r.delete(d)), n.releaseStatesOfGeometry(d), d.isInstancedBufferGeometry === !0 && delete d._maxInstanceCount, t.memory.geometries--;
    }
    function o(u, d) {
        return i[d.id] === !0 || (d.addEventListener("dispose", a), i[d.id] = !0, t.memory.geometries++), d;
    }
    function c(u) {
        let d = u.attributes;
        for(let m in d)e.update(d[m], s1.ARRAY_BUFFER);
        let f = u.morphAttributes;
        for(let m in f){
            let _ = f[m];
            for(let g = 0, p = _.length; g < p; g++)e.update(_[g], s1.ARRAY_BUFFER);
        }
    }
    function l(u) {
        let d = [], f = u.index, m = u.attributes.position, _ = 0;
        if (f !== null) {
            let v = f.array;
            _ = f.version;
            for(let x = 0, y = v.length; x < y; x += 3){
                let b = v[x + 0], w = v[x + 1], R = v[x + 2];
                d.push(b, w, w, R, R, b);
            }
        } else if (m !== void 0) {
            let v = m.array;
            _ = m.version;
            for(let x = 0, y = v.length / 3 - 1; x < y; x += 3){
                let b = x + 0, w = x + 1, R = x + 2;
                d.push(b, w, w, R, R, b);
            }
        } else return;
        let g = new (Md(d) ? Jr : Zr)(d, 1);
        g.version = _;
        let p = r.get(u);
        p && e.remove(p), r.set(u, g);
    }
    function h(u) {
        let d = r.get(u);
        if (d) {
            let f = u.index;
            f !== null && d.version < f.version && l(u);
        } else l(u);
        return r.get(u);
    }
    return {
        get: o,
        update: c,
        getWireframeAttribute: h
    };
}
function d_(s1, e, t, n) {
    let i = n.isWebGL2, r;
    function a(d) {
        r = d;
    }
    let o, c;
    function l(d) {
        o = d.type, c = d.bytesPerElement;
    }
    function h(d, f) {
        s1.drawElements(r, f, o, d * c), t.update(f, r, 1);
    }
    function u(d, f, m) {
        if (m === 0) return;
        let _, g;
        if (i) _ = s1, g = "drawElementsInstanced";
        else if (_ = e.get("ANGLE_instanced_arrays"), g = "drawElementsInstancedANGLE", _ === null) {
            console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
        }
        _[g](r, f, o, d * c, m), t.update(f, r, m);
    }
    this.setMode = a, this.setIndex = l, this.render = h, this.renderInstances = u;
}
function f_(s1) {
    let e = {
        geometries: 0,
        textures: 0
    }, t = {
        frame: 0,
        calls: 0,
        triangles: 0,
        points: 0,
        lines: 0
    };
    function n(r, a, o) {
        switch(t.calls++, a){
            case s1.TRIANGLES:
                t.triangles += o * (r / 3);
                break;
            case s1.LINES:
                t.lines += o * (r / 2);
                break;
            case s1.LINE_STRIP:
                t.lines += o * (r - 1);
                break;
            case s1.LINE_LOOP:
                t.lines += o * r;
                break;
            case s1.POINTS:
                t.points += o * r;
                break;
            default:
                console.error("THREE.WebGLInfo: Unknown draw mode:", a);
                break;
        }
    }
    function i() {
        t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
    }
    return {
        memory: e,
        render: t,
        programs: null,
        autoReset: !0,
        reset: i,
        update: n
    };
}
function p_(s1, e) {
    return s1[0] - e[0];
}
function m_(s1, e) {
    return Math.abs(e[1]) - Math.abs(s1[1]);
}
function g_(s1, e, t) {
    let n = {}, i = new Float32Array(8), r = new WeakMap, a = new je, o = [];
    for(let l = 0; l < 8; l++)o[l] = [
        l,
        0
    ];
    function c(l, h, u) {
        let d = l.morphTargetInfluences;
        if (e.isWebGL2 === !0) {
            let f = h.morphAttributes.position || h.morphAttributes.normal || h.morphAttributes.color, m = f !== void 0 ? f.length : 0, _ = r.get(h);
            if (_ === void 0 || _.count !== m) {
                let U = function() {
                    Y.dispose(), r.delete(h), h.removeEventListener("dispose", U);
                };
                _ !== void 0 && _.texture.dispose();
                let v = h.morphAttributes.position !== void 0, x = h.morphAttributes.normal !== void 0, y = h.morphAttributes.color !== void 0, b = h.morphAttributes.position || [], w = h.morphAttributes.normal || [], R = h.morphAttributes.color || [], I = 0;
                v === !0 && (I = 1), x === !0 && (I = 2), y === !0 && (I = 3);
                let M = h.attributes.position.count * I, T = 1;
                M > e.maxTextureSize && (T = Math.ceil(M / e.maxTextureSize), M = e.maxTextureSize);
                let O = new Float32Array(M * T * 4 * m), Y = new As(O, M, T, m);
                Y.type = xn, Y.needsUpdate = !0;
                let $ = I * 4;
                for(let z = 0; z < m; z++){
                    let q = b[z], H = w[z], ne = R[z], W = M * T * 4 * z;
                    for(let K = 0; K < q.count; K++){
                        let D = K * $;
                        v === !0 && (a.fromBufferAttribute(q, K), O[W + D + 0] = a.x, O[W + D + 1] = a.y, O[W + D + 2] = a.z, O[W + D + 3] = 0), x === !0 && (a.fromBufferAttribute(H, K), O[W + D + 4] = a.x, O[W + D + 5] = a.y, O[W + D + 6] = a.z, O[W + D + 7] = 0), y === !0 && (a.fromBufferAttribute(ne, K), O[W + D + 8] = a.x, O[W + D + 9] = a.y, O[W + D + 10] = a.z, O[W + D + 11] = ne.itemSize === 4 ? a.w : 1);
                    }
                }
                _ = {
                    count: m,
                    texture: Y,
                    size: new Z(M, T)
                }, r.set(h, _), h.addEventListener("dispose", U);
            }
            let g = 0;
            for(let v = 0; v < d.length; v++)g += d[v];
            let p = h.morphTargetsRelative ? 1 : 1 - g;
            u.getUniforms().setValue(s1, "morphTargetBaseInfluence", p), u.getUniforms().setValue(s1, "morphTargetInfluences", d), u.getUniforms().setValue(s1, "morphTargetsTexture", _.texture, t), u.getUniforms().setValue(s1, "morphTargetsTextureSize", _.size);
        } else {
            let f = d === void 0 ? 0 : d.length, m = n[h.id];
            if (m === void 0 || m.length !== f) {
                m = [];
                for(let x = 0; x < f; x++)m[x] = [
                    x,
                    0
                ];
                n[h.id] = m;
            }
            for(let x = 0; x < f; x++){
                let y = m[x];
                y[0] = x, y[1] = d[x];
            }
            m.sort(m_);
            for(let x = 0; x < 8; x++)x < f && m[x][1] ? (o[x][0] = m[x][0], o[x][1] = m[x][1]) : (o[x][0] = Number.MAX_SAFE_INTEGER, o[x][1] = 0);
            o.sort(p_);
            let _ = h.morphAttributes.position, g = h.morphAttributes.normal, p = 0;
            for(let x = 0; x < 8; x++){
                let y = o[x], b = y[0], w = y[1];
                b !== Number.MAX_SAFE_INTEGER && w ? (_ && h.getAttribute("morphTarget" + x) !== _[b] && h.setAttribute("morphTarget" + x, _[b]), g && h.getAttribute("morphNormal" + x) !== g[b] && h.setAttribute("morphNormal" + x, g[b]), i[x] = w, p += w) : (_ && h.hasAttribute("morphTarget" + x) === !0 && h.deleteAttribute("morphTarget" + x), g && h.hasAttribute("morphNormal" + x) === !0 && h.deleteAttribute("morphNormal" + x), i[x] = 0);
            }
            let v = h.morphTargetsRelative ? 1 : 1 - p;
            u.getUniforms().setValue(s1, "morphTargetBaseInfluence", v), u.getUniforms().setValue(s1, "morphTargetInfluences", i);
        }
    }
    return {
        update: c
    };
}
function __(s1, e, t, n) {
    let i = new WeakMap;
    function r(c) {
        let l = n.render.frame, h = c.geometry, u = e.get(c, h);
        if (i.get(u) !== l && (e.update(u), i.set(u, l)), c.isInstancedMesh && (c.hasEventListener("dispose", o) === !1 && c.addEventListener("dispose", o), i.get(c) !== l && (t.update(c.instanceMatrix, s1.ARRAY_BUFFER), c.instanceColor !== null && t.update(c.instanceColor, s1.ARRAY_BUFFER), i.set(c, l))), c.isSkinnedMesh) {
            let d = c.skeleton;
            i.get(d) !== l && (d.update(), i.set(d, l));
        }
        return u;
    }
    function a() {
        i = new WeakMap;
    }
    function o(c) {
        let l = c.target;
        l.removeEventListener("dispose", o), t.remove(l.instanceMatrix), l.instanceColor !== null && t.remove(l.instanceColor);
    }
    return {
        update: r,
        dispose: a
    };
}
var Td = new St, wd = new As, Ad = new qr, Rd = new Ki, gh = [], _h = [], xh = new Float32Array(16), vh = new Float32Array(9), yh = new Float32Array(4);
function as(s1, e, t) {
    let n = s1[0];
    if (n <= 0 || n > 0) return s1;
    let i = e * t, r = gh[i];
    if (r === void 0 && (r = new Float32Array(i), gh[i] = r), e !== 0) {
        n.toArray(r, 0);
        for(let a = 1, o = 0; a !== e; ++a)o += t, s1[a].toArray(r, o);
    }
    return r;
}
function gt(s1, e) {
    if (s1.length !== e.length) return !1;
    for(let t = 0, n = s1.length; t < n; t++)if (s1[t] !== e[t]) return !1;
    return !0;
}
function _t(s1, e) {
    for(let t = 0, n = e.length; t < n; t++)s1[t] = e[t];
}
function ya(s1, e) {
    let t = _h[e];
    t === void 0 && (t = new Int32Array(e), _h[e] = t);
    for(let n = 0; n !== e; ++n)t[n] = s1.allocateTextureUnit();
    return t;
}
function x_(s1, e) {
    let t = this.cache;
    t[0] !== e && (s1.uniform1f(this.addr, e), t[0] = e);
}
function v_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (s1.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
    else {
        if (gt(t, e)) return;
        s1.uniform2fv(this.addr, e), _t(t, e);
    }
}
function y_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s1.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
    else if (e.r !== void 0) (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (s1.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
    else {
        if (gt(t, e)) return;
        s1.uniform3fv(this.addr, e), _t(t, e);
    }
}
function M_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s1.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
    else {
        if (gt(t, e)) return;
        s1.uniform4fv(this.addr, e), _t(t, e);
    }
}
function S_(s1, e) {
    let t = this.cache, n = e.elements;
    if (n === void 0) {
        if (gt(t, e)) return;
        s1.uniformMatrix2fv(this.addr, !1, e), _t(t, e);
    } else {
        if (gt(t, n)) return;
        yh.set(n), s1.uniformMatrix2fv(this.addr, !1, yh), _t(t, n);
    }
}
function b_(s1, e) {
    let t = this.cache, n = e.elements;
    if (n === void 0) {
        if (gt(t, e)) return;
        s1.uniformMatrix3fv(this.addr, !1, e), _t(t, e);
    } else {
        if (gt(t, n)) return;
        vh.set(n), s1.uniformMatrix3fv(this.addr, !1, vh), _t(t, n);
    }
}
function E_(s1, e) {
    let t = this.cache, n = e.elements;
    if (n === void 0) {
        if (gt(t, e)) return;
        s1.uniformMatrix4fv(this.addr, !1, e), _t(t, e);
    } else {
        if (gt(t, n)) return;
        xh.set(n), s1.uniformMatrix4fv(this.addr, !1, xh), _t(t, n);
    }
}
function T_(s1, e) {
    let t = this.cache;
    t[0] !== e && (s1.uniform1i(this.addr, e), t[0] = e);
}
function w_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (s1.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
    else {
        if (gt(t, e)) return;
        s1.uniform2iv(this.addr, e), _t(t, e);
    }
}
function A_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s1.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
    else {
        if (gt(t, e)) return;
        s1.uniform3iv(this.addr, e), _t(t, e);
    }
}
function R_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s1.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
    else {
        if (gt(t, e)) return;
        s1.uniform4iv(this.addr, e), _t(t, e);
    }
}
function C_(s1, e) {
    let t = this.cache;
    t[0] !== e && (s1.uniform1ui(this.addr, e), t[0] = e);
}
function P_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (s1.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
    else {
        if (gt(t, e)) return;
        s1.uniform2uiv(this.addr, e), _t(t, e);
    }
}
function L_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s1.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
    else {
        if (gt(t, e)) return;
        s1.uniform3uiv(this.addr, e), _t(t, e);
    }
}
function I_(s1, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s1.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
    else {
        if (gt(t, e)) return;
        s1.uniform4uiv(this.addr, e), _t(t, e);
    }
}
function U_(s1, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s1.uniform1i(this.addr, i), n[0] = i), t.setTexture2D(e || Td, i);
}
function D_(s1, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s1.uniform1i(this.addr, i), n[0] = i), t.setTexture3D(e || Ad, i);
}
function N_(s1, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s1.uniform1i(this.addr, i), n[0] = i), t.setTextureCube(e || Rd, i);
}
function O_(s1, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s1.uniform1i(this.addr, i), n[0] = i), t.setTexture2DArray(e || wd, i);
}
function F_(s1) {
    switch(s1){
        case 5126:
            return x_;
        case 35664:
            return v_;
        case 35665:
            return y_;
        case 35666:
            return M_;
        case 35674:
            return S_;
        case 35675:
            return b_;
        case 35676:
            return E_;
        case 5124:
        case 35670:
            return T_;
        case 35667:
        case 35671:
            return w_;
        case 35668:
        case 35672:
            return A_;
        case 35669:
        case 35673:
            return R_;
        case 5125:
            return C_;
        case 36294:
            return P_;
        case 36295:
            return L_;
        case 36296:
            return I_;
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
            return U_;
        case 35679:
        case 36299:
        case 36307:
            return D_;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
            return N_;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
            return O_;
    }
}
function B_(s1, e) {
    s1.uniform1fv(this.addr, e);
}
function z_(s1, e) {
    let t = as(e, this.size, 2);
    s1.uniform2fv(this.addr, t);
}
function V_(s1, e) {
    let t = as(e, this.size, 3);
    s1.uniform3fv(this.addr, t);
}
function k_(s1, e) {
    let t = as(e, this.size, 4);
    s1.uniform4fv(this.addr, t);
}
function H_(s1, e) {
    let t = as(e, this.size, 4);
    s1.uniformMatrix2fv(this.addr, !1, t);
}
function G_(s1, e) {
    let t = as(e, this.size, 9);
    s1.uniformMatrix3fv(this.addr, !1, t);
}
function W_(s1, e) {
    let t = as(e, this.size, 16);
    s1.uniformMatrix4fv(this.addr, !1, t);
}
function X_(s1, e) {
    s1.uniform1iv(this.addr, e);
}
function q_(s1, e) {
    s1.uniform2iv(this.addr, e);
}
function Y_(s1, e) {
    s1.uniform3iv(this.addr, e);
}
function Z_(s1, e) {
    s1.uniform4iv(this.addr, e);
}
function J_(s1, e) {
    s1.uniform1uiv(this.addr, e);
}
function $_(s1, e) {
    s1.uniform2uiv(this.addr, e);
}
function K_(s1, e) {
    s1.uniform3uiv(this.addr, e);
}
function Q_(s1, e) {
    s1.uniform4uiv(this.addr, e);
}
function j_(s1, e, t) {
    let n = this.cache, i = e.length, r = ya(t, i);
    gt(n, r) || (s1.uniform1iv(this.addr, r), _t(n, r));
    for(let a = 0; a !== i; ++a)t.setTexture2D(e[a] || Td, r[a]);
}
function e0(s1, e, t) {
    let n = this.cache, i = e.length, r = ya(t, i);
    gt(n, r) || (s1.uniform1iv(this.addr, r), _t(n, r));
    for(let a = 0; a !== i; ++a)t.setTexture3D(e[a] || Ad, r[a]);
}
function t0(s1, e, t) {
    let n = this.cache, i = e.length, r = ya(t, i);
    gt(n, r) || (s1.uniform1iv(this.addr, r), _t(n, r));
    for(let a = 0; a !== i; ++a)t.setTextureCube(e[a] || Rd, r[a]);
}
function n0(s1, e, t) {
    let n = this.cache, i = e.length, r = ya(t, i);
    gt(n, r) || (s1.uniform1iv(this.addr, r), _t(n, r));
    for(let a = 0; a !== i; ++a)t.setTexture2DArray(e[a] || wd, r[a]);
}
function i0(s1) {
    switch(s1){
        case 5126:
            return B_;
        case 35664:
            return z_;
        case 35665:
            return V_;
        case 35666:
            return k_;
        case 35674:
            return H_;
        case 35675:
            return G_;
        case 35676:
            return W_;
        case 5124:
        case 35670:
            return X_;
        case 35667:
        case 35671:
            return q_;
        case 35668:
        case 35672:
            return Y_;
        case 35669:
        case 35673:
            return Z_;
        case 5125:
            return J_;
        case 36294:
            return $_;
        case 36295:
            return K_;
        case 36296:
            return Q_;
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
            return j_;
        case 35679:
        case 36299:
        case 36307:
            return e0;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
            return t0;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
            return n0;
    }
}
var vo = class {
    constructor(e, t, n){
        this.id = e, this.addr = n, this.cache = [], this.setValue = F_(t.type);
    }
}, yo = class {
    constructor(e, t, n){
        this.id = e, this.addr = n, this.cache = [], this.size = t.size, this.setValue = i0(t.type);
    }
}, Mo = class {
    constructor(e){
        this.id = e, this.seq = [], this.map = {};
    }
    setValue(e, t, n) {
        let i = this.seq;
        for(let r = 0, a = i.length; r !== a; ++r){
            let o = i[r];
            o.setValue(e, t[o.id], n);
        }
    }
}, Qa = /(\w+)(\])?(\[|\.)?/g;
function Mh(s1, e) {
    s1.seq.push(e), s1.map[e.id] = e;
}
function s0(s1, e, t) {
    let n = s1.name, i = n.length;
    for(Qa.lastIndex = 0;;){
        let r = Qa.exec(n), a = Qa.lastIndex, o = r[1], c = r[2] === "]", l = r[3];
        if (c && (o = o | 0), l === void 0 || l === "[" && a + 2 === i) {
            Mh(t, l === void 0 ? new vo(o, s1, e) : new yo(o, s1, e));
            break;
        } else {
            let u = t.map[o];
            u === void 0 && (u = new Mo(o), Mh(t, u)), t = u;
        }
    }
}
var qi = class {
    constructor(e, t){
        this.seq = [], this.map = {};
        let n = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
        for(let i = 0; i < n; ++i){
            let r = e.getActiveUniform(t, i), a = e.getUniformLocation(t, r.name);
            s0(r, a, this);
        }
    }
    setValue(e, t, n, i) {
        let r = this.map[t];
        r !== void 0 && r.setValue(e, n, i);
    }
    setOptional(e, t, n) {
        let i = t[n];
        i !== void 0 && this.setValue(e, n, i);
    }
    static upload(e, t, n, i) {
        for(let r = 0, a = t.length; r !== a; ++r){
            let o = t[r], c = n[o.id];
            c.needsUpdate !== !1 && o.setValue(e, c.value, i);
        }
    }
    static seqWithValue(e, t) {
        let n = [];
        for(let i = 0, r = e.length; i !== r; ++i){
            let a = e[i];
            a.id in t && n.push(a);
        }
        return n;
    }
};
function Sh(s1, e, t) {
    let n = s1.createShader(e);
    return s1.shaderSource(n, t), s1.compileShader(n), n;
}
var r0 = 0;
function a0(s1, e) {
    let t = s1.split(`
`), n = [], i = Math.max(e - 6, 0), r = Math.min(e + 6, t.length);
    for(let a = i; a < r; a++){
        let o = a + 1;
        n.push(`${o === e ? ">" : " "} ${o}: ${t[a]}`);
    }
    return n.join(`
`);
}
function o0(s1) {
    let e = Qe.getPrimaries(Qe.workingColorSpace), t = Qe.getPrimaries(s1), n;
    switch(e === t ? n = "" : e === kr && t === Vr ? n = "LinearDisplayP3ToLinearSRGB" : e === Vr && t === kr && (n = "LinearSRGBToLinearDisplayP3"), s1){
        case Mn:
        case va:
            return [
                n,
                "LinearTransferOETF"
            ];
        case vt:
        case qc:
            return [
                n,
                "sRGBTransferOETF"
            ];
        default:
            return console.warn("THREE.WebGLProgram: Unsupported color space:", s1), [
                n,
                "LinearTransferOETF"
            ];
    }
}
function bh(s1, e, t) {
    let n = s1.getShaderParameter(e, s1.COMPILE_STATUS), i = s1.getShaderInfoLog(e).trim();
    if (n && i === "") return "";
    let r = /ERROR: 0:(\d+)/.exec(i);
    if (r) {
        let a = parseInt(r[1]);
        return t.toUpperCase() + `

` + i + `

` + a0(s1.getShaderSource(e), a);
    } else return i;
}
function c0(s1, e) {
    let t = o0(e);
    return `vec4 ${s1}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`;
}
function l0(s1, e) {
    let t;
    switch(e){
        case df:
            t = "Linear";
            break;
        case ff:
            t = "Reinhard";
            break;
        case pf:
            t = "OptimizedCineon";
            break;
        case mf:
            t = "ACESFilmic";
            break;
        case gf:
            t = "Custom";
            break;
        default:
            console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
    }
    return "vec3 " + s1 + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
function h0(s1) {
    return [
        s1.extensionDerivatives || s1.envMapCubeUVHeight || s1.bumpMap || s1.normalMapTangentSpace || s1.clearcoatNormalMap || s1.flatShading || s1.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
        (s1.extensionFragDepth || s1.logarithmicDepthBuffer) && s1.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
        s1.extensionDrawBuffers && s1.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
        (s1.extensionShaderTextureLOD || s1.envMap || s1.transmission) && s1.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
    ].filter(vs).join(`
`);
}
function u0(s1) {
    let e = [];
    for(let t in s1){
        let n = s1[t];
        n !== !1 && e.push("#define " + t + " " + n);
    }
    return e.join(`
`);
}
function d0(s1, e) {
    let t = {}, n = s1.getProgramParameter(e, s1.ACTIVE_ATTRIBUTES);
    for(let i = 0; i < n; i++){
        let r = s1.getActiveAttrib(e, i), a = r.name, o = 1;
        r.type === s1.FLOAT_MAT2 && (o = 2), r.type === s1.FLOAT_MAT3 && (o = 3), r.type === s1.FLOAT_MAT4 && (o = 4), t[a] = {
            type: r.type,
            location: s1.getAttribLocation(e, a),
            locationSize: o
        };
    }
    return t;
}
function vs(s1) {
    return s1 !== "";
}
function Eh(s1, e) {
    let t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
    return s1.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function Th(s1, e) {
    return s1.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
var f0 = /^[ \t]*#include +<([\w\d./]+)>/gm;
function So(s1) {
    return s1.replace(f0, m0);
}
var p0 = new Map([
    [
        "encodings_fragment",
        "colorspace_fragment"
    ],
    [
        "encodings_pars_fragment",
        "colorspace_pars_fragment"
    ],
    [
        "output_fragment",
        "opaque_fragment"
    ]
]);
function m0(s1, e) {
    let t = ke[e];
    if (t === void 0) {
        let n = p0.get(e);
        if (n !== void 0) t = ke[n], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, n);
        else throw new Error("Can not resolve #include <" + e + ">");
    }
    return So(t);
}
var g0 = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function wh(s1) {
    return s1.replace(g0, _0);
}
function _0(s1, e, t, n) {
    let i = "";
    for(let r = parseInt(e); r < parseInt(t); r++)i += n.replace(/\[\s*i\s*\]/g, "[ " + r + " ]").replace(/UNROLLED_LOOP_INDEX/g, r);
    return i;
}
function Ah(s1) {
    let e = "precision " + s1.precision + ` float;
precision ` + s1.precision + " int;";
    return s1.precision === "highp" ? e += `
#define HIGH_PRECISION` : s1.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : s1.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function x0(s1) {
    let e = "SHADOWMAP_TYPE_BASIC";
    return s1.shadowMapType === cd ? e = "SHADOWMAP_TYPE_PCF" : s1.shadowMapType === Gd ? e = "SHADOWMAP_TYPE_PCF_SOFT" : s1.shadowMapType === pn && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function v0(s1) {
    let e = "ENVMAP_TYPE_CUBE";
    if (s1.envMap) switch(s1.envMapMode){
        case zn:
        case ci:
            e = "ENVMAP_TYPE_CUBE";
            break;
        case Vs:
            e = "ENVMAP_TYPE_CUBE_UV";
            break;
    }
    return e;
}
function y0(s1) {
    let e = "ENVMAP_MODE_REFLECTION";
    if (s1.envMap) switch(s1.envMapMode){
        case ci:
            e = "ENVMAP_MODE_REFRACTION";
            break;
    }
    return e;
}
function M0(s1) {
    let e = "ENVMAP_BLENDING_NONE";
    if (s1.envMap) switch(s1.combine){
        case xa:
            e = "ENVMAP_BLENDING_MULTIPLY";
            break;
        case hf:
            e = "ENVMAP_BLENDING_MIX";
            break;
        case uf:
            e = "ENVMAP_BLENDING_ADD";
            break;
    }
    return e;
}
function S0(s1) {
    let e = s1.envMapCubeUVHeight;
    if (e === null) return null;
    let t = Math.log2(e) - 2, n = 1 / e;
    return {
        texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 7 * 16)),
        texelHeight: n,
        maxMip: t
    };
}
function b0(s1, e, t, n) {
    let i = s1.getContext(), r = t.defines, a = t.vertexShader, o = t.fragmentShader, c = x0(t), l = v0(t), h = y0(t), u = M0(t), d = S0(t), f = t.isWebGL2 ? "" : h0(t), m = u0(r), _ = i.createProgram(), g, p, v = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
    t.isRawShaderMaterial ? (g = [
        "#define SHADER_TYPE " + t.shaderType,
        "#define SHADER_NAME " + t.shaderName,
        m
    ].filter(vs).join(`
`), g.length > 0 && (g += `
`), p = [
        f,
        "#define SHADER_TYPE " + t.shaderType,
        "#define SHADER_NAME " + t.shaderName,
        m
    ].filter(vs).join(`
`), p.length > 0 && (p += `
`)) : (g = [
        Ah(t),
        "#define SHADER_TYPE " + t.shaderType,
        "#define SHADER_NAME " + t.shaderName,
        m,
        t.instancing ? "#define USE_INSTANCING" : "",
        t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
        t.useFog && t.fog ? "#define USE_FOG" : "",
        t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
        t.map ? "#define USE_MAP" : "",
        t.envMap ? "#define USE_ENVMAP" : "",
        t.envMap ? "#define " + h : "",
        t.lightMap ? "#define USE_LIGHTMAP" : "",
        t.aoMap ? "#define USE_AOMAP" : "",
        t.bumpMap ? "#define USE_BUMPMAP" : "",
        t.normalMap ? "#define USE_NORMALMAP" : "",
        t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
        t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        t.anisotropy ? "#define USE_ANISOTROPY" : "",
        t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        t.specularMap ? "#define USE_SPECULARMAP" : "",
        t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        t.metalnessMap ? "#define USE_METALNESSMAP" : "",
        t.alphaMap ? "#define USE_ALPHAMAP" : "",
        t.alphaHash ? "#define USE_ALPHAHASH" : "",
        t.transmission ? "#define USE_TRANSMISSION" : "",
        t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        t.mapUv ? "#define MAP_UV " + t.mapUv : "",
        t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
        t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
        t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
        t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
        t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
        t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
        t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
        t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
        t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
        t.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + t.anisotropyMapUv : "",
        t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
        t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
        t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
        t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
        t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
        t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
        t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
        t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
        t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
        t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
        t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
        t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
        t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
        t.vertexColors ? "#define USE_COLOR" : "",
        t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        t.vertexUv1s ? "#define USE_UV1" : "",
        t.vertexUv2s ? "#define USE_UV2" : "",
        t.vertexUv3s ? "#define USE_UV3" : "",
        t.pointsUvs ? "#define USE_POINTS_UV" : "",
        t.flatShading ? "#define FLAT_SHADED" : "",
        t.skinning ? "#define USE_SKINNING" : "",
        t.morphTargets ? "#define USE_MORPHTARGETS" : "",
        t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
        t.morphColors && t.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
        t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
        t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
        t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
        t.doubleSided ? "#define DOUBLE_SIDED" : "",
        t.flipSided ? "#define FLIP_SIDED" : "",
        t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        t.shadowMapEnabled ? "#define " + c : "",
        t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
        t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
        t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
        t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        "#ifdef USE_INSTANCING",
        "	attribute mat4 instanceMatrix;",
        "#endif",
        "#ifdef USE_INSTANCING_COLOR",
        "	attribute vec3 instanceColor;",
        "#endif",
        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "#ifdef USE_UV1",
        "	attribute vec2 uv1;",
        "#endif",
        "#ifdef USE_UV2",
        "	attribute vec2 uv2;",
        "#endif",
        "#ifdef USE_UV3",
        "	attribute vec2 uv3;",
        "#endif",
        "#ifdef USE_TANGENT",
        "	attribute vec4 tangent;",
        "#endif",
        "#if defined( USE_COLOR_ALPHA )",
        "	attribute vec4 color;",
        "#elif defined( USE_COLOR )",
        "	attribute vec3 color;",
        "#endif",
        "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
        "	attribute vec3 morphTarget0;",
        "	attribute vec3 morphTarget1;",
        "	attribute vec3 morphTarget2;",
        "	attribute vec3 morphTarget3;",
        "	#ifdef USE_MORPHNORMALS",
        "		attribute vec3 morphNormal0;",
        "		attribute vec3 morphNormal1;",
        "		attribute vec3 morphNormal2;",
        "		attribute vec3 morphNormal3;",
        "	#else",
        "		attribute vec3 morphTarget4;",
        "		attribute vec3 morphTarget5;",
        "		attribute vec3 morphTarget6;",
        "		attribute vec3 morphTarget7;",
        "	#endif",
        "#endif",
        "#ifdef USE_SKINNING",
        "	attribute vec4 skinIndex;",
        "	attribute vec4 skinWeight;",
        "#endif",
        `
`
    ].filter(vs).join(`
`), p = [
        f,
        Ah(t),
        "#define SHADER_TYPE " + t.shaderType,
        "#define SHADER_NAME " + t.shaderName,
        m,
        t.useFog && t.fog ? "#define USE_FOG" : "",
        t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
        t.map ? "#define USE_MAP" : "",
        t.matcap ? "#define USE_MATCAP" : "",
        t.envMap ? "#define USE_ENVMAP" : "",
        t.envMap ? "#define " + l : "",
        t.envMap ? "#define " + h : "",
        t.envMap ? "#define " + u : "",
        d ? "#define CUBEUV_TEXEL_WIDTH " + d.texelWidth : "",
        d ? "#define CUBEUV_TEXEL_HEIGHT " + d.texelHeight : "",
        d ? "#define CUBEUV_MAX_MIP " + d.maxMip + ".0" : "",
        t.lightMap ? "#define USE_LIGHTMAP" : "",
        t.aoMap ? "#define USE_AOMAP" : "",
        t.bumpMap ? "#define USE_BUMPMAP" : "",
        t.normalMap ? "#define USE_NORMALMAP" : "",
        t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        t.anisotropy ? "#define USE_ANISOTROPY" : "",
        t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        t.clearcoat ? "#define USE_CLEARCOAT" : "",
        t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        t.iridescence ? "#define USE_IRIDESCENCE" : "",
        t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        t.specularMap ? "#define USE_SPECULARMAP" : "",
        t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        t.metalnessMap ? "#define USE_METALNESSMAP" : "",
        t.alphaMap ? "#define USE_ALPHAMAP" : "",
        t.alphaTest ? "#define USE_ALPHATEST" : "",
        t.alphaHash ? "#define USE_ALPHAHASH" : "",
        t.sheen ? "#define USE_SHEEN" : "",
        t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        t.transmission ? "#define USE_TRANSMISSION" : "",
        t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
        t.vertexColors || t.instancingColor ? "#define USE_COLOR" : "",
        t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        t.vertexUv1s ? "#define USE_UV1" : "",
        t.vertexUv2s ? "#define USE_UV2" : "",
        t.vertexUv3s ? "#define USE_UV3" : "",
        t.pointsUvs ? "#define USE_POINTS_UV" : "",
        t.gradientMap ? "#define USE_GRADIENTMAP" : "",
        t.flatShading ? "#define FLAT_SHADED" : "",
        t.doubleSided ? "#define DOUBLE_SIDED" : "",
        t.flipSided ? "#define FLIP_SIDED" : "",
        t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        t.shadowMapEnabled ? "#define " + c : "",
        t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
        t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
        t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
        t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
        t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        t.toneMapping !== Nn ? "#define TONE_MAPPING" : "",
        t.toneMapping !== Nn ? ke.tonemapping_pars_fragment : "",
        t.toneMapping !== Nn ? l0("toneMapping", t.toneMapping) : "",
        t.dithering ? "#define DITHERING" : "",
        t.opaque ? "#define OPAQUE" : "",
        ke.colorspace_pars_fragment,
        c0("linearToOutputTexel", t.outputColorSpace),
        t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
        `
`
    ].filter(vs).join(`
`)), a = So(a), a = Eh(a, t), a = Th(a, t), o = So(o), o = Eh(o, t), o = Th(o, t), a = wh(a), o = wh(o), t.isWebGL2 && t.isRawShaderMaterial !== !0 && (v = `#version 300 es
`, g = [
        "precision mediump sampler2DArray;",
        "#define attribute in",
        "#define varying out",
        "#define texture2D texture"
    ].join(`
`) + `
` + g, p = [
        "#define varying in",
        t.glslVersion === Ol ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
        t.glslVersion === Ol ? "" : "#define gl_FragColor pc_fragColor",
        "#define gl_FragDepthEXT gl_FragDepth",
        "#define texture2D texture",
        "#define textureCube texture",
        "#define texture2DProj textureProj",
        "#define texture2DLodEXT textureLod",
        "#define texture2DProjLodEXT textureProjLod",
        "#define textureCubeLodEXT textureLod",
        "#define texture2DGradEXT textureGrad",
        "#define texture2DProjGradEXT textureProjGrad",
        "#define textureCubeGradEXT textureGrad"
    ].join(`
`) + `
` + p);
    let x = v + g + a, y = v + p + o, b = Sh(i, i.VERTEX_SHADER, x), w = Sh(i, i.FRAGMENT_SHADER, y);
    if (i.attachShader(_, b), i.attachShader(_, w), t.index0AttributeName !== void 0 ? i.bindAttribLocation(_, 0, t.index0AttributeName) : t.morphTargets === !0 && i.bindAttribLocation(_, 0, "position"), i.linkProgram(_), s1.debug.checkShaderErrors) {
        let M = i.getProgramInfoLog(_).trim(), T = i.getShaderInfoLog(b).trim(), O = i.getShaderInfoLog(w).trim(), Y = !0, $ = !0;
        if (i.getProgramParameter(_, i.LINK_STATUS) === !1) if (Y = !1, typeof s1.debug.onShaderError == "function") s1.debug.onShaderError(i, _, b, w);
        else {
            let U = bh(i, b, "vertex"), z = bh(i, w, "fragment");
            console.error("THREE.WebGLProgram: Shader Error " + i.getError() + " - VALIDATE_STATUS " + i.getProgramParameter(_, i.VALIDATE_STATUS) + `

Program Info Log: ` + M + `
` + U + `
` + z);
        }
        else M !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", M) : (T === "" || O === "") && ($ = !1);
        $ && (this.diagnostics = {
            runnable: Y,
            programLog: M,
            vertexShader: {
                log: T,
                prefix: g
            },
            fragmentShader: {
                log: O,
                prefix: p
            }
        });
    }
    i.deleteShader(b), i.deleteShader(w);
    let R;
    this.getUniforms = function() {
        return R === void 0 && (R = new qi(i, _)), R;
    };
    let I;
    return this.getAttributes = function() {
        return I === void 0 && (I = d0(i, _)), I;
    }, this.destroy = function() {
        n.releaseStatesOfProgram(this), i.deleteProgram(_), this.program = void 0;
    }, this.type = t.shaderType, this.name = t.shaderName, this.id = r0++, this.cacheKey = e, this.usedTimes = 1, this.program = _, this.vertexShader = b, this.fragmentShader = w, this;
}
var E0 = 0, bo = class {
    constructor(){
        this.shaderCache = new Map, this.materialCache = new Map;
    }
    update(e) {
        let t = e.vertexShader, n = e.fragmentShader, i = this._getShaderStage(t), r = this._getShaderStage(n), a = this._getShaderCacheForMaterial(e);
        return a.has(i) === !1 && (a.add(i), i.usedTimes++), a.has(r) === !1 && (a.add(r), r.usedTimes++), this;
    }
    remove(e) {
        let t = this.materialCache.get(e);
        for (let n of t)n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code);
        return this.materialCache.delete(e), this;
    }
    getVertexShaderID(e) {
        return this._getShaderStage(e.vertexShader).id;
    }
    getFragmentShaderID(e) {
        return this._getShaderStage(e.fragmentShader).id;
    }
    dispose() {
        this.shaderCache.clear(), this.materialCache.clear();
    }
    _getShaderCacheForMaterial(e) {
        let t = this.materialCache, n = t.get(e);
        return n === void 0 && (n = new Set, t.set(e, n)), n;
    }
    _getShaderStage(e) {
        let t = this.shaderCache, n = t.get(e);
        return n === void 0 && (n = new Eo(e), t.set(e, n)), n;
    }
}, Eo = class {
    constructor(e){
        this.id = E0++, this.code = e, this.usedTimes = 0;
    }
};
function T0(s1, e, t, n, i, r, a) {
    let o = new Rs, c = new bo, l = [], h = i.isWebGL2, u = i.logarithmicDepthBuffer, d = i.vertexTextures, f = i.precision, m = {
        MeshDepthMaterial: "depth",
        MeshDistanceMaterial: "distanceRGBA",
        MeshNormalMaterial: "normal",
        MeshBasicMaterial: "basic",
        MeshLambertMaterial: "lambert",
        MeshPhongMaterial: "phong",
        MeshToonMaterial: "toon",
        MeshStandardMaterial: "physical",
        MeshPhysicalMaterial: "physical",
        MeshMatcapMaterial: "matcap",
        LineBasicMaterial: "basic",
        LineDashedMaterial: "dashed",
        PointsMaterial: "points",
        ShadowMaterial: "shadow",
        SpriteMaterial: "sprite"
    };
    function _(M) {
        return M === 0 ? "uv" : `uv${M}`;
    }
    function g(M, T, O, Y, $) {
        let U = Y.fog, z = $.geometry, q = M.isMeshStandardMaterial ? Y.environment : null, H = (M.isMeshStandardMaterial ? t : e).get(M.envMap || q), ne = H && H.mapping === Vs ? H.image.height : null, W = m[M.type];
        M.precision !== null && (f = i.getMaxPrecision(M.precision), f !== M.precision && console.warn("THREE.WebGLProgram.getParameters:", M.precision, "not supported, using", f, "instead."));
        let K = z.morphAttributes.position || z.morphAttributes.normal || z.morphAttributes.color, D = K !== void 0 ? K.length : 0, G = 0;
        z.morphAttributes.position !== void 0 && (G = 1), z.morphAttributes.normal !== void 0 && (G = 2), z.morphAttributes.color !== void 0 && (G = 3);
        let he, fe, _e, we;
        if (W) {
            let tt = nn[W];
            he = tt.vertexShader, fe = tt.fragmentShader;
        } else he = M.vertexShader, fe = M.fragmentShader, c.update(M), _e = c.getVertexShaderID(M), we = c.getFragmentShaderID(M);
        let Ee = s1.getRenderTarget(), Te = $.isInstancedMesh === !0, Ye = !!M.map, it = !!M.matcap, Ce = !!H, L = !!M.aoMap, oe = !!M.lightMap, X = !!M.bumpMap, ie = !!M.normalMap, J = !!M.displacementMap, Se = !!M.emissiveMap, me = !!M.metalnessMap, ye = !!M.roughnessMap, Ne = M.anisotropy > 0, qe = M.clearcoat > 0, rt = M.iridescence > 0, C = M.sheen > 0, S = M.transmission > 0, B = Ne && !!M.anisotropyMap, ee = qe && !!M.clearcoatMap, j = qe && !!M.clearcoatNormalMap, te = qe && !!M.clearcoatRoughnessMap, Me = rt && !!M.iridescenceMap, re = rt && !!M.iridescenceThicknessMap, de = C && !!M.sheenColorMap, Le = C && !!M.sheenRoughnessMap, Ze = !!M.specularMap, se = !!M.specularColorMap, $e = !!M.specularIntensityMap, Oe = S && !!M.transmissionMap, Ie = S && !!M.thicknessMap, Re = !!M.gradientMap, P = !!M.alphaMap, ce = M.alphaTest > 0, ae = !!M.alphaHash, ge = !!M.extensions, ue = !!z.attributes.uv1, Q = !!z.attributes.uv2, be = !!z.attributes.uv3, Fe = Nn;
        return M.toneMapped && (Ee === null || Ee.isXRRenderTarget === !0) && (Fe = s1.toneMapping), {
            isWebGL2: h,
            shaderID: W,
            shaderType: M.type,
            shaderName: M.name,
            vertexShader: he,
            fragmentShader: fe,
            defines: M.defines,
            customVertexShaderID: _e,
            customFragmentShaderID: we,
            isRawShaderMaterial: M.isRawShaderMaterial === !0,
            glslVersion: M.glslVersion,
            precision: f,
            instancing: Te,
            instancingColor: Te && $.instanceColor !== null,
            supportsVertexTextures: d,
            outputColorSpace: Ee === null ? s1.outputColorSpace : Ee.isXRRenderTarget === !0 ? Ee.texture.colorSpace : Mn,
            map: Ye,
            matcap: it,
            envMap: Ce,
            envMapMode: Ce && H.mapping,
            envMapCubeUVHeight: ne,
            aoMap: L,
            lightMap: oe,
            bumpMap: X,
            normalMap: ie,
            displacementMap: d && J,
            emissiveMap: Se,
            normalMapObjectSpace: ie && M.normalMapType === Lf,
            normalMapTangentSpace: ie && M.normalMapType === mi,
            metalnessMap: me,
            roughnessMap: ye,
            anisotropy: Ne,
            anisotropyMap: B,
            clearcoat: qe,
            clearcoatMap: ee,
            clearcoatNormalMap: j,
            clearcoatRoughnessMap: te,
            iridescence: rt,
            iridescenceMap: Me,
            iridescenceThicknessMap: re,
            sheen: C,
            sheenColorMap: de,
            sheenRoughnessMap: Le,
            specularMap: Ze,
            specularColorMap: se,
            specularIntensityMap: $e,
            transmission: S,
            transmissionMap: Oe,
            thicknessMap: Ie,
            gradientMap: Re,
            opaque: M.transparent === !1 && M.blending === Wi,
            alphaMap: P,
            alphaTest: ce,
            alphaHash: ae,
            combine: M.combine,
            mapUv: Ye && _(M.map.channel),
            aoMapUv: L && _(M.aoMap.channel),
            lightMapUv: oe && _(M.lightMap.channel),
            bumpMapUv: X && _(M.bumpMap.channel),
            normalMapUv: ie && _(M.normalMap.channel),
            displacementMapUv: J && _(M.displacementMap.channel),
            emissiveMapUv: Se && _(M.emissiveMap.channel),
            metalnessMapUv: me && _(M.metalnessMap.channel),
            roughnessMapUv: ye && _(M.roughnessMap.channel),
            anisotropyMapUv: B && _(M.anisotropyMap.channel),
            clearcoatMapUv: ee && _(M.clearcoatMap.channel),
            clearcoatNormalMapUv: j && _(M.clearcoatNormalMap.channel),
            clearcoatRoughnessMapUv: te && _(M.clearcoatRoughnessMap.channel),
            iridescenceMapUv: Me && _(M.iridescenceMap.channel),
            iridescenceThicknessMapUv: re && _(M.iridescenceThicknessMap.channel),
            sheenColorMapUv: de && _(M.sheenColorMap.channel),
            sheenRoughnessMapUv: Le && _(M.sheenRoughnessMap.channel),
            specularMapUv: Ze && _(M.specularMap.channel),
            specularColorMapUv: se && _(M.specularColorMap.channel),
            specularIntensityMapUv: $e && _(M.specularIntensityMap.channel),
            transmissionMapUv: Oe && _(M.transmissionMap.channel),
            thicknessMapUv: Ie && _(M.thicknessMap.channel),
            alphaMapUv: P && _(M.alphaMap.channel),
            vertexTangents: !!z.attributes.tangent && (ie || Ne),
            vertexColors: M.vertexColors,
            vertexAlphas: M.vertexColors === !0 && !!z.attributes.color && z.attributes.color.itemSize === 4,
            vertexUv1s: ue,
            vertexUv2s: Q,
            vertexUv3s: be,
            pointsUvs: $.isPoints === !0 && !!z.attributes.uv && (Ye || P),
            fog: !!U,
            useFog: M.fog === !0,
            fogExp2: U && U.isFogExp2,
            flatShading: M.flatShading === !0,
            sizeAttenuation: M.sizeAttenuation === !0,
            logarithmicDepthBuffer: u,
            skinning: $.isSkinnedMesh === !0,
            morphTargets: z.morphAttributes.position !== void 0,
            morphNormals: z.morphAttributes.normal !== void 0,
            morphColors: z.morphAttributes.color !== void 0,
            morphTargetsCount: D,
            morphTextureStride: G,
            numDirLights: T.directional.length,
            numPointLights: T.point.length,
            numSpotLights: T.spot.length,
            numSpotLightMaps: T.spotLightMap.length,
            numRectAreaLights: T.rectArea.length,
            numHemiLights: T.hemi.length,
            numDirLightShadows: T.directionalShadowMap.length,
            numPointLightShadows: T.pointShadowMap.length,
            numSpotLightShadows: T.spotShadowMap.length,
            numSpotLightShadowsWithMaps: T.numSpotLightShadowsWithMaps,
            numLightProbes: T.numLightProbes,
            numClippingPlanes: a.numPlanes,
            numClipIntersection: a.numIntersection,
            dithering: M.dithering,
            shadowMapEnabled: s1.shadowMap.enabled && O.length > 0,
            shadowMapType: s1.shadowMap.type,
            toneMapping: Fe,
            useLegacyLights: s1._useLegacyLights,
            decodeVideoTexture: Ye && M.map.isVideoTexture === !0 && Qe.getTransfer(M.map.colorSpace) === nt,
            premultipliedAlpha: M.premultipliedAlpha,
            doubleSided: M.side === gn,
            flipSided: M.side === Ft,
            useDepthPacking: M.depthPacking >= 0,
            depthPacking: M.depthPacking || 0,
            index0AttributeName: M.index0AttributeName,
            extensionDerivatives: ge && M.extensions.derivatives === !0,
            extensionFragDepth: ge && M.extensions.fragDepth === !0,
            extensionDrawBuffers: ge && M.extensions.drawBuffers === !0,
            extensionShaderTextureLOD: ge && M.extensions.shaderTextureLOD === !0,
            rendererExtensionFragDepth: h || n.has("EXT_frag_depth"),
            rendererExtensionDrawBuffers: h || n.has("WEBGL_draw_buffers"),
            rendererExtensionShaderTextureLod: h || n.has("EXT_shader_texture_lod"),
            customProgramCacheKey: M.customProgramCacheKey()
        };
    }
    function p(M) {
        let T = [];
        if (M.shaderID ? T.push(M.shaderID) : (T.push(M.customVertexShaderID), T.push(M.customFragmentShaderID)), M.defines !== void 0) for(let O in M.defines)T.push(O), T.push(M.defines[O]);
        return M.isRawShaderMaterial === !1 && (v(T, M), x(T, M), T.push(s1.outputColorSpace)), T.push(M.customProgramCacheKey), T.join();
    }
    function v(M, T) {
        M.push(T.precision), M.push(T.outputColorSpace), M.push(T.envMapMode), M.push(T.envMapCubeUVHeight), M.push(T.mapUv), M.push(T.alphaMapUv), M.push(T.lightMapUv), M.push(T.aoMapUv), M.push(T.bumpMapUv), M.push(T.normalMapUv), M.push(T.displacementMapUv), M.push(T.emissiveMapUv), M.push(T.metalnessMapUv), M.push(T.roughnessMapUv), M.push(T.anisotropyMapUv), M.push(T.clearcoatMapUv), M.push(T.clearcoatNormalMapUv), M.push(T.clearcoatRoughnessMapUv), M.push(T.iridescenceMapUv), M.push(T.iridescenceThicknessMapUv), M.push(T.sheenColorMapUv), M.push(T.sheenRoughnessMapUv), M.push(T.specularMapUv), M.push(T.specularColorMapUv), M.push(T.specularIntensityMapUv), M.push(T.transmissionMapUv), M.push(T.thicknessMapUv), M.push(T.combine), M.push(T.fogExp2), M.push(T.sizeAttenuation), M.push(T.morphTargetsCount), M.push(T.morphAttributeCount), M.push(T.numDirLights), M.push(T.numPointLights), M.push(T.numSpotLights), M.push(T.numSpotLightMaps), M.push(T.numHemiLights), M.push(T.numRectAreaLights), M.push(T.numDirLightShadows), M.push(T.numPointLightShadows), M.push(T.numSpotLightShadows), M.push(T.numSpotLightShadowsWithMaps), M.push(T.numLightProbes), M.push(T.shadowMapType), M.push(T.toneMapping), M.push(T.numClippingPlanes), M.push(T.numClipIntersection), M.push(T.depthPacking);
    }
    function x(M, T) {
        o.disableAll(), T.isWebGL2 && o.enable(0), T.supportsVertexTextures && o.enable(1), T.instancing && o.enable(2), T.instancingColor && o.enable(3), T.matcap && o.enable(4), T.envMap && o.enable(5), T.normalMapObjectSpace && o.enable(6), T.normalMapTangentSpace && o.enable(7), T.clearcoat && o.enable(8), T.iridescence && o.enable(9), T.alphaTest && o.enable(10), T.vertexColors && o.enable(11), T.vertexAlphas && o.enable(12), T.vertexUv1s && o.enable(13), T.vertexUv2s && o.enable(14), T.vertexUv3s && o.enable(15), T.vertexTangents && o.enable(16), T.anisotropy && o.enable(17), M.push(o.mask), o.disableAll(), T.fog && o.enable(0), T.useFog && o.enable(1), T.flatShading && o.enable(2), T.logarithmicDepthBuffer && o.enable(3), T.skinning && o.enable(4), T.morphTargets && o.enable(5), T.morphNormals && o.enable(6), T.morphColors && o.enable(7), T.premultipliedAlpha && o.enable(8), T.shadowMapEnabled && o.enable(9), T.useLegacyLights && o.enable(10), T.doubleSided && o.enable(11), T.flipSided && o.enable(12), T.useDepthPacking && o.enable(13), T.dithering && o.enable(14), T.transmission && o.enable(15), T.sheen && o.enable(16), T.opaque && o.enable(17), T.pointsUvs && o.enable(18), T.decodeVideoTexture && o.enable(19), M.push(o.mask);
    }
    function y(M) {
        let T = m[M.type], O;
        if (T) {
            let Y = nn[T];
            O = xp.clone(Y.uniforms);
        } else O = M.uniforms;
        return O;
    }
    function b(M, T) {
        let O;
        for(let Y = 0, $ = l.length; Y < $; Y++){
            let U = l[Y];
            if (U.cacheKey === T) {
                O = U, ++O.usedTimes;
                break;
            }
        }
        return O === void 0 && (O = new b0(s1, T, M, r), l.push(O)), O;
    }
    function w(M) {
        if (--M.usedTimes === 0) {
            let T = l.indexOf(M);
            l[T] = l[l.length - 1], l.pop(), M.destroy();
        }
    }
    function R(M) {
        c.remove(M);
    }
    function I() {
        c.dispose();
    }
    return {
        getParameters: g,
        getProgramCacheKey: p,
        getUniforms: y,
        acquireProgram: b,
        releaseProgram: w,
        releaseShaderCache: R,
        programs: l,
        dispose: I
    };
}
function w0() {
    let s1 = new WeakMap;
    function e(r) {
        let a = s1.get(r);
        return a === void 0 && (a = {}, s1.set(r, a)), a;
    }
    function t(r) {
        s1.delete(r);
    }
    function n(r, a, o) {
        s1.get(r)[a] = o;
    }
    function i() {
        s1 = new WeakMap;
    }
    return {
        get: e,
        remove: t,
        update: n,
        dispose: i
    };
}
function A0(s1, e) {
    return s1.groupOrder !== e.groupOrder ? s1.groupOrder - e.groupOrder : s1.renderOrder !== e.renderOrder ? s1.renderOrder - e.renderOrder : s1.material.id !== e.material.id ? s1.material.id - e.material.id : s1.z !== e.z ? s1.z - e.z : s1.id - e.id;
}
function Rh(s1, e) {
    return s1.groupOrder !== e.groupOrder ? s1.groupOrder - e.groupOrder : s1.renderOrder !== e.renderOrder ? s1.renderOrder - e.renderOrder : s1.z !== e.z ? e.z - s1.z : s1.id - e.id;
}
function Ch() {
    let s1 = [], e = 0, t = [], n = [], i = [];
    function r() {
        e = 0, t.length = 0, n.length = 0, i.length = 0;
    }
    function a(u, d, f, m, _, g) {
        let p = s1[e];
        return p === void 0 ? (p = {
            id: u.id,
            object: u,
            geometry: d,
            material: f,
            groupOrder: m,
            renderOrder: u.renderOrder,
            z: _,
            group: g
        }, s1[e] = p) : (p.id = u.id, p.object = u, p.geometry = d, p.material = f, p.groupOrder = m, p.renderOrder = u.renderOrder, p.z = _, p.group = g), e++, p;
    }
    function o(u, d, f, m, _, g) {
        let p = a(u, d, f, m, _, g);
        f.transmission > 0 ? n.push(p) : f.transparent === !0 ? i.push(p) : t.push(p);
    }
    function c(u, d, f, m, _, g) {
        let p = a(u, d, f, m, _, g);
        f.transmission > 0 ? n.unshift(p) : f.transparent === !0 ? i.unshift(p) : t.unshift(p);
    }
    function l(u, d) {
        t.length > 1 && t.sort(u || A0), n.length > 1 && n.sort(d || Rh), i.length > 1 && i.sort(d || Rh);
    }
    function h() {
        for(let u = e, d = s1.length; u < d; u++){
            let f = s1[u];
            if (f.id === null) break;
            f.id = null, f.object = null, f.geometry = null, f.material = null, f.group = null;
        }
    }
    return {
        opaque: t,
        transmissive: n,
        transparent: i,
        init: r,
        push: o,
        unshift: c,
        finish: h,
        sort: l
    };
}
function R0() {
    let s1 = new WeakMap;
    function e(n, i) {
        let r = s1.get(n), a;
        return r === void 0 ? (a = new Ch, s1.set(n, [
            a
        ])) : i >= r.length ? (a = new Ch, r.push(a)) : a = r[i], a;
    }
    function t() {
        s1 = new WeakMap;
    }
    return {
        get: e,
        dispose: t
    };
}
function C0() {
    let s1 = {};
    return {
        get: function(e) {
            if (s1[e.id] !== void 0) return s1[e.id];
            let t;
            switch(e.type){
                case "DirectionalLight":
                    t = {
                        direction: new A,
                        color: new pe
                    };
                    break;
                case "SpotLight":
                    t = {
                        position: new A,
                        direction: new A,
                        color: new pe,
                        distance: 0,
                        coneCos: 0,
                        penumbraCos: 0,
                        decay: 0
                    };
                    break;
                case "PointLight":
                    t = {
                        position: new A,
                        color: new pe,
                        distance: 0,
                        decay: 0
                    };
                    break;
                case "HemisphereLight":
                    t = {
                        direction: new A,
                        skyColor: new pe,
                        groundColor: new pe
                    };
                    break;
                case "RectAreaLight":
                    t = {
                        color: new pe,
                        position: new A,
                        halfWidth: new A,
                        halfHeight: new A
                    };
                    break;
            }
            return s1[e.id] = t, t;
        }
    };
}
function P0() {
    let s1 = {};
    return {
        get: function(e) {
            if (s1[e.id] !== void 0) return s1[e.id];
            let t;
            switch(e.type){
                case "DirectionalLight":
                    t = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Z
                    };
                    break;
                case "SpotLight":
                    t = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Z
                    };
                    break;
                case "PointLight":
                    t = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Z,
                        shadowCameraNear: 1,
                        shadowCameraFar: 1e3
                    };
                    break;
            }
            return s1[e.id] = t, t;
        }
    };
}
var L0 = 0;
function I0(s1, e) {
    return (e.castShadow ? 2 : 0) - (s1.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (s1.map ? 1 : 0);
}
function U0(s1, e) {
    let t = new C0, n = P0(), i = {
        version: 0,
        hash: {
            directionalLength: -1,
            pointLength: -1,
            spotLength: -1,
            rectAreaLength: -1,
            hemiLength: -1,
            numDirectionalShadows: -1,
            numPointShadows: -1,
            numSpotShadows: -1,
            numSpotMaps: -1,
            numLightProbes: -1
        },
        ambient: [
            0,
            0,
            0
        ],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotLightMap: [],
        spotShadow: [],
        spotShadowMap: [],
        spotLightMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: [],
        numSpotLightShadowsWithMaps: 0,
        numLightProbes: 0
    };
    for(let h = 0; h < 9; h++)i.probe.push(new A);
    let r = new A, a = new ze, o = new ze;
    function c(h, u) {
        let d = 0, f = 0, m = 0;
        for(let Y = 0; Y < 9; Y++)i.probe[Y].set(0, 0, 0);
        let _ = 0, g = 0, p = 0, v = 0, x = 0, y = 0, b = 0, w = 0, R = 0, I = 0, M = 0;
        h.sort(I0);
        let T = u === !0 ? Math.PI : 1;
        for(let Y = 0, $ = h.length; Y < $; Y++){
            let U = h[Y], z = U.color, q = U.intensity, H = U.distance, ne = U.shadow && U.shadow.map ? U.shadow.map.texture : null;
            if (U.isAmbientLight) d += z.r * q * T, f += z.g * q * T, m += z.b * q * T;
            else if (U.isLightProbe) {
                for(let W = 0; W < 9; W++)i.probe[W].addScaledVector(U.sh.coefficients[W], q);
                M++;
            } else if (U.isDirectionalLight) {
                let W = t.get(U);
                if (W.color.copy(U.color).multiplyScalar(U.intensity * T), U.castShadow) {
                    let K = U.shadow, D = n.get(U);
                    D.shadowBias = K.bias, D.shadowNormalBias = K.normalBias, D.shadowRadius = K.radius, D.shadowMapSize = K.mapSize, i.directionalShadow[_] = D, i.directionalShadowMap[_] = ne, i.directionalShadowMatrix[_] = U.shadow.matrix, y++;
                }
                i.directional[_] = W, _++;
            } else if (U.isSpotLight) {
                let W = t.get(U);
                W.position.setFromMatrixPosition(U.matrixWorld), W.color.copy(z).multiplyScalar(q * T), W.distance = H, W.coneCos = Math.cos(U.angle), W.penumbraCos = Math.cos(U.angle * (1 - U.penumbra)), W.decay = U.decay, i.spot[p] = W;
                let K = U.shadow;
                if (U.map && (i.spotLightMap[R] = U.map, R++, K.updateMatrices(U), U.castShadow && I++), i.spotLightMatrix[p] = K.matrix, U.castShadow) {
                    let D = n.get(U);
                    D.shadowBias = K.bias, D.shadowNormalBias = K.normalBias, D.shadowRadius = K.radius, D.shadowMapSize = K.mapSize, i.spotShadow[p] = D, i.spotShadowMap[p] = ne, w++;
                }
                p++;
            } else if (U.isRectAreaLight) {
                let W = t.get(U);
                W.color.copy(z).multiplyScalar(q), W.halfWidth.set(U.width * .5, 0, 0), W.halfHeight.set(0, U.height * .5, 0), i.rectArea[v] = W, v++;
            } else if (U.isPointLight) {
                let W = t.get(U);
                if (W.color.copy(U.color).multiplyScalar(U.intensity * T), W.distance = U.distance, W.decay = U.decay, U.castShadow) {
                    let K = U.shadow, D = n.get(U);
                    D.shadowBias = K.bias, D.shadowNormalBias = K.normalBias, D.shadowRadius = K.radius, D.shadowMapSize = K.mapSize, D.shadowCameraNear = K.camera.near, D.shadowCameraFar = K.camera.far, i.pointShadow[g] = D, i.pointShadowMap[g] = ne, i.pointShadowMatrix[g] = U.shadow.matrix, b++;
                }
                i.point[g] = W, g++;
            } else if (U.isHemisphereLight) {
                let W = t.get(U);
                W.skyColor.copy(U.color).multiplyScalar(q * T), W.groundColor.copy(U.groundColor).multiplyScalar(q * T), i.hemi[x] = W, x++;
            }
        }
        v > 0 && (e.isWebGL2 || s1.has("OES_texture_float_linear") === !0 ? (i.rectAreaLTC1 = le.LTC_FLOAT_1, i.rectAreaLTC2 = le.LTC_FLOAT_2) : s1.has("OES_texture_half_float_linear") === !0 ? (i.rectAreaLTC1 = le.LTC_HALF_1, i.rectAreaLTC2 = le.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), i.ambient[0] = d, i.ambient[1] = f, i.ambient[2] = m;
        let O = i.hash;
        (O.directionalLength !== _ || O.pointLength !== g || O.spotLength !== p || O.rectAreaLength !== v || O.hemiLength !== x || O.numDirectionalShadows !== y || O.numPointShadows !== b || O.numSpotShadows !== w || O.numSpotMaps !== R || O.numLightProbes !== M) && (i.directional.length = _, i.spot.length = p, i.rectArea.length = v, i.point.length = g, i.hemi.length = x, i.directionalShadow.length = y, i.directionalShadowMap.length = y, i.pointShadow.length = b, i.pointShadowMap.length = b, i.spotShadow.length = w, i.spotShadowMap.length = w, i.directionalShadowMatrix.length = y, i.pointShadowMatrix.length = b, i.spotLightMatrix.length = w + R - I, i.spotLightMap.length = R, i.numSpotLightShadowsWithMaps = I, i.numLightProbes = M, O.directionalLength = _, O.pointLength = g, O.spotLength = p, O.rectAreaLength = v, O.hemiLength = x, O.numDirectionalShadows = y, O.numPointShadows = b, O.numSpotShadows = w, O.numSpotMaps = R, O.numLightProbes = M, i.version = L0++);
    }
    function l(h, u) {
        let d = 0, f = 0, m = 0, _ = 0, g = 0, p = u.matrixWorldInverse;
        for(let v = 0, x = h.length; v < x; v++){
            let y = h[v];
            if (y.isDirectionalLight) {
                let b = i.directional[d];
                b.direction.setFromMatrixPosition(y.matrixWorld), r.setFromMatrixPosition(y.target.matrixWorld), b.direction.sub(r), b.direction.transformDirection(p), d++;
            } else if (y.isSpotLight) {
                let b = i.spot[m];
                b.position.setFromMatrixPosition(y.matrixWorld), b.position.applyMatrix4(p), b.direction.setFromMatrixPosition(y.matrixWorld), r.setFromMatrixPosition(y.target.matrixWorld), b.direction.sub(r), b.direction.transformDirection(p), m++;
            } else if (y.isRectAreaLight) {
                let b = i.rectArea[_];
                b.position.setFromMatrixPosition(y.matrixWorld), b.position.applyMatrix4(p), o.identity(), a.copy(y.matrixWorld), a.premultiply(p), o.extractRotation(a), b.halfWidth.set(y.width * .5, 0, 0), b.halfHeight.set(0, y.height * .5, 0), b.halfWidth.applyMatrix4(o), b.halfHeight.applyMatrix4(o), _++;
            } else if (y.isPointLight) {
                let b = i.point[f];
                b.position.setFromMatrixPosition(y.matrixWorld), b.position.applyMatrix4(p), f++;
            } else if (y.isHemisphereLight) {
                let b = i.hemi[g];
                b.direction.setFromMatrixPosition(y.matrixWorld), b.direction.transformDirection(p), g++;
            }
        }
    }
    return {
        setup: c,
        setupView: l,
        state: i
    };
}
function Ph(s1, e) {
    let t = new U0(s1, e), n = [], i = [];
    function r() {
        n.length = 0, i.length = 0;
    }
    function a(u) {
        n.push(u);
    }
    function o(u) {
        i.push(u);
    }
    function c(u) {
        t.setup(n, u);
    }
    function l(u) {
        t.setupView(n, u);
    }
    return {
        init: r,
        state: {
            lightsArray: n,
            shadowsArray: i,
            lights: t
        },
        setupLights: c,
        setupLightsView: l,
        pushLight: a,
        pushShadow: o
    };
}
function D0(s1, e) {
    let t = new WeakMap;
    function n(r, a = 0) {
        let o = t.get(r), c;
        return o === void 0 ? (c = new Ph(s1, e), t.set(r, [
            c
        ])) : a >= o.length ? (c = new Ph(s1, e), o.push(c)) : c = o[a], c;
    }
    function i() {
        t = new WeakMap;
    }
    return {
        get: n,
        dispose: i
    };
}
var Qr = class extends bt {
    constructor(e){
        super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = Cf, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
    }
}, jr = class extends bt {
    constructor(e){
        super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
    }
}, N0 = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, O0 = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function F0(s1, e, t) {
    let n = new Ps, i = new Z, r = new Z, a = new je, o = new Qr({
        depthPacking: Pf
    }), c = new jr, l = {}, h = t.maxTextureSize, u = {
        [Bn]: Ft,
        [Ft]: Bn,
        [gn]: gn
    }, d = new jt({
        defines: {
            VSM_SAMPLES: 8
        },
        uniforms: {
            shadow_pass: {
                value: null
            },
            resolution: {
                value: new Z
            },
            radius: {
                value: 4
            }
        },
        vertexShader: N0,
        fragmentShader: O0
    }), f = d.clone();
    f.defines.HORIZONTAL_PASS = 1;
    let m = new Ge;
    m.setAttribute("position", new et(new Float32Array([
        -1,
        -1,
        .5,
        3,
        -1,
        .5,
        -1,
        3,
        .5
    ]), 3));
    let _ = new Mt(m, d), g = this;
    this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = cd;
    let p = this.type;
    this.render = function(b, w, R) {
        if (g.enabled === !1 || g.autoUpdate === !1 && g.needsUpdate === !1 || b.length === 0) return;
        let I = s1.getRenderTarget(), M = s1.getActiveCubeFace(), T = s1.getActiveMipmapLevel(), O = s1.state;
        O.setBlending(Dn), O.buffers.color.setClear(1, 1, 1, 1), O.buffers.depth.setTest(!0), O.setScissorTest(!1);
        let Y = p !== pn && this.type === pn, $ = p === pn && this.type !== pn;
        for(let U = 0, z = b.length; U < z; U++){
            let q = b[U], H = q.shadow;
            if (H === void 0) {
                console.warn("THREE.WebGLShadowMap:", q, "has no shadow.");
                continue;
            }
            if (H.autoUpdate === !1 && H.needsUpdate === !1) continue;
            i.copy(H.mapSize);
            let ne = H.getFrameExtents();
            if (i.multiply(ne), r.copy(H.mapSize), (i.x > h || i.y > h) && (i.x > h && (r.x = Math.floor(h / ne.x), i.x = r.x * ne.x, H.mapSize.x = r.x), i.y > h && (r.y = Math.floor(h / ne.y), i.y = r.y * ne.y, H.mapSize.y = r.y)), H.map === null || Y === !0 || $ === !0) {
                let K = this.type !== pn ? {
                    minFilter: pt,
                    magFilter: pt
                } : {};
                H.map !== null && H.map.dispose(), H.map = new qt(i.x, i.y, K), H.map.texture.name = q.name + ".shadowMap", H.camera.updateProjectionMatrix();
            }
            s1.setRenderTarget(H.map), s1.clear();
            let W = H.getViewportCount();
            for(let K = 0; K < W; K++){
                let D = H.getViewport(K);
                a.set(r.x * D.x, r.y * D.y, r.x * D.z, r.y * D.w), O.viewport(a), H.updateMatrices(q, K), n = H.getFrustum(), y(w, R, H.camera, q, this.type);
            }
            H.isPointLightShadow !== !0 && this.type === pn && v(H, R), H.needsUpdate = !1;
        }
        p = this.type, g.needsUpdate = !1, s1.setRenderTarget(I, M, T);
    };
    function v(b, w) {
        let R = e.update(_);
        d.defines.VSM_SAMPLES !== b.blurSamples && (d.defines.VSM_SAMPLES = b.blurSamples, f.defines.VSM_SAMPLES = b.blurSamples, d.needsUpdate = !0, f.needsUpdate = !0), b.mapPass === null && (b.mapPass = new qt(i.x, i.y)), d.uniforms.shadow_pass.value = b.map.texture, d.uniforms.resolution.value = b.mapSize, d.uniforms.radius.value = b.radius, s1.setRenderTarget(b.mapPass), s1.clear(), s1.renderBufferDirect(w, null, R, d, _, null), f.uniforms.shadow_pass.value = b.mapPass.texture, f.uniforms.resolution.value = b.mapSize, f.uniforms.radius.value = b.radius, s1.setRenderTarget(b.map), s1.clear(), s1.renderBufferDirect(w, null, R, f, _, null);
    }
    function x(b, w, R, I) {
        let M = null, T = R.isPointLight === !0 ? b.customDistanceMaterial : b.customDepthMaterial;
        if (T !== void 0) M = T;
        else if (M = R.isPointLight === !0 ? c : o, s1.localClippingEnabled && w.clipShadows === !0 && Array.isArray(w.clippingPlanes) && w.clippingPlanes.length !== 0 || w.displacementMap && w.displacementScale !== 0 || w.alphaMap && w.alphaTest > 0 || w.map && w.alphaTest > 0) {
            let O = M.uuid, Y = w.uuid, $ = l[O];
            $ === void 0 && ($ = {}, l[O] = $);
            let U = $[Y];
            U === void 0 && (U = M.clone(), $[Y] = U), M = U;
        }
        if (M.visible = w.visible, M.wireframe = w.wireframe, I === pn ? M.side = w.shadowSide !== null ? w.shadowSide : w.side : M.side = w.shadowSide !== null ? w.shadowSide : u[w.side], M.alphaMap = w.alphaMap, M.alphaTest = w.alphaTest, M.map = w.map, M.clipShadows = w.clipShadows, M.clippingPlanes = w.clippingPlanes, M.clipIntersection = w.clipIntersection, M.displacementMap = w.displacementMap, M.displacementScale = w.displacementScale, M.displacementBias = w.displacementBias, M.wireframeLinewidth = w.wireframeLinewidth, M.linewidth = w.linewidth, R.isPointLight === !0 && M.isMeshDistanceMaterial === !0) {
            let O = s1.properties.get(M);
            O.light = R;
        }
        return M;
    }
    function y(b, w, R, I, M) {
        if (b.visible === !1) return;
        if (b.layers.test(w.layers) && (b.isMesh || b.isLine || b.isPoints) && (b.castShadow || b.receiveShadow && M === pn) && (!b.frustumCulled || n.intersectsObject(b))) {
            b.modelViewMatrix.multiplyMatrices(R.matrixWorldInverse, b.matrixWorld);
            let Y = e.update(b), $ = b.material;
            if (Array.isArray($)) {
                let U = Y.groups;
                for(let z = 0, q = U.length; z < q; z++){
                    let H = U[z], ne = $[H.materialIndex];
                    if (ne && ne.visible) {
                        let W = x(b, ne, I, M);
                        s1.renderBufferDirect(R, null, Y, W, b, H);
                    }
                }
            } else if ($.visible) {
                let U = x(b, $, I, M);
                s1.renderBufferDirect(R, null, Y, U, b, null);
            }
        }
        let O = b.children;
        for(let Y = 0, $ = O.length; Y < $; Y++)y(O[Y], w, R, I, M);
    }
}
function B0(s1, e, t) {
    let n = t.isWebGL2;
    function i() {
        let P = !1, ce = new je, ae = null, ge = new je(0, 0, 0, 0);
        return {
            setMask: function(ue) {
                ae !== ue && !P && (s1.colorMask(ue, ue, ue, ue), ae = ue);
            },
            setLocked: function(ue) {
                P = ue;
            },
            setClear: function(ue, Q, be, Fe, At) {
                At === !0 && (ue *= Fe, Q *= Fe, be *= Fe), ce.set(ue, Q, be, Fe), ge.equals(ce) === !1 && (s1.clearColor(ue, Q, be, Fe), ge.copy(ce));
            },
            reset: function() {
                P = !1, ae = null, ge.set(-1, 0, 0, 0);
            }
        };
    }
    function r() {
        let P = !1, ce = null, ae = null, ge = null;
        return {
            setTest: function(ue) {
                ue ? Ee(s1.DEPTH_TEST) : Te(s1.DEPTH_TEST);
            },
            setMask: function(ue) {
                ce !== ue && !P && (s1.depthMask(ue), ce = ue);
            },
            setFunc: function(ue) {
                if (ae !== ue) {
                    switch(ue){
                        case nf:
                            s1.depthFunc(s1.NEVER);
                            break;
                        case sf:
                            s1.depthFunc(s1.ALWAYS);
                            break;
                        case rf:
                            s1.depthFunc(s1.LESS);
                            break;
                        case uo:
                            s1.depthFunc(s1.LEQUAL);
                            break;
                        case af:
                            s1.depthFunc(s1.EQUAL);
                            break;
                        case of:
                            s1.depthFunc(s1.GEQUAL);
                            break;
                        case cf:
                            s1.depthFunc(s1.GREATER);
                            break;
                        case lf:
                            s1.depthFunc(s1.NOTEQUAL);
                            break;
                        default:
                            s1.depthFunc(s1.LEQUAL);
                    }
                    ae = ue;
                }
            },
            setLocked: function(ue) {
                P = ue;
            },
            setClear: function(ue) {
                ge !== ue && (s1.clearDepth(ue), ge = ue);
            },
            reset: function() {
                P = !1, ce = null, ae = null, ge = null;
            }
        };
    }
    function a() {
        let P = !1, ce = null, ae = null, ge = null, ue = null, Q = null, be = null, Fe = null, At = null;
        return {
            setTest: function(tt) {
                P || (tt ? Ee(s1.STENCIL_TEST) : Te(s1.STENCIL_TEST));
            },
            setMask: function(tt) {
                ce !== tt && !P && (s1.stencilMask(tt), ce = tt);
            },
            setFunc: function(tt, tn, Rt) {
                (ae !== tt || ge !== tn || ue !== Rt) && (s1.stencilFunc(tt, tn, Rt), ae = tt, ge = tn, ue = Rt);
            },
            setOp: function(tt, tn, Rt) {
                (Q !== tt || be !== tn || Fe !== Rt) && (s1.stencilOp(tt, tn, Rt), Q = tt, be = tn, Fe = Rt);
            },
            setLocked: function(tt) {
                P = tt;
            },
            setClear: function(tt) {
                At !== tt && (s1.clearStencil(tt), At = tt);
            },
            reset: function() {
                P = !1, ce = null, ae = null, ge = null, ue = null, Q = null, be = null, Fe = null, At = null;
            }
        };
    }
    let o = new i, c = new r, l = new a, h = new WeakMap, u = new WeakMap, d = {}, f = {}, m = new WeakMap, _ = [], g = null, p = !1, v = null, x = null, y = null, b = null, w = null, R = null, I = null, M = !1, T = null, O = null, Y = null, $ = null, U = null, z = s1.getParameter(s1.MAX_COMBINED_TEXTURE_IMAGE_UNITS), q = !1, H = 0, ne = s1.getParameter(s1.VERSION);
    ne.indexOf("WebGL") !== -1 ? (H = parseFloat(/^WebGL (\d)/.exec(ne)[1]), q = H >= 1) : ne.indexOf("OpenGL ES") !== -1 && (H = parseFloat(/^OpenGL ES (\d)/.exec(ne)[1]), q = H >= 2);
    let W = null, K = {}, D = s1.getParameter(s1.SCISSOR_BOX), G = s1.getParameter(s1.VIEWPORT), he = new je().fromArray(D), fe = new je().fromArray(G);
    function _e(P, ce, ae, ge) {
        let ue = new Uint8Array(4), Q = s1.createTexture();
        s1.bindTexture(P, Q), s1.texParameteri(P, s1.TEXTURE_MIN_FILTER, s1.NEAREST), s1.texParameteri(P, s1.TEXTURE_MAG_FILTER, s1.NEAREST);
        for(let be = 0; be < ae; be++)n && (P === s1.TEXTURE_3D || P === s1.TEXTURE_2D_ARRAY) ? s1.texImage3D(ce, 0, s1.RGBA, 1, 1, ge, 0, s1.RGBA, s1.UNSIGNED_BYTE, ue) : s1.texImage2D(ce + be, 0, s1.RGBA, 1, 1, 0, s1.RGBA, s1.UNSIGNED_BYTE, ue);
        return Q;
    }
    let we = {};
    we[s1.TEXTURE_2D] = _e(s1.TEXTURE_2D, s1.TEXTURE_2D, 1), we[s1.TEXTURE_CUBE_MAP] = _e(s1.TEXTURE_CUBE_MAP, s1.TEXTURE_CUBE_MAP_POSITIVE_X, 6), n && (we[s1.TEXTURE_2D_ARRAY] = _e(s1.TEXTURE_2D_ARRAY, s1.TEXTURE_2D_ARRAY, 1, 1), we[s1.TEXTURE_3D] = _e(s1.TEXTURE_3D, s1.TEXTURE_3D, 1, 1)), o.setClear(0, 0, 0, 1), c.setClear(1), l.setClear(0), Ee(s1.DEPTH_TEST), c.setFunc(uo), J(!1), Se(rl), Ee(s1.CULL_FACE), X(Dn);
    function Ee(P) {
        d[P] !== !0 && (s1.enable(P), d[P] = !0);
    }
    function Te(P) {
        d[P] !== !1 && (s1.disable(P), d[P] = !1);
    }
    function Ye(P, ce) {
        return f[P] !== ce ? (s1.bindFramebuffer(P, ce), f[P] = ce, n && (P === s1.DRAW_FRAMEBUFFER && (f[s1.FRAMEBUFFER] = ce), P === s1.FRAMEBUFFER && (f[s1.DRAW_FRAMEBUFFER] = ce)), !0) : !1;
    }
    function it(P, ce) {
        let ae = _, ge = !1;
        if (P) if (ae = m.get(ce), ae === void 0 && (ae = [], m.set(ce, ae)), P.isWebGLMultipleRenderTargets) {
            let ue = P.texture;
            if (ae.length !== ue.length || ae[0] !== s1.COLOR_ATTACHMENT0) {
                for(let Q = 0, be = ue.length; Q < be; Q++)ae[Q] = s1.COLOR_ATTACHMENT0 + Q;
                ae.length = ue.length, ge = !0;
            }
        } else ae[0] !== s1.COLOR_ATTACHMENT0 && (ae[0] = s1.COLOR_ATTACHMENT0, ge = !0);
        else ae[0] !== s1.BACK && (ae[0] = s1.BACK, ge = !0);
        ge && (t.isWebGL2 ? s1.drawBuffers(ae) : e.get("WEBGL_draw_buffers").drawBuffersWEBGL(ae));
    }
    function Ce(P) {
        return g !== P ? (s1.useProgram(P), g = P, !0) : !1;
    }
    let L = {
        [Bi]: s1.FUNC_ADD,
        [Xd]: s1.FUNC_SUBTRACT,
        [qd]: s1.FUNC_REVERSE_SUBTRACT
    };
    if (n) L[ll] = s1.MIN, L[hl] = s1.MAX;
    else {
        let P = e.get("EXT_blend_minmax");
        P !== null && (L[ll] = P.MIN_EXT, L[hl] = P.MAX_EXT);
    }
    let oe = {
        [Yd]: s1.ZERO,
        [Zd]: s1.ONE,
        [Jd]: s1.SRC_COLOR,
        [ld]: s1.SRC_ALPHA,
        [tf]: s1.SRC_ALPHA_SATURATE,
        [jd]: s1.DST_COLOR,
        [Kd]: s1.DST_ALPHA,
        [$d]: s1.ONE_MINUS_SRC_COLOR,
        [hd]: s1.ONE_MINUS_SRC_ALPHA,
        [ef]: s1.ONE_MINUS_DST_COLOR,
        [Qd]: s1.ONE_MINUS_DST_ALPHA
    };
    function X(P, ce, ae, ge, ue, Q, be, Fe) {
        if (P === Dn) {
            p === !0 && (Te(s1.BLEND), p = !1);
            return;
        }
        if (p === !1 && (Ee(s1.BLEND), p = !0), P !== Wd) {
            if (P !== v || Fe !== M) {
                if ((x !== Bi || w !== Bi) && (s1.blendEquation(s1.FUNC_ADD), x = Bi, w = Bi), Fe) switch(P){
                    case Wi:
                        s1.blendFuncSeparate(s1.ONE, s1.ONE_MINUS_SRC_ALPHA, s1.ONE, s1.ONE_MINUS_SRC_ALPHA);
                        break;
                    case al:
                        s1.blendFunc(s1.ONE, s1.ONE);
                        break;
                    case ol:
                        s1.blendFuncSeparate(s1.ZERO, s1.ONE_MINUS_SRC_COLOR, s1.ZERO, s1.ONE);
                        break;
                    case cl:
                        s1.blendFuncSeparate(s1.ZERO, s1.SRC_COLOR, s1.ZERO, s1.SRC_ALPHA);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", P);
                        break;
                }
                else switch(P){
                    case Wi:
                        s1.blendFuncSeparate(s1.SRC_ALPHA, s1.ONE_MINUS_SRC_ALPHA, s1.ONE, s1.ONE_MINUS_SRC_ALPHA);
                        break;
                    case al:
                        s1.blendFunc(s1.SRC_ALPHA, s1.ONE);
                        break;
                    case ol:
                        s1.blendFuncSeparate(s1.ZERO, s1.ONE_MINUS_SRC_COLOR, s1.ZERO, s1.ONE);
                        break;
                    case cl:
                        s1.blendFunc(s1.ZERO, s1.SRC_COLOR);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", P);
                        break;
                }
                y = null, b = null, R = null, I = null, v = P, M = Fe;
            }
            return;
        }
        ue = ue || ce, Q = Q || ae, be = be || ge, (ce !== x || ue !== w) && (s1.blendEquationSeparate(L[ce], L[ue]), x = ce, w = ue), (ae !== y || ge !== b || Q !== R || be !== I) && (s1.blendFuncSeparate(oe[ae], oe[ge], oe[Q], oe[be]), y = ae, b = ge, R = Q, I = be), v = P, M = !1;
    }
    function ie(P, ce) {
        P.side === gn ? Te(s1.CULL_FACE) : Ee(s1.CULL_FACE);
        let ae = P.side === Ft;
        ce && (ae = !ae), J(ae), P.blending === Wi && P.transparent === !1 ? X(Dn) : X(P.blending, P.blendEquation, P.blendSrc, P.blendDst, P.blendEquationAlpha, P.blendSrcAlpha, P.blendDstAlpha, P.premultipliedAlpha), c.setFunc(P.depthFunc), c.setTest(P.depthTest), c.setMask(P.depthWrite), o.setMask(P.colorWrite);
        let ge = P.stencilWrite;
        l.setTest(ge), ge && (l.setMask(P.stencilWriteMask), l.setFunc(P.stencilFunc, P.stencilRef, P.stencilFuncMask), l.setOp(P.stencilFail, P.stencilZFail, P.stencilZPass)), ye(P.polygonOffset, P.polygonOffsetFactor, P.polygonOffsetUnits), P.alphaToCoverage === !0 ? Ee(s1.SAMPLE_ALPHA_TO_COVERAGE) : Te(s1.SAMPLE_ALPHA_TO_COVERAGE);
    }
    function J(P) {
        T !== P && (P ? s1.frontFace(s1.CW) : s1.frontFace(s1.CCW), T = P);
    }
    function Se(P) {
        P !== kd ? (Ee(s1.CULL_FACE), P !== O && (P === rl ? s1.cullFace(s1.BACK) : P === Hd ? s1.cullFace(s1.FRONT) : s1.cullFace(s1.FRONT_AND_BACK))) : Te(s1.CULL_FACE), O = P;
    }
    function me(P) {
        P !== Y && (q && s1.lineWidth(P), Y = P);
    }
    function ye(P, ce, ae) {
        P ? (Ee(s1.POLYGON_OFFSET_FILL), ($ !== ce || U !== ae) && (s1.polygonOffset(ce, ae), $ = ce, U = ae)) : Te(s1.POLYGON_OFFSET_FILL);
    }
    function Ne(P) {
        P ? Ee(s1.SCISSOR_TEST) : Te(s1.SCISSOR_TEST);
    }
    function qe(P) {
        P === void 0 && (P = s1.TEXTURE0 + z - 1), W !== P && (s1.activeTexture(P), W = P);
    }
    function rt(P, ce, ae) {
        ae === void 0 && (W === null ? ae = s1.TEXTURE0 + z - 1 : ae = W);
        let ge = K[ae];
        ge === void 0 && (ge = {
            type: void 0,
            texture: void 0
        }, K[ae] = ge), (ge.type !== P || ge.texture !== ce) && (W !== ae && (s1.activeTexture(ae), W = ae), s1.bindTexture(P, ce || we[P]), ge.type = P, ge.texture = ce);
    }
    function C() {
        let P = K[W];
        P !== void 0 && P.type !== void 0 && (s1.bindTexture(P.type, null), P.type = void 0, P.texture = void 0);
    }
    function S() {
        try {
            s1.compressedTexImage2D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function B() {
        try {
            s1.compressedTexImage3D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function ee() {
        try {
            s1.texSubImage2D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function j() {
        try {
            s1.texSubImage3D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function te() {
        try {
            s1.compressedTexSubImage2D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function Me() {
        try {
            s1.compressedTexSubImage3D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function re() {
        try {
            s1.texStorage2D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function de() {
        try {
            s1.texStorage3D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function Le() {
        try {
            s1.texImage2D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function Ze() {
        try {
            s1.texImage3D.apply(s1, arguments);
        } catch (P) {
            console.error("THREE.WebGLState:", P);
        }
    }
    function se(P) {
        he.equals(P) === !1 && (s1.scissor(P.x, P.y, P.z, P.w), he.copy(P));
    }
    function $e(P) {
        fe.equals(P) === !1 && (s1.viewport(P.x, P.y, P.z, P.w), fe.copy(P));
    }
    function Oe(P, ce) {
        let ae = u.get(ce);
        ae === void 0 && (ae = new WeakMap, u.set(ce, ae));
        let ge = ae.get(P);
        ge === void 0 && (ge = s1.getUniformBlockIndex(ce, P.name), ae.set(P, ge));
    }
    function Ie(P, ce) {
        let ge = u.get(ce).get(P);
        h.get(ce) !== ge && (s1.uniformBlockBinding(ce, ge, P.__bindingPointIndex), h.set(ce, ge));
    }
    function Re() {
        s1.disable(s1.BLEND), s1.disable(s1.CULL_FACE), s1.disable(s1.DEPTH_TEST), s1.disable(s1.POLYGON_OFFSET_FILL), s1.disable(s1.SCISSOR_TEST), s1.disable(s1.STENCIL_TEST), s1.disable(s1.SAMPLE_ALPHA_TO_COVERAGE), s1.blendEquation(s1.FUNC_ADD), s1.blendFunc(s1.ONE, s1.ZERO), s1.blendFuncSeparate(s1.ONE, s1.ZERO, s1.ONE, s1.ZERO), s1.colorMask(!0, !0, !0, !0), s1.clearColor(0, 0, 0, 0), s1.depthMask(!0), s1.depthFunc(s1.LESS), s1.clearDepth(1), s1.stencilMask(4294967295), s1.stencilFunc(s1.ALWAYS, 0, 4294967295), s1.stencilOp(s1.KEEP, s1.KEEP, s1.KEEP), s1.clearStencil(0), s1.cullFace(s1.BACK), s1.frontFace(s1.CCW), s1.polygonOffset(0, 0), s1.activeTexture(s1.TEXTURE0), s1.bindFramebuffer(s1.FRAMEBUFFER, null), n === !0 && (s1.bindFramebuffer(s1.DRAW_FRAMEBUFFER, null), s1.bindFramebuffer(s1.READ_FRAMEBUFFER, null)), s1.useProgram(null), s1.lineWidth(1), s1.scissor(0, 0, s1.canvas.width, s1.canvas.height), s1.viewport(0, 0, s1.canvas.width, s1.canvas.height), d = {}, W = null, K = {}, f = {}, m = new WeakMap, _ = [], g = null, p = !1, v = null, x = null, y = null, b = null, w = null, R = null, I = null, M = !1, T = null, O = null, Y = null, $ = null, U = null, he.set(0, 0, s1.canvas.width, s1.canvas.height), fe.set(0, 0, s1.canvas.width, s1.canvas.height), o.reset(), c.reset(), l.reset();
    }
    return {
        buffers: {
            color: o,
            depth: c,
            stencil: l
        },
        enable: Ee,
        disable: Te,
        bindFramebuffer: Ye,
        drawBuffers: it,
        useProgram: Ce,
        setBlending: X,
        setMaterial: ie,
        setFlipSided: J,
        setCullFace: Se,
        setLineWidth: me,
        setPolygonOffset: ye,
        setScissorTest: Ne,
        activeTexture: qe,
        bindTexture: rt,
        unbindTexture: C,
        compressedTexImage2D: S,
        compressedTexImage3D: B,
        texImage2D: Le,
        texImage3D: Ze,
        updateUBOMapping: Oe,
        uniformBlockBinding: Ie,
        texStorage2D: re,
        texStorage3D: de,
        texSubImage2D: ee,
        texSubImage3D: j,
        compressedTexSubImage2D: te,
        compressedTexSubImage3D: Me,
        scissor: se,
        viewport: $e,
        reset: Re
    };
}
function z0(s1, e, t, n, i, r, a) {
    let o = i.isWebGL2, c = i.maxTextures, l = i.maxCubemapSize, h = i.maxTextureSize, u = i.maxSamples, d = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, f = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), m = new WeakMap, _, g = new WeakMap, p = !1;
    try {
        p = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch  {}
    function v(C, S) {
        return p ? new OffscreenCanvas(C, S) : ws("canvas");
    }
    function x(C, S, B, ee) {
        let j = 1;
        if ((C.width > ee || C.height > ee) && (j = ee / Math.max(C.width, C.height)), j < 1 || S === !0) if (typeof HTMLImageElement < "u" && C instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && C instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && C instanceof ImageBitmap) {
            let te = S ? Wr : Math.floor, Me = te(j * C.width), re = te(j * C.height);
            _ === void 0 && (_ = v(Me, re));
            let de = B ? v(Me, re) : _;
            return de.width = Me, de.height = re, de.getContext("2d").drawImage(C, 0, 0, Me, re), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + C.width + "x" + C.height + ") to (" + Me + "x" + re + ")."), de;
        } else return "data" in C && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + C.width + "x" + C.height + ")."), C;
        return C;
    }
    function y(C) {
        return mo(C.width) && mo(C.height);
    }
    function b(C) {
        return o ? !1 : C.wrapS !== It || C.wrapT !== It || C.minFilter !== pt && C.minFilter !== mt;
    }
    function w(C, S) {
        return C.generateMipmaps && S && C.minFilter !== pt && C.minFilter !== mt;
    }
    function R(C) {
        s1.generateMipmap(C);
    }
    function I(C, S, B, ee, j = !1) {
        if (o === !1) return S;
        if (C !== null) {
            if (s1[C] !== void 0) return s1[C];
            console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + C + "'");
        }
        let te = S;
        if (S === s1.RED && (B === s1.FLOAT && (te = s1.R32F), B === s1.HALF_FLOAT && (te = s1.R16F), B === s1.UNSIGNED_BYTE && (te = s1.R8)), S === s1.RED_INTEGER && (B === s1.UNSIGNED_BYTE && (te = s1.R8UI), B === s1.UNSIGNED_SHORT && (te = s1.R16UI), B === s1.UNSIGNED_INT && (te = s1.R32UI), B === s1.BYTE && (te = s1.R8I), B === s1.SHORT && (te = s1.R16I), B === s1.INT && (te = s1.R32I)), S === s1.RG && (B === s1.FLOAT && (te = s1.RG32F), B === s1.HALF_FLOAT && (te = s1.RG16F), B === s1.UNSIGNED_BYTE && (te = s1.RG8)), S === s1.RGBA) {
            let Me = j ? zr : Qe.getTransfer(ee);
            B === s1.FLOAT && (te = s1.RGBA32F), B === s1.HALF_FLOAT && (te = s1.RGBA16F), B === s1.UNSIGNED_BYTE && (te = Me === nt ? s1.SRGB8_ALPHA8 : s1.RGBA8), B === s1.UNSIGNED_SHORT_4_4_4_4 && (te = s1.RGBA4), B === s1.UNSIGNED_SHORT_5_5_5_1 && (te = s1.RGB5_A1);
        }
        return (te === s1.R16F || te === s1.R32F || te === s1.RG16F || te === s1.RG32F || te === s1.RGBA16F || te === s1.RGBA32F) && e.get("EXT_color_buffer_float"), te;
    }
    function M(C, S, B) {
        return w(C, B) === !0 || C.isFramebufferTexture && C.minFilter !== pt && C.minFilter !== mt ? Math.log2(Math.max(S.width, S.height)) + 1 : C.mipmaps !== void 0 && C.mipmaps.length > 0 ? C.mipmaps.length : C.isCompressedTexture && Array.isArray(C.image) ? S.mipmaps.length : 1;
    }
    function T(C) {
        return C === pt || C === fo || C === Lr ? s1.NEAREST : s1.LINEAR;
    }
    function O(C) {
        let S = C.target;
        S.removeEventListener("dispose", O), $(S), S.isVideoTexture && m.delete(S);
    }
    function Y(C) {
        let S = C.target;
        S.removeEventListener("dispose", Y), z(S);
    }
    function $(C) {
        let S = n.get(C);
        if (S.__webglInit === void 0) return;
        let B = C.source, ee = g.get(B);
        if (ee) {
            let j = ee[S.__cacheKey];
            j.usedTimes--, j.usedTimes === 0 && U(C), Object.keys(ee).length === 0 && g.delete(B);
        }
        n.remove(C);
    }
    function U(C) {
        let S = n.get(C);
        s1.deleteTexture(S.__webglTexture);
        let B = C.source, ee = g.get(B);
        delete ee[S.__cacheKey], a.memory.textures--;
    }
    function z(C) {
        let S = C.texture, B = n.get(C), ee = n.get(S);
        if (ee.__webglTexture !== void 0 && (s1.deleteTexture(ee.__webglTexture), a.memory.textures--), C.depthTexture && C.depthTexture.dispose(), C.isWebGLCubeRenderTarget) for(let j = 0; j < 6; j++){
            if (Array.isArray(B.__webglFramebuffer[j])) for(let te = 0; te < B.__webglFramebuffer[j].length; te++)s1.deleteFramebuffer(B.__webglFramebuffer[j][te]);
            else s1.deleteFramebuffer(B.__webglFramebuffer[j]);
            B.__webglDepthbuffer && s1.deleteRenderbuffer(B.__webglDepthbuffer[j]);
        }
        else {
            if (Array.isArray(B.__webglFramebuffer)) for(let j = 0; j < B.__webglFramebuffer.length; j++)s1.deleteFramebuffer(B.__webglFramebuffer[j]);
            else s1.deleteFramebuffer(B.__webglFramebuffer);
            if (B.__webglDepthbuffer && s1.deleteRenderbuffer(B.__webglDepthbuffer), B.__webglMultisampledFramebuffer && s1.deleteFramebuffer(B.__webglMultisampledFramebuffer), B.__webglColorRenderbuffer) for(let j = 0; j < B.__webglColorRenderbuffer.length; j++)B.__webglColorRenderbuffer[j] && s1.deleteRenderbuffer(B.__webglColorRenderbuffer[j]);
            B.__webglDepthRenderbuffer && s1.deleteRenderbuffer(B.__webglDepthRenderbuffer);
        }
        if (C.isWebGLMultipleRenderTargets) for(let j = 0, te = S.length; j < te; j++){
            let Me = n.get(S[j]);
            Me.__webglTexture && (s1.deleteTexture(Me.__webglTexture), a.memory.textures--), n.remove(S[j]);
        }
        n.remove(S), n.remove(C);
    }
    let q = 0;
    function H() {
        q = 0;
    }
    function ne() {
        let C = q;
        return C >= c && console.warn("THREE.WebGLTextures: Trying to use " + C + " texture units while this GPU supports only " + c), q += 1, C;
    }
    function W(C) {
        let S = [];
        return S.push(C.wrapS), S.push(C.wrapT), S.push(C.wrapR || 0), S.push(C.magFilter), S.push(C.minFilter), S.push(C.anisotropy), S.push(C.internalFormat), S.push(C.format), S.push(C.type), S.push(C.generateMipmaps), S.push(C.premultiplyAlpha), S.push(C.flipY), S.push(C.unpackAlignment), S.push(C.colorSpace), S.join();
    }
    function K(C, S) {
        let B = n.get(C);
        if (C.isVideoTexture && qe(C), C.isRenderTargetTexture === !1 && C.version > 0 && B.__version !== C.version) {
            let ee = C.image;
            if (ee === null) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
            else if (ee.complete === !1) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
            else {
                Ye(B, C, S);
                return;
            }
        }
        t.bindTexture(s1.TEXTURE_2D, B.__webglTexture, s1.TEXTURE0 + S);
    }
    function D(C, S) {
        let B = n.get(C);
        if (C.version > 0 && B.__version !== C.version) {
            Ye(B, C, S);
            return;
        }
        t.bindTexture(s1.TEXTURE_2D_ARRAY, B.__webglTexture, s1.TEXTURE0 + S);
    }
    function G(C, S) {
        let B = n.get(C);
        if (C.version > 0 && B.__version !== C.version) {
            Ye(B, C, S);
            return;
        }
        t.bindTexture(s1.TEXTURE_3D, B.__webglTexture, s1.TEXTURE0 + S);
    }
    function he(C, S) {
        let B = n.get(C);
        if (C.version > 0 && B.__version !== C.version) {
            it(B, C, S);
            return;
        }
        t.bindTexture(s1.TEXTURE_CUBE_MAP, B.__webglTexture, s1.TEXTURE0 + S);
    }
    let fe = {
        [Dr]: s1.REPEAT,
        [It]: s1.CLAMP_TO_EDGE,
        [Nr]: s1.MIRRORED_REPEAT
    }, _e = {
        [pt]: s1.NEAREST,
        [fo]: s1.NEAREST_MIPMAP_NEAREST,
        [Lr]: s1.NEAREST_MIPMAP_LINEAR,
        [mt]: s1.LINEAR,
        [ud]: s1.LINEAR_MIPMAP_NEAREST,
        [li]: s1.LINEAR_MIPMAP_LINEAR
    }, we = {
        [Uf]: s1.NEVER,
        [Vf]: s1.ALWAYS,
        [Df]: s1.LESS,
        [Of]: s1.LEQUAL,
        [Nf]: s1.EQUAL,
        [zf]: s1.GEQUAL,
        [Ff]: s1.GREATER,
        [Bf]: s1.NOTEQUAL
    };
    function Ee(C, S, B) {
        if (B ? (s1.texParameteri(C, s1.TEXTURE_WRAP_S, fe[S.wrapS]), s1.texParameteri(C, s1.TEXTURE_WRAP_T, fe[S.wrapT]), (C === s1.TEXTURE_3D || C === s1.TEXTURE_2D_ARRAY) && s1.texParameteri(C, s1.TEXTURE_WRAP_R, fe[S.wrapR]), s1.texParameteri(C, s1.TEXTURE_MAG_FILTER, _e[S.magFilter]), s1.texParameteri(C, s1.TEXTURE_MIN_FILTER, _e[S.minFilter])) : (s1.texParameteri(C, s1.TEXTURE_WRAP_S, s1.CLAMP_TO_EDGE), s1.texParameteri(C, s1.TEXTURE_WRAP_T, s1.CLAMP_TO_EDGE), (C === s1.TEXTURE_3D || C === s1.TEXTURE_2D_ARRAY) && s1.texParameteri(C, s1.TEXTURE_WRAP_R, s1.CLAMP_TO_EDGE), (S.wrapS !== It || S.wrapT !== It) && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), s1.texParameteri(C, s1.TEXTURE_MAG_FILTER, T(S.magFilter)), s1.texParameteri(C, s1.TEXTURE_MIN_FILTER, T(S.minFilter)), S.minFilter !== pt && S.minFilter !== mt && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), S.compareFunction && (s1.texParameteri(C, s1.TEXTURE_COMPARE_MODE, s1.COMPARE_REF_TO_TEXTURE), s1.texParameteri(C, s1.TEXTURE_COMPARE_FUNC, we[S.compareFunction])), e.has("EXT_texture_filter_anisotropic") === !0) {
            let ee = e.get("EXT_texture_filter_anisotropic");
            if (S.magFilter === pt || S.minFilter !== Lr && S.minFilter !== li || S.type === xn && e.has("OES_texture_float_linear") === !1 || o === !1 && S.type === Ts && e.has("OES_texture_half_float_linear") === !1) return;
            (S.anisotropy > 1 || n.get(S).__currentAnisotropy) && (s1.texParameterf(C, ee.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(S.anisotropy, i.getMaxAnisotropy())), n.get(S).__currentAnisotropy = S.anisotropy);
        }
    }
    function Te(C, S) {
        let B = !1;
        C.__webglInit === void 0 && (C.__webglInit = !0, S.addEventListener("dispose", O));
        let ee = S.source, j = g.get(ee);
        j === void 0 && (j = {}, g.set(ee, j));
        let te = W(S);
        if (te !== C.__cacheKey) {
            j[te] === void 0 && (j[te] = {
                texture: s1.createTexture(),
                usedTimes: 0
            }, a.memory.textures++, B = !0), j[te].usedTimes++;
            let Me = j[C.__cacheKey];
            Me !== void 0 && (j[C.__cacheKey].usedTimes--, Me.usedTimes === 0 && U(S)), C.__cacheKey = te, C.__webglTexture = j[te].texture;
        }
        return B;
    }
    function Ye(C, S, B) {
        let ee = s1.TEXTURE_2D;
        (S.isDataArrayTexture || S.isCompressedArrayTexture) && (ee = s1.TEXTURE_2D_ARRAY), S.isData3DTexture && (ee = s1.TEXTURE_3D);
        let j = Te(C, S), te = S.source;
        t.bindTexture(ee, C.__webglTexture, s1.TEXTURE0 + B);
        let Me = n.get(te);
        if (te.version !== Me.__version || j === !0) {
            t.activeTexture(s1.TEXTURE0 + B);
            let re = Qe.getPrimaries(Qe.workingColorSpace), de = S.colorSpace === Xt ? null : Qe.getPrimaries(S.colorSpace), Le = S.colorSpace === Xt || re === de ? s1.NONE : s1.BROWSER_DEFAULT_WEBGL;
            s1.pixelStorei(s1.UNPACK_FLIP_Y_WEBGL, S.flipY), s1.pixelStorei(s1.UNPACK_PREMULTIPLY_ALPHA_WEBGL, S.premultiplyAlpha), s1.pixelStorei(s1.UNPACK_ALIGNMENT, S.unpackAlignment), s1.pixelStorei(s1.UNPACK_COLORSPACE_CONVERSION_WEBGL, Le);
            let Ze = b(S) && y(S.image) === !1, se = x(S.image, Ze, !1, h);
            se = rt(S, se);
            let $e = y(se) || o, Oe = r.convert(S.format, S.colorSpace), Ie = r.convert(S.type), Re = I(S.internalFormat, Oe, Ie, S.colorSpace, S.isVideoTexture);
            Ee(ee, S, $e);
            let P, ce = S.mipmaps, ae = o && S.isVideoTexture !== !0, ge = Me.__version === void 0 || j === !0, ue = M(S, se, $e);
            if (S.isDepthTexture) Re = s1.DEPTH_COMPONENT, o ? S.type === xn ? Re = s1.DEPTH_COMPONENT32F : S.type === Ln ? Re = s1.DEPTH_COMPONENT24 : S.type === ii ? Re = s1.DEPTH24_STENCIL8 : Re = s1.DEPTH_COMPONENT16 : S.type === xn && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), S.format === si && Re === s1.DEPTH_COMPONENT && S.type !== Wc && S.type !== Ln && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), S.type = Ln, Ie = r.convert(S.type)), S.format === Yi && Re === s1.DEPTH_COMPONENT && (Re = s1.DEPTH_STENCIL, S.type !== ii && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), S.type = ii, Ie = r.convert(S.type))), ge && (ae ? t.texStorage2D(s1.TEXTURE_2D, 1, Re, se.width, se.height) : t.texImage2D(s1.TEXTURE_2D, 0, Re, se.width, se.height, 0, Oe, Ie, null));
            else if (S.isDataTexture) if (ce.length > 0 && $e) {
                ae && ge && t.texStorage2D(s1.TEXTURE_2D, ue, Re, ce[0].width, ce[0].height);
                for(let Q = 0, be = ce.length; Q < be; Q++)P = ce[Q], ae ? t.texSubImage2D(s1.TEXTURE_2D, Q, 0, 0, P.width, P.height, Oe, Ie, P.data) : t.texImage2D(s1.TEXTURE_2D, Q, Re, P.width, P.height, 0, Oe, Ie, P.data);
                S.generateMipmaps = !1;
            } else ae ? (ge && t.texStorage2D(s1.TEXTURE_2D, ue, Re, se.width, se.height), t.texSubImage2D(s1.TEXTURE_2D, 0, 0, 0, se.width, se.height, Oe, Ie, se.data)) : t.texImage2D(s1.TEXTURE_2D, 0, Re, se.width, se.height, 0, Oe, Ie, se.data);
            else if (S.isCompressedTexture) if (S.isCompressedArrayTexture) {
                ae && ge && t.texStorage3D(s1.TEXTURE_2D_ARRAY, ue, Re, ce[0].width, ce[0].height, se.depth);
                for(let Q = 0, be = ce.length; Q < be; Q++)P = ce[Q], S.format !== Wt ? Oe !== null ? ae ? t.compressedTexSubImage3D(s1.TEXTURE_2D_ARRAY, Q, 0, 0, 0, P.width, P.height, se.depth, Oe, P.data, 0, 0) : t.compressedTexImage3D(s1.TEXTURE_2D_ARRAY, Q, Re, P.width, P.height, se.depth, 0, P.data, 0, 0) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : ae ? t.texSubImage3D(s1.TEXTURE_2D_ARRAY, Q, 0, 0, 0, P.width, P.height, se.depth, Oe, Ie, P.data) : t.texImage3D(s1.TEXTURE_2D_ARRAY, Q, Re, P.width, P.height, se.depth, 0, Oe, Ie, P.data);
            } else {
                ae && ge && t.texStorage2D(s1.TEXTURE_2D, ue, Re, ce[0].width, ce[0].height);
                for(let Q = 0, be = ce.length; Q < be; Q++)P = ce[Q], S.format !== Wt ? Oe !== null ? ae ? t.compressedTexSubImage2D(s1.TEXTURE_2D, Q, 0, 0, P.width, P.height, Oe, P.data) : t.compressedTexImage2D(s1.TEXTURE_2D, Q, Re, P.width, P.height, 0, P.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : ae ? t.texSubImage2D(s1.TEXTURE_2D, Q, 0, 0, P.width, P.height, Oe, Ie, P.data) : t.texImage2D(s1.TEXTURE_2D, Q, Re, P.width, P.height, 0, Oe, Ie, P.data);
            }
            else if (S.isDataArrayTexture) ae ? (ge && t.texStorage3D(s1.TEXTURE_2D_ARRAY, ue, Re, se.width, se.height, se.depth), t.texSubImage3D(s1.TEXTURE_2D_ARRAY, 0, 0, 0, 0, se.width, se.height, se.depth, Oe, Ie, se.data)) : t.texImage3D(s1.TEXTURE_2D_ARRAY, 0, Re, se.width, se.height, se.depth, 0, Oe, Ie, se.data);
            else if (S.isData3DTexture) ae ? (ge && t.texStorage3D(s1.TEXTURE_3D, ue, Re, se.width, se.height, se.depth), t.texSubImage3D(s1.TEXTURE_3D, 0, 0, 0, 0, se.width, se.height, se.depth, Oe, Ie, se.data)) : t.texImage3D(s1.TEXTURE_3D, 0, Re, se.width, se.height, se.depth, 0, Oe, Ie, se.data);
            else if (S.isFramebufferTexture) {
                if (ge) if (ae) t.texStorage2D(s1.TEXTURE_2D, ue, Re, se.width, se.height);
                else {
                    let Q = se.width, be = se.height;
                    for(let Fe = 0; Fe < ue; Fe++)t.texImage2D(s1.TEXTURE_2D, Fe, Re, Q, be, 0, Oe, Ie, null), Q >>= 1, be >>= 1;
                }
            } else if (ce.length > 0 && $e) {
                ae && ge && t.texStorage2D(s1.TEXTURE_2D, ue, Re, ce[0].width, ce[0].height);
                for(let Q = 0, be = ce.length; Q < be; Q++)P = ce[Q], ae ? t.texSubImage2D(s1.TEXTURE_2D, Q, 0, 0, Oe, Ie, P) : t.texImage2D(s1.TEXTURE_2D, Q, Re, Oe, Ie, P);
                S.generateMipmaps = !1;
            } else ae ? (ge && t.texStorage2D(s1.TEXTURE_2D, ue, Re, se.width, se.height), t.texSubImage2D(s1.TEXTURE_2D, 0, 0, 0, Oe, Ie, se)) : t.texImage2D(s1.TEXTURE_2D, 0, Re, Oe, Ie, se);
            w(S, $e) && R(ee), Me.__version = te.version, S.onUpdate && S.onUpdate(S);
        }
        C.__version = S.version;
    }
    function it(C, S, B) {
        if (S.image.length !== 6) return;
        let ee = Te(C, S), j = S.source;
        t.bindTexture(s1.TEXTURE_CUBE_MAP, C.__webglTexture, s1.TEXTURE0 + B);
        let te = n.get(j);
        if (j.version !== te.__version || ee === !0) {
            t.activeTexture(s1.TEXTURE0 + B);
            let Me = Qe.getPrimaries(Qe.workingColorSpace), re = S.colorSpace === Xt ? null : Qe.getPrimaries(S.colorSpace), de = S.colorSpace === Xt || Me === re ? s1.NONE : s1.BROWSER_DEFAULT_WEBGL;
            s1.pixelStorei(s1.UNPACK_FLIP_Y_WEBGL, S.flipY), s1.pixelStorei(s1.UNPACK_PREMULTIPLY_ALPHA_WEBGL, S.premultiplyAlpha), s1.pixelStorei(s1.UNPACK_ALIGNMENT, S.unpackAlignment), s1.pixelStorei(s1.UNPACK_COLORSPACE_CONVERSION_WEBGL, de);
            let Le = S.isCompressedTexture || S.image[0].isCompressedTexture, Ze = S.image[0] && S.image[0].isDataTexture, se = [];
            for(let Q = 0; Q < 6; Q++)!Le && !Ze ? se[Q] = x(S.image[Q], !1, !0, l) : se[Q] = Ze ? S.image[Q].image : S.image[Q], se[Q] = rt(S, se[Q]);
            let $e = se[0], Oe = y($e) || o, Ie = r.convert(S.format, S.colorSpace), Re = r.convert(S.type), P = I(S.internalFormat, Ie, Re, S.colorSpace), ce = o && S.isVideoTexture !== !0, ae = te.__version === void 0 || ee === !0, ge = M(S, $e, Oe);
            Ee(s1.TEXTURE_CUBE_MAP, S, Oe);
            let ue;
            if (Le) {
                ce && ae && t.texStorage2D(s1.TEXTURE_CUBE_MAP, ge, P, $e.width, $e.height);
                for(let Q = 0; Q < 6; Q++){
                    ue = se[Q].mipmaps;
                    for(let be = 0; be < ue.length; be++){
                        let Fe = ue[be];
                        S.format !== Wt ? Ie !== null ? ce ? t.compressedTexSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be, 0, 0, Fe.width, Fe.height, Ie, Fe.data) : t.compressedTexImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be, P, Fe.width, Fe.height, 0, Fe.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : ce ? t.texSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be, 0, 0, Fe.width, Fe.height, Ie, Re, Fe.data) : t.texImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be, P, Fe.width, Fe.height, 0, Ie, Re, Fe.data);
                    }
                }
            } else {
                ue = S.mipmaps, ce && ae && (ue.length > 0 && ge++, t.texStorage2D(s1.TEXTURE_CUBE_MAP, ge, P, se[0].width, se[0].height));
                for(let Q = 0; Q < 6; Q++)if (Ze) {
                    ce ? t.texSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, 0, 0, 0, se[Q].width, se[Q].height, Ie, Re, se[Q].data) : t.texImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, 0, P, se[Q].width, se[Q].height, 0, Ie, Re, se[Q].data);
                    for(let be = 0; be < ue.length; be++){
                        let At = ue[be].image[Q].image;
                        ce ? t.texSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be + 1, 0, 0, At.width, At.height, Ie, Re, At.data) : t.texImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be + 1, P, At.width, At.height, 0, Ie, Re, At.data);
                    }
                } else {
                    ce ? t.texSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, 0, 0, 0, Ie, Re, se[Q]) : t.texImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, 0, P, Ie, Re, se[Q]);
                    for(let be = 0; be < ue.length; be++){
                        let Fe = ue[be];
                        ce ? t.texSubImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be + 1, 0, 0, Ie, Re, Fe.image[Q]) : t.texImage2D(s1.TEXTURE_CUBE_MAP_POSITIVE_X + Q, be + 1, P, Ie, Re, Fe.image[Q]);
                    }
                }
            }
            w(S, Oe) && R(s1.TEXTURE_CUBE_MAP), te.__version = j.version, S.onUpdate && S.onUpdate(S);
        }
        C.__version = S.version;
    }
    function Ce(C, S, B, ee, j, te) {
        let Me = r.convert(B.format, B.colorSpace), re = r.convert(B.type), de = I(B.internalFormat, Me, re, B.colorSpace);
        if (!n.get(S).__hasExternalTextures) {
            let Ze = Math.max(1, S.width >> te), se = Math.max(1, S.height >> te);
            j === s1.TEXTURE_3D || j === s1.TEXTURE_2D_ARRAY ? t.texImage3D(j, te, de, Ze, se, S.depth, 0, Me, re, null) : t.texImage2D(j, te, de, Ze, se, 0, Me, re, null);
        }
        t.bindFramebuffer(s1.FRAMEBUFFER, C), Ne(S) ? d.framebufferTexture2DMultisampleEXT(s1.FRAMEBUFFER, ee, j, n.get(B).__webglTexture, 0, ye(S)) : (j === s1.TEXTURE_2D || j >= s1.TEXTURE_CUBE_MAP_POSITIVE_X && j <= s1.TEXTURE_CUBE_MAP_NEGATIVE_Z) && s1.framebufferTexture2D(s1.FRAMEBUFFER, ee, j, n.get(B).__webglTexture, te), t.bindFramebuffer(s1.FRAMEBUFFER, null);
    }
    function L(C, S, B) {
        if (s1.bindRenderbuffer(s1.RENDERBUFFER, C), S.depthBuffer && !S.stencilBuffer) {
            let ee = o === !0 ? s1.DEPTH_COMPONENT24 : s1.DEPTH_COMPONENT16;
            if (B || Ne(S)) {
                let j = S.depthTexture;
                j && j.isDepthTexture && (j.type === xn ? ee = s1.DEPTH_COMPONENT32F : j.type === Ln && (ee = s1.DEPTH_COMPONENT24));
                let te = ye(S);
                Ne(S) ? d.renderbufferStorageMultisampleEXT(s1.RENDERBUFFER, te, ee, S.width, S.height) : s1.renderbufferStorageMultisample(s1.RENDERBUFFER, te, ee, S.width, S.height);
            } else s1.renderbufferStorage(s1.RENDERBUFFER, ee, S.width, S.height);
            s1.framebufferRenderbuffer(s1.FRAMEBUFFER, s1.DEPTH_ATTACHMENT, s1.RENDERBUFFER, C);
        } else if (S.depthBuffer && S.stencilBuffer) {
            let ee = ye(S);
            B && Ne(S) === !1 ? s1.renderbufferStorageMultisample(s1.RENDERBUFFER, ee, s1.DEPTH24_STENCIL8, S.width, S.height) : Ne(S) ? d.renderbufferStorageMultisampleEXT(s1.RENDERBUFFER, ee, s1.DEPTH24_STENCIL8, S.width, S.height) : s1.renderbufferStorage(s1.RENDERBUFFER, s1.DEPTH_STENCIL, S.width, S.height), s1.framebufferRenderbuffer(s1.FRAMEBUFFER, s1.DEPTH_STENCIL_ATTACHMENT, s1.RENDERBUFFER, C);
        } else {
            let ee = S.isWebGLMultipleRenderTargets === !0 ? S.texture : [
                S.texture
            ];
            for(let j = 0; j < ee.length; j++){
                let te = ee[j], Me = r.convert(te.format, te.colorSpace), re = r.convert(te.type), de = I(te.internalFormat, Me, re, te.colorSpace), Le = ye(S);
                B && Ne(S) === !1 ? s1.renderbufferStorageMultisample(s1.RENDERBUFFER, Le, de, S.width, S.height) : Ne(S) ? d.renderbufferStorageMultisampleEXT(s1.RENDERBUFFER, Le, de, S.width, S.height) : s1.renderbufferStorage(s1.RENDERBUFFER, de, S.width, S.height);
            }
        }
        s1.bindRenderbuffer(s1.RENDERBUFFER, null);
    }
    function oe(C, S) {
        if (S && S.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
        if (t.bindFramebuffer(s1.FRAMEBUFFER, C), !(S.depthTexture && S.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
        (!n.get(S.depthTexture).__webglTexture || S.depthTexture.image.width !== S.width || S.depthTexture.image.height !== S.height) && (S.depthTexture.image.width = S.width, S.depthTexture.image.height = S.height, S.depthTexture.needsUpdate = !0), K(S.depthTexture, 0);
        let ee = n.get(S.depthTexture).__webglTexture, j = ye(S);
        if (S.depthTexture.format === si) Ne(S) ? d.framebufferTexture2DMultisampleEXT(s1.FRAMEBUFFER, s1.DEPTH_ATTACHMENT, s1.TEXTURE_2D, ee, 0, j) : s1.framebufferTexture2D(s1.FRAMEBUFFER, s1.DEPTH_ATTACHMENT, s1.TEXTURE_2D, ee, 0);
        else if (S.depthTexture.format === Yi) Ne(S) ? d.framebufferTexture2DMultisampleEXT(s1.FRAMEBUFFER, s1.DEPTH_STENCIL_ATTACHMENT, s1.TEXTURE_2D, ee, 0, j) : s1.framebufferTexture2D(s1.FRAMEBUFFER, s1.DEPTH_STENCIL_ATTACHMENT, s1.TEXTURE_2D, ee, 0);
        else throw new Error("Unknown depthTexture format");
    }
    function X(C) {
        let S = n.get(C), B = C.isWebGLCubeRenderTarget === !0;
        if (C.depthTexture && !S.__autoAllocateDepthBuffer) {
            if (B) throw new Error("target.depthTexture not supported in Cube render targets");
            oe(S.__webglFramebuffer, C);
        } else if (B) {
            S.__webglDepthbuffer = [];
            for(let ee = 0; ee < 6; ee++)t.bindFramebuffer(s1.FRAMEBUFFER, S.__webglFramebuffer[ee]), S.__webglDepthbuffer[ee] = s1.createRenderbuffer(), L(S.__webglDepthbuffer[ee], C, !1);
        } else t.bindFramebuffer(s1.FRAMEBUFFER, S.__webglFramebuffer), S.__webglDepthbuffer = s1.createRenderbuffer(), L(S.__webglDepthbuffer, C, !1);
        t.bindFramebuffer(s1.FRAMEBUFFER, null);
    }
    function ie(C, S, B) {
        let ee = n.get(C);
        S !== void 0 && Ce(ee.__webglFramebuffer, C, C.texture, s1.COLOR_ATTACHMENT0, s1.TEXTURE_2D, 0), B !== void 0 && X(C);
    }
    function J(C) {
        let S = C.texture, B = n.get(C), ee = n.get(S);
        C.addEventListener("dispose", Y), C.isWebGLMultipleRenderTargets !== !0 && (ee.__webglTexture === void 0 && (ee.__webglTexture = s1.createTexture()), ee.__version = S.version, a.memory.textures++);
        let j = C.isWebGLCubeRenderTarget === !0, te = C.isWebGLMultipleRenderTargets === !0, Me = y(C) || o;
        if (j) {
            B.__webglFramebuffer = [];
            for(let re = 0; re < 6; re++)if (o && S.mipmaps && S.mipmaps.length > 0) {
                B.__webglFramebuffer[re] = [];
                for(let de = 0; de < S.mipmaps.length; de++)B.__webglFramebuffer[re][de] = s1.createFramebuffer();
            } else B.__webglFramebuffer[re] = s1.createFramebuffer();
        } else {
            if (o && S.mipmaps && S.mipmaps.length > 0) {
                B.__webglFramebuffer = [];
                for(let re = 0; re < S.mipmaps.length; re++)B.__webglFramebuffer[re] = s1.createFramebuffer();
            } else B.__webglFramebuffer = s1.createFramebuffer();
            if (te) if (i.drawBuffers) {
                let re = C.texture;
                for(let de = 0, Le = re.length; de < Le; de++){
                    let Ze = n.get(re[de]);
                    Ze.__webglTexture === void 0 && (Ze.__webglTexture = s1.createTexture(), a.memory.textures++);
                }
            } else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
            if (o && C.samples > 0 && Ne(C) === !1) {
                let re = te ? S : [
                    S
                ];
                B.__webglMultisampledFramebuffer = s1.createFramebuffer(), B.__webglColorRenderbuffer = [], t.bindFramebuffer(s1.FRAMEBUFFER, B.__webglMultisampledFramebuffer);
                for(let de = 0; de < re.length; de++){
                    let Le = re[de];
                    B.__webglColorRenderbuffer[de] = s1.createRenderbuffer(), s1.bindRenderbuffer(s1.RENDERBUFFER, B.__webglColorRenderbuffer[de]);
                    let Ze = r.convert(Le.format, Le.colorSpace), se = r.convert(Le.type), $e = I(Le.internalFormat, Ze, se, Le.colorSpace, C.isXRRenderTarget === !0), Oe = ye(C);
                    s1.renderbufferStorageMultisample(s1.RENDERBUFFER, Oe, $e, C.width, C.height), s1.framebufferRenderbuffer(s1.FRAMEBUFFER, s1.COLOR_ATTACHMENT0 + de, s1.RENDERBUFFER, B.__webglColorRenderbuffer[de]);
                }
                s1.bindRenderbuffer(s1.RENDERBUFFER, null), C.depthBuffer && (B.__webglDepthRenderbuffer = s1.createRenderbuffer(), L(B.__webglDepthRenderbuffer, C, !0)), t.bindFramebuffer(s1.FRAMEBUFFER, null);
            }
        }
        if (j) {
            t.bindTexture(s1.TEXTURE_CUBE_MAP, ee.__webglTexture), Ee(s1.TEXTURE_CUBE_MAP, S, Me);
            for(let re = 0; re < 6; re++)if (o && S.mipmaps && S.mipmaps.length > 0) for(let de = 0; de < S.mipmaps.length; de++)Ce(B.__webglFramebuffer[re][de], C, S, s1.COLOR_ATTACHMENT0, s1.TEXTURE_CUBE_MAP_POSITIVE_X + re, de);
            else Ce(B.__webglFramebuffer[re], C, S, s1.COLOR_ATTACHMENT0, s1.TEXTURE_CUBE_MAP_POSITIVE_X + re, 0);
            w(S, Me) && R(s1.TEXTURE_CUBE_MAP), t.unbindTexture();
        } else if (te) {
            let re = C.texture;
            for(let de = 0, Le = re.length; de < Le; de++){
                let Ze = re[de], se = n.get(Ze);
                t.bindTexture(s1.TEXTURE_2D, se.__webglTexture), Ee(s1.TEXTURE_2D, Ze, Me), Ce(B.__webglFramebuffer, C, Ze, s1.COLOR_ATTACHMENT0 + de, s1.TEXTURE_2D, 0), w(Ze, Me) && R(s1.TEXTURE_2D);
            }
            t.unbindTexture();
        } else {
            let re = s1.TEXTURE_2D;
            if ((C.isWebGL3DRenderTarget || C.isWebGLArrayRenderTarget) && (o ? re = C.isWebGL3DRenderTarget ? s1.TEXTURE_3D : s1.TEXTURE_2D_ARRAY : console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")), t.bindTexture(re, ee.__webglTexture), Ee(re, S, Me), o && S.mipmaps && S.mipmaps.length > 0) for(let de = 0; de < S.mipmaps.length; de++)Ce(B.__webglFramebuffer[de], C, S, s1.COLOR_ATTACHMENT0, re, de);
            else Ce(B.__webglFramebuffer, C, S, s1.COLOR_ATTACHMENT0, re, 0);
            w(S, Me) && R(re), t.unbindTexture();
        }
        C.depthBuffer && X(C);
    }
    function Se(C) {
        let S = y(C) || o, B = C.isWebGLMultipleRenderTargets === !0 ? C.texture : [
            C.texture
        ];
        for(let ee = 0, j = B.length; ee < j; ee++){
            let te = B[ee];
            if (w(te, S)) {
                let Me = C.isWebGLCubeRenderTarget ? s1.TEXTURE_CUBE_MAP : s1.TEXTURE_2D, re = n.get(te).__webglTexture;
                t.bindTexture(Me, re), R(Me), t.unbindTexture();
            }
        }
    }
    function me(C) {
        if (o && C.samples > 0 && Ne(C) === !1) {
            let S = C.isWebGLMultipleRenderTargets ? C.texture : [
                C.texture
            ], B = C.width, ee = C.height, j = s1.COLOR_BUFFER_BIT, te = [], Me = C.stencilBuffer ? s1.DEPTH_STENCIL_ATTACHMENT : s1.DEPTH_ATTACHMENT, re = n.get(C), de = C.isWebGLMultipleRenderTargets === !0;
            if (de) for(let Le = 0; Le < S.length; Le++)t.bindFramebuffer(s1.FRAMEBUFFER, re.__webglMultisampledFramebuffer), s1.framebufferRenderbuffer(s1.FRAMEBUFFER, s1.COLOR_ATTACHMENT0 + Le, s1.RENDERBUFFER, null), t.bindFramebuffer(s1.FRAMEBUFFER, re.__webglFramebuffer), s1.framebufferTexture2D(s1.DRAW_FRAMEBUFFER, s1.COLOR_ATTACHMENT0 + Le, s1.TEXTURE_2D, null, 0);
            t.bindFramebuffer(s1.READ_FRAMEBUFFER, re.__webglMultisampledFramebuffer), t.bindFramebuffer(s1.DRAW_FRAMEBUFFER, re.__webglFramebuffer);
            for(let Le = 0; Le < S.length; Le++){
                te.push(s1.COLOR_ATTACHMENT0 + Le), C.depthBuffer && te.push(Me);
                let Ze = re.__ignoreDepthValues !== void 0 ? re.__ignoreDepthValues : !1;
                if (Ze === !1 && (C.depthBuffer && (j |= s1.DEPTH_BUFFER_BIT), C.stencilBuffer && (j |= s1.STENCIL_BUFFER_BIT)), de && s1.framebufferRenderbuffer(s1.READ_FRAMEBUFFER, s1.COLOR_ATTACHMENT0, s1.RENDERBUFFER, re.__webglColorRenderbuffer[Le]), Ze === !0 && (s1.invalidateFramebuffer(s1.READ_FRAMEBUFFER, [
                    Me
                ]), s1.invalidateFramebuffer(s1.DRAW_FRAMEBUFFER, [
                    Me
                ])), de) {
                    let se = n.get(S[Le]).__webglTexture;
                    s1.framebufferTexture2D(s1.DRAW_FRAMEBUFFER, s1.COLOR_ATTACHMENT0, s1.TEXTURE_2D, se, 0);
                }
                s1.blitFramebuffer(0, 0, B, ee, 0, 0, B, ee, j, s1.NEAREST), f && s1.invalidateFramebuffer(s1.READ_FRAMEBUFFER, te);
            }
            if (t.bindFramebuffer(s1.READ_FRAMEBUFFER, null), t.bindFramebuffer(s1.DRAW_FRAMEBUFFER, null), de) for(let Le = 0; Le < S.length; Le++){
                t.bindFramebuffer(s1.FRAMEBUFFER, re.__webglMultisampledFramebuffer), s1.framebufferRenderbuffer(s1.FRAMEBUFFER, s1.COLOR_ATTACHMENT0 + Le, s1.RENDERBUFFER, re.__webglColorRenderbuffer[Le]);
                let Ze = n.get(S[Le]).__webglTexture;
                t.bindFramebuffer(s1.FRAMEBUFFER, re.__webglFramebuffer), s1.framebufferTexture2D(s1.DRAW_FRAMEBUFFER, s1.COLOR_ATTACHMENT0 + Le, s1.TEXTURE_2D, Ze, 0);
            }
            t.bindFramebuffer(s1.DRAW_FRAMEBUFFER, re.__webglMultisampledFramebuffer);
        }
    }
    function ye(C) {
        return Math.min(u, C.samples);
    }
    function Ne(C) {
        let S = n.get(C);
        return o && C.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && S.__useRenderToTexture !== !1;
    }
    function qe(C) {
        let S = a.render.frame;
        m.get(C) !== S && (m.set(C, S), C.update());
    }
    function rt(C, S) {
        let B = C.colorSpace, ee = C.format, j = C.type;
        return C.isCompressedTexture === !0 || C.isVideoTexture === !0 || C.format === po || B !== Mn && B !== Xt && (Qe.getTransfer(B) === nt ? o === !1 ? e.has("EXT_sRGB") === !0 && ee === Wt ? (C.format = po, C.minFilter = mt, C.generateMipmaps = !1) : S = Xr.sRGBToLinear(S) : (ee !== Wt || j !== On) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", B)), S;
    }
    this.allocateTextureUnit = ne, this.resetTextureUnits = H, this.setTexture2D = K, this.setTexture2DArray = D, this.setTexture3D = G, this.setTextureCube = he, this.rebindTextures = ie, this.setupRenderTarget = J, this.updateRenderTargetMipmap = Se, this.updateMultisampleRenderTarget = me, this.setupDepthRenderbuffer = X, this.setupFrameBufferTexture = Ce, this.useMultisampledRTT = Ne;
}
function V0(s1, e, t) {
    let n = t.isWebGL2;
    function i(r, a = Xt) {
        let o, c = Qe.getTransfer(a);
        if (r === On) return s1.UNSIGNED_BYTE;
        if (r === fd) return s1.UNSIGNED_SHORT_4_4_4_4;
        if (r === pd) return s1.UNSIGNED_SHORT_5_5_5_1;
        if (r === _f) return s1.BYTE;
        if (r === xf) return s1.SHORT;
        if (r === Wc) return s1.UNSIGNED_SHORT;
        if (r === dd) return s1.INT;
        if (r === Ln) return s1.UNSIGNED_INT;
        if (r === xn) return s1.FLOAT;
        if (r === Ts) return n ? s1.HALF_FLOAT : (o = e.get("OES_texture_half_float"), o !== null ? o.HALF_FLOAT_OES : null);
        if (r === vf) return s1.ALPHA;
        if (r === Wt) return s1.RGBA;
        if (r === yf) return s1.LUMINANCE;
        if (r === Mf) return s1.LUMINANCE_ALPHA;
        if (r === si) return s1.DEPTH_COMPONENT;
        if (r === Yi) return s1.DEPTH_STENCIL;
        if (r === po) return o = e.get("EXT_sRGB"), o !== null ? o.SRGB_ALPHA_EXT : null;
        if (r === Sf) return s1.RED;
        if (r === md) return s1.RED_INTEGER;
        if (r === bf) return s1.RG;
        if (r === gd) return s1.RG_INTEGER;
        if (r === _d) return s1.RGBA_INTEGER;
        if (r === wa || r === Aa || r === Ra || r === Ca) if (c === nt) if (o = e.get("WEBGL_compressed_texture_s3tc_srgb"), o !== null) {
            if (r === wa) return o.COMPRESSED_SRGB_S3TC_DXT1_EXT;
            if (r === Aa) return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
            if (r === Ra) return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
            if (r === Ca) return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else return null;
        else if (o = e.get("WEBGL_compressed_texture_s3tc"), o !== null) {
            if (r === wa) return o.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (r === Aa) return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (r === Ra) return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (r === Ca) return o.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else return null;
        if (r === ul || r === dl || r === fl || r === pl) if (o = e.get("WEBGL_compressed_texture_pvrtc"), o !== null) {
            if (r === ul) return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
            if (r === dl) return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
            if (r === fl) return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
            if (r === pl) return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        } else return null;
        if (r === Ef) return o = e.get("WEBGL_compressed_texture_etc1"), o !== null ? o.COMPRESSED_RGB_ETC1_WEBGL : null;
        if (r === ml || r === gl) if (o = e.get("WEBGL_compressed_texture_etc"), o !== null) {
            if (r === ml) return c === nt ? o.COMPRESSED_SRGB8_ETC2 : o.COMPRESSED_RGB8_ETC2;
            if (r === gl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : o.COMPRESSED_RGBA8_ETC2_EAC;
        } else return null;
        if (r === _l || r === xl || r === vl || r === yl || r === Ml || r === Sl || r === bl || r === El || r === Tl || r === wl || r === Al || r === Rl || r === Cl || r === Pl) if (o = e.get("WEBGL_compressed_texture_astc"), o !== null) {
            if (r === _l) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : o.COMPRESSED_RGBA_ASTC_4x4_KHR;
            if (r === xl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : o.COMPRESSED_RGBA_ASTC_5x4_KHR;
            if (r === vl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : o.COMPRESSED_RGBA_ASTC_5x5_KHR;
            if (r === yl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : o.COMPRESSED_RGBA_ASTC_6x5_KHR;
            if (r === Ml) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : o.COMPRESSED_RGBA_ASTC_6x6_KHR;
            if (r === Sl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : o.COMPRESSED_RGBA_ASTC_8x5_KHR;
            if (r === bl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : o.COMPRESSED_RGBA_ASTC_8x6_KHR;
            if (r === El) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : o.COMPRESSED_RGBA_ASTC_8x8_KHR;
            if (r === Tl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : o.COMPRESSED_RGBA_ASTC_10x5_KHR;
            if (r === wl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : o.COMPRESSED_RGBA_ASTC_10x6_KHR;
            if (r === Al) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : o.COMPRESSED_RGBA_ASTC_10x8_KHR;
            if (r === Rl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : o.COMPRESSED_RGBA_ASTC_10x10_KHR;
            if (r === Cl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : o.COMPRESSED_RGBA_ASTC_12x10_KHR;
            if (r === Pl) return c === nt ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : o.COMPRESSED_RGBA_ASTC_12x12_KHR;
        } else return null;
        if (r === Pa || r === Ll || r === Il) if (o = e.get("EXT_texture_compression_bptc"), o !== null) {
            if (r === Pa) return c === nt ? o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : o.COMPRESSED_RGBA_BPTC_UNORM_EXT;
            if (r === Ll) return o.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
            if (r === Il) return o.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
        } else return null;
        if (r === Tf || r === Ul || r === Dl || r === Nl) if (o = e.get("EXT_texture_compression_rgtc"), o !== null) {
            if (r === Pa) return o.COMPRESSED_RED_RGTC1_EXT;
            if (r === Ul) return o.COMPRESSED_SIGNED_RED_RGTC1_EXT;
            if (r === Dl) return o.COMPRESSED_RED_GREEN_RGTC2_EXT;
            if (r === Nl) return o.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
        } else return null;
        return r === ii ? n ? s1.UNSIGNED_INT_24_8 : (o = e.get("WEBGL_depth_texture"), o !== null ? o.UNSIGNED_INT_24_8_WEBGL : null) : s1[r] !== void 0 ? s1[r] : null;
    }
    return {
        convert: i
    };
}
var To = class extends yt {
    constructor(e = []){
        super(), this.isArrayCamera = !0, this.cameras = e;
    }
}, ti = class extends Je {
    constructor(){
        super(), this.isGroup = !0, this.type = "Group";
    }
}, k0 = {
    type: "move"
}, Ss = class {
    constructor(){
        this._targetRay = null, this._grip = null, this._hand = null;
    }
    getHandSpace() {
        return this._hand === null && (this._hand = new ti, this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = {
            pinching: !1
        }), this._hand;
    }
    getTargetRaySpace() {
        return this._targetRay === null && (this._targetRay = new ti, this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new A, this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new A), this._targetRay;
    }
    getGripSpace() {
        return this._grip === null && (this._grip = new ti, this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new A, this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new A), this._grip;
    }
    dispatchEvent(e) {
        return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
    }
    connect(e) {
        if (e && e.hand) {
            let t = this._hand;
            if (t) for (let n of e.hand.values())this._getHandJoint(t, n);
        }
        return this.dispatchEvent({
            type: "connected",
            data: e
        }), this;
    }
    disconnect(e) {
        return this.dispatchEvent({
            type: "disconnected",
            data: e
        }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
    }
    update(e, t, n) {
        let i = null, r = null, a = null, o = this._targetRay, c = this._grip, l = this._hand;
        if (e && t.session.visibilityState !== "visible-blurred") {
            if (l && e.hand) {
                a = !0;
                for (let _ of e.hand.values()){
                    let g = t.getJointPose(_, n), p = this._getHandJoint(l, _);
                    g !== null && (p.matrix.fromArray(g.transform.matrix), p.matrix.decompose(p.position, p.rotation, p.scale), p.matrixWorldNeedsUpdate = !0, p.jointRadius = g.radius), p.visible = g !== null;
                }
                let h = l.joints["index-finger-tip"], u = l.joints["thumb-tip"], d = h.position.distanceTo(u.position), f = .02, m = .005;
                l.inputState.pinching && d > f + m ? (l.inputState.pinching = !1, this.dispatchEvent({
                    type: "pinchend",
                    handedness: e.handedness,
                    target: this
                })) : !l.inputState.pinching && d <= f - m && (l.inputState.pinching = !0, this.dispatchEvent({
                    type: "pinchstart",
                    handedness: e.handedness,
                    target: this
                }));
            } else c !== null && e.gripSpace && (r = t.getPose(e.gripSpace, n), r !== null && (c.matrix.fromArray(r.transform.matrix), c.matrix.decompose(c.position, c.rotation, c.scale), c.matrixWorldNeedsUpdate = !0, r.linearVelocity ? (c.hasLinearVelocity = !0, c.linearVelocity.copy(r.linearVelocity)) : c.hasLinearVelocity = !1, r.angularVelocity ? (c.hasAngularVelocity = !0, c.angularVelocity.copy(r.angularVelocity)) : c.hasAngularVelocity = !1));
            o !== null && (i = t.getPose(e.targetRaySpace, n), i === null && r !== null && (i = r), i !== null && (o.matrix.fromArray(i.transform.matrix), o.matrix.decompose(o.position, o.rotation, o.scale), o.matrixWorldNeedsUpdate = !0, i.linearVelocity ? (o.hasLinearVelocity = !0, o.linearVelocity.copy(i.linearVelocity)) : o.hasLinearVelocity = !1, i.angularVelocity ? (o.hasAngularVelocity = !0, o.angularVelocity.copy(i.angularVelocity)) : o.hasAngularVelocity = !1, this.dispatchEvent(k0)));
        }
        return o !== null && (o.visible = i !== null), c !== null && (c.visible = r !== null), l !== null && (l.visible = a !== null), this;
    }
    _getHandJoint(e, t) {
        if (e.joints[t.jointName] === void 0) {
            let n = new ti;
            n.matrixAutoUpdate = !1, n.visible = !1, e.joints[t.jointName] = n, e.add(n);
        }
        return e.joints[t.jointName];
    }
}, wo = class extends St {
    constructor(e, t, n, i, r, a, o, c, l, h){
        if (h = h !== void 0 ? h : si, h !== si && h !== Yi) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        n === void 0 && h === si && (n = Ln), n === void 0 && h === Yi && (n = ii), super(null, i, r, a, o, c, h, n, l), this.isDepthTexture = !0, this.image = {
            width: e,
            height: t
        }, this.magFilter = o !== void 0 ? o : pt, this.minFilter = c !== void 0 ? c : pt, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null;
    }
    copy(e) {
        return super.copy(e), this.compareFunction = e.compareFunction, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
    }
}, Ao = class extends sn {
    constructor(e, t){
        super();
        let n = this, i = null, r = 1, a = null, o = "local-floor", c = 1, l = null, h = null, u = null, d = null, f = null, m = null, _ = t.getContextAttributes(), g = null, p = null, v = [], x = [], y = new yt;
        y.layers.enable(1), y.viewport = new je;
        let b = new yt;
        b.layers.enable(2), b.viewport = new je;
        let w = [
            y,
            b
        ], R = new To;
        R.layers.enable(1), R.layers.enable(2);
        let I = null, M = null;
        this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(D) {
            let G = v[D];
            return G === void 0 && (G = new Ss, v[D] = G), G.getTargetRaySpace();
        }, this.getControllerGrip = function(D) {
            let G = v[D];
            return G === void 0 && (G = new Ss, v[D] = G), G.getGripSpace();
        }, this.getHand = function(D) {
            let G = v[D];
            return G === void 0 && (G = new Ss, v[D] = G), G.getHandSpace();
        };
        function T(D) {
            let G = x.indexOf(D.inputSource);
            if (G === -1) return;
            let he = v[G];
            he !== void 0 && (he.update(D.inputSource, D.frame, l || a), he.dispatchEvent({
                type: D.type,
                data: D.inputSource
            }));
        }
        function O() {
            i.removeEventListener("select", T), i.removeEventListener("selectstart", T), i.removeEventListener("selectend", T), i.removeEventListener("squeeze", T), i.removeEventListener("squeezestart", T), i.removeEventListener("squeezeend", T), i.removeEventListener("end", O), i.removeEventListener("inputsourceschange", Y);
            for(let D = 0; D < v.length; D++){
                let G = x[D];
                G !== null && (x[D] = null, v[D].disconnect(G));
            }
            I = null, M = null, e.setRenderTarget(g), f = null, d = null, u = null, i = null, p = null, K.stop(), n.isPresenting = !1, n.dispatchEvent({
                type: "sessionend"
            });
        }
        this.setFramebufferScaleFactor = function(D) {
            r = D, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
        }, this.setReferenceSpaceType = function(D) {
            o = D, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
        }, this.getReferenceSpace = function() {
            return l || a;
        }, this.setReferenceSpace = function(D) {
            l = D;
        }, this.getBaseLayer = function() {
            return d !== null ? d : f;
        }, this.getBinding = function() {
            return u;
        }, this.getFrame = function() {
            return m;
        }, this.getSession = function() {
            return i;
        }, this.setSession = async function(D) {
            if (i = D, i !== null) {
                if (g = e.getRenderTarget(), i.addEventListener("select", T), i.addEventListener("selectstart", T), i.addEventListener("selectend", T), i.addEventListener("squeeze", T), i.addEventListener("squeezestart", T), i.addEventListener("squeezeend", T), i.addEventListener("end", O), i.addEventListener("inputsourceschange", Y), _.xrCompatible !== !0 && await t.makeXRCompatible(), i.renderState.layers === void 0 || e.capabilities.isWebGL2 === !1) {
                    let G = {
                        antialias: i.renderState.layers === void 0 ? _.antialias : !0,
                        alpha: !0,
                        depth: _.depth,
                        stencil: _.stencil,
                        framebufferScaleFactor: r
                    };
                    f = new XRWebGLLayer(i, t, G), i.updateRenderState({
                        baseLayer: f
                    }), p = new qt(f.framebufferWidth, f.framebufferHeight, {
                        format: Wt,
                        type: On,
                        colorSpace: e.outputColorSpace,
                        stencilBuffer: _.stencil
                    });
                } else {
                    let G = null, he = null, fe = null;
                    _.depth && (fe = _.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24, G = _.stencil ? Yi : si, he = _.stencil ? ii : Ln);
                    let _e = {
                        colorFormat: t.RGBA8,
                        depthFormat: fe,
                        scaleFactor: r
                    };
                    u = new XRWebGLBinding(i, t), d = u.createProjectionLayer(_e), i.updateRenderState({
                        layers: [
                            d
                        ]
                    }), p = new qt(d.textureWidth, d.textureHeight, {
                        format: Wt,
                        type: On,
                        depthTexture: new wo(d.textureWidth, d.textureHeight, he, void 0, void 0, void 0, void 0, void 0, void 0, G),
                        stencilBuffer: _.stencil,
                        colorSpace: e.outputColorSpace,
                        samples: _.antialias ? 4 : 0
                    });
                    let we = e.properties.get(p);
                    we.__ignoreDepthValues = d.ignoreDepthValues;
                }
                p.isXRRenderTarget = !0, this.setFoveation(c), l = null, a = await i.requestReferenceSpace(o), K.setContext(i), K.start(), n.isPresenting = !0, n.dispatchEvent({
                    type: "sessionstart"
                });
            }
        }, this.getEnvironmentBlendMode = function() {
            if (i !== null) return i.environmentBlendMode;
        };
        function Y(D) {
            for(let G = 0; G < D.removed.length; G++){
                let he = D.removed[G], fe = x.indexOf(he);
                fe >= 0 && (x[fe] = null, v[fe].disconnect(he));
            }
            for(let G = 0; G < D.added.length; G++){
                let he = D.added[G], fe = x.indexOf(he);
                if (fe === -1) {
                    for(let we = 0; we < v.length; we++)if (we >= x.length) {
                        x.push(he), fe = we;
                        break;
                    } else if (x[we] === null) {
                        x[we] = he, fe = we;
                        break;
                    }
                    if (fe === -1) break;
                }
                let _e = v[fe];
                _e && _e.connect(he);
            }
        }
        let $ = new A, U = new A;
        function z(D, G, he) {
            $.setFromMatrixPosition(G.matrixWorld), U.setFromMatrixPosition(he.matrixWorld);
            let fe = $.distanceTo(U), _e = G.projectionMatrix.elements, we = he.projectionMatrix.elements, Ee = _e[14] / (_e[10] - 1), Te = _e[14] / (_e[10] + 1), Ye = (_e[9] + 1) / _e[5], it = (_e[9] - 1) / _e[5], Ce = (_e[8] - 1) / _e[0], L = (we[8] + 1) / we[0], oe = Ee * Ce, X = Ee * L, ie = fe / (-Ce + L), J = ie * -Ce;
            G.matrixWorld.decompose(D.position, D.quaternion, D.scale), D.translateX(J), D.translateZ(ie), D.matrixWorld.compose(D.position, D.quaternion, D.scale), D.matrixWorldInverse.copy(D.matrixWorld).invert();
            let Se = Ee + ie, me = Te + ie, ye = oe - J, Ne = X + (fe - J), qe = Ye * Te / me * Se, rt = it * Te / me * Se;
            D.projectionMatrix.makePerspective(ye, Ne, qe, rt, Se, me), D.projectionMatrixInverse.copy(D.projectionMatrix).invert();
        }
        function q(D, G) {
            G === null ? D.matrixWorld.copy(D.matrix) : D.matrixWorld.multiplyMatrices(G.matrixWorld, D.matrix), D.matrixWorldInverse.copy(D.matrixWorld).invert();
        }
        this.updateCamera = function(D) {
            if (i === null) return;
            R.near = b.near = y.near = D.near, R.far = b.far = y.far = D.far, (I !== R.near || M !== R.far) && (i.updateRenderState({
                depthNear: R.near,
                depthFar: R.far
            }), I = R.near, M = R.far);
            let G = D.parent, he = R.cameras;
            q(R, G);
            for(let fe = 0; fe < he.length; fe++)q(he[fe], G);
            he.length === 2 ? z(R, y, b) : R.projectionMatrix.copy(y.projectionMatrix), H(D, R, G);
        };
        function H(D, G, he) {
            he === null ? D.matrix.copy(G.matrixWorld) : (D.matrix.copy(he.matrixWorld), D.matrix.invert(), D.matrix.multiply(G.matrixWorld)), D.matrix.decompose(D.position, D.quaternion, D.scale), D.updateMatrixWorld(!0), D.projectionMatrix.copy(G.projectionMatrix), D.projectionMatrixInverse.copy(G.projectionMatrixInverse), D.isPerspectiveCamera && (D.fov = Zi * 2 * Math.atan(1 / D.projectionMatrix.elements[5]), D.zoom = 1);
        }
        this.getCamera = function() {
            return R;
        }, this.getFoveation = function() {
            if (!(d === null && f === null)) return c;
        }, this.setFoveation = function(D) {
            c = D, d !== null && (d.fixedFoveation = D), f !== null && f.fixedFoveation !== void 0 && (f.fixedFoveation = D);
        };
        let ne = null;
        function W(D, G) {
            if (h = G.getViewerPose(l || a), m = G, h !== null) {
                let he = h.views;
                f !== null && (e.setRenderTargetFramebuffer(p, f.framebuffer), e.setRenderTarget(p));
                let fe = !1;
                he.length !== R.cameras.length && (R.cameras.length = 0, fe = !0);
                for(let _e = 0; _e < he.length; _e++){
                    let we = he[_e], Ee = null;
                    if (f !== null) Ee = f.getViewport(we);
                    else {
                        let Ye = u.getViewSubImage(d, we);
                        Ee = Ye.viewport, _e === 0 && (e.setRenderTargetTextures(p, Ye.colorTexture, d.ignoreDepthValues ? void 0 : Ye.depthStencilTexture), e.setRenderTarget(p));
                    }
                    let Te = w[_e];
                    Te === void 0 && (Te = new yt, Te.layers.enable(_e), Te.viewport = new je, w[_e] = Te), Te.matrix.fromArray(we.transform.matrix), Te.matrix.decompose(Te.position, Te.quaternion, Te.scale), Te.projectionMatrix.fromArray(we.projectionMatrix), Te.projectionMatrixInverse.copy(Te.projectionMatrix).invert(), Te.viewport.set(Ee.x, Ee.y, Ee.width, Ee.height), _e === 0 && (R.matrix.copy(Te.matrix), R.matrix.decompose(R.position, R.quaternion, R.scale)), fe === !0 && R.cameras.push(Te);
                }
            }
            for(let he = 0; he < v.length; he++){
                let fe = x[he], _e = v[he];
                fe !== null && _e !== void 0 && _e.update(fe, G, l || a);
            }
            ne && ne(D, G), G.detectedPlanes && n.dispatchEvent({
                type: "planesdetected",
                data: G
            }), m = null;
        }
        let K = new Ed;
        K.setAnimationLoop(W), this.setAnimationLoop = function(D) {
            ne = D;
        }, this.dispose = function() {};
    }
};
function H0(s1, e) {
    function t(g, p) {
        g.matrixAutoUpdate === !0 && g.updateMatrix(), p.value.copy(g.matrix);
    }
    function n(g, p) {
        p.color.getRGB(g.fogColor.value, bd(s1)), p.isFog ? (g.fogNear.value = p.near, g.fogFar.value = p.far) : p.isFogExp2 && (g.fogDensity.value = p.density);
    }
    function i(g, p, v, x, y) {
        p.isMeshBasicMaterial || p.isMeshLambertMaterial ? r(g, p) : p.isMeshToonMaterial ? (r(g, p), u(g, p)) : p.isMeshPhongMaterial ? (r(g, p), h(g, p)) : p.isMeshStandardMaterial ? (r(g, p), d(g, p), p.isMeshPhysicalMaterial && f(g, p, y)) : p.isMeshMatcapMaterial ? (r(g, p), m(g, p)) : p.isMeshDepthMaterial ? r(g, p) : p.isMeshDistanceMaterial ? (r(g, p), _(g, p)) : p.isMeshNormalMaterial ? r(g, p) : p.isLineBasicMaterial ? (a(g, p), p.isLineDashedMaterial && o(g, p)) : p.isPointsMaterial ? c(g, p, v, x) : p.isSpriteMaterial ? l(g, p) : p.isShadowMaterial ? (g.color.value.copy(p.color), g.opacity.value = p.opacity) : p.isShaderMaterial && (p.uniformsNeedUpdate = !1);
    }
    function r(g, p) {
        g.opacity.value = p.opacity, p.color && g.diffuse.value.copy(p.color), p.emissive && g.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity), p.map && (g.map.value = p.map, t(p.map, g.mapTransform)), p.alphaMap && (g.alphaMap.value = p.alphaMap, t(p.alphaMap, g.alphaMapTransform)), p.bumpMap && (g.bumpMap.value = p.bumpMap, t(p.bumpMap, g.bumpMapTransform), g.bumpScale.value = p.bumpScale, p.side === Ft && (g.bumpScale.value *= -1)), p.normalMap && (g.normalMap.value = p.normalMap, t(p.normalMap, g.normalMapTransform), g.normalScale.value.copy(p.normalScale), p.side === Ft && g.normalScale.value.negate()), p.displacementMap && (g.displacementMap.value = p.displacementMap, t(p.displacementMap, g.displacementMapTransform), g.displacementScale.value = p.displacementScale, g.displacementBias.value = p.displacementBias), p.emissiveMap && (g.emissiveMap.value = p.emissiveMap, t(p.emissiveMap, g.emissiveMapTransform)), p.specularMap && (g.specularMap.value = p.specularMap, t(p.specularMap, g.specularMapTransform)), p.alphaTest > 0 && (g.alphaTest.value = p.alphaTest);
        let v = e.get(p).envMap;
        if (v && (g.envMap.value = v, g.flipEnvMap.value = v.isCubeTexture && v.isRenderTargetTexture === !1 ? -1 : 1, g.reflectivity.value = p.reflectivity, g.ior.value = p.ior, g.refractionRatio.value = p.refractionRatio), p.lightMap) {
            g.lightMap.value = p.lightMap;
            let x = s1._useLegacyLights === !0 ? Math.PI : 1;
            g.lightMapIntensity.value = p.lightMapIntensity * x, t(p.lightMap, g.lightMapTransform);
        }
        p.aoMap && (g.aoMap.value = p.aoMap, g.aoMapIntensity.value = p.aoMapIntensity, t(p.aoMap, g.aoMapTransform));
    }
    function a(g, p) {
        g.diffuse.value.copy(p.color), g.opacity.value = p.opacity, p.map && (g.map.value = p.map, t(p.map, g.mapTransform));
    }
    function o(g, p) {
        g.dashSize.value = p.dashSize, g.totalSize.value = p.dashSize + p.gapSize, g.scale.value = p.scale;
    }
    function c(g, p, v, x) {
        g.diffuse.value.copy(p.color), g.opacity.value = p.opacity, g.size.value = p.size * v, g.scale.value = x * .5, p.map && (g.map.value = p.map, t(p.map, g.uvTransform)), p.alphaMap && (g.alphaMap.value = p.alphaMap, t(p.alphaMap, g.alphaMapTransform)), p.alphaTest > 0 && (g.alphaTest.value = p.alphaTest);
    }
    function l(g, p) {
        g.diffuse.value.copy(p.color), g.opacity.value = p.opacity, g.rotation.value = p.rotation, p.map && (g.map.value = p.map, t(p.map, g.mapTransform)), p.alphaMap && (g.alphaMap.value = p.alphaMap, t(p.alphaMap, g.alphaMapTransform)), p.alphaTest > 0 && (g.alphaTest.value = p.alphaTest);
    }
    function h(g, p) {
        g.specular.value.copy(p.specular), g.shininess.value = Math.max(p.shininess, 1e-4);
    }
    function u(g, p) {
        p.gradientMap && (g.gradientMap.value = p.gradientMap);
    }
    function d(g, p) {
        g.metalness.value = p.metalness, p.metalnessMap && (g.metalnessMap.value = p.metalnessMap, t(p.metalnessMap, g.metalnessMapTransform)), g.roughness.value = p.roughness, p.roughnessMap && (g.roughnessMap.value = p.roughnessMap, t(p.roughnessMap, g.roughnessMapTransform)), e.get(p).envMap && (g.envMapIntensity.value = p.envMapIntensity);
    }
    function f(g, p, v) {
        g.ior.value = p.ior, p.sheen > 0 && (g.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen), g.sheenRoughness.value = p.sheenRoughness, p.sheenColorMap && (g.sheenColorMap.value = p.sheenColorMap, t(p.sheenColorMap, g.sheenColorMapTransform)), p.sheenRoughnessMap && (g.sheenRoughnessMap.value = p.sheenRoughnessMap, t(p.sheenRoughnessMap, g.sheenRoughnessMapTransform))), p.clearcoat > 0 && (g.clearcoat.value = p.clearcoat, g.clearcoatRoughness.value = p.clearcoatRoughness, p.clearcoatMap && (g.clearcoatMap.value = p.clearcoatMap, t(p.clearcoatMap, g.clearcoatMapTransform)), p.clearcoatRoughnessMap && (g.clearcoatRoughnessMap.value = p.clearcoatRoughnessMap, t(p.clearcoatRoughnessMap, g.clearcoatRoughnessMapTransform)), p.clearcoatNormalMap && (g.clearcoatNormalMap.value = p.clearcoatNormalMap, t(p.clearcoatNormalMap, g.clearcoatNormalMapTransform), g.clearcoatNormalScale.value.copy(p.clearcoatNormalScale), p.side === Ft && g.clearcoatNormalScale.value.negate())), p.iridescence > 0 && (g.iridescence.value = p.iridescence, g.iridescenceIOR.value = p.iridescenceIOR, g.iridescenceThicknessMinimum.value = p.iridescenceThicknessRange[0], g.iridescenceThicknessMaximum.value = p.iridescenceThicknessRange[1], p.iridescenceMap && (g.iridescenceMap.value = p.iridescenceMap, t(p.iridescenceMap, g.iridescenceMapTransform)), p.iridescenceThicknessMap && (g.iridescenceThicknessMap.value = p.iridescenceThicknessMap, t(p.iridescenceThicknessMap, g.iridescenceThicknessMapTransform))), p.transmission > 0 && (g.transmission.value = p.transmission, g.transmissionSamplerMap.value = v.texture, g.transmissionSamplerSize.value.set(v.width, v.height), p.transmissionMap && (g.transmissionMap.value = p.transmissionMap, t(p.transmissionMap, g.transmissionMapTransform)), g.thickness.value = p.thickness, p.thicknessMap && (g.thicknessMap.value = p.thicknessMap, t(p.thicknessMap, g.thicknessMapTransform)), g.attenuationDistance.value = p.attenuationDistance, g.attenuationColor.value.copy(p.attenuationColor)), p.anisotropy > 0 && (g.anisotropyVector.value.set(p.anisotropy * Math.cos(p.anisotropyRotation), p.anisotropy * Math.sin(p.anisotropyRotation)), p.anisotropyMap && (g.anisotropyMap.value = p.anisotropyMap, t(p.anisotropyMap, g.anisotropyMapTransform))), g.specularIntensity.value = p.specularIntensity, g.specularColor.value.copy(p.specularColor), p.specularColorMap && (g.specularColorMap.value = p.specularColorMap, t(p.specularColorMap, g.specularColorMapTransform)), p.specularIntensityMap && (g.specularIntensityMap.value = p.specularIntensityMap, t(p.specularIntensityMap, g.specularIntensityMapTransform));
    }
    function m(g, p) {
        p.matcap && (g.matcap.value = p.matcap);
    }
    function _(g, p) {
        let v = e.get(p).light;
        g.referencePosition.value.setFromMatrixPosition(v.matrixWorld), g.nearDistance.value = v.shadow.camera.near, g.farDistance.value = v.shadow.camera.far;
    }
    return {
        refreshFogUniforms: n,
        refreshMaterialUniforms: i
    };
}
function G0(s1, e, t, n) {
    let i = {}, r = {}, a = [], o = t.isWebGL2 ? s1.getParameter(s1.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
    function c(v, x) {
        let y = x.program;
        n.uniformBlockBinding(v, y);
    }
    function l(v, x) {
        let y = i[v.id];
        y === void 0 && (m(v), y = h(v), i[v.id] = y, v.addEventListener("dispose", g));
        let b = x.program;
        n.updateUBOMapping(v, b);
        let w = e.render.frame;
        r[v.id] !== w && (d(v), r[v.id] = w);
    }
    function h(v) {
        let x = u();
        v.__bindingPointIndex = x;
        let y = s1.createBuffer(), b = v.__size, w = v.usage;
        return s1.bindBuffer(s1.UNIFORM_BUFFER, y), s1.bufferData(s1.UNIFORM_BUFFER, b, w), s1.bindBuffer(s1.UNIFORM_BUFFER, null), s1.bindBufferBase(s1.UNIFORM_BUFFER, x, y), y;
    }
    function u() {
        for(let v = 0; v < o; v++)if (a.indexOf(v) === -1) return a.push(v), v;
        return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
    }
    function d(v) {
        let x = i[v.id], y = v.uniforms, b = v.__cache;
        s1.bindBuffer(s1.UNIFORM_BUFFER, x);
        for(let w = 0, R = y.length; w < R; w++){
            let I = y[w];
            if (f(I, w, b) === !0) {
                let M = I.__offset, T = Array.isArray(I.value) ? I.value : [
                    I.value
                ], O = 0;
                for(let Y = 0; Y < T.length; Y++){
                    let $ = T[Y], U = _($);
                    typeof $ == "number" ? (I.__data[0] = $, s1.bufferSubData(s1.UNIFORM_BUFFER, M + O, I.__data)) : $.isMatrix3 ? (I.__data[0] = $.elements[0], I.__data[1] = $.elements[1], I.__data[2] = $.elements[2], I.__data[3] = $.elements[0], I.__data[4] = $.elements[3], I.__data[5] = $.elements[4], I.__data[6] = $.elements[5], I.__data[7] = $.elements[0], I.__data[8] = $.elements[6], I.__data[9] = $.elements[7], I.__data[10] = $.elements[8], I.__data[11] = $.elements[0]) : ($.toArray(I.__data, O), O += U.storage / Float32Array.BYTES_PER_ELEMENT);
                }
                s1.bufferSubData(s1.UNIFORM_BUFFER, M, I.__data);
            }
        }
        s1.bindBuffer(s1.UNIFORM_BUFFER, null);
    }
    function f(v, x, y) {
        let b = v.value;
        if (y[x] === void 0) {
            if (typeof b == "number") y[x] = b;
            else {
                let w = Array.isArray(b) ? b : [
                    b
                ], R = [];
                for(let I = 0; I < w.length; I++)R.push(w[I].clone());
                y[x] = R;
            }
            return !0;
        } else if (typeof b == "number") {
            if (y[x] !== b) return y[x] = b, !0;
        } else {
            let w = Array.isArray(y[x]) ? y[x] : [
                y[x]
            ], R = Array.isArray(b) ? b : [
                b
            ];
            for(let I = 0; I < w.length; I++){
                let M = w[I];
                if (M.equals(R[I]) === !1) return M.copy(R[I]), !0;
            }
        }
        return !1;
    }
    function m(v) {
        let x = v.uniforms, y = 0, b = 16, w = 0;
        for(let R = 0, I = x.length; R < I; R++){
            let M = x[R], T = {
                boundary: 0,
                storage: 0
            }, O = Array.isArray(M.value) ? M.value : [
                M.value
            ];
            for(let Y = 0, $ = O.length; Y < $; Y++){
                let U = O[Y], z = _(U);
                T.boundary += z.boundary, T.storage += z.storage;
            }
            if (M.__data = new Float32Array(T.storage / Float32Array.BYTES_PER_ELEMENT), M.__offset = y, R > 0) {
                w = y % b;
                let Y = b - w;
                w !== 0 && Y - T.boundary < 0 && (y += b - w, M.__offset = y);
            }
            y += T.storage;
        }
        return w = y % b, w > 0 && (y += b - w), v.__size = y, v.__cache = {}, this;
    }
    function _(v) {
        let x = {
            boundary: 0,
            storage: 0
        };
        return typeof v == "number" ? (x.boundary = 4, x.storage = 4) : v.isVector2 ? (x.boundary = 8, x.storage = 8) : v.isVector3 || v.isColor ? (x.boundary = 16, x.storage = 12) : v.isVector4 ? (x.boundary = 16, x.storage = 16) : v.isMatrix3 ? (x.boundary = 48, x.storage = 48) : v.isMatrix4 ? (x.boundary = 64, x.storage = 64) : v.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", v), x;
    }
    function g(v) {
        let x = v.target;
        x.removeEventListener("dispose", g);
        let y = a.indexOf(x.__bindingPointIndex);
        a.splice(y, 1), s1.deleteBuffer(i[x.id]), delete i[x.id], delete r[x.id];
    }
    function p() {
        for(let v in i)s1.deleteBuffer(i[v]);
        a = [], i = {}, r = {};
    }
    return {
        bind: c,
        update: l,
        dispose: p
    };
}
var Ro = class {
    constructor(e = {}){
        let { canvas: t = tp() , context: n = null , depth: i = !0 , stencil: r = !0 , alpha: a = !1 , antialias: o = !1 , premultipliedAlpha: c = !0 , preserveDrawingBuffer: l = !1 , powerPreference: h = "default" , failIfMajorPerformanceCaveat: u = !1  } = e;
        this.isWebGLRenderer = !0;
        let d;
        n !== null ? d = n.getContextAttributes().alpha : d = a;
        let f = new Uint32Array(4), m = new Int32Array(4), _ = null, g = null, p = [], v = [];
        this.domElement = t, this.debug = {
            checkShaderErrors: !0,
            onShaderError: null
        }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this._outputColorSpace = vt, this._useLegacyLights = !1, this.toneMapping = Nn, this.toneMappingExposure = 1;
        let x = this, y = !1, b = 0, w = 0, R = null, I = -1, M = null, T = new je, O = new je, Y = null, $ = new pe(0), U = 0, z = t.width, q = t.height, H = 1, ne = null, W = null, K = new je(0, 0, z, q), D = new je(0, 0, z, q), G = !1, he = new Ps, fe = !1, _e = !1, we = null, Ee = new ze, Te = new Z, Ye = new A, it = {
            background: null,
            fog: null,
            environment: null,
            overrideMaterial: null,
            isScene: !0
        };
        function Ce() {
            return R === null ? H : 1;
        }
        let L = n;
        function oe(E, N) {
            for(let V = 0; V < E.length; V++){
                let F = E[V], k = t.getContext(F, N);
                if (k !== null) return k;
            }
            return null;
        }
        try {
            let E = {
                alpha: !0,
                depth: i,
                stencil: r,
                antialias: o,
                premultipliedAlpha: c,
                preserveDrawingBuffer: l,
                powerPreference: h,
                failIfMajorPerformanceCaveat: u
            };
            if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${Hc}`), t.addEventListener("webglcontextlost", ce, !1), t.addEventListener("webglcontextrestored", ae, !1), t.addEventListener("webglcontextcreationerror", ge, !1), L === null) {
                let N = [
                    "webgl2",
                    "webgl",
                    "experimental-webgl"
                ];
                if (x.isWebGL1Renderer === !0 && N.shift(), L = oe(N, E), L === null) throw oe(N) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
            }
            typeof WebGLRenderingContext < "u" && L instanceof WebGLRenderingContext && console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."), L.getShaderPrecisionFormat === void 0 && (L.getShaderPrecisionFormat = function() {
                return {
                    rangeMin: 1,
                    rangeMax: 1,
                    precision: 1
                };
            });
        } catch (E) {
            throw console.error("THREE.WebGLRenderer: " + E.message), E;
        }
        let X, ie, J, Se, me, ye, Ne, qe, rt, C, S, B, ee, j, te, Me, re, de, Le, Ze, se, $e, Oe, Ie;
        function Re() {
            X = new h_(L), ie = new s_(L, X, e), X.init(ie), $e = new V0(L, X, ie), J = new B0(L, X, ie), Se = new f_(L), me = new w0, ye = new z0(L, X, J, me, ie, $e, Se), Ne = new a_(x), qe = new l_(x), rt = new bp(L, ie), Oe = new n_(L, X, rt, ie), C = new u_(L, rt, Se, Oe), S = new __(L, C, rt, Se), Le = new g_(L, ie, ye), Me = new r_(me), B = new T0(x, Ne, qe, X, ie, Oe, Me), ee = new H0(x, me), j = new R0, te = new D0(X, ie), de = new t_(x, Ne, qe, J, S, d, c), re = new F0(x, S, ie), Ie = new G0(L, Se, ie, J), Ze = new i_(L, X, Se, ie), se = new d_(L, X, Se, ie), Se.programs = B.programs, x.capabilities = ie, x.extensions = X, x.properties = me, x.renderLists = j, x.shadowMap = re, x.state = J, x.info = Se;
        }
        Re();
        let P = new Ao(x, L);
        this.xr = P, this.getContext = function() {
            return L;
        }, this.getContextAttributes = function() {
            return L.getContextAttributes();
        }, this.forceContextLoss = function() {
            let E = X.get("WEBGL_lose_context");
            E && E.loseContext();
        }, this.forceContextRestore = function() {
            let E = X.get("WEBGL_lose_context");
            E && E.restoreContext();
        }, this.getPixelRatio = function() {
            return H;
        }, this.setPixelRatio = function(E) {
            E !== void 0 && (H = E, this.setSize(z, q, !1));
        }, this.getSize = function(E) {
            return E.set(z, q);
        }, this.setSize = function(E, N, V = !0) {
            if (P.isPresenting) {
                console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
                return;
            }
            z = E, q = N, t.width = Math.floor(E * H), t.height = Math.floor(N * H), V === !0 && (t.style.width = E + "px", t.style.height = N + "px"), this.setViewport(0, 0, E, N);
        }, this.getDrawingBufferSize = function(E) {
            return E.set(z * H, q * H).floor();
        }, this.setDrawingBufferSize = function(E, N, V) {
            z = E, q = N, H = V, t.width = Math.floor(E * V), t.height = Math.floor(N * V), this.setViewport(0, 0, E, N);
        }, this.getCurrentViewport = function(E) {
            return E.copy(T);
        }, this.getViewport = function(E) {
            return E.copy(K);
        }, this.setViewport = function(E, N, V, F) {
            E.isVector4 ? K.set(E.x, E.y, E.z, E.w) : K.set(E, N, V, F), J.viewport(T.copy(K).multiplyScalar(H).floor());
        }, this.getScissor = function(E) {
            return E.copy(D);
        }, this.setScissor = function(E, N, V, F) {
            E.isVector4 ? D.set(E.x, E.y, E.z, E.w) : D.set(E, N, V, F), J.scissor(O.copy(D).multiplyScalar(H).floor());
        }, this.getScissorTest = function() {
            return G;
        }, this.setScissorTest = function(E) {
            J.setScissorTest(G = E);
        }, this.setOpaqueSort = function(E) {
            ne = E;
        }, this.setTransparentSort = function(E) {
            W = E;
        }, this.getClearColor = function(E) {
            return E.copy(de.getClearColor());
        }, this.setClearColor = function() {
            de.setClearColor.apply(de, arguments);
        }, this.getClearAlpha = function() {
            return de.getClearAlpha();
        }, this.setClearAlpha = function() {
            de.setClearAlpha.apply(de, arguments);
        }, this.clear = function(E = !0, N = !0, V = !0) {
            let F = 0;
            if (E) {
                let k = !1;
                if (R !== null) {
                    let xe = R.texture.format;
                    k = xe === _d || xe === gd || xe === md;
                }
                if (k) {
                    let xe = R.texture.type, Ae = xe === On || xe === Ln || xe === Wc || xe === ii || xe === fd || xe === pd, Ue = de.getClearColor(), De = de.getClearAlpha(), We = Ue.r, Pe = Ue.g, Ve = Ue.b;
                    Ae ? (f[0] = We, f[1] = Pe, f[2] = Ve, f[3] = De, L.clearBufferuiv(L.COLOR, 0, f)) : (m[0] = We, m[1] = Pe, m[2] = Ve, m[3] = De, L.clearBufferiv(L.COLOR, 0, m));
                } else F |= L.COLOR_BUFFER_BIT;
            }
            N && (F |= L.DEPTH_BUFFER_BIT), V && (F |= L.STENCIL_BUFFER_BIT), L.clear(F);
        }, this.clearColor = function() {
            this.clear(!0, !1, !1);
        }, this.clearDepth = function() {
            this.clear(!1, !0, !1);
        }, this.clearStencil = function() {
            this.clear(!1, !1, !0);
        }, this.dispose = function() {
            t.removeEventListener("webglcontextlost", ce, !1), t.removeEventListener("webglcontextrestored", ae, !1), t.removeEventListener("webglcontextcreationerror", ge, !1), j.dispose(), te.dispose(), me.dispose(), Ne.dispose(), qe.dispose(), S.dispose(), Oe.dispose(), Ie.dispose(), B.dispose(), P.dispose(), P.removeEventListener("sessionstart", tt), P.removeEventListener("sessionend", tn), we && (we.dispose(), we = null), Rt.stop();
        };
        function ce(E) {
            E.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), y = !0;
        }
        function ae() {
            console.log("THREE.WebGLRenderer: Context Restored."), y = !1;
            let E = Se.autoReset, N = re.enabled, V = re.autoUpdate, F = re.needsUpdate, k = re.type;
            Re(), Se.autoReset = E, re.enabled = N, re.autoUpdate = V, re.needsUpdate = F, re.type = k;
        }
        function ge(E) {
            console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", E.statusMessage);
        }
        function ue(E) {
            let N = E.target;
            N.removeEventListener("dispose", ue), Q(N);
        }
        function Q(E) {
            be(E), me.remove(E);
        }
        function be(E) {
            let N = me.get(E).programs;
            N !== void 0 && (N.forEach(function(V) {
                B.releaseProgram(V);
            }), E.isShaderMaterial && B.releaseShaderCache(E));
        }
        this.renderBufferDirect = function(E, N, V, F, k, xe) {
            N === null && (N = it);
            let Ae = k.isMesh && k.matrixWorld.determinant() < 0, Ue = Fd(E, N, V, F, k);
            J.setMaterial(F, Ae);
            let De = V.index, We = 1;
            if (F.wireframe === !0) {
                if (De = C.getWireframeAttribute(V), De === void 0) return;
                We = 2;
            }
            let Pe = V.drawRange, Ve = V.attributes.position, at = Pe.start * We, lt = (Pe.start + Pe.count) * We;
            xe !== null && (at = Math.max(at, xe.start * We), lt = Math.min(lt, (xe.start + xe.count) * We)), De !== null ? (at = Math.max(at, 0), lt = Math.min(lt, De.count)) : Ve != null && (at = Math.max(at, 0), lt = Math.min(lt, Ve.count));
            let Ht = lt - at;
            if (Ht < 0 || Ht === 1 / 0) return;
            Oe.setup(k, F, Ue, V, De);
            let an, ut = Ze;
            if (De !== null && (an = rt.get(De), ut = se, ut.setIndex(an)), k.isMesh) F.wireframe === !0 ? (J.setLineWidth(F.wireframeLinewidth * Ce()), ut.setMode(L.LINES)) : ut.setMode(L.TRIANGLES);
            else if (k.isLine) {
                let Xe = F.linewidth;
                Xe === void 0 && (Xe = 1), J.setLineWidth(Xe * Ce()), k.isLineSegments ? ut.setMode(L.LINES) : k.isLineLoop ? ut.setMode(L.LINE_LOOP) : ut.setMode(L.LINE_STRIP);
            } else k.isPoints ? ut.setMode(L.POINTS) : k.isSprite && ut.setMode(L.TRIANGLES);
            if (k.isInstancedMesh) ut.renderInstances(at, Ht, k.count);
            else if (V.isInstancedBufferGeometry) {
                let Xe = V._maxInstanceCount !== void 0 ? V._maxInstanceCount : 1 / 0, Sa = Math.min(V.instanceCount, Xe);
                ut.renderInstances(at, Ht, Sa);
            } else ut.render(at, Ht);
        }, this.compile = function(E, N) {
            function V(F, k, xe) {
                F.transparent === !0 && F.side === gn && F.forceSinglePass === !1 ? (F.side = Ft, F.needsUpdate = !0, Hs(F, k, xe), F.side = Bn, F.needsUpdate = !0, Hs(F, k, xe), F.side = gn) : Hs(F, k, xe);
            }
            g = te.get(E), g.init(), v.push(g), E.traverseVisible(function(F) {
                F.isLight && F.layers.test(N.layers) && (g.pushLight(F), F.castShadow && g.pushShadow(F));
            }), g.setupLights(x._useLegacyLights), E.traverse(function(F) {
                let k = F.material;
                if (k) if (Array.isArray(k)) for(let xe = 0; xe < k.length; xe++){
                    let Ae = k[xe];
                    V(Ae, E, F);
                }
                else V(k, E, F);
            }), v.pop(), g = null;
        };
        let Fe = null;
        function At(E) {
            Fe && Fe(E);
        }
        function tt() {
            Rt.stop();
        }
        function tn() {
            Rt.start();
        }
        let Rt = new Ed;
        Rt.setAnimationLoop(At), typeof self < "u" && Rt.setContext(self), this.setAnimationLoop = function(E) {
            Fe = E, P.setAnimationLoop(E), E === null ? Rt.stop() : Rt.start();
        }, P.addEventListener("sessionstart", tt), P.addEventListener("sessionend", tn), this.render = function(E, N) {
            if (N !== void 0 && N.isCamera !== !0) {
                console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
                return;
            }
            if (y === !0) return;
            E.matrixWorldAutoUpdate === !0 && E.updateMatrixWorld(), N.parent === null && N.matrixWorldAutoUpdate === !0 && N.updateMatrixWorld(), P.enabled === !0 && P.isPresenting === !0 && (P.cameraAutoUpdate === !0 && P.updateCamera(N), N = P.getCamera()), E.isScene === !0 && E.onBeforeRender(x, E, N, R), g = te.get(E, v.length), g.init(), v.push(g), Ee.multiplyMatrices(N.projectionMatrix, N.matrixWorldInverse), he.setFromProjectionMatrix(Ee), _e = this.localClippingEnabled, fe = Me.init(this.clippingPlanes, _e), _ = j.get(E, p.length), _.init(), p.push(_), jc(E, N, 0, x.sortObjects), _.finish(), x.sortObjects === !0 && _.sort(ne, W), this.info.render.frame++, fe === !0 && Me.beginShadows();
            let V = g.state.shadowsArray;
            if (re.render(V, E, N), fe === !0 && Me.endShadows(), this.info.autoReset === !0 && this.info.reset(), de.render(_, E), g.setupLights(x._useLegacyLights), N.isArrayCamera) {
                let F = N.cameras;
                for(let k = 0, xe = F.length; k < xe; k++){
                    let Ae = F[k];
                    el(_, E, Ae, Ae.viewport);
                }
            } else el(_, E, N);
            R !== null && (ye.updateMultisampleRenderTarget(R), ye.updateRenderTargetMipmap(R)), E.isScene === !0 && E.onAfterRender(x, E, N), Oe.resetDefaultState(), I = -1, M = null, v.pop(), v.length > 0 ? g = v[v.length - 1] : g = null, p.pop(), p.length > 0 ? _ = p[p.length - 1] : _ = null;
        };
        function jc(E, N, V, F) {
            if (E.visible === !1) return;
            if (E.layers.test(N.layers)) {
                if (E.isGroup) V = E.renderOrder;
                else if (E.isLOD) E.autoUpdate === !0 && E.update(N);
                else if (E.isLight) g.pushLight(E), E.castShadow && g.pushShadow(E);
                else if (E.isSprite) {
                    if (!E.frustumCulled || he.intersectsSprite(E)) {
                        F && Ye.setFromMatrixPosition(E.matrixWorld).applyMatrix4(Ee);
                        let Ae = S.update(E), Ue = E.material;
                        Ue.visible && _.push(E, Ae, Ue, V, Ye.z, null);
                    }
                } else if ((E.isMesh || E.isLine || E.isPoints) && (!E.frustumCulled || he.intersectsObject(E))) {
                    let Ae = S.update(E), Ue = E.material;
                    if (F && (E.boundingSphere !== void 0 ? (E.boundingSphere === null && E.computeBoundingSphere(), Ye.copy(E.boundingSphere.center)) : (Ae.boundingSphere === null && Ae.computeBoundingSphere(), Ye.copy(Ae.boundingSphere.center)), Ye.applyMatrix4(E.matrixWorld).applyMatrix4(Ee)), Array.isArray(Ue)) {
                        let De = Ae.groups;
                        for(let We = 0, Pe = De.length; We < Pe; We++){
                            let Ve = De[We], at = Ue[Ve.materialIndex];
                            at && at.visible && _.push(E, Ae, at, V, Ye.z, Ve);
                        }
                    } else Ue.visible && _.push(E, Ae, Ue, V, Ye.z, null);
                }
            }
            let xe = E.children;
            for(let Ae = 0, Ue = xe.length; Ae < Ue; Ae++)jc(xe[Ae], N, V, F);
        }
        function el(E, N, V, F) {
            let k = E.opaque, xe = E.transmissive, Ae = E.transparent;
            g.setupLightsView(V), fe === !0 && Me.setGlobalState(x.clippingPlanes, V), xe.length > 0 && Od(k, xe, N, V), F && J.viewport(T.copy(F)), k.length > 0 && ks(k, N, V), xe.length > 0 && ks(xe, N, V), Ae.length > 0 && ks(Ae, N, V), J.buffers.depth.setTest(!0), J.buffers.depth.setMask(!0), J.buffers.color.setMask(!0), J.setPolygonOffset(!1);
        }
        function Od(E, N, V, F) {
            let k = ie.isWebGL2;
            we === null && (we = new qt(1, 1, {
                generateMipmaps: !0,
                type: X.has("EXT_color_buffer_half_float") ? Ts : On,
                minFilter: li,
                samples: k ? 4 : 0
            })), x.getDrawingBufferSize(Te), k ? we.setSize(Te.x, Te.y) : we.setSize(Wr(Te.x), Wr(Te.y));
            let xe = x.getRenderTarget();
            x.setRenderTarget(we), x.getClearColor($), U = x.getClearAlpha(), U < 1 && x.setClearColor(16777215, .5), x.clear();
            let Ae = x.toneMapping;
            x.toneMapping = Nn, ks(E, V, F), ye.updateMultisampleRenderTarget(we), ye.updateRenderTargetMipmap(we);
            let Ue = !1;
            for(let De = 0, We = N.length; De < We; De++){
                let Pe = N[De], Ve = Pe.object, at = Pe.geometry, lt = Pe.material, Ht = Pe.group;
                if (lt.side === gn && Ve.layers.test(F.layers)) {
                    let an = lt.side;
                    lt.side = Ft, lt.needsUpdate = !0, tl(Ve, V, F, at, lt, Ht), lt.side = an, lt.needsUpdate = !0, Ue = !0;
                }
            }
            Ue === !0 && (ye.updateMultisampleRenderTarget(we), ye.updateRenderTargetMipmap(we)), x.setRenderTarget(xe), x.setClearColor($, U), x.toneMapping = Ae;
        }
        function ks(E, N, V) {
            let F = N.isScene === !0 ? N.overrideMaterial : null;
            for(let k = 0, xe = E.length; k < xe; k++){
                let Ae = E[k], Ue = Ae.object, De = Ae.geometry, We = F === null ? Ae.material : F, Pe = Ae.group;
                Ue.layers.test(V.layers) && tl(Ue, N, V, De, We, Pe);
            }
        }
        function tl(E, N, V, F, k, xe) {
            E.onBeforeRender(x, N, V, F, k, xe), E.modelViewMatrix.multiplyMatrices(V.matrixWorldInverse, E.matrixWorld), E.normalMatrix.getNormalMatrix(E.modelViewMatrix), k.onBeforeRender(x, N, V, F, E, xe), k.transparent === !0 && k.side === gn && k.forceSinglePass === !1 ? (k.side = Ft, k.needsUpdate = !0, x.renderBufferDirect(V, N, F, k, E, xe), k.side = Bn, k.needsUpdate = !0, x.renderBufferDirect(V, N, F, k, E, xe), k.side = gn) : x.renderBufferDirect(V, N, F, k, E, xe), E.onAfterRender(x, N, V, F, k, xe);
        }
        function Hs(E, N, V) {
            N.isScene !== !0 && (N = it);
            let F = me.get(E), k = g.state.lights, xe = g.state.shadowsArray, Ae = k.state.version, Ue = B.getParameters(E, k.state, xe, N, V), De = B.getProgramCacheKey(Ue), We = F.programs;
            F.environment = E.isMeshStandardMaterial ? N.environment : null, F.fog = N.fog, F.envMap = (E.isMeshStandardMaterial ? qe : Ne).get(E.envMap || F.environment), We === void 0 && (E.addEventListener("dispose", ue), We = new Map, F.programs = We);
            let Pe = We.get(De);
            if (Pe !== void 0) {
                if (F.currentProgram === Pe && F.lightsStateVersion === Ae) return nl(E, Ue), Pe;
            } else Ue.uniforms = B.getUniforms(E), E.onBuild(V, Ue, x), E.onBeforeCompile(Ue, x), Pe = B.acquireProgram(Ue, De), We.set(De, Pe), F.uniforms = Ue.uniforms;
            let Ve = F.uniforms;
            (!E.isShaderMaterial && !E.isRawShaderMaterial || E.clipping === !0) && (Ve.clippingPlanes = Me.uniform), nl(E, Ue), F.needsLights = zd(E), F.lightsStateVersion = Ae, F.needsLights && (Ve.ambientLightColor.value = k.state.ambient, Ve.lightProbe.value = k.state.probe, Ve.directionalLights.value = k.state.directional, Ve.directionalLightShadows.value = k.state.directionalShadow, Ve.spotLights.value = k.state.spot, Ve.spotLightShadows.value = k.state.spotShadow, Ve.rectAreaLights.value = k.state.rectArea, Ve.ltc_1.value = k.state.rectAreaLTC1, Ve.ltc_2.value = k.state.rectAreaLTC2, Ve.pointLights.value = k.state.point, Ve.pointLightShadows.value = k.state.pointShadow, Ve.hemisphereLights.value = k.state.hemi, Ve.directionalShadowMap.value = k.state.directionalShadowMap, Ve.directionalShadowMatrix.value = k.state.directionalShadowMatrix, Ve.spotShadowMap.value = k.state.spotShadowMap, Ve.spotLightMatrix.value = k.state.spotLightMatrix, Ve.spotLightMap.value = k.state.spotLightMap, Ve.pointShadowMap.value = k.state.pointShadowMap, Ve.pointShadowMatrix.value = k.state.pointShadowMatrix);
            let at = Pe.getUniforms(), lt = qi.seqWithValue(at.seq, Ve);
            return F.currentProgram = Pe, F.uniformsList = lt, Pe;
        }
        function nl(E, N) {
            let V = me.get(E);
            V.outputColorSpace = N.outputColorSpace, V.instancing = N.instancing, V.instancingColor = N.instancingColor, V.skinning = N.skinning, V.morphTargets = N.morphTargets, V.morphNormals = N.morphNormals, V.morphColors = N.morphColors, V.morphTargetsCount = N.morphTargetsCount, V.numClippingPlanes = N.numClippingPlanes, V.numIntersection = N.numClipIntersection, V.vertexAlphas = N.vertexAlphas, V.vertexTangents = N.vertexTangents, V.toneMapping = N.toneMapping;
        }
        function Fd(E, N, V, F, k) {
            N.isScene !== !0 && (N = it), ye.resetTextureUnits();
            let xe = N.fog, Ae = F.isMeshStandardMaterial ? N.environment : null, Ue = R === null ? x.outputColorSpace : R.isXRRenderTarget === !0 ? R.texture.colorSpace : Mn, De = (F.isMeshStandardMaterial ? qe : Ne).get(F.envMap || Ae), We = F.vertexColors === !0 && !!V.attributes.color && V.attributes.color.itemSize === 4, Pe = !!V.attributes.tangent && (!!F.normalMap || F.anisotropy > 0), Ve = !!V.morphAttributes.position, at = !!V.morphAttributes.normal, lt = !!V.morphAttributes.color, Ht = Nn;
            F.toneMapped && (R === null || R.isXRRenderTarget === !0) && (Ht = x.toneMapping);
            let an = V.morphAttributes.position || V.morphAttributes.normal || V.morphAttributes.color, ut = an !== void 0 ? an.length : 0, Xe = me.get(F), Sa = g.state.lights;
            if (fe === !0 && (_e === !0 || E !== M)) {
                let Bt = E === M && F.id === I;
                Me.setState(F, E, Bt);
            }
            let dt = !1;
            F.version === Xe.__version ? (Xe.needsLights && Xe.lightsStateVersion !== Sa.state.version || Xe.outputColorSpace !== Ue || k.isInstancedMesh && Xe.instancing === !1 || !k.isInstancedMesh && Xe.instancing === !0 || k.isSkinnedMesh && Xe.skinning === !1 || !k.isSkinnedMesh && Xe.skinning === !0 || k.isInstancedMesh && Xe.instancingColor === !0 && k.instanceColor === null || k.isInstancedMesh && Xe.instancingColor === !1 && k.instanceColor !== null || Xe.envMap !== De || F.fog === !0 && Xe.fog !== xe || Xe.numClippingPlanes !== void 0 && (Xe.numClippingPlanes !== Me.numPlanes || Xe.numIntersection !== Me.numIntersection) || Xe.vertexAlphas !== We || Xe.vertexTangents !== Pe || Xe.morphTargets !== Ve || Xe.morphNormals !== at || Xe.morphColors !== lt || Xe.toneMapping !== Ht || ie.isWebGL2 === !0 && Xe.morphTargetsCount !== ut) && (dt = !0) : (dt = !0, Xe.__version = F.version);
            let Hn = Xe.currentProgram;
            dt === !0 && (Hn = Hs(F, N, k));
            let il = !1, os = !1, ba = !1, Ct = Hn.getUniforms(), Gn = Xe.uniforms;
            if (J.useProgram(Hn.program) && (il = !0, os = !0, ba = !0), F.id !== I && (I = F.id, os = !0), il || M !== E) {
                Ct.setValue(L, "projectionMatrix", E.projectionMatrix), Ct.setValue(L, "viewMatrix", E.matrixWorldInverse);
                let Bt = Ct.map.cameraPosition;
                Bt !== void 0 && Bt.setValue(L, Ye.setFromMatrixPosition(E.matrixWorld)), ie.logarithmicDepthBuffer && Ct.setValue(L, "logDepthBufFC", 2 / (Math.log(E.far + 1) / Math.LN2)), (F.isMeshPhongMaterial || F.isMeshToonMaterial || F.isMeshLambertMaterial || F.isMeshBasicMaterial || F.isMeshStandardMaterial || F.isShaderMaterial) && Ct.setValue(L, "isOrthographic", E.isOrthographicCamera === !0), M !== E && (M = E, os = !0, ba = !0);
            }
            if (k.isSkinnedMesh) {
                Ct.setOptional(L, k, "bindMatrix"), Ct.setOptional(L, k, "bindMatrixInverse");
                let Bt = k.skeleton;
                Bt && (ie.floatVertexTextures ? (Bt.boneTexture === null && Bt.computeBoneTexture(), Ct.setValue(L, "boneTexture", Bt.boneTexture, ye), Ct.setValue(L, "boneTextureSize", Bt.boneTextureSize)) : console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."));
            }
            let Ea = V.morphAttributes;
            if ((Ea.position !== void 0 || Ea.normal !== void 0 || Ea.color !== void 0 && ie.isWebGL2 === !0) && Le.update(k, V, Hn), (os || Xe.receiveShadow !== k.receiveShadow) && (Xe.receiveShadow = k.receiveShadow, Ct.setValue(L, "receiveShadow", k.receiveShadow)), F.isMeshGouraudMaterial && F.envMap !== null && (Gn.envMap.value = De, Gn.flipEnvMap.value = De.isCubeTexture && De.isRenderTargetTexture === !1 ? -1 : 1), os && (Ct.setValue(L, "toneMappingExposure", x.toneMappingExposure), Xe.needsLights && Bd(Gn, ba), xe && F.fog === !0 && ee.refreshFogUniforms(Gn, xe), ee.refreshMaterialUniforms(Gn, F, H, q, we), qi.upload(L, Xe.uniformsList, Gn, ye)), F.isShaderMaterial && F.uniformsNeedUpdate === !0 && (qi.upload(L, Xe.uniformsList, Gn, ye), F.uniformsNeedUpdate = !1), F.isSpriteMaterial && Ct.setValue(L, "center", k.center), Ct.setValue(L, "modelViewMatrix", k.modelViewMatrix), Ct.setValue(L, "normalMatrix", k.normalMatrix), Ct.setValue(L, "modelMatrix", k.matrixWorld), F.isShaderMaterial || F.isRawShaderMaterial) {
                let Bt = F.uniformsGroups;
                for(let Ta = 0, Vd = Bt.length; Ta < Vd; Ta++)if (ie.isWebGL2) {
                    let sl = Bt[Ta];
                    Ie.update(sl, Hn), Ie.bind(sl, Hn);
                } else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
            }
            return Hn;
        }
        function Bd(E, N) {
            E.ambientLightColor.needsUpdate = N, E.lightProbe.needsUpdate = N, E.directionalLights.needsUpdate = N, E.directionalLightShadows.needsUpdate = N, E.pointLights.needsUpdate = N, E.pointLightShadows.needsUpdate = N, E.spotLights.needsUpdate = N, E.spotLightShadows.needsUpdate = N, E.rectAreaLights.needsUpdate = N, E.hemisphereLights.needsUpdate = N;
        }
        function zd(E) {
            return E.isMeshLambertMaterial || E.isMeshToonMaterial || E.isMeshPhongMaterial || E.isMeshStandardMaterial || E.isShadowMaterial || E.isShaderMaterial && E.lights === !0;
        }
        this.getActiveCubeFace = function() {
            return b;
        }, this.getActiveMipmapLevel = function() {
            return w;
        }, this.getRenderTarget = function() {
            return R;
        }, this.setRenderTargetTextures = function(E, N, V) {
            me.get(E.texture).__webglTexture = N, me.get(E.depthTexture).__webglTexture = V;
            let F = me.get(E);
            F.__hasExternalTextures = !0, F.__hasExternalTextures && (F.__autoAllocateDepthBuffer = V === void 0, F.__autoAllocateDepthBuffer || X.has("WEBGL_multisampled_render_to_texture") === !0 && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), F.__useRenderToTexture = !1));
        }, this.setRenderTargetFramebuffer = function(E, N) {
            let V = me.get(E);
            V.__webglFramebuffer = N, V.__useDefaultFramebuffer = N === void 0;
        }, this.setRenderTarget = function(E, N = 0, V = 0) {
            R = E, b = N, w = V;
            let F = !0, k = null, xe = !1, Ae = !1;
            if (E) {
                let De = me.get(E);
                De.__useDefaultFramebuffer !== void 0 ? (J.bindFramebuffer(L.FRAMEBUFFER, null), F = !1) : De.__webglFramebuffer === void 0 ? ye.setupRenderTarget(E) : De.__hasExternalTextures && ye.rebindTextures(E, me.get(E.texture).__webglTexture, me.get(E.depthTexture).__webglTexture);
                let We = E.texture;
                (We.isData3DTexture || We.isDataArrayTexture || We.isCompressedArrayTexture) && (Ae = !0);
                let Pe = me.get(E).__webglFramebuffer;
                E.isWebGLCubeRenderTarget ? (Array.isArray(Pe[N]) ? k = Pe[N][V] : k = Pe[N], xe = !0) : ie.isWebGL2 && E.samples > 0 && ye.useMultisampledRTT(E) === !1 ? k = me.get(E).__webglMultisampledFramebuffer : Array.isArray(Pe) ? k = Pe[V] : k = Pe, T.copy(E.viewport), O.copy(E.scissor), Y = E.scissorTest;
            } else T.copy(K).multiplyScalar(H).floor(), O.copy(D).multiplyScalar(H).floor(), Y = G;
            if (J.bindFramebuffer(L.FRAMEBUFFER, k) && ie.drawBuffers && F && J.drawBuffers(E, k), J.viewport(T), J.scissor(O), J.setScissorTest(Y), xe) {
                let De = me.get(E.texture);
                L.framebufferTexture2D(L.FRAMEBUFFER, L.COLOR_ATTACHMENT0, L.TEXTURE_CUBE_MAP_POSITIVE_X + N, De.__webglTexture, V);
            } else if (Ae) {
                let De = me.get(E.texture), We = N || 0;
                L.framebufferTextureLayer(L.FRAMEBUFFER, L.COLOR_ATTACHMENT0, De.__webglTexture, V || 0, We);
            }
            I = -1;
        }, this.readRenderTargetPixels = function(E, N, V, F, k, xe, Ae) {
            if (!(E && E.isWebGLRenderTarget)) {
                console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
                return;
            }
            let Ue = me.get(E).__webglFramebuffer;
            if (E.isWebGLCubeRenderTarget && Ae !== void 0 && (Ue = Ue[Ae]), Ue) {
                J.bindFramebuffer(L.FRAMEBUFFER, Ue);
                try {
                    let De = E.texture, We = De.format, Pe = De.type;
                    if (We !== Wt && $e.convert(We) !== L.getParameter(L.IMPLEMENTATION_COLOR_READ_FORMAT)) {
                        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                        return;
                    }
                    let Ve = Pe === Ts && (X.has("EXT_color_buffer_half_float") || ie.isWebGL2 && X.has("EXT_color_buffer_float"));
                    if (Pe !== On && $e.convert(Pe) !== L.getParameter(L.IMPLEMENTATION_COLOR_READ_TYPE) && !(Pe === xn && (ie.isWebGL2 || X.has("OES_texture_float") || X.has("WEBGL_color_buffer_float"))) && !Ve) {
                        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                        return;
                    }
                    N >= 0 && N <= E.width - F && V >= 0 && V <= E.height - k && L.readPixels(N, V, F, k, $e.convert(We), $e.convert(Pe), xe);
                } finally{
                    let De = R !== null ? me.get(R).__webglFramebuffer : null;
                    J.bindFramebuffer(L.FRAMEBUFFER, De);
                }
            }
        }, this.copyFramebufferToTexture = function(E, N, V = 0) {
            let F = Math.pow(2, -V), k = Math.floor(N.image.width * F), xe = Math.floor(N.image.height * F);
            ye.setTexture2D(N, 0), L.copyTexSubImage2D(L.TEXTURE_2D, V, 0, 0, E.x, E.y, k, xe), J.unbindTexture();
        }, this.copyTextureToTexture = function(E, N, V, F = 0) {
            let k = N.image.width, xe = N.image.height, Ae = $e.convert(V.format), Ue = $e.convert(V.type);
            ye.setTexture2D(V, 0), L.pixelStorei(L.UNPACK_FLIP_Y_WEBGL, V.flipY), L.pixelStorei(L.UNPACK_PREMULTIPLY_ALPHA_WEBGL, V.premultiplyAlpha), L.pixelStorei(L.UNPACK_ALIGNMENT, V.unpackAlignment), N.isDataTexture ? L.texSubImage2D(L.TEXTURE_2D, F, E.x, E.y, k, xe, Ae, Ue, N.image.data) : N.isCompressedTexture ? L.compressedTexSubImage2D(L.TEXTURE_2D, F, E.x, E.y, N.mipmaps[0].width, N.mipmaps[0].height, Ae, N.mipmaps[0].data) : L.texSubImage2D(L.TEXTURE_2D, F, E.x, E.y, Ae, Ue, N.image), F === 0 && V.generateMipmaps && L.generateMipmap(L.TEXTURE_2D), J.unbindTexture();
        }, this.copyTextureToTexture3D = function(E, N, V, F, k = 0) {
            if (x.isWebGL1Renderer) {
                console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
                return;
            }
            let xe = E.max.x - E.min.x + 1, Ae = E.max.y - E.min.y + 1, Ue = E.max.z - E.min.z + 1, De = $e.convert(F.format), We = $e.convert(F.type), Pe;
            if (F.isData3DTexture) ye.setTexture3D(F, 0), Pe = L.TEXTURE_3D;
            else if (F.isDataArrayTexture) ye.setTexture2DArray(F, 0), Pe = L.TEXTURE_2D_ARRAY;
            else {
                console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
                return;
            }
            L.pixelStorei(L.UNPACK_FLIP_Y_WEBGL, F.flipY), L.pixelStorei(L.UNPACK_PREMULTIPLY_ALPHA_WEBGL, F.premultiplyAlpha), L.pixelStorei(L.UNPACK_ALIGNMENT, F.unpackAlignment);
            let Ve = L.getParameter(L.UNPACK_ROW_LENGTH), at = L.getParameter(L.UNPACK_IMAGE_HEIGHT), lt = L.getParameter(L.UNPACK_SKIP_PIXELS), Ht = L.getParameter(L.UNPACK_SKIP_ROWS), an = L.getParameter(L.UNPACK_SKIP_IMAGES), ut = V.isCompressedTexture ? V.mipmaps[0] : V.image;
            L.pixelStorei(L.UNPACK_ROW_LENGTH, ut.width), L.pixelStorei(L.UNPACK_IMAGE_HEIGHT, ut.height), L.pixelStorei(L.UNPACK_SKIP_PIXELS, E.min.x), L.pixelStorei(L.UNPACK_SKIP_ROWS, E.min.y), L.pixelStorei(L.UNPACK_SKIP_IMAGES, E.min.z), V.isDataTexture || V.isData3DTexture ? L.texSubImage3D(Pe, k, N.x, N.y, N.z, xe, Ae, Ue, De, We, ut.data) : V.isCompressedArrayTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), L.compressedTexSubImage3D(Pe, k, N.x, N.y, N.z, xe, Ae, Ue, De, ut.data)) : L.texSubImage3D(Pe, k, N.x, N.y, N.z, xe, Ae, Ue, De, We, ut), L.pixelStorei(L.UNPACK_ROW_LENGTH, Ve), L.pixelStorei(L.UNPACK_IMAGE_HEIGHT, at), L.pixelStorei(L.UNPACK_SKIP_PIXELS, lt), L.pixelStorei(L.UNPACK_SKIP_ROWS, Ht), L.pixelStorei(L.UNPACK_SKIP_IMAGES, an), k === 0 && F.generateMipmaps && L.generateMipmap(Pe), J.unbindTexture();
        }, this.initTexture = function(E) {
            E.isCubeTexture ? ye.setTextureCube(E, 0) : E.isData3DTexture ? ye.setTexture3D(E, 0) : E.isDataArrayTexture || E.isCompressedArrayTexture ? ye.setTexture2DArray(E, 0) : ye.setTexture2D(E, 0), J.unbindTexture();
        }, this.resetState = function() {
            b = 0, w = 0, R = null, J.reset(), Oe.reset();
        }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: this
        }));
    }
    get coordinateSystem() {
        return vn;
    }
    get outputColorSpace() {
        return this._outputColorSpace;
    }
    set outputColorSpace(e) {
        this._outputColorSpace = e;
        let t = this.getContext();
        t.drawingBufferColorSpace = e === qc ? "display-p3" : "srgb", t.unpackColorSpace = Qe.workingColorSpace === va ? "display-p3" : "srgb";
    }
    get physicallyCorrectLights() {
        return console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), !this.useLegacyLights;
    }
    set physicallyCorrectLights(e) {
        console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), this.useLegacyLights = !e;
    }
    get outputEncoding() {
        return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace === vt ? ri : vd;
    }
    set outputEncoding(e) {
        console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace = e === ri ? vt : Mn;
    }
    get useLegacyLights() {
        return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights;
    }
    set useLegacyLights(e) {
        console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights = e;
    }
}, Co = class extends Ro {
};
Co.prototype.isWebGL1Renderer = !0;
var Po = class s1 {
    constructor(e, t = 25e-5){
        this.isFogExp2 = !0, this.name = "", this.color = new pe(e), this.density = t;
    }
    clone() {
        return new s1(this.color, this.density);
    }
    toJSON() {
        return {
            type: "FogExp2",
            name: this.name,
            color: this.color.getHex(),
            density: this.density
        };
    }
}, Lo = class s1 {
    constructor(e, t = 1, n = 1e3){
        this.isFog = !0, this.name = "", this.color = new pe(e), this.near = t, this.far = n;
    }
    clone() {
        return new s1(this.color, this.near, this.far);
    }
    toJSON() {
        return {
            type: "Fog",
            name: this.name,
            color: this.color.getHex(),
            near: this.near,
            far: this.far
        };
    }
}, Io = class extends Je {
    constructor(){
        super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: this
        }));
    }
    copy(e, t) {
        return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t;
    }
}, Is = class {
    constructor(e, t){
        this.isInterleavedBuffer = !0, this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = Hr, this.updateRange = {
            offset: 0,
            count: -1
        }, this.version = 0, this.uuid = kt();
    }
    onUploadCallback() {}
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
    setUsage(e) {
        return this.usage = e, this;
    }
    copy(e) {
        return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
    }
    copyAt(e, t, n) {
        e *= this.stride, n *= t.stride;
        for(let i = 0, r = this.stride; i < r; i++)this.array[e + i] = t.array[n + i];
        return this;
    }
    set(e, t = 0) {
        return this.array.set(e, t), this;
    }
    clone(e) {
        e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = kt()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
        let t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(t, this.stride);
        return n.setUsage(this.usage), n;
    }
    onUpload(e) {
        return this.onUploadCallback = e, this;
    }
    toJSON(e) {
        return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = kt()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
            uuid: this.uuid,
            buffer: this.array.buffer._uuid,
            type: this.array.constructor.name,
            stride: this.stride
        };
    }
}, Pt = new A, Qi = class s1 {
    constructor(e, t, n, i = !1){
        this.isInterleavedBufferAttribute = !0, this.name = "", this.data = e, this.itemSize = t, this.offset = n, this.normalized = i;
    }
    get count() {
        return this.data.count;
    }
    get array() {
        return this.data.array;
    }
    set needsUpdate(e) {
        this.data.needsUpdate = e;
    }
    applyMatrix4(e) {
        for(let t = 0, n = this.data.count; t < n; t++)Pt.fromBufferAttribute(this, t), Pt.applyMatrix4(e), this.setXYZ(t, Pt.x, Pt.y, Pt.z);
        return this;
    }
    applyNormalMatrix(e) {
        for(let t = 0, n = this.count; t < n; t++)Pt.fromBufferAttribute(this, t), Pt.applyNormalMatrix(e), this.setXYZ(t, Pt.x, Pt.y, Pt.z);
        return this;
    }
    transformDirection(e) {
        for(let t = 0, n = this.count; t < n; t++)Pt.fromBufferAttribute(this, t), Pt.transformDirection(e), this.setXYZ(t, Pt.x, Pt.y, Pt.z);
        return this;
    }
    setX(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.data.array[e * this.data.stride + this.offset] = t, this;
    }
    setY(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = t, this;
    }
    setZ(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = t, this;
    }
    setW(e, t) {
        return this.normalized && (t = Be(t, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = t, this;
    }
    getX(e) {
        let t = this.data.array[e * this.data.stride + this.offset];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    getY(e) {
        let t = this.data.array[e * this.data.stride + this.offset + 1];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    getZ(e) {
        let t = this.data.array[e * this.data.stride + this.offset + 2];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    getW(e) {
        let t = this.data.array[e * this.data.stride + this.offset + 3];
        return this.normalized && (t = Ot(t, this.array)), t;
    }
    setXY(e, t, n) {
        return e = e * this.data.stride + this.offset, this.normalized && (t = Be(t, this.array), n = Be(n, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this;
    }
    setXYZ(e, t, n, i) {
        return e = e * this.data.stride + this.offset, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this;
    }
    setXYZW(e, t, n, i, r) {
        return e = e * this.data.stride + this.offset, this.normalized && (t = Be(t, this.array), n = Be(n, this.array), i = Be(i, this.array), r = Be(r, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this.data.array[e + 3] = r, this;
    }
    clone(e) {
        if (e === void 0) {
            console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
            let t = [];
            for(let n = 0; n < this.count; n++){
                let i = n * this.data.stride + this.offset;
                for(let r = 0; r < this.itemSize; r++)t.push(this.data.array[i + r]);
            }
            return new et(new this.array.constructor(t), this.itemSize, this.normalized);
        } else return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new s1(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
    }
    toJSON(e) {
        if (e === void 0) {
            console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
            let t = [];
            for(let n = 0; n < this.count; n++){
                let i = n * this.data.stride + this.offset;
                for(let r = 0; r < this.itemSize; r++)t.push(this.data.array[i + r]);
            }
            return {
                itemSize: this.itemSize,
                type: this.array.constructor.name,
                array: t,
                normalized: this.normalized
            };
        } else return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
            isInterleavedBufferAttribute: !0,
            itemSize: this.itemSize,
            data: this.data.uuid,
            offset: this.offset,
            normalized: this.normalized
        };
    }
}, ea = class extends bt {
    constructor(e){
        super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new pe(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
    }
}, Ii, ds = new A, Ui = new A, Di = new A, Ni = new Z, fs = new Z, Cd = new ze, hr = new A, ps = new A, ur = new A, Lh = new Z, ja = new Z, Ih = new Z, Uo = class extends Je {
    constructor(e = new ea){
        if (super(), this.isSprite = !0, this.type = "Sprite", Ii === void 0) {
            Ii = new Ge;
            let t = new Float32Array([
                -.5,
                -.5,
                0,
                0,
                0,
                .5,
                -.5,
                0,
                1,
                0,
                .5,
                .5,
                0,
                1,
                1,
                -.5,
                .5,
                0,
                0,
                1
            ]), n = new Is(t, 5);
            Ii.setIndex([
                0,
                1,
                2,
                0,
                2,
                3
            ]), Ii.setAttribute("position", new Qi(n, 3, 0, !1)), Ii.setAttribute("uv", new Qi(n, 2, 3, !1));
        }
        this.geometry = Ii, this.material = e, this.center = new Z(.5, .5);
    }
    raycast(e, t) {
        e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), Ui.setFromMatrixScale(this.matrixWorld), Cd.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), Di.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && Ui.multiplyScalar(-Di.z);
        let n = this.material.rotation, i, r;
        n !== 0 && (r = Math.cos(n), i = Math.sin(n));
        let a = this.center;
        dr(hr.set(-.5, -.5, 0), Di, a, Ui, i, r), dr(ps.set(.5, -.5, 0), Di, a, Ui, i, r), dr(ur.set(.5, .5, 0), Di, a, Ui, i, r), Lh.set(0, 0), ja.set(1, 0), Ih.set(1, 1);
        let o = e.ray.intersectTriangle(hr, ps, ur, !1, ds);
        if (o === null && (dr(ps.set(-.5, .5, 0), Di, a, Ui, i, r), ja.set(0, 1), o = e.ray.intersectTriangle(hr, ur, ps, !1, ds), o === null)) return;
        let c = e.ray.origin.distanceTo(ds);
        c < e.near || c > e.far || t.push({
            distance: c,
            point: ds.clone(),
            uv: Un.getInterpolation(ds, hr, ps, ur, Lh, ja, Ih, new Z),
            face: null,
            object: this
        });
    }
    copy(e, t) {
        return super.copy(e, t), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
    }
};
function dr(s1, e, t, n, i, r) {
    Ni.subVectors(s1, t).addScalar(.5).multiply(n), i !== void 0 ? (fs.x = r * Ni.x - i * Ni.y, fs.y = i * Ni.x + r * Ni.y) : fs.copy(Ni), s1.copy(e), s1.x += fs.x, s1.y += fs.y, s1.applyMatrix4(Cd);
}
var fr = new A, Uh = new A, Do = class extends Je {
    constructor(){
        super(), this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
            levels: {
                enumerable: !0,
                value: []
            },
            isLOD: {
                value: !0
            }
        }), this.autoUpdate = !0;
    }
    copy(e) {
        super.copy(e, !1);
        let t = e.levels;
        for(let n = 0, i = t.length; n < i; n++){
            let r = t[n];
            this.addLevel(r.object.clone(), r.distance, r.hysteresis);
        }
        return this.autoUpdate = e.autoUpdate, this;
    }
    addLevel(e, t = 0, n = 0) {
        t = Math.abs(t);
        let i = this.levels, r;
        for(r = 0; r < i.length && !(t < i[r].distance); r++);
        return i.splice(r, 0, {
            distance: t,
            hysteresis: n,
            object: e
        }), this.add(e), this;
    }
    getCurrentLevel() {
        return this._currentLevel;
    }
    getObjectForDistance(e) {
        let t = this.levels;
        if (t.length > 0) {
            let n, i;
            for(n = 1, i = t.length; n < i; n++){
                let r = t[n].distance;
                if (t[n].object.visible && (r -= r * t[n].hysteresis), e < r) break;
            }
            return t[n - 1].object;
        }
        return null;
    }
    raycast(e, t) {
        if (this.levels.length > 0) {
            fr.setFromMatrixPosition(this.matrixWorld);
            let i = e.ray.origin.distanceTo(fr);
            this.getObjectForDistance(i).raycast(e, t);
        }
    }
    update(e) {
        let t = this.levels;
        if (t.length > 1) {
            fr.setFromMatrixPosition(e.matrixWorld), Uh.setFromMatrixPosition(this.matrixWorld);
            let n = fr.distanceTo(Uh) / e.zoom;
            t[0].object.visible = !0;
            let i, r;
            for(i = 1, r = t.length; i < r; i++){
                let a = t[i].distance;
                if (t[i].object.visible && (a -= a * t[i].hysteresis), n >= a) t[i - 1].object.visible = !1, t[i].object.visible = !0;
                else break;
            }
            for(this._currentLevel = i - 1; i < r; i++)t[i].object.visible = !1;
        }
    }
    toJSON(e) {
        let t = super.toJSON(e);
        this.autoUpdate === !1 && (t.object.autoUpdate = !1), t.object.levels = [];
        let n = this.levels;
        for(let i = 0, r = n.length; i < r; i++){
            let a = n[i];
            t.object.levels.push({
                object: a.object.uuid,
                distance: a.distance,
                hysteresis: a.hysteresis
            });
        }
        return t;
    }
}, Dh = new A, Nh = new je, Oh = new je, W0 = new A, Fh = new ze, Oi = new A, eo = new Yt, Bh = new ze, to = new hi, No = class extends Mt {
    constructor(e, t){
        super(e, t), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new ze, this.bindMatrixInverse = new ze, this.boundingBox = null, this.boundingSphere = null;
    }
    computeBoundingBox() {
        let e = this.geometry;
        this.boundingBox === null && (this.boundingBox = new Qt), this.boundingBox.makeEmpty();
        let t = e.getAttribute("position");
        for(let n = 0; n < t.count; n++)Oi.fromBufferAttribute(t, n), this.applyBoneTransform(n, Oi), this.boundingBox.expandByPoint(Oi);
    }
    computeBoundingSphere() {
        let e = this.geometry;
        this.boundingSphere === null && (this.boundingSphere = new Yt), this.boundingSphere.makeEmpty();
        let t = e.getAttribute("position");
        for(let n = 0; n < t.count; n++)Oi.fromBufferAttribute(t, n), this.applyBoneTransform(n, Oi), this.boundingSphere.expandByPoint(Oi);
    }
    copy(e, t) {
        return super.copy(e, t), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
    }
    raycast(e, t) {
        let n = this.material, i = this.matrixWorld;
        n !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), eo.copy(this.boundingSphere), eo.applyMatrix4(i), e.ray.intersectsSphere(eo) !== !1 && (Bh.copy(i).invert(), to.copy(e.ray).applyMatrix4(Bh), !(this.boundingBox !== null && to.intersectsBox(this.boundingBox) === !1) && this._computeIntersections(e, t, to)));
    }
    getVertexPosition(e, t) {
        return super.getVertexPosition(e, t), this.applyBoneTransform(e, t), t;
    }
    bind(e, t) {
        this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
    }
    pose() {
        this.skeleton.pose();
    }
    normalizeSkinWeights() {
        let e = new je, t = this.geometry.attributes.skinWeight;
        for(let n = 0, i = t.count; n < i; n++){
            e.fromBufferAttribute(t, n);
            let r = 1 / e.manhattanLength();
            r !== 1 / 0 ? e.multiplyScalar(r) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w);
        }
    }
    updateMatrixWorld(e) {
        super.updateMatrixWorld(e), this.bindMode === "attached" ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === "detached" ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
    }
    applyBoneTransform(e, t) {
        let n = this.skeleton, i = this.geometry;
        Nh.fromBufferAttribute(i.attributes.skinIndex, e), Oh.fromBufferAttribute(i.attributes.skinWeight, e), Dh.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
        for(let r = 0; r < 4; r++){
            let a = Oh.getComponent(r);
            if (a !== 0) {
                let o = Nh.getComponent(r);
                Fh.multiplyMatrices(n.bones[o].matrixWorld, n.boneInverses[o]), t.addScaledVector(W0.copy(Dh).applyMatrix4(Fh), a);
            }
        }
        return t.applyMatrix4(this.bindMatrixInverse);
    }
    boneTransform(e, t) {
        return console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151."), this.applyBoneTransform(e, t);
    }
}, ta = class extends Je {
    constructor(){
        super(), this.isBone = !0, this.type = "Bone";
    }
}, oi = class extends St {
    constructor(e = null, t = 1, n = 1, i, r, a, o, c, l = pt, h = pt, u, d){
        super(null, a, o, c, l, h, i, r, u, d), this.isDataTexture = !0, this.image = {
            data: e,
            width: t,
            height: n
        }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
    }
}, zh = new ze, X0 = new ze, Oo = class s1 {
    constructor(e = [], t = []){
        this.uuid = kt(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.boneTextureSize = 0, this.init();
    }
    init() {
        let e = this.bones, t = this.boneInverses;
        if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0) this.calculateInverses();
        else if (e.length !== t.length) {
            console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
            for(let n = 0, i = this.bones.length; n < i; n++)this.boneInverses.push(new ze);
        }
    }
    calculateInverses() {
        this.boneInverses.length = 0;
        for(let e = 0, t = this.bones.length; e < t; e++){
            let n = new ze;
            this.bones[e] && n.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(n);
        }
    }
    pose() {
        for(let e = 0, t = this.bones.length; e < t; e++){
            let n = this.bones[e];
            n && n.matrixWorld.copy(this.boneInverses[e]).invert();
        }
        for(let e = 0, t = this.bones.length; e < t; e++){
            let n = this.bones[e];
            n && (n.parent && n.parent.isBone ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld)) : n.matrix.copy(n.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale));
        }
    }
    update() {
        let e = this.bones, t = this.boneInverses, n = this.boneMatrices, i = this.boneTexture;
        for(let r = 0, a = e.length; r < a; r++){
            let o = e[r] ? e[r].matrixWorld : X0;
            zh.multiplyMatrices(o, t[r]), zh.toArray(n, r * 16);
        }
        i !== null && (i.needsUpdate = !0);
    }
    clone() {
        return new s1(this.bones, this.boneInverses);
    }
    computeBoneTexture() {
        let e = Math.sqrt(this.bones.length * 4);
        e = yd(e), e = Math.max(e, 4);
        let t = new Float32Array(e * e * 4);
        t.set(this.boneMatrices);
        let n = new oi(t, e, e, Wt, xn);
        return n.needsUpdate = !0, this.boneMatrices = t, this.boneTexture = n, this.boneTextureSize = e, this;
    }
    getBoneByName(e) {
        for(let t = 0, n = this.bones.length; t < n; t++){
            let i = this.bones[t];
            if (i.name === e) return i;
        }
    }
    dispose() {
        this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
    }
    fromJSON(e, t) {
        this.uuid = e.uuid;
        for(let n = 0, i = e.bones.length; n < i; n++){
            let r = e.bones[n], a = t[r];
            a === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", r), a = new ta), this.bones.push(a), this.boneInverses.push(new ze().fromArray(e.boneInverses[n]));
        }
        return this.init(), this;
    }
    toJSON() {
        let e = {
            metadata: {
                version: 4.6,
                type: "Skeleton",
                generator: "Skeleton.toJSON"
            },
            bones: [],
            boneInverses: []
        };
        e.uuid = this.uuid;
        let t = this.bones, n = this.boneInverses;
        for(let i = 0, r = t.length; i < r; i++){
            let a = t[i];
            e.bones.push(a.uuid);
            let o = n[i];
            e.boneInverses.push(o.toArray());
        }
        return e;
    }
}, ui = class extends et {
    constructor(e, t, n, i = 1){
        super(e, t, n), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = i;
    }
    copy(e) {
        return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
    }
}, Fi = new ze, Vh = new ze, pr = [], kh = new Qt, q0 = new ze, ms = new Mt, gs = new Yt, Fo = class extends Mt {
    constructor(e, t, n){
        super(e, t), this.isInstancedMesh = !0, this.instanceMatrix = new ui(new Float32Array(n * 16), 16), this.instanceColor = null, this.count = n, this.boundingBox = null, this.boundingSphere = null;
        for(let i = 0; i < n; i++)this.setMatrixAt(i, q0);
    }
    computeBoundingBox() {
        let e = this.geometry, t = this.count;
        this.boundingBox === null && (this.boundingBox = new Qt), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
        for(let n = 0; n < t; n++)this.getMatrixAt(n, Fi), kh.copy(e.boundingBox).applyMatrix4(Fi), this.boundingBox.union(kh);
    }
    computeBoundingSphere() {
        let e = this.geometry, t = this.count;
        this.boundingSphere === null && (this.boundingSphere = new Yt), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
        for(let n = 0; n < t; n++)this.getMatrixAt(n, Fi), gs.copy(e.boundingSphere).applyMatrix4(Fi), this.boundingSphere.union(gs);
    }
    copy(e, t) {
        return super.copy(e, t), this.instanceMatrix.copy(e.instanceMatrix), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
    }
    getColorAt(e, t) {
        t.fromArray(this.instanceColor.array, e * 3);
    }
    getMatrixAt(e, t) {
        t.fromArray(this.instanceMatrix.array, e * 16);
    }
    raycast(e, t) {
        let n = this.matrixWorld, i = this.count;
        if (ms.geometry = this.geometry, ms.material = this.material, ms.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), gs.copy(this.boundingSphere), gs.applyMatrix4(n), e.ray.intersectsSphere(gs) !== !1)) for(let r = 0; r < i; r++){
            this.getMatrixAt(r, Fi), Vh.multiplyMatrices(n, Fi), ms.matrixWorld = Vh, ms.raycast(e, pr);
            for(let a = 0, o = pr.length; a < o; a++){
                let c = pr[a];
                c.instanceId = r, c.object = this, t.push(c);
            }
            pr.length = 0;
        }
    }
    setColorAt(e, t) {
        this.instanceColor === null && (this.instanceColor = new ui(new Float32Array(this.instanceMatrix.count * 3), 3)), t.toArray(this.instanceColor.array, e * 3);
    }
    setMatrixAt(e, t) {
        t.toArray(this.instanceMatrix.array, e * 16);
    }
    updateMorphTargets() {}
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
}, wt = class extends bt {
    constructor(e){
        super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new pe(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
    }
}, Hh = new A, Gh = new A, Wh = new ze, no = new hi, mr = new Yt, bn = class extends Je {
    constructor(e = new Ge, t = new wt){
        super(), this.isLine = !0, this.type = "Line", this.geometry = e, this.material = t, this.updateMorphTargets();
    }
    copy(e, t) {
        return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
    }
    computeLineDistances() {
        let e = this.geometry;
        if (e.index === null) {
            let t = e.attributes.position, n = [
                0
            ];
            for(let i = 1, r = t.count; i < r; i++)Hh.fromBufferAttribute(t, i - 1), Gh.fromBufferAttribute(t, i), n[i] = n[i - 1], n[i] += Hh.distanceTo(Gh);
            e.setAttribute("lineDistance", new ve(n, 1));
        } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        return this;
    }
    raycast(e, t) {
        let n = this.geometry, i = this.matrixWorld, r = e.params.Line.threshold, a = n.drawRange;
        if (n.boundingSphere === null && n.computeBoundingSphere(), mr.copy(n.boundingSphere), mr.applyMatrix4(i), mr.radius += r, e.ray.intersectsSphere(mr) === !1) return;
        Wh.copy(i).invert(), no.copy(e.ray).applyMatrix4(Wh);
        let o = r / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = o * o, l = new A, h = new A, u = new A, d = new A, f = this.isLineSegments ? 2 : 1, m = n.index, g = n.attributes.position;
        if (m !== null) {
            let p = Math.max(0, a.start), v = Math.min(m.count, a.start + a.count);
            for(let x = p, y = v - 1; x < y; x += f){
                let b = m.getX(x), w = m.getX(x + 1);
                if (l.fromBufferAttribute(g, b), h.fromBufferAttribute(g, w), no.distanceSqToSegment(l, h, d, u) > c) continue;
                d.applyMatrix4(this.matrixWorld);
                let I = e.ray.origin.distanceTo(d);
                I < e.near || I > e.far || t.push({
                    distance: I,
                    point: u.clone().applyMatrix4(this.matrixWorld),
                    index: x,
                    face: null,
                    faceIndex: null,
                    object: this
                });
            }
        } else {
            let p = Math.max(0, a.start), v = Math.min(g.count, a.start + a.count);
            for(let x = p, y = v - 1; x < y; x += f){
                if (l.fromBufferAttribute(g, x), h.fromBufferAttribute(g, x + 1), no.distanceSqToSegment(l, h, d, u) > c) continue;
                d.applyMatrix4(this.matrixWorld);
                let w = e.ray.origin.distanceTo(d);
                w < e.near || w > e.far || t.push({
                    distance: w,
                    point: u.clone().applyMatrix4(this.matrixWorld),
                    index: x,
                    face: null,
                    faceIndex: null,
                    object: this
                });
            }
        }
    }
    updateMorphTargets() {
        let t = this.geometry.morphAttributes, n = Object.keys(t);
        if (n.length > 0) {
            let i = t[n[0]];
            if (i !== void 0) {
                this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                for(let r = 0, a = i.length; r < a; r++){
                    let o = i[r].name || String(r);
                    this.morphTargetInfluences.push(0), this.morphTargetDictionary[o] = r;
                }
            }
        }
    }
}, Xh = new A, qh = new A, en = class extends bn {
    constructor(e, t){
        super(e, t), this.isLineSegments = !0, this.type = "LineSegments";
    }
    computeLineDistances() {
        let e = this.geometry;
        if (e.index === null) {
            let t = e.attributes.position, n = [];
            for(let i = 0, r = t.count; i < r; i += 2)Xh.fromBufferAttribute(t, i), qh.fromBufferAttribute(t, i + 1), n[i] = i === 0 ? 0 : n[i - 1], n[i + 1] = n[i] + Xh.distanceTo(qh);
            e.setAttribute("lineDistance", new ve(n, 1));
        } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        return this;
    }
}, Bo = class extends bn {
    constructor(e, t){
        super(e, t), this.isLineLoop = !0, this.type = "LineLoop";
    }
}, na = class extends bt {
    constructor(e){
        super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new pe(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
    }
}, Yh = new ze, zo = new hi, gr = new Yt, _r = new A, Vo = class extends Je {
    constructor(e = new Ge, t = new na){
        super(), this.isPoints = !0, this.type = "Points", this.geometry = e, this.material = t, this.updateMorphTargets();
    }
    copy(e, t) {
        return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
    }
    raycast(e, t) {
        let n = this.geometry, i = this.matrixWorld, r = e.params.Points.threshold, a = n.drawRange;
        if (n.boundingSphere === null && n.computeBoundingSphere(), gr.copy(n.boundingSphere), gr.applyMatrix4(i), gr.radius += r, e.ray.intersectsSphere(gr) === !1) return;
        Yh.copy(i).invert(), zo.copy(e.ray).applyMatrix4(Yh);
        let o = r / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = o * o, l = n.index, u = n.attributes.position;
        if (l !== null) {
            let d = Math.max(0, a.start), f = Math.min(l.count, a.start + a.count);
            for(let m = d, _ = f; m < _; m++){
                let g = l.getX(m);
                _r.fromBufferAttribute(u, g), Zh(_r, g, c, i, e, t, this);
            }
        } else {
            let d = Math.max(0, a.start), f = Math.min(u.count, a.start + a.count);
            for(let m = d, _ = f; m < _; m++)_r.fromBufferAttribute(u, m), Zh(_r, m, c, i, e, t, this);
        }
    }
    updateMorphTargets() {
        let t = this.geometry.morphAttributes, n = Object.keys(t);
        if (n.length > 0) {
            let i = t[n[0]];
            if (i !== void 0) {
                this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                for(let r = 0, a = i.length; r < a; r++){
                    let o = i[r].name || String(r);
                    this.morphTargetInfluences.push(0), this.morphTargetDictionary[o] = r;
                }
            }
        }
    }
};
function Zh(s1, e, t, n, i, r, a) {
    let o = zo.distanceSqToPoint(s1);
    if (o < t) {
        let c = new A;
        zo.closestPointToPoint(s1, c), c.applyMatrix4(n);
        let l = i.ray.origin.distanceTo(c);
        if (l < i.near || l > i.far) return;
        r.push({
            distance: l,
            distanceToRay: Math.sqrt(o),
            point: c,
            index: e,
            face: null,
            object: a
        });
    }
}
var Jh = class extends St {
    constructor(e, t, n, i, r, a, o, c, l){
        super(e, t, n, i, r, a, o, c, l), this.isVideoTexture = !0, this.minFilter = a !== void 0 ? a : mt, this.magFilter = r !== void 0 ? r : mt, this.generateMipmaps = !1;
        let h = this;
        function u() {
            h.needsUpdate = !0, e.requestVideoFrameCallback(u);
        }
        "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(u);
    }
    clone() {
        return new this.constructor(this.image).copy(this);
    }
    update() {
        let e = this.image;
        "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
    }
}, $h = class extends St {
    constructor(e, t){
        super({
            width: e,
            height: t
        }), this.isFramebufferTexture = !0, this.magFilter = pt, this.minFilter = pt, this.generateMipmaps = !1, this.needsUpdate = !0;
    }
}, Us = class extends St {
    constructor(e, t, n, i, r, a, o, c, l, h, u, d){
        super(null, a, o, c, l, h, i, r, u, d), this.isCompressedTexture = !0, this.image = {
            width: t,
            height: n
        }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
    }
}, Kh = class extends Us {
    constructor(e, t, n, i, r, a){
        super(e, t, n, r, a), this.isCompressedArrayTexture = !0, this.image.depth = i, this.wrapR = It;
    }
}, Qh = class extends Us {
    constructor(e, t, n){
        super(void 0, e[0].width, e[0].height, t, n, zn), this.isCompressedCubeTexture = !0, this.isCubeTexture = !0, this.image = e;
    }
}, jh = class extends St {
    constructor(e, t, n, i, r, a, o, c, l){
        super(e, t, n, i, r, a, o, c, l), this.isCanvasTexture = !0, this.needsUpdate = !0;
    }
}, Zt = class {
    constructor(){
        this.type = "Curve", this.arcLengthDivisions = 200;
    }
    getPoint() {
        return console.warn("THREE.Curve: .getPoint() not implemented."), null;
    }
    getPointAt(e, t) {
        let n = this.getUtoTmapping(e);
        return this.getPoint(n, t);
    }
    getPoints(e = 5) {
        let t = [];
        for(let n = 0; n <= e; n++)t.push(this.getPoint(n / e));
        return t;
    }
    getSpacedPoints(e = 5) {
        let t = [];
        for(let n = 0; n <= e; n++)t.push(this.getPointAt(n / e));
        return t;
    }
    getLength() {
        let e = this.getLengths();
        return e[e.length - 1];
    }
    getLengths(e = this.arcLengthDivisions) {
        if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate) return this.cacheArcLengths;
        this.needsUpdate = !1;
        let t = [], n, i = this.getPoint(0), r = 0;
        t.push(0);
        for(let a = 1; a <= e; a++)n = this.getPoint(a / e), r += n.distanceTo(i), t.push(r), i = n;
        return this.cacheArcLengths = t, t;
    }
    updateArcLengths() {
        this.needsUpdate = !0, this.getLengths();
    }
    getUtoTmapping(e, t) {
        let n = this.getLengths(), i = 0, r = n.length, a;
        t ? a = t : a = e * n[r - 1];
        let o = 0, c = r - 1, l;
        for(; o <= c;)if (i = Math.floor(o + (c - o) / 2), l = n[i] - a, l < 0) o = i + 1;
        else if (l > 0) c = i - 1;
        else {
            c = i;
            break;
        }
        if (i = c, n[i] === a) return i / (r - 1);
        let h = n[i], d = n[i + 1] - h, f = (a - h) / d;
        return (i + f) / (r - 1);
    }
    getTangent(e, t) {
        let i = e - 1e-4, r = e + 1e-4;
        i < 0 && (i = 0), r > 1 && (r = 1);
        let a = this.getPoint(i), o = this.getPoint(r), c = t || (a.isVector2 ? new Z : new A);
        return c.copy(o).sub(a).normalize(), c;
    }
    getTangentAt(e, t) {
        let n = this.getUtoTmapping(e);
        return this.getTangent(n, t);
    }
    computeFrenetFrames(e, t) {
        let n = new A, i = [], r = [], a = [], o = new A, c = new ze;
        for(let f = 0; f <= e; f++){
            let m = f / e;
            i[f] = this.getTangentAt(m, new A);
        }
        r[0] = new A, a[0] = new A;
        let l = Number.MAX_VALUE, h = Math.abs(i[0].x), u = Math.abs(i[0].y), d = Math.abs(i[0].z);
        h <= l && (l = h, n.set(1, 0, 0)), u <= l && (l = u, n.set(0, 1, 0)), d <= l && n.set(0, 0, 1), o.crossVectors(i[0], n).normalize(), r[0].crossVectors(i[0], o), a[0].crossVectors(i[0], r[0]);
        for(let f = 1; f <= e; f++){
            if (r[f] = r[f - 1].clone(), a[f] = a[f - 1].clone(), o.crossVectors(i[f - 1], i[f]), o.length() > Number.EPSILON) {
                o.normalize();
                let m = Math.acos(ct(i[f - 1].dot(i[f]), -1, 1));
                r[f].applyMatrix4(c.makeRotationAxis(o, m));
            }
            a[f].crossVectors(i[f], r[f]);
        }
        if (t === !0) {
            let f = Math.acos(ct(r[0].dot(r[e]), -1, 1));
            f /= e, i[0].dot(o.crossVectors(r[0], r[e])) > 0 && (f = -f);
            for(let m = 1; m <= e; m++)r[m].applyMatrix4(c.makeRotationAxis(i[m], f * m)), a[m].crossVectors(i[m], r[m]);
        }
        return {
            tangents: i,
            normals: r,
            binormals: a
        };
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.arcLengthDivisions = e.arcLengthDivisions, this;
    }
    toJSON() {
        let e = {
            metadata: {
                version: 4.6,
                type: "Curve",
                generator: "Curve.toJSON"
            }
        };
        return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
    }
    fromJSON(e) {
        return this.arcLengthDivisions = e.arcLengthDivisions, this;
    }
}, Ds = class extends Zt {
    constructor(e = 0, t = 0, n = 1, i = 1, r = 0, a = Math.PI * 2, o = !1, c = 0){
        super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = n, this.yRadius = i, this.aStartAngle = r, this.aEndAngle = a, this.aClockwise = o, this.aRotation = c;
    }
    getPoint(e, t) {
        let n = t || new Z, i = Math.PI * 2, r = this.aEndAngle - this.aStartAngle, a = Math.abs(r) < Number.EPSILON;
        for(; r < 0;)r += i;
        for(; r > i;)r -= i;
        r < Number.EPSILON && (a ? r = 0 : r = i), this.aClockwise === !0 && !a && (r === i ? r = -i : r = r - i);
        let o = this.aStartAngle + e * r, c = this.aX + this.xRadius * Math.cos(o), l = this.aY + this.yRadius * Math.sin(o);
        if (this.aRotation !== 0) {
            let h = Math.cos(this.aRotation), u = Math.sin(this.aRotation), d = c - this.aX, f = l - this.aY;
            c = d * h - f * u + this.aX, l = d * u + f * h + this.aY;
        }
        return n.set(c, l);
    }
    copy(e) {
        return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
    }
}, ko = class extends Ds {
    constructor(e, t, n, i, r, a){
        super(e, t, n, n, i, r, a), this.isArcCurve = !0, this.type = "ArcCurve";
    }
};
function Jc() {
    let s1 = 0, e = 0, t = 0, n = 0;
    function i(r, a, o, c) {
        s1 = r, e = o, t = -3 * r + 3 * a - 2 * o - c, n = 2 * r - 2 * a + o + c;
    }
    return {
        initCatmullRom: function(r, a, o, c, l) {
            i(a, o, l * (o - r), l * (c - a));
        },
        initNonuniformCatmullRom: function(r, a, o, c, l, h, u) {
            let d = (a - r) / l - (o - r) / (l + h) + (o - a) / h, f = (o - a) / h - (c - a) / (h + u) + (c - o) / u;
            d *= h, f *= h, i(a, o, d, f);
        },
        calc: function(r) {
            let a = r * r, o = a * r;
            return s1 + e * r + t * a + n * o;
        }
    };
}
var xr = new A, io = new Jc, so = new Jc, ro = new Jc, Ho = class extends Zt {
    constructor(e = [], t = !1, n = "centripetal", i = .5){
        super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = n, this.tension = i;
    }
    getPoint(e, t = new A) {
        let n = t, i = this.points, r = i.length, a = (r - (this.closed ? 0 : 1)) * e, o = Math.floor(a), c = a - o;
        this.closed ? o += o > 0 ? 0 : (Math.floor(Math.abs(o) / r) + 1) * r : c === 0 && o === r - 1 && (o = r - 2, c = 1);
        let l, h;
        this.closed || o > 0 ? l = i[(o - 1) % r] : (xr.subVectors(i[0], i[1]).add(i[0]), l = xr);
        let u = i[o % r], d = i[(o + 1) % r];
        if (this.closed || o + 2 < r ? h = i[(o + 2) % r] : (xr.subVectors(i[r - 1], i[r - 2]).add(i[r - 1]), h = xr), this.curveType === "centripetal" || this.curveType === "chordal") {
            let f = this.curveType === "chordal" ? .5 : .25, m = Math.pow(l.distanceToSquared(u), f), _ = Math.pow(u.distanceToSquared(d), f), g = Math.pow(d.distanceToSquared(h), f);
            _ < 1e-4 && (_ = 1), m < 1e-4 && (m = _), g < 1e-4 && (g = _), io.initNonuniformCatmullRom(l.x, u.x, d.x, h.x, m, _, g), so.initNonuniformCatmullRom(l.y, u.y, d.y, h.y, m, _, g), ro.initNonuniformCatmullRom(l.z, u.z, d.z, h.z, m, _, g);
        } else this.curveType === "catmullrom" && (io.initCatmullRom(l.x, u.x, d.x, h.x, this.tension), so.initCatmullRom(l.y, u.y, d.y, h.y, this.tension), ro.initCatmullRom(l.z, u.z, d.z, h.z, this.tension));
        return n.set(io.calc(c), so.calc(c), ro.calc(c)), n;
    }
    copy(e) {
        super.copy(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(i.clone());
        }
        return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
    }
    toJSON() {
        let e = super.toJSON();
        e.points = [];
        for(let t = 0, n = this.points.length; t < n; t++){
            let i = this.points[t];
            e.points.push(i.toArray());
        }
        return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(new A().fromArray(i));
        }
        return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
    }
};
function eu(s1, e, t, n, i) {
    let r = (n - e) * .5, a = (i - t) * .5, o = s1 * s1, c = s1 * o;
    return (2 * t - 2 * n + r + a) * c + (-3 * t + 3 * n - 2 * r - a) * o + r * s1 + t;
}
function Y0(s1, e) {
    let t = 1 - s1;
    return t * t * e;
}
function Z0(s1, e) {
    return 2 * (1 - s1) * s1 * e;
}
function J0(s1, e) {
    return s1 * s1 * e;
}
function bs(s1, e, t, n) {
    return Y0(s1, e) + Z0(s1, t) + J0(s1, n);
}
function $0(s1, e) {
    let t = 1 - s1;
    return t * t * t * e;
}
function K0(s1, e) {
    let t = 1 - s1;
    return 3 * t * t * s1 * e;
}
function Q0(s1, e) {
    return 3 * (1 - s1) * s1 * s1 * e;
}
function j0(s1, e) {
    return s1 * s1 * s1 * e;
}
function Es(s1, e, t, n, i) {
    return $0(s1, e) + K0(s1, t) + Q0(s1, n) + j0(s1, i);
}
var ia = class extends Zt {
    constructor(e = new Z, t = new Z, n = new Z, i = new Z){
        super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i;
    }
    getPoint(e, t = new Z) {
        let n = t, i = this.v0, r = this.v1, a = this.v2, o = this.v3;
        return n.set(Es(e, i.x, r.x, a.x, o.x), Es(e, i.y, r.y, a.y, o.y)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
    }
}, Go = class extends Zt {
    constructor(e = new A, t = new A, n = new A, i = new A){
        super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i;
    }
    getPoint(e, t = new A) {
        let n = t, i = this.v0, r = this.v1, a = this.v2, o = this.v3;
        return n.set(Es(e, i.x, r.x, a.x, o.x), Es(e, i.y, r.y, a.y, o.y), Es(e, i.z, r.z, a.z, o.z)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
    }
}, sa = class extends Zt {
    constructor(e = new Z, t = new Z){
        super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = e, this.v2 = t;
    }
    getPoint(e, t = new Z) {
        let n = t;
        return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
    }
    getPointAt(e, t) {
        return this.getPoint(e, t);
    }
    getTangent(e, t = new Z) {
        return t.subVectors(this.v2, this.v1).normalize();
    }
    getTangentAt(e, t) {
        return this.getTangent(e, t);
    }
    copy(e) {
        return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
}, Wo = class extends Zt {
    constructor(e = new A, t = new A){
        super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = e, this.v2 = t;
    }
    getPoint(e, t = new A) {
        let n = t;
        return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
    }
    getPointAt(e, t) {
        return this.getPoint(e, t);
    }
    getTangent(e, t = new A) {
        return t.subVectors(this.v2, this.v1).normalize();
    }
    getTangentAt(e, t) {
        return this.getTangent(e, t);
    }
    copy(e) {
        return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
}, ra = class extends Zt {
    constructor(e = new Z, t = new Z, n = new Z){
        super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n;
    }
    getPoint(e, t = new Z) {
        let n = t, i = this.v0, r = this.v1, a = this.v2;
        return n.set(bs(e, i.x, r.x, a.x), bs(e, i.y, r.y, a.y)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
}, aa = class extends Zt {
    constructor(e = new A, t = new A, n = new A){
        super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n;
    }
    getPoint(e, t = new A) {
        let n = t, i = this.v0, r = this.v1, a = this.v2;
        return n.set(bs(e, i.x, r.x, a.x), bs(e, i.y, r.y, a.y), bs(e, i.z, r.z, a.z)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
}, oa = class extends Zt {
    constructor(e = []){
        super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = e;
    }
    getPoint(e, t = new Z) {
        let n = t, i = this.points, r = (i.length - 1) * e, a = Math.floor(r), o = r - a, c = i[a === 0 ? a : a - 1], l = i[a], h = i[a > i.length - 2 ? i.length - 1 : a + 1], u = i[a > i.length - 3 ? i.length - 1 : a + 2];
        return n.set(eu(o, c.x, l.x, h.x, u.x), eu(o, c.y, l.y, h.y, u.y)), n;
    }
    copy(e) {
        super.copy(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(i.clone());
        }
        return this;
    }
    toJSON() {
        let e = super.toJSON();
        e.points = [];
        for(let t = 0, n = this.points.length; t < n; t++){
            let i = this.points[t];
            e.points.push(i.toArray());
        }
        return e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(new Z().fromArray(i));
        }
        return this;
    }
}, ca = Object.freeze({
    __proto__: null,
    ArcCurve: ko,
    CatmullRomCurve3: Ho,
    CubicBezierCurve: ia,
    CubicBezierCurve3: Go,
    EllipseCurve: Ds,
    LineCurve: sa,
    LineCurve3: Wo,
    QuadraticBezierCurve: ra,
    QuadraticBezierCurve3: aa,
    SplineCurve: oa
}), Xo = class extends Zt {
    constructor(){
        super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
    }
    add(e) {
        this.curves.push(e);
    }
    closePath() {
        let e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
        if (!e.equals(t)) {
            let n = e.isVector2 === !0 ? "LineCurve" : "LineCurve3";
            this.curves.push(new ca[n](t, e));
        }
        return this;
    }
    getPoint(e, t) {
        let n = e * this.getLength(), i = this.getCurveLengths(), r = 0;
        for(; r < i.length;){
            if (i[r] >= n) {
                let a = i[r] - n, o = this.curves[r], c = o.getLength(), l = c === 0 ? 0 : 1 - a / c;
                return o.getPointAt(l, t);
            }
            r++;
        }
        return null;
    }
    getLength() {
        let e = this.getCurveLengths();
        return e[e.length - 1];
    }
    updateArcLengths() {
        this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
    }
    getCurveLengths() {
        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
        let e = [], t = 0;
        for(let n = 0, i = this.curves.length; n < i; n++)t += this.curves[n].getLength(), e.push(t);
        return this.cacheLengths = e, e;
    }
    getSpacedPoints(e = 40) {
        let t = [];
        for(let n = 0; n <= e; n++)t.push(this.getPoint(n / e));
        return this.autoClose && t.push(t[0]), t;
    }
    getPoints(e = 12) {
        let t = [], n;
        for(let i = 0, r = this.curves; i < r.length; i++){
            let a = r[i], o = a.isEllipseCurve ? e * 2 : a.isLineCurve || a.isLineCurve3 ? 1 : a.isSplineCurve ? e * a.points.length : e, c = a.getPoints(o);
            for(let l = 0; l < c.length; l++){
                let h = c[l];
                n && n.equals(h) || (t.push(h), n = h);
            }
        }
        return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
    }
    copy(e) {
        super.copy(e), this.curves = [];
        for(let t = 0, n = e.curves.length; t < n; t++){
            let i = e.curves[t];
            this.curves.push(i.clone());
        }
        return this.autoClose = e.autoClose, this;
    }
    toJSON() {
        let e = super.toJSON();
        e.autoClose = this.autoClose, e.curves = [];
        for(let t = 0, n = this.curves.length; t < n; t++){
            let i = this.curves[t];
            e.curves.push(i.toJSON());
        }
        return e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
        for(let t = 0, n = e.curves.length; t < n; t++){
            let i = e.curves[t];
            this.curves.push(new ca[i.type]().fromJSON(i));
        }
        return this;
    }
}, ji = class extends Xo {
    constructor(e){
        super(), this.type = "Path", this.currentPoint = new Z, e && this.setFromPoints(e);
    }
    setFromPoints(e) {
        this.moveTo(e[0].x, e[0].y);
        for(let t = 1, n = e.length; t < n; t++)this.lineTo(e[t].x, e[t].y);
        return this;
    }
    moveTo(e, t) {
        return this.currentPoint.set(e, t), this;
    }
    lineTo(e, t) {
        let n = new sa(this.currentPoint.clone(), new Z(e, t));
        return this.curves.push(n), this.currentPoint.set(e, t), this;
    }
    quadraticCurveTo(e, t, n, i) {
        let r = new ra(this.currentPoint.clone(), new Z(e, t), new Z(n, i));
        return this.curves.push(r), this.currentPoint.set(n, i), this;
    }
    bezierCurveTo(e, t, n, i, r, a) {
        let o = new ia(this.currentPoint.clone(), new Z(e, t), new Z(n, i), new Z(r, a));
        return this.curves.push(o), this.currentPoint.set(r, a), this;
    }
    splineThru(e) {
        let t = [
            this.currentPoint.clone()
        ].concat(e), n = new oa(t);
        return this.curves.push(n), this.currentPoint.copy(e[e.length - 1]), this;
    }
    arc(e, t, n, i, r, a) {
        let o = this.currentPoint.x, c = this.currentPoint.y;
        return this.absarc(e + o, t + c, n, i, r, a), this;
    }
    absarc(e, t, n, i, r, a) {
        return this.absellipse(e, t, n, n, i, r, a), this;
    }
    ellipse(e, t, n, i, r, a, o, c) {
        let l = this.currentPoint.x, h = this.currentPoint.y;
        return this.absellipse(e + l, t + h, n, i, r, a, o, c), this;
    }
    absellipse(e, t, n, i, r, a, o, c) {
        let l = new Ds(e, t, n, i, r, a, o, c);
        if (this.curves.length > 0) {
            let u = l.getPoint(0);
            u.equals(this.currentPoint) || this.lineTo(u.x, u.y);
        }
        this.curves.push(l);
        let h = l.getPoint(1);
        return this.currentPoint.copy(h), this;
    }
    copy(e) {
        return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.currentPoint = this.currentPoint.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
    }
}, la = class s1 extends Ge {
    constructor(e = [
        new Z(0, -.5),
        new Z(.5, 0),
        new Z(0, .5)
    ], t = 12, n = 0, i = Math.PI * 2){
        super(), this.type = "LatheGeometry", this.parameters = {
            points: e,
            segments: t,
            phiStart: n,
            phiLength: i
        }, t = Math.floor(t), i = ct(i, 0, Math.PI * 2);
        let r = [], a = [], o = [], c = [], l = [], h = 1 / t, u = new A, d = new Z, f = new A, m = new A, _ = new A, g = 0, p = 0;
        for(let v = 0; v <= e.length - 1; v++)switch(v){
            case 0:
                g = e[v + 1].x - e[v].x, p = e[v + 1].y - e[v].y, f.x = p * 1, f.y = -g, f.z = p * 0, _.copy(f), f.normalize(), c.push(f.x, f.y, f.z);
                break;
            case e.length - 1:
                c.push(_.x, _.y, _.z);
                break;
            default:
                g = e[v + 1].x - e[v].x, p = e[v + 1].y - e[v].y, f.x = p * 1, f.y = -g, f.z = p * 0, m.copy(f), f.x += _.x, f.y += _.y, f.z += _.z, f.normalize(), c.push(f.x, f.y, f.z), _.copy(m);
        }
        for(let v = 0; v <= t; v++){
            let x = n + v * h * i, y = Math.sin(x), b = Math.cos(x);
            for(let w = 0; w <= e.length - 1; w++){
                u.x = e[w].x * y, u.y = e[w].y, u.z = e[w].x * b, a.push(u.x, u.y, u.z), d.x = v / t, d.y = w / (e.length - 1), o.push(d.x, d.y);
                let R = c[3 * w + 0] * y, I = c[3 * w + 1], M = c[3 * w + 0] * b;
                l.push(R, I, M);
            }
        }
        for(let v = 0; v < t; v++)for(let x = 0; x < e.length - 1; x++){
            let y = x + v * e.length, b = y, w = y + e.length, R = y + e.length + 1, I = y + 1;
            r.push(b, w, I), r.push(R, I, w);
        }
        this.setIndex(r), this.setAttribute("position", new ve(a, 3)), this.setAttribute("uv", new ve(o, 2)), this.setAttribute("normal", new ve(l, 3));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.points, e.segments, e.phiStart, e.phiLength);
    }
}, qo = class s1 extends la {
    constructor(e = 1, t = 1, n = 4, i = 8){
        let r = new ji;
        r.absarc(0, -t / 2, e, Math.PI * 1.5, 0), r.absarc(0, t / 2, e, 0, Math.PI * .5), super(r.getPoints(n), i), this.type = "CapsuleGeometry", this.parameters = {
            radius: e,
            length: t,
            capSegments: n,
            radialSegments: i
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.length, e.capSegments, e.radialSegments);
    }
}, Yo = class s1 extends Ge {
    constructor(e = 1, t = 32, n = 0, i = Math.PI * 2){
        super(), this.type = "CircleGeometry", this.parameters = {
            radius: e,
            segments: t,
            thetaStart: n,
            thetaLength: i
        }, t = Math.max(3, t);
        let r = [], a = [], o = [], c = [], l = new A, h = new Z;
        a.push(0, 0, 0), o.push(0, 0, 1), c.push(.5, .5);
        for(let u = 0, d = 3; u <= t; u++, d += 3){
            let f = n + u / t * i;
            l.x = e * Math.cos(f), l.y = e * Math.sin(f), a.push(l.x, l.y, l.z), o.push(0, 0, 1), h.x = (a[d] / e + 1) / 2, h.y = (a[d + 1] / e + 1) / 2, c.push(h.x, h.y);
        }
        for(let u = 1; u <= t; u++)r.push(u, u + 1, 0);
        this.setIndex(r), this.setAttribute("position", new ve(a, 3)), this.setAttribute("normal", new ve(o, 3)), this.setAttribute("uv", new ve(c, 2));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.radius, e.segments, e.thetaStart, e.thetaLength);
    }
}, Ns = class s1 extends Ge {
    constructor(e = 1, t = 1, n = 1, i = 32, r = 1, a = !1, o = 0, c = Math.PI * 2){
        super(), this.type = "CylinderGeometry", this.parameters = {
            radiusTop: e,
            radiusBottom: t,
            height: n,
            radialSegments: i,
            heightSegments: r,
            openEnded: a,
            thetaStart: o,
            thetaLength: c
        };
        let l = this;
        i = Math.floor(i), r = Math.floor(r);
        let h = [], u = [], d = [], f = [], m = 0, _ = [], g = n / 2, p = 0;
        v(), a === !1 && (e > 0 && x(!0), t > 0 && x(!1)), this.setIndex(h), this.setAttribute("position", new ve(u, 3)), this.setAttribute("normal", new ve(d, 3)), this.setAttribute("uv", new ve(f, 2));
        function v() {
            let y = new A, b = new A, w = 0, R = (t - e) / n;
            for(let I = 0; I <= r; I++){
                let M = [], T = I / r, O = T * (t - e) + e;
                for(let Y = 0; Y <= i; Y++){
                    let $ = Y / i, U = $ * c + o, z = Math.sin(U), q = Math.cos(U);
                    b.x = O * z, b.y = -T * n + g, b.z = O * q, u.push(b.x, b.y, b.z), y.set(z, R, q).normalize(), d.push(y.x, y.y, y.z), f.push($, 1 - T), M.push(m++);
                }
                _.push(M);
            }
            for(let I = 0; I < i; I++)for(let M = 0; M < r; M++){
                let T = _[M][I], O = _[M + 1][I], Y = _[M + 1][I + 1], $ = _[M][I + 1];
                h.push(T, O, $), h.push(O, Y, $), w += 6;
            }
            l.addGroup(p, w, 0), p += w;
        }
        function x(y) {
            let b = m, w = new Z, R = new A, I = 0, M = y === !0 ? e : t, T = y === !0 ? 1 : -1;
            for(let Y = 1; Y <= i; Y++)u.push(0, g * T, 0), d.push(0, T, 0), f.push(.5, .5), m++;
            let O = m;
            for(let Y = 0; Y <= i; Y++){
                let U = Y / i * c + o, z = Math.cos(U), q = Math.sin(U);
                R.x = M * q, R.y = g * T, R.z = M * z, u.push(R.x, R.y, R.z), d.push(0, T, 0), w.x = z * .5 + .5, w.y = q * .5 * T + .5, f.push(w.x, w.y), m++;
            }
            for(let Y = 0; Y < i; Y++){
                let $ = b + Y, U = O + Y;
                y === !0 ? h.push(U, U + 1, $) : h.push(U + 1, U, $), I += 3;
            }
            l.addGroup(p, I, y === !0 ? 1 : 2), p += I;
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
    }
}, Zo = class s1 extends Ns {
    constructor(e = 1, t = 1, n = 32, i = 1, r = !1, a = 0, o = Math.PI * 2){
        super(0, e, t, n, i, r, a, o), this.type = "ConeGeometry", this.parameters = {
            radius: e,
            height: t,
            radialSegments: n,
            heightSegments: i,
            openEnded: r,
            thetaStart: a,
            thetaLength: o
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
    }
}, di = class s1 extends Ge {
    constructor(e = [], t = [], n = 1, i = 0){
        super(), this.type = "PolyhedronGeometry", this.parameters = {
            vertices: e,
            indices: t,
            radius: n,
            detail: i
        };
        let r = [], a = [];
        o(i), l(n), h(), this.setAttribute("position", new ve(r, 3)), this.setAttribute("normal", new ve(r.slice(), 3)), this.setAttribute("uv", new ve(a, 2)), i === 0 ? this.computeVertexNormals() : this.normalizeNormals();
        function o(v) {
            let x = new A, y = new A, b = new A;
            for(let w = 0; w < t.length; w += 3)f(t[w + 0], x), f(t[w + 1], y), f(t[w + 2], b), c(x, y, b, v);
        }
        function c(v, x, y, b) {
            let w = b + 1, R = [];
            for(let I = 0; I <= w; I++){
                R[I] = [];
                let M = v.clone().lerp(y, I / w), T = x.clone().lerp(y, I / w), O = w - I;
                for(let Y = 0; Y <= O; Y++)Y === 0 && I === w ? R[I][Y] = M : R[I][Y] = M.clone().lerp(T, Y / O);
            }
            for(let I = 0; I < w; I++)for(let M = 0; M < 2 * (w - I) - 1; M++){
                let T = Math.floor(M / 2);
                M % 2 === 0 ? (d(R[I][T + 1]), d(R[I + 1][T]), d(R[I][T])) : (d(R[I][T + 1]), d(R[I + 1][T + 1]), d(R[I + 1][T]));
            }
        }
        function l(v) {
            let x = new A;
            for(let y = 0; y < r.length; y += 3)x.x = r[y + 0], x.y = r[y + 1], x.z = r[y + 2], x.normalize().multiplyScalar(v), r[y + 0] = x.x, r[y + 1] = x.y, r[y + 2] = x.z;
        }
        function h() {
            let v = new A;
            for(let x = 0; x < r.length; x += 3){
                v.x = r[x + 0], v.y = r[x + 1], v.z = r[x + 2];
                let y = g(v) / 2 / Math.PI + .5, b = p(v) / Math.PI + .5;
                a.push(y, 1 - b);
            }
            m(), u();
        }
        function u() {
            for(let v = 0; v < a.length; v += 6){
                let x = a[v + 0], y = a[v + 2], b = a[v + 4], w = Math.max(x, y, b), R = Math.min(x, y, b);
                w > .9 && R < .1 && (x < .2 && (a[v + 0] += 1), y < .2 && (a[v + 2] += 1), b < .2 && (a[v + 4] += 1));
            }
        }
        function d(v) {
            r.push(v.x, v.y, v.z);
        }
        function f(v, x) {
            let y = v * 3;
            x.x = e[y + 0], x.y = e[y + 1], x.z = e[y + 2];
        }
        function m() {
            let v = new A, x = new A, y = new A, b = new A, w = new Z, R = new Z, I = new Z;
            for(let M = 0, T = 0; M < r.length; M += 9, T += 6){
                v.set(r[M + 0], r[M + 1], r[M + 2]), x.set(r[M + 3], r[M + 4], r[M + 5]), y.set(r[M + 6], r[M + 7], r[M + 8]), w.set(a[T + 0], a[T + 1]), R.set(a[T + 2], a[T + 3]), I.set(a[T + 4], a[T + 5]), b.copy(v).add(x).add(y).divideScalar(3);
                let O = g(b);
                _(w, T + 0, v, O), _(R, T + 2, x, O), _(I, T + 4, y, O);
            }
        }
        function _(v, x, y, b) {
            b < 0 && v.x === 1 && (a[x] = v.x - 1), y.x === 0 && y.z === 0 && (a[x] = b / 2 / Math.PI + .5);
        }
        function g(v) {
            return Math.atan2(v.z, -v.x);
        }
        function p(v) {
            return Math.atan2(-v.y, Math.sqrt(v.x * v.x + v.z * v.z));
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.vertices, e.indices, e.radius, e.details);
    }
}, Jo = class s1 extends di {
    constructor(e = 1, t = 0){
        let n = (1 + Math.sqrt(5)) / 2, i = 1 / n, r = [
            -1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            1,
            1,
            1,
            0,
            -i,
            -n,
            0,
            -i,
            n,
            0,
            i,
            -n,
            0,
            i,
            n,
            -i,
            -n,
            0,
            -i,
            n,
            0,
            i,
            -n,
            0,
            i,
            n,
            0,
            -n,
            0,
            -i,
            n,
            0,
            -i,
            -n,
            0,
            i,
            n,
            0,
            i
        ], a = [
            3,
            11,
            7,
            3,
            7,
            15,
            3,
            15,
            13,
            7,
            19,
            17,
            7,
            17,
            6,
            7,
            6,
            15,
            17,
            4,
            8,
            17,
            8,
            10,
            17,
            10,
            6,
            8,
            0,
            16,
            8,
            16,
            2,
            8,
            2,
            10,
            0,
            12,
            1,
            0,
            1,
            18,
            0,
            18,
            16,
            6,
            10,
            2,
            6,
            2,
            13,
            6,
            13,
            15,
            2,
            16,
            18,
            2,
            18,
            3,
            2,
            3,
            13,
            18,
            1,
            9,
            18,
            9,
            11,
            18,
            11,
            3,
            4,
            14,
            12,
            4,
            12,
            0,
            4,
            0,
            8,
            11,
            9,
            5,
            11,
            5,
            19,
            11,
            19,
            7,
            19,
            5,
            14,
            19,
            14,
            4,
            19,
            4,
            17,
            1,
            12,
            14,
            1,
            14,
            5,
            1,
            5,
            9
        ];
        super(r, a, e, t), this.type = "DodecahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.detail);
    }
}, vr = new A, yr = new A, ao = new A, Mr = new Un, $o = class extends Ge {
    constructor(e = null, t = 1){
        if (super(), this.type = "EdgesGeometry", this.parameters = {
            geometry: e,
            thresholdAngle: t
        }, e !== null) {
            let i = Math.pow(10, 4), r = Math.cos(ai * t), a = e.getIndex(), o = e.getAttribute("position"), c = a ? a.count : o.count, l = [
                0,
                0,
                0
            ], h = [
                "a",
                "b",
                "c"
            ], u = new Array(3), d = {}, f = [];
            for(let m = 0; m < c; m += 3){
                a ? (l[0] = a.getX(m), l[1] = a.getX(m + 1), l[2] = a.getX(m + 2)) : (l[0] = m, l[1] = m + 1, l[2] = m + 2);
                let { a: _ , b: g , c: p  } = Mr;
                if (_.fromBufferAttribute(o, l[0]), g.fromBufferAttribute(o, l[1]), p.fromBufferAttribute(o, l[2]), Mr.getNormal(ao), u[0] = `${Math.round(_.x * i)},${Math.round(_.y * i)},${Math.round(_.z * i)}`, u[1] = `${Math.round(g.x * i)},${Math.round(g.y * i)},${Math.round(g.z * i)}`, u[2] = `${Math.round(p.x * i)},${Math.round(p.y * i)},${Math.round(p.z * i)}`, !(u[0] === u[1] || u[1] === u[2] || u[2] === u[0])) for(let v = 0; v < 3; v++){
                    let x = (v + 1) % 3, y = u[v], b = u[x], w = Mr[h[v]], R = Mr[h[x]], I = `${y}_${b}`, M = `${b}_${y}`;
                    M in d && d[M] ? (ao.dot(d[M].normal) <= r && (f.push(w.x, w.y, w.z), f.push(R.x, R.y, R.z)), d[M] = null) : I in d || (d[I] = {
                        index0: l[v],
                        index1: l[x],
                        normal: ao.clone()
                    });
                }
            }
            for(let m in d)if (d[m]) {
                let { index0: _ , index1: g  } = d[m];
                vr.fromBufferAttribute(o, _), yr.fromBufferAttribute(o, g), f.push(vr.x, vr.y, vr.z), f.push(yr.x, yr.y, yr.z);
            }
            this.setAttribute("position", new ve(f, 3));
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
}, Fn = class extends ji {
    constructor(e){
        super(e), this.uuid = kt(), this.type = "Shape", this.holes = [];
    }
    getPointsHoles(e) {
        let t = [];
        for(let n = 0, i = this.holes.length; n < i; n++)t[n] = this.holes[n].getPoints(e);
        return t;
    }
    extractPoints(e) {
        return {
            shape: this.getPoints(e),
            holes: this.getPointsHoles(e)
        };
    }
    copy(e) {
        super.copy(e), this.holes = [];
        for(let t = 0, n = e.holes.length; t < n; t++){
            let i = e.holes[t];
            this.holes.push(i.clone());
        }
        return this;
    }
    toJSON() {
        let e = super.toJSON();
        e.uuid = this.uuid, e.holes = [];
        for(let t = 0, n = this.holes.length; t < n; t++){
            let i = this.holes[t];
            e.holes.push(i.toJSON());
        }
        return e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
        for(let t = 0, n = e.holes.length; t < n; t++){
            let i = e.holes[t];
            this.holes.push(new ji().fromJSON(i));
        }
        return this;
    }
}, ex = {
    triangulate: function(s1, e, t = 2) {
        let n = e && e.length, i = n ? e[0] * t : s1.length, r = Pd(s1, 0, i, t, !0), a = [];
        if (!r || r.next === r.prev) return a;
        let o, c, l, h, u, d, f;
        if (n && (r = rx(s1, e, r, t)), s1.length > 80 * t) {
            o = l = s1[0], c = h = s1[1];
            for(let m = t; m < i; m += t)u = s1[m], d = s1[m + 1], u < o && (o = u), d < c && (c = d), u > l && (l = u), d > h && (h = d);
            f = Math.max(l - o, h - c), f = f !== 0 ? 32767 / f : 0;
        }
        return Os(r, a, t, o, c, f, 0), a;
    }
};
function Pd(s1, e, t, n, i) {
    let r, a;
    if (i === gx(s1, e, t, n) > 0) for(r = e; r < t; r += n)a = tu(r, s1[r], s1[r + 1], a);
    else for(r = t - n; r >= e; r -= n)a = tu(r, s1[r], s1[r + 1], a);
    return a && Ma(a, a.next) && (Bs(a), a = a.next), a;
}
function fi(s1, e) {
    if (!s1) return s1;
    e || (e = s1);
    let t = s1, n;
    do if (n = !1, !t.steiner && (Ma(t, t.next) || st(t.prev, t, t.next) === 0)) {
        if (Bs(t), t = e = t.prev, t === t.next) break;
        n = !0;
    } else t = t.next;
    while (n || t !== e)
    return e;
}
function Os(s1, e, t, n, i, r, a) {
    if (!s1) return;
    !a && r && hx(s1, n, i, r);
    let o = s1, c, l;
    for(; s1.prev !== s1.next;){
        if (c = s1.prev, l = s1.next, r ? nx(s1, n, i, r) : tx(s1)) {
            e.push(c.i / t | 0), e.push(s1.i / t | 0), e.push(l.i / t | 0), Bs(s1), s1 = l.next, o = l.next;
            continue;
        }
        if (s1 = l, s1 === o) {
            a ? a === 1 ? (s1 = ix(fi(s1), e, t), Os(s1, e, t, n, i, r, 2)) : a === 2 && sx(s1, e, t, n, i, r) : Os(fi(s1), e, t, n, i, r, 1);
            break;
        }
    }
}
function tx(s1) {
    let e = s1.prev, t = s1, n = s1.next;
    if (st(e, t, n) >= 0) return !1;
    let i = e.x, r = t.x, a = n.x, o = e.y, c = t.y, l = n.y, h = i < r ? i < a ? i : a : r < a ? r : a, u = o < c ? o < l ? o : l : c < l ? c : l, d = i > r ? i > a ? i : a : r > a ? r : a, f = o > c ? o > l ? o : l : c > l ? c : l, m = n.next;
    for(; m !== e;){
        if (m.x >= h && m.x <= d && m.y >= u && m.y <= f && Gi(i, o, r, c, a, l, m.x, m.y) && st(m.prev, m, m.next) >= 0) return !1;
        m = m.next;
    }
    return !0;
}
function nx(s1, e, t, n) {
    let i = s1.prev, r = s1, a = s1.next;
    if (st(i, r, a) >= 0) return !1;
    let o = i.x, c = r.x, l = a.x, h = i.y, u = r.y, d = a.y, f = o < c ? o < l ? o : l : c < l ? c : l, m = h < u ? h < d ? h : d : u < d ? u : d, _ = o > c ? o > l ? o : l : c > l ? c : l, g = h > u ? h > d ? h : d : u > d ? u : d, p = Ko(f, m, e, t, n), v = Ko(_, g, e, t, n), x = s1.prevZ, y = s1.nextZ;
    for(; x && x.z >= p && y && y.z <= v;){
        if (x.x >= f && x.x <= _ && x.y >= m && x.y <= g && x !== i && x !== a && Gi(o, h, c, u, l, d, x.x, x.y) && st(x.prev, x, x.next) >= 0 || (x = x.prevZ, y.x >= f && y.x <= _ && y.y >= m && y.y <= g && y !== i && y !== a && Gi(o, h, c, u, l, d, y.x, y.y) && st(y.prev, y, y.next) >= 0)) return !1;
        y = y.nextZ;
    }
    for(; x && x.z >= p;){
        if (x.x >= f && x.x <= _ && x.y >= m && x.y <= g && x !== i && x !== a && Gi(o, h, c, u, l, d, x.x, x.y) && st(x.prev, x, x.next) >= 0) return !1;
        x = x.prevZ;
    }
    for(; y && y.z <= v;){
        if (y.x >= f && y.x <= _ && y.y >= m && y.y <= g && y !== i && y !== a && Gi(o, h, c, u, l, d, y.x, y.y) && st(y.prev, y, y.next) >= 0) return !1;
        y = y.nextZ;
    }
    return !0;
}
function ix(s1, e, t) {
    let n = s1;
    do {
        let i = n.prev, r = n.next.next;
        !Ma(i, r) && Ld(i, n, n.next, r) && Fs(i, r) && Fs(r, i) && (e.push(i.i / t | 0), e.push(n.i / t | 0), e.push(r.i / t | 0), Bs(n), Bs(n.next), n = s1 = r), n = n.next;
    }while (n !== s1)
    return fi(n);
}
function sx(s1, e, t, n, i, r) {
    let a = s1;
    do {
        let o = a.next.next;
        for(; o !== a.prev;){
            if (a.i !== o.i && fx(a, o)) {
                let c = Id(a, o);
                a = fi(a, a.next), c = fi(c, c.next), Os(a, e, t, n, i, r, 0), Os(c, e, t, n, i, r, 0);
                return;
            }
            o = o.next;
        }
        a = a.next;
    }while (a !== s1)
}
function rx(s1, e, t, n) {
    let i = [], r, a, o, c, l;
    for(r = 0, a = e.length; r < a; r++)o = e[r] * n, c = r < a - 1 ? e[r + 1] * n : s1.length, l = Pd(s1, o, c, n, !1), l === l.next && (l.steiner = !0), i.push(dx(l));
    for(i.sort(ax), r = 0; r < i.length; r++)t = ox(i[r], t);
    return t;
}
function ax(s1, e) {
    return s1.x - e.x;
}
function ox(s1, e) {
    let t = cx(s1, e);
    if (!t) return e;
    let n = Id(t, s1);
    return fi(n, n.next), fi(t, t.next);
}
function cx(s1, e) {
    let t = e, n = -1 / 0, i, r = s1.x, a = s1.y;
    do {
        if (a <= t.y && a >= t.next.y && t.next.y !== t.y) {
            let d = t.x + (a - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
            if (d <= r && d > n && (n = d, i = t.x < t.next.x ? t : t.next, d === r)) return i;
        }
        t = t.next;
    }while (t !== e)
    if (!i) return null;
    let o = i, c = i.x, l = i.y, h = 1 / 0, u;
    t = i;
    do r >= t.x && t.x >= c && r !== t.x && Gi(a < l ? r : n, a, c, l, a < l ? n : r, a, t.x, t.y) && (u = Math.abs(a - t.y) / (r - t.x), Fs(t, s1) && (u < h || u === h && (t.x > i.x || t.x === i.x && lx(i, t))) && (i = t, h = u)), t = t.next;
    while (t !== o)
    return i;
}
function lx(s1, e) {
    return st(s1.prev, s1, e.prev) < 0 && st(e.next, s1, s1.next) < 0;
}
function hx(s1, e, t, n) {
    let i = s1;
    do i.z === 0 && (i.z = Ko(i.x, i.y, e, t, n)), i.prevZ = i.prev, i.nextZ = i.next, i = i.next;
    while (i !== s1)
    i.prevZ.nextZ = null, i.prevZ = null, ux(i);
}
function ux(s1) {
    let e, t, n, i, r, a, o, c, l = 1;
    do {
        for(t = s1, s1 = null, r = null, a = 0; t;){
            for(a++, n = t, o = 0, e = 0; e < l && (o++, n = n.nextZ, !!n); e++);
            for(c = l; o > 0 || c > 0 && n;)o !== 0 && (c === 0 || !n || t.z <= n.z) ? (i = t, t = t.nextZ, o--) : (i = n, n = n.nextZ, c--), r ? r.nextZ = i : s1 = i, i.prevZ = r, r = i;
            t = n;
        }
        r.nextZ = null, l *= 2;
    }while (a > 1)
    return s1;
}
function Ko(s1, e, t, n, i) {
    return s1 = (s1 - t) * i | 0, e = (e - n) * i | 0, s1 = (s1 | s1 << 8) & 16711935, s1 = (s1 | s1 << 4) & 252645135, s1 = (s1 | s1 << 2) & 858993459, s1 = (s1 | s1 << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, s1 | e << 1;
}
function dx(s1) {
    let e = s1, t = s1;
    do (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next;
    while (e !== s1)
    return t;
}
function Gi(s1, e, t, n, i, r, a, o) {
    return (i - a) * (e - o) >= (s1 - a) * (r - o) && (s1 - a) * (n - o) >= (t - a) * (e - o) && (t - a) * (r - o) >= (i - a) * (n - o);
}
function fx(s1, e) {
    return s1.next.i !== e.i && s1.prev.i !== e.i && !px(s1, e) && (Fs(s1, e) && Fs(e, s1) && mx(s1, e) && (st(s1.prev, s1, e.prev) || st(s1, e.prev, e)) || Ma(s1, e) && st(s1.prev, s1, s1.next) > 0 && st(e.prev, e, e.next) > 0);
}
function st(s1, e, t) {
    return (e.y - s1.y) * (t.x - e.x) - (e.x - s1.x) * (t.y - e.y);
}
function Ma(s1, e) {
    return s1.x === e.x && s1.y === e.y;
}
function Ld(s1, e, t, n) {
    let i = br(st(s1, e, t)), r = br(st(s1, e, n)), a = br(st(t, n, s1)), o = br(st(t, n, e));
    return !!(i !== r && a !== o || i === 0 && Sr(s1, t, e) || r === 0 && Sr(s1, n, e) || a === 0 && Sr(t, s1, n) || o === 0 && Sr(t, e, n));
}
function Sr(s1, e, t) {
    return e.x <= Math.max(s1.x, t.x) && e.x >= Math.min(s1.x, t.x) && e.y <= Math.max(s1.y, t.y) && e.y >= Math.min(s1.y, t.y);
}
function br(s1) {
    return s1 > 0 ? 1 : s1 < 0 ? -1 : 0;
}
function px(s1, e) {
    let t = s1;
    do {
        if (t.i !== s1.i && t.next.i !== s1.i && t.i !== e.i && t.next.i !== e.i && Ld(t, t.next, s1, e)) return !0;
        t = t.next;
    }while (t !== s1)
    return !1;
}
function Fs(s1, e) {
    return st(s1.prev, s1, s1.next) < 0 ? st(s1, e, s1.next) >= 0 && st(s1, s1.prev, e) >= 0 : st(s1, e, s1.prev) < 0 || st(s1, s1.next, e) < 0;
}
function mx(s1, e) {
    let t = s1, n = !1, i = (s1.x + e.x) / 2, r = (s1.y + e.y) / 2;
    do t.y > r != t.next.y > r && t.next.y !== t.y && i < (t.next.x - t.x) * (r - t.y) / (t.next.y - t.y) + t.x && (n = !n), t = t.next;
    while (t !== s1)
    return n;
}
function Id(s1, e) {
    let t = new Qo(s1.i, s1.x, s1.y), n = new Qo(e.i, e.x, e.y), i = s1.next, r = e.prev;
    return s1.next = e, e.prev = s1, t.next = i, i.prev = t, n.next = t, t.prev = n, r.next = n, n.prev = r, n;
}
function tu(s1, e, t, n) {
    let i = new Qo(s1, e, t);
    return n ? (i.next = n.next, i.prev = n, n.next.prev = i, n.next = i) : (i.prev = i, i.next = i), i;
}
function Bs(s1) {
    s1.next.prev = s1.prev, s1.prev.next = s1.next, s1.prevZ && (s1.prevZ.nextZ = s1.nextZ), s1.nextZ && (s1.nextZ.prevZ = s1.prevZ);
}
function Qo(s1, e, t) {
    this.i = s1, this.x = e, this.y = t, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = !1;
}
function gx(s1, e, t, n) {
    let i = 0;
    for(let r = e, a = t - n; r < t; r += n)i += (s1[a] - s1[r]) * (s1[r + 1] + s1[a + 1]), a = r;
    return i;
}
var yn = class s1 {
    static area(e) {
        let t = e.length, n = 0;
        for(let i = t - 1, r = 0; r < t; i = r++)n += e[i].x * e[r].y - e[r].x * e[i].y;
        return n * .5;
    }
    static isClockWise(e) {
        return s1.area(e) < 0;
    }
    static triangulateShape(e, t) {
        let n = [], i = [], r = [];
        nu(e), iu(n, e);
        let a = e.length;
        t.forEach(nu);
        for(let c = 0; c < t.length; c++)i.push(a), a += t[c].length, iu(n, t[c]);
        let o = ex.triangulate(n, i);
        for(let c = 0; c < o.length; c += 3)r.push(o.slice(c, c + 3));
        return r;
    }
};
function nu(s1) {
    let e = s1.length;
    e > 2 && s1[e - 1].equals(s1[0]) && s1.pop();
}
function iu(s1, e) {
    for(let t = 0; t < e.length; t++)s1.push(e[t].x), s1.push(e[t].y);
}
var jo = class s1 extends Ge {
    constructor(e = new Fn([
        new Z(.5, .5),
        new Z(-.5, .5),
        new Z(-.5, -.5),
        new Z(.5, -.5)
    ]), t = {}){
        super(), this.type = "ExtrudeGeometry", this.parameters = {
            shapes: e,
            options: t
        }, e = Array.isArray(e) ? e : [
            e
        ];
        let n = this, i = [], r = [];
        for(let o = 0, c = e.length; o < c; o++){
            let l = e[o];
            a(l);
        }
        this.setAttribute("position", new ve(i, 3)), this.setAttribute("uv", new ve(r, 2)), this.computeVertexNormals();
        function a(o) {
            let c = [], l = t.curveSegments !== void 0 ? t.curveSegments : 12, h = t.steps !== void 0 ? t.steps : 1, u = t.depth !== void 0 ? t.depth : 1, d = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, f = t.bevelThickness !== void 0 ? t.bevelThickness : .2, m = t.bevelSize !== void 0 ? t.bevelSize : f - .1, _ = t.bevelOffset !== void 0 ? t.bevelOffset : 0, g = t.bevelSegments !== void 0 ? t.bevelSegments : 3, p = t.extrudePath, v = t.UVGenerator !== void 0 ? t.UVGenerator : _x, x, y = !1, b, w, R, I;
            p && (x = p.getSpacedPoints(h), y = !0, d = !1, b = p.computeFrenetFrames(h, !1), w = new A, R = new A, I = new A), d || (g = 0, f = 0, m = 0, _ = 0);
            let M = o.extractPoints(l), T = M.shape, O = M.holes;
            if (!yn.isClockWise(T)) {
                T = T.reverse();
                for(let L = 0, oe = O.length; L < oe; L++){
                    let X = O[L];
                    yn.isClockWise(X) && (O[L] = X.reverse());
                }
            }
            let $ = yn.triangulateShape(T, O), U = T;
            for(let L = 0, oe = O.length; L < oe; L++){
                let X = O[L];
                T = T.concat(X);
            }
            function z(L, oe, X) {
                return oe || console.error("THREE.ExtrudeGeometry: vec does not exist"), L.clone().addScaledVector(oe, X);
            }
            let q = T.length, H = $.length;
            function ne(L, oe, X) {
                let ie, J, Se, me = L.x - oe.x, ye = L.y - oe.y, Ne = X.x - L.x, qe = X.y - L.y, rt = me * me + ye * ye, C = me * qe - ye * Ne;
                if (Math.abs(C) > Number.EPSILON) {
                    let S = Math.sqrt(rt), B = Math.sqrt(Ne * Ne + qe * qe), ee = oe.x - ye / S, j = oe.y + me / S, te = X.x - qe / B, Me = X.y + Ne / B, re = ((te - ee) * qe - (Me - j) * Ne) / (me * qe - ye * Ne);
                    ie = ee + me * re - L.x, J = j + ye * re - L.y;
                    let de = ie * ie + J * J;
                    if (de <= 2) return new Z(ie, J);
                    Se = Math.sqrt(de / 2);
                } else {
                    let S = !1;
                    me > Number.EPSILON ? Ne > Number.EPSILON && (S = !0) : me < -Number.EPSILON ? Ne < -Number.EPSILON && (S = !0) : Math.sign(ye) === Math.sign(qe) && (S = !0), S ? (ie = -ye, J = me, Se = Math.sqrt(rt)) : (ie = me, J = ye, Se = Math.sqrt(rt / 2));
                }
                return new Z(ie / Se, J / Se);
            }
            let W = [];
            for(let L = 0, oe = U.length, X = oe - 1, ie = L + 1; L < oe; L++, X++, ie++)X === oe && (X = 0), ie === oe && (ie = 0), W[L] = ne(U[L], U[X], U[ie]);
            let K = [], D, G = W.concat();
            for(let L = 0, oe = O.length; L < oe; L++){
                let X = O[L];
                D = [];
                for(let ie = 0, J = X.length, Se = J - 1, me = ie + 1; ie < J; ie++, Se++, me++)Se === J && (Se = 0), me === J && (me = 0), D[ie] = ne(X[ie], X[Se], X[me]);
                K.push(D), G = G.concat(D);
            }
            for(let L = 0; L < g; L++){
                let oe = L / g, X = f * Math.cos(oe * Math.PI / 2), ie = m * Math.sin(oe * Math.PI / 2) + _;
                for(let J = 0, Se = U.length; J < Se; J++){
                    let me = z(U[J], W[J], ie);
                    Ee(me.x, me.y, -X);
                }
                for(let J = 0, Se = O.length; J < Se; J++){
                    let me = O[J];
                    D = K[J];
                    for(let ye = 0, Ne = me.length; ye < Ne; ye++){
                        let qe = z(me[ye], D[ye], ie);
                        Ee(qe.x, qe.y, -X);
                    }
                }
            }
            let he = m + _;
            for(let L = 0; L < q; L++){
                let oe = d ? z(T[L], G[L], he) : T[L];
                y ? (R.copy(b.normals[0]).multiplyScalar(oe.x), w.copy(b.binormals[0]).multiplyScalar(oe.y), I.copy(x[0]).add(R).add(w), Ee(I.x, I.y, I.z)) : Ee(oe.x, oe.y, 0);
            }
            for(let L = 1; L <= h; L++)for(let oe = 0; oe < q; oe++){
                let X = d ? z(T[oe], G[oe], he) : T[oe];
                y ? (R.copy(b.normals[L]).multiplyScalar(X.x), w.copy(b.binormals[L]).multiplyScalar(X.y), I.copy(x[L]).add(R).add(w), Ee(I.x, I.y, I.z)) : Ee(X.x, X.y, u / h * L);
            }
            for(let L = g - 1; L >= 0; L--){
                let oe = L / g, X = f * Math.cos(oe * Math.PI / 2), ie = m * Math.sin(oe * Math.PI / 2) + _;
                for(let J = 0, Se = U.length; J < Se; J++){
                    let me = z(U[J], W[J], ie);
                    Ee(me.x, me.y, u + X);
                }
                for(let J = 0, Se = O.length; J < Se; J++){
                    let me = O[J];
                    D = K[J];
                    for(let ye = 0, Ne = me.length; ye < Ne; ye++){
                        let qe = z(me[ye], D[ye], ie);
                        y ? Ee(qe.x, qe.y + x[h - 1].y, x[h - 1].x + X) : Ee(qe.x, qe.y, u + X);
                    }
                }
            }
            fe(), _e();
            function fe() {
                let L = i.length / 3;
                if (d) {
                    let oe = 0, X = q * oe;
                    for(let ie = 0; ie < H; ie++){
                        let J = $[ie];
                        Te(J[2] + X, J[1] + X, J[0] + X);
                    }
                    oe = h + g * 2, X = q * oe;
                    for(let ie = 0; ie < H; ie++){
                        let J = $[ie];
                        Te(J[0] + X, J[1] + X, J[2] + X);
                    }
                } else {
                    for(let oe = 0; oe < H; oe++){
                        let X = $[oe];
                        Te(X[2], X[1], X[0]);
                    }
                    for(let oe = 0; oe < H; oe++){
                        let X = $[oe];
                        Te(X[0] + q * h, X[1] + q * h, X[2] + q * h);
                    }
                }
                n.addGroup(L, i.length / 3 - L, 0);
            }
            function _e() {
                let L = i.length / 3, oe = 0;
                we(U, oe), oe += U.length;
                for(let X = 0, ie = O.length; X < ie; X++){
                    let J = O[X];
                    we(J, oe), oe += J.length;
                }
                n.addGroup(L, i.length / 3 - L, 1);
            }
            function we(L, oe) {
                let X = L.length;
                for(; --X >= 0;){
                    let ie = X, J = X - 1;
                    J < 0 && (J = L.length - 1);
                    for(let Se = 0, me = h + g * 2; Se < me; Se++){
                        let ye = q * Se, Ne = q * (Se + 1), qe = oe + ie + ye, rt = oe + J + ye, C = oe + J + Ne, S = oe + ie + Ne;
                        Ye(qe, rt, C, S);
                    }
                }
            }
            function Ee(L, oe, X) {
                c.push(L), c.push(oe), c.push(X);
            }
            function Te(L, oe, X) {
                it(L), it(oe), it(X);
                let ie = i.length / 3, J = v.generateTopUV(n, i, ie - 3, ie - 2, ie - 1);
                Ce(J[0]), Ce(J[1]), Ce(J[2]);
            }
            function Ye(L, oe, X, ie) {
                it(L), it(oe), it(ie), it(oe), it(X), it(ie);
                let J = i.length / 3, Se = v.generateSideWallUV(n, i, J - 6, J - 3, J - 2, J - 1);
                Ce(Se[0]), Ce(Se[1]), Ce(Se[3]), Ce(Se[1]), Ce(Se[2]), Ce(Se[3]);
            }
            function it(L) {
                i.push(c[L * 3 + 0]), i.push(c[L * 3 + 1]), i.push(c[L * 3 + 2]);
            }
            function Ce(L) {
                r.push(L.x), r.push(L.y);
            }
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    toJSON() {
        let e = super.toJSON(), t = this.parameters.shapes, n = this.parameters.options;
        return xx(t, n, e);
    }
    static fromJSON(e, t) {
        let n = [];
        for(let r = 0, a = e.shapes.length; r < a; r++){
            let o = t[e.shapes[r]];
            n.push(o);
        }
        let i = e.options.extrudePath;
        return i !== void 0 && (e.options.extrudePath = new ca[i.type]().fromJSON(i)), new s1(n, e.options);
    }
}, _x = {
    generateTopUV: function(s1, e, t, n, i) {
        let r = e[t * 3], a = e[t * 3 + 1], o = e[n * 3], c = e[n * 3 + 1], l = e[i * 3], h = e[i * 3 + 1];
        return [
            new Z(r, a),
            new Z(o, c),
            new Z(l, h)
        ];
    },
    generateSideWallUV: function(s1, e, t, n, i, r) {
        let a = e[t * 3], o = e[t * 3 + 1], c = e[t * 3 + 2], l = e[n * 3], h = e[n * 3 + 1], u = e[n * 3 + 2], d = e[i * 3], f = e[i * 3 + 1], m = e[i * 3 + 2], _ = e[r * 3], g = e[r * 3 + 1], p = e[r * 3 + 2];
        return Math.abs(o - h) < Math.abs(a - l) ? [
            new Z(a, 1 - c),
            new Z(l, 1 - u),
            new Z(d, 1 - m),
            new Z(_, 1 - p)
        ] : [
            new Z(o, 1 - c),
            new Z(h, 1 - u),
            new Z(f, 1 - m),
            new Z(g, 1 - p)
        ];
    }
};
function xx(s1, e, t) {
    if (t.shapes = [], Array.isArray(s1)) for(let n = 0, i = s1.length; n < i; n++){
        let r = s1[n];
        t.shapes.push(r.uuid);
    }
    else t.shapes.push(s1.uuid);
    return t.options = Object.assign({}, e), e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t;
}
var ec = class s1 extends di {
    constructor(e = 1, t = 0){
        let n = (1 + Math.sqrt(5)) / 2, i = [
            -1,
            n,
            0,
            1,
            n,
            0,
            -1,
            -n,
            0,
            1,
            -n,
            0,
            0,
            -1,
            n,
            0,
            1,
            n,
            0,
            -1,
            -n,
            0,
            1,
            -n,
            n,
            0,
            -1,
            n,
            0,
            1,
            -n,
            0,
            -1,
            -n,
            0,
            1
        ], r = [
            0,
            11,
            5,
            0,
            5,
            1,
            0,
            1,
            7,
            0,
            7,
            10,
            0,
            10,
            11,
            1,
            5,
            9,
            5,
            11,
            4,
            11,
            10,
            2,
            10,
            7,
            6,
            7,
            1,
            8,
            3,
            9,
            4,
            3,
            4,
            2,
            3,
            2,
            6,
            3,
            6,
            8,
            3,
            8,
            9,
            4,
            9,
            5,
            2,
            4,
            11,
            6,
            2,
            10,
            8,
            6,
            7,
            9,
            8,
            1
        ];
        super(i, r, e, t), this.type = "IcosahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.detail);
    }
}, ha = class s1 extends di {
    constructor(e = 1, t = 0){
        let n = [
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1
        ], i = [
            0,
            2,
            4,
            0,
            4,
            3,
            0,
            3,
            5,
            0,
            5,
            2,
            1,
            2,
            5,
            1,
            5,
            3,
            1,
            3,
            4,
            1,
            4,
            2
        ];
        super(n, i, e, t), this.type = "OctahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.detail);
    }
}, tc = class s1 extends Ge {
    constructor(e = .5, t = 1, n = 32, i = 1, r = 0, a = Math.PI * 2){
        super(), this.type = "RingGeometry", this.parameters = {
            innerRadius: e,
            outerRadius: t,
            thetaSegments: n,
            phiSegments: i,
            thetaStart: r,
            thetaLength: a
        }, n = Math.max(3, n), i = Math.max(1, i);
        let o = [], c = [], l = [], h = [], u = e, d = (t - e) / i, f = new A, m = new Z;
        for(let _ = 0; _ <= i; _++){
            for(let g = 0; g <= n; g++){
                let p = r + g / n * a;
                f.x = u * Math.cos(p), f.y = u * Math.sin(p), c.push(f.x, f.y, f.z), l.push(0, 0, 1), m.x = (f.x / t + 1) / 2, m.y = (f.y / t + 1) / 2, h.push(m.x, m.y);
            }
            u += d;
        }
        for(let _ = 0; _ < i; _++){
            let g = _ * (n + 1);
            for(let p = 0; p < n; p++){
                let v = p + g, x = v, y = v + n + 1, b = v + n + 2, w = v + 1;
                o.push(x, y, w), o.push(y, b, w);
            }
        }
        this.setIndex(o), this.setAttribute("position", new ve(c, 3)), this.setAttribute("normal", new ve(l, 3)), this.setAttribute("uv", new ve(h, 2));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
    }
}, nc = class s1 extends Ge {
    constructor(e = new Fn([
        new Z(0, .5),
        new Z(-.5, -.5),
        new Z(.5, -.5)
    ]), t = 12){
        super(), this.type = "ShapeGeometry", this.parameters = {
            shapes: e,
            curveSegments: t
        };
        let n = [], i = [], r = [], a = [], o = 0, c = 0;
        if (Array.isArray(e) === !1) l(e);
        else for(let h = 0; h < e.length; h++)l(e[h]), this.addGroup(o, c, h), o += c, c = 0;
        this.setIndex(n), this.setAttribute("position", new ve(i, 3)), this.setAttribute("normal", new ve(r, 3)), this.setAttribute("uv", new ve(a, 2));
        function l(h) {
            let u = i.length / 3, d = h.extractPoints(t), f = d.shape, m = d.holes;
            yn.isClockWise(f) === !1 && (f = f.reverse());
            for(let g = 0, p = m.length; g < p; g++){
                let v = m[g];
                yn.isClockWise(v) === !0 && (m[g] = v.reverse());
            }
            let _ = yn.triangulateShape(f, m);
            for(let g = 0, p = m.length; g < p; g++){
                let v = m[g];
                f = f.concat(v);
            }
            for(let g = 0, p = f.length; g < p; g++){
                let v = f[g];
                i.push(v.x, v.y, 0), r.push(0, 0, 1), a.push(v.x, v.y);
            }
            for(let g = 0, p = _.length; g < p; g++){
                let v = _[g], x = v[0] + u, y = v[1] + u, b = v[2] + u;
                n.push(x, y, b), c += 3;
            }
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    toJSON() {
        let e = super.toJSON(), t = this.parameters.shapes;
        return vx(t, e);
    }
    static fromJSON(e, t) {
        let n = [];
        for(let i = 0, r = e.shapes.length; i < r; i++){
            let a = t[e.shapes[i]];
            n.push(a);
        }
        return new s1(n, e.curveSegments);
    }
};
function vx(s1, e) {
    if (e.shapes = [], Array.isArray(s1)) for(let t = 0, n = s1.length; t < n; t++){
        let i = s1[t];
        e.shapes.push(i.uuid);
    }
    else e.shapes.push(s1.uuid);
    return e;
}
var ua = class s1 extends Ge {
    constructor(e = 1, t = 32, n = 16, i = 0, r = Math.PI * 2, a = 0, o = Math.PI){
        super(), this.type = "SphereGeometry", this.parameters = {
            radius: e,
            widthSegments: t,
            heightSegments: n,
            phiStart: i,
            phiLength: r,
            thetaStart: a,
            thetaLength: o
        }, t = Math.max(3, Math.floor(t)), n = Math.max(2, Math.floor(n));
        let c = Math.min(a + o, Math.PI), l = 0, h = [], u = new A, d = new A, f = [], m = [], _ = [], g = [];
        for(let p = 0; p <= n; p++){
            let v = [], x = p / n, y = 0;
            p === 0 && a === 0 ? y = .5 / t : p === n && c === Math.PI && (y = -.5 / t);
            for(let b = 0; b <= t; b++){
                let w = b / t;
                u.x = -e * Math.cos(i + w * r) * Math.sin(a + x * o), u.y = e * Math.cos(a + x * o), u.z = e * Math.sin(i + w * r) * Math.sin(a + x * o), m.push(u.x, u.y, u.z), d.copy(u).normalize(), _.push(d.x, d.y, d.z), g.push(w + y, 1 - x), v.push(l++);
            }
            h.push(v);
        }
        for(let p = 0; p < n; p++)for(let v = 0; v < t; v++){
            let x = h[p][v + 1], y = h[p][v], b = h[p + 1][v], w = h[p + 1][v + 1];
            (p !== 0 || a > 0) && f.push(x, y, w), (p !== n - 1 || c < Math.PI) && f.push(y, b, w);
        }
        this.setIndex(f), this.setAttribute("position", new ve(m, 3)), this.setAttribute("normal", new ve(_, 3)), this.setAttribute("uv", new ve(g, 2));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
    }
}, ic = class s1 extends di {
    constructor(e = 1, t = 0){
        let n = [
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            1,
            -1,
            -1
        ], i = [
            2,
            1,
            0,
            0,
            3,
            2,
            1,
            3,
            0,
            2,
            3,
            1
        ];
        super(n, i, e, t), this.type = "TetrahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new s1(e.radius, e.detail);
    }
}, sc = class s1 extends Ge {
    constructor(e = 1, t = .4, n = 12, i = 48, r = Math.PI * 2){
        super(), this.type = "TorusGeometry", this.parameters = {
            radius: e,
            tube: t,
            radialSegments: n,
            tubularSegments: i,
            arc: r
        }, n = Math.floor(n), i = Math.floor(i);
        let a = [], o = [], c = [], l = [], h = new A, u = new A, d = new A;
        for(let f = 0; f <= n; f++)for(let m = 0; m <= i; m++){
            let _ = m / i * r, g = f / n * Math.PI * 2;
            u.x = (e + t * Math.cos(g)) * Math.cos(_), u.y = (e + t * Math.cos(g)) * Math.sin(_), u.z = t * Math.sin(g), o.push(u.x, u.y, u.z), h.x = e * Math.cos(_), h.y = e * Math.sin(_), d.subVectors(u, h).normalize(), c.push(d.x, d.y, d.z), l.push(m / i), l.push(f / n);
        }
        for(let f = 1; f <= n; f++)for(let m = 1; m <= i; m++){
            let _ = (i + 1) * f + m - 1, g = (i + 1) * (f - 1) + m - 1, p = (i + 1) * (f - 1) + m, v = (i + 1) * f + m;
            a.push(_, g, v), a.push(g, p, v);
        }
        this.setIndex(a), this.setAttribute("position", new ve(o, 3)), this.setAttribute("normal", new ve(c, 3)), this.setAttribute("uv", new ve(l, 2));
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
    }
}, rc = class s1 extends Ge {
    constructor(e = 1, t = .4, n = 64, i = 8, r = 2, a = 3){
        super(), this.type = "TorusKnotGeometry", this.parameters = {
            radius: e,
            tube: t,
            tubularSegments: n,
            radialSegments: i,
            p: r,
            q: a
        }, n = Math.floor(n), i = Math.floor(i);
        let o = [], c = [], l = [], h = [], u = new A, d = new A, f = new A, m = new A, _ = new A, g = new A, p = new A;
        for(let x = 0; x <= n; ++x){
            let y = x / n * r * Math.PI * 2;
            v(y, r, a, e, f), v(y + .01, r, a, e, m), g.subVectors(m, f), p.addVectors(m, f), _.crossVectors(g, p), p.crossVectors(_, g), _.normalize(), p.normalize();
            for(let b = 0; b <= i; ++b){
                let w = b / i * Math.PI * 2, R = -t * Math.cos(w), I = t * Math.sin(w);
                u.x = f.x + (R * p.x + I * _.x), u.y = f.y + (R * p.y + I * _.y), u.z = f.z + (R * p.z + I * _.z), c.push(u.x, u.y, u.z), d.subVectors(u, f).normalize(), l.push(d.x, d.y, d.z), h.push(x / n), h.push(b / i);
            }
        }
        for(let x = 1; x <= n; x++)for(let y = 1; y <= i; y++){
            let b = (i + 1) * (x - 1) + (y - 1), w = (i + 1) * x + (y - 1), R = (i + 1) * x + y, I = (i + 1) * (x - 1) + y;
            o.push(b, w, I), o.push(w, R, I);
        }
        this.setIndex(o), this.setAttribute("position", new ve(c, 3)), this.setAttribute("normal", new ve(l, 3)), this.setAttribute("uv", new ve(h, 2));
        function v(x, y, b, w, R) {
            let I = Math.cos(x), M = Math.sin(x), T = b / y * x, O = Math.cos(T);
            R.x = w * (2 + O) * .5 * I, R.y = w * (2 + O) * M * .5, R.z = w * Math.sin(T) * .5;
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    static fromJSON(e) {
        return new s1(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
    }
}, ac = class s1 extends Ge {
    constructor(e = new aa(new A(-1, -1, 0), new A(-1, 1, 0), new A(1, 1, 0)), t = 64, n = 1, i = 8, r = !1){
        super(), this.type = "TubeGeometry", this.parameters = {
            path: e,
            tubularSegments: t,
            radius: n,
            radialSegments: i,
            closed: r
        };
        let a = e.computeFrenetFrames(t, r);
        this.tangents = a.tangents, this.normals = a.normals, this.binormals = a.binormals;
        let o = new A, c = new A, l = new Z, h = new A, u = [], d = [], f = [], m = [];
        _(), this.setIndex(m), this.setAttribute("position", new ve(u, 3)), this.setAttribute("normal", new ve(d, 3)), this.setAttribute("uv", new ve(f, 2));
        function _() {
            for(let x = 0; x < t; x++)g(x);
            g(r === !1 ? t : 0), v(), p();
        }
        function g(x) {
            h = e.getPointAt(x / t, h);
            let y = a.normals[x], b = a.binormals[x];
            for(let w = 0; w <= i; w++){
                let R = w / i * Math.PI * 2, I = Math.sin(R), M = -Math.cos(R);
                c.x = M * y.x + I * b.x, c.y = M * y.y + I * b.y, c.z = M * y.z + I * b.z, c.normalize(), d.push(c.x, c.y, c.z), o.x = h.x + n * c.x, o.y = h.y + n * c.y, o.z = h.z + n * c.z, u.push(o.x, o.y, o.z);
            }
        }
        function p() {
            for(let x = 1; x <= t; x++)for(let y = 1; y <= i; y++){
                let b = (i + 1) * (x - 1) + (y - 1), w = (i + 1) * x + (y - 1), R = (i + 1) * x + y, I = (i + 1) * (x - 1) + y;
                m.push(b, w, I), m.push(w, R, I);
            }
        }
        function v() {
            for(let x = 0; x <= t; x++)for(let y = 0; y <= i; y++)l.x = x / t, l.y = y / i, f.push(l.x, l.y);
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.path = this.parameters.path.toJSON(), e;
    }
    static fromJSON(e) {
        return new s1(new ca[e.path.type]().fromJSON(e.path), e.tubularSegments, e.radius, e.radialSegments, e.closed);
    }
}, oc = class extends Ge {
    constructor(e = null){
        if (super(), this.type = "WireframeGeometry", this.parameters = {
            geometry: e
        }, e !== null) {
            let t = [], n = new Set, i = new A, r = new A;
            if (e.index !== null) {
                let a = e.attributes.position, o = e.index, c = e.groups;
                c.length === 0 && (c = [
                    {
                        start: 0,
                        count: o.count,
                        materialIndex: 0
                    }
                ]);
                for(let l = 0, h = c.length; l < h; ++l){
                    let u = c[l], d = u.start, f = u.count;
                    for(let m = d, _ = d + f; m < _; m += 3)for(let g = 0; g < 3; g++){
                        let p = o.getX(m + g), v = o.getX(m + (g + 1) % 3);
                        i.fromBufferAttribute(a, p), r.fromBufferAttribute(a, v), su(i, r, n) === !0 && (t.push(i.x, i.y, i.z), t.push(r.x, r.y, r.z));
                    }
                }
            } else {
                let a = e.attributes.position;
                for(let o = 0, c = a.count / 3; o < c; o++)for(let l = 0; l < 3; l++){
                    let h = 3 * o + l, u = 3 * o + (l + 1) % 3;
                    i.fromBufferAttribute(a, h), r.fromBufferAttribute(a, u), su(i, r, n) === !0 && (t.push(i.x, i.y, i.z), t.push(r.x, r.y, r.z));
                }
            }
            this.setAttribute("position", new ve(t, 3));
        }
    }
    copy(e) {
        return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
    }
};
function su(s1, e, t) {
    let n = `${s1.x},${s1.y},${s1.z}-${e.x},${e.y},${e.z}`, i = `${e.x},${e.y},${e.z}-${s1.x},${s1.y},${s1.z}`;
    return t.has(n) === !0 || t.has(i) === !0 ? !1 : (t.add(n), t.add(i), !0);
}
var ru = Object.freeze({
    __proto__: null,
    BoxGeometry: Ji,
    CapsuleGeometry: qo,
    CircleGeometry: Yo,
    ConeGeometry: Zo,
    CylinderGeometry: Ns,
    DodecahedronGeometry: Jo,
    EdgesGeometry: $o,
    ExtrudeGeometry: jo,
    IcosahedronGeometry: ec,
    LatheGeometry: la,
    OctahedronGeometry: ha,
    PlaneGeometry: $r,
    PolyhedronGeometry: di,
    RingGeometry: tc,
    ShapeGeometry: nc,
    SphereGeometry: ua,
    TetrahedronGeometry: ic,
    TorusGeometry: sc,
    TorusKnotGeometry: rc,
    TubeGeometry: ac,
    WireframeGeometry: oc
}), cc = class extends bt {
    constructor(e){
        super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new pe(0), this.transparent = !0, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.fog = e.fog, this;
    }
}, lc = class extends jt {
    constructor(e){
        super(e), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
    }
}, da = class extends bt {
    constructor(e){
        super(), this.isMeshStandardMaterial = !0, this.defines = {
            STANDARD: ""
        }, this.type = "MeshStandardMaterial", this.color = new pe(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new pe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.defines = {
            STANDARD: ""
        }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
    }
}, hc = class extends da {
    constructor(e){
        super(), this.isMeshPhysicalMaterial = !0, this.defines = {
            STANDARD: "",
            PHYSICAL: ""
        }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new Z(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
            get: function() {
                return ct(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
            },
            set: function(t) {
                this.ior = (1 + .4 * t) / (1 - .4 * t);
            }
        }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [
            100,
            400
        ], this.iridescenceThicknessMap = null, this.sheenColor = new pe(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new pe(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new pe(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(e);
    }
    get anisotropy() {
        return this._anisotropy;
    }
    set anisotropy(e) {
        this._anisotropy > 0 != e > 0 && this.version++, this._anisotropy = e;
    }
    get clearcoat() {
        return this._clearcoat;
    }
    set clearcoat(e) {
        this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
    }
    get iridescence() {
        return this._iridescence;
    }
    set iridescence(e) {
        this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
    }
    get sheen() {
        return this._sheen;
    }
    set sheen(e) {
        this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
    }
    get transmission() {
        return this._transmission;
    }
    set transmission(e) {
        this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
    }
    copy(e) {
        return super.copy(e), this.defines = {
            STANDARD: "",
            PHYSICAL: ""
        }, this.anisotropy = e.anisotropy, this.anisotropyRotation = e.anisotropyRotation, this.anisotropyMap = e.anisotropyMap, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [
            ...e.iridescenceThicknessRange
        ], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
    }
}, uc = class extends bt {
    constructor(e){
        super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new pe(16777215), this.specular = new pe(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new pe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = xa, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
    }
}, dc = class extends bt {
    constructor(e){
        super(), this.isMeshToonMaterial = !0, this.defines = {
            TOON: ""
        }, this.type = "MeshToonMaterial", this.color = new pe(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new pe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
    }
}, fc = class extends bt {
    constructor(e){
        super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
    }
}, pc = class extends bt {
    constructor(e){
        super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new pe(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new pe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = xa, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
    }
}, mc = class extends bt {
    constructor(e){
        super(), this.isMeshMatcapMaterial = !0, this.defines = {
            MATCAP: ""
        }, this.type = "MeshMatcapMaterial", this.color = new pe(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = mi, this.normalScale = new Z(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.defines = {
            MATCAP: ""
        }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
    }
}, gc = class extends wt {
    constructor(e){
        super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
    }
};
function ni(s1, e, t) {
    return !s1 || !t && s1.constructor === e ? s1 : typeof e.BYTES_PER_ELEMENT == "number" ? new e(s1) : Array.prototype.slice.call(s1);
}
function Ud(s1) {
    return ArrayBuffer.isView(s1) && !(s1 instanceof DataView);
}
function Dd(s1) {
    function e(i, r) {
        return s1[i] - s1[r];
    }
    let t = s1.length, n = new Array(t);
    for(let i = 0; i !== t; ++i)n[i] = i;
    return n.sort(e), n;
}
function _c(s1, e, t) {
    let n = s1.length, i = new s1.constructor(n);
    for(let r = 0, a = 0; a !== n; ++r){
        let o = t[r] * e;
        for(let c = 0; c !== e; ++c)i[a++] = s1[o + c];
    }
    return i;
}
function $c(s1, e, t, n) {
    let i = 1, r = s1[0];
    for(; r !== void 0 && r[n] === void 0;)r = s1[i++];
    if (r === void 0) return;
    let a = r[n];
    if (a !== void 0) if (Array.isArray(a)) do a = r[n], a !== void 0 && (e.push(r.time), t.push.apply(t, a)), r = s1[i++];
    while (r !== void 0)
    else if (a.toArray !== void 0) do a = r[n], a !== void 0 && (e.push(r.time), a.toArray(t, t.length)), r = s1[i++];
    while (r !== void 0)
    else do a = r[n], a !== void 0 && (e.push(r.time), t.push(a)), r = s1[i++];
    while (r !== void 0)
}
function yx(s1, e, t, n, i = 30) {
    let r = s1.clone();
    r.name = e;
    let a = [];
    for(let c = 0; c < r.tracks.length; ++c){
        let l = r.tracks[c], h = l.getValueSize(), u = [], d = [];
        for(let f = 0; f < l.times.length; ++f){
            let m = l.times[f] * i;
            if (!(m < t || m >= n)) {
                u.push(l.times[f]);
                for(let _ = 0; _ < h; ++_)d.push(l.values[f * h + _]);
            }
        }
        u.length !== 0 && (l.times = ni(u, l.times.constructor), l.values = ni(d, l.values.constructor), a.push(l));
    }
    r.tracks = a;
    let o = 1 / 0;
    for(let c = 0; c < r.tracks.length; ++c)o > r.tracks[c].times[0] && (o = r.tracks[c].times[0]);
    for(let c = 0; c < r.tracks.length; ++c)r.tracks[c].shift(-1 * o);
    return r.resetDuration(), r;
}
function Mx(s1, e = 0, t = s1, n = 30) {
    n <= 0 && (n = 30);
    let i = t.tracks.length, r = e / n;
    for(let a = 0; a < i; ++a){
        let o = t.tracks[a], c = o.ValueTypeName;
        if (c === "bool" || c === "string") continue;
        let l = s1.tracks.find(function(p) {
            return p.name === o.name && p.ValueTypeName === c;
        });
        if (l === void 0) continue;
        let h = 0, u = o.getValueSize();
        o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (h = u / 3);
        let d = 0, f = l.getValueSize();
        l.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (d = f / 3);
        let m = o.times.length - 1, _;
        if (r <= o.times[0]) {
            let p = h, v = u - h;
            _ = o.values.slice(p, v);
        } else if (r >= o.times[m]) {
            let p = m * u + h, v = p + u - h;
            _ = o.values.slice(p, v);
        } else {
            let p = o.createInterpolant(), v = h, x = u - h;
            p.evaluate(r), _ = p.resultBuffer.slice(v, x);
        }
        c === "quaternion" && new Ut().fromArray(_).normalize().conjugate().toArray(_);
        let g = l.times.length;
        for(let p = 0; p < g; ++p){
            let v = p * f + d;
            if (c === "quaternion") Ut.multiplyQuaternionsFlat(l.values, v, _, 0, l.values, v);
            else {
                let x = f - d * 2;
                for(let y = 0; y < x; ++y)l.values[v + y] -= _[y];
            }
        }
    }
    return s1.blendMode = xd, s1;
}
var Sv = {
    convertArray: ni,
    isTypedArray: Ud,
    getKeyframeOrder: Dd,
    sortedArray: _c,
    flattenJSON: $c,
    subclip: yx,
    makeClipAdditive: Mx
}, es = class {
    constructor(e, t, n, i){
        this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = i !== void 0 ? i : new t.constructor(n), this.sampleValues = t, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {};
    }
    evaluate(e) {
        let t = this.parameterPositions, n = this._cachedIndex, i = t[n], r = t[n - 1];
        e: {
            t: {
                let a;
                n: {
                    i: if (!(e < i)) {
                        for(let o = n + 2;;){
                            if (i === void 0) {
                                if (e < r) break i;
                                return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
                            }
                            if (n === o) break;
                            if (r = i, i = t[++n], e < i) break t;
                        }
                        a = t.length;
                        break n;
                    }
                    if (!(e >= r)) {
                        let o = t[1];
                        e < o && (n = 2, r = o);
                        for(let c = n - 2;;){
                            if (r === void 0) return this._cachedIndex = 0, this.copySampleValue_(0);
                            if (n === c) break;
                            if (i = r, r = t[--n - 1], e >= r) break t;
                        }
                        a = n, n = 0;
                        break n;
                    }
                    break e;
                }
                for(; n < a;){
                    let o = n + a >>> 1;
                    e < t[o] ? a = o : n = o + 1;
                }
                if (i = t[n], r = t[n - 1], r === void 0) return this._cachedIndex = 0, this.copySampleValue_(0);
                if (i === void 0) return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
            }
            this._cachedIndex = n, this.intervalChanged_(n, r, i);
        }
        return this.interpolate_(n, r, e, i);
    }
    getSettings_() {
        return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(e) {
        let t = this.resultBuffer, n = this.sampleValues, i = this.valueSize, r = e * i;
        for(let a = 0; a !== i; ++a)t[a] = n[r + a];
        return t;
    }
    interpolate_() {
        throw new Error("call to abstract method");
    }
    intervalChanged_() {}
}, xc = class extends es {
    constructor(e, t, n, i){
        super(e, t, n, i), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
            endingStart: zi,
            endingEnd: zi
        };
    }
    intervalChanged_(e, t, n) {
        let i = this.parameterPositions, r = e - 2, a = e + 1, o = i[r], c = i[a];
        if (o === void 0) switch(this.getSettings_().endingStart){
            case Vi:
                r = e, o = 2 * t - n;
                break;
            case Br:
                r = i.length - 2, o = t + i[r] - i[r + 1];
                break;
            default:
                r = e, o = n;
        }
        if (c === void 0) switch(this.getSettings_().endingEnd){
            case Vi:
                a = e, c = 2 * n - t;
                break;
            case Br:
                a = 1, c = n + i[1] - i[0];
                break;
            default:
                a = e - 1, c = t;
        }
        let l = (n - t) * .5, h = this.valueSize;
        this._weightPrev = l / (t - o), this._weightNext = l / (c - n), this._offsetPrev = r * h, this._offsetNext = a * h;
    }
    interpolate_(e, t, n, i) {
        let r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = e * o, l = c - o, h = this._offsetPrev, u = this._offsetNext, d = this._weightPrev, f = this._weightNext, m = (n - t) / (i - t), _ = m * m, g = _ * m, p = -d * g + 2 * d * _ - d * m, v = (1 + d) * g + (-1.5 - 2 * d) * _ + (-.5 + d) * m + 1, x = (-1 - f) * g + (1.5 + f) * _ + .5 * m, y = f * g - f * _;
        for(let b = 0; b !== o; ++b)r[b] = p * a[h + b] + v * a[l + b] + x * a[c + b] + y * a[u + b];
        return r;
    }
}, fa = class extends es {
    constructor(e, t, n, i){
        super(e, t, n, i);
    }
    interpolate_(e, t, n, i) {
        let r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = e * o, l = c - o, h = (n - t) / (i - t), u = 1 - h;
        for(let d = 0; d !== o; ++d)r[d] = a[l + d] * u + a[c + d] * h;
        return r;
    }
}, vc = class extends es {
    constructor(e, t, n, i){
        super(e, t, n, i);
    }
    interpolate_(e) {
        return this.copySampleValue_(e - 1);
    }
}, Jt = class {
    constructor(e, t, n, i){
        if (e === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (t === void 0 || t.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
        this.name = e, this.times = ni(t, this.TimeBufferType), this.values = ni(n, this.ValueBufferType), this.setInterpolation(i || this.DefaultInterpolation);
    }
    static toJSON(e) {
        let t = e.constructor, n;
        if (t.toJSON !== this.toJSON) n = t.toJSON(e);
        else {
            n = {
                name: e.name,
                times: ni(e.times, Array),
                values: ni(e.values, Array)
            };
            let i = e.getInterpolation();
            i !== e.DefaultInterpolation && (n.interpolation = i);
        }
        return n.type = e.ValueTypeName, n;
    }
    InterpolantFactoryMethodDiscrete(e) {
        return new vc(this.times, this.values, this.getValueSize(), e);
    }
    InterpolantFactoryMethodLinear(e) {
        return new fa(this.times, this.values, this.getValueSize(), e);
    }
    InterpolantFactoryMethodSmooth(e) {
        return new xc(this.times, this.values, this.getValueSize(), e);
    }
    setInterpolation(e) {
        let t;
        switch(e){
            case Or:
                t = this.InterpolantFactoryMethodDiscrete;
                break;
            case Fr:
                t = this.InterpolantFactoryMethodLinear;
                break;
            case La:
                t = this.InterpolantFactoryMethodSmooth;
                break;
        }
        if (t === void 0) {
            let n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
            if (this.createInterpolant === void 0) if (e !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
            else throw new Error(n);
            return console.warn("THREE.KeyframeTrack:", n), this;
        }
        return this.createInterpolant = t, this;
    }
    getInterpolation() {
        switch(this.createInterpolant){
            case this.InterpolantFactoryMethodDiscrete:
                return Or;
            case this.InterpolantFactoryMethodLinear:
                return Fr;
            case this.InterpolantFactoryMethodSmooth:
                return La;
        }
    }
    getValueSize() {
        return this.values.length / this.times.length;
    }
    shift(e) {
        if (e !== 0) {
            let t = this.times;
            for(let n = 0, i = t.length; n !== i; ++n)t[n] += e;
        }
        return this;
    }
    scale(e) {
        if (e !== 1) {
            let t = this.times;
            for(let n = 0, i = t.length; n !== i; ++n)t[n] *= e;
        }
        return this;
    }
    trim(e, t) {
        let n = this.times, i = n.length, r = 0, a = i - 1;
        for(; r !== i && n[r] < e;)++r;
        for(; a !== -1 && n[a] > t;)--a;
        if (++a, r !== 0 || a !== i) {
            r >= a && (a = Math.max(a, 1), r = a - 1);
            let o = this.getValueSize();
            this.times = n.slice(r, a), this.values = this.values.slice(r * o, a * o);
        }
        return this;
    }
    validate() {
        let e = !0, t = this.getValueSize();
        t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
        let n = this.times, i = this.values, r = n.length;
        r === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
        let a = null;
        for(let o = 0; o !== r; o++){
            let c = n[o];
            if (typeof c == "number" && isNaN(c)) {
                console.error("THREE.KeyframeTrack: Time is not a valid number.", this, o, c), e = !1;
                break;
            }
            if (a !== null && a > c) {
                console.error("THREE.KeyframeTrack: Out of order keys.", this, o, c, a), e = !1;
                break;
            }
            a = c;
        }
        if (i !== void 0 && Ud(i)) for(let o = 0, c = i.length; o !== c; ++o){
            let l = i[o];
            if (isNaN(l)) {
                console.error("THREE.KeyframeTrack: Value is not a valid number.", this, o, l), e = !1;
                break;
            }
        }
        return e;
    }
    optimize() {
        let e = this.times.slice(), t = this.values.slice(), n = this.getValueSize(), i = this.getInterpolation() === La, r = e.length - 1, a = 1;
        for(let o = 1; o < r; ++o){
            let c = !1, l = e[o], h = e[o + 1];
            if (l !== h && (o !== 1 || l !== e[0])) if (i) c = !0;
            else {
                let u = o * n, d = u - n, f = u + n;
                for(let m = 0; m !== n; ++m){
                    let _ = t[u + m];
                    if (_ !== t[d + m] || _ !== t[f + m]) {
                        c = !0;
                        break;
                    }
                }
            }
            if (c) {
                if (o !== a) {
                    e[a] = e[o];
                    let u = o * n, d = a * n;
                    for(let f = 0; f !== n; ++f)t[d + f] = t[u + f];
                }
                ++a;
            }
        }
        if (r > 0) {
            e[a] = e[r];
            for(let o = r * n, c = a * n, l = 0; l !== n; ++l)t[c + l] = t[o + l];
            ++a;
        }
        return a !== e.length ? (this.times = e.slice(0, a), this.values = t.slice(0, a * n)) : (this.times = e, this.values = t), this;
    }
    clone() {
        let e = this.times.slice(), t = this.values.slice(), n = this.constructor, i = new n(this.name, e, t);
        return i.createInterpolant = this.createInterpolant, i;
    }
};
Jt.prototype.TimeBufferType = Float32Array;
Jt.prototype.ValueBufferType = Float32Array;
Jt.prototype.DefaultInterpolation = Fr;
var Vn = class extends Jt {
};
Vn.prototype.ValueTypeName = "bool";
Vn.prototype.ValueBufferType = Array;
Vn.prototype.DefaultInterpolation = Or;
Vn.prototype.InterpolantFactoryMethodLinear = void 0;
Vn.prototype.InterpolantFactoryMethodSmooth = void 0;
var pa = class extends Jt {
};
pa.prototype.ValueTypeName = "color";
var ts = class extends Jt {
};
ts.prototype.ValueTypeName = "number";
var yc = class extends es {
    constructor(e, t, n, i){
        super(e, t, n, i);
    }
    interpolate_(e, t, n, i) {
        let r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = (n - t) / (i - t), l = e * o;
        for(let h = l + o; l !== h; l += 4)Ut.slerpFlat(r, 0, a, l - o, a, l, c);
        return r;
    }
}, pi = class extends Jt {
    InterpolantFactoryMethodLinear(e) {
        return new yc(this.times, this.values, this.getValueSize(), e);
    }
};
pi.prototype.ValueTypeName = "quaternion";
pi.prototype.DefaultInterpolation = Fr;
pi.prototype.InterpolantFactoryMethodSmooth = void 0;
var kn = class extends Jt {
};
kn.prototype.ValueTypeName = "string";
kn.prototype.ValueBufferType = Array;
kn.prototype.DefaultInterpolation = Or;
kn.prototype.InterpolantFactoryMethodLinear = void 0;
kn.prototype.InterpolantFactoryMethodSmooth = void 0;
var ns = class extends Jt {
};
ns.prototype.ValueTypeName = "vector";
var is = class {
    constructor(e, t = -1, n, i = Xc){
        this.name = e, this.tracks = n, this.duration = t, this.blendMode = i, this.uuid = kt(), this.duration < 0 && this.resetDuration();
    }
    static parse(e) {
        let t = [], n = e.tracks, i = 1 / (e.fps || 1);
        for(let a = 0, o = n.length; a !== o; ++a)t.push(bx(n[a]).scale(i));
        let r = new this(e.name, e.duration, t, e.blendMode);
        return r.uuid = e.uuid, r;
    }
    static toJSON(e) {
        let t = [], n = e.tracks, i = {
            name: e.name,
            duration: e.duration,
            tracks: t,
            uuid: e.uuid,
            blendMode: e.blendMode
        };
        for(let r = 0, a = n.length; r !== a; ++r)t.push(Jt.toJSON(n[r]));
        return i;
    }
    static CreateFromMorphTargetSequence(e, t, n, i) {
        let r = t.length, a = [];
        for(let o = 0; o < r; o++){
            let c = [], l = [];
            c.push((o + r - 1) % r, o, (o + 1) % r), l.push(0, 1, 0);
            let h = Dd(c);
            c = _c(c, 1, h), l = _c(l, 1, h), !i && c[0] === 0 && (c.push(r), l.push(l[0])), a.push(new ts(".morphTargetInfluences[" + t[o].name + "]", c, l).scale(1 / n));
        }
        return new this(e, -1, a);
    }
    static findByName(e, t) {
        let n = e;
        if (!Array.isArray(e)) {
            let i = e;
            n = i.geometry && i.geometry.animations || i.animations;
        }
        for(let i = 0; i < n.length; i++)if (n[i].name === t) return n[i];
        return null;
    }
    static CreateClipsFromMorphTargetSequences(e, t, n) {
        let i = {}, r = /^([\w-]*?)([\d]+)$/;
        for(let o = 0, c = e.length; o < c; o++){
            let l = e[o], h = l.name.match(r);
            if (h && h.length > 1) {
                let u = h[1], d = i[u];
                d || (i[u] = d = []), d.push(l);
            }
        }
        let a = [];
        for(let o in i)a.push(this.CreateFromMorphTargetSequence(o, i[o], t, n));
        return a;
    }
    static parseAnimation(e, t) {
        if (!e) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
        let n = function(u, d, f, m, _) {
            if (f.length !== 0) {
                let g = [], p = [];
                $c(f, g, p, m), g.length !== 0 && _.push(new u(d, g, p));
            }
        }, i = [], r = e.name || "default", a = e.fps || 30, o = e.blendMode, c = e.length || -1, l = e.hierarchy || [];
        for(let u = 0; u < l.length; u++){
            let d = l[u].keys;
            if (!(!d || d.length === 0)) if (d[0].morphTargets) {
                let f = {}, m;
                for(m = 0; m < d.length; m++)if (d[m].morphTargets) for(let _ = 0; _ < d[m].morphTargets.length; _++)f[d[m].morphTargets[_]] = -1;
                for(let _ in f){
                    let g = [], p = [];
                    for(let v = 0; v !== d[m].morphTargets.length; ++v){
                        let x = d[m];
                        g.push(x.time), p.push(x.morphTarget === _ ? 1 : 0);
                    }
                    i.push(new ts(".morphTargetInfluence[" + _ + "]", g, p));
                }
                c = f.length * a;
            } else {
                let f = ".bones[" + t[u].name + "]";
                n(ns, f + ".position", d, "pos", i), n(pi, f + ".quaternion", d, "rot", i), n(ns, f + ".scale", d, "scl", i);
            }
        }
        return i.length === 0 ? null : new this(r, c, i, o);
    }
    resetDuration() {
        let e = this.tracks, t = 0;
        for(let n = 0, i = e.length; n !== i; ++n){
            let r = this.tracks[n];
            t = Math.max(t, r.times[r.times.length - 1]);
        }
        return this.duration = t, this;
    }
    trim() {
        for(let e = 0; e < this.tracks.length; e++)this.tracks[e].trim(0, this.duration);
        return this;
    }
    validate() {
        let e = !0;
        for(let t = 0; t < this.tracks.length; t++)e = e && this.tracks[t].validate();
        return e;
    }
    optimize() {
        for(let e = 0; e < this.tracks.length; e++)this.tracks[e].optimize();
        return this;
    }
    clone() {
        let e = [];
        for(let t = 0; t < this.tracks.length; t++)e.push(this.tracks[t].clone());
        return new this.constructor(this.name, this.duration, e, this.blendMode);
    }
    toJSON() {
        return this.constructor.toJSON(this);
    }
};
function Sx(s1) {
    switch(s1.toLowerCase()){
        case "scalar":
        case "double":
        case "float":
        case "number":
        case "integer":
            return ts;
        case "vector":
        case "vector2":
        case "vector3":
        case "vector4":
            return ns;
        case "color":
            return pa;
        case "quaternion":
            return pi;
        case "bool":
        case "boolean":
            return Vn;
        case "string":
            return kn;
    }
    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + s1);
}
function bx(s1) {
    if (s1.type === void 0) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    let e = Sx(s1.type);
    if (s1.times === void 0) {
        let t = [], n = [];
        $c(s1.keys, t, n, "value"), s1.times = t, s1.values = n;
    }
    return e.parse !== void 0 ? e.parse(s1) : new e(s1.name, s1.times, s1.values, s1.interpolation);
}
var ss = {
    enabled: !1,
    files: {},
    add: function(s1, e) {
        this.enabled !== !1 && (this.files[s1] = e);
    },
    get: function(s1) {
        if (this.enabled !== !1) return this.files[s1];
    },
    remove: function(s1) {
        delete this.files[s1];
    },
    clear: function() {
        this.files = {};
    }
}, ma = class {
    constructor(e, t, n){
        let i = this, r = !1, a = 0, o = 0, c, l = [];
        this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = n, this.itemStart = function(h) {
            o++, r === !1 && i.onStart !== void 0 && i.onStart(h, a, o), r = !0;
        }, this.itemEnd = function(h) {
            a++, i.onProgress !== void 0 && i.onProgress(h, a, o), a === o && (r = !1, i.onLoad !== void 0 && i.onLoad());
        }, this.itemError = function(h) {
            i.onError !== void 0 && i.onError(h);
        }, this.resolveURL = function(h) {
            return c ? c(h) : h;
        }, this.setURLModifier = function(h) {
            return c = h, this;
        }, this.addHandler = function(h, u) {
            return l.push(h, u), this;
        }, this.removeHandler = function(h) {
            let u = l.indexOf(h);
            return u !== -1 && l.splice(u, 2), this;
        }, this.getHandler = function(h) {
            for(let u = 0, d = l.length; u < d; u += 2){
                let f = l[u], m = l[u + 1];
                if (f.global && (f.lastIndex = 0), f.test(h)) return m;
            }
            return null;
        };
    }
}, Ex = new ma, Dt = class {
    constructor(e){
        this.manager = e !== void 0 ? e : Ex, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
    }
    load() {}
    loadAsync(e, t) {
        let n = this;
        return new Promise(function(i, r) {
            n.load(e, i, t, r);
        });
    }
    parse() {}
    setCrossOrigin(e) {
        return this.crossOrigin = e, this;
    }
    setWithCredentials(e) {
        return this.withCredentials = e, this;
    }
    setPath(e) {
        return this.path = e, this;
    }
    setResourcePath(e) {
        return this.resourcePath = e, this;
    }
    setRequestHeader(e) {
        return this.requestHeader = e, this;
    }
};
Dt.DEFAULT_MATERIAL_NAME = "__DEFAULT";
var fn = {}, Mc = class extends Error {
    constructor(e, t){
        super(e), this.response = t;
    }
}, rn = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
        let r = ss.get(e);
        if (r !== void 0) return this.manager.itemStart(e), setTimeout(()=>{
            t && t(r), this.manager.itemEnd(e);
        }, 0), r;
        if (fn[e] !== void 0) {
            fn[e].push({
                onLoad: t,
                onProgress: n,
                onError: i
            });
            return;
        }
        fn[e] = [], fn[e].push({
            onLoad: t,
            onProgress: n,
            onError: i
        });
        let a = new Request(e, {
            headers: new Headers(this.requestHeader),
            credentials: this.withCredentials ? "include" : "same-origin"
        }), o = this.mimeType, c = this.responseType;
        fetch(a).then((l)=>{
            if (l.status === 200 || l.status === 0) {
                if (l.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || l.body === void 0 || l.body.getReader === void 0) return l;
                let h = fn[e], u = l.body.getReader(), d = l.headers.get("Content-Length") || l.headers.get("X-File-Size"), f = d ? parseInt(d) : 0, m = f !== 0, _ = 0, g = new ReadableStream({
                    start (p) {
                        v();
                        function v() {
                            u.read().then(({ done: x , value: y  })=>{
                                if (x) p.close();
                                else {
                                    _ += y.byteLength;
                                    let b = new ProgressEvent("progress", {
                                        lengthComputable: m,
                                        loaded: _,
                                        total: f
                                    });
                                    for(let w = 0, R = h.length; w < R; w++){
                                        let I = h[w];
                                        I.onProgress && I.onProgress(b);
                                    }
                                    p.enqueue(y), v();
                                }
                            });
                        }
                    }
                });
                return new Response(g);
            } else throw new Mc(`fetch for "${l.url}" responded with ${l.status}: ${l.statusText}`, l);
        }).then((l)=>{
            switch(c){
                case "arraybuffer":
                    return l.arrayBuffer();
                case "blob":
                    return l.blob();
                case "document":
                    return l.text().then((h)=>new DOMParser().parseFromString(h, o));
                case "json":
                    return l.json();
                default:
                    if (o === void 0) return l.text();
                    {
                        let u = /charset="?([^;"\s]*)"?/i.exec(o), d = u && u[1] ? u[1].toLowerCase() : void 0, f = new TextDecoder(d);
                        return l.arrayBuffer().then((m)=>f.decode(m));
                    }
            }
        }).then((l)=>{
            ss.add(e, l);
            let h = fn[e];
            delete fn[e];
            for(let u = 0, d = h.length; u < d; u++){
                let f = h[u];
                f.onLoad && f.onLoad(l);
            }
        }).catch((l)=>{
            let h = fn[e];
            if (h === void 0) throw this.manager.itemError(e), l;
            delete fn[e];
            for(let u = 0, d = h.length; u < d; u++){
                let f = h[u];
                f.onError && f.onError(l);
            }
            this.manager.itemError(e);
        }).finally(()=>{
            this.manager.itemEnd(e);
        }), this.manager.itemStart(e);
    }
    setResponseType(e) {
        return this.responseType = e, this;
    }
    setMimeType(e) {
        return this.mimeType = e, this;
    }
}, au = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = new rn(this.manager);
        a.setPath(this.path), a.setRequestHeader(this.requestHeader), a.setWithCredentials(this.withCredentials), a.load(e, function(o) {
            try {
                t(r.parse(JSON.parse(o)));
            } catch (c) {
                i ? i(c) : console.error(c), r.manager.itemError(e);
            }
        }, n, i);
    }
    parse(e) {
        let t = [];
        for(let n = 0; n < e.length; n++){
            let i = is.parse(e[n]);
            t.push(i);
        }
        return t;
    }
}, ou = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = [], o = new Us, c = new rn(this.manager);
        c.setPath(this.path), c.setResponseType("arraybuffer"), c.setRequestHeader(this.requestHeader), c.setWithCredentials(r.withCredentials);
        let l = 0;
        function h(u) {
            c.load(e[u], function(d) {
                let f = r.parse(d, !0);
                a[u] = {
                    width: f.width,
                    height: f.height,
                    format: f.format,
                    mipmaps: f.mipmaps
                }, l += 1, l === 6 && (f.mipmapCount === 1 && (o.minFilter = mt), o.image = a, o.format = f.format, o.needsUpdate = !0, t && t(o));
            }, n, i);
        }
        if (Array.isArray(e)) for(let u = 0, d = e.length; u < d; ++u)h(u);
        else c.load(e, function(u) {
            let d = r.parse(u, !0);
            if (d.isCubemap) {
                let f = d.mipmaps.length / d.mipmapCount;
                for(let m = 0; m < f; m++){
                    a[m] = {
                        mipmaps: []
                    };
                    for(let _ = 0; _ < d.mipmapCount; _++)a[m].mipmaps.push(d.mipmaps[m * d.mipmapCount + _]), a[m].format = d.format, a[m].width = d.width, a[m].height = d.height;
                }
                o.image = a;
            } else o.image.width = d.width, o.image.height = d.height, o.mipmaps = d.mipmaps;
            d.mipmapCount === 1 && (o.minFilter = mt), o.format = d.format, o.needsUpdate = !0, t && t(o);
        }, n, i);
        return o;
    }
}, rs = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
        let r = this, a = ss.get(e);
        if (a !== void 0) return r.manager.itemStart(e), setTimeout(function() {
            t && t(a), r.manager.itemEnd(e);
        }, 0), a;
        let o = ws("img");
        function c() {
            h(), ss.add(e, this), t && t(this), r.manager.itemEnd(e);
        }
        function l(u) {
            h(), i && i(u), r.manager.itemError(e), r.manager.itemEnd(e);
        }
        function h() {
            o.removeEventListener("load", c, !1), o.removeEventListener("error", l, !1);
        }
        return o.addEventListener("load", c, !1), o.addEventListener("error", l, !1), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (o.crossOrigin = this.crossOrigin), r.manager.itemStart(e), o.src = e, o;
    }
}, cu = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = new Ki;
        r.colorSpace = vt;
        let a = new rs(this.manager);
        a.setCrossOrigin(this.crossOrigin), a.setPath(this.path);
        let o = 0;
        function c(l) {
            a.load(e[l], function(h) {
                r.images[l] = h, o++, o === 6 && (r.needsUpdate = !0, t && t(r));
            }, void 0, i);
        }
        for(let l = 0; l < e.length; ++l)c(l);
        return r;
    }
}, lu = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = new oi, o = new rn(this.manager);
        return o.setResponseType("arraybuffer"), o.setRequestHeader(this.requestHeader), o.setPath(this.path), o.setWithCredentials(r.withCredentials), o.load(e, function(c) {
            let l;
            try {
                l = r.parse(c);
            } catch (h) {
                if (i !== void 0) i(h);
                else {
                    console.error(h);
                    return;
                }
            }
            l.image !== void 0 ? a.image = l.image : l.data !== void 0 && (a.image.width = l.width, a.image.height = l.height, a.image.data = l.data), a.wrapS = l.wrapS !== void 0 ? l.wrapS : It, a.wrapT = l.wrapT !== void 0 ? l.wrapT : It, a.magFilter = l.magFilter !== void 0 ? l.magFilter : mt, a.minFilter = l.minFilter !== void 0 ? l.minFilter : mt, a.anisotropy = l.anisotropy !== void 0 ? l.anisotropy : 1, l.colorSpace !== void 0 ? a.colorSpace = l.colorSpace : l.encoding !== void 0 && (a.encoding = l.encoding), l.flipY !== void 0 && (a.flipY = l.flipY), l.format !== void 0 && (a.format = l.format), l.type !== void 0 && (a.type = l.type), l.mipmaps !== void 0 && (a.mipmaps = l.mipmaps, a.minFilter = li), l.mipmapCount === 1 && (a.minFilter = mt), l.generateMipmaps !== void 0 && (a.generateMipmaps = l.generateMipmaps), a.needsUpdate = !0, t && t(a, l);
        }, n, i), a;
    }
}, hu = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = new St, a = new rs(this.manager);
        return a.setCrossOrigin(this.crossOrigin), a.setPath(this.path), a.load(e, function(o) {
            r.image = o, r.needsUpdate = !0, t !== void 0 && t(r);
        }, n, i), r;
    }
}, En = class extends Je {
    constructor(e, t = 1){
        super(), this.isLight = !0, this.type = "Light", this.color = new pe(e), this.intensity = t;
    }
    dispose() {}
    copy(e, t) {
        return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), t;
    }
}, Sc = class extends En {
    constructor(e, t, n){
        super(e, n), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(Je.DEFAULT_UP), this.updateMatrix(), this.groundColor = new pe(t);
    }
    copy(e, t) {
        return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
    }
}, oo = new ze, uu = new A, du = new A, zs = class {
    constructor(e){
        this.camera = e, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new Z(512, 512), this.map = null, this.mapPass = null, this.matrix = new ze, this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Ps, this._frameExtents = new Z(1, 1), this._viewportCount = 1, this._viewports = [
            new je(0, 0, 1, 1)
        ];
    }
    getViewportCount() {
        return this._viewportCount;
    }
    getFrustum() {
        return this._frustum;
    }
    updateMatrices(e) {
        let t = this.camera, n = this.matrix;
        uu.setFromMatrixPosition(e.matrixWorld), t.position.copy(uu), du.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(du), t.updateMatrixWorld(), oo.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(oo), n.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), n.multiply(oo);
    }
    getViewport(e) {
        return this._viewports[e];
    }
    getFrameExtents() {
        return this._frameExtents;
    }
    dispose() {
        this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
    }
    copy(e) {
        return this.camera = e.camera.clone(), this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    toJSON() {
        let e = {};
        return this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
    }
}, bc = class extends zs {
    constructor(){
        super(new yt(50, 1, .5, 500)), this.isSpotLightShadow = !0, this.focus = 1;
    }
    updateMatrices(e) {
        let t = this.camera, n = Zi * 2 * e.angle * this.focus, i = this.mapSize.width / this.mapSize.height, r = e.distance || t.far;
        (n !== t.fov || i !== t.aspect || r !== t.far) && (t.fov = n, t.aspect = i, t.far = r, t.updateProjectionMatrix()), super.updateMatrices(e);
    }
    copy(e) {
        return super.copy(e), this.focus = e.focus, this;
    }
}, Ec = class extends En {
    constructor(e, t, n = 0, i = Math.PI / 3, r = 0, a = 2){
        super(e, t), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(Je.DEFAULT_UP), this.updateMatrix(), this.target = new Je, this.distance = n, this.angle = i, this.penumbra = r, this.decay = a, this.map = null, this.shadow = new bc;
    }
    get power() {
        return this.intensity * Math.PI;
    }
    set power(e) {
        this.intensity = e / Math.PI;
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(e, t) {
        return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
    }
}, fu = new ze, _s = new A, co = new A, Tc = class extends zs {
    constructor(){
        super(new yt(90, 1, .5, 500)), this.isPointLightShadow = !0, this._frameExtents = new Z(4, 2), this._viewportCount = 6, this._viewports = [
            new je(2, 1, 1, 1),
            new je(0, 1, 1, 1),
            new je(3, 1, 1, 1),
            new je(1, 1, 1, 1),
            new je(3, 0, 1, 1),
            new je(1, 0, 1, 1)
        ], this._cubeDirections = [
            new A(1, 0, 0),
            new A(-1, 0, 0),
            new A(0, 0, 1),
            new A(0, 0, -1),
            new A(0, 1, 0),
            new A(0, -1, 0)
        ], this._cubeUps = [
            new A(0, 1, 0),
            new A(0, 1, 0),
            new A(0, 1, 0),
            new A(0, 1, 0),
            new A(0, 0, 1),
            new A(0, 0, -1)
        ];
    }
    updateMatrices(e, t = 0) {
        let n = this.camera, i = this.matrix, r = e.distance || n.far;
        r !== n.far && (n.far = r, n.updateProjectionMatrix()), _s.setFromMatrixPosition(e.matrixWorld), n.position.copy(_s), co.copy(n.position), co.add(this._cubeDirections[t]), n.up.copy(this._cubeUps[t]), n.lookAt(co), n.updateMatrixWorld(), i.makeTranslation(-_s.x, -_s.y, -_s.z), fu.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(fu);
    }
}, wc = class extends En {
    constructor(e, t, n = 0, i = 2){
        super(e, t), this.isPointLight = !0, this.type = "PointLight", this.distance = n, this.decay = i, this.shadow = new Tc;
    }
    get power() {
        return this.intensity * 4 * Math.PI;
    }
    set power(e) {
        this.intensity = e / (4 * Math.PI);
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(e, t) {
        return super.copy(e, t), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
    }
}, Ac = class extends zs {
    constructor(){
        super(new Ls(-5, 5, 5, -5, .5, 500)), this.isDirectionalLightShadow = !0;
    }
}, Rc = class extends En {
    constructor(e, t){
        super(e, t), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(Je.DEFAULT_UP), this.updateMatrix(), this.target = new Je, this.shadow = new Ac;
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(e) {
        return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
    }
}, Cc = class extends En {
    constructor(e, t){
        super(e, t), this.isAmbientLight = !0, this.type = "AmbientLight";
    }
}, Pc = class extends En {
    constructor(e, t, n = 10, i = 10){
        super(e, t), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = n, this.height = i;
    }
    get power() {
        return this.intensity * this.width * this.height * Math.PI;
    }
    set power(e) {
        this.intensity = e / (this.width * this.height * Math.PI);
    }
    copy(e) {
        return super.copy(e), this.width = e.width, this.height = e.height, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.width = this.width, t.object.height = this.height, t;
    }
}, Lc = class {
    constructor(){
        this.isSphericalHarmonics3 = !0, this.coefficients = [];
        for(let e = 0; e < 9; e++)this.coefficients.push(new A);
    }
    set(e) {
        for(let t = 0; t < 9; t++)this.coefficients[t].copy(e[t]);
        return this;
    }
    zero() {
        for(let e = 0; e < 9; e++)this.coefficients[e].set(0, 0, 0);
        return this;
    }
    getAt(e, t) {
        let n = e.x, i = e.y, r = e.z, a = this.coefficients;
        return t.copy(a[0]).multiplyScalar(.282095), t.addScaledVector(a[1], .488603 * i), t.addScaledVector(a[2], .488603 * r), t.addScaledVector(a[3], .488603 * n), t.addScaledVector(a[4], 1.092548 * (n * i)), t.addScaledVector(a[5], 1.092548 * (i * r)), t.addScaledVector(a[6], .315392 * (3 * r * r - 1)), t.addScaledVector(a[7], 1.092548 * (n * r)), t.addScaledVector(a[8], .546274 * (n * n - i * i)), t;
    }
    getIrradianceAt(e, t) {
        let n = e.x, i = e.y, r = e.z, a = this.coefficients;
        return t.copy(a[0]).multiplyScalar(.886227), t.addScaledVector(a[1], 2 * .511664 * i), t.addScaledVector(a[2], 2 * .511664 * r), t.addScaledVector(a[3], 2 * .511664 * n), t.addScaledVector(a[4], 2 * .429043 * n * i), t.addScaledVector(a[5], 2 * .429043 * i * r), t.addScaledVector(a[6], .743125 * r * r - .247708), t.addScaledVector(a[7], 2 * .429043 * n * r), t.addScaledVector(a[8], .429043 * (n * n - i * i)), t;
    }
    add(e) {
        for(let t = 0; t < 9; t++)this.coefficients[t].add(e.coefficients[t]);
        return this;
    }
    addScaledSH(e, t) {
        for(let n = 0; n < 9; n++)this.coefficients[n].addScaledVector(e.coefficients[n], t);
        return this;
    }
    scale(e) {
        for(let t = 0; t < 9; t++)this.coefficients[t].multiplyScalar(e);
        return this;
    }
    lerp(e, t) {
        for(let n = 0; n < 9; n++)this.coefficients[n].lerp(e.coefficients[n], t);
        return this;
    }
    equals(e) {
        for(let t = 0; t < 9; t++)if (!this.coefficients[t].equals(e.coefficients[t])) return !1;
        return !0;
    }
    copy(e) {
        return this.set(e.coefficients);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    fromArray(e, t = 0) {
        let n = this.coefficients;
        for(let i = 0; i < 9; i++)n[i].fromArray(e, t + i * 3);
        return this;
    }
    toArray(e = [], t = 0) {
        let n = this.coefficients;
        for(let i = 0; i < 9; i++)n[i].toArray(e, t + i * 3);
        return e;
    }
    static getBasisAt(e, t) {
        let n = e.x, i = e.y, r = e.z;
        t[0] = .282095, t[1] = .488603 * i, t[2] = .488603 * r, t[3] = .488603 * n, t[4] = 1.092548 * n * i, t[5] = 1.092548 * i * r, t[6] = .315392 * (3 * r * r - 1), t[7] = 1.092548 * n * r, t[8] = .546274 * (n * n - i * i);
    }
}, Ic = class extends En {
    constructor(e = new Lc, t = 1){
        super(void 0, t), this.isLightProbe = !0, this.sh = e;
    }
    copy(e) {
        return super.copy(e), this.sh.copy(e.sh), this;
    }
    fromJSON(e) {
        return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.sh = this.sh.toArray(), t;
    }
}, Uc = class s1 extends Dt {
    constructor(e){
        super(e), this.textures = {};
    }
    load(e, t, n, i) {
        let r = this, a = new rn(r.manager);
        a.setPath(r.path), a.setRequestHeader(r.requestHeader), a.setWithCredentials(r.withCredentials), a.load(e, function(o) {
            try {
                t(r.parse(JSON.parse(o)));
            } catch (c) {
                i ? i(c) : console.error(c), r.manager.itemError(e);
            }
        }, n, i);
    }
    parse(e) {
        let t = this.textures;
        function n(r) {
            return t[r] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", r), t[r];
        }
        let i = s1.createMaterialFromType(e.type);
        if (e.uuid !== void 0 && (i.uuid = e.uuid), e.name !== void 0 && (i.name = e.name), e.color !== void 0 && i.color !== void 0 && i.color.setHex(e.color), e.roughness !== void 0 && (i.roughness = e.roughness), e.metalness !== void 0 && (i.metalness = e.metalness), e.sheen !== void 0 && (i.sheen = e.sheen), e.sheenColor !== void 0 && (i.sheenColor = new pe().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (i.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && i.emissive !== void 0 && i.emissive.setHex(e.emissive), e.specular !== void 0 && i.specular !== void 0 && i.specular.setHex(e.specular), e.specularIntensity !== void 0 && (i.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && i.specularColor !== void 0 && i.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (i.shininess = e.shininess), e.clearcoat !== void 0 && (i.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = e.clearcoatRoughness), e.iridescence !== void 0 && (i.iridescence = e.iridescence), e.iridescenceIOR !== void 0 && (i.iridescenceIOR = e.iridescenceIOR), e.iridescenceThicknessRange !== void 0 && (i.iridescenceThicknessRange = e.iridescenceThicknessRange), e.transmission !== void 0 && (i.transmission = e.transmission), e.thickness !== void 0 && (i.thickness = e.thickness), e.attenuationDistance !== void 0 && (i.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && i.attenuationColor !== void 0 && i.attenuationColor.setHex(e.attenuationColor), e.anisotropy !== void 0 && (i.anisotropy = e.anisotropy), e.anisotropyRotation !== void 0 && (i.anisotropyRotation = e.anisotropyRotation), e.fog !== void 0 && (i.fog = e.fog), e.flatShading !== void 0 && (i.flatShading = e.flatShading), e.blending !== void 0 && (i.blending = e.blending), e.combine !== void 0 && (i.combine = e.combine), e.side !== void 0 && (i.side = e.side), e.shadowSide !== void 0 && (i.shadowSide = e.shadowSide), e.opacity !== void 0 && (i.opacity = e.opacity), e.transparent !== void 0 && (i.transparent = e.transparent), e.alphaTest !== void 0 && (i.alphaTest = e.alphaTest), e.alphaHash !== void 0 && (i.alphaHash = e.alphaHash), e.depthTest !== void 0 && (i.depthTest = e.depthTest), e.depthWrite !== void 0 && (i.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (i.colorWrite = e.colorWrite), e.stencilWrite !== void 0 && (i.stencilWrite = e.stencilWrite), e.stencilWriteMask !== void 0 && (i.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (i.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (i.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (i.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (i.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (i.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (i.stencilZPass = e.stencilZPass), e.wireframe !== void 0 && (i.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (i.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (i.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (i.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (i.rotation = e.rotation), e.linewidth !== void 0 && (i.linewidth = e.linewidth), e.dashSize !== void 0 && (i.dashSize = e.dashSize), e.gapSize !== void 0 && (i.gapSize = e.gapSize), e.scale !== void 0 && (i.scale = e.scale), e.polygonOffset !== void 0 && (i.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (i.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (i.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (i.dithering = e.dithering), e.alphaToCoverage !== void 0 && (i.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (i.premultipliedAlpha = e.premultipliedAlpha), e.forceSinglePass !== void 0 && (i.forceSinglePass = e.forceSinglePass), e.visible !== void 0 && (i.visible = e.visible), e.toneMapped !== void 0 && (i.toneMapped = e.toneMapped), e.userData !== void 0 && (i.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? i.vertexColors = e.vertexColors > 0 : i.vertexColors = e.vertexColors), e.uniforms !== void 0) for(let r in e.uniforms){
            let a = e.uniforms[r];
            switch(i.uniforms[r] = {}, a.type){
                case "t":
                    i.uniforms[r].value = n(a.value);
                    break;
                case "c":
                    i.uniforms[r].value = new pe().setHex(a.value);
                    break;
                case "v2":
                    i.uniforms[r].value = new Z().fromArray(a.value);
                    break;
                case "v3":
                    i.uniforms[r].value = new A().fromArray(a.value);
                    break;
                case "v4":
                    i.uniforms[r].value = new je().fromArray(a.value);
                    break;
                case "m3":
                    i.uniforms[r].value = new He().fromArray(a.value);
                    break;
                case "m4":
                    i.uniforms[r].value = new ze().fromArray(a.value);
                    break;
                default:
                    i.uniforms[r].value = a.value;
            }
        }
        if (e.defines !== void 0 && (i.defines = e.defines), e.vertexShader !== void 0 && (i.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (i.fragmentShader = e.fragmentShader), e.glslVersion !== void 0 && (i.glslVersion = e.glslVersion), e.extensions !== void 0) for(let r in e.extensions)i.extensions[r] = e.extensions[r];
        if (e.lights !== void 0 && (i.lights = e.lights), e.clipping !== void 0 && (i.clipping = e.clipping), e.size !== void 0 && (i.size = e.size), e.sizeAttenuation !== void 0 && (i.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (i.map = n(e.map)), e.matcap !== void 0 && (i.matcap = n(e.matcap)), e.alphaMap !== void 0 && (i.alphaMap = n(e.alphaMap)), e.bumpMap !== void 0 && (i.bumpMap = n(e.bumpMap)), e.bumpScale !== void 0 && (i.bumpScale = e.bumpScale), e.normalMap !== void 0 && (i.normalMap = n(e.normalMap)), e.normalMapType !== void 0 && (i.normalMapType = e.normalMapType), e.normalScale !== void 0) {
            let r = e.normalScale;
            Array.isArray(r) === !1 && (r = [
                r,
                r
            ]), i.normalScale = new Z().fromArray(r);
        }
        return e.displacementMap !== void 0 && (i.displacementMap = n(e.displacementMap)), e.displacementScale !== void 0 && (i.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (i.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (i.roughnessMap = n(e.roughnessMap)), e.metalnessMap !== void 0 && (i.metalnessMap = n(e.metalnessMap)), e.emissiveMap !== void 0 && (i.emissiveMap = n(e.emissiveMap)), e.emissiveIntensity !== void 0 && (i.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (i.specularMap = n(e.specularMap)), e.specularIntensityMap !== void 0 && (i.specularIntensityMap = n(e.specularIntensityMap)), e.specularColorMap !== void 0 && (i.specularColorMap = n(e.specularColorMap)), e.envMap !== void 0 && (i.envMap = n(e.envMap)), e.envMapIntensity !== void 0 && (i.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (i.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (i.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (i.lightMap = n(e.lightMap)), e.lightMapIntensity !== void 0 && (i.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (i.aoMap = n(e.aoMap)), e.aoMapIntensity !== void 0 && (i.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (i.gradientMap = n(e.gradientMap)), e.clearcoatMap !== void 0 && (i.clearcoatMap = n(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (i.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (i.clearcoatNormalMap = n(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (i.clearcoatNormalScale = new Z().fromArray(e.clearcoatNormalScale)), e.iridescenceMap !== void 0 && (i.iridescenceMap = n(e.iridescenceMap)), e.iridescenceThicknessMap !== void 0 && (i.iridescenceThicknessMap = n(e.iridescenceThicknessMap)), e.transmissionMap !== void 0 && (i.transmissionMap = n(e.transmissionMap)), e.thicknessMap !== void 0 && (i.thicknessMap = n(e.thicknessMap)), e.anisotropyMap !== void 0 && (i.anisotropyMap = n(e.anisotropyMap)), e.sheenColorMap !== void 0 && (i.sheenColorMap = n(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (i.sheenRoughnessMap = n(e.sheenRoughnessMap)), i;
    }
    setTextures(e) {
        return this.textures = e, this;
    }
    static createMaterialFromType(e) {
        let t = {
            ShadowMaterial: cc,
            SpriteMaterial: ea,
            RawShaderMaterial: lc,
            ShaderMaterial: jt,
            PointsMaterial: na,
            MeshPhysicalMaterial: hc,
            MeshStandardMaterial: da,
            MeshPhongMaterial: uc,
            MeshToonMaterial: dc,
            MeshNormalMaterial: fc,
            MeshLambertMaterial: pc,
            MeshDepthMaterial: Qr,
            MeshDistanceMaterial: jr,
            MeshBasicMaterial: Sn,
            MeshMatcapMaterial: mc,
            LineDashedMaterial: gc,
            LineBasicMaterial: wt,
            Material: bt
        };
        return new t[e];
    }
}, ga = class {
    static decodeText(e) {
        if (typeof TextDecoder < "u") return new TextDecoder().decode(e);
        let t = "";
        for(let n = 0, i = e.length; n < i; n++)t += String.fromCharCode(e[n]);
        try {
            return decodeURIComponent(escape(t));
        } catch  {
            return t;
        }
    }
    static extractUrlBase(e) {
        let t = e.lastIndexOf("/");
        return t === -1 ? "./" : e.slice(0, t + 1);
    }
    static resolveURL(e, t) {
        return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
    }
}, Dc = class extends Ge {
    constructor(){
        super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
    }
    copy(e) {
        return super.copy(e), this.instanceCount = e.instanceCount, this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
    }
}, Nc = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = new rn(r.manager);
        a.setPath(r.path), a.setRequestHeader(r.requestHeader), a.setWithCredentials(r.withCredentials), a.load(e, function(o) {
            try {
                t(r.parse(JSON.parse(o)));
            } catch (c) {
                i ? i(c) : console.error(c), r.manager.itemError(e);
            }
        }, n, i);
    }
    parse(e) {
        let t = {}, n = {};
        function i(f, m) {
            if (t[m] !== void 0) return t[m];
            let g = f.interleavedBuffers[m], p = r(f, g.buffer), v = ki(g.type, p), x = new Is(v, g.stride);
            return x.uuid = g.uuid, t[m] = x, x;
        }
        function r(f, m) {
            if (n[m] !== void 0) return n[m];
            let g = f.arrayBuffers[m], p = new Uint32Array(g).buffer;
            return n[m] = p, p;
        }
        let a = e.isInstancedBufferGeometry ? new Dc : new Ge, o = e.data.index;
        if (o !== void 0) {
            let f = ki(o.type, o.array);
            a.setIndex(new et(f, 1));
        }
        let c = e.data.attributes;
        for(let f in c){
            let m = c[f], _;
            if (m.isInterleavedBufferAttribute) {
                let g = i(e.data, m.data);
                _ = new Qi(g, m.itemSize, m.offset, m.normalized);
            } else {
                let g = ki(m.type, m.array), p = m.isInstancedBufferAttribute ? ui : et;
                _ = new p(g, m.itemSize, m.normalized);
            }
            m.name !== void 0 && (_.name = m.name), m.usage !== void 0 && _.setUsage(m.usage), m.updateRange !== void 0 && (_.updateRange.offset = m.updateRange.offset, _.updateRange.count = m.updateRange.count), a.setAttribute(f, _);
        }
        let l = e.data.morphAttributes;
        if (l) for(let f in l){
            let m = l[f], _ = [];
            for(let g = 0, p = m.length; g < p; g++){
                let v = m[g], x;
                if (v.isInterleavedBufferAttribute) {
                    let y = i(e.data, v.data);
                    x = new Qi(y, v.itemSize, v.offset, v.normalized);
                } else {
                    let y = ki(v.type, v.array);
                    x = new et(y, v.itemSize, v.normalized);
                }
                v.name !== void 0 && (x.name = v.name), _.push(x);
            }
            a.morphAttributes[f] = _;
        }
        e.data.morphTargetsRelative && (a.morphTargetsRelative = !0);
        let u = e.data.groups || e.data.drawcalls || e.data.offsets;
        if (u !== void 0) for(let f = 0, m = u.length; f !== m; ++f){
            let _ = u[f];
            a.addGroup(_.start, _.count, _.materialIndex);
        }
        let d = e.data.boundingSphere;
        if (d !== void 0) {
            let f = new A;
            d.center !== void 0 && f.fromArray(d.center), a.boundingSphere = new Yt(f, d.radius);
        }
        return e.name && (a.name = e.name), e.userData && (a.userData = e.userData), a;
    }
}, pu = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = this.path === "" ? ga.extractUrlBase(e) : this.path;
        this.resourcePath = this.resourcePath || a;
        let o = new rn(this.manager);
        o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials), o.load(e, function(c) {
            let l = null;
            try {
                l = JSON.parse(c);
            } catch (u) {
                i !== void 0 && i(u), console.error("THREE:ObjectLoader: Can't parse " + e + ".", u.message);
                return;
            }
            let h = l.metadata;
            if (h === void 0 || h.type === void 0 || h.type.toLowerCase() === "geometry") {
                i !== void 0 && i(new Error("THREE.ObjectLoader: Can't load " + e)), console.error("THREE.ObjectLoader: Can't load " + e);
                return;
            }
            r.parse(l, t);
        }, n, i);
    }
    async loadAsync(e, t) {
        let n = this, i = this.path === "" ? ga.extractUrlBase(e) : this.path;
        this.resourcePath = this.resourcePath || i;
        let r = new rn(this.manager);
        r.setPath(this.path), r.setRequestHeader(this.requestHeader), r.setWithCredentials(this.withCredentials);
        let a = await r.loadAsync(e, t), o = JSON.parse(a), c = o.metadata;
        if (c === void 0 || c.type === void 0 || c.type.toLowerCase() === "geometry") throw new Error("THREE.ObjectLoader: Can't load " + e);
        return await n.parseAsync(o);
    }
    parse(e, t) {
        let n = this.parseAnimations(e.animations), i = this.parseShapes(e.shapes), r = this.parseGeometries(e.geometries, i), a = this.parseImages(e.images, function() {
            t !== void 0 && t(l);
        }), o = this.parseTextures(e.textures, a), c = this.parseMaterials(e.materials, o), l = this.parseObject(e.object, r, c, o, n), h = this.parseSkeletons(e.skeletons, l);
        if (this.bindSkeletons(l, h), t !== void 0) {
            let u = !1;
            for(let d in a)if (a[d].data instanceof HTMLImageElement) {
                u = !0;
                break;
            }
            u === !1 && t(l);
        }
        return l;
    }
    async parseAsync(e) {
        let t = this.parseAnimations(e.animations), n = this.parseShapes(e.shapes), i = this.parseGeometries(e.geometries, n), r = await this.parseImagesAsync(e.images), a = this.parseTextures(e.textures, r), o = this.parseMaterials(e.materials, a), c = this.parseObject(e.object, i, o, a, t), l = this.parseSkeletons(e.skeletons, c);
        return this.bindSkeletons(c, l), c;
    }
    parseShapes(e) {
        let t = {};
        if (e !== void 0) for(let n = 0, i = e.length; n < i; n++){
            let r = new Fn().fromJSON(e[n]);
            t[r.uuid] = r;
        }
        return t;
    }
    parseSkeletons(e, t) {
        let n = {}, i = {};
        if (t.traverse(function(r) {
            r.isBone && (i[r.uuid] = r);
        }), e !== void 0) for(let r = 0, a = e.length; r < a; r++){
            let o = new Oo().fromJSON(e[r], i);
            n[o.uuid] = o;
        }
        return n;
    }
    parseGeometries(e, t) {
        let n = {};
        if (e !== void 0) {
            let i = new Nc;
            for(let r = 0, a = e.length; r < a; r++){
                let o, c = e[r];
                switch(c.type){
                    case "BufferGeometry":
                    case "InstancedBufferGeometry":
                        o = i.parse(c);
                        break;
                    default:
                        c.type in ru ? o = ru[c.type].fromJSON(c, t) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${c.type}"`);
                }
                o.uuid = c.uuid, c.name !== void 0 && (o.name = c.name), c.userData !== void 0 && (o.userData = c.userData), n[c.uuid] = o;
            }
        }
        return n;
    }
    parseMaterials(e, t) {
        let n = {}, i = {};
        if (e !== void 0) {
            let r = new Uc;
            r.setTextures(t);
            for(let a = 0, o = e.length; a < o; a++){
                let c = e[a];
                n[c.uuid] === void 0 && (n[c.uuid] = r.parse(c)), i[c.uuid] = n[c.uuid];
            }
        }
        return i;
    }
    parseAnimations(e) {
        let t = {};
        if (e !== void 0) for(let n = 0; n < e.length; n++){
            let i = e[n], r = is.parse(i);
            t[r.uuid] = r;
        }
        return t;
    }
    parseImages(e, t) {
        let n = this, i = {}, r;
        function a(c) {
            return n.manager.itemStart(c), r.load(c, function() {
                n.manager.itemEnd(c);
            }, void 0, function() {
                n.manager.itemError(c), n.manager.itemEnd(c);
            });
        }
        function o(c) {
            if (typeof c == "string") {
                let l = c, h = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(l) ? l : n.resourcePath + l;
                return a(h);
            } else return c.data ? {
                data: ki(c.type, c.data),
                width: c.width,
                height: c.height
            } : null;
        }
        if (e !== void 0 && e.length > 0) {
            let c = new ma(t);
            r = new rs(c), r.setCrossOrigin(this.crossOrigin);
            for(let l = 0, h = e.length; l < h; l++){
                let u = e[l], d = u.url;
                if (Array.isArray(d)) {
                    let f = [];
                    for(let m = 0, _ = d.length; m < _; m++){
                        let g = d[m], p = o(g);
                        p !== null && (p instanceof HTMLImageElement ? f.push(p) : f.push(new oi(p.data, p.width, p.height)));
                    }
                    i[u.uuid] = new In(f);
                } else {
                    let f = o(u.url);
                    i[u.uuid] = new In(f);
                }
            }
        }
        return i;
    }
    async parseImagesAsync(e) {
        let t = this, n = {}, i;
        async function r(a) {
            if (typeof a == "string") {
                let o = a, c = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(o) ? o : t.resourcePath + o;
                return await i.loadAsync(c);
            } else return a.data ? {
                data: ki(a.type, a.data),
                width: a.width,
                height: a.height
            } : null;
        }
        if (e !== void 0 && e.length > 0) {
            i = new rs(this.manager), i.setCrossOrigin(this.crossOrigin);
            for(let a = 0, o = e.length; a < o; a++){
                let c = e[a], l = c.url;
                if (Array.isArray(l)) {
                    let h = [];
                    for(let u = 0, d = l.length; u < d; u++){
                        let f = l[u], m = await r(f);
                        m !== null && (m instanceof HTMLImageElement ? h.push(m) : h.push(new oi(m.data, m.width, m.height)));
                    }
                    n[c.uuid] = new In(h);
                } else {
                    let h = await r(c.url);
                    n[c.uuid] = new In(h);
                }
            }
        }
        return n;
    }
    parseTextures(e, t) {
        function n(r, a) {
            return typeof r == "number" ? r : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", r), a[r]);
        }
        let i = {};
        if (e !== void 0) for(let r = 0, a = e.length; r < a; r++){
            let o = e[r];
            o.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', o.uuid), t[o.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", o.image);
            let c = t[o.image], l = c.data, h;
            Array.isArray(l) ? (h = new Ki, l.length === 6 && (h.needsUpdate = !0)) : (l && l.data ? h = new oi : h = new St, l && (h.needsUpdate = !0)), h.source = c, h.uuid = o.uuid, o.name !== void 0 && (h.name = o.name), o.mapping !== void 0 && (h.mapping = n(o.mapping, Tx)), o.channel !== void 0 && (h.channel = o.channel), o.offset !== void 0 && h.offset.fromArray(o.offset), o.repeat !== void 0 && h.repeat.fromArray(o.repeat), o.center !== void 0 && h.center.fromArray(o.center), o.rotation !== void 0 && (h.rotation = o.rotation), o.wrap !== void 0 && (h.wrapS = n(o.wrap[0], mu), h.wrapT = n(o.wrap[1], mu)), o.format !== void 0 && (h.format = o.format), o.internalFormat !== void 0 && (h.internalFormat = o.internalFormat), o.type !== void 0 && (h.type = o.type), o.colorSpace !== void 0 && (h.colorSpace = o.colorSpace), o.encoding !== void 0 && (h.encoding = o.encoding), o.minFilter !== void 0 && (h.minFilter = n(o.minFilter, gu)), o.magFilter !== void 0 && (h.magFilter = n(o.magFilter, gu)), o.anisotropy !== void 0 && (h.anisotropy = o.anisotropy), o.flipY !== void 0 && (h.flipY = o.flipY), o.generateMipmaps !== void 0 && (h.generateMipmaps = o.generateMipmaps), o.premultiplyAlpha !== void 0 && (h.premultiplyAlpha = o.premultiplyAlpha), o.unpackAlignment !== void 0 && (h.unpackAlignment = o.unpackAlignment), o.compareFunction !== void 0 && (h.compareFunction = o.compareFunction), o.userData !== void 0 && (h.userData = o.userData), i[o.uuid] = h;
        }
        return i;
    }
    parseObject(e, t, n, i, r) {
        let a;
        function o(d) {
            return t[d] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", d), t[d];
        }
        function c(d) {
            if (d !== void 0) {
                if (Array.isArray(d)) {
                    let f = [];
                    for(let m = 0, _ = d.length; m < _; m++){
                        let g = d[m];
                        n[g] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", g), f.push(n[g]);
                    }
                    return f;
                }
                return n[d] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", d), n[d];
            }
        }
        function l(d) {
            return i[d] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", d), i[d];
        }
        let h, u;
        switch(e.type){
            case "Scene":
                a = new Io, e.background !== void 0 && (Number.isInteger(e.background) ? a.background = new pe(e.background) : a.background = l(e.background)), e.environment !== void 0 && (a.environment = l(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? a.fog = new Lo(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (a.fog = new Po(e.fog.color, e.fog.density)), e.fog.name !== "" && (a.fog.name = e.fog.name)), e.backgroundBlurriness !== void 0 && (a.backgroundBlurriness = e.backgroundBlurriness), e.backgroundIntensity !== void 0 && (a.backgroundIntensity = e.backgroundIntensity);
                break;
            case "PerspectiveCamera":
                a = new yt(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (a.focus = e.focus), e.zoom !== void 0 && (a.zoom = e.zoom), e.filmGauge !== void 0 && (a.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (a.filmOffset = e.filmOffset), e.view !== void 0 && (a.view = Object.assign({}, e.view));
                break;
            case "OrthographicCamera":
                a = new Ls(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (a.zoom = e.zoom), e.view !== void 0 && (a.view = Object.assign({}, e.view));
                break;
            case "AmbientLight":
                a = new Cc(e.color, e.intensity);
                break;
            case "DirectionalLight":
                a = new Rc(e.color, e.intensity);
                break;
            case "PointLight":
                a = new wc(e.color, e.intensity, e.distance, e.decay);
                break;
            case "RectAreaLight":
                a = new Pc(e.color, e.intensity, e.width, e.height);
                break;
            case "SpotLight":
                a = new Ec(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
                break;
            case "HemisphereLight":
                a = new Sc(e.color, e.groundColor, e.intensity);
                break;
            case "LightProbe":
                a = new Ic().fromJSON(e);
                break;
            case "SkinnedMesh":
                h = o(e.geometry), u = c(e.material), a = new No(h, u), e.bindMode !== void 0 && (a.bindMode = e.bindMode), e.bindMatrix !== void 0 && a.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (a.skeleton = e.skeleton);
                break;
            case "Mesh":
                h = o(e.geometry), u = c(e.material), a = new Mt(h, u);
                break;
            case "InstancedMesh":
                h = o(e.geometry), u = c(e.material);
                let d = e.count, f = e.instanceMatrix, m = e.instanceColor;
                a = new Fo(h, u, d), a.instanceMatrix = new ui(new Float32Array(f.array), 16), m !== void 0 && (a.instanceColor = new ui(new Float32Array(m.array), m.itemSize));
                break;
            case "LOD":
                a = new Do;
                break;
            case "Line":
                a = new bn(o(e.geometry), c(e.material));
                break;
            case "LineLoop":
                a = new Bo(o(e.geometry), c(e.material));
                break;
            case "LineSegments":
                a = new en(o(e.geometry), c(e.material));
                break;
            case "PointCloud":
            case "Points":
                a = new Vo(o(e.geometry), c(e.material));
                break;
            case "Sprite":
                a = new Uo(c(e.material));
                break;
            case "Group":
                a = new ti;
                break;
            case "Bone":
                a = new ta;
                break;
            default:
                a = new Je;
        }
        if (a.uuid = e.uuid, e.name !== void 0 && (a.name = e.name), e.matrix !== void 0 ? (a.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (a.matrixAutoUpdate = e.matrixAutoUpdate), a.matrixAutoUpdate && a.matrix.decompose(a.position, a.quaternion, a.scale)) : (e.position !== void 0 && a.position.fromArray(e.position), e.rotation !== void 0 && a.rotation.fromArray(e.rotation), e.quaternion !== void 0 && a.quaternion.fromArray(e.quaternion), e.scale !== void 0 && a.scale.fromArray(e.scale)), e.up !== void 0 && a.up.fromArray(e.up), e.castShadow !== void 0 && (a.castShadow = e.castShadow), e.receiveShadow !== void 0 && (a.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.bias !== void 0 && (a.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (a.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (a.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && a.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (a.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (a.visible = e.visible), e.frustumCulled !== void 0 && (a.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (a.renderOrder = e.renderOrder), e.userData !== void 0 && (a.userData = e.userData), e.layers !== void 0 && (a.layers.mask = e.layers), e.children !== void 0) {
            let d = e.children;
            for(let f = 0; f < d.length; f++)a.add(this.parseObject(d[f], t, n, i, r));
        }
        if (e.animations !== void 0) {
            let d = e.animations;
            for(let f = 0; f < d.length; f++){
                let m = d[f];
                a.animations.push(r[m]);
            }
        }
        if (e.type === "LOD") {
            e.autoUpdate !== void 0 && (a.autoUpdate = e.autoUpdate);
            let d = e.levels;
            for(let f = 0; f < d.length; f++){
                let m = d[f], _ = a.getObjectByProperty("uuid", m.object);
                _ !== void 0 && a.addLevel(_, m.distance, m.hysteresis);
            }
        }
        return a;
    }
    bindSkeletons(e, t) {
        Object.keys(t).length !== 0 && e.traverse(function(n) {
            if (n.isSkinnedMesh === !0 && n.skeleton !== void 0) {
                let i = t[n.skeleton];
                i === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton) : n.bind(i, n.bindMatrix);
            }
        });
    }
}, Tx = {
    UVMapping: Gc,
    CubeReflectionMapping: zn,
    CubeRefractionMapping: ci,
    EquirectangularReflectionMapping: Ir,
    EquirectangularRefractionMapping: Ur,
    CubeUVReflectionMapping: Vs
}, mu = {
    RepeatWrapping: Dr,
    ClampToEdgeWrapping: It,
    MirroredRepeatWrapping: Nr
}, gu = {
    NearestFilter: pt,
    NearestMipmapNearestFilter: fo,
    NearestMipmapLinearFilter: Lr,
    LinearFilter: mt,
    LinearMipmapNearestFilter: ud,
    LinearMipmapLinearFilter: li
}, _u = class extends Dt {
    constructor(e){
        super(e), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = {
            premultiplyAlpha: "none"
        };
    }
    setOptions(e) {
        return this.options = e, this;
    }
    load(e, t, n, i) {
        e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
        let r = this, a = ss.get(e);
        if (a !== void 0) return r.manager.itemStart(e), setTimeout(function() {
            t && t(a), r.manager.itemEnd(e);
        }, 0), a;
        let o = {};
        o.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", o.headers = this.requestHeader, fetch(e, o).then(function(c) {
            return c.blob();
        }).then(function(c) {
            return createImageBitmap(c, Object.assign(r.options, {
                colorSpaceConversion: "none"
            }));
        }).then(function(c) {
            ss.add(e, c), t && t(c), r.manager.itemEnd(e);
        }).catch(function(c) {
            i && i(c), r.manager.itemError(e), r.manager.itemEnd(e);
        }), r.manager.itemStart(e);
    }
}, Er, _a = class {
    static getContext() {
        return Er === void 0 && (Er = new (window.AudioContext || window.webkitAudioContext)), Er;
    }
    static setContext(e) {
        Er = e;
    }
}, xu = class extends Dt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, a = new rn(this.manager);
        a.setResponseType("arraybuffer"), a.setPath(this.path), a.setRequestHeader(this.requestHeader), a.setWithCredentials(this.withCredentials), a.load(e, function(c) {
            try {
                let l = c.slice(0);
                _a.getContext().decodeAudioData(l, function(u) {
                    t(u);
                }, o);
            } catch (l) {
                o(l);
            }
        }, n, i);
        function o(c) {
            i ? i(c) : console.error(c), r.manager.itemError(e);
        }
    }
}, vu = new ze, yu = new ze, Zn = new ze, Mu = class {
    constructor(){
        this.type = "StereoCamera", this.aspect = 1, this.eyeSep = .064, this.cameraL = new yt, this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new yt, this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
            focus: null,
            fov: null,
            aspect: null,
            near: null,
            far: null,
            zoom: null,
            eyeSep: null
        };
    }
    update(e) {
        let t = this._cache;
        if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
            t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep, Zn.copy(e.projectionMatrix);
            let i = t.eyeSep / 2, r = i * t.near / t.focus, a = t.near * Math.tan(ai * t.fov * .5) / t.zoom, o, c;
            yu.elements[12] = -i, vu.elements[12] = i, o = -a * t.aspect + r, c = a * t.aspect + r, Zn.elements[0] = 2 * t.near / (c - o), Zn.elements[8] = (c + o) / (c - o), this.cameraL.projectionMatrix.copy(Zn), o = -a * t.aspect - r, c = a * t.aspect - r, Zn.elements[0] = 2 * t.near / (c - o), Zn.elements[8] = (c + o) / (c - o), this.cameraR.projectionMatrix.copy(Zn);
        }
        this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(yu), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(vu);
    }
}, Oc = class {
    constructor(e = !0){
        this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
    }
    start() {
        this.startTime = Su(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
    }
    stop() {
        this.getElapsedTime(), this.running = !1, this.autoStart = !1;
    }
    getElapsedTime() {
        return this.getDelta(), this.elapsedTime;
    }
    getDelta() {
        let e = 0;
        if (this.autoStart && !this.running) return this.start(), 0;
        if (this.running) {
            let t = Su();
            e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e;
        }
        return e;
    }
};
function Su() {
    return (typeof performance > "u" ? Date : performance).now();
}
var Jn = new A, bu = new Ut, wx = new A, $n = new A, Eu = class extends Je {
    constructor(){
        super(), this.type = "AudioListener", this.context = _a.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new Oc;
    }
    getInput() {
        return this.gain;
    }
    removeFilter() {
        return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
    }
    getFilter() {
        return this.filter;
    }
    setFilter(e) {
        return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
    }
    getMasterVolume() {
        return this.gain.gain.value;
    }
    setMasterVolume(e) {
        return this.gain.gain.setTargetAtTime(e, this.context.currentTime, .01), this;
    }
    updateMatrixWorld(e) {
        super.updateMatrixWorld(e);
        let t = this.context.listener, n = this.up;
        if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Jn, bu, wx), $n.set(0, 0, -1).applyQuaternion(bu), t.positionX) {
            let i = this.context.currentTime + this.timeDelta;
            t.positionX.linearRampToValueAtTime(Jn.x, i), t.positionY.linearRampToValueAtTime(Jn.y, i), t.positionZ.linearRampToValueAtTime(Jn.z, i), t.forwardX.linearRampToValueAtTime($n.x, i), t.forwardY.linearRampToValueAtTime($n.y, i), t.forwardZ.linearRampToValueAtTime($n.z, i), t.upX.linearRampToValueAtTime(n.x, i), t.upY.linearRampToValueAtTime(n.y, i), t.upZ.linearRampToValueAtTime(n.z, i);
        } else t.setPosition(Jn.x, Jn.y, Jn.z), t.setOrientation($n.x, $n.y, $n.z, n.x, n.y, n.z);
    }
}, Fc = class extends Je {
    constructor(e){
        super(), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
    }
    getOutput() {
        return this.gain;
    }
    setNodeSource(e) {
        return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
    }
    setMediaElementSource(e) {
        return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
    }
    setMediaStreamSource(e) {
        return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
    }
    setBuffer(e) {
        return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
    }
    play(e = 0) {
        if (this.isPlaying === !0) {
            console.warn("THREE.Audio: Audio is already playing.");
            return;
        }
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        this._startedAt = this.context.currentTime + e;
        let t = this.context.createBufferSource();
        return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
    }
    pause() {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
    }
    stop() {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this._progress = 0, this.source !== null && (this.source.stop(), this.source.onended = null), this.isPlaying = !1, this;
    }
    connect() {
        if (this.filters.length > 0) {
            this.source.connect(this.filters[0]);
            for(let e = 1, t = this.filters.length; e < t; e++)this.filters[e - 1].connect(this.filters[e]);
            this.filters[this.filters.length - 1].connect(this.getOutput());
        } else this.source.connect(this.getOutput());
        return this._connected = !0, this;
    }
    disconnect() {
        if (this._connected !== !1) {
            if (this.filters.length > 0) {
                this.source.disconnect(this.filters[0]);
                for(let e = 1, t = this.filters.length; e < t; e++)this.filters[e - 1].disconnect(this.filters[e]);
                this.filters[this.filters.length - 1].disconnect(this.getOutput());
            } else this.source.disconnect(this.getOutput());
            return this._connected = !1, this;
        }
    }
    getFilters() {
        return this.filters;
    }
    setFilters(e) {
        return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
    }
    setDetune(e) {
        if (this.detune = e, this.source.detune !== void 0) return this.isPlaying === !0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this;
    }
    getDetune() {
        return this.detune;
    }
    getFilter() {
        return this.getFilters()[0];
    }
    setFilter(e) {
        return this.setFilters(e ? [
            e
        ] : []);
    }
    setPlaybackRate(e) {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this;
    }
    getPlaybackRate() {
        return this.playbackRate;
    }
    onEnded() {
        this.isPlaying = !1;
    }
    getLoop() {
        return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
    }
    setLoop(e) {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
    }
    setLoopStart(e) {
        return this.loopStart = e, this;
    }
    setLoopEnd(e) {
        return this.loopEnd = e, this;
    }
    getVolume() {
        return this.gain.gain.value;
    }
    setVolume(e) {
        return this.gain.gain.setTargetAtTime(e, this.context.currentTime, .01), this;
    }
}, Kn = new A, Tu = new Ut, Ax = new A, Qn = new A, wu = class extends Fc {
    constructor(e){
        super(e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
    }
    connect() {
        super.connect(), this.panner.connect(this.gain);
    }
    disconnect() {
        super.disconnect(), this.panner.disconnect(this.gain);
    }
    getOutput() {
        return this.panner;
    }
    getRefDistance() {
        return this.panner.refDistance;
    }
    setRefDistance(e) {
        return this.panner.refDistance = e, this;
    }
    getRolloffFactor() {
        return this.panner.rolloffFactor;
    }
    setRolloffFactor(e) {
        return this.panner.rolloffFactor = e, this;
    }
    getDistanceModel() {
        return this.panner.distanceModel;
    }
    setDistanceModel(e) {
        return this.panner.distanceModel = e, this;
    }
    getMaxDistance() {
        return this.panner.maxDistance;
    }
    setMaxDistance(e) {
        return this.panner.maxDistance = e, this;
    }
    setDirectionalCone(e, t, n) {
        return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = n, this;
    }
    updateMatrixWorld(e) {
        if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1) return;
        this.matrixWorld.decompose(Kn, Tu, Ax), Qn.set(0, 0, 1).applyQuaternion(Tu);
        let t = this.panner;
        if (t.positionX) {
            let n = this.context.currentTime + this.listener.timeDelta;
            t.positionX.linearRampToValueAtTime(Kn.x, n), t.positionY.linearRampToValueAtTime(Kn.y, n), t.positionZ.linearRampToValueAtTime(Kn.z, n), t.orientationX.linearRampToValueAtTime(Qn.x, n), t.orientationY.linearRampToValueAtTime(Qn.y, n), t.orientationZ.linearRampToValueAtTime(Qn.z, n);
        } else t.setPosition(Kn.x, Kn.y, Kn.z), t.setOrientation(Qn.x, Qn.y, Qn.z);
    }
}, Au = class {
    constructor(e, t = 2048){
        this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
    }
    getFrequencyData() {
        return this.analyser.getByteFrequencyData(this.data), this.data;
    }
    getAverageFrequency() {
        let e = 0, t = this.getFrequencyData();
        for(let n = 0; n < t.length; n++)e += t[n];
        return e / t.length;
    }
}, Bc = class {
    constructor(e, t, n){
        this.binding = e, this.valueSize = n;
        let i, r, a;
        switch(t){
            case "quaternion":
                i = this._slerp, r = this._slerpAdditive, a = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(n * 6), this._workIndex = 5;
                break;
            case "string":
            case "bool":
                i = this._select, r = this._select, a = this._setAdditiveIdentityOther, this.buffer = new Array(n * 5);
                break;
            default:
                i = this._lerp, r = this._lerpAdditive, a = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(n * 5);
        }
        this._mixBufferRegion = i, this._mixBufferRegionAdditive = r, this._setIdentity = a, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
    }
    accumulate(e, t) {
        let n = this.buffer, i = this.valueSize, r = e * i + i, a = this.cumulativeWeight;
        if (a === 0) {
            for(let o = 0; o !== i; ++o)n[r + o] = n[o];
            a = t;
        } else {
            a += t;
            let o = t / a;
            this._mixBufferRegion(n, r, 0, o, i);
        }
        this.cumulativeWeight = a;
    }
    accumulateAdditive(e) {
        let t = this.buffer, n = this.valueSize, i = n * this._addIndex;
        this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, i, 0, e, n), this.cumulativeWeightAdditive += e;
    }
    apply(e) {
        let t = this.valueSize, n = this.buffer, i = e * t + t, r = this.cumulativeWeight, a = this.cumulativeWeightAdditive, o = this.binding;
        if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, r < 1) {
            let c = t * this._origIndex;
            this._mixBufferRegion(n, i, c, 1 - r, t);
        }
        a > 0 && this._mixBufferRegionAdditive(n, i, this._addIndex * t, 1, t);
        for(let c = t, l = t + t; c !== l; ++c)if (n[c] !== n[c + t]) {
            o.setValue(n, i);
            break;
        }
    }
    saveOriginalState() {
        let e = this.binding, t = this.buffer, n = this.valueSize, i = n * this._origIndex;
        e.getValue(t, i);
        for(let r = n, a = i; r !== a; ++r)t[r] = t[i + r % n];
        this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
    }
    restoreOriginalState() {
        let e = this.valueSize * 3;
        this.binding.setValue(this.buffer, e);
    }
    _setAdditiveIdentityNumeric() {
        let e = this._addIndex * this.valueSize, t = e + this.valueSize;
        for(let n = e; n < t; n++)this.buffer[n] = 0;
    }
    _setAdditiveIdentityQuaternion() {
        this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
    }
    _setAdditiveIdentityOther() {
        let e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize;
        for(let n = 0; n < this.valueSize; n++)this.buffer[t + n] = this.buffer[e + n];
    }
    _select(e, t, n, i, r) {
        if (i >= .5) for(let a = 0; a !== r; ++a)e[t + a] = e[n + a];
    }
    _slerp(e, t, n, i) {
        Ut.slerpFlat(e, t, e, t, e, n, i);
    }
    _slerpAdditive(e, t, n, i, r) {
        let a = this._workIndex * r;
        Ut.multiplyQuaternionsFlat(e, a, e, t, e, n), Ut.slerpFlat(e, t, e, t, e, a, i);
    }
    _lerp(e, t, n, i, r) {
        let a = 1 - i;
        for(let o = 0; o !== r; ++o){
            let c = t + o;
            e[c] = e[c] * a + e[n + o] * i;
        }
    }
    _lerpAdditive(e, t, n, i, r) {
        for(let a = 0; a !== r; ++a){
            let o = t + a;
            e[o] = e[o] + e[n + a] * i;
        }
    }
}, Kc = "\\[\\]\\.:\\/", Rx = new RegExp("[" + Kc + "]", "g"), Qc = "[^" + Kc + "]", Cx = "[^" + Kc.replace("\\.", "") + "]", Px = /((?:WC+[\/:])*)/.source.replace("WC", Qc), Lx = /(WCOD+)?/.source.replace("WCOD", Cx), Ix = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", Qc), Ux = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", Qc), Dx = new RegExp("^" + Px + Lx + Ix + Ux + "$"), Nx = [
    "material",
    "materials",
    "bones",
    "map"
], zc = class {
    constructor(e, t, n){
        let i = n || Ke.parseTrackName(t);
        this._targetGroup = e, this._bindings = e.subscribe_(t, i);
    }
    getValue(e, t) {
        this.bind();
        let n = this._targetGroup.nCachedObjects_, i = this._bindings[n];
        i !== void 0 && i.getValue(e, t);
    }
    setValue(e, t) {
        let n = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, r = n.length; i !== r; ++i)n[i].setValue(e, t);
    }
    bind() {
        let e = this._bindings;
        for(let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)e[t].bind();
    }
    unbind() {
        let e = this._bindings;
        for(let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)e[t].unbind();
    }
}, Ke = class s1 {
    constructor(e, t, n){
        this.path = t, this.parsedPath = n || s1.parseTrackName(t), this.node = s1.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
    }
    static create(e, t, n) {
        return e && e.isAnimationObjectGroup ? new s1.Composite(e, t, n) : new s1(e, t, n);
    }
    static sanitizeNodeName(e) {
        return e.replace(/\s/g, "_").replace(Rx, "");
    }
    static parseTrackName(e) {
        let t = Dx.exec(e);
        if (t === null) throw new Error("PropertyBinding: Cannot parse trackName: " + e);
        let n = {
            nodeName: t[2],
            objectName: t[3],
            objectIndex: t[4],
            propertyName: t[5],
            propertyIndex: t[6]
        }, i = n.nodeName && n.nodeName.lastIndexOf(".");
        if (i !== void 0 && i !== -1) {
            let r = n.nodeName.substring(i + 1);
            Nx.indexOf(r) !== -1 && (n.nodeName = n.nodeName.substring(0, i), n.objectName = r);
        }
        if (n.propertyName === null || n.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
        return n;
    }
    static findNode(e, t) {
        if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid) return e;
        if (e.skeleton) {
            let n = e.skeleton.getBoneByName(t);
            if (n !== void 0) return n;
        }
        if (e.children) {
            let n = function(r) {
                for(let a = 0; a < r.length; a++){
                    let o = r[a];
                    if (o.name === t || o.uuid === t) return o;
                    let c = n(o.children);
                    if (c) return c;
                }
                return null;
            }, i = n(e.children);
            if (i) return i;
        }
        return null;
    }
    _getValue_unavailable() {}
    _setValue_unavailable() {}
    _getValue_direct(e, t) {
        e[t] = this.targetObject[this.propertyName];
    }
    _getValue_array(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)e[t++] = n[i];
    }
    _getValue_arrayElement(e, t) {
        e[t] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(e, t) {
        this.resolvedProperty.toArray(e, t);
    }
    _setValue_direct(e, t) {
        this.targetObject[this.propertyName] = e[t];
    }
    _setValue_direct_setNeedsUpdate(e, t) {
        this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
        this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _setValue_array(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++];
    }
    _setValue_array_setNeedsUpdate(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++];
        this.targetObject.needsUpdate = !0;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++];
        this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _setValue_arrayElement(e, t) {
        this.resolvedProperty[this.propertyIndex] = e[t];
    }
    _setValue_arrayElement_setNeedsUpdate(e, t) {
        this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
        this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _setValue_fromArray(e, t) {
        this.resolvedProperty.fromArray(e, t);
    }
    _setValue_fromArray_setNeedsUpdate(e, t) {
        this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
        this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _getValue_unbound(e, t) {
        this.bind(), this.getValue(e, t);
    }
    _setValue_unbound(e, t) {
        this.bind(), this.setValue(e, t);
    }
    bind() {
        let e = this.node, t = this.parsedPath, n = t.objectName, i = t.propertyName, r = t.propertyIndex;
        if (e || (e = s1.findNode(this.rootNode, t.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
            console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
            return;
        }
        if (n) {
            let l = t.objectIndex;
            switch(n){
                case "materials":
                    if (!e.material) {
                        console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                        return;
                    }
                    if (!e.material.materials) {
                        console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                        return;
                    }
                    e = e.material.materials;
                    break;
                case "bones":
                    if (!e.skeleton) {
                        console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                        return;
                    }
                    e = e.skeleton.bones;
                    for(let h = 0; h < e.length; h++)if (e[h].name === l) {
                        l = h;
                        break;
                    }
                    break;
                case "map":
                    if ("map" in e) {
                        e = e.map;
                        break;
                    }
                    if (!e.material) {
                        console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                        return;
                    }
                    if (!e.material.map) {
                        console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
                        return;
                    }
                    e = e.material.map;
                    break;
                default:
                    if (e[n] === void 0) {
                        console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                        return;
                    }
                    e = e[n];
            }
            if (l !== void 0) {
                if (e[l] === void 0) {
                    console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
                    return;
                }
                e = e[l];
            }
        }
        let a = e[i];
        if (a === void 0) {
            let l = t.nodeName;
            console.error("THREE.PropertyBinding: Trying to update property for track: " + l + "." + i + " but it wasn't found.", e);
            return;
        }
        let o = this.Versioning.None;
        this.targetObject = e, e.needsUpdate !== void 0 ? o = this.Versioning.NeedsUpdate : e.matrixWorldNeedsUpdate !== void 0 && (o = this.Versioning.MatrixWorldNeedsUpdate);
        let c = this.BindingType.Direct;
        if (r !== void 0) {
            if (i === "morphTargetInfluences") {
                if (!e.geometry) {
                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                    return;
                }
                if (!e.geometry.morphAttributes) {
                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                    return;
                }
                e.morphTargetDictionary[r] !== void 0 && (r = e.morphTargetDictionary[r]);
            }
            c = this.BindingType.ArrayElement, this.resolvedProperty = a, this.propertyIndex = r;
        } else a.fromArray !== void 0 && a.toArray !== void 0 ? (c = this.BindingType.HasFromToArray, this.resolvedProperty = a) : Array.isArray(a) ? (c = this.BindingType.EntireArray, this.resolvedProperty = a) : this.propertyName = i;
        this.getValue = this.GetterByBindingType[c], this.setValue = this.SetterByBindingTypeAndVersioning[c][o];
    }
    unbind() {
        this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
    }
};
Ke.Composite = zc;
Ke.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
};
Ke.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
};
Ke.prototype.GetterByBindingType = [
    Ke.prototype._getValue_direct,
    Ke.prototype._getValue_array,
    Ke.prototype._getValue_arrayElement,
    Ke.prototype._getValue_toArray
];
Ke.prototype.SetterByBindingTypeAndVersioning = [
    [
        Ke.prototype._setValue_direct,
        Ke.prototype._setValue_direct_setNeedsUpdate,
        Ke.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
        Ke.prototype._setValue_array,
        Ke.prototype._setValue_array_setNeedsUpdate,
        Ke.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
        Ke.prototype._setValue_arrayElement,
        Ke.prototype._setValue_arrayElement_setNeedsUpdate,
        Ke.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
        Ke.prototype._setValue_fromArray,
        Ke.prototype._setValue_fromArray_setNeedsUpdate,
        Ke.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
];
var Ru = class {
    constructor(){
        this.isAnimationObjectGroup = !0, this.uuid = kt(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
        let e = {};
        this._indicesByUUID = e;
        for(let n = 0, i = arguments.length; n !== i; ++n)e[arguments[n].uuid] = n;
        this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
        let t = this;
        this.stats = {
            objects: {
                get total () {
                    return t._objects.length;
                },
                get inUse () {
                    return this.total - t.nCachedObjects_;
                }
            },
            get bindingsPerObject () {
                return t._bindings.length;
            }
        };
    }
    add() {
        let e = this._objects, t = this._indicesByUUID, n = this._paths, i = this._parsedPaths, r = this._bindings, a = r.length, o, c = e.length, l = this.nCachedObjects_;
        for(let h = 0, u = arguments.length; h !== u; ++h){
            let d = arguments[h], f = d.uuid, m = t[f];
            if (m === void 0) {
                m = c++, t[f] = m, e.push(d);
                for(let _ = 0, g = a; _ !== g; ++_)r[_].push(new Ke(d, n[_], i[_]));
            } else if (m < l) {
                o = e[m];
                let _ = --l, g = e[_];
                t[g.uuid] = m, e[m] = g, t[f] = _, e[_] = d;
                for(let p = 0, v = a; p !== v; ++p){
                    let x = r[p], y = x[_], b = x[m];
                    x[m] = y, b === void 0 && (b = new Ke(d, n[p], i[p])), x[_] = b;
                }
            } else e[m] !== o && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
        }
        this.nCachedObjects_ = l;
    }
    remove() {
        let e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length, r = this.nCachedObjects_;
        for(let a = 0, o = arguments.length; a !== o; ++a){
            let c = arguments[a], l = c.uuid, h = t[l];
            if (h !== void 0 && h >= r) {
                let u = r++, d = e[u];
                t[d.uuid] = h, e[h] = d, t[l] = u, e[u] = c;
                for(let f = 0, m = i; f !== m; ++f){
                    let _ = n[f], g = _[u], p = _[h];
                    _[h] = g, _[u] = p;
                }
            }
        }
        this.nCachedObjects_ = r;
    }
    uncache() {
        let e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length, r = this.nCachedObjects_, a = e.length;
        for(let o = 0, c = arguments.length; o !== c; ++o){
            let l = arguments[o], h = l.uuid, u = t[h];
            if (u !== void 0) if (delete t[h], u < r) {
                let d = --r, f = e[d], m = --a, _ = e[m];
                t[f.uuid] = u, e[u] = f, t[_.uuid] = d, e[d] = _, e.pop();
                for(let g = 0, p = i; g !== p; ++g){
                    let v = n[g], x = v[d], y = v[m];
                    v[u] = x, v[d] = y, v.pop();
                }
            } else {
                let d = --a, f = e[d];
                d > 0 && (t[f.uuid] = u), e[u] = f, e.pop();
                for(let m = 0, _ = i; m !== _; ++m){
                    let g = n[m];
                    g[u] = g[d], g.pop();
                }
            }
        }
        this.nCachedObjects_ = r;
    }
    subscribe_(e, t) {
        let n = this._bindingsIndicesByPath, i = n[e], r = this._bindings;
        if (i !== void 0) return r[i];
        let a = this._paths, o = this._parsedPaths, c = this._objects, l = c.length, h = this.nCachedObjects_, u = new Array(l);
        i = r.length, n[e] = i, a.push(e), o.push(t), r.push(u);
        for(let d = h, f = c.length; d !== f; ++d){
            let m = c[d];
            u[d] = new Ke(m, e, t);
        }
        return u;
    }
    unsubscribe_(e) {
        let t = this._bindingsIndicesByPath, n = t[e];
        if (n !== void 0) {
            let i = this._paths, r = this._parsedPaths, a = this._bindings, o = a.length - 1, c = a[o], l = e[o];
            t[l] = n, a[n] = c, a.pop(), r[n] = r[o], r.pop(), i[n] = i[o], i.pop();
        }
    }
}, Vc = class {
    constructor(e, t, n = null, i = t.blendMode){
        this._mixer = e, this._clip = t, this._localRoot = n, this.blendMode = i;
        let r = t.tracks, a = r.length, o = new Array(a), c = {
            endingStart: zi,
            endingEnd: zi
        };
        for(let l = 0; l !== a; ++l){
            let h = r[l].createInterpolant(null);
            o[l] = h, h.settings = c;
        }
        this._interpolantSettings = c, this._interpolants = o, this._propertyBindings = new Array(a), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = Af, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
    }
    play() {
        return this._mixer._activateAction(this), this;
    }
    stop() {
        return this._mixer._deactivateAction(this), this.reset();
    }
    reset() {
        return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
    }
    isRunning() {
        return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
    }
    isScheduled() {
        return this._mixer._isActiveAction(this);
    }
    startAt(e) {
        return this._startTime = e, this;
    }
    setLoop(e, t) {
        return this.loop = e, this.repetitions = t, this;
    }
    setEffectiveWeight(e) {
        return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
    }
    getEffectiveWeight() {
        return this._effectiveWeight;
    }
    fadeIn(e) {
        return this._scheduleFading(e, 0, 1);
    }
    fadeOut(e) {
        return this._scheduleFading(e, 1, 0);
    }
    crossFadeFrom(e, t, n) {
        if (e.fadeOut(t), this.fadeIn(t), n) {
            let i = this._clip.duration, r = e._clip.duration, a = r / i, o = i / r;
            e.warp(1, a, t), this.warp(o, 1, t);
        }
        return this;
    }
    crossFadeTo(e, t, n) {
        return e.crossFadeFrom(this, t, n);
    }
    stopFading() {
        let e = this._weightInterpolant;
        return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
    }
    setEffectiveTimeScale(e) {
        return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
    }
    getEffectiveTimeScale() {
        return this._effectiveTimeScale;
    }
    setDuration(e) {
        return this.timeScale = this._clip.duration / e, this.stopWarping();
    }
    syncWith(e) {
        return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
    }
    halt(e) {
        return this.warp(this._effectiveTimeScale, 0, e);
    }
    warp(e, t, n) {
        let i = this._mixer, r = i.time, a = this.timeScale, o = this._timeScaleInterpolant;
        o === null && (o = i._lendControlInterpolant(), this._timeScaleInterpolant = o);
        let c = o.parameterPositions, l = o.sampleValues;
        return c[0] = r, c[1] = r + n, l[0] = e / a, l[1] = t / a, this;
    }
    stopWarping() {
        let e = this._timeScaleInterpolant;
        return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
    }
    getMixer() {
        return this._mixer;
    }
    getClip() {
        return this._clip;
    }
    getRoot() {
        return this._localRoot || this._mixer._root;
    }
    _update(e, t, n, i) {
        if (!this.enabled) {
            this._updateWeight(e);
            return;
        }
        let r = this._startTime;
        if (r !== null) {
            let c = (e - r) * n;
            c < 0 || n === 0 ? t = 0 : (this._startTime = null, t = n * c);
        }
        t *= this._updateTimeScale(e);
        let a = this._updateTime(t), o = this._updateWeight(e);
        if (o > 0) {
            let c = this._interpolants, l = this._propertyBindings;
            switch(this.blendMode){
                case xd:
                    for(let h = 0, u = c.length; h !== u; ++h)c[h].evaluate(a), l[h].accumulateAdditive(o);
                    break;
                case Xc:
                default:
                    for(let h = 0, u = c.length; h !== u; ++h)c[h].evaluate(a), l[h].accumulate(i, o);
            }
        }
    }
    _updateWeight(e) {
        let t = 0;
        if (this.enabled) {
            t = this.weight;
            let n = this._weightInterpolant;
            if (n !== null) {
                let i = n.evaluate(e)[0];
                t *= i, e > n.parameterPositions[1] && (this.stopFading(), i === 0 && (this.enabled = !1));
            }
        }
        return this._effectiveWeight = t, t;
    }
    _updateTimeScale(e) {
        let t = 0;
        if (!this.paused) {
            t = this.timeScale;
            let n = this._timeScaleInterpolant;
            if (n !== null) {
                let i = n.evaluate(e)[0];
                t *= i, e > n.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t);
            }
        }
        return this._effectiveTimeScale = t, t;
    }
    _updateTime(e) {
        let t = this._clip.duration, n = this.loop, i = this.time + e, r = this._loopCount, a = n === Rf;
        if (e === 0) return r === -1 ? i : a && (r & 1) === 1 ? t - i : i;
        if (n === wf) {
            r === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
            e: {
                if (i >= t) i = t;
                else if (i < 0) i = 0;
                else {
                    this.time = i;
                    break e;
                }
                this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = i, this._mixer.dispatchEvent({
                    type: "finished",
                    action: this,
                    direction: e < 0 ? -1 : 1
                });
            }
        } else {
            if (r === -1 && (e >= 0 ? (r = 0, this._setEndings(!0, this.repetitions === 0, a)) : this._setEndings(this.repetitions === 0, !0, a)), i >= t || i < 0) {
                let o = Math.floor(i / t);
                i -= t * o, r += Math.abs(o);
                let c = this.repetitions - r;
                if (c <= 0) this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, i = e > 0 ? t : 0, this.time = i, this._mixer.dispatchEvent({
                    type: "finished",
                    action: this,
                    direction: e > 0 ? 1 : -1
                });
                else {
                    if (c === 1) {
                        let l = e < 0;
                        this._setEndings(l, !l, a);
                    } else this._setEndings(!1, !1, a);
                    this._loopCount = r, this.time = i, this._mixer.dispatchEvent({
                        type: "loop",
                        action: this,
                        loopDelta: o
                    });
                }
            } else this.time = i;
            if (a && (r & 1) === 1) return t - i;
        }
        return i;
    }
    _setEndings(e, t, n) {
        let i = this._interpolantSettings;
        n ? (i.endingStart = Vi, i.endingEnd = Vi) : (e ? i.endingStart = this.zeroSlopeAtStart ? Vi : zi : i.endingStart = Br, t ? i.endingEnd = this.zeroSlopeAtEnd ? Vi : zi : i.endingEnd = Br);
    }
    _scheduleFading(e, t, n) {
        let i = this._mixer, r = i.time, a = this._weightInterpolant;
        a === null && (a = i._lendControlInterpolant(), this._weightInterpolant = a);
        let o = a.parameterPositions, c = a.sampleValues;
        return o[0] = r, c[0] = t, o[1] = r + e, c[1] = n, this;
    }
}, Ox = new Float32Array(1), Cu = class extends sn {
    constructor(e){
        super(), this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
    }
    _bindAction(e, t) {
        let n = e._localRoot || this._root, i = e._clip.tracks, r = i.length, a = e._propertyBindings, o = e._interpolants, c = n.uuid, l = this._bindingsByRootAndName, h = l[c];
        h === void 0 && (h = {}, l[c] = h);
        for(let u = 0; u !== r; ++u){
            let d = i[u], f = d.name, m = h[f];
            if (m !== void 0) ++m.referenceCount, a[u] = m;
            else {
                if (m = a[u], m !== void 0) {
                    m._cacheIndex === null && (++m.referenceCount, this._addInactiveBinding(m, c, f));
                    continue;
                }
                let _ = t && t._propertyBindings[u].binding.parsedPath;
                m = new Bc(Ke.create(n, f, _), d.ValueTypeName, d.getValueSize()), ++m.referenceCount, this._addInactiveBinding(m, c, f), a[u] = m;
            }
            o[u].resultBuffer = m.buffer;
        }
    }
    _activateAction(e) {
        if (!this._isActiveAction(e)) {
            if (e._cacheIndex === null) {
                let n = (e._localRoot || this._root).uuid, i = e._clip.uuid, r = this._actionsByClip[i];
                this._bindAction(e, r && r.knownActions[0]), this._addInactiveAction(e, i, n);
            }
            let t = e._propertyBindings;
            for(let n = 0, i = t.length; n !== i; ++n){
                let r = t[n];
                r.useCount++ === 0 && (this._lendBinding(r), r.saveOriginalState());
            }
            this._lendAction(e);
        }
    }
    _deactivateAction(e) {
        if (this._isActiveAction(e)) {
            let t = e._propertyBindings;
            for(let n = 0, i = t.length; n !== i; ++n){
                let r = t[n];
                --r.useCount === 0 && (r.restoreOriginalState(), this._takeBackBinding(r));
            }
            this._takeBackAction(e);
        }
    }
    _initMemoryManager() {
        this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
        let e = this;
        this.stats = {
            actions: {
                get total () {
                    return e._actions.length;
                },
                get inUse () {
                    return e._nActiveActions;
                }
            },
            bindings: {
                get total () {
                    return e._bindings.length;
                },
                get inUse () {
                    return e._nActiveBindings;
                }
            },
            controlInterpolants: {
                get total () {
                    return e._controlInterpolants.length;
                },
                get inUse () {
                    return e._nActiveControlInterpolants;
                }
            }
        };
    }
    _isActiveAction(e) {
        let t = e._cacheIndex;
        return t !== null && t < this._nActiveActions;
    }
    _addInactiveAction(e, t, n) {
        let i = this._actions, r = this._actionsByClip, a = r[t];
        if (a === void 0) a = {
            knownActions: [
                e
            ],
            actionByRoot: {}
        }, e._byClipCacheIndex = 0, r[t] = a;
        else {
            let o = a.knownActions;
            e._byClipCacheIndex = o.length, o.push(e);
        }
        e._cacheIndex = i.length, i.push(e), a.actionByRoot[n] = e;
    }
    _removeInactiveAction(e) {
        let t = this._actions, n = t[t.length - 1], i = e._cacheIndex;
        n._cacheIndex = i, t[i] = n, t.pop(), e._cacheIndex = null;
        let r = e._clip.uuid, a = this._actionsByClip, o = a[r], c = o.knownActions, l = c[c.length - 1], h = e._byClipCacheIndex;
        l._byClipCacheIndex = h, c[h] = l, c.pop(), e._byClipCacheIndex = null;
        let u = o.actionByRoot, d = (e._localRoot || this._root).uuid;
        delete u[d], c.length === 0 && delete a[r], this._removeInactiveBindingsForAction(e);
    }
    _removeInactiveBindingsForAction(e) {
        let t = e._propertyBindings;
        for(let n = 0, i = t.length; n !== i; ++n){
            let r = t[n];
            --r.referenceCount === 0 && this._removeInactiveBinding(r);
        }
    }
    _lendAction(e) {
        let t = this._actions, n = e._cacheIndex, i = this._nActiveActions++, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _takeBackAction(e) {
        let t = this._actions, n = e._cacheIndex, i = --this._nActiveActions, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _addInactiveBinding(e, t, n) {
        let i = this._bindingsByRootAndName, r = this._bindings, a = i[t];
        a === void 0 && (a = {}, i[t] = a), a[n] = e, e._cacheIndex = r.length, r.push(e);
    }
    _removeInactiveBinding(e) {
        let t = this._bindings, n = e.binding, i = n.rootNode.uuid, r = n.path, a = this._bindingsByRootAndName, o = a[i], c = t[t.length - 1], l = e._cacheIndex;
        c._cacheIndex = l, t[l] = c, t.pop(), delete o[r], Object.keys(o).length === 0 && delete a[i];
    }
    _lendBinding(e) {
        let t = this._bindings, n = e._cacheIndex, i = this._nActiveBindings++, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _takeBackBinding(e) {
        let t = this._bindings, n = e._cacheIndex, i = --this._nActiveBindings, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _lendControlInterpolant() {
        let e = this._controlInterpolants, t = this._nActiveControlInterpolants++, n = e[t];
        return n === void 0 && (n = new fa(new Float32Array(2), new Float32Array(2), 1, Ox), n.__cacheIndex = t, e[t] = n), n;
    }
    _takeBackControlInterpolant(e) {
        let t = this._controlInterpolants, n = e.__cacheIndex, i = --this._nActiveControlInterpolants, r = t[i];
        e.__cacheIndex = i, t[i] = e, r.__cacheIndex = n, t[n] = r;
    }
    clipAction(e, t, n) {
        let i = t || this._root, r = i.uuid, a = typeof e == "string" ? is.findByName(i, e) : e, o = a !== null ? a.uuid : e, c = this._actionsByClip[o], l = null;
        if (n === void 0 && (a !== null ? n = a.blendMode : n = Xc), c !== void 0) {
            let u = c.actionByRoot[r];
            if (u !== void 0 && u.blendMode === n) return u;
            l = c.knownActions[0], a === null && (a = l._clip);
        }
        if (a === null) return null;
        let h = new Vc(this, a, t, n);
        return this._bindAction(h, l), this._addInactiveAction(h, o, r), h;
    }
    existingAction(e, t) {
        let n = t || this._root, i = n.uuid, r = typeof e == "string" ? is.findByName(n, e) : e, a = r ? r.uuid : e, o = this._actionsByClip[a];
        return o !== void 0 && o.actionByRoot[i] || null;
    }
    stopAllAction() {
        let e = this._actions, t = this._nActiveActions;
        for(let n = t - 1; n >= 0; --n)e[n].stop();
        return this;
    }
    update(e) {
        e *= this.timeScale;
        let t = this._actions, n = this._nActiveActions, i = this.time += e, r = Math.sign(e), a = this._accuIndex ^= 1;
        for(let l = 0; l !== n; ++l)t[l]._update(i, e, r, a);
        let o = this._bindings, c = this._nActiveBindings;
        for(let l = 0; l !== c; ++l)o[l].apply(a);
        return this;
    }
    setTime(e) {
        this.time = 0;
        for(let t = 0; t < this._actions.length; t++)this._actions[t].time = 0;
        return this.update(e);
    }
    getRoot() {
        return this._root;
    }
    uncacheClip(e) {
        let t = this._actions, n = e.uuid, i = this._actionsByClip, r = i[n];
        if (r !== void 0) {
            let a = r.knownActions;
            for(let o = 0, c = a.length; o !== c; ++o){
                let l = a[o];
                this._deactivateAction(l);
                let h = l._cacheIndex, u = t[t.length - 1];
                l._cacheIndex = null, l._byClipCacheIndex = null, u._cacheIndex = h, t[h] = u, t.pop(), this._removeInactiveBindingsForAction(l);
            }
            delete i[n];
        }
    }
    uncacheRoot(e) {
        let t = e.uuid, n = this._actionsByClip;
        for(let a in n){
            let o = n[a].actionByRoot, c = o[t];
            c !== void 0 && (this._deactivateAction(c), this._removeInactiveAction(c));
        }
        let i = this._bindingsByRootAndName, r = i[t];
        if (r !== void 0) for(let a in r){
            let o = r[a];
            o.restoreOriginalState(), this._removeInactiveBinding(o);
        }
    }
    uncacheAction(e, t) {
        let n = this.existingAction(e, t);
        n !== null && (this._deactivateAction(n), this._removeInactiveAction(n));
    }
}, Pu = class s1 {
    constructor(e){
        this.value = e;
    }
    clone() {
        return new s1(this.value.clone === void 0 ? this.value : this.value.clone());
    }
}, Fx = 0, Lu = class extends sn {
    constructor(){
        super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", {
            value: Fx++
        }), this.name = "", this.usage = Hr, this.uniforms = [];
    }
    add(e) {
        return this.uniforms.push(e), this;
    }
    remove(e) {
        let t = this.uniforms.indexOf(e);
        return t !== -1 && this.uniforms.splice(t, 1), this;
    }
    setName(e) {
        return this.name = e, this;
    }
    setUsage(e) {
        return this.usage = e, this;
    }
    dispose() {
        return this.dispatchEvent({
            type: "dispose"
        }), this;
    }
    copy(e) {
        this.name = e.name, this.usage = e.usage;
        let t = e.uniforms;
        this.uniforms.length = 0;
        for(let n = 0, i = t.length; n < i; n++)this.uniforms.push(t[n].clone());
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Iu = class extends Is {
    constructor(e, t, n = 1){
        super(e, t), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = n;
    }
    copy(e) {
        return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
    }
    clone(e) {
        let t = super.clone(e);
        return t.meshPerAttribute = this.meshPerAttribute, t;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t;
    }
}, Uu = class {
    constructor(e, t, n, i, r){
        this.isGLBufferAttribute = !0, this.name = "", this.buffer = e, this.type = t, this.itemSize = n, this.elementSize = i, this.count = r, this.version = 0;
    }
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
    setBuffer(e) {
        return this.buffer = e, this;
    }
    setType(e, t) {
        return this.type = e, this.elementSize = t, this;
    }
    setItemSize(e) {
        return this.itemSize = e, this;
    }
    setCount(e) {
        return this.count = e, this;
    }
}, Du = class {
    constructor(e, t, n = 0, i = 1 / 0){
        this.ray = new hi(e, t), this.near = n, this.far = i, this.camera = null, this.layers = new Rs, this.params = {
            Mesh: {},
            Line: {
                threshold: 1
            },
            LOD: {},
            Points: {
                threshold: 1
            },
            Sprite: {}
        };
    }
    set(e, t) {
        this.ray.set(e, t);
    }
    setFromCamera(e, t) {
        t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, .5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
    }
    intersectObject(e, t = !0, n = []) {
        return kc(e, this, n, t), n.sort(Nu), n;
    }
    intersectObjects(e, t = !0, n = []) {
        for(let i = 0, r = e.length; i < r; i++)kc(e[i], this, n, t);
        return n.sort(Nu), n;
    }
};
function Nu(s1, e) {
    return s1.distance - e.distance;
}
function kc(s1, e, t, n) {
    if (s1.layers.test(e.layers) && s1.raycast(e, t), n === !0) {
        let i = s1.children;
        for(let r = 0, a = i.length; r < a; r++)kc(i[r], e, t, !0);
    }
}
var Ou = class {
    constructor(e = 1, t = 0, n = 0){
        return this.radius = e, this.phi = t, this.theta = n, this;
    }
    set(e, t, n) {
        return this.radius = e, this.phi = t, this.theta = n, this;
    }
    copy(e) {
        return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
    }
    makeSafe() {
        return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
    }
    setFromVector3(e) {
        return this.setFromCartesianCoords(e.x, e.y, e.z);
    }
    setFromCartesianCoords(e, t, n) {
        return this.radius = Math.sqrt(e * e + t * t + n * n), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, n), this.phi = Math.acos(ct(t / this.radius, -1, 1))), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Fu = class {
    constructor(e = 1, t = 0, n = 0){
        return this.radius = e, this.theta = t, this.y = n, this;
    }
    set(e, t, n) {
        return this.radius = e, this.theta = t, this.y = n, this;
    }
    copy(e) {
        return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
    }
    setFromVector3(e) {
        return this.setFromCartesianCoords(e.x, e.y, e.z);
    }
    setFromCartesianCoords(e, t, n) {
        return this.radius = Math.sqrt(e * e + n * n), this.theta = Math.atan2(e, n), this.y = t, this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Bu = new Z, zu = class {
    constructor(e = new Z(1 / 0, 1 / 0), t = new Z(-1 / 0, -1 / 0)){
        this.isBox2 = !0, this.min = e, this.max = t;
    }
    set(e, t) {
        return this.min.copy(e), this.max.copy(t), this;
    }
    setFromPoints(e) {
        this.makeEmpty();
        for(let t = 0, n = e.length; t < n; t++)this.expandByPoint(e[t]);
        return this;
    }
    setFromCenterAndSize(e, t) {
        let n = Bu.copy(t).multiplyScalar(.5);
        return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.min.copy(e.min), this.max.copy(e.max), this;
    }
    makeEmpty() {
        return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
    }
    isEmpty() {
        return this.max.x < this.min.x || this.max.y < this.min.y;
    }
    getCenter(e) {
        return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5);
    }
    getSize(e) {
        return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
    }
    expandByPoint(e) {
        return this.min.min(e), this.max.max(e), this;
    }
    expandByVector(e) {
        return this.min.sub(e), this.max.add(e), this;
    }
    expandByScalar(e) {
        return this.min.addScalar(-e), this.max.addScalar(e), this;
    }
    containsPoint(e) {
        return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y);
    }
    containsBox(e) {
        return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
    }
    getParameter(e, t) {
        return t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y));
    }
    intersectsBox(e) {
        return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y);
    }
    clampPoint(e, t) {
        return t.copy(e).clamp(this.min, this.max);
    }
    distanceToPoint(e) {
        return this.clampPoint(e, Bu).distanceTo(e);
    }
    intersect(e) {
        return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
    }
    union(e) {
        return this.min.min(e.min), this.max.max(e.max), this;
    }
    translate(e) {
        return this.min.add(e), this.max.add(e), this;
    }
    equals(e) {
        return e.min.equals(this.min) && e.max.equals(this.max);
    }
}, Vu = new A, Tr = new A, ku = class {
    constructor(e = new A, t = new A){
        this.start = e, this.end = t;
    }
    set(e, t) {
        return this.start.copy(e), this.end.copy(t), this;
    }
    copy(e) {
        return this.start.copy(e.start), this.end.copy(e.end), this;
    }
    getCenter(e) {
        return e.addVectors(this.start, this.end).multiplyScalar(.5);
    }
    delta(e) {
        return e.subVectors(this.end, this.start);
    }
    distanceSq() {
        return this.start.distanceToSquared(this.end);
    }
    distance() {
        return this.start.distanceTo(this.end);
    }
    at(e, t) {
        return this.delta(t).multiplyScalar(e).add(this.start);
    }
    closestPointToPointParameter(e, t) {
        Vu.subVectors(e, this.start), Tr.subVectors(this.end, this.start);
        let n = Tr.dot(Tr), r = Tr.dot(Vu) / n;
        return t && (r = ct(r, 0, 1)), r;
    }
    closestPointToPoint(e, t, n) {
        let i = this.closestPointToPointParameter(e, t);
        return this.delta(n).multiplyScalar(i).add(this.start);
    }
    applyMatrix4(e) {
        return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
    }
    equals(e) {
        return e.start.equals(this.start) && e.end.equals(this.end);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Hu = new A, Gu = class extends Je {
    constructor(e, t){
        super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = t, this.type = "SpotLightHelper";
        let n = new Ge, i = [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            -1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            -1,
            1
        ];
        for(let a = 0, o = 1, c = 32; a < c; a++, o++){
            let l = a / c * Math.PI * 2, h = o / c * Math.PI * 2;
            i.push(Math.cos(l), Math.sin(l), 1, Math.cos(h), Math.sin(h), 1);
        }
        n.setAttribute("position", new ve(i, 3));
        let r = new wt({
            fog: !1,
            toneMapped: !1
        });
        this.cone = new en(n, r), this.add(this.cone), this.update();
    }
    dispose() {
        this.cone.geometry.dispose(), this.cone.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1);
        let e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
        this.cone.scale.set(t, t, e), Hu.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(Hu), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
    }
}, Pn = new A, wr = new ze, lo = new ze, Wu = class extends en {
    constructor(e){
        let t = Nd(e), n = new Ge, i = [], r = [], a = new pe(0, 0, 1), o = new pe(0, 1, 0);
        for(let l = 0; l < t.length; l++){
            let h = t[l];
            h.parent && h.parent.isBone && (i.push(0, 0, 0), i.push(0, 0, 0), r.push(a.r, a.g, a.b), r.push(o.r, o.g, o.b));
        }
        n.setAttribute("position", new ve(i, 3)), n.setAttribute("color", new ve(r, 3));
        let c = new wt({
            vertexColors: !0,
            depthTest: !1,
            depthWrite: !1,
            toneMapped: !1,
            transparent: !0
        });
        super(n, c), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
    }
    updateMatrixWorld(e) {
        let t = this.bones, n = this.geometry, i = n.getAttribute("position");
        lo.copy(this.root.matrixWorld).invert();
        for(let r = 0, a = 0; r < t.length; r++){
            let o = t[r];
            o.parent && o.parent.isBone && (wr.multiplyMatrices(lo, o.matrixWorld), Pn.setFromMatrixPosition(wr), i.setXYZ(a, Pn.x, Pn.y, Pn.z), wr.multiplyMatrices(lo, o.parent.matrixWorld), Pn.setFromMatrixPosition(wr), i.setXYZ(a + 1, Pn.x, Pn.y, Pn.z), a += 2);
        }
        n.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
};
function Nd(s1) {
    let e = [];
    s1.isBone === !0 && e.push(s1);
    for(let t = 0; t < s1.children.length; t++)e.push.apply(e, Nd(s1.children[t]));
    return e;
}
var Xu = class extends Mt {
    constructor(e, t, n){
        let i = new ua(t, 4, 2), r = new Sn({
            wireframe: !0,
            fog: !1,
            toneMapped: !1
        });
        super(i, r), this.light = e, this.color = n, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
    }
}, Bx = new A, qu = new pe, Yu = new pe, Zu = class extends Je {
    constructor(e, t, n){
        super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "HemisphereLightHelper";
        let i = new ha(t);
        i.rotateY(Math.PI * .5), this.material = new Sn({
            wireframe: !0,
            fog: !1,
            toneMapped: !1
        }), this.color === void 0 && (this.material.vertexColors = !0);
        let r = i.getAttribute("position"), a = new Float32Array(r.count * 3);
        i.setAttribute("color", new et(a, 3)), this.add(new Mt(i, this.material)), this.update();
    }
    dispose() {
        this.children[0].geometry.dispose(), this.children[0].material.dispose();
    }
    update() {
        let e = this.children[0];
        if (this.color !== void 0) this.material.color.set(this.color);
        else {
            let t = e.geometry.getAttribute("color");
            qu.copy(this.light.color), Yu.copy(this.light.groundColor);
            for(let n = 0, i = t.count; n < i; n++){
                let r = n < i / 2 ? qu : Yu;
                t.setXYZ(n, r.r, r.g, r.b);
            }
            t.needsUpdate = !0;
        }
        this.light.updateWorldMatrix(!0, !1), e.lookAt(Bx.setFromMatrixPosition(this.light.matrixWorld).negate());
    }
}, Ju = class extends en {
    constructor(e = 10, t = 10, n = 4473924, i = 8947848){
        n = new pe(n), i = new pe(i);
        let r = t / 2, a = e / t, o = e / 2, c = [], l = [];
        for(let d = 0, f = 0, m = -o; d <= t; d++, m += a){
            c.push(-o, 0, m, o, 0, m), c.push(m, 0, -o, m, 0, o);
            let _ = d === r ? n : i;
            _.toArray(l, f), f += 3, _.toArray(l, f), f += 3, _.toArray(l, f), f += 3, _.toArray(l, f), f += 3;
        }
        let h = new Ge;
        h.setAttribute("position", new ve(c, 3)), h.setAttribute("color", new ve(l, 3));
        let u = new wt({
            vertexColors: !0,
            toneMapped: !1
        });
        super(h, u), this.type = "GridHelper";
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
}, $u = class extends en {
    constructor(e = 10, t = 16, n = 8, i = 64, r = 4473924, a = 8947848){
        r = new pe(r), a = new pe(a);
        let o = [], c = [];
        if (t > 1) for(let u = 0; u < t; u++){
            let d = u / t * (Math.PI * 2), f = Math.sin(d) * e, m = Math.cos(d) * e;
            o.push(0, 0, 0), o.push(f, 0, m);
            let _ = u & 1 ? r : a;
            c.push(_.r, _.g, _.b), c.push(_.r, _.g, _.b);
        }
        for(let u = 0; u < n; u++){
            let d = u & 1 ? r : a, f = e - e / n * u;
            for(let m = 0; m < i; m++){
                let _ = m / i * (Math.PI * 2), g = Math.sin(_) * f, p = Math.cos(_) * f;
                o.push(g, 0, p), c.push(d.r, d.g, d.b), _ = (m + 1) / i * (Math.PI * 2), g = Math.sin(_) * f, p = Math.cos(_) * f, o.push(g, 0, p), c.push(d.r, d.g, d.b);
            }
        }
        let l = new Ge;
        l.setAttribute("position", new ve(o, 3)), l.setAttribute("color", new ve(c, 3));
        let h = new wt({
            vertexColors: !0,
            toneMapped: !1
        });
        super(l, h), this.type = "PolarGridHelper";
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
}, Ku = new A, Ar = new A, Qu = new A, ju = class extends Je {
    constructor(e, t, n){
        super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "DirectionalLightHelper", t === void 0 && (t = 1);
        let i = new Ge;
        i.setAttribute("position", new ve([
            -t,
            t,
            0,
            t,
            t,
            0,
            t,
            -t,
            0,
            -t,
            -t,
            0,
            -t,
            t,
            0
        ], 3));
        let r = new wt({
            fog: !1,
            toneMapped: !1
        });
        this.lightPlane = new bn(i, r), this.add(this.lightPlane), i = new Ge, i.setAttribute("position", new ve([
            0,
            0,
            0,
            0,
            0,
            1
        ], 3)), this.targetLine = new bn(i, r), this.add(this.targetLine), this.update();
    }
    dispose() {
        this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
    }
    update() {
        this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), Ku.setFromMatrixPosition(this.light.matrixWorld), Ar.setFromMatrixPosition(this.light.target.matrixWorld), Qu.subVectors(Ar, Ku), this.lightPlane.lookAt(Ar), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(Ar), this.targetLine.scale.z = Qu.length();
    }
}, Rr = new A, ot = new Cs, ed = class extends en {
    constructor(e){
        let t = new Ge, n = new wt({
            color: 16777215,
            vertexColors: !0,
            toneMapped: !1
        }), i = [], r = [], a = {};
        o("n1", "n2"), o("n2", "n4"), o("n4", "n3"), o("n3", "n1"), o("f1", "f2"), o("f2", "f4"), o("f4", "f3"), o("f3", "f1"), o("n1", "f1"), o("n2", "f2"), o("n3", "f3"), o("n4", "f4"), o("p", "n1"), o("p", "n2"), o("p", "n3"), o("p", "n4"), o("u1", "u2"), o("u2", "u3"), o("u3", "u1"), o("c", "t"), o("p", "c"), o("cn1", "cn2"), o("cn3", "cn4"), o("cf1", "cf2"), o("cf3", "cf4");
        function o(m, _) {
            c(m), c(_);
        }
        function c(m) {
            i.push(0, 0, 0), r.push(0, 0, 0), a[m] === void 0 && (a[m] = []), a[m].push(i.length / 3 - 1);
        }
        t.setAttribute("position", new ve(i, 3)), t.setAttribute("color", new ve(r, 3)), super(t, n), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = a, this.update();
        let l = new pe(16755200), h = new pe(16711680), u = new pe(43775), d = new pe(16777215), f = new pe(3355443);
        this.setColors(l, h, u, d, f);
    }
    setColors(e, t, n, i, r) {
        let o = this.geometry.getAttribute("color");
        o.setXYZ(0, e.r, e.g, e.b), o.setXYZ(1, e.r, e.g, e.b), o.setXYZ(2, e.r, e.g, e.b), o.setXYZ(3, e.r, e.g, e.b), o.setXYZ(4, e.r, e.g, e.b), o.setXYZ(5, e.r, e.g, e.b), o.setXYZ(6, e.r, e.g, e.b), o.setXYZ(7, e.r, e.g, e.b), o.setXYZ(8, e.r, e.g, e.b), o.setXYZ(9, e.r, e.g, e.b), o.setXYZ(10, e.r, e.g, e.b), o.setXYZ(11, e.r, e.g, e.b), o.setXYZ(12, e.r, e.g, e.b), o.setXYZ(13, e.r, e.g, e.b), o.setXYZ(14, e.r, e.g, e.b), o.setXYZ(15, e.r, e.g, e.b), o.setXYZ(16, e.r, e.g, e.b), o.setXYZ(17, e.r, e.g, e.b), o.setXYZ(18, e.r, e.g, e.b), o.setXYZ(19, e.r, e.g, e.b), o.setXYZ(20, e.r, e.g, e.b), o.setXYZ(21, e.r, e.g, e.b), o.setXYZ(22, e.r, e.g, e.b), o.setXYZ(23, e.r, e.g, e.b), o.setXYZ(24, t.r, t.g, t.b), o.setXYZ(25, t.r, t.g, t.b), o.setXYZ(26, t.r, t.g, t.b), o.setXYZ(27, t.r, t.g, t.b), o.setXYZ(28, t.r, t.g, t.b), o.setXYZ(29, t.r, t.g, t.b), o.setXYZ(30, t.r, t.g, t.b), o.setXYZ(31, t.r, t.g, t.b), o.setXYZ(32, n.r, n.g, n.b), o.setXYZ(33, n.r, n.g, n.b), o.setXYZ(34, n.r, n.g, n.b), o.setXYZ(35, n.r, n.g, n.b), o.setXYZ(36, n.r, n.g, n.b), o.setXYZ(37, n.r, n.g, n.b), o.setXYZ(38, i.r, i.g, i.b), o.setXYZ(39, i.r, i.g, i.b), o.setXYZ(40, r.r, r.g, r.b), o.setXYZ(41, r.r, r.g, r.b), o.setXYZ(42, r.r, r.g, r.b), o.setXYZ(43, r.r, r.g, r.b), o.setXYZ(44, r.r, r.g, r.b), o.setXYZ(45, r.r, r.g, r.b), o.setXYZ(46, r.r, r.g, r.b), o.setXYZ(47, r.r, r.g, r.b), o.setXYZ(48, r.r, r.g, r.b), o.setXYZ(49, r.r, r.g, r.b), o.needsUpdate = !0;
    }
    update() {
        let e = this.geometry, t = this.pointMap, n = 1, i = 1;
        ot.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), ht("c", t, e, ot, 0, 0, -1), ht("t", t, e, ot, 0, 0, 1), ht("n1", t, e, ot, -n, -i, -1), ht("n2", t, e, ot, n, -i, -1), ht("n3", t, e, ot, -n, i, -1), ht("n4", t, e, ot, n, i, -1), ht("f1", t, e, ot, -n, -i, 1), ht("f2", t, e, ot, n, -i, 1), ht("f3", t, e, ot, -n, i, 1), ht("f4", t, e, ot, n, i, 1), ht("u1", t, e, ot, n * .7, i * 1.1, -1), ht("u2", t, e, ot, -n * .7, i * 1.1, -1), ht("u3", t, e, ot, 0, i * 2, -1), ht("cf1", t, e, ot, -n, 0, 1), ht("cf2", t, e, ot, n, 0, 1), ht("cf3", t, e, ot, 0, -i, 1), ht("cf4", t, e, ot, 0, i, 1), ht("cn1", t, e, ot, -n, 0, -1), ht("cn2", t, e, ot, n, 0, -1), ht("cn3", t, e, ot, 0, -i, -1), ht("cn4", t, e, ot, 0, i, -1), e.getAttribute("position").needsUpdate = !0;
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
};
function ht(s1, e, t, n, i, r, a) {
    Rr.set(i, r, a).unproject(n);
    let o = e[s1];
    if (o !== void 0) {
        let c = t.getAttribute("position");
        for(let l = 0, h = o.length; l < h; l++)c.setXYZ(o[l], Rr.x, Rr.y, Rr.z);
    }
}
var Cr = new Qt, td = class extends en {
    constructor(e, t = 16776960){
        let n = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]), i = new Float32Array(8 * 3), r = new Ge;
        r.setIndex(new et(n, 1)), r.setAttribute("position", new et(i, 3)), super(r, new wt({
            color: t,
            toneMapped: !1
        })), this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
    }
    update(e) {
        if (e !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), this.object !== void 0 && Cr.setFromObject(this.object), Cr.isEmpty()) return;
        let t = Cr.min, n = Cr.max, i = this.geometry.attributes.position, r = i.array;
        r[0] = n.x, r[1] = n.y, r[2] = n.z, r[3] = t.x, r[4] = n.y, r[5] = n.z, r[6] = t.x, r[7] = t.y, r[8] = n.z, r[9] = n.x, r[10] = t.y, r[11] = n.z, r[12] = n.x, r[13] = n.y, r[14] = t.z, r[15] = t.x, r[16] = n.y, r[17] = t.z, r[18] = t.x, r[19] = t.y, r[20] = t.z, r[21] = n.x, r[22] = t.y, r[23] = t.z, i.needsUpdate = !0, this.geometry.computeBoundingSphere();
    }
    setFromObject(e) {
        return this.object = e, this.update(), this;
    }
    copy(e, t) {
        return super.copy(e, t), this.object = e.object, this;
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
}, nd = class extends en {
    constructor(e, t = 16776960){
        let n = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]), i = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            -1
        ], r = new Ge;
        r.setIndex(new et(n, 1)), r.setAttribute("position", new ve(i, 3)), super(r, new wt({
            color: t,
            toneMapped: !1
        })), this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
    }
    updateMatrixWorld(e) {
        let t = this.box;
        t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(.5), super.updateMatrixWorld(e));
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
}, id = class extends bn {
    constructor(e, t = 1, n = 16776960){
        let i = n, r = [
            1,
            -1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            -1,
            0,
            1,
            1,
            0
        ], a = new Ge;
        a.setAttribute("position", new ve(r, 3)), a.computeBoundingSphere(), super(a, new wt({
            color: i,
            toneMapped: !1
        })), this.type = "PlaneHelper", this.plane = e, this.size = t;
        let o = [
            1,
            1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            -1,
            0
        ], c = new Ge;
        c.setAttribute("position", new ve(o, 3)), c.computeBoundingSphere(), this.add(new Mt(c, new Sn({
            color: i,
            opacity: .2,
            transparent: !0,
            depthWrite: !1,
            toneMapped: !1
        })));
    }
    updateMatrixWorld(e) {
        this.position.set(0, 0, 0), this.scale.set(.5 * this.size, .5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(e);
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
    }
}, sd = new A, Pr, ho, rd = class extends Je {
    constructor(e = new A(0, 0, 1), t = new A(0, 0, 0), n = 1, i = 16776960, r = n * .2, a = r * .2){
        super(), this.type = "ArrowHelper", Pr === void 0 && (Pr = new Ge, Pr.setAttribute("position", new ve([
            0,
            0,
            0,
            0,
            1,
            0
        ], 3)), ho = new Ns(0, .5, 1, 5, 1), ho.translate(0, -.5, 0)), this.position.copy(t), this.line = new bn(Pr, new wt({
            color: i,
            toneMapped: !1
        })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new Mt(ho, new Sn({
            color: i,
            toneMapped: !1
        })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(n, r, a);
    }
    setDirection(e) {
        if (e.y > .99999) this.quaternion.set(0, 0, 0, 1);
        else if (e.y < -.99999) this.quaternion.set(1, 0, 0, 0);
        else {
            sd.set(e.z, 0, -e.x).normalize();
            let t = Math.acos(e.y);
            this.quaternion.setFromAxisAngle(sd, t);
        }
    }
    setLength(e, t = e * .2, n = t * .2) {
        this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(n, t, n), this.cone.position.y = e, this.cone.updateMatrix();
    }
    setColor(e) {
        this.line.material.color.set(e), this.cone.material.color.set(e);
    }
    copy(e) {
        return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
    }
    dispose() {
        this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
    }
}, ad = class extends en {
    constructor(e = 1){
        let t = [
            0,
            0,
            0,
            e,
            0,
            0,
            0,
            0,
            0,
            0,
            e,
            0,
            0,
            0,
            0,
            0,
            0,
            e
        ], n = [
            1,
            0,
            0,
            1,
            .6,
            0,
            0,
            1,
            0,
            .6,
            1,
            0,
            0,
            0,
            1,
            0,
            .6,
            1
        ], i = new Ge;
        i.setAttribute("position", new ve(t, 3)), i.setAttribute("color", new ve(n, 3));
        let r = new wt({
            vertexColors: !0,
            toneMapped: !1
        });
        super(i, r), this.type = "AxesHelper";
    }
    setColors(e, t, n) {
        let i = new pe, r = this.geometry.attributes.color.array;
        return i.set(e), i.toArray(r, 0), i.toArray(r, 3), i.set(t), i.toArray(r, 6), i.toArray(r, 9), i.set(n), i.toArray(r, 12), i.toArray(r, 15), this.geometry.attributes.color.needsUpdate = !0, this;
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
}, od = class {
    constructor(){
        this.type = "ShapePath", this.color = new pe, this.subPaths = [], this.currentPath = null;
    }
    moveTo(e, t) {
        return this.currentPath = new ji, this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
    }
    lineTo(e, t) {
        return this.currentPath.lineTo(e, t), this;
    }
    quadraticCurveTo(e, t, n, i) {
        return this.currentPath.quadraticCurveTo(e, t, n, i), this;
    }
    bezierCurveTo(e, t, n, i, r, a) {
        return this.currentPath.bezierCurveTo(e, t, n, i, r, a), this;
    }
    splineThru(e) {
        return this.currentPath.splineThru(e), this;
    }
    toShapes(e) {
        function t(p) {
            let v = [];
            for(let x = 0, y = p.length; x < y; x++){
                let b = p[x], w = new Fn;
                w.curves = b.curves, v.push(w);
            }
            return v;
        }
        function n(p, v) {
            let x = v.length, y = !1;
            for(let b = x - 1, w = 0; w < x; b = w++){
                let R = v[b], I = v[w], M = I.x - R.x, T = I.y - R.y;
                if (Math.abs(T) > Number.EPSILON) {
                    if (T < 0 && (R = v[w], M = -M, I = v[b], T = -T), p.y < R.y || p.y > I.y) continue;
                    if (p.y === R.y) {
                        if (p.x === R.x) return !0;
                    } else {
                        let O = T * (p.x - R.x) - M * (p.y - R.y);
                        if (O === 0) return !0;
                        if (O < 0) continue;
                        y = !y;
                    }
                } else {
                    if (p.y !== R.y) continue;
                    if (I.x <= p.x && p.x <= R.x || R.x <= p.x && p.x <= I.x) return !0;
                }
            }
            return y;
        }
        let i = yn.isClockWise, r = this.subPaths;
        if (r.length === 0) return [];
        let a, o, c, l = [];
        if (r.length === 1) return o = r[0], c = new Fn, c.curves = o.curves, l.push(c), l;
        let h = !i(r[0].getPoints());
        h = e ? !h : h;
        let u = [], d = [], f = [], m = 0, _;
        d[m] = void 0, f[m] = [];
        for(let p = 0, v = r.length; p < v; p++)o = r[p], _ = o.getPoints(), a = i(_), a = e ? !a : a, a ? (!h && d[m] && m++, d[m] = {
            s: new Fn,
            p: _
        }, d[m].s.curves = o.curves, h && m++, f[m] = []) : f[m].push({
            h: o,
            p: _[0]
        });
        if (!d[0]) return t(r);
        if (d.length > 1) {
            let p = !1, v = 0;
            for(let x = 0, y = d.length; x < y; x++)u[x] = [];
            for(let x = 0, y = d.length; x < y; x++){
                let b = f[x];
                for(let w = 0; w < b.length; w++){
                    let R = b[w], I = !0;
                    for(let M = 0; M < d.length; M++)n(R.p, d[M].p) && (x !== M && v++, I ? (I = !1, u[M].push(R)) : p = !0);
                    I && u[x].push(R);
                }
            }
            v > 0 && p === !1 && (f = u);
        }
        let g;
        for(let p = 0, v = d.length; p < v; p++){
            c = d[p].s, l.push(c), g = f[p];
            for(let x = 0, y = g.length; x < y; x++)c.holes.push(g[x].h);
        }
        return l;
    }
};
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
    detail: {
        revision: Hc
    }
}));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = Hc);
const mod = {
    ACESFilmicToneMapping: mf,
    AddEquation: Bi,
    AddOperation: uf,
    AdditiveAnimationBlendMode: xd,
    AdditiveBlending: al,
    AlphaFormat: vf,
    AlwaysCompare: Vf,
    AlwaysDepth: sf,
    AlwaysStencilFunc: If,
    AmbientLight: Cc,
    AnimationAction: Vc,
    AnimationClip: is,
    AnimationLoader: au,
    AnimationMixer: Cu,
    AnimationObjectGroup: Ru,
    AnimationUtils: Sv,
    ArcCurve: ko,
    ArrayCamera: To,
    ArrowHelper: rd,
    Audio: Fc,
    AudioAnalyser: Au,
    AudioContext: _a,
    AudioListener: Eu,
    AudioLoader: xu,
    AxesHelper: ad,
    BackSide: Ft,
    BasicDepthPacking: Cf,
    BasicShadowMap: Hx,
    Bone: ta,
    BooleanKeyframeTrack: Vn,
    Box2: zu,
    Box3: Qt,
    Box3Helper: nd,
    BoxGeometry: Ji,
    BoxHelper: td,
    BufferAttribute: et,
    BufferGeometry: Ge,
    BufferGeometryLoader: Nc,
    ByteType: _f,
    Cache: ss,
    Camera: Cs,
    CameraHelper: ed,
    CanvasTexture: jh,
    CapsuleGeometry: qo,
    CatmullRomCurve3: Ho,
    CineonToneMapping: pf,
    CircleGeometry: Yo,
    ClampToEdgeWrapping: It,
    Clock: Oc,
    Color: pe,
    ColorKeyframeTrack: pa,
    ColorManagement: Qe,
    CompressedArrayTexture: Kh,
    CompressedCubeTexture: Qh,
    CompressedTexture: Us,
    CompressedTextureLoader: ou,
    ConeGeometry: Zo,
    CubeCamera: _o,
    CubeReflectionMapping: zn,
    CubeRefractionMapping: ci,
    CubeTexture: Ki,
    CubeTextureLoader: cu,
    CubeUVReflectionMapping: Vs,
    CubicBezierCurve: ia,
    CubicBezierCurve3: Go,
    CubicInterpolant: xc,
    CullFaceBack: rl,
    CullFaceFront: Hd,
    CullFaceFrontBack: kx,
    CullFaceNone: kd,
    Curve: Zt,
    CurvePath: Xo,
    CustomBlending: Wd,
    CustomToneMapping: gf,
    CylinderGeometry: Ns,
    Cylindrical: Fu,
    Data3DTexture: qr,
    DataArrayTexture: As,
    DataTexture: oi,
    DataTextureLoader: lu,
    DataUtils: Mv,
    DecrementStencilOp: ev,
    DecrementWrapStencilOp: nv,
    DefaultLoadingManager: Ex,
    DepthFormat: si,
    DepthStencilFormat: Yi,
    DepthTexture: wo,
    DirectionalLight: Rc,
    DirectionalLightHelper: ju,
    DiscreteInterpolant: vc,
    DisplayP3ColorSpace: qc,
    DodecahedronGeometry: Jo,
    DoubleSide: gn,
    DstAlphaFactor: Kd,
    DstColorFactor: jd,
    DynamicCopyUsage: _v,
    DynamicDrawUsage: uv,
    DynamicReadUsage: pv,
    EdgesGeometry: $o,
    EllipseCurve: Ds,
    EqualCompare: Nf,
    EqualDepth: af,
    EqualStencilFunc: av,
    EquirectangularReflectionMapping: Ir,
    EquirectangularRefractionMapping: Ur,
    Euler: Yr,
    EventDispatcher: sn,
    ExtrudeGeometry: jo,
    FileLoader: rn,
    Float16BufferAttribute: ih,
    Float32BufferAttribute: ve,
    Float64BufferAttribute: sh,
    FloatType: xn,
    Fog: Lo,
    FogExp2: Po,
    FramebufferTexture: $h,
    FrontSide: Bn,
    Frustum: Ps,
    GLBufferAttribute: Uu,
    GLSL1: vv,
    GLSL3: Ol,
    GreaterCompare: Ff,
    GreaterDepth: cf,
    GreaterEqualCompare: zf,
    GreaterEqualDepth: of,
    GreaterEqualStencilFunc: hv,
    GreaterStencilFunc: cv,
    GridHelper: Ju,
    Group: ti,
    HalfFloatType: Ts,
    HemisphereLight: Sc,
    HemisphereLightHelper: Zu,
    IcosahedronGeometry: ec,
    ImageBitmapLoader: _u,
    ImageLoader: rs,
    ImageUtils: Xr,
    IncrementStencilOp: jx,
    IncrementWrapStencilOp: tv,
    InstancedBufferAttribute: ui,
    InstancedBufferGeometry: Dc,
    InstancedInterleavedBuffer: Iu,
    InstancedMesh: Fo,
    Int16BufferAttribute: th,
    Int32BufferAttribute: nh,
    Int8BufferAttribute: Ql,
    IntType: dd,
    InterleavedBuffer: Is,
    InterleavedBufferAttribute: Qi,
    Interpolant: es,
    InterpolateDiscrete: Or,
    InterpolateLinear: Fr,
    InterpolateSmooth: La,
    InvertStencilOp: iv,
    KeepStencilOp: Ia,
    KeyframeTrack: Jt,
    LOD: Do,
    LatheGeometry: la,
    Layers: Rs,
    LessCompare: Df,
    LessDepth: rf,
    LessEqualCompare: Of,
    LessEqualDepth: uo,
    LessEqualStencilFunc: ov,
    LessStencilFunc: rv,
    Light: En,
    LightProbe: Ic,
    Line: bn,
    Line3: ku,
    LineBasicMaterial: wt,
    LineCurve: sa,
    LineCurve3: Wo,
    LineDashedMaterial: gc,
    LineLoop: Bo,
    LineSegments: en,
    LinearDisplayP3ColorSpace: va,
    LinearEncoding: vd,
    LinearFilter: mt,
    LinearInterpolant: fa,
    LinearMipMapLinearFilter: Yx,
    LinearMipMapNearestFilter: qx,
    LinearMipmapLinearFilter: li,
    LinearMipmapNearestFilter: ud,
    LinearSRGBColorSpace: Mn,
    LinearToneMapping: df,
    LinearTransfer: zr,
    Loader: Dt,
    LoaderUtils: ga,
    LoadingManager: ma,
    LoopOnce: wf,
    LoopPingPong: Rf,
    LoopRepeat: Af,
    LuminanceAlphaFormat: Mf,
    LuminanceFormat: yf,
    MOUSE: zx,
    Material: bt,
    MaterialLoader: Uc,
    MathUtils: yv,
    Matrix3: He,
    Matrix4: ze,
    MaxEquation: hl,
    Mesh: Mt,
    MeshBasicMaterial: Sn,
    MeshDepthMaterial: Qr,
    MeshDistanceMaterial: jr,
    MeshLambertMaterial: pc,
    MeshMatcapMaterial: mc,
    MeshNormalMaterial: fc,
    MeshPhongMaterial: uc,
    MeshPhysicalMaterial: hc,
    MeshStandardMaterial: da,
    MeshToonMaterial: dc,
    MinEquation: ll,
    MirroredRepeatWrapping: Nr,
    MixOperation: hf,
    MultiplyBlending: cl,
    MultiplyOperation: xa,
    NearestFilter: pt,
    NearestMipMapLinearFilter: Xx,
    NearestMipMapNearestFilter: Wx,
    NearestMipmapLinearFilter: Lr,
    NearestMipmapNearestFilter: fo,
    NeverCompare: Uf,
    NeverDepth: nf,
    NeverStencilFunc: sv,
    NoBlending: Dn,
    NoColorSpace: Xt,
    NoToneMapping: Nn,
    NormalAnimationBlendMode: Xc,
    NormalBlending: Wi,
    NotEqualCompare: Bf,
    NotEqualDepth: lf,
    NotEqualStencilFunc: lv,
    NumberKeyframeTrack: ts,
    Object3D: Je,
    ObjectLoader: pu,
    ObjectSpaceNormalMap: Lf,
    OctahedronGeometry: ha,
    OneFactor: Zd,
    OneMinusDstAlphaFactor: Qd,
    OneMinusDstColorFactor: ef,
    OneMinusSrcAlphaFactor: hd,
    OneMinusSrcColorFactor: $d,
    OrthographicCamera: Ls,
    P3Primaries: kr,
    PCFShadowMap: cd,
    PCFSoftShadowMap: Gd,
    PMREMGenerator: Kr,
    Path: ji,
    PerspectiveCamera: yt,
    Plane: mn,
    PlaneGeometry: $r,
    PlaneHelper: id,
    PointLight: wc,
    PointLightHelper: Xu,
    Points: Vo,
    PointsMaterial: na,
    PolarGridHelper: $u,
    PolyhedronGeometry: di,
    PositionalAudio: wu,
    PropertyBinding: Ke,
    PropertyMixer: Bc,
    QuadraticBezierCurve: ra,
    QuadraticBezierCurve3: aa,
    Quaternion: Ut,
    QuaternionKeyframeTrack: pi,
    QuaternionLinearInterpolant: yc,
    RED_GREEN_RGTC2_Format: Dl,
    RED_RGTC1_Format: Tf,
    REVISION: Hc,
    RGBADepthPacking: Pf,
    RGBAFormat: Wt,
    RGBAIntegerFormat: _d,
    RGBA_ASTC_10x10_Format: Rl,
    RGBA_ASTC_10x5_Format: Tl,
    RGBA_ASTC_10x6_Format: wl,
    RGBA_ASTC_10x8_Format: Al,
    RGBA_ASTC_12x10_Format: Cl,
    RGBA_ASTC_12x12_Format: Pl,
    RGBA_ASTC_4x4_Format: _l,
    RGBA_ASTC_5x4_Format: xl,
    RGBA_ASTC_5x5_Format: vl,
    RGBA_ASTC_6x5_Format: yl,
    RGBA_ASTC_6x6_Format: Ml,
    RGBA_ASTC_8x5_Format: Sl,
    RGBA_ASTC_8x6_Format: bl,
    RGBA_ASTC_8x8_Format: El,
    RGBA_BPTC_Format: Pa,
    RGBA_ETC2_EAC_Format: gl,
    RGBA_PVRTC_2BPPV1_Format: pl,
    RGBA_PVRTC_4BPPV1_Format: fl,
    RGBA_S3TC_DXT1_Format: Aa,
    RGBA_S3TC_DXT3_Format: Ra,
    RGBA_S3TC_DXT5_Format: Ca,
    RGB_BPTC_SIGNED_Format: Ll,
    RGB_BPTC_UNSIGNED_Format: Il,
    RGB_ETC1_Format: Ef,
    RGB_ETC2_Format: ml,
    RGB_PVRTC_2BPPV1_Format: dl,
    RGB_PVRTC_4BPPV1_Format: ul,
    RGB_S3TC_DXT1_Format: wa,
    RGFormat: bf,
    RGIntegerFormat: gd,
    RawShaderMaterial: lc,
    Ray: hi,
    Raycaster: Du,
    Rec709Primaries: Vr,
    RectAreaLight: Pc,
    RedFormat: Sf,
    RedIntegerFormat: md,
    ReinhardToneMapping: ff,
    RenderTarget: go,
    RepeatWrapping: Dr,
    ReplaceStencilOp: Qx,
    ReverseSubtractEquation: qd,
    RingGeometry: tc,
    SIGNED_RED_GREEN_RGTC2_Format: Nl,
    SIGNED_RED_RGTC1_Format: Ul,
    SRGBColorSpace: vt,
    SRGBTransfer: nt,
    Scene: Io,
    ShaderChunk: ke,
    ShaderLib: nn,
    ShaderMaterial: jt,
    ShadowMaterial: cc,
    Shape: Fn,
    ShapeGeometry: nc,
    ShapePath: od,
    ShapeUtils: yn,
    ShortType: xf,
    Skeleton: Oo,
    SkeletonHelper: Wu,
    SkinnedMesh: No,
    Source: In,
    Sphere: Yt,
    SphereGeometry: ua,
    Spherical: Ou,
    SphericalHarmonics3: Lc,
    SplineCurve: oa,
    SpotLight: Ec,
    SpotLightHelper: Gu,
    Sprite: Uo,
    SpriteMaterial: ea,
    SrcAlphaFactor: ld,
    SrcAlphaSaturateFactor: tf,
    SrcColorFactor: Jd,
    StaticCopyUsage: gv,
    StaticDrawUsage: Hr,
    StaticReadUsage: fv,
    StereoCamera: Mu,
    StreamCopyUsage: xv,
    StreamDrawUsage: dv,
    StreamReadUsage: mv,
    StringKeyframeTrack: kn,
    SubtractEquation: Xd,
    SubtractiveBlending: ol,
    TOUCH: Vx,
    TangentSpaceNormalMap: mi,
    TetrahedronGeometry: ic,
    Texture: St,
    TextureLoader: hu,
    TorusGeometry: sc,
    TorusKnotGeometry: rc,
    Triangle: Un,
    TriangleFanDrawMode: $x,
    TriangleStripDrawMode: Jx,
    TrianglesDrawMode: Zx,
    TubeGeometry: ac,
    TwoPassDoubleSide: Gx,
    UVMapping: Gc,
    Uint16BufferAttribute: Zr,
    Uint32BufferAttribute: Jr,
    Uint8BufferAttribute: jl,
    Uint8ClampedBufferAttribute: eh,
    Uniform: Pu,
    UniformsGroup: Lu,
    UniformsLib: le,
    UniformsUtils: xp,
    UnsignedByteType: On,
    UnsignedInt248Type: ii,
    UnsignedIntType: Ln,
    UnsignedShort4444Type: fd,
    UnsignedShort5551Type: pd,
    UnsignedShortType: Wc,
    VSMShadowMap: pn,
    Vector2: Z,
    Vector3: A,
    Vector4: je,
    VectorKeyframeTrack: ns,
    VideoTexture: Jh,
    WebGL1Renderer: Co,
    WebGL3DRenderTarget: Hl,
    WebGLArrayRenderTarget: kl,
    WebGLCoordinateSystem: vn,
    WebGLCubeRenderTarget: xo,
    WebGLMultipleRenderTargets: Gl,
    WebGLRenderTarget: qt,
    WebGLRenderer: Ro,
    WebGLUtils: V0,
    WebGPUCoordinateSystem: Gr,
    WireframeGeometry: oc,
    WrapAroundEnding: Br,
    ZeroCurvatureEnding: zi,
    ZeroFactor: Yd,
    ZeroSlopeEnding: Vi,
    ZeroStencilOp: Kx,
    _SRGBAFormat: po,
    createCanvasElement: tp,
    sRGBEncoding: ri
};
function getWebGLErrorMessage() {
    return getErrorMessage(1);
}
function getErrorMessage(version) {
    var names = {
        1: "WebGL",
        2: "WebGL 2"
    };
    var contexts = {
        1: window.WebGLRenderingContext,
        2: window.WebGL2RenderingContext
    };
    var message = 'Your $0 does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">$1</a>';
    var element = document.createElement("div");
    element.id = "webglmessage";
    element.style.fontFamily = "monospace";
    element.style.fontSize = "13px";
    element.style.fontWeight = "normal";
    element.style.textAlign = "center";
    element.style.background = "#fff";
    element.style.color = "#000";
    element.style.padding = "1.5em";
    element.style.width = "400px";
    element.style.margin = "5em auto 0";
    if (contexts[version]) {
        message = message.replace("$0", "graphics card");
    } else {
        message = message.replace("$0", "browser");
    }
    message = message.replace("$1", names[version]);
    element.innerHTML = message;
    return element;
}
function typedarray_to_vectype(typedArray, ndim) {
    if (ndim === 1) {
        return "float";
    } else if (typedArray instanceof Float32Array) {
        return "vec" + ndim;
    } else if (typedArray instanceof Int32Array) {
        return "ivec" + ndim;
    } else if (typedArray instanceof Uint32Array) {
        return "uvec" + ndim;
    } else {
        return;
    }
}
function attribute_type(attribute) {
    if (attribute) {
        return typedarray_to_vectype(attribute.array, attribute.itemSize);
    } else {
        return;
    }
}
function uniform_type(obj) {
    if (obj instanceof THREE.Uniform) {
        return uniform_type(obj.value);
    } else if (typeof obj === "number") {
        return "float";
    } else if (typeof obj === "boolean") {
        return "bool";
    } else if (obj instanceof THREE.Vector2) {
        return "vec2";
    } else if (obj instanceof THREE.Vector3) {
        return "vec3";
    } else if (obj instanceof THREE.Vector4) {
        return "vec4";
    } else if (obj instanceof THREE.Color) {
        return "vec4";
    } else if (obj instanceof THREE.Matrix3) {
        return "mat3";
    } else if (obj instanceof THREE.Matrix4) {
        return "mat4";
    } else if (obj instanceof THREE.Texture) {
        return "sampler2D";
    } else {
        return;
    }
}
function uniforms_to_type_declaration(uniform_dict) {
    let result = "";
    for(const name in uniform_dict){
        const uniform = uniform_dict[name];
        const type = uniform_type(uniform);
        result += `uniform ${type} ${name};\n`;
    }
    return result;
}
function attributes_to_type_declaration(attributes_dict) {
    let result = "";
    for(const name in attributes_dict){
        const attribute = attributes_dict[name];
        const type = attribute_type(attribute);
        result += `in ${type} ${name};\n`;
    }
    return result;
}
const _changeEvent = {
    type: "change"
};
const _startEvent = {
    type: "start"
};
const _endEvent = {
    type: "end"
};
const _ray = new hi();
const _plane = new mn();
const TILT_LIMIT = Math.cos(70 * yv.DEG2RAD);
class OrbitControls extends sn {
    constructor(object, domElement, allow_update, is_in_scene){
        super();
        this.object = object;
        this.domElement = domElement;
        this.domElement.style.touchAction = "none";
        this.enabled = true;
        this.target = new A();
        this.cursor = new A();
        this.minDistance = 0;
        this.maxDistance = Infinity;
        this.minZoom = 0;
        this.maxZoom = Infinity;
        this.minTargetRadius = 0;
        this.maxTargetRadius = Infinity;
        this.minPolarAngle = 0;
        this.maxPolarAngle = Math.PI;
        this.minAzimuthAngle = -Infinity;
        this.maxAzimuthAngle = Infinity;
        this.enableDamping = false;
        this.dampingFactor = 0.05;
        this.enableZoom = true;
        this.zoomSpeed = 1.0;
        this.enableRotate = true;
        this.rotateSpeed = 1.0;
        this.enablePan = true;
        this.panSpeed = 1.0;
        this.screenSpacePanning = true;
        this.keyPanSpeed = 7.0;
        this.zoomToCursor = false;
        this.autoRotate = false;
        this.autoRotateSpeed = 2.0;
        this.keys = {
            LEFT: "ArrowLeft",
            UP: "ArrowUp",
            RIGHT: "ArrowRight",
            BOTTOM: "ArrowDown"
        };
        this.mouseButtons = {
            LEFT: zx.ROTATE,
            MIDDLE: zx.DOLLY,
            RIGHT: zx.PAN
        };
        this.touches = {
            ONE: Vx.ROTATE,
            TWO: Vx.DOLLY_PAN
        };
        this.target0 = this.target.clone();
        this.position0 = this.object.position.clone();
        this.zoom0 = this.object.zoom;
        this._domElementKeyEvents = null;
        this.getPolarAngle = function() {
            return spherical.phi;
        };
        this.getAzimuthalAngle = function() {
            return spherical.theta;
        };
        this.getDistance = function() {
            return this.object.position.distanceTo(this.target);
        };
        this.listenToKeyEvents = function(domElement) {
            domElement.addEventListener("keydown", onKeyDown);
            this._domElementKeyEvents = domElement;
        };
        this.stopListenToKeyEvents = function() {
            this._domElementKeyEvents.removeEventListener("keydown", onKeyDown);
            this._domElementKeyEvents = null;
        };
        this.saveState = function() {
            scope.target0.copy(scope.target);
            scope.position0.copy(scope.object.position);
            scope.zoom0 = scope.object.zoom;
        };
        this.reset = function() {
            scope.target.copy(scope.target0);
            scope.object.position.copy(scope.position0);
            scope.object.zoom = scope.zoom0;
            scope.object.updateProjectionMatrix();
            scope.dispatchEvent(_changeEvent);
            scope.update();
            state = STATE.NONE;
        };
        this.update = function() {
            const offset = new A();
            const quat = new Ut().setFromUnitVectors(object.up, new A(0, 1, 0));
            const quatInverse = quat.clone().invert();
            const lastPosition = new A();
            const lastQuaternion = new Ut();
            const lastTargetPosition = new A();
            const twoPI = 2 * Math.PI;
            return function update(deltaTime = null) {
                if (!allow_update()) {
                    return;
                }
                const position = scope.object.position;
                offset.copy(position).sub(scope.target);
                offset.applyQuaternion(quat);
                spherical.setFromVector3(offset);
                if (scope.autoRotate && state === STATE.NONE) {
                    rotateLeft(getAutoRotationAngle(deltaTime));
                }
                if (scope.enableDamping) {
                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;
                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;
                } else {
                    spherical.theta += sphericalDelta.theta;
                    spherical.phi += sphericalDelta.phi;
                }
                let min = scope.minAzimuthAngle;
                let max = scope.maxAzimuthAngle;
                if (isFinite(min) && isFinite(max)) {
                    if (min < -Math.PI) min += twoPI;
                    else if (min > Math.PI) min -= twoPI;
                    if (max < -Math.PI) max += twoPI;
                    else if (max > Math.PI) max -= twoPI;
                    if (min <= max) {
                        spherical.theta = Math.max(min, Math.min(max, spherical.theta));
                    } else {
                        spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);
                    }
                }
                spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
                spherical.makeSafe();
                if (scope.enableDamping === true) {
                    scope.target.addScaledVector(panOffset, scope.dampingFactor);
                } else {
                    scope.target.add(panOffset);
                }
                scope.target.sub(scope.cursor);
                scope.target.clampLength(scope.minTargetRadius, scope.maxTargetRadius);
                scope.target.add(scope.cursor);
                if (scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera) {
                    spherical.radius = clampDistance(spherical.radius);
                } else {
                    spherical.radius = clampDistance(spherical.radius * scale);
                }
                offset.setFromSpherical(spherical);
                offset.applyQuaternion(quatInverse);
                position.copy(scope.target).add(offset);
                scope.object.lookAt(scope.target);
                if (scope.enableDamping === true) {
                    sphericalDelta.theta *= 1 - scope.dampingFactor;
                    sphericalDelta.phi *= 1 - scope.dampingFactor;
                    panOffset.multiplyScalar(1 - scope.dampingFactor);
                } else {
                    sphericalDelta.set(0, 0, 0);
                    panOffset.set(0, 0, 0);
                }
                let zoomChanged = false;
                if (scope.zoomToCursor && performCursorZoom) {
                    let newRadius = null;
                    if (scope.object.isPerspectiveCamera) {
                        const prevRadius = offset.length();
                        newRadius = clampDistance(prevRadius * scale);
                        const radiusDelta = prevRadius - newRadius;
                        scope.object.position.addScaledVector(dollyDirection, radiusDelta);
                        scope.object.updateMatrixWorld();
                    } else if (scope.object.isOrthographicCamera) {
                        const mouseBefore = new A(mouse.x, mouse.y, 0);
                        mouseBefore.unproject(scope.object);
                        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));
                        scope.object.updateProjectionMatrix();
                        zoomChanged = true;
                        const mouseAfter = new A(mouse.x, mouse.y, 0);
                        mouseAfter.unproject(scope.object);
                        scope.object.position.sub(mouseAfter).add(mouseBefore);
                        scope.object.updateMatrixWorld();
                        newRadius = offset.length();
                    } else {
                        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.");
                        scope.zoomToCursor = false;
                    }
                    if (newRadius !== null) {
                        if (this.screenSpacePanning) {
                            scope.target.set(0, 0, -1).transformDirection(scope.object.matrix).multiplyScalar(newRadius).add(scope.object.position);
                        } else {
                            _ray.origin.copy(scope.object.position);
                            _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix);
                            if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {
                                object.lookAt(scope.target);
                            } else {
                                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target);
                                _ray.intersectPlane(_plane, scope.target);
                            }
                        }
                    }
                } else if (scope.object.isOrthographicCamera) {
                    scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));
                    scope.object.updateProjectionMatrix();
                    zoomChanged = true;
                }
                scale = 1;
                performCursorZoom = false;
                if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS || lastTargetPosition.distanceToSquared(scope.target) > 0) {
                    scope.dispatchEvent(_changeEvent);
                    lastPosition.copy(scope.object.position);
                    lastQuaternion.copy(scope.object.quaternion);
                    lastTargetPosition.copy(scope.target);
                    zoomChanged = false;
                    return true;
                }
                return false;
            };
        }();
        this.dispose = function() {
            scope.domElement.removeEventListener("contextmenu", onContextMenu);
            scope.domElement.removeEventListener("pointerdown", onPointerDown);
            scope.domElement.removeEventListener("pointercancel", onPointerUp);
            scope.domElement.removeEventListener("wheel", onMouseWheel);
            scope.domElement.removeEventListener("pointermove", onPointerMove);
            scope.domElement.removeEventListener("pointerup", onPointerUp);
            if (scope._domElementKeyEvents !== null) {
                scope._domElementKeyEvents.removeEventListener("keydown", onKeyDown);
                scope._domElementKeyEvents = null;
            }
        };
        const scope = this;
        const STATE = {
            NONE: -1,
            ROTATE: 0,
            DOLLY: 1,
            PAN: 2,
            TOUCH_ROTATE: 3,
            TOUCH_PAN: 4,
            TOUCH_DOLLY_PAN: 5,
            TOUCH_DOLLY_ROTATE: 6
        };
        let state = STATE.NONE;
        const EPS = 0.000001;
        const spherical = new Ou();
        const sphericalDelta = new Ou();
        let scale = 1;
        const panOffset = new A();
        const rotateStart = new Z();
        const rotateEnd = new Z();
        const rotateDelta = new Z();
        const panStart = new Z();
        const panEnd = new Z();
        const panDelta = new Z();
        const dollyStart = new Z();
        const dollyEnd = new Z();
        const dollyDelta = new Z();
        const dollyDirection = new A();
        const mouse = new Z();
        let performCursorZoom = false;
        const pointers = [];
        const pointerPositions = {};
        function getAutoRotationAngle(deltaTime) {
            if (deltaTime !== null) {
                return 2 * Math.PI / 60 * scope.autoRotateSpeed * deltaTime;
            } else {
                return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
            }
        }
        function getZoomScale() {
            return Math.pow(0.95, scope.zoomSpeed);
        }
        function rotateLeft(angle) {
            sphericalDelta.theta -= angle;
        }
        function rotateUp(angle) {
            sphericalDelta.phi -= angle;
        }
        const panLeft = function() {
            const v = new A();
            return function panLeft(distance, objectMatrix) {
                v.setFromMatrixColumn(objectMatrix, 0);
                v.multiplyScalar(-distance);
                panOffset.add(v);
            };
        }();
        const panUp = function() {
            const v = new A();
            return function panUp(distance, objectMatrix) {
                if (scope.screenSpacePanning === true) {
                    v.setFromMatrixColumn(objectMatrix, 1);
                } else {
                    v.setFromMatrixColumn(objectMatrix, 0);
                    v.crossVectors(scope.object.up, v);
                }
                v.multiplyScalar(distance);
                panOffset.add(v);
            };
        }();
        const pan = function() {
            const offset = new A();
            return function pan(deltaX, deltaY) {
                const element = scope.domElement;
                if (scope.object.isPerspectiveCamera) {
                    const position = scope.object.position;
                    offset.copy(position).sub(scope.target);
                    let targetDistance = offset.length();
                    targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);
                    panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
                    panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
                } else if (scope.object.isOrthographicCamera) {
                    panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
                    panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
                } else {
                    console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
                    scope.enablePan = false;
                }
            };
        }();
        function dollyOut(dollyScale) {
            if (scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera) {
                scale /= dollyScale;
            } else {
                console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
                scope.enableZoom = false;
            }
        }
        function dollyIn(dollyScale) {
            if (scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera) {
                scale *= dollyScale;
            } else {
                console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
                scope.enableZoom = false;
            }
        }
        function updateMouseParameters(event) {
            if (!scope.zoomToCursor) {
                return;
            }
            performCursorZoom = true;
            const rect = scope.domElement.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            const w = rect.width;
            const h = rect.height;
            mouse.x = x / w * 2 - 1;
            mouse.y = -(y / h) * 2 + 1;
            dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize();
        }
        function clampDistance(dist) {
            return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));
        }
        function handleMouseDownRotate(event) {
            rotateStart.set(event.clientX, event.clientY);
        }
        function handleMouseDownDolly(event) {
            updateMouseParameters(event);
            dollyStart.set(event.clientX, event.clientY);
        }
        function handleMouseDownPan(event) {
            panStart.set(event.clientX, event.clientY);
        }
        function handleMouseMoveRotate(event) {
            rotateEnd.set(event.clientX, event.clientY);
            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
            const element = scope.domElement;
            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
            rotateStart.copy(rotateEnd);
            scope.update();
        }
        function handleMouseMoveDolly(event) {
            dollyEnd.set(event.clientX, event.clientY);
            dollyDelta.subVectors(dollyEnd, dollyStart);
            if (dollyDelta.y > 0) {
                dollyOut(getZoomScale());
            } else if (dollyDelta.y < 0) {
                dollyIn(getZoomScale());
            }
            dollyStart.copy(dollyEnd);
            scope.update();
        }
        function handleMouseMovePan(event) {
            panEnd.set(event.clientX, event.clientY);
            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
            pan(panDelta.x, panDelta.y);
            panStart.copy(panEnd);
            scope.update();
        }
        function handleMouseWheel(event) {
            updateMouseParameters(event);
            if (event.deltaY < 0) {
                dollyIn(getZoomScale());
            } else if (event.deltaY > 0) {
                dollyOut(getZoomScale());
            }
            scope.update();
        }
        function handleKeyDown(event) {
            let needsUpdate = false;
            switch(event.code){
                case scope.keys.UP:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        rotateUp(2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    } else {
                        pan(0, scope.keyPanSpeed);
                    }
                    needsUpdate = true;
                    break;
                case scope.keys.BOTTOM:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        rotateUp(-2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    } else {
                        pan(0, -scope.keyPanSpeed);
                    }
                    needsUpdate = true;
                    break;
                case scope.keys.LEFT:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        rotateLeft(2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    } else {
                        pan(scope.keyPanSpeed, 0);
                    }
                    needsUpdate = true;
                    break;
                case scope.keys.RIGHT:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        rotateLeft(-2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                    } else {
                        pan(-scope.keyPanSpeed, 0);
                    }
                    needsUpdate = true;
                    break;
            }
            if (needsUpdate) {
                event.preventDefault();
                scope.update();
            }
        }
        function handleTouchStartRotate() {
            if (pointers.length === 1) {
                rotateStart.set(pointers[0].pageX, pointers[0].pageY);
            } else {
                const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
                const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
                rotateStart.set(x, y);
            }
        }
        function handleTouchStartPan() {
            if (pointers.length === 1) {
                panStart.set(pointers[0].pageX, pointers[0].pageY);
            } else {
                const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
                const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
                panStart.set(x, y);
            }
        }
        function handleTouchStartDolly() {
            const dx = pointers[0].pageX - pointers[1].pageX;
            const dy = pointers[0].pageY - pointers[1].pageY;
            const distance = Math.sqrt(dx * dx + dy * dy);
            dollyStart.set(0, distance);
        }
        function handleTouchStartDollyPan() {
            if (scope.enableZoom) handleTouchStartDolly();
            if (scope.enablePan) handleTouchStartPan();
        }
        function handleTouchStartDollyRotate() {
            if (scope.enableZoom) handleTouchStartDolly();
            if (scope.enableRotate) handleTouchStartRotate();
        }
        function handleTouchMoveRotate(event) {
            if (pointers.length == 1) {
                rotateEnd.set(event.pageX, event.pageY);
            } else {
                const position = getSecondPointerPosition(event);
                const x = 0.5 * (event.pageX + position.x);
                const y = 0.5 * (event.pageY + position.y);
                rotateEnd.set(x, y);
            }
            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
            const element = scope.domElement;
            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
            rotateStart.copy(rotateEnd);
        }
        function handleTouchMovePan(event) {
            if (pointers.length === 1) {
                panEnd.set(event.pageX, event.pageY);
            } else {
                const position = getSecondPointerPosition(event);
                const x = 0.5 * (event.pageX + position.x);
                const y = 0.5 * (event.pageY + position.y);
                panEnd.set(x, y);
            }
            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
            pan(panDelta.x, panDelta.y);
            panStart.copy(panEnd);
        }
        function handleTouchMoveDolly(event) {
            const position = getSecondPointerPosition(event);
            const dx = event.pageX - position.x;
            const dy = event.pageY - position.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            dollyEnd.set(0, distance);
            dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));
            dollyOut(dollyDelta.y);
            dollyStart.copy(dollyEnd);
        }
        function handleTouchMoveDollyPan(event) {
            if (scope.enableZoom) handleTouchMoveDolly(event);
            if (scope.enablePan) handleTouchMovePan(event);
        }
        function handleTouchMoveDollyRotate(event) {
            if (scope.enableZoom) handleTouchMoveDolly(event);
            if (scope.enableRotate) handleTouchMoveRotate(event);
        }
        function onPointerDown(event) {
            if (scope.enabled === false) return;
            if (pointers.length === 0) {
                scope.domElement.setPointerCapture(event.pointerId);
                scope.domElement.addEventListener("pointermove", onPointerMove);
                scope.domElement.addEventListener("pointerup", onPointerUp);
            }
            addPointer(event);
            if (event.pointerType === "touch") {
                onTouchStart(event);
            } else {
                onMouseDown(event);
            }
        }
        function onPointerMove(event) {
            if (scope.enabled === false) return;
            if (!is_in_scene(event)) return;
            if (event.pointerType === "touch") {
                onTouchMove(event);
            } else {
                onMouseMove(event);
            }
        }
        function onPointerUp(event) {
            removePointer(event);
            if (pointers.length === 0) {
                scope.domElement.releasePointerCapture(event.pointerId);
                scope.domElement.removeEventListener("pointermove", onPointerMove);
                scope.domElement.removeEventListener("pointerup", onPointerUp);
            }
            scope.dispatchEvent(_endEvent);
            state = STATE.NONE;
        }
        function onMouseDown(event) {
            let mouseAction;
            switch(event.button){
                case 0:
                    mouseAction = scope.mouseButtons.LEFT;
                    break;
                case 1:
                    mouseAction = scope.mouseButtons.MIDDLE;
                    break;
                case 2:
                    mouseAction = scope.mouseButtons.RIGHT;
                    break;
                default:
                    mouseAction = -1;
            }
            switch(mouseAction){
                case zx.DOLLY:
                    if (scope.enableZoom === false) return;
                    handleMouseDownDolly(event);
                    state = STATE.DOLLY;
                    break;
                case zx.ROTATE:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        if (scope.enablePan === false) return;
                        handleMouseDownPan(event);
                        state = STATE.PAN;
                    } else {
                        if (scope.enableRotate === false) return;
                        handleMouseDownRotate(event);
                        state = STATE.ROTATE;
                    }
                    break;
                case zx.PAN:
                    if (event.ctrlKey || event.metaKey || event.shiftKey) {
                        if (scope.enableRotate === false) return;
                        handleMouseDownRotate(event);
                        state = STATE.ROTATE;
                    } else {
                        if (scope.enablePan === false) return;
                        handleMouseDownPan(event);
                        state = STATE.PAN;
                    }
                    break;
                default:
                    state = STATE.NONE;
            }
            if (state !== STATE.NONE) {
                scope.dispatchEvent(_startEvent);
            }
        }
        function onMouseMove(event) {
            switch(state){
                case STATE.ROTATE:
                    if (scope.enableRotate === false) return;
                    handleMouseMoveRotate(event);
                    break;
                case STATE.DOLLY:
                    if (scope.enableZoom === false) return;
                    handleMouseMoveDolly(event);
                    break;
                case STATE.PAN:
                    if (scope.enablePan === false) return;
                    handleMouseMovePan(event);
                    break;
            }
        }
        function onMouseWheel(event) {
            if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE || !is_in_scene(event)) return;
            event.preventDefault();
            scope.dispatchEvent(_startEvent);
            handleMouseWheel(event);
            scope.dispatchEvent(_endEvent);
        }
        function onKeyDown(event) {
            if (scope.enabled === false || scope.enablePan === false) return;
            handleKeyDown(event);
        }
        function onTouchStart(event) {
            trackPointer(event);
            switch(pointers.length){
                case 1:
                    switch(scope.touches.ONE){
                        case Vx.ROTATE:
                            if (scope.enableRotate === false) return;
                            handleTouchStartRotate();
                            state = STATE.TOUCH_ROTATE;
                            break;
                        case Vx.PAN:
                            if (scope.enablePan === false) return;
                            handleTouchStartPan();
                            state = STATE.TOUCH_PAN;
                            break;
                        default:
                            state = STATE.NONE;
                    }
                    break;
                case 2:
                    switch(scope.touches.TWO){
                        case Vx.DOLLY_PAN:
                            if (scope.enableZoom === false && scope.enablePan === false) return;
                            handleTouchStartDollyPan();
                            state = STATE.TOUCH_DOLLY_PAN;
                            break;
                        case Vx.DOLLY_ROTATE:
                            if (scope.enableZoom === false && scope.enableRotate === false) return;
                            handleTouchStartDollyRotate();
                            state = STATE.TOUCH_DOLLY_ROTATE;
                            break;
                        default:
                            state = STATE.NONE;
                    }
                    break;
                default:
                    state = STATE.NONE;
            }
            if (state !== STATE.NONE) {
                scope.dispatchEvent(_startEvent);
            }
        }
        function onTouchMove(event) {
            trackPointer(event);
            switch(state){
                case STATE.TOUCH_ROTATE:
                    if (scope.enableRotate === false) return;
                    handleTouchMoveRotate(event);
                    scope.update();
                    break;
                case STATE.TOUCH_PAN:
                    if (scope.enablePan === false) return;
                    handleTouchMovePan(event);
                    scope.update();
                    break;
                case STATE.TOUCH_DOLLY_PAN:
                    if (scope.enableZoom === false && scope.enablePan === false) return;
                    handleTouchMoveDollyPan(event);
                    scope.update();
                    break;
                case STATE.TOUCH_DOLLY_ROTATE:
                    if (scope.enableZoom === false && scope.enableRotate === false) return;
                    handleTouchMoveDollyRotate(event);
                    scope.update();
                    break;
                default:
                    state = STATE.NONE;
            }
        }
        function onContextMenu(event) {
            if (scope.enabled === false) return;
            event.preventDefault();
        }
        function addPointer(event) {
            pointers.push(event);
        }
        function removePointer(event) {
            delete pointerPositions[event.pointerId];
            for(let i = 0; i < pointers.length; i++){
                if (pointers[i].pointerId == event.pointerId) {
                    pointers.splice(i, 1);
                    return;
                }
            }
        }
        function trackPointer(event) {
            let position = pointerPositions[event.pointerId];
            if (position === undefined) {
                position = new Z();
                pointerPositions[event.pointerId] = position;
            }
            position.set(event.pageX, event.pageY);
        }
        function getSecondPointerPosition(event) {
            const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];
            return pointerPositions[pointer.pointerId];
        }
        scope.domElement.addEventListener("contextmenu", onContextMenu);
        scope.domElement.addEventListener("pointerdown", onPointerDown);
        scope.domElement.addEventListener("pointercancel", onPointerUp);
        scope.domElement.addEventListener("wheel", onMouseWheel, {
            passive: false
        });
        this.update();
    }
}
function events2unitless(screen, event) {
    const { canvas , winscale , renderer  } = screen;
    const rect = canvas.getBoundingClientRect();
    const x = (event.clientX - rect.left) / winscale;
    const y = (event.clientY - rect.top) / winscale;
    return [
        x,
        renderer._height - y
    ];
}
function Identity4x4() {
    return new ze();
}
function in_scene(scene, mouse_event) {
    const [x, y] = events2unitless(scene.screen, mouse_event);
    const [sx, sy, sw, sh] = scene.viewport.value;
    return x >= sx && x < sx + sw && y >= sy && y < sy + sh;
}
function attach_3d_camera(canvas, makie_camera, cam3d, light_dir, scene) {
    if (cam3d === undefined) {
        return;
    }
    const [w, h] = makie_camera.resolution.value;
    const camera = new yt(cam3d.fov.value, w / h, 0.01, 100.0);
    const center = new A(...cam3d.lookat.value);
    camera.up = new A(...cam3d.upvector.value);
    camera.position.set(...cam3d.eyeposition.value);
    camera.lookAt(center);
    const use_orbit_cam = ()=>!(Bonito.can_send_to_julia && Bonito.can_send_to_julia());
    const controls = new OrbitControls(camera, canvas, use_orbit_cam, (e)=>in_scene(scene, e));
    controls.addEventListener("change", (e)=>{
        const view = camera.matrixWorldInverse;
        const projection = camera.projectionMatrix;
        const [width, height] = cam3d.resolution.value;
        const [x, y, z] = camera.position;
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
        camera.updateWorldMatrix();
        makie_camera.update_matrices(view.elements, projection.elements, [
            width,
            height
        ], [
            x,
            y,
            z
        ]);
        makie_camera.update_light_dir(light_dir.value);
    });
}
function mul(a, b) {
    return b.clone().multiply(a);
}
function orthographicprojection(left, right, bottom, top, znear, zfar) {
    return [
        2 / (right - left),
        0,
        0,
        0,
        0,
        2 / (top - bottom),
        0,
        0,
        0,
        0,
        -2 / (zfar - znear),
        0,
        -(right + left) / (right - left),
        -(top + bottom) / (top - bottom),
        -(zfar + znear) / (zfar - znear),
        1
    ];
}
function pixel_space_inverse(w, h, near) {
    return [
        0.5 * w,
        0,
        0,
        0,
        0,
        0.5 * h,
        0,
        0,
        0,
        0,
        near,
        0,
        0.5 * w,
        0.5 * h,
        0,
        1
    ];
}
function relative_space() {
    const relative = Identity4x4();
    relative.fromArray([
        2,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        1,
        0,
        -1,
        -1,
        0,
        1
    ]);
    return relative;
}
class MakieCamera {
    constructor(){
        this.view = new Pu(Identity4x4());
        this.projection = new Pu(Identity4x4());
        this.projectionview = new Pu(Identity4x4());
        this.pixel_space = new Pu(Identity4x4());
        this.pixel_space_inverse = new Pu(Identity4x4());
        this.projectionview_inverse = new Pu(Identity4x4());
        this.relative_space = new Pu(relative_space());
        this.relative_inverse = new Pu(relative_space().invert());
        this.clip_space = new Pu(Identity4x4());
        this.resolution = new Pu(new Z());
        this.eyeposition = new Pu(new A());
        this.preprojections = {};
        this.light_direction = new Pu(new A(-1, -1, -1).normalize());
    }
    calculate_matrices() {
        const [w, h] = this.resolution.value;
        const nearclip = -10_000;
        this.pixel_space.value.fromArray(orthographicprojection(0, w, 0, h, nearclip, 10_000));
        this.pixel_space_inverse.value.fromArray(pixel_space_inverse(w, h, nearclip));
        const proj_view = mul(this.view.value, this.projection.value);
        this.projectionview.value = proj_view;
        this.projectionview_inverse.value = proj_view.clone().invert();
        Object.keys(this.preprojections).forEach((key)=>{
            const [space, markerspace] = key.split(",");
            this.preprojections[key].value = this.calculate_preprojection_matrix(space, markerspace);
        });
    }
    update_matrices(view, projection, resolution, eyepos) {
        this.view.value.fromArray(view);
        this.projection.value.fromArray(projection);
        this.resolution.value.fromArray(resolution);
        this.eyeposition.value.fromArray(eyepos);
        this.calculate_matrices();
        return;
    }
    update_light_dir(light_dir) {
        const T = new He().setFromMatrix4(this.view.value).invert();
        const new_dir = new A().fromArray(light_dir);
        new_dir.applyMatrix3(T).normalize();
        this.light_direction.value = new_dir;
    }
    clip_to_space(space) {
        if (space === "data") {
            return this.projectionview_inverse.value;
        } else if (space === "pixel") {
            return this.pixel_space_inverse.value;
        } else if (space === "relative") {
            return this.relative_inverse.value;
        } else if (space === "clip") {
            return this.clip_space.value;
        } else {
            throw new Error(`Space ${space} not recognized`);
        }
    }
    space_to_clip(space) {
        if (space === "data") {
            return this.projectionview.value;
        } else if (space === "pixel") {
            return this.pixel_space.value;
        } else if (space === "relative") {
            return this.relative_space.value;
        } else if (space === "clip") {
            return this.clip_space.value;
        } else {
            throw new Error(`Space ${space} not recognized`);
        }
    }
    calculate_preprojection_matrix(space, markerspace) {
        const cp = this.clip_to_space(markerspace);
        const sc = this.space_to_clip(space);
        return mul(sc, cp);
    }
    preprojection_matrix(space, markerspace) {
        const key = [
            space,
            markerspace
        ];
        const matrix_uniform = this.preprojections[key];
        if (matrix_uniform) {
            return matrix_uniform;
        } else {
            const matrix = this.calculate_preprojection_matrix(space, markerspace);
            const uniform = new Pu(matrix);
            this.preprojections[key] = uniform;
            return uniform;
        }
    }
}
const scene_cache = {};
function filter_by_key(dict, keys, default_value = false) {
    const result = {};
    keys.forEach((key)=>{
        const val = dict[key];
        if (val) {
            result[key] = val;
        } else {
            result[key] = default_value;
        }
    });
    return result;
}
const plot_cache = {};
const TEXTURE_ATLAS = [
    undefined
];
function add_scene(scene_id, three_scene) {
    scene_cache[scene_id] = three_scene;
}
function find_scene(scene_id) {
    return scene_cache[scene_id];
}
function delete_scene(scene_id) {
    const scene = scene_cache[scene_id];
    if (!scene) {
        return;
    }
    delete_three_scene(scene);
    while(scene.children.length > 0){
        scene.remove(scene.children[0]);
    }
    delete scene_cache[scene_id];
}
function find_plots(plot_uuids) {
    const plots = [];
    plot_uuids.forEach((id)=>{
        const plot = plot_cache[id];
        if (plot) {
            plots.push(plot);
        }
    });
    return plots;
}
function delete_scenes(scene_uuids, plot_uuids) {
    plot_uuids.forEach((plot_id)=>{
        const plot = plot_cache[plot_id];
        if (plot) {
            delete_plot(plot);
        }
    });
    scene_uuids.forEach((scene_id)=>{
        delete_scene(scene_id);
    });
}
function insert_plot(scene_id, plot_data) {
    const scene = find_scene(scene_id);
    plot_data.forEach((plot)=>{
        add_plot(scene, plot);
    });
}
function delete_plots(plot_uuids) {
    const plots = find_plots(plot_uuids);
    plots.forEach(delete_plot);
}
function convert_texture(scene, data) {
    const tex = create_texture(scene, data);
    tex.needsUpdate = true;
    tex.minFilter = mod[data.minFilter];
    tex.magFilter = mod[data.magFilter];
    tex.anisotropy = data.anisotropy;
    tex.wrapS = mod[data.wrapS];
    if (data.size.length > 1) {
        tex.wrapT = mod[data.wrapT];
    }
    if (data.size.length > 2) {
        tex.wrapR = mod[data.wrapR];
    }
    return tex;
}
function is_three_fixed_array(value) {
    return value instanceof mod.Vector2 || value instanceof mod.Vector3 || value instanceof mod.Vector4 || value instanceof mod.Matrix4;
}
function to_uniform(scene, data) {
    if (data.type !== undefined) {
        if (data.type == "Sampler") {
            return convert_texture(scene, data);
        }
        throw new Error(`Type ${data.type} not known`);
    }
    if (Array.isArray(data) || ArrayBuffer.isView(data)) {
        if (!data.every((x)=>typeof x === "number")) {
            return data;
        }
        if (data.length == 2) {
            return new mod.Vector2().fromArray(data);
        }
        if (data.length == 3) {
            return new mod.Vector3().fromArray(data);
        }
        if (data.length == 4) {
            return new mod.Vector4().fromArray(data);
        }
        if (data.length == 16) {
            const mat = new mod.Matrix4();
            mat.fromArray(data);
            return mat;
        }
    }
    return data;
}
function deserialize_uniforms(scene, data) {
    const result = {};
    for(const name in data){
        const value = data[name];
        if (value instanceof mod.Uniform) {
            result[name] = value;
        } else {
            const ser = to_uniform(scene, value);
            result[name] = new mod.Uniform(ser);
        }
    }
    return result;
}
function linesegments_vertex_shader(uniforms, attributes) {
    const attribute_decl = attributes_to_type_declaration(attributes);
    const uniform_decl = uniforms_to_type_declaration(uniforms);
    const color = attribute_type(attributes.color_start) || uniform_type(uniforms.color_start);
    return `precision mediump int;
        precision highp float;

        ${attribute_decl}
        ${uniform_decl}
        uniform int is_segments_multi;

        out vec2 f_uv;
        out ${color} f_color;
        flat out uint frag_instance_id;

        vec2 get_resolution() {
            // 2 * px_per_unit doesn't make any sense, but works
            // TODO, figure out what's going on!
            return resolution / 2.0 * px_per_unit;
        }

        vec3 screen_space(vec3 point) {
            vec4 vertex = projectionview * model * vec4(point, 1);
            return vec3(vertex.xy * get_resolution(), vertex.z + vertex.w * depth_shift) / vertex.w;
        }

        vec3 screen_space(vec2 point) {
            return screen_space(vec3(point, 0));
        }

        void main() {
            vec3 p_a = screen_space(linepoint_start);
            vec3 p_b = screen_space(linepoint_end);
            float width = (px_per_unit * (position.x == 1.0 ? linewidth_end : linewidth_start));
            f_color = position.x == 1.0 ? color_end : color_start;
            f_uv = vec2(position.x, position.y + 0.5);

            vec2 pointA = p_a.xy;
            vec2 pointB = p_b.xy;

            vec2 xBasis = pointB - pointA;
            vec2 yBasis = normalize(vec2(-xBasis.y, xBasis.x));
            vec2 point = pointA + xBasis * position.x + yBasis * width * position.y;

            gl_Position = vec4(point.xy / get_resolution(), position.x == 1.0 ? p_b.z : p_a.z, 1.0);
            frag_instance_id = uint((gl_InstanceID * is_segments_multi) + int(position.x == 1.0));
        }
        `;
}
function lines_fragment_shader(uniforms, attributes) {
    const color = attribute_type(attributes.color_start) || uniform_type(uniforms.color_start);
    const color_uniforms = filter_by_key(uniforms, [
        "colorrange",
        "colormap",
        "nan_color",
        "highclip",
        "lowclip",
        "picking"
    ]);
    const uniform_decl = uniforms_to_type_declaration(color_uniforms);
    return `#extension GL_OES_standard_derivatives : enable

    precision mediump int;
    precision highp float;
    precision mediump sampler2D;
    precision mediump sampler3D;

    in vec2 f_uv;
    in ${color} f_color;
    ${uniform_decl}

    out vec4 fragment_color;

    // Half width of antialiasing smoothstep
    #define ANTIALIAS_RADIUS 0.7071067811865476

    vec4 get_color_from_cmap(float value, sampler2D colormap, vec2 colorrange) {
        float cmin = colorrange.x;
        float cmax = colorrange.y;
        if (value <= cmax && value >= cmin) {
            // in value range, continue!
        } else if (value < cmin) {
            return lowclip;
        } else if (value > cmax) {
            return highclip;
        } else {
            // isnan CAN be broken (of course) -.-
            // so if outside value range and not smaller/bigger min/max we assume NaN
            return nan_color;
        }
        float i01 = clamp((value - cmin) / (cmax - cmin), 0.0, 1.0);
        // 1/0 corresponds to the corner of the colormap, so to properly interpolate
        // between the colors, we need to scale it, so that the ends are at 1 - (stepsize/2) and 0+(stepsize/2).
        float stepsize = 1.0 / float(textureSize(colormap, 0));
        i01 = (1.0 - stepsize) * i01 + 0.5 * stepsize;
        return texture(colormap, vec2(i01, 0.0));
    }

    vec4 get_color(float color, sampler2D colormap, vec2 colorrange) {
        return get_color_from_cmap(color, colormap, colorrange);
    }

    vec4 get_color(vec4 color, bool colormap, bool colorrange) {
        return color;
    }
    vec4 get_color(vec3 color, bool colormap, bool colorrange) {
        return vec4(color, 1.0);
    }

    float aastep(float threshold, float value) {
        float afwidth = length(vec2(dFdx(value), dFdy(value))) * ANTIALIAS_RADIUS;
        return smoothstep(threshold-afwidth, threshold+afwidth, value);
    }

    float aastep(float threshold1, float threshold2, float dist) {
        return aastep(threshold1, dist) * aastep(threshold2, 1.0 - dist);
    }

    flat in uint frag_instance_id;
    uniform uint object_id;

    vec4 pack_int(uint id, uint index) {
        vec4 unpack;
        unpack.x = float((id & uint(0xff00)) >> 8) / 255.0;
        unpack.y = float((id & uint(0x00ff)) >> 0) / 255.0;
        unpack.z = float((index & uint(0xff00)) >> 8) / 255.0;
        unpack.w = float((index & uint(0x00ff)) >> 0) / 255.0;
        return unpack;
    }
    void main(){

        float xalpha = aastep(0.0, 0.0, f_uv.x);
        float yalpha = aastep(0.0, 0.0, f_uv.y);
        vec4 color = get_color(f_color, colormap, colorrange);
        if (picking) {
            if (color.a > 0.1) {
                fragment_color = pack_int(object_id, frag_instance_id);
            }
            return;
        }
        fragment_color = vec4(color.rgb, color.a);
    }
    `;
}
function create_line_material(scene, uniforms, attributes) {
    const uniforms_des = deserialize_uniforms(scene, uniforms);
    const mat = new THREE.RawShaderMaterial({
        uniforms: uniforms_des,
        glslVersion: THREE.GLSL3,
        vertexShader: linesegments_vertex_shader(uniforms_des, attributes),
        fragmentShader: lines_fragment_shader(uniforms_des, attributes),
        transparent: true
    });
    mat.uniforms.object_id = {
        value: 1
    };
    return mat;
}
function attach_interleaved_line_buffer(attr_name, geometry, points, ndim, is_segments) {
    const skip_elems = is_segments ? 2 * ndim : ndim;
    const buffer = new THREE.InstancedInterleavedBuffer(points, skip_elems, 1);
    geometry.setAttribute(attr_name + "_start", new THREE.InterleavedBufferAttribute(buffer, ndim, 0));
    geometry.setAttribute(attr_name + "_end", new THREE.InterleavedBufferAttribute(buffer, ndim, ndim));
    return buffer;
}
function create_line_instance_geometry() {
    const geometry = new THREE.InstancedBufferGeometry();
    const instance_positions = [
        0,
        -0.5,
        1,
        -0.5,
        1,
        0.5,
        0,
        -0.5,
        1,
        0.5,
        0,
        0.5
    ];
    geometry.setAttribute("position", new THREE.Float32BufferAttribute(instance_positions, 2));
    geometry.boundingSphere = new THREE.Sphere();
    geometry.boundingSphere.radius = 10000000000000;
    geometry.frustumCulled = false;
    return geometry;
}
function create_line_buffer(geometry, buffers, name, attr, is_segments) {
    const flat_buffer = attr.value.flat;
    const ndims = attr.value.type_length;
    const linebuffer = attach_interleaved_line_buffer(name, geometry, flat_buffer, ndims, is_segments);
    buffers[name] = linebuffer;
    return flat_buffer;
}
function create_line_buffers(geometry, buffers, attributes, is_segments) {
    for(let name in attributes){
        const attr = attributes[name];
        create_line_buffer(geometry, buffers, name, attr, is_segments);
    }
}
function attach_updates(mesh, buffers, attributes, is_segments) {
    let geometry = mesh.geometry;
    for(let name in attributes){
        const attr = attributes[name];
        attr.on((new_points)=>{
            let buff = buffers[name];
            const ndims = new_points.type_length;
            const new_line_points = new_points.flat;
            const old_count = buff.array.length;
            const new_count = new_line_points.length / ndims;
            if (old_count < new_line_points.length) {
                mesh.geometry.dispose();
                geometry = create_line_instance_geometry();
                buff = attach_interleaved_line_buffer(name, geometry, new_line_points, ndims, is_segments);
                mesh.geometry = geometry;
                buffers[name] = buff;
            } else {
                buff.set(new_line_points);
            }
            const ls_factor = is_segments ? 2 : 1;
            const offset = is_segments ? 0 : 1;
            mesh.geometry.instanceCount = Math.max(0, new_count / ls_factor - offset);
            buff.needsUpdate = true;
            mesh.needsUpdate = true;
        });
    }
}
function _create_line(scene, line_data, is_segments) {
    const geometry = create_line_instance_geometry();
    const buffers = {};
    create_line_buffers(geometry, buffers, line_data.attributes, is_segments);
    const material = create_line_material(scene, line_data.uniforms, geometry.attributes);
    material.uniforms.is_segments_multi = {
        value: is_segments ? 2 : 1
    };
    const mesh = new THREE.Mesh(geometry, material);
    const offset = is_segments ? 0 : 1;
    const new_count = geometry.attributes.linepoint_start.count;
    mesh.geometry.instanceCount = Math.max(0, new_count - offset);
    attach_updates(mesh, buffers, line_data.attributes, is_segments);
    return mesh;
}
function create_line(scene, line_data) {
    return _create_line(scene, line_data, false);
}
function create_linesegments(scene, line_data) {
    return _create_line(scene, line_data, true);
}
function deserialize_plot(scene, data) {
    let mesh;
    const update_visible = (v)=>{
        mesh.visible = v;
        return;
    };
    if (data.plot_type === "lines") {
        mesh = create_line(scene, data);
    } else if (data.plot_type === "linesegments") {
        mesh = create_linesegments(scene, data);
    } else if ("instance_attributes" in data) {
        mesh = create_instanced_mesh(scene, data);
    } else {
        mesh = create_mesh(scene, data);
    }
    mesh.name = data.name;
    mesh.frustumCulled = false;
    mesh.matrixAutoUpdate = false;
    mesh.plot_uuid = data.uuid;
    update_visible(data.visible.value);
    data.visible.on(update_visible);
    connect_uniforms(mesh, data.uniform_updater);
    if (!(data.plot_type === "lines" || data.plot_type === "linesegments")) {
        connect_attributes(mesh, data.attribute_updater);
    }
    return mesh;
}
const ON_NEXT_INSERT = new Set();
function on_next_insert(f) {
    ON_NEXT_INSERT.add(f);
}
function add_plot(scene, plot_data) {
    const cam = scene.wgl_camera;
    const identity = new mod.Uniform(new mod.Matrix4());
    if (plot_data.cam_space == "data") {
        plot_data.uniforms.view = cam.view;
        plot_data.uniforms.projection = cam.projection;
        plot_data.uniforms.projectionview = cam.projectionview;
        plot_data.uniforms.eyeposition = cam.eyeposition;
    } else if (plot_data.cam_space == "pixel") {
        plot_data.uniforms.view = identity;
        plot_data.uniforms.projection = cam.pixel_space;
        plot_data.uniforms.projectionview = cam.pixel_space;
    } else if (plot_data.cam_space == "relative") {
        plot_data.uniforms.view = identity;
        plot_data.uniforms.projection = cam.relative_space;
        plot_data.uniforms.projectionview = cam.relative_space;
    } else {
        plot_data.uniforms.view = identity;
        plot_data.uniforms.projection = identity;
        plot_data.uniforms.projectionview = identity;
    }
    const { px_per_unit  } = scene.screen;
    plot_data.uniforms.resolution = cam.resolution;
    plot_data.uniforms.px_per_unit = new mod.Uniform(px_per_unit);
    if (plot_data.uniforms.preprojection) {
        const { space , markerspace  } = plot_data;
        plot_data.uniforms.preprojection = cam.preprojection_matrix(space.value, markerspace.value);
    }
    if (scene.camera_relative_light) {
        plot_data.uniforms.light_direction = cam.light_direction;
        scene.light_direction.on((value)=>{
            cam.update_light_dir(value);
        });
    } else {
        const light_dir = new mod.Vector3().fromArray(scene.light_direction.value);
        plot_data.uniforms.light_direction = new mod.Uniform(light_dir);
        scene.light_direction.on((value)=>{
            plot_data.uniforms.light_direction.value.fromArray(value);
        });
    }
    const p = deserialize_plot(scene, plot_data);
    plot_cache[p.plot_uuid] = p;
    scene.add(p);
    const next_insert = new Set(ON_NEXT_INSERT);
    next_insert.forEach((f)=>f());
}
function connect_uniforms(mesh, updater) {
    updater.on(([name, data])=>{
        if (name === "none") {
            return;
        }
        const uniform = mesh.material.uniforms[name];
        if (uniform.value.isTexture) {
            const im_data = uniform.value.image;
            const [size, tex_data] = data;
            if (tex_data.length == im_data.data.length) {
                im_data.data.set(tex_data);
            } else {
                const old_texture = uniform.value;
                uniform.value = re_create_texture(old_texture, tex_data, size);
                old_texture.dispose();
            }
            uniform.value.needsUpdate = true;
        } else {
            if (is_three_fixed_array(uniform.value)) {
                uniform.value.fromArray(data);
            } else {
                uniform.value = data;
            }
        }
    });
}
function convert_RGB_to_RGBA(rgbArray) {
    const length = rgbArray.length;
    const rgbaArray = new Float32Array(length / 3 * 4);
    for(let i = 0, j = 0; i < length; i += 3, j += 4){
        rgbaArray[j] = rgbArray[i];
        rgbaArray[j + 1] = rgbArray[i + 1];
        rgbaArray[j + 2] = rgbArray[i + 2];
        rgbaArray[j + 3] = 1.0;
    }
    return rgbaArray;
}
function create_texture_from_data(data) {
    let buffer = data.data;
    if (data.size.length == 3) {
        const tex = new mod.Data3DTexture(buffer, data.size[0], data.size[1], data.size[2]);
        tex.format = mod[data.three_format];
        tex.type = mod[data.three_type];
        return tex;
    } else {
        let format = mod[data.three_format];
        if (data.three_format == "RGBFormat") {
            buffer = convert_RGB_to_RGBA(buffer);
            format = mod.RGBAFormat;
        }
        return new mod.DataTexture(buffer, data.size[0], data.size[1], format, mod[data.three_type]);
    }
}
function create_texture(scene, data) {
    const buffer = data.data;
    if (buffer == "texture_atlas") {
        const { texture_atlas  } = scene.screen;
        if (texture_atlas) {
            return texture_atlas;
        } else {
            data.data = TEXTURE_ATLAS[0].value;
            const texture = create_texture_from_data(data);
            scene.screen.texture_atlas = texture;
            TEXTURE_ATLAS[0].on((new_data)=>{
                if (new_data === texture) {
                    return false;
                } else {
                    texture.image.data.set(new_data);
                    texture.needsUpdate = true;
                    return;
                }
            });
            return texture;
        }
    } else {
        return create_texture_from_data(data);
    }
}
function re_create_texture(old_texture, buffer, size) {
    let tex;
    if (size.length == 3) {
        tex = new mod.Data3DTexture(buffer, size[0], size[1], size[2]);
        tex.format = old_texture.format;
        tex.type = old_texture.type;
    } else {
        tex = new mod.DataTexture(buffer, size[0], size[1] ? size[1] : 1, old_texture.format, old_texture.type);
    }
    tex.minFilter = old_texture.minFilter;
    tex.magFilter = old_texture.magFilter;
    tex.anisotropy = old_texture.anisotropy;
    tex.wrapS = old_texture.wrapS;
    if (size.length > 1) {
        tex.wrapT = old_texture.wrapT;
    }
    if (size.length > 2) {
        tex.wrapR = old_texture.wrapR;
    }
    return tex;
}
function BufferAttribute(buffer) {
    const jsbuff = new mod.BufferAttribute(buffer.flat, buffer.type_length);
    jsbuff.setUsage(mod.DynamicDrawUsage);
    return jsbuff;
}
function InstanceBufferAttribute(buffer) {
    const jsbuff = new mod.InstancedBufferAttribute(buffer.flat, buffer.type_length);
    jsbuff.setUsage(mod.DynamicDrawUsage);
    return jsbuff;
}
function attach_geometry(buffer_geometry, vertexarrays, faces) {
    for(const name in vertexarrays){
        const buff = vertexarrays[name];
        let buffer;
        if (buff.to_update) {
            buffer = new mod.BufferAttribute(buff.to_update, buff.itemSize);
        } else {
            buffer = BufferAttribute(buff);
        }
        buffer_geometry.setAttribute(name, buffer);
    }
    buffer_geometry.setIndex(faces);
    buffer_geometry.boundingSphere = new mod.Sphere();
    buffer_geometry.boundingSphere.radius = 10000000000000;
    buffer_geometry.frustumCulled = false;
    return buffer_geometry;
}
function attach_instanced_geometry(buffer_geometry, instance_attributes) {
    for(const name in instance_attributes){
        const buffer = InstanceBufferAttribute(instance_attributes[name]);
        buffer_geometry.setAttribute(name, buffer);
    }
}
function recreate_geometry(mesh, vertexarrays, faces) {
    const buffer_geometry = new mod.BufferGeometry();
    attach_geometry(buffer_geometry, vertexarrays, faces);
    mesh.geometry.dispose();
    mesh.geometry = buffer_geometry;
    mesh.needsUpdate = true;
}
function recreate_instanced_geometry(mesh) {
    const buffer_geometry = new mod.InstancedBufferGeometry();
    const vertexarrays = {};
    const instance_attributes = {};
    const faces = [
        ...mesh.geometry.index.array
    ];
    Object.keys(mesh.geometry.attributes).forEach((name)=>{
        const buffer = mesh.geometry.attributes[name];
        const copy = buffer.to_update ? buffer.to_update : buffer.array.map((x)=>x);
        if (buffer.isInstancedBufferAttribute) {
            instance_attributes[name] = {
                flat: copy,
                type_length: buffer.itemSize
            };
        } else {
            vertexarrays[name] = {
                flat: copy,
                type_length: buffer.itemSize
            };
        }
    });
    attach_geometry(buffer_geometry, vertexarrays, faces);
    attach_instanced_geometry(buffer_geometry, instance_attributes);
    mesh.geometry.dispose();
    mesh.geometry = buffer_geometry;
    mesh.needsUpdate = true;
}
function create_material(scene, program) {
    const is_volume = "volumedata" in program.uniforms;
    return new mod.RawShaderMaterial({
        uniforms: deserialize_uniforms(scene, program.uniforms),
        vertexShader: program.vertex_source,
        fragmentShader: program.fragment_source,
        side: is_volume ? mod.BackSide : mod.DoubleSide,
        transparent: true,
        glslVersion: mod.GLSL3,
        depthTest: !program.overdraw.value,
        depthWrite: !program.transparency.value
    });
}
function create_mesh(scene, program) {
    const buffer_geometry = new mod.BufferGeometry();
    const faces = new mod.BufferAttribute(program.faces.value, 1);
    attach_geometry(buffer_geometry, program.vertexarrays, faces);
    const material = create_material(scene, program);
    const mesh = new mod.Mesh(buffer_geometry, material);
    program.faces.on((x)=>{
        mesh.geometry.setIndex(new mod.BufferAttribute(x, 1));
    });
    return mesh;
}
function create_instanced_mesh(scene, program) {
    const buffer_geometry = new mod.InstancedBufferGeometry();
    const faces = new mod.BufferAttribute(program.faces.value, 1);
    attach_geometry(buffer_geometry, program.vertexarrays, faces);
    attach_instanced_geometry(buffer_geometry, program.instance_attributes);
    const material = create_material(scene, program);
    const mesh = new mod.Mesh(buffer_geometry, material);
    program.faces.on((x)=>{
        mesh.geometry.setIndex(new mod.BufferAttribute(x, 1));
    });
    return mesh;
}
function first(x) {
    return x[Object.keys(x)[0]];
}
function connect_attributes(mesh, updater) {
    const instance_buffers = {};
    const geometry_buffers = {};
    let first_instance_buffer;
    const real_instance_length = [
        0
    ];
    let first_geometry_buffer;
    const real_geometry_length = [
        0
    ];
    function re_assign_buffers() {
        const attributes = mesh.geometry.attributes;
        Object.keys(attributes).forEach((name)=>{
            const buffer = attributes[name];
            if (buffer.isInstancedBufferAttribute) {
                instance_buffers[name] = buffer;
            } else {
                geometry_buffers[name] = buffer;
            }
        });
        first_instance_buffer = first(instance_buffers);
        if (first_instance_buffer) {
            real_instance_length[0] = first_instance_buffer.count;
        }
        first_geometry_buffer = first(geometry_buffers);
        real_geometry_length[0] = first_geometry_buffer.count;
    }
    re_assign_buffers();
    updater.on(([name, new_values, length])=>{
        const buffer = mesh.geometry.attributes[name];
        let buffers;
        let real_length;
        let is_instance = false;
        if (name in instance_buffers) {
            buffers = instance_buffers;
            first_instance_buffer;
            real_length = real_instance_length;
            is_instance = true;
        } else {
            buffers = geometry_buffers;
            first_geometry_buffer;
            real_length = real_geometry_length;
        }
        if (length <= real_length[0]) {
            buffer.set(new_values);
            buffer.needsUpdate = true;
            if (is_instance) {
                mesh.geometry.instanceCount = length;
            }
        } else {
            buffer.to_update = new_values;
            const all_have_same_length = Object.values(buffers).every((x)=>x.to_update && x.to_update.length / x.itemSize == length);
            if (all_have_same_length) {
                if (is_instance) {
                    recreate_instanced_geometry(mesh);
                    re_assign_buffers();
                    mesh.geometry.instanceCount = new_values.length / buffer.itemSize;
                } else {
                    recreate_geometry(mesh, buffers, mesh.geometry.index);
                    re_assign_buffers();
                }
            }
        }
    });
}
function deserialize_scene(data, screen) {
    const scene = new mod.Scene();
    scene.screen = screen;
    const { canvas  } = screen;
    add_scene(data.uuid, scene);
    scene.scene_uuid = data.uuid;
    scene.frustumCulled = false;
    scene.viewport = data.viewport;
    scene.backgroundcolor = data.backgroundcolor;
    scene.backgroundcolor_alpha = data.backgroundcolor_alpha;
    scene.clearscene = data.clearscene;
    scene.visible = data.visible;
    scene.camera_relative_light = data.camera_relative_light;
    scene.light_direction = data.light_direction;
    const camera = new MakieCamera();
    scene.wgl_camera = camera;
    function update_cam(camera_matrices, force) {
        if (!force) {
            if (!(Bonito.can_send_to_julia && Bonito.can_send_to_julia())) {
                return;
            }
        }
        const [view, projection, resolution, eyepos] = camera_matrices;
        camera.update_matrices(view, projection, resolution, eyepos);
    }
    if (data.cam3d_state) {
        attach_3d_camera(canvas, camera, data.cam3d_state, data.light_direction, scene);
    }
    update_cam(data.camera.value, true);
    camera.update_light_dir(data.light_direction.value);
    data.camera.on(update_cam);
    data.plots.forEach((plot_data)=>{
        add_plot(scene, plot_data);
    });
    scene.scene_children = data.children.map((child)=>{
        const childscene = deserialize_scene(child, screen);
        return childscene;
    });
    return scene;
}
function delete_plot(plot) {
    delete plot_cache[plot.plot_uuid];
    const { parent  } = plot;
    if (parent) {
        parent.remove(plot);
    }
    plot.geometry.dispose();
    plot.material.dispose();
}
function delete_three_scene(scene) {
    delete scene_cache[scene.scene_uuid];
    scene.scene_children.forEach(delete_three_scene);
    while(scene.children.length > 0){
        delete_plot(scene.children[0]);
    }
}
window.THREE = mod;
function render_scene(scene, picking = false) {
    const { camera , renderer , px_per_unit  } = scene.screen;
    const canvas = renderer.domElement;
    if (!document.body.contains(canvas)) {
        console.log("removing WGL context, canvas is not in the DOM anymore!");
        if (scene.screen.texture_atlas) {
            const data = TEXTURE_ATLAS[0].value;
            TEXTURE_ATLAS[0].notify(scene.screen.texture_atlas, true);
            TEXTURE_ATLAS[0].value = data;
            scene.screen.texture_atlas = undefined;
        }
        delete_three_scene(scene);
        renderer.state.reset();
        renderer.dispose();
        return false;
    }
    if (!scene.visible.value) {
        return true;
    }
    renderer.autoClear = scene.clearscene.value;
    const area = scene.viewport.value;
    if (area) {
        const [x, y, w, h] = area.map((x)=>x * px_per_unit);
        renderer.setViewport(x, y, w, h);
        renderer.setScissor(x, y, w, h);
        renderer.setScissorTest(true);
        if (picking) {
            renderer.setClearAlpha(0);
            renderer.setClearColor(new mod.Color(0), 0.0);
        } else {
            const alpha = scene.backgroundcolor_alpha.value;
            renderer.setClearColor(scene.backgroundcolor.value, alpha);
        }
        renderer.render(scene, camera);
    }
    return scene.scene_children.every((x)=>render_scene(x, picking));
}
function start_renderloop(three_scene) {
    const { fps  } = three_scene.screen;
    const time_per_frame = 1 / fps * 1000;
    let last_time_stamp = performance.now();
    function renderloop(timestamp) {
        if (timestamp - last_time_stamp > time_per_frame) {
            const all_rendered = render_scene(three_scene);
            if (!all_rendered) {
                return;
            }
            last_time_stamp = performance.now();
        }
        window.requestAnimationFrame(renderloop);
    }
    render_scene(three_scene);
    renderloop();
}
function throttle_function(func, delay) {
    let prev = 0;
    let future_id = undefined;
    function inner_throttle(...args) {
        const now = new Date().getTime();
        if (future_id !== undefined) {
            clearTimeout(future_id);
            future_id = undefined;
        }
        if (now - prev > delay) {
            prev = now;
            return func(...args);
        } else {
            future_id = setTimeout(()=>inner_throttle(...args), now - prev + 1);
        }
    }
    return inner_throttle;
}
function get_body_size() {
    const bodyStyle = window.getComputedStyle(document.body);
    const width_padding = parseInt(bodyStyle.paddingLeft, 10) + parseInt(bodyStyle.paddingRight, 10) + parseInt(bodyStyle.marginLeft, 10) + parseInt(bodyStyle.marginRight, 10);
    const height_padding = parseInt(bodyStyle.paddingTop, 10) + parseInt(bodyStyle.paddingBottom, 10) + parseInt(bodyStyle.marginTop, 10) + parseInt(bodyStyle.marginBottom, 10);
    const width = window.innerWidth - width_padding;
    const height = window.innerHeight - height_padding;
    return [
        width,
        height
    ];
}
function get_parent_size(canvas) {
    const rect = canvas.parentElement.getBoundingClientRect();
    return [
        rect.width,
        rect.height
    ];
}
function wglerror(gl, error) {
    switch(error){
        case gl.NO_ERROR:
            return "No error";
        case gl.INVALID_ENUM:
            return "Invalid enum";
        case gl.INVALID_VALUE:
            return "Invalid value";
        case gl.INVALID_OPERATION:
            return "Invalid operation";
        case gl.OUT_OF_MEMORY:
            return "Out of memory";
        case gl.CONTEXT_LOST_WEBGL:
            return "Context lost";
        default:
            return "Unknown error";
    }
}
function handleSource(string, errorLine) {
    const lines = string.split("\n");
    const lines2 = [];
    const from = Math.max(errorLine - 6, 0);
    const to = Math.min(errorLine + 6, lines.length);
    for(let i = from; i < to; i++){
        const line = i + 1;
        lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i]}`);
    }
    return lines2.join("\n");
}
function getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === "") return "";
    const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
    if (errorMatches) {
        const errorLine = parseInt(errorMatches[1]);
        return type.toUpperCase() + "\n\n" + errors + "\n\n" + handleSource(gl.getShaderSource(shader), errorLine);
    } else {
        return errors;
    }
}
function on_shader_error(gl, program, glVertexShader, glFragmentShader) {
    const programLog = gl.getProgramInfoLog(program).trim();
    const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
    const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
    const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
    const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
    const err = "THREE.WebGLProgram: Shader Error " + wglerror(gl, gl.getError()) + " - " + "VALIDATE_STATUS " + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + "\n\n" + "Program Info Log:\n" + programLog + "\n" + vertexErrors + "\n" + fragmentErrors + "\n" + "Fragment log:\n" + fragmentLog + "Vertex log:\n" + vertexLog;
    Bonito.Connection.send_warning(err);
}
function add_canvas_events(screen, comm, resize_to) {
    const { canvas , winscale  } = screen;
    function mouse_callback(event) {
        const [x, y] = events2unitless(screen, event);
        comm.notify({
            mouseposition: [
                x,
                y
            ]
        });
    }
    const notify_mouse_throttled = throttle_function(mouse_callback, 40);
    function mousemove(event) {
        notify_mouse_throttled(event);
        return false;
    }
    canvas.addEventListener("mousemove", mousemove);
    function mousedown(event) {
        comm.notify({
            mousedown: event.buttons
        });
        return false;
    }
    canvas.addEventListener("mousedown", mousedown);
    function mouseup(event) {
        comm.notify({
            mouseup: event.buttons
        });
        return false;
    }
    canvas.addEventListener("mouseup", mouseup);
    function wheel(event) {
        comm.notify({
            scroll: [
                event.deltaX,
                -event.deltaY
            ]
        });
        event.preventDefault();
        return false;
    }
    canvas.addEventListener("wheel", wheel);
    function keydown(event) {
        comm.notify({
            keydown: event.code
        });
        return false;
    }
    canvas.addEventListener("keydown", keydown);
    function keyup(event) {
        comm.notify({
            keyup: event.code
        });
        return false;
    }
    canvas.addEventListener("keyup", keyup);
    function contextmenu(event) {
        comm.notify({
            keyup: "delete_keys"
        });
        return false;
    }
    canvas.addEventListener("contextmenu", (e)=>e.preventDefault());
    canvas.addEventListener("focusout", contextmenu);
    function resize_callback() {
        let width, height;
        if (resize_to == "body") {
            [width, height] = get_body_size();
        } else if (resize_to == "parent") {
            [width, height] = get_parent_size(canvas);
        }
        comm.notify({
            resize: [
                width / winscale,
                height / winscale
            ]
        });
    }
    if (resize_to) {
        const resize_callback_throttled = throttle_function(resize_callback, 100);
        window.addEventListener("resize", (event)=>resize_callback_throttled());
        resize_callback_throttled();
    }
}
function threejs_module(canvas) {
    let context = canvas.getContext("webgl2", {
        preserveDrawingBuffer: true
    });
    if (!context) {
        console.warn("WebGL 2.0 not supported by browser, falling back to WebGL 1.0 (Volume plots will not work)");
        context = canvas.getContext("webgl", {
            preserveDrawingBuffer: true
        });
    }
    if (!context) {
        return;
    }
    const renderer = new mod.WebGLRenderer({
        antialias: true,
        canvas: canvas,
        context: context,
        powerPreference: "high-performance"
    });
    renderer.debug.onShaderError = on_shader_error;
    renderer.setClearColor("#ffffff");
    return renderer;
}
function set_render_size(screen, width, height) {
    const { renderer , canvas , scalefactor , winscale , px_per_unit  } = screen;
    const [swidth, sheight] = [
        winscale * width,
        winscale * height
    ];
    const real_pixel_width = Math.ceil(width * px_per_unit);
    const real_pixel_height = Math.ceil(height * px_per_unit);
    renderer._width = width;
    renderer._height = height;
    canvas.width = real_pixel_width;
    canvas.height = real_pixel_height;
    canvas.style.width = swidth + "px";
    canvas.style.height = sheight + "px";
    renderer.setViewport(0, 0, real_pixel_width, real_pixel_height);
    add_picking_target(screen);
    return;
}
function add_picking_target(screen) {
    const { picking_target , canvas  } = screen;
    const [w, h] = [
        canvas.width,
        canvas.height
    ];
    if (picking_target) {
        if (picking_target.width == w && picking_target.height == h) {
            return;
        } else {
            picking_target.dispose();
        }
    }
    screen.picking_target = new mod.WebGLRenderTarget(w, h);
    return;
}
function create_scene(wrapper, canvas, canvas_width, scenes, comm, width, height, texture_atlas_obs, fps, resize_to, px_per_unit, scalefactor) {
    if (!scalefactor) {
        scalefactor = window.devicePixelRatio || 1.0;
    }
    if (!px_per_unit) {
        px_per_unit = scalefactor;
    }
    const renderer = threejs_module(canvas);
    TEXTURE_ATLAS[0] = texture_atlas_obs;
    if (!renderer) {
        const warning = getWebGLErrorMessage();
        wrapper.appendChild(warning);
    }
    const camera = new mod.PerspectiveCamera(45, 1, 0, 100);
    camera.updateProjectionMatrix();
    const pixel_ratio = window.devicePixelRatio || 1.0;
    const winscale = scalefactor / pixel_ratio;
    const screen = {
        renderer,
        camera,
        fps,
        canvas,
        px_per_unit,
        scalefactor,
        winscale,
        texture_atlas: undefined
    };
    add_canvas_events(screen, comm, resize_to);
    set_render_size(screen, width, height);
    const three_scene = deserialize_scene(scenes, screen);
    start_renderloop(three_scene);
    canvas_width.on((w_h)=>{
        set_render_size(screen, ...w_h);
    });
    return renderer;
}
function set_picking_uniforms(scene, last_id, picking, picked_plots, plots, id_to_plot) {
    scene.children.forEach((plot, index)=>{
        const { material  } = plot;
        const { uniforms  } = material;
        if (picking) {
            uniforms.object_id.value = last_id + index;
            uniforms.picking.value = true;
            material.blending = mod.NoBlending;
        } else {
            uniforms.picking.value = false;
            material.blending = mod.NormalBlending;
            const id = uniforms.object_id.value;
            if (id in picked_plots) {
                plots.push([
                    plot,
                    picked_plots[id]
                ]);
                id_to_plot[id] = plot;
            }
        }
    });
    let next_id = last_id + scene.children.length;
    scene.scene_children.forEach((scene)=>{
        next_id = set_picking_uniforms(scene, next_id, picking, picked_plots, plots, id_to_plot);
    });
    return next_id;
}
function pick_native(scene, _x, _y, _w, _h) {
    const { renderer , picking_target , px_per_unit  } = scene.screen;
    [_x, _y, _w, _h] = [
        _x,
        _y,
        _w,
        _h
    ].map((x)=>Math.ceil(x * px_per_unit));
    const [x, y, w, h] = [
        _x,
        _y,
        _w,
        _h
    ];
    renderer.setRenderTarget(picking_target);
    set_picking_uniforms(scene, 1, true);
    render_scene(scene, true);
    renderer.setRenderTarget(null);
    const nbytes = w * h * 4;
    const pixel_bytes = new Uint8Array(nbytes);
    renderer.readRenderTargetPixels(picking_target, x, y, w, h, pixel_bytes);
    const picked_plots = {};
    const picked_plots_array = [];
    const reinterpret_view = new DataView(pixel_bytes.buffer);
    for(let i = 0; i < pixel_bytes.length / 4; i++){
        const id = reinterpret_view.getUint16(i * 4);
        const index = reinterpret_view.getUint16(i * 4 + 2);
        picked_plots_array.push([
            id,
            index
        ]);
        picked_plots[id] = index;
    }
    const plots = [];
    const id_to_plot = {};
    set_picking_uniforms(scene, 0, false, picked_plots, plots, id_to_plot);
    const picked_plots_matrix = picked_plots_array.map(([id, index])=>{
        const p = id_to_plot[id];
        return [
            p ? p.plot_uuid : null,
            index
        ];
    });
    const plot_matrix = {
        data: picked_plots_matrix,
        size: [
            w,
            h
        ]
    };
    return [
        plot_matrix,
        plots
    ];
}
function pick_closest(scene, xy, range) {
    const { renderer  } = scene.screen;
    const [width, height] = [
        renderer._width,
        renderer._height
    ];
    if (!(1.0 <= xy[0] <= width && 1.0 <= xy[1] <= height)) {
        return [
            null,
            0
        ];
    }
    const x0 = Math.max(1, xy[0] - range);
    const y0 = Math.max(1, xy[1] - range);
    const x1 = Math.min(width, Math.floor(xy[0] + range));
    const y1 = Math.min(height, Math.floor(xy[1] + range));
    const dx = x1 - x0;
    const dy = y1 - y0;
    const [plot_data, _] = pick_native(scene, x0, y0, dx, dy);
    const plot_matrix = plot_data.data;
    let min_dist = range ^ 2;
    let selection = [
        null,
        0
    ];
    const x = xy[0] + 1 - x0;
    const y = xy[1] + 1 - y0;
    let pindex = 0;
    for(let i = 1; i <= dx; i++){
        for(let j = 1; j <= dx; j++){
            const d = x - i ^ 2 + (y - j) ^ 2;
            const [plot_uuid, index] = plot_matrix[pindex];
            pindex = pindex + 1;
            if (d < min_dist && plot_uuid) {
                min_dist = d;
                selection = [
                    plot_uuid,
                    index
                ];
            }
        }
    }
    return selection;
}
function pick_sorted(scene, xy, range) {
    const { renderer  } = scene.screen;
    const [width, height] = [
        renderer._width,
        renderer._height
    ];
    if (!(1.0 <= xy[0] <= width && 1.0 <= xy[1] <= height)) {
        return null;
    }
    const x0 = Math.max(1, xy[0] - range);
    const y0 = Math.max(1, xy[1] - range);
    const x1 = Math.min(width, Math.floor(xy[0] + range));
    const y1 = Math.min(height, Math.floor(xy[1] + range));
    const dx = x1 - x0;
    const dy = y1 - y0;
    const [plot_data, selected] = pick_native(scene, x0, y0, dx, dy);
    if (selected.length == 0) {
        return null;
    }
    const plot_matrix = plot_data.data;
    const distances = selected.map((x)=>range ^ 2);
    const x = xy[0] + 1 - x0;
    const y = xy[1] + 1 - y0;
    let pindex = 0;
    for(let i = 1; i <= dx; i++){
        for(let j = 1; j <= dx; j++){
            const d = x - i ^ 2 + (y - j) ^ 2;
            if (plot_matrix.length <= pindex) {
                continue;
            }
            const [plot_uuid, index] = plot_matrix[pindex];
            pindex = pindex + 1;
            const plot_index = selected.findIndex((x)=>x[0].plot_uuid == plot_uuid);
            if (plot_index >= 0 && d < distances[plot_index]) {
                distances[plot_index] = d;
            }
        }
    }
    const sorted_indices = Array.from(Array(distances.length).keys()).sort((a, b)=>distances[a] < distances[b] ? -1 : distances[b] < distances[a] | 0);
    return sorted_indices.map((idx)=>{
        const [plot, index] = selected[idx];
        return [
            plot.plot_uuid,
            index
        ];
    });
}
function pick_native_uuid(scene, x, y, w, h) {
    const [_, picked_plots] = pick_native(scene, x, y, w, h);
    return picked_plots.map(([p, index])=>[
            p.plot_uuid,
            index
        ]);
}
function pick_native_matrix(scene, x, y, w, h) {
    const [matrix, _] = pick_native(scene, x, y, w, h);
    return matrix;
}
function register_popup(popup, scene, plots_to_pick, callback) {
    if (!scene || !scene.screen) {
        return;
    }
    const { canvas  } = scene.screen;
    canvas.addEventListener("mousedown", (event)=>{
        const [x, y] = events2unitless(scene.screen, event);
        const [_, picks] = pick_native(scene, x, y, 1, 1);
        if (picks.length == 1) {
            const [plot, index] = picks[0];
            if (plots_to_pick.has(plot.plot_uuid)) {
                const result = callback(plot, index);
                if (!popup.classList.contains("show")) {
                    popup.classList.add("show");
                }
                popup.style.left = event.pageX + "px";
                popup.style.top = event.pageY + "px";
                if (typeof result === "string" || result instanceof String) {
                    popup.innerText = result;
                } else {
                    popup.innerHTML = result;
                }
            }
        } else {
            popup.classList.remove("show");
        }
    });
    canvas.addEventListener("keyup", (event)=>{
        if (event.key === "Escape") {
            popup.classList.remove("show");
        }
    });
}
window.WGL = {
    deserialize_scene,
    threejs_module,
    start_renderloop,
    delete_plots,
    insert_plot,
    find_plots,
    delete_scene,
    find_scene,
    scene_cache,
    plot_cache,
    delete_scenes,
    create_scene,
    events2unitless,
    on_next_insert,
    register_popup,
    render_scene,
    TEXTURE_ATLAS
};
export { deserialize_scene as deserialize_scene, threejs_module as threejs_module, start_renderloop as start_renderloop, delete_plots as delete_plots, insert_plot as insert_plot, find_plots as find_plots, delete_scene as delete_scene, find_scene as find_scene, scene_cache as scene_cache, plot_cache as plot_cache, delete_scenes as delete_scenes, create_scene as create_scene, events2unitless as events2unitless, on_next_insert as on_next_insert };
export { render_scene as render_scene };
export { wglerror as wglerror };
export { pick_native as pick_native };
export { pick_closest as pick_closest };
export { pick_sorted as pick_sorted };
export { pick_native_uuid as pick_native_uuid };
export { pick_native_matrix as pick_native_matrix };
export { register_popup as register_popup };

" type="module"></script>
    </div>
  </div>
  <div>
    <script src="data:application/javascript;base64,    Bonito.lock_loading(() => {
        return Bonito.fetch_binary('data:application/octet-stream;base64,kscsapPZJDc2ZTMyYjFmLTRmNTktNGE0Yi04YmMyLTYwZWI5YWY1NzdkMICjc3VigqdwYXlsb2FkkskAFgSIa5LIHXNqk9kkNzZlMzJiMWYtNGY1OS00YTRiLThiYzItNjBlYjlhZjU3N2Qw3gC4pjk0Njc2OMcJZZKmOTQ2NzY4wqY5NDg0NDLHI2WSpjk0ODQ0MscYFgAAAAABAAAAAwAAAAAAAAADAAAAAgAAAKExrXRyYWNraW5nLW9ubHmmOTQ1OTI1xwllkqY5NDU5MjXDpjk0ODUyMseoZZKmOTQ4NTIylMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD/HQBcOdNo7AAAAAAAAAAAAAAAAAAAAAA502jsAAAAAAAAAAAAAAAAAAAAAF7fRuAAAAAAAAIC/AACAvwAAAIAAAIA/1xcAAJZDAACWQ8cMFwAAgD8AAIA/AACAP6Y5NDg1MjHHDWWSpjk0ODUyMco/gAAApjk0ODMyNscjZZKmOTQ4MzI2xxgWAAAAAAEAAAADAAAAAAAAAAMAAAACAAAApjk0NzUzM8cNZZKmOTQ3NTMzpGRhdGGmOTQ4NDkyxx5lkqY5NDg0OTKCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXpjk0ODA4MccaZZKmOTQ4MDgx2BUAAAAAAAAAACwBAAAsAQAApjk0ODQ1MMcPZZKmOTQ4NDUwkqRub25lkKY5NDgxNjbHD2WSpjk0ODE2NpKkbm9uZZCmOTQ3MzQ2xwllkqY5NDczNDbCpjk0ODM3OcceZZKmOTQ4Mzc5gqt0eXBlX2xlbmd0aAKkZmxhdMcAF6Y5NDcyNTfHCWWSpjk0NzI1N8OmOTQ3NjIyxwllkqY5NDc2MjLDpjk0NzgyM8cJZZKmOTQ3ODIzwqY5NDgzOTPHTmWSpjk0ODM5M4KrdHlwZV9sZW5ndGgCpGZsYXTHMBf44KRCAECOQ/jgpEIAwI9DAIAeQwBAjkMAgB5DAMCPQ4SPakMAQI5DhI9qQwDAj0OmOTQ3ODM2xwllkqY5NDc4MzbCpjk0ODM4McceZZKmOTQ4Mzgxgqt0eXBlX2xlbmd0aAGkZmxhdMcAF6Y5NDgxNjDHI2WSpjk0ODE2MMcYFgAAAAABAAAAAwAAAAAAAAADAAAAAgAAAKY5NDgyODnHTmWSpjk0ODI4OYKrdHlwZV9sZW5ndGgCpGZsYXTHMBcAAAJC4IOuQgAA7EHgg65CAAACQgCAIUMAAOxBAIAhQwAAAkIQvmtDAADsQRC+a0OmOTQ4MTI5xw9lkqY5NDgxMjmSpG5vbmWQpjk0NjM4MccNZZKmOTQ2MzgxpGRhdGGmOTQ4Mjc2xw9lkqY5NDgyNzaSpG5vbmWQpjk0ODE5MMcPZZKmOTQ4MTkwkqRub25lkKY5NDg1MjDYZZKmOTQ4NTIwpyNGRkZGRkamOTQ4MjM4xw9lkqY5NDgyMziSpG5vbmWQpjk0ODQ0M8cMZZKmOTQ4NDQzk6CQAKY5NDg0OTTHD2WSpjk0ODQ5NJKkbm9uZZCmOTQ2MjE0xwllkqY5NDYyMTTDpjk0ODI4NcdeZZKmOTQ4Mjg1gqt0eXBlX2xlbmd0aAKkZmxhdMdAFwAAAkKii0hCAADcQaKLSEIAAAJC78H4QgAA3EHvwfhCAAACQgefRkMAANxBB59GQwAAAkKMbohDAADcQYxuiEOmOTQ3NDE2xwllkqY5NDc0MTbCpjk0NjIyOMcJZZKmOTQ2MjI4wqY5NDgyMzLHHmWSpjk0ODIzMoKrdHlwZV9sZW5ndGgEpGZsYXTHABemOTQ3MDA3xwllkqY5NDcwMDfDpjk0NjU4NscNZZKmOTQ2NTg2pGRhdGGmOTQ4MTcwxw9lkqY5NDgxNzCSpG5vbmWQpjk0NjU3OMcNZZKmOTQ2NTc4pGRhdGGmOTQ4MjM0xw9lkqY5NDgyMzSSpG5vbmWQpjk0ODEzN8eoZZKmOTQ4MTM3lMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD/HQBcOdNo7AAAAAAAAAAAAAAAAAAAAAA502jsAAAAAAAAAAAAAAAAAAAAAF7fRuAAAAAAAAIC/AACAvwAAAIAAAIA/1xcAAJZDAACWQ8cMFwAAgD8AAIA/AACAP6Y5NDgzNzbHD2WSpjk0ODM3NpKkbm9uZZCmOTQ3MTE0xwllkqY5NDcxMTTCpjk0ODA4MMcaZZKmOTQ4MDgw2BUAAAAAAAAAACwBAAAsAQAApjk0ODEzNMcPZZKmOTQ4MTM0kqRub25lkKY5NDc2OTLHCWWSpjk0NzY5MsOmOTQ4MTc3x15lkqY5NDgxNzeCq3R5cGVfbGVuZ3RoAqRmbGF0x0AXAAAEQqKLSEIAAI5DootIQgAABELvwfhCAACOQ+/B+EIAAARCB59GQwAAjkMHn0ZDAAAEQoxuiEMAAI5DjG6IQ6Y5NDYzNzbHCWWSpjk0NjM3NsKmOTQ4Mjc0xyNlkqY5NDgyNzTHGBYAAAAAAQAAAAMAAAAAAAAAAwAAAAIAAACmOTQ4Mzc1xwxlkqY5NDgzNzWToJAApjk0NTU2OccJZZKmOTQ1NTY5w6Y5NDgzMzjHD2WSpjk0ODMzOJKkbm9uZZCmOTQ4NDkxxx5lkqY5NDg0OTGCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXpjk0NzU0NscNZZKmOTQ3NTQ2pGRhdGGmOTQ3OTEzxw5lkqY5NDc5MTOlcGl4ZWymOTQ2NDY3xwllkqY5NDY0NjfDpjk0ODQ4OMcPZZKmOTQ4NDg4kqRub25lkKY5NDc2OTbHDWWSpjk0NzY5NqRkYXRhpjk0ODQ0OMceZZKmOTQ4NDQ4gqt0eXBlX2xlbmd0aASkZmxhdMcAF6Y5NDgzMzHHHmWSpjk0ODMzMYKrdHlwZV9sZW5ndGgCpGZsYXTHABemOTQ4Mzk3x05lkqY5NDgzOTeCq3R5cGVfbGVuZ3RoAqRmbGF0xzAXAECOQ+CDrkIAwI9D4IOuQgBAjkMAgCFDAMCPQwCAIUMAQI5DEL5rQwDAj0MQvmtDpjk0NzY3OMcJZZKmOTQ3Njc4wqY5NDgxODbHD2WSpjk0ODE4NpKkbm9uZZCmOTQ4MDgyxxplkqY5NDgwODLYFSEAAAAnAAAA+wAAAPUAAACmOTQ2NzUzxwllkqY5NDY3NTPDpjk0ODM4MMceZZKmOTQ4Mzgwgqt0eXBlX2xlbmd0aASkZmxhdMcAF6Y5NDYzOTDHDWWSpjk0NjM5MKRkYXRhpjk0ODM5MMcPZZKmOTQ4MzkwkqRub25lkKY5NDgyMjjHD2WSpjk0ODIyOJKkbm9uZZCmOTQ3NTI5xwllkqY5NDc1MjnCpjk0ODI4MMceZZKmOTQ4Mjgwgqt0eXBlX2xlbmd0aASkZmxhdMcAF6Y5NDgyMzfHLWWSpjk0ODIzN4KrdHlwZV9sZW5ndGgCpGZsYXTYFwAAAkIAABxCAECOQwAAHEKmOTQ4MjI3xwxlkqY5NDgyMjeToJAApjk0ODA4M9hlkqY5NDgwODOnI0ZGRkZGRqY5NDgxMjjHHmWSpjk0ODEyOIKrdHlwZV9sZW5ndGgBpGZsYXTHABemOTQ4MTY1x15lkqY5NDgxNjWCq3R5cGVfbGVuZ3RoAqRmbGF0x0AXAAAEQgAAHEIAAI5DAAAcQgAAjkMAABxCAACOQwAAjkMAAI5DAACOQwAABEIAAI5DAAAEQgAAjkMAAARCAAAcQqY5NDgyODLHD2WSpjk0ODI4MpKkbm9uZZCmOTQ1OTMxxw1lkqY5NDU5MzGkZGF0YaY5NDc4MzXHCWWSpjk0NzgzNcOmOTQ4Mzg1x15lkqY5NDgzODWCq3R5cGVfbGVuZ3RoAqRmbGF0x0AX6KIxQgBAjkPoojFCAMCQQ3vw8EIAQI5De/DwQgDAkEPCh0RDAECOQ8KHREMAwJBDo0uIQwBAjkOjS4hDAMCQQ6Y5NDgxNjLHD2WSpjk0ODE2MpKkbm9uZZCmOTQ2NzU3xwllkqY5NDY3NTfDpjk0ODMyN8cMZZKmOTQ4MzI3k6CQAKY5NDY1NzPHCWWSpjk0NjU3M8KmOTQ3MzgxxwllkqY5NDczODHCpjk0ODE2OcdeZZKmOTQ4MTY5gqt0eXBlX2xlbmd0aAKkZmxhdMdAF+iiMUIAABxC6KIxQgAAjkN78PBCAAAcQnvw8EIAAI5DwodEQwAAHELCh0RDAACOQ6NLiEMAABxCo0uIQwAAjkOmOTQ4MTgyxw9lkqY5NDgxODKSpG5vbmWQpjk0ODQ0NMcPZZKmOTQ4NDQ0kqRub25lkKY5NDgxNzjHD2WSpjk0ODE3OJKkbm9uZZCmOTQ4NTE4xwxlkqY5NDg1MTiToJAApjk0ODEzM8gDH2WSpjk0ODEzM4KrdHlwZV9sZW5ndGgEpGZsYXTIAwAXI9iIPsZTZz6qXwM/AACAPyPYiD7GU2c+ql8DPwAAgD8j2Ig+xlNnPqpfAz8AAIA/I9iIPsZTZz6qXwM/AACAPyPYiD7GU2c+ql8DPwAAgD8j2Ig+xlNnPqpfAz8AAIA/xjRDPk1q0D7ZWw4/AACAP8Y0Qz5NatA+2VsOPwAAgD/GNEM+TWrQPtlbDj8AAIA/xjRDPk1q0D7ZWw4/AACAP8Y0Qz5NatA+2VsOPwAAgD/GNEM+TWrQPtlbDj8AAIA/xjRDPk1q0D7ZWw4/AACAP8Y0Qz5NatA+2VsOPwAAgD/GNEM+TWrQPtlbDj8AAIA/xjRDPk1q0D7ZWw4/AACAP1w5Az7aqhA/SgcNPwAAgD9cOQM+2qoQP0oHDT8AAIA/XDkDPtqqED9KBw0/AACAP1w5Az7aqhA/SgcNPwAAgD9cOQM+2qoQP0oHDT8AAIA/XDkDPtqqED9KBw0/AACAP1w5Az7aqhA/SgcNPwAAgD9cOQM+2qoQP0oHDT8AAIA/XDkDPtqqED9KBw0/AACAP1w5Az7aqhA/SgcNPwAAgD9cOQM+2qoQP0oHDT8AAIA/XDkDPtqqED9KBw0/AACAP1w5Az7aqhA/SgcNPwAAgD9cOQM+2qoQP0oHDT8AAIA/XDkDPtqqED9KBw0/AACAP9EFVT7K/Dc/aRzyPgAAgD/RBVU+yvw3P2kc8j4AAIA/0QVVPsr8Nz9pHPI+AACAP9EFVT7K/Dc/aRzyPgAAgD/RBVU+yvw3P2kc8j4AAIA/0QVVPsr8Nz9pHPI+AACAP9EFVT7K/Dc/aRzyPgAAgD/RBVU+yvw3P2kc8j4AAIA/0QVVPsr8Nz9pHPI+AACAP1Z8Dz8wYlc/gjuIPgAAgD9WfA8/MGJXP4I7iD4AAIA/VnwPPzBiVz+CO4g+AACAP1Z8Dz8wYlc/gjuIPgAAgD9WfA8/MGJXP4I7iD4AAIA/VnwPPzBiVz+CO4g+AACAP1Z8Dz8wYlc/gjuIPgAAgD9WfA8/MGJXP4I7iD4AAIA/pjk0NzQ4N8cJZZKmOTQ3NDg3w6Y5NDc2ODPHDWWSpjk0NzY4M6RkYXRhpjk0ODQwMscPZZKmOTQ4NDAykqRub25lkKY5NDgxNzTHD2WSpjk0ODE3NJKkbm9uZZCmOTQ1NDc1xwllkqY5NDU0NzXDpjk0ODEzMsgBn2WSpjk0ODEzMoKrdHlwZV9sZW5ndGgCpGZsYXTIAYAXxRYvQAAAgD87nzVAAAAAQAAAQEDP6RJAj9FHQAAAAEBaA15AAACAPwAAwH8AAMB/ii0eQAAAgD8WMiNAAAAAQAAAQECGfjRAW7NVQAAAAEC0BnxAAACAPwAAwH8AAMB/smvoPwAAgEAAAABAmpFYQGTzFkAAAIBAAADAfwAAwH8AAIBA9BmmPyiVY0AAAABA14BLQAAAQEAAAEBA24JsQFzTNkAAAIBAAADAfwAAwH9QRA1AAACAP/LEEEAAAABAAAAAQLPaJ0DhBeE/AABAQDysxz8AAIBAAADAfwAAwH/AcVFAAACAQAAAgEAR9HJAAADAfwAAwH8AAIBAcATSP/V2cUAAAABAkABdQAAAQEAAAIBADPhhQAAAwH8AAMB/AACAP/tkFUA716g/AABAQMfspj8AAIBAAADAfwAAwH8AAIBA7O79P8JYf0AAAABASIBuQAAAQEAAAIBABvxQQAAAwH8AAMB/Ui2GPwAAgEAAAIA/TtplQAAAwH8AAMB/pjk0ODI5MMcPZZKmOTQ4MjkwkqRub25lkKY5NDgxNjHHDGWSpjk0ODE2MZOgkACmOTQ4MDg1x6hlkqY5NDgwODWUx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP8dAF8kmGz8AAAAAAAAAAAAAAAAAAAAAySYbPwAAAAAAAAAAAAAAAAAAAAAXt9G4AAAAAHvwwb978MG/AAAAgAAAgD/XFwAAe0MAAHVDxwwXAACAPwAAgD8AAIA/pjk0ODUyNccJZZKmOTQ4NTI1wqY5NDY1NzTHCWWSpjk0NjU3NMKmOTQ4Mjg2xw9lkqY5NDgyODaSpG5vbmWQpjk0NTkyN8cJZZKmOTQ1OTI3wqY5NDgyNznHHmWSpjk0ODI3OYKrdHlwZV9sZW5ndGgCpGZsYXTHABemOTQ4MzMyxx5lkqY5NDgzMzKCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXpjk0ODEzNscNZZKmOTQ4MTM2yj+AAACmOTQ3OTIwxwllkqY5NDc5MjDDpjk0NzY3OccJZZKmOTQ3Njc5wqY5NDg1MjTHCWWSpjk0ODUyNICmOTQ1NTczxxdlkqY5NDU1NzPHDBcH4em+JBshvxP0IL+mOTQ4Mzk0xw9lkqY5NDgzOTSSpG5vbmWQpjk0NjcxN8cJZZKmOTQ2NzE3w6Y5NDgzODLHD2WSpjk0ODM4MpKkbm9uZZCmOTQ4NDQ5xx5lkqY5NDg0NDmCq3R5cGVfbGVuZ3RoAaRmbGF0xwAXpjk0ODEyM8cPZZKmOTQ4MTIzkqRub25lkKY5NDYxMTDHCWWSpjk0NjExMMKmOTQ1NjYxxwllkqY5NDU2NjHCpjk0ODUxOccPZZKmOTQ4NTE5kqRub25lkKY5NDY5MjHHDWWSpjk0NjkyMaRkYXRhpjk0Nzc3MscJZZKmOTQ3Nzcyw6Y5NDgzMzTHD2WSpjk0ODMzNJKkbm9uZZCmOTQ4NDg2xyNlkqY5NDg0ODbHGBYAAAAAAQAAAAMAAAAAAAAAAwAAAAIAAACmOTQ2MjE4xwllkqY5NDYyMTjDpjk0NzkyNscNZZKmOTQ3OTI2pGRhdGGmOTQ4Mzg5x15lkqY5NDgzODmCq3R5cGVfbGVuZ3RoAqRmbGF0x0AXAECOQ6KLSEIAwJBDootIQgBAjkPvwfhCAMCQQ+/B+EIAQI5DB59GQwDAkEMHn0ZDAECOQ4xuiEMAwJBDjG6IQ6Y5NDc4NjnHCWWSpjk0Nzg2OcOmOTQ2MDc1xwllkqY5NDYwNzXDpjk0ODUxN8drZZKmOTQ4NTE3x2AWAAAAAAEAAAAEAAAABAAAAAEAAAAFAAAAAQAAAAIAAAAFAAAABQAAAAIAAAAGAAAAAgAAAAMAAAAGAAAABgAAAAMAAAAHAAAAAwAAAAAAAAAHAAAABwAAAAAAAAAEAAAApjk0NjE0NccJZZKmOTQ2MTQ1w6Y5NDczMTHHCWWSpjk0NzMxMcKmOTQ3NTQyxwllkqY5NDc1NDLDpjk0ODUyM8cPZZKmOTQ4NTIzks0BLM0BLKY5NDgxODXHXmWSpjk0ODE4NYKrdHlwZV9sZW5ndGgCpGZsYXTHQBfoojFCAAAaQuiiMUIAAAZCe/DwQgAAGkJ78PBCAAAGQsKHREMAABpCwodEQwAABkKjS4hDAAAaQqNLiEMAAAZCpjk0NTcxN8cXZZKmOTQ1NzE3xwwXB+HpviQbIb8T9CC/pjk0ODIzM8ceZZKmOTQ4MjMzgqt0eXBlX2xlbmd0aAGkZmxhdMcAF6Y5NDgxNzPHTmWSpjk0ODE3M4KrdHlwZV9sZW5ndGgCpGZsYXTHMBf44KRCAAAcQvjgpEIAAI5DAIAeQwAAHEIAgB5DAACOQ4SPakMAABxChI9qQwAAjkOmOTQ2OTE2xwllkqY5NDY5MTbCpjk0NjE4MMcJZZKmOTQ2MTgwwqY5NDgyODHHHmWSpjk0ODI4MYKrdHlwZV9sZW5ndGgBpGZsYXTHABemOTQ4MTIyxwxlkqY5NDgxMjKToJAApjk0ODEyN8ceZZKmOTQ4MTI3gqt0eXBlX2xlbmd0aASkZmxhdMcAF6Y5NDc4MjbHDWWSpjk0NzgyNqRkYXRhpjk0ODM3NMcjZZKmOTQ4Mzc0xxgWAAAAAAEAAAADAAAAAAAAAAMAAAACAAAApjk0NjM3N8cJZZKmOTQ2Mzc3wqY5NDc1MjjHCWWSpjk0NzUyOMKmOTQ4MTgxx05lkqY5NDgxODGCq3R5cGVfbGVuZ3RoAqRmbGF0xzAXAAAEQuCDrkIAAI5D4IOuQgAABEIAgCFDAACOQwCAIUMAAARCEL5rQwAAjkMQvmtDpjk0NzkyMscJZZKmOTQ3OTIywqY5NDgyMjbHI2WSpjk0ODIyNscYFgAAAAABAAAAAwAAAAAAAAADAAAAAgAAAKY5NDU4NTjHCWWSpjk0NTg1OMKmOTQ2OTMwxw1lkqY5NDY5MzCkZGF0YaY5NDU4NTnHCWWSpjk0NTg1OcOmOTQ1OTI2xwllkqY5NDU5MjbCpjk0ODQwMcctZZKmOTQ4NDAxgqt0eXBlX2xlbmd0aAKkZmxhdNgXAAACQgAAjkMAQI5DAACOQ6Y5NDg0MDXHLWWSpjk0ODQwNYKrdHlwZV9sZW5ndGgCpGZsYXTYFwAAjkMAABpCAACOQwBAjkOmOTQ4MzI4xw9lkqY5NDgzMjiSpG5vbmWQpjk0Njc1OMcJZZKmOTQ2NzU4w6Y5NDgzODbHD2WSpjk0ODM4NpKkbm9uZZCmOTQ4MTIxxyNlkqY5NDgxMjHHGBYAAAAAAQAAAAMAAAAAAAAAAwAAAAIAAACmOTQ4NDg3xwxlkqY5NDg0ODeToJAApjk0NTY2MscJZZKmOTQ1NjYyw6Y5NDY3NTnHCWWSpjk0Njc1OcOmOTQ4NDQ3xx5lkqY5NDg0NDeCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXpjk0ODEyNsceZZKmOTQ4MTI2gqt0eXBlX2xlbmd0aAKkZmxhdMcAF6Y5NDcxMjbHDWWSpjk0NzEyNqRkYXRhpjk0ODA4NMcNZZKmOTQ4MDg0yj+AAACmOTQ4Mjc1xwxlkqY5NDgyNzWToJAApjk0ODQ5M8ceZZKmOTQ4NDkzgqt0eXBlX2xlbmd0aAGkZmxhdMcAF6Y5NDU5MTPHF2WSpjk0NTkxM8cMFwfh6b4kGyG/E/Qgv6Y5NDY5MTfHCWWSpjk0NjkxN8KmOTQ4NDA2xw9lkqY5NDg0MDaSpG5vbmWQpjk0NzQ1MccJZZKmOTQ3NDUxw6Y5NDYyMjDHCWWSpjk0NjIyMMOmOTQ4MjMxxx5lkqY5NDgyMzGCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXpjk0NzExOMcNZZKmOTQ3MTE4pGRhdGGmOTQ3OTIxxwllkqY5NDc5MjHCpjk0ODAxM8cJZZKmOTQ4MDEzw6Y5NDgxODnHTmWSpjk0ODE4OYKrdHlwZV9sZW5ndGgCpGZsYXTHMBf44KRCAAAaQvjgpEIAAA5CAIAeQwAAGkIAgB5DAAAOQoSPakMAABpChI9qQwAADkKmOTQ3MTEzxwllkqY5NDcxMTPCpjk0ODM5OMcPZZKmOTQ4Mzk4kqRub25lkKY5NDgzMzPHHmWSpjk0ODMzM4KrdHlwZV9sZW5ndGgBpGZsYXTHABemOTQ4MzM3xy1lkqY5NDgzMzeCq3R5cGVfbGVuZ3RoAqRmbGF02BcAAARCAAAaQgAABEIAQI5Dpjk0ODEzNdhlkqY5NDgxMzWnI0ZGRkZGRqY5NDYyMTnHCWWSpjk0NjIxOcOjc3VigqdwYXlsb2FkyQAV5vZmk4azMzQ2MDg5NTM2NjYzODAxNzAwMtVooTG0MTI4NDgzOTA0MTU5NjM0NTIyMDDHB2imOTQ4NTI1szYzMTQ2MzkxNzcyODUxNTQ4NDHHB2imOTQ4NTIzszU5NDY5MTA0Nzk5NDkxMDMxODnHB2imOTQ4NTI0szcyMTQ1NzcxODQ5MjcwODczMTLAtDE1ODM1MzgzNTk5NTg0MTU5NTg4jKVwbG90c5CvYmFja2dyb3VuZGNvbG9yxwdopjk0ODUyMLVjYW1lcmFfcmVsYXRpdmVfbGlnaHTDqGNoaWxkcmVukYylcGxvdHPcAB+OrHRyYW5zcGFyZW5jeccHaKY5NDU5Mjalc3BhY2XHB2imOTQ1OTMxrHZlcnRleGFycmF5c4GocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAEQgAAHEIAAI5DAAAcQgAABEIAAI5DAACOQwAAjkOkbmFtZbhtZXNoLTIyODU0MTIyMTI1NjI2MDg2MzGpY2FtX3NwYWNlpGRhdGGodW5pZm9ybXPeABi+aW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyw6liYWNrbGlnaHTKAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAADIwgAAgD+nZGlmZnVzZccMFwAAgD8AAIA/AACAP6pjb2xvcnJhbmdlwqdsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAp2FtYmllbnTHDBdmZuY+ZmbmPmZm5j6pbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAp3BhdHRlcm7CrG5vcm1hbG1hdHJpeMckFwAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAP6J1dtcXAAAAAAAAAACnc2hhZGluZ8Koc3BlY3VsYXLHDBfNzEw+zcxMPs3MTD6nbm9ybWFsc8cMFwAAAAAAAAAAAAAAAKdwaWNraW5nwq9saWdodF9kaXJlY3Rpb27HDBcAAIA/AACAPwAAgD+pb2JqZWN0X2lkAK11bmlmb3JtX2NvbG9y2BcAAIA/AACAPwAAgD8AAIA/q2xpZ2h0X2NvbG9yxwwXAAAAPwAAAD8AAAA/q2RlcHRoX3NoaWZ0ygAAAAClY29sb3LCqXNoaW5pbmVzc8pCAAAAqGNvbG9ybWFwwqd2aXNpYmxlxwdopjk0NTkyNbFhdHRyaWJ1dGVfdXBkYXRlcscHaKY5NDgxNjGob3ZlcmRyYXfHB2imOTQ1OTI3r3VuaWZvcm1fdXBkYXRlcscHaKY5NDgxNjKlZmFjZXPHB2imOTQ4MTYwpHV1aWSzMjI4NTQxMjIxMjU2MjYwODYzMa12ZXJ0ZXhfc291cmNl2hPECnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzMgc3BlY3VsYXI7CnZlYzMgZ2V0X3NwZWN1bGFyKCl7cmV0dXJuIHNwZWN1bGFyO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gdmVjMyBub3JtYWxzOwp2ZWMzIGdldF9ub3JtYWxzKCl7cmV0dXJuIG5vcm1hbHM7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBhdHRlcm47CmJvb2wgZ2V0X3BhdHRlcm4oKXtyZXR1cm4gcGF0dGVybjt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGJvb2wgaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyOwpib29sIGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKXtyZXR1cm4gaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyO30KdW5pZm9ybSBmbG9hdCBiYWNrbGlnaHQ7CmZsb2F0IGdldF9iYWNrbGlnaHQoKXtyZXR1cm4gYmFja2xpZ2h0O30KdW5pZm9ybSB2ZWMzIGFtYmllbnQ7CnZlYzMgZ2V0X2FtYmllbnQoKXtyZXR1cm4gYW1iaWVudDt9CnVuaWZvcm0gbWF0MyBub3JtYWxtYXRyaXg7Cm1hdDMgZ2V0X25vcm1hbG1hdHJpeCgpe3JldHVybiBub3JtYWxtYXRyaXg7fQp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7CmZsb2F0IGdldF9zaGluaW5lc3MoKXtyZXR1cm4gc2hpbmluZXNzO30KdW5pZm9ybSB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CnVuaWZvcm0gdmVjMyBsaWdodF9jb2xvcjsKdmVjMyBnZXRfbGlnaHRfY29sb3IoKXtyZXR1cm4gbGlnaHRfY29sb3I7fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBjb2xvcjsKYm9vbCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQp1bmlmb3JtIHZlYzQgdW5pZm9ybV9jb2xvcjsKdmVjNCBnZXRfdW5pZm9ybV9jb2xvcigpe3JldHVybiB1bmlmb3JtX2NvbG9yO30KdW5pZm9ybSBib29sIHNoYWRpbmc7CmJvb2wgZ2V0X3NoYWRpbmcoKXtyZXR1cm4gc2hhZGluZzt9CnVuaWZvcm0gdmVjMyBkaWZmdXNlOwp2ZWMzIGdldF9kaWZmdXNlKCl7cmV0dXJuIGRpZmZ1c2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSB2ZWMzIGxpZ2h0X2RpcmVjdGlvbjsKdmVjMyBnZXRfbGlnaHRfZGlyZWN0aW9uKCl7cmV0dXJuIGxpZ2h0X2RpcmVjdGlvbjt9CgoKCm91dCB2ZWMyIGZyYWdfdXY7Cm91dCB2ZWMzIG9fbm9ybWFsOwpvdXQgdmVjMyBvX2NhbWRpcjsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7CnVuaWZvcm0gdmVjMyBleWVwb3NpdGlvbjsKCnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQoZmxvYXQgdil7cmV0dXJuIHZlYzQodiwgMC4wLCAwLjAsIDAuMCk7fQp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCmZsb2F0IF9ub3JtYWxpemUoZmxvYXQgdmFsLCBmbG9hdCBmcm9tLCBmbG9hdCB0byl7cmV0dXJuICh2YWwtZnJvbSkgLyAodG8gLSBmcm9tKTt9Cgp2ZWM0IGdldF9jb2xvcl9mcm9tX2NtYXAoZmxvYXQgdmFsdWUsIHNhbXBsZXIyRCBjb2xvcl9tYXAsIHZlYzIgY29sb3JyYW5nZSkgewogICAgZmxvYXQgY21pbiA9IGNvbG9ycmFuZ2UueDsKICAgIGZsb2F0IGNtYXggPSBjb2xvcnJhbmdlLnk7CiAgICBpZiAodmFsdWUgPD0gY21heCAmJiB2YWx1ZSA+PSBjbWluKSB7CiAgICAgICAgLy8gaW4gdmFsdWUgcmFuZ2UsIGNvbnRpbnVlIQogICAgfSBlbHNlIGlmICh2YWx1ZSA8IGNtaW4pIHsKICAgICAgICByZXR1cm4gZ2V0X2xvd2NsaXAoKTsKICAgIH0gZWxzZSBpZiAodmFsdWUgPiBjbWF4KSB7CiAgICAgICAgcmV0dXJuIGdldF9oaWdoY2xpcCgpOwogICAgfSBlbHNlIHsKICAgICAgICAvLyBpc25hbiBpcyBicm9rZW4gKG9mIGNvdXJzZSkgLS4tCiAgICAgICAgLy8gc28gaWYgb3V0c2lkZSB2YWx1ZSByYW5nZSBhbmQgbm90IHNtYWxsZXIvYmlnZ2VyIG1pbi9tYXggd2UgYXNzdW1lIE5hTgogICAgICAgIHJldHVybiBnZXRfbmFuX2NvbG9yKCk7CiAgICB9CiAgICBmbG9hdCBpMDEgPSBjbGFtcCgodmFsdWUgLSBjbWluKSAvIChjbWF4IC0gY21pbiksIDAuMCwgMS4wKTsKICAgIC8vIDEvMCBjb3JyZXNwb25kcyB0byB0aGUgY29ybmVyIG9mIHRoZSBjb2xvcm1hcCwgc28gdG8gcHJvcGVybHkgaW50ZXJwb2xhdGUKICAgIC8vIGJldHdlZW4gdGhlIGNvbG9ycywgd2UgbmVlZCB0byBzY2FsZSBpdCwgc28gdGhhdCB0aGUgZW5kcyBhcmUgYXQgMSAtIChzdGVwc2l6ZS8yKSBhbmQgMCsoc3RlcHNpemUvMikuCiAgICBmbG9hdCBzdGVwc2l6ZSA9IDEuMCAvIGZsb2F0KHRleHR1cmVTaXplKGNvbG9yX21hcCwgMCkpOwogICAgaTAxID0gKDEuMCAtIHN0ZXBzaXplKSAqIGkwMSArIDAuNSAqIHN0ZXBzaXplOwogICAgcmV0dXJuIHRleHR1cmUoY29sb3JfbWFwLCB2ZWMyKGkwMSwgMC4wKSk7Cn0KCnZlYzQgdmVydGV4X2NvbG9yKHZlYzMgY29sb3IsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdmVjNChjb2xvciwgMS4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcih2ZWM0IGNvbG9yLCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgcmV0dXJuIGNvbG9yOwp9CnZlYzQgdmVydGV4X2NvbG9yKGJvb2wgY29sb3IsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICAvLyBjb2xvciBzYW1wbGluZyBoYXBwZW5zIGluIGZyYWdtZW50IHNoYWRlcgogICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcihib29sIHZhbHVlLCB2ZWMyIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICAvLyBjb2xvciBzYW1wbGluZyBoYXBwZW5zIGluIGZyYWdtZW50IHNoYWRlcgogICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcihmbG9hdCB2YWx1ZSwgdmVjMiBjb2xvcnJhbmdlLCBzYW1wbGVyMkQgY29sb3JtYXApewogICAgaWYgKGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKSkgewogICAgICAgIHJldHVybiB2ZWM0KHZhbHVlLCAwLjAsIDAuMCwgMC4wKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGdldF9jb2xvcl9mcm9tX2NtYXAodmFsdWUsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKICAgIH0KfQoKdm9pZCByZW5kZXIodmVjNCBwb3NpdGlvbl93b3JsZCwgdmVjMyBub3JtYWwsIG1hdDQgdmlldywgbWF0NCBwcm9qZWN0aW9uKQp7CiAgICAvLyBub3JtYWwgaW4gd29ybGQgc3BhY2UKICAgIG9fbm9ybWFsID0gZ2V0X25vcm1hbG1hdHJpeCgpICogbm9ybWFsOwogICAgLy8gcG9zaXRpb24gaW4gY2xpcCBzcGFjZSAody8gZGVwdGgpCiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb24gKiB2aWV3ICogcG9zaXRpb25fd29ybGQ7IC8vIFRPRE8gY29uc2lkZXIgdXNpbmcgcHJvamVjdGlvbnZpZXcgZGlyZWN0bHkKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwogICAgLy8gZGlyZWN0aW9uIHRvIGNhbWVyYQogICAgb19jYW1kaXIgPSBwb3NpdGlvbl93b3JsZC54eXogLyBwb3NpdGlvbl93b3JsZC53IC0gZXllcG9zaXRpb247Cn0KCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpewogICAgLy8gZ2V0XyogZ2V0cyB0aGUgZ2xvYmFsIGlucHV0cyAodW5pZm9ybSwgc2FtcGxlciwgcG9zaXRpb24gYXJyYXkpCiAgICAvLyB0aG9zZSBmdW5jdGlvbnMgd2lsbCBnZXQgaW5zZXJ0ZWQgYnkgdGhlIHNoYWRlciBjcmVhdGlvbiBwaXBlbGluZQogICAgdmVjMyB2ZXJ0ZXhfcG9zaXRpb24gPSB0b3ZlYzMoZ2V0X3Bvc2l0aW9uKCkpOwogICAgaWYgKGlzbmFuKHZlcnRleF9wb3NpdGlvbi56KSkgewogICAgICAgIHZlcnRleF9wb3NpdGlvbi56ID0gMC4wOwogICAgfQogICAgdmVjNCBwb3NpdGlvbl93b3JsZCA9IG1vZGVsICogdmVjNCh2ZXJ0ZXhfcG9zaXRpb24sIDEpOwoKICAgIHJlbmRlcihwb3NpdGlvbl93b3JsZCwgZ2V0X25vcm1hbHMoKSwgdmlldywgcHJvamVjdGlvbik7CiAgICBmcmFnX3V2ID0gZ2V0X3V2KCk7CiAgICBmcmFnX3V2ID0gdmVjMigxLjAgLSBmcmFnX3V2LnksIGZyYWdfdXYueCk7CiAgICBmcmFnX2NvbG9yID0gdmVydGV4X2NvbG9yKGdldF9jb2xvcigpLCBnZXRfY29sb3JyYW5nZSgpLCBjb2xvcm1hcCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfVmVydGV4SUQpOwp9CgqvZnJhZ21lbnRfc291cmNl2he8CnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzMgc3BlY3VsYXI7CnZlYzMgZ2V0X3NwZWN1bGFyKCl7cmV0dXJuIHNwZWN1bGFyO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gdmVjMyBub3JtYWxzOwp2ZWMzIGdldF9ub3JtYWxzKCl7cmV0dXJuIG5vcm1hbHM7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBhdHRlcm47CmJvb2wgZ2V0X3BhdHRlcm4oKXtyZXR1cm4gcGF0dGVybjt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGJvb2wgaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyOwpib29sIGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKXtyZXR1cm4gaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyO30KdW5pZm9ybSBmbG9hdCBiYWNrbGlnaHQ7CmZsb2F0IGdldF9iYWNrbGlnaHQoKXtyZXR1cm4gYmFja2xpZ2h0O30KdW5pZm9ybSB2ZWMzIGFtYmllbnQ7CnZlYzMgZ2V0X2FtYmllbnQoKXtyZXR1cm4gYW1iaWVudDt9CnVuaWZvcm0gbWF0MyBub3JtYWxtYXRyaXg7Cm1hdDMgZ2V0X25vcm1hbG1hdHJpeCgpe3JldHVybiBub3JtYWxtYXRyaXg7fQp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7CmZsb2F0IGdldF9zaGluaW5lc3MoKXtyZXR1cm4gc2hpbmluZXNzO30KdW5pZm9ybSB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CnVuaWZvcm0gdmVjMyBsaWdodF9jb2xvcjsKdmVjMyBnZXRfbGlnaHRfY29sb3IoKXtyZXR1cm4gbGlnaHRfY29sb3I7fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBjb2xvcjsKYm9vbCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQp1bmlmb3JtIHZlYzQgdW5pZm9ybV9jb2xvcjsKdmVjNCBnZXRfdW5pZm9ybV9jb2xvcigpe3JldHVybiB1bmlmb3JtX2NvbG9yO30KdW5pZm9ybSBib29sIHNoYWRpbmc7CmJvb2wgZ2V0X3NoYWRpbmcoKXtyZXR1cm4gc2hhZGluZzt9CnVuaWZvcm0gdmVjMyBkaWZmdXNlOwp2ZWMzIGdldF9kaWZmdXNlKCl7cmV0dXJuIGRpZmZ1c2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSB2ZWMzIGxpZ2h0X2RpcmVjdGlvbjsKdmVjMyBnZXRfbGlnaHRfZGlyZWN0aW9uKCl7cmV0dXJuIGxpZ2h0X2RpcmVjdGlvbjt9CgppbiB2ZWMyIGZyYWdfdXY7CmluIHZlYzQgZnJhZ19jb2xvcjsKZmxhdCBpbiBpbnQgc2FtcGxlX2ZyYWdfY29sb3I7CgppbiB2ZWMzIG9fbm9ybWFsOwppbiB2ZWMzIG9fY2FtZGlyOwoKLy8gU21vb3RoZXMgb3V0IGVkZ2UgYXJvdW5kIDAgbGlnaHQgaW50ZW5zaXR5LCBzZWUgR0xNYWtpZQpmbG9hdCBzbW9vdGhfemVyb19tYXgoZmxvYXQgeCkgewogICAgY29uc3QgZmxvYXQgYyA9IDAuMDAzOTA2MjUsIHhzd2FwID0gMC42NDA2NzA3MTIwMTUyNzU5LCB5c3dhcCA9IDAuMjA1MDgzODM5MDAxOTA5NTU7CiAgICBjb25zdCBmbG9hdCBzaGlmdCA9IDEuMCArIHhzd2FwIC0geXN3YXA7CiAgICBmbG9hdCBwb3c4ID0geCArIHNoaWZ0OwogICAgcG93OCA9IHBvdzggKiBwb3c4OyBwb3c4ID0gcG93OCAqIHBvdzg7IHBvdzggPSBwb3c4ICogcG93ODsKICAgIHJldHVybiB4IDwgeXN3YXAgPyBjICogcG93OCA6IHg7Cn0KCnZlYzMgYmxpbm5waG9uZyh2ZWMzIE4sIHZlYzMgViwgdmVjMyBMLCB2ZWMzIGNvbG9yKXsKICAgIGZsb2F0IGJhY2tsaWdodCA9IGdldF9iYWNrbGlnaHQoKTsKICAgIGZsb2F0IGRpZmZfY29lZmYgPSBzbW9vdGhfemVyb19tYXgoZG90KEwsIC1OKSkgKwogICAgICAgIGJhY2tsaWdodCAqIHNtb290aF96ZXJvX21heChkb3QoTCwgTikpOwoKICAgIC8vIHNwZWN1bGFyIGNvZWZmaWNpZW50CiAgICB2ZWMzIEggPSBub3JtYWxpemUoTCArIFYpOwoKICAgIGZsb2F0IHNwZWNfY29lZmYgPSBwb3cobWF4KGRvdChILCAtTiksIDAuMCksIGdldF9zaGluaW5lc3MoKSkgKwogICAgICAgIGJhY2tsaWdodCAqIHBvdyhtYXgoZG90KEgsIE4pLCAwLjApLCBnZXRfc2hpbmluZXNzKCkpOwogICAgaWYgKGRpZmZfY29lZmYgPD0gMC4wKQogICAgICAgIHNwZWNfY29lZmYgPSAwLjA7CgogICAgLy8gZmluYWwgbGlnaHRpbmcgbW9kZWwKICAgIHJldHVybiBnZXRfbGlnaHRfY29sb3IoKSAqIHZlYzMoCiAgICAgICAgZ2V0X2RpZmZ1c2UoKSAqIGRpZmZfY29lZmYgKiBjb2xvciArCiAgICAgICAgZ2V0X3NwZWN1bGFyKCkgKiBzcGVjX2NvZWZmCiAgICApOwp9Cgp2ZWM0IGdldF9jb2xvcih2ZWMzIGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgcmV0dXJuIHZlYzQoY29sb3IsIDEuMCk7Cn0KCnZlYzQgZ2V0X2NvbG9yKHZlYzQgY29sb3IsIHZlYzIgdXYsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gY29sb3I7Cn0KCnZlYzQgZ2V0X2NvbG9yKGJvb2wgY29sb3IsIHZlYzIgdXYsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gZnJhZ19jb2xvcjsgIC8vIGNvbG9yIG5vdCBpbiB1bmlmb3JtCn0KCnZlYzQgZ2V0X2NvbG9yKHNhbXBsZXIyRCBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIGlmIChnZXRfcGF0dGVybigpKSB7CiAgICAgICAgdmVjMiBzaXplID0gdmVjMih0ZXh0dXJlU2l6ZShjb2xvciwgMCkpOwogICAgICAgIHZlYzIgcG9zID0gZ2xfRnJhZ0Nvb3JkLnh5OwogICAgICAgIHJldHVybiB0ZXhlbEZldGNoKGNvbG9yLCBpdmVjMihtb2QocG9zLngsIHNpemUueCksIG1vZChwb3MueSwgc2l6ZS55KSksIDApOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGV4dHVyZShjb2xvciwgdXYpOwogICAgfQp9CgpmbG9hdCBfbm9ybWFsaXplKGZsb2F0IHZhbCwgZmxvYXQgZnJvbSwgZmxvYXQgdG8pe3JldHVybiAodmFsLWZyb20pIC8gKHRvIC0gZnJvbSk7fQoKdmVjNCBnZXRfY29sb3JfZnJvbV9jbWFwKGZsb2F0IHZhbHVlLCBzYW1wbGVyMkQgY29sb3JfbWFwLCB2ZWMyIGNvbG9ycmFuZ2UpIHsKICAgIGZsb2F0IGNtaW4gPSBjb2xvcnJhbmdlLng7CiAgICBmbG9hdCBjbWF4ID0gY29sb3JyYW5nZS55OwogICAgaWYgKHZhbHVlIDw9IGNtYXggJiYgdmFsdWUgPj0gY21pbikgewogICAgICAgIC8vIGluIHZhbHVlIHJhbmdlLCBjb250aW51ZSEKICAgIH0gZWxzZSBpZiAodmFsdWUgPCBjbWluKSB7CiAgICAgICAgcmV0dXJuIGdldF9sb3djbGlwKCk7CiAgICB9IGVsc2UgaWYgKHZhbHVlID4gY21heCkgewogICAgICAgIHJldHVybiBnZXRfaGlnaGNsaXAoKTsKICAgIH0gZWxzZSB7CiAgICAgICAgLy8gaXNuYW4gaXMgYnJva2VuIChvZiBjb3Vyc2UpIC0uLQogICAgICAgIC8vIHNvIGlmIG91dHNpZGUgdmFsdWUgcmFuZ2UgYW5kIG5vdCBzbWFsbGVyL2JpZ2dlciBtaW4vbWF4IHdlIGFzc3VtZSBOYU4KICAgICAgICByZXR1cm4gZ2V0X25hbl9jb2xvcigpOwogICAgfQogICAgZmxvYXQgaTAxID0gY2xhbXAoKHZhbHVlIC0gY21pbikgLyAoY21heCAtIGNtaW4pLCAwLjAsIDEuMCk7CiAgICAvLyAxLzAgY29ycmVzcG9uZHMgdG8gdGhlIGNvcm5lciBvZiB0aGUgY29sb3JtYXAsIHNvIHRvIHByb3Blcmx5IGludGVycG9sYXRlCiAgICAvLyBiZXR3ZWVuIHRoZSBjb2xvcnMsIHdlIG5lZWQgdG8gc2NhbGUgaXQsIHNvIHRoYXQgdGhlIGVuZHMgYXJlIGF0IDEgLSAoc3RlcHNpemUvMikgYW5kIDArKHN0ZXBzaXplLzIpLgogICAgZmxvYXQgc3RlcHNpemUgPSAxLjAgLyBmbG9hdCh0ZXh0dXJlU2l6ZShjb2xvcl9tYXAsIDApKTsKICAgIGkwMSA9ICgxLjAgLSBzdGVwc2l6ZSkgKiBpMDEgKyAwLjUgKiBzdGVwc2l6ZTsKICAgIHJldHVybiB0ZXh0dXJlKGNvbG9yX21hcCwgdmVjMihpMDEsIDAuMCkpOwp9Cgp2ZWM0IGdldF9jb2xvcihib29sIGNvbG9yLCB2ZWMyIHV2LCB2ZWMyIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICBpZiAoZ2V0X2ludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcigpKSB7CiAgICAgICAgcmV0dXJuIGdldF9jb2xvcl9mcm9tX2NtYXAoZnJhZ19jb2xvci54LCBjb2xvcm1hcCwgY29sb3JyYW5nZSk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmcmFnX2NvbG9yOwogICAgfQp9Cgp2ZWM0IGdldF9jb2xvcihzYW1wbGVyMkQgdmFsdWVzLCB2ZWMyIHV2LCB2ZWMyIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICBmbG9hdCB2YWx1ZSA9IHRleHR1cmUodmFsdWVzLCB1dikueDsKICAgIHJldHVybiBnZXRfY29sb3JfZnJvbV9jbWFwKHZhbHVlLCBjb2xvcm1hcCwgY29sb3JyYW5nZSk7Cn0KCnZlYzQgZ2V0X2NvbG9yKHNhbXBsZXIyRCBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBzYW1wbGVyMkQgY29sb3JtYXApewogICAgcmV0dXJuIHRleHR1cmUoY29sb3IsIHV2KTsKfQoKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKICAgIHZlYzQgcmVhbF9jb2xvciA9IGdldF9jb2xvcih1bmlmb3JtX2NvbG9yLCBmcmFnX3V2LCBnZXRfY29sb3JyYW5nZSgpLCBjb2xvcm1hcCk7CiAgICB2ZWMzIHNoYWRlZF9jb2xvciA9IHJlYWxfY29sb3IucmdiOwoKICAgIGlmKGdldF9zaGFkaW5nKCkpewogICAgICAgIHZlYzMgTCA9IGdldF9saWdodF9kaXJlY3Rpb24oKTsKICAgICAgICB2ZWMzIE4gPSBub3JtYWxpemUob19ub3JtYWwpOwogICAgICAgIHZlYzMgbGlnaHQgPSBibGlubnBob25nKE4sIG5vcm1hbGl6ZShvX2NhbWRpciksIEwsIHJlYWxfY29sb3IucmdiKTsKICAgICAgICBzaGFkZWRfY29sb3IgPSBnZXRfYW1iaWVudCgpICogcmVhbF9jb2xvci5yZ2IgKyBsaWdodDsKICAgIH0KCiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChyZWFsX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKHJlYWxfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IHZlYzQoc2hhZGVkX2NvbG9yLCByZWFsX2NvbG9yLmEpOwp9CoindmlzaWJsZccHaKY5NDU5MjWkbmFtZdkhbGluZXNlZ21lbnRzLTE3NTI2OTg0MTgxNTAyNzM0MjI3qmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5NDgxNjWkdXVpZLQxNzUyNjk4NDE4MTUwMjczNDIyN6ljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5NDgxNjaodW5pZm9ybXOKp3BpY2tpbmfCqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAAAAAAK1saW5ld2lkdGhfZW5kygAAAACrZGVwdGhfc2hpZnTKtyfFrKtjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAAAAAKdsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAMjCAACAP69saW5ld2lkdGhfc3RhcnTKAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACIp3Zpc2libGXHB2imOTQ2MDc1pG5hbWXZIGxpbmVzZWdtZW50cy04NTMwOTQxNTI1MzI1ODg3MDQxqmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5NDgxNjmkdXVpZLM4NTMwOTQxNTI1MzI1ODg3MDQxqWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjk0ODE3MKh1bmlmb3Jtc4qncGlja2luZ8KpY29sb3JfZW5k2BcAAAAAAAAAAAAAAACPwvU9rWxpbmV3aWR0aF9lbmTKP4AAAKtkZXB0aF9zaGlmdMoAAAAAq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAACPwvU9p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIMEAAIA/r2xpbmV3aWR0aF9zdGFydMo/gAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAIindmlzaWJsZccHaKY5NDYxMTCkbmFtZdkgbGluZXNlZ21lbnRzLTcwMzA1ODE0MTA4NjQzNDY3NzmqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjk0ODE3M6R1dWlkszcwMzA1ODE0MTA4NjQzNDY3NzmpY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTQ4MTc0qHVuaWZvcm1ziqdwaWNraW5nwqljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAM3MTD2tbGluZXdpZHRoX2VuZMo/gAAAq2RlcHRoX3NoaWZ0ygAAAACrY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAM3MTD2nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgwQAAgD+vbGluZXdpZHRoX3N0YXJ0yj+AAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAiKd2aXNpYmxlxwdopjk0NjE0NaRuYW1l2SFsaW5lc2VnbWVudHMtMTQwNjMyODA0OTg3NTAwNDA1OTKqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjk0ODE3N6R1dWlktDE0MDYzMjgwNDk4NzUwMDQwNTkyqWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjk0ODE3OKh1bmlmb3Jtc4qncGlja2luZ8KpY29sb3JfZW5k2BcAAAAAAAAAAAAAAACPwvU9rWxpbmV3aWR0aF9lbmTKP4AAAKtkZXB0aF9zaGlmdMoAAAAAq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAACPwvU9p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIMEAAIA/r2xpbmV3aWR0aF9zdGFydMo/gAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAIindmlzaWJsZccHaKY5NDYxODCkbmFtZdkhbGluZXNlZ21lbnRzLTE2MDI3ODEzMzI4NDI3NjI0NzU0qmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5NDgxODGkdXVpZLQxNjAyNzgxMzMyODQyNzYyNDc1NKljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5NDgxODKodW5pZm9ybXOKp3BpY2tpbmfCqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAzcxMPa1saW5ld2lkdGhfZW5kyj+AAACrZGVwdGhfc2hpZnTKAAAAAKtjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAzcxMPadsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAACDBAACAP69saW5ld2lkdGhfc3RhcnTKP4AAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACIp3Zpc2libGXHB2imOTQ2MjE5pG5hbWXZIGxpbmVzZWdtZW50cy01ODMzNjg5MTQwNzQ2NTk4MjI4qmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5NDgxODWkdXVpZLM1ODMzNjg5MTQwNzQ2NTk4MjI4qWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjk0ODE4Nqh1bmlmb3Jtc4qncGlja2luZ8KpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAIA/rWxpbmV3aWR0aF9lbmTKP4AAAKtkZXB0aF9zaGlmdMoAAAAAq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIEEAAIA/r2xpbmV3aWR0aF9zdGFydMo/gAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAIindmlzaWJsZccHaKY5NDYyMjikbmFtZdkgbGluZXNlZ21lbnRzLTQ4MDY0ODk3NzI2MDY5MzAyOTKqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjk0ODE4OaR1dWlkszQ4MDY0ODk3NzI2MDY5MzAyOTKpY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTQ4MTkwqHVuaWZvcm1ziqdwaWNraW5nwqljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+tbGluZXdpZHRoX2VuZMo/gAAAq2RlcHRoX3NoaWZ0ygAAAACrY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+vbGluZXdpZHRoX3N0YXJ0yj+AAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAA3gAQrHRyYW5zcGFyZW5jeccHaKY5NDYzNzalc3BhY2XHB2imOTQ2MzgxrHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgD8AAIA/AACAPwAAAAAAAAAAAACAPwAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAvwAAAL8AAAA/AAAAvwAAAL8AAAA/AAAAPwAAAD+kbmFtZbh0ZXh0LTI1MjI1NTUxNTg1NzgyNTc2ODSpY2FtX3NwYWNlpGRhdGGodW5pZm9ybXPeABircHhfcGVyX3VuaXTKP4AAAKlnbG93Y29sb3LYFwAAAAAAAAAAAAAAAAAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACpYmlsbGJvYXJkwqhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAK1wcmVwcm9qZWN0aW9ux0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dhbWJpZW50xwwXZmbmPmZm5j5mZuY+qW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK1kaXN0YW5jZWZpZWxkiqltaW5GaWx0ZXKsTGluZWFyRmlsdGVyqmFuaXNvdHJvcHnKQYAAAKltYWdGaWx0ZXKsTGluZWFyRmlsdGVypXdyYXBTrlJlcGVhdFdyYXBwaW5npGRhdGGtdGV4dHVyZV9hdGxhc6x0aHJlZV9mb3JtYXSpUmVkRm9ybWF0pHNpemWSzQQAzQQApXdyYXBUrlJlcGVhdFdyYXBwaW5npHR5cGWnU2FtcGxlcqp0aHJlZV90eXBlqUZsb2F0VHlwZapjb2xvcnJhbmdlwrJhdGxhc190ZXh0dXJlX3NpemXKRIAAAKtzdHJva2V3aWR0aMoAAAAAq3N0cm9rZWNvbG9y2BcAAAAAAAAAAAAAAAAAAAAAqWdsb3d3aWR0aMoAAAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAAlkMAAJZDpWltYWdlwqlvYmplY3RfaWQAqnNoYXBlX3R5cGUDsHRyYW5zZm9ybV9tYXJrZXLCq2xpZ2h0X2NvbG9yxwwXAAAAPwAAAD8AAAA/q2RlcHRoX3NoaWZ0ygAAAACoY29sb3JtYXDCp3Zpc2libGXHB2imOTQ2MjE0q21hcmtlcnNwYWNlxwdopjk0NjM5MLFhdHRyaWJ1dGVfdXBkYXRlcscHaKY5NDgyMjeob3ZlcmRyYXfHB2imOTQ2Mzc3r3VuaWZvcm1fdXBkYXRlcscHaKY5NDgyMjilZmFjZXPHB2imOTQ4MjI2pHV1aWSzMjUyMjU1NTE1ODU3ODI1NzY4NK12ZXJ0ZXhfc291cmNl2iCWCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjNCBnbG93Y29sb3I7CnZlYzQgZ2V0X2dsb3djb2xvcigpe3JldHVybiBnbG93Y29sb3I7fQp1bmlmb3JtIHZlYzQgc3Ryb2tlY29sb3I7CnZlYzQgZ2V0X3N0cm9rZWNvbG9yKCl7cmV0dXJuIHN0cm9rZWNvbG9yO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgZ2xvd3dpZHRoOwpmbG9hdCBnZXRfZ2xvd3dpZHRoKCl7cmV0dXJuIGdsb3d3aWR0aDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBmbG9hdCBzdHJva2V3aWR0aDsKZmxvYXQgZ2V0X3N0cm9rZXdpZHRoKCl7cmV0dXJuIHN0cm9rZXdpZHRoO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKCgoKLy8gUGVyIGluc3RhbmNlIGF0dHJpYnV0ZXM6IAppbiB2ZWMyIG1hcmtlcnNpemU7CnZlYzIgZ2V0X21hcmtlcnNpemUoKXtyZXR1cm4gbWFya2Vyc2l6ZTt9CmluIHZlYzQgcm90YXRpb25zOwp2ZWM0IGdldF9yb3RhdGlvbnMoKXtyZXR1cm4gcm90YXRpb25zO30KaW4gdmVjNCBjb2xvcjsKdmVjNCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQppbiB2ZWMzIHBvczsKdmVjMyBnZXRfcG9zKCl7cmV0dXJuIHBvczt9CmluIHZlYzIgcXVhZF9vZmZzZXQ7CnZlYzIgZ2V0X3F1YWRfb2Zmc2V0KCl7cmV0dXJuIHF1YWRfb2Zmc2V0O30KaW4gdmVjNCB1dl9vZmZzZXRfd2lkdGg7CnZlYzQgZ2V0X3V2X29mZnNldF93aWR0aCgpe3JldHVybiB1dl9vZmZzZXRfd2lkdGg7fQppbiB2ZWMzIG1hcmtlcl9vZmZzZXQ7CnZlYzMgZ2V0X21hcmtlcl9vZmZzZXQoKXtyZXR1cm4gbWFya2VyX29mZnNldDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleF9kaW07CgpvdXQgdmVjNCBmcmFnX2NvbG9yOwpvdXQgdmVjMiBmcmFnX3V2OwpvdXQgZmxvYXQgZnJhZ191dnNjYWxlOwpvdXQgZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwpvdXQgdmVjNCBmcmFnX3V2X29mZnNldF93aWR0aDsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCiNkZWZpbmUgQU5USUFMSUFTX1JBRElVUyAwLjgKCgptYXQ0IHFtYXQodmVjNCBxdWF0KXsKICAgIGZsb2F0IG51bSA9IHF1YXQueCAqIDIuMDsKICAgIGZsb2F0IG51bTIgPSBxdWF0LnkgKiAyLjA7CiAgICBmbG9hdCBudW0zID0gcXVhdC56ICogMi4wOwogICAgZmxvYXQgbnVtNCA9IHF1YXQueCAqIG51bTsKICAgIGZsb2F0IG51bTUgPSBxdWF0LnkgKiBudW0yOwogICAgZmxvYXQgbnVtNiA9IHF1YXQueiAqIG51bTM7CiAgICBmbG9hdCBudW03ID0gcXVhdC54ICogbnVtMjsKICAgIGZsb2F0IG51bTggPSBxdWF0LnggKiBudW0zOwogICAgZmxvYXQgbnVtOSA9IHF1YXQueSAqIG51bTM7CiAgICBmbG9hdCBudW0xMCA9IHF1YXQudyAqIG51bTsKICAgIGZsb2F0IG51bTExID0gcXVhdC53ICogbnVtMjsKICAgIGZsb2F0IG51bTEyID0gcXVhdC53ICogbnVtMzsKICAgIHJldHVybiBtYXQ0KAogICAgICAgICgxLjAgLSAobnVtNSArIG51bTYpKSwgKG51bTcgKyBudW0xMiksICAgICAgICAobnVtOCAtIG51bTExKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtNyAtIG51bTEyKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTYpKSwgKG51bTkgKyBudW0xMCksICAgICAgICAwLjAsCiAgICAgICAgKG51bTggKyBudW0xMSksICAgICAgICAobnVtOSAtIG51bTEwKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTUpKSwgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDEuMAogICAgKTsKfQoKZmxvYXQgZGlzdGFuY2VmaWVsZF9zY2FsZSgpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVsczsgY29udmVydCB0byBkaW1lbnNpb25sZXNzCiAgICAvLyB4LWNvb3JkaW5hdGUgb2YgdGV4dHVyZSBpbnN0ZWFkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHByb2dyYW1tYXRpYyB1dgogICAgLy8gZGlzdGFuY2UgZmllbGRzIGluIGZyYWdtZW50IHNoYWRlci4gU2VlIGFsc28gY29tbWVudHMgYmVsb3cuCiAgICB2ZWM0IHV2X3JlY3QgPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICBmbG9hdCBwaXhzaXplX3ggPSAodXZfcmVjdC56IC0gdXZfcmVjdC54KSAqIGdldF9hdGxhc190ZXh0dXJlX3NpemUoKTsKICAgIHJldHVybiAtMS4wL3BpeHNpemVfeDsKfQoKdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm1hdDIgZGlhZ20odmVjMiB2KXsKICAgIHJldHVybiBtYXQyKHYueCwgMC4wLCAwLjAsIHYueSk7Cn0KCmZsb2F0IF9kZXRlcm1pbmFudChtYXQyIG0pIHsKICByZXR1cm4gbVswXVswXSAqIG1bMV1bMV0gLSBtWzBdWzFdICogbVsxXVswXTsKfQoKdm9pZCBtYWluKCl7CiAgICAvLyBnZXRfcG9zKCkgcmV0dXJucyB0aGUgcG9zaXRpb24gb2YgdGhlIHNjYXR0ZXIgbWFya2VyCiAgICAvLyBnZXRfcG9zaXRpb24oKSByZXR1cm5zIHRoZSAocmVsYXRpdmUpIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IHF1YWQgdmVydGV4CgogICAgdmVjMiBiYm94X3JhZGl1cyA9IDAuNSAqIGdldF9tYXJrZXJzaXplKCk7CiAgICB2ZWMyIHNwcml0ZV9iYm94X2NlbnRyZSA9IGdldF9xdWFkX29mZnNldCgpICsgYmJveF9yYWRpdXM7CgogICAgbWF0NCBwdmlldyA9IHByb2plY3Rpb24gKiB2aWV3OwogICAgbWF0NCB0cmFucyA9IGdldF90cmFuc2Zvcm1fbWFya2VyKCkgPyBtb2RlbCA6IG1hdDQoMS4wKTsKCiAgICAvLyBDb21wdXRlIGNlbnRyZSBvZiBiaWxsYm9hcmQgaW4gY2xpcHBpbmcgY29vcmRpbmF0ZXMKICAgIC8vIEFsd2F5cyB0cmFuc2Zvcm0gdGV4dC9zY2F0dGVyIHBvc2l0aW9uIGFyZ3VtZW50CiAgICB2ZWM0IGRhdGFfcG9pbnQgPSBnZXRfcHJlcHJvamVjdGlvbigpICogbW9kZWwgKiB2ZWM0KHRvdmVjMyhnZXRfcG9zKCkpLCAxKTsKICAgIC8vIG1heWJlIHRyYW5zZm9ybSBtYXJrZXJfb2Zmc2V0ICsgZ2x5cGggb2Zmc2V0cwogICAgZGF0YV9wb2ludCA9IHZlYzQoZGF0YV9wb2ludC54eXogLyBkYXRhX3BvaW50LncgKyBtYXQzKHRyYW5zKSAqIHRvdmVjMyhnZXRfbWFya2VyX29mZnNldCgpKSwgMSk7CiAgICBkYXRhX3BvaW50ID0gcHZpZXcgKiBkYXRhX3BvaW50OwoKICAgIC8vIENvbXB1dGUgdHJhbnNmb3JtIGZvciB0aGUgb2Zmc2V0IHZlY3RvcnMgZnJvbSB0aGUgY2VudHJhbCBwb2ludAogICAgdHJhbnMgPSAoZ2V0X2JpbGxib2FyZCgpID8gcHJvamVjdGlvbiA6IHB2aWV3KSAqIHFtYXQoZ2V0X3JvdGF0aW9ucygpKSAqIHRyYW5zOwogICAgdmVjNCBzcHJpdGVfY2VudGVyID0gdHJhbnMgKiB2ZWM0KHNwcml0ZV9iYm94X2NlbnRyZSwgMCwgMCk7CgogICAgdmVjNCB2Y2xpcCA9IGRhdGFfcG9pbnQgKyBzcHJpdGVfY2VudGVyOwoKICAgIC8vIEV4dHJhIGJ1ZmZlcmluZyBpcyByZXF1aXJlZCBhcm91bmQgc3ByaXRlcyB3aGljaCBhcmUgYW50aWFsaWFzZWQgc28gdGhhdAogICAgLy8gdGhlIGFudGlhbGlhcyBibHVyIGRvZXNuJ3QgZ2V0IGN1dCBvZmYgKHNlZSAjMTUpLiBUaGlzIGJsdXIgZmFsbHMgdG8KICAgIC8vIHplcm8gYXQgYSByYWRpdXMgb2YgQU5USUFMSUFTX1JBRElVUyBwaXhlbHMgaW4gdGhlIHZpZXdwb3J0IGNvb3JkaW5hdGVzCiAgICAvLyBhbmQgd2Ugd2FudCB0byBidWZmZXIgdGhlIHZlcnRpY2VzIGluIHRoZSAqc291cmNlKiBzcHJpdGUgY29vcmRpbmF0ZQogICAgLy8gc3lzdGVtIHNvIHRoYXQgd2UgZ2V0IHRoaXMgYW1vdW50IGluIHRoZSBvdXRwdXQgY29vcmRpbmF0ZXMuCiAgICAvLwogICAgLy8gSGVyZSB3ZSBjYWxjdWxhdGUgdGhlIGRlcml2YXRpdmUgb2YgdGhlIG1hcHBpbmcgZnJvbSBzcHJpdGUgeHkKICAgIC8vIGNvb3JkaW5hdGVzIChkZWZpbmVkIGJ5IGB0cmFuc2ApIGludG8gdGhlIHZpZXdwb3J0IHBpeGVsIGNvb3JkaW5hdGVzLgogICAgLy8gVGhlIGRlcml2YXRpdmUgbmVlZHMgdG8gaW5jbHVkZSB0aGUgcHJvcGVyIHRlcm0gZm9yIHRoZSBwZXJzcGVjdGl2ZQogICAgLy8gZGl2aWRlIGludG8gTkRDLCBldmFsdWF0ZWQgYXQgdGhlIGNlbnRyZSBwb2ludCBgdmNsaXBgLgogICAgbWF0NCBkX25kY19kX2NsaXAgPSBtYXQ0KAogICAgICAgIDEuMC92Y2xpcC53LCAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLAogICAgICAgIC12Y2xpcC54eXovKHZjbGlwLncqdmNsaXAudyksICAgICAgICAgIDAuMAogICAgKTsKICAgIG1hdDIgZHh5dl9keHlzID0gZGlhZ20oMC41ICogcHhfcGVyX3VuaXQgKiBnZXRfcmVzb2x1dGlvbigpKSAqIG1hdDIoZF9uZGNfZF9jbGlwKnRyYW5zKTsKICAgIC8vIE5vdywgb3VyIGJ1ZmZlciBzaXplIGlzIGV4cHJlc3NlZCBpbiB2aWV3cG9ydCBwaXhlbHMgYnV0IHdlIGdldCBiYWNrIHRvCiAgICAvLyB0aGUgc3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHVzaW5nIHRoZSBzY2FsZSBmYWN0b3Igb2YgdGhlCiAgICAvLyB0cmFuc2Zvcm1hdGlvbiAoZm9yIGlzb3Ryb3BpYyB0cmFuc2Zvcm1hdGlvbnMpLiBGb3IgYW5pc290cm9waWMKICAgIC8vIHRyYW5zZm9ybWF0aW9ucywgdGhlIGdlb21ldHJpYyBtZWFuIG9mIHRoZSB0d28gcHJpbmNpcGxlIHNjYWxlIGZhY3RvcnMKICAgIC8vIGlzIGEgcmVhc29uYWJsZSBjb21wcm9taXNlOgogICAgZmxvYXQgdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgPSBzcXJ0KGFicyhfZGV0ZXJtaW5hbnQoZHh5dl9keHlzKSkpOwoKICAgIC8vIEluIHRoZSBmcmFnbWVudCBzaGFkZXIgd2Ugd2FudCBvdXIgc2lnbmVkIGRpc3RhbmNlIGluIHZpZXdwb3J0IChwaXhlbCkKICAgIC8vIGNvb3JkcyBmb3IgZGlyZWN0IHVzZSBpbiBhbnRpYWxpYXNpbmcgc3RlcCBmdW5jdGlvbnMuIFdlIHRoZXJlZm9yZSBuZWVkCiAgICAvLyBhIHNjYWxpbmcgZmFjdG9yIHNpbWlsYXIgdG8gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUsIGJ1dCBpbmNsdWRpbmcKICAgIC8vIHRoZSB1di0+c3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHNjYWxpbmcgZmFjdG9yIGFzIHdlbGwuICBXZSBjaG9vc2UgdG8KICAgIC8vIHVzZSB0aGUgYm91bmRpbmcgYm94ICp4KiB3aWR0aCBmb3IgdGhpcy4gVGhpcyBjb21lcyB3aXRoIHNvbWUKICAgIC8vIGNvbnNpc3RlbmN5IGNvbmRpdGlvbnM6CiAgICAvLyAqIEZvciBwcm9jZWR1cmFsIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0aGUgc3ByaXRlIGJvdW5kaW5nIGJveCB0byBiZQogICAgLy8gICBzcXVhcmUuIChJZiBub3QsIHRoZSB1diBjb29yZGluYXRlcyB3aWxsIGJlIGFuaXNvdHJvcGljYWxseSBzY2FsZWQgYW5kCiAgICAvLyAgIGFueSBjYWxjdWxhdGlvbiBiYXNlZCBvbiB0aGVtIHdpbGwgbm90IGJlIGEgZGlzdGFuY2UgZnVuY3Rpb24uKQogICAgLy8gKiBGb3Igc2FtcGxlZCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdG8gY29uc2lzdGVudGx5IGNob29zZSB0aGUgKngqCiAgICAvLyAgIGZvciB0aGUgc2NhbGluZyBpbiBnZXRfZGlzdGFuY2VmaWVsZF9zY2FsZSgpLgogICAgZmxvYXQgc3ByaXRlX2Zyb21fdV9zY2FsZSA9IG1pbihhYnMoZ2V0X21hcmtlcnNpemUoKS54KSwgYWJzKGdldF9tYXJrZXJzaXplKCkueSkpOwogICAgZnJhZ191dnNjYWxlID0gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgKiBzcHJpdGVfZnJvbV91X3NjYWxlOwogICAgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlID0gZGlzdGFuY2VmaWVsZF9zY2FsZSgpOwoKICAgIC8vIGFkZCBwYWRkaW5nIGZvciBBQSwgc3Ryb2tlIGFuZCBnbG93IChub24gbmF0aXZlIGRpc3RhbmNlZmllbGRzIGRvbid0IG5lZWQKICAgIC8vIEFBIHBhZGRpbmcgYnV0IENJUkNMRSBldGMgZG8pCiAgICBmbG9hdCBwcHUgPSBnZXRfcHhfcGVyX3VuaXQoKTsKICAgIHZlYzIgcGFkZGVkX2Jib3hfc2l6ZSA9IGJib3hfcmFkaXVzICsgKAogICAgICAgIEFOVElBTElBU19SQURJVVMgKyBtYXgoMC4wLCBnZXRfc3Ryb2tld2lkdGgoKSAqIHBwdSkgKyBtYXgoMC4wLCBnZXRfZ2xvd3dpZHRoKCkgKiBwcHUpCiAgICApIC8gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGU7CiAgICB2ZWMyIHV2X3BhZF9zY2FsZSA9IHBhZGRlZF9iYm94X3NpemUgLyBiYm94X3JhZGl1czsKCiAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcigpKTsKICAgIGZyYWdfdXZfb2Zmc2V0X3dpZHRoID0gZ2V0X3V2X29mZnNldF93aWR0aCgpOwogICAgLy8gZ2V0X3V2KCkgcmV0dXJucyAoMCwgMCksICgxLCAwKSwgKDAsIDEpIG9yICgxLCAxKQogICAgLy8gdG8gYWNjb21vZGF0ZSBzdHJva2UgYW5kIGdsb3d3aWR0aCB3ZSBuZWVkIHRvIGV4dHJ1ZGUgdXYncyBvdXR3YXJkcyBmcm9tICgwLjUsIDAuNSkKICAgIGZyYWdfdXYgPSB2ZWMyKDAuNSkgKyAoZ2V0X3V2KCkgLSB2ZWMyKDAuNSkpICogdXZfcGFkX3NjYWxlOwoKICAgIC8vIHNjcmVlbiBzcGFjZSBjb29yZGluYXRlcyBvZiB0aGUgcG9zaXRpb24KICAgIHZlYzQgcXVhZF92ZXJ0ZXggPSAodHJhbnMgKiB2ZWM0KDIuMCAqIHBhZGRlZF9iYm94X3NpemUgKiBnZXRfcG9zaXRpb24oKSwgMC4wLCAwLjApKTsKICAgIGdsX1Bvc2l0aW9uID0gdmNsaXAgKyBxdWFkX3ZlcnRleDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwp9CgqvZnJhZ21lbnRfc291cmNl2hwICnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzQgZ2xvd2NvbG9yOwp2ZWM0IGdldF9nbG93Y29sb3IoKXtyZXR1cm4gZ2xvd2NvbG9yO30KdW5pZm9ybSB2ZWM0IHN0cm9rZWNvbG9yOwp2ZWM0IGdldF9zdHJva2Vjb2xvcigpe3JldHVybiBzdHJva2Vjb2xvcjt9CnVuaWZvcm0gYm9vbCBjb2xvcm1hcDsKYm9vbCBnZXRfY29sb3JtYXAoKXtyZXR1cm4gY29sb3JtYXA7fQp1bmlmb3JtIGZsb2F0IGdsb3d3aWR0aDsKZmxvYXQgZ2V0X2dsb3d3aWR0aCgpe3JldHVybiBnbG93d2lkdGg7fQp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleHR1cmVfc2l6ZTsKZmxvYXQgZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpe3JldHVybiBhdGxhc190ZXh0dXJlX3NpemU7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gZmxvYXQgcHhfcGVyX3VuaXQ7CmZsb2F0IGdldF9weF9wZXJfdW5pdCgpe3JldHVybiBweF9wZXJfdW5pdDt9CnVuaWZvcm0gaW50IHNoYXBlX3R5cGU7CmludCBnZXRfc2hhcGVfdHlwZSgpe3JldHVybiBzaGFwZV90eXBlO30KdW5pZm9ybSBzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZDsKdW5pZm9ybSB2ZWM0IG5hbl9jb2xvcjsKdmVjNCBnZXRfbmFuX2NvbG9yKCl7cmV0dXJuIG5hbl9jb2xvcjt9CnVuaWZvcm0gZmxvYXQgc3Ryb2tld2lkdGg7CmZsb2F0IGdldF9zdHJva2V3aWR0aCgpe3JldHVybiBzdHJva2V3aWR0aDt9CnVuaWZvcm0gYm9vbCBpbWFnZTsKYm9vbCBnZXRfaW1hZ2UoKXtyZXR1cm4gaW1hZ2U7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gYm9vbCBiaWxsYm9hcmQ7CmJvb2wgZ2V0X2JpbGxib2FyZCgpe3JldHVybiBiaWxsYm9hcmQ7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSBib29sIGNvbG9ycmFuZ2U7CmJvb2wgZ2V0X2NvbG9ycmFuZ2UoKXtyZXR1cm4gY29sb3JyYW5nZTt9CnVuaWZvcm0gdmVjNCBsb3djbGlwOwp2ZWM0IGdldF9sb3djbGlwKCl7cmV0dXJuIGxvd2NsaXA7fQp1bmlmb3JtIGJvb2wgdHJhbnNmb3JtX21hcmtlcjsKYm9vbCBnZXRfdHJhbnNmb3JtX21hcmtlcigpe3JldHVybiB0cmFuc2Zvcm1fbWFya2VyO30KCmluIHZlYzQgZnJhZ19jb2xvcjsKaW4gdmVjMiBmcmFnX3V2OwoKI2RlZmluZSBDSVJDTEUgICAgICAgICAgICAwCiNkZWZpbmUgUkVDVEFOR0xFICAgICAgICAgMQojZGVmaW5lIFJPVU5ERURfUkVDVEFOR0xFIDIKI2RlZmluZSBESVNUQU5DRUZJRUxEICAgICAzCiNkZWZpbmUgVFJJQU5HTEUgICAgICAgICAgNAoKI2RlZmluZSBNX1NRUlRfMiAgICAgICAgICAxLjQxNDIxMzUKCgovLyBIYWxmIHdpZHRoIG9mIGFudGlhbGlhc2luZyBzbW9vdGhzdGVwCiNkZWZpbmUgQU5USUFMSUFTX1JBRElVUyAwLjgKCmluIGZsb2F0IGZyYWdfdXZzY2FsZTsKaW4gZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwppbiB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCi8vIFRoZXNlIHZlcnNpb25zIG9mIGFhc3RlcCBhc3N1bWUgdGhhdCBgZGlzdGAgaXMgYSBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb24KLy8gd2hpY2ggaGFzIGJlZW4gc2NhbGVkIHRvIGJlIGluIHVuaXRzIG9mIHBpeGVscy4KZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMSArIEFOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgdGhyZXNob2xkMiwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxK0FOVElBTElBU19SQURJVVMsIGRpc3QpIC0KICAgICAgICAgICBzbW9vdGhzdGVwKHRocmVzaG9sZDItQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMitBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKLy8gUHJvY2VkdXJhbCBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb25zIG9uIHRoZSB1diBjb29yZGluYXRlIHBhdGNoIFswLDFdeFswLDFdCi8vIE5vdGUgdGhhdCBmb3IgYW50aWFsaWFzaW5nIHRvIHdvcmsgcHJvcGVybHkgdGhlc2Ugc2hvdWxkIGJlICpzY2FsZSBwcmVzZXJ2aW5nKgovLyAoSWYgeW91IG11c3QgcmVzY2FsZSB1diwgbWFrZSBzdXJlIHRvIHB1dCB0aGUgc2NhbGUgZmFjdG9yIGJhY2sgaW4gbGF0ZXIuKQpmbG9hdCB0cmlhbmdsZSh2ZWMyIFApewogICAgUCAtPSB2ZWMyKDAuNSk7CiAgICBmbG9hdCB4ID0gTV9TUVJUXzIgKiAoUC54IC0gUC55KTsKICAgIGZsb2F0IHkgPSBNX1NRUlRfMiAqIChQLnggKyBQLnkpOwogICAgZmxvYXQgcjEgPSBtYXgoYWJzKHgpLCBhYnMoeSkpIC0gMS4wLygyLjAqTV9TUVJUXzIpOwogICAgZmxvYXQgcjIgPSBQLnk7CiAgICByZXR1cm4gLW1heChyMSxyMik7Cn0KCmZsb2F0IGNpcmNsZSh2ZWMyIHV2KXsKICAgIHJldHVybiAwLjUtbGVuZ3RoKHV2LXZlYzIoMC41KSk7Cn0KCmZsb2F0IHJlY3RhbmdsZSh2ZWMyIHV2KXsKICAgIHZlYzIgZCA9IG1heCgtdXYsIHV2LXZlYzIoMSkpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSkpOwp9CgpmbG9hdCByb3VuZGVkX3JlY3RhbmdsZSh2ZWMyIHV2LCB2ZWMyIHRsLCB2ZWMyIGJyKXsKICAgIHZlYzIgZCA9IG1heCh0bC11diwgdXYtYnIpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSktdGwueCk7Cn0KCnZvaWQgZmlsbChib29sIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBmaWxsY29sb3IsIGluZmlsbCk7Cn0KCnZvaWQgZmlsbChzYW1wbGVyMkQgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgdmVjNCBpbV9jb2xvciA9IHRleHR1cmUoaW1hZ2UsIHV2Lnl4KTsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBpbV9jb2xvciwgaW5maWxsKTsKfQoKdm9pZCBzdHJva2UodmVjNCBzdHJva2Vjb2xvciwgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlLCBmbG9hdCB3aWR0aCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICBpZiAod2lkdGggIT0gMC4wKXsKICAgICAgICBmbG9hdCB0ID0gYWFzdGVwKG1pbih3aWR0aCwgMC4wKSwgbWF4KHdpZHRoLCAwLjApLCBzaWduZWRfZGlzdGFuY2UpOwogICAgICAgIHZlYzQgYmdfY29sb3IgPSBtaXgoY29sb3IsIHZlYzQoc3Ryb2tlY29sb3IucmdiLCAwKSwgZmxvYXQoc2lnbmVkX2Rpc3RhbmNlIDwgMC41ICogd2lkdGgpKTsKICAgICAgICBjb2xvciA9IG1peChiZ19jb2xvciwgc3Ryb2tlY29sb3IsIHQpOwogICAgfQp9Cgp2b2lkIGdsb3codmVjNCBnbG93Y29sb3IsIGZsb2F0IHNpZ25lZF9kaXN0YW5jZSwgZmxvYXQgaW5zaWRlLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGZsb2F0IGdsb3dfd2lkdGggPSBnZXRfZ2xvd3dpZHRoKCkgKiBnZXRfcHhfcGVyX3VuaXQoKTsKICAgIGZsb2F0IHN0cm9rZV93aWR0aCA9IGdldF9zdHJva2V3aWR0aCgpICogZ2V0X3B4X3Blcl91bml0KCk7CiAgICBpZiAoZ2xvd193aWR0aCA+IDAuMCl7CiAgICAgICAgZmxvYXQgb3V0c2lkZSA9IChhYnMoc2lnbmVkX2Rpc3RhbmNlKSAtIHN0cm9rZV93aWR0aCkgLyBnbG93X3dpZHRoOwogICAgICAgIGZsb2F0IGFscGhhID0gMS4wIC0gb3V0c2lkZTsKICAgICAgICBjb2xvciA9IG1peCh2ZWM0KGdsb3djb2xvci5yZ2IsIGdsb3djb2xvci5hKmFscGhhKSwgY29sb3IsIGluc2lkZSk7CiAgICB9Cn0KCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIC8vIEdseXBoIGRpc3RhbmNlIGZpZWxkIHVuaXRzIGFyZSBpbiBwaXhlbHMuIENvbnZlcnQgdG8gc2FtZSBkaXN0YW5jZQogICAgLy8gc2NhbGluZyBhcyBmX3V2LnggZm9yIGNvbnNpc3RlbmN5IHdpdGggdGhlIHByb2NlZHVyYWwgc2lnbmVkX2Rpc3RhbmNlCiAgICAvLyBjYWxjdWxhdGlvbnMuCiAgICByZXR1cm4gZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlICogdGV4dHVyZShkaXN0YW5jZWZpZWxkLCB1dikucjsKfQoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoYm9vbCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIHJldHVybiAwLjA7Cn0KCnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKICAgIGZsb2F0IHNpZ25lZF9kaXN0YW5jZSA9IDAuMDsKCiAgICB2ZWM0IHV2X29mZiA9IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwogICAgdmVjMiB0ZXhfdXYgPSBtaXgodXZfb2ZmLnh5LCB1dl9vZmYuencsIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKSk7CgogICAgaW50IHNoYXBlID0gZ2V0X3NoYXBlX3R5cGUoKTsKICAgIGlmKHNoYXBlID09IENJUkNMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBjaXJjbGUoZnJhZ191dik7CiAgICBlbHNlIGlmKHNoYXBlID09IERJU1RBTkNFRklFTEQpIHsKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBzY2FsZWRfZGlzdGFuY2VmaWVsZChkaXN0YW5jZWZpZWxkLCB0ZXhfdXYpOwogICAgICAgIGlmIChnZXRfc3Ryb2tld2lkdGgoKSA+IDAuMCB8fCBnZXRfZ2xvd3dpZHRoKCkgPiAwLjApIHsKICAgICAgICAgICAgLy8gQ29tcGVuc2F0ZSBmb3IgdGhlIGNsYW1waW5nIG9mIHRleF91diBieSBhbiBhcHByb3hpbWF0ZQogICAgICAgICAgICAvLyBleHRlbnNpb24gb2YgdGhlIHNpZ25lZCBkaXN0YW5jZSBvdXRzaWRlIHRoZSB2YWxpZCB0ZXh0dXJlCiAgICAgICAgICAgIC8vIHJlZ2lvbi4KICAgICAgICAgICAgdmVjMiBidWZ1diA9IGZyYWdfdXYgLSBjbGFtcChmcmFnX3V2LCAwLjAsIDEuMCk7CiAgICAgICAgICAgIHNpZ25lZF9kaXN0YW5jZSAtPSBsZW5ndGgoYnVmdXYpOwogICAgICAgIH0KICAgIH0gZWxzZSBpZihzaGFwZSA9PSBST1VOREVEX1JFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSByb3VuZGVkX3JlY3RhbmdsZShmcmFnX3V2LCB2ZWMyKDAuMiksIHZlYzIoMC44KSk7CiAgICBlbHNlIGlmKHNoYXBlID09IFJFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSAxLjA7IC8vIHJlY3RhbmdsZShmX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gVFJJQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gdHJpYW5nbGUoZnJhZ191dik7CgogICAgc2lnbmVkX2Rpc3RhbmNlICo9IGZyYWdfdXZzY2FsZTsKCgogICAgZmxvYXQgc3Ryb2tlX3dpZHRoID0gZ2V0X3N0cm9rZXdpZHRoKCkgKiBnZXRfcHhfcGVyX3VuaXQoKTsKICAgIGZsb2F0IGluc2lkZV9zdGFydCA9IG1heCgtc3Ryb2tlX3dpZHRoLCAwLjApOwogICAgZmxvYXQgaW5zaWRlID0gYWFzdGVwKGluc2lkZV9zdGFydCwgc2lnbmVkX2Rpc3RhbmNlKTsKCiAgICB2ZWM0IGZpbmFsX2NvbG9yID0gdmVjNChmcmFnX2NvbG9yLnh5eiwgMCk7CiAgICBmaWxsKGltYWdlLCBmcmFnX2NvbG9yLCBmcmFnX3V2LCBpbnNpZGUsIGZpbmFsX2NvbG9yKTsKICAgIHN0cm9rZShnZXRfc3Ryb2tlY29sb3IoKSwgc2lnbmVkX2Rpc3RhbmNlLCAtc3Ryb2tlX3dpZHRoLCBmaW5hbF9jb2xvcik7CiAgICBnbG93KGdldF9nbG93Y29sb3IoKSwgc2lnbmVkX2Rpc3RhbmNlLCBhYXN0ZXAoLXN0cm9rZV93aWR0aCwgc2lnbmVkX2Rpc3RhbmNlKSwgZmluYWxfY29sb3IpOwoKICAgIC8vIGRlYnVnIC0gc2hvdyBiYWNrZ3JvdW5kCiAgICAvLyBmaW5hbF9jb2xvci5hID0gY2xhbXAoZmluYWxfY29sb3IuYSwgMC4wLCAxLjApOwogICAgLy8gZmluYWxfY29sb3IgPSB2ZWM0KAogICAgLy8gICAgIHZlYzMoMSwwLDApICogKDEuMCAtIGZpbmFsX2NvbG9yLmEpICsgZmluYWxfY29sb3IucmdiICogZmluYWxfY29sb3IuYSwKICAgIC8vICAgICAwLjQgKyAwLjYgKiBmaW5hbF9jb2xvci5hCiAgICAvLyApOwoKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZpbmFsX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CgoKICAgIGlmIChmaW5hbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZmluYWxfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOHq3F1YWRfb2Zmc2V0gqt0eXBlX2xlbmd0aAKkZmxhdMcAF6ptYXJrZXJzaXplgqt0eXBlX2xlbmd0aAKkZmxhdMcAF61tYXJrZXJfb2Zmc2V0gqt0eXBlX2xlbmd0aAOkZmxhdMcAF6Vjb2xvcoKrdHlwZV9sZW5ndGgEpGZsYXTHABevdXZfb2Zmc2V0X3dpZHRogqt0eXBlX2xlbmd0aASkZmxhdMcAF6Nwb3OCq3R5cGVfbGVuZ3RoA6RmbGF0xwAXqXJvdGF0aW9uc4KrdHlwZV9sZW5ndGgEpGZsYXTHABeIp3Zpc2libGXHB2imOTQ2NDY3pG5hbWXZIWxpbmVzZWdtZW50cy0xNzgwNDMzNzE5MjU4ODk2MDIzMaphdHRyaWJ1dGVzg6Vjb2xvcscHaKY5NDgyMzKpbGluZXBvaW50xwdopjk0ODIzMalsaW5ld2lkdGjHB2imOTQ4MjMzpHV1aWS0MTc4MDQzMzcxOTI1ODg5NjAyMzGpY2FtX3NwYWNlpXBpeGVsqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjk0ODIzNKh1bmlmb3Jtc4ancGlja2luZ8KlbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACnbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACIp3Zpc2libGXHB2imOTQ2MjIwpG5hbWXZIWxpbmVzZWdtZW50cy0xNDYwNDk2NjcxMTcyODQ4NzMyM6phdHRyaWJ1dGVzgalsaW5lcG9pbnTHB2imOTQ4MjM3pHV1aWS0MTQ2MDQ5NjY3MTE3Mjg0ODczMjOpY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTQ4MjM4qHVuaWZvcm1ziqdwaWNraW5nwqljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+tbGluZXdpZHRoX2VuZMo/gAAAq2RlcHRoX3NoaWZ0ygAAAACrY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACgQQAAgD+vbGluZXdpZHRoX3N0YXJ0yj+AAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAA3gAQrHRyYW5zcGFyZW5jeccHaKY5NDY1NzOlc3BhY2XHB2imOTQ2NTc4rHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgD8AAIA/AACAPwAAAAAAAAAAAACAPwAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAvwAAAL8AAAA/AAAAvwAAAL8AAAA/AAAAPwAAAD+kbmFtZbl0ZXh0LTExMzg2OTI2MDM1OTM2NzUxNjUyqWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1z3gAYq3B4X3Blcl91bml0yj+AAACpZ2xvd2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqWJpbGxib2FyZMKoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACtcHJlcHJvamVjdGlvbsdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+nYW1iaWVudMcMF2Zm5j5mZuY+ZmbmPqluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACtZGlzdGFuY2VmaWVsZIqpbWluRmlsdGVyrExpbmVhckZpbHRlcqphbmlzb3Ryb3B5ykGAAACpbWFnRmlsdGVyrExpbmVhckZpbHRlcqV3cmFwU65SZXBlYXRXcmFwcGluZ6RkYXRhrXRleHR1cmVfYXRsYXOsdGhyZWVfZm9ybWF0qVJlZEZvcm1hdKRzaXplks0EAM0EAKV3cmFwVK5SZXBlYXRXcmFwcGluZ6R0eXBlp1NhbXBsZXKqdGhyZWVfdHlwZalGbG9hdFR5cGWqY29sb3JyYW5nZcKyYXRsYXNfdGV4dHVyZV9zaXplykSAAACrc3Ryb2tld2lkdGjKAAAAAKtzdHJva2Vjb2xvctgXAAAAAAAAAAAAAAAAAAAAAKlnbG93d2lkdGjKAAAAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAJZDAACWQ6VpbWFnZcKpb2JqZWN0X2lkAKpzaGFwZV90eXBlA7B0cmFuc2Zvcm1fbWFya2VywqtsaWdodF9jb2xvcscMFwAAAD8AAAA/AAAAP6tkZXB0aF9zaGlmdMoAAAAAqGNvbG9ybWFwwqd2aXNpYmxlxwdopjk0NjIxOKttYXJrZXJzcGFjZccHaKY5NDY1ODaxYXR0cmlidXRlX3VwZGF0ZXLHB2imOTQ4Mjc1qG92ZXJkcmF3xwdopjk0NjU3NK91bmlmb3JtX3VwZGF0ZXLHB2imOTQ4Mjc2pWZhY2Vzxwdopjk0ODI3NKR1dWlktDExMzg2OTI2MDM1OTM2NzUxNjUyrXZlcnRleF9zb3VyY2XaIJYKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWM0IGdsb3djb2xvcjsKdmVjNCBnZXRfZ2xvd2NvbG9yKCl7cmV0dXJuIGdsb3djb2xvcjt9CnVuaWZvcm0gdmVjNCBzdHJva2Vjb2xvcjsKdmVjNCBnZXRfc3Ryb2tlY29sb3IoKXtyZXR1cm4gc3Ryb2tlY29sb3I7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSBmbG9hdCBnbG93d2lkdGg7CmZsb2F0IGdldF9nbG93d2lkdGgoKXtyZXR1cm4gZ2xvd3dpZHRoO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGZsb2F0IHB4X3Blcl91bml0OwpmbG9hdCBnZXRfcHhfcGVyX3VuaXQoKXtyZXR1cm4gcHhfcGVyX3VuaXQ7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHN0cm9rZXdpZHRoOwpmbG9hdCBnZXRfc3Ryb2tld2lkdGgoKXtyZXR1cm4gc3Ryb2tld2lkdGg7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgbWFya2Vyc2l6ZTsKdmVjMiBnZXRfbWFya2Vyc2l6ZSgpe3JldHVybiBtYXJrZXJzaXplO30KaW4gdmVjNCByb3RhdGlvbnM7CnZlYzQgZ2V0X3JvdGF0aW9ucygpe3JldHVybiByb3RhdGlvbnM7fQppbiB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CmluIHZlYzMgcG9zOwp2ZWMzIGdldF9wb3MoKXtyZXR1cm4gcG9zO30KaW4gdmVjMiBxdWFkX29mZnNldDsKdmVjMiBnZXRfcXVhZF9vZmZzZXQoKXtyZXR1cm4gcXVhZF9vZmZzZXQ7fQppbiB2ZWM0IHV2X29mZnNldF93aWR0aDsKdmVjNCBnZXRfdXZfb2Zmc2V0X3dpZHRoKCl7cmV0dXJuIHV2X29mZnNldF93aWR0aDt9CmluIHZlYzMgbWFya2VyX29mZnNldDsKdmVjMyBnZXRfbWFya2VyX29mZnNldCgpe3JldHVybiBtYXJrZXJfb2Zmc2V0O30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4X2RpbTsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cm91dCB2ZWMyIGZyYWdfdXY7Cm91dCBmbG9hdCBmcmFnX3V2c2NhbGU7Cm91dCBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7Cm91dCB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAoKCm1hdDQgcW1hdCh2ZWM0IHF1YXQpewogICAgZmxvYXQgbnVtID0gcXVhdC54ICogMi4wOwogICAgZmxvYXQgbnVtMiA9IHF1YXQueSAqIDIuMDsKICAgIGZsb2F0IG51bTMgPSBxdWF0LnogKiAyLjA7CiAgICBmbG9hdCBudW00ID0gcXVhdC54ICogbnVtOwogICAgZmxvYXQgbnVtNSA9IHF1YXQueSAqIG51bTI7CiAgICBmbG9hdCBudW02ID0gcXVhdC56ICogbnVtMzsKICAgIGZsb2F0IG51bTcgPSBxdWF0LnggKiBudW0yOwogICAgZmxvYXQgbnVtOCA9IHF1YXQueCAqIG51bTM7CiAgICBmbG9hdCBudW05ID0gcXVhdC55ICogbnVtMzsKICAgIGZsb2F0IG51bTEwID0gcXVhdC53ICogbnVtOwogICAgZmxvYXQgbnVtMTEgPSBxdWF0LncgKiBudW0yOwogICAgZmxvYXQgbnVtMTIgPSBxdWF0LncgKiBudW0zOwogICAgcmV0dXJuIG1hdDQoCiAgICAgICAgKDEuMCAtIChudW01ICsgbnVtNikpLCAobnVtNyArIG51bTEyKSwgICAgICAgIChudW04IC0gbnVtMTEpLCAgICAgICAgMC4wLAogICAgICAgIChudW03IC0gbnVtMTIpLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNikpLCAobnVtOSArIG51bTEwKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtOCArIG51bTExKSwgICAgICAgIChudW05IC0gbnVtMTApLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNSkpLCAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMS4wCiAgICApOwp9CgpmbG9hdCBkaXN0YW5jZWZpZWxkX3NjYWxlKCl7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzOyBjb252ZXJ0IHRvIGRpbWVuc2lvbmxlc3MKICAgIC8vIHgtY29vcmRpbmF0ZSBvZiB0ZXh0dXJlIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggcHJvZ3JhbW1hdGljIHV2CiAgICAvLyBkaXN0YW5jZSBmaWVsZHMgaW4gZnJhZ21lbnQgc2hhZGVyLiBTZWUgYWxzbyBjb21tZW50cyBiZWxvdy4KICAgIHZlYzQgdXZfcmVjdCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIGZsb2F0IHBpeHNpemVfeCA9ICh1dl9yZWN0LnogLSB1dl9yZWN0LngpICogZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpOwogICAgcmV0dXJuIC0xLjAvcGl4c2l6ZV94Owp9Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKbWF0MiBkaWFnbSh2ZWMyIHYpewogICAgcmV0dXJuIG1hdDIodi54LCAwLjAsIDAuMCwgdi55KTsKfQoKZmxvYXQgX2RldGVybWluYW50KG1hdDIgbSkgewogIHJldHVybiBtWzBdWzBdICogbVsxXVsxXSAtIG1bMF1bMV0gKiBtWzFdWzBdOwp9Cgp2b2lkIG1haW4oKXsKICAgIC8vIGdldF9wb3MoKSByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2NhdHRlciBtYXJrZXIKICAgIC8vIGdldF9wb3NpdGlvbigpIHJldHVybnMgdGhlIChyZWxhdGl2ZSkgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgcXVhZCB2ZXJ0ZXgKCiAgICB2ZWMyIGJib3hfcmFkaXVzID0gMC41ICogZ2V0X21hcmtlcnNpemUoKTsKICAgIHZlYzIgc3ByaXRlX2Jib3hfY2VudHJlID0gZ2V0X3F1YWRfb2Zmc2V0KCkgKyBiYm94X3JhZGl1czsKCiAgICBtYXQ0IHB2aWV3ID0gcHJvamVjdGlvbiAqIHZpZXc7CiAgICBtYXQ0IHRyYW5zID0gZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKSA/IG1vZGVsIDogbWF0NCgxLjApOwoKICAgIC8vIENvbXB1dGUgY2VudHJlIG9mIGJpbGxib2FyZCBpbiBjbGlwcGluZyBjb29yZGluYXRlcwogICAgLy8gQWx3YXlzIHRyYW5zZm9ybSB0ZXh0L3NjYXR0ZXIgcG9zaXRpb24gYXJndW1lbnQKICAgIHZlYzQgZGF0YV9wb2ludCA9IGdldF9wcmVwcm9qZWN0aW9uKCkgKiBtb2RlbCAqIHZlYzQodG92ZWMzKGdldF9wb3MoKSksIDEpOwogICAgLy8gbWF5YmUgdHJhbnNmb3JtIG1hcmtlcl9vZmZzZXQgKyBnbHlwaCBvZmZzZXRzCiAgICBkYXRhX3BvaW50ID0gdmVjNChkYXRhX3BvaW50Lnh5eiAvIGRhdGFfcG9pbnQudyArIG1hdDModHJhbnMpICogdG92ZWMzKGdldF9tYXJrZXJfb2Zmc2V0KCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSBwdmlldyAqIGRhdGFfcG9pbnQ7CgogICAgLy8gQ29tcHV0ZSB0cmFuc2Zvcm0gZm9yIHRoZSBvZmZzZXQgdmVjdG9ycyBmcm9tIHRoZSBjZW50cmFsIHBvaW50CiAgICB0cmFucyA9IChnZXRfYmlsbGJvYXJkKCkgPyBwcm9qZWN0aW9uIDogcHZpZXcpICogcW1hdChnZXRfcm90YXRpb25zKCkpICogdHJhbnM7CiAgICB2ZWM0IHNwcml0ZV9jZW50ZXIgPSB0cmFucyAqIHZlYzQoc3ByaXRlX2Jib3hfY2VudHJlLCAwLCAwKTsKCiAgICB2ZWM0IHZjbGlwID0gZGF0YV9wb2ludCArIHNwcml0ZV9jZW50ZXI7CgogICAgLy8gRXh0cmEgYnVmZmVyaW5nIGlzIHJlcXVpcmVkIGFyb3VuZCBzcHJpdGVzIHdoaWNoIGFyZSBhbnRpYWxpYXNlZCBzbyB0aGF0CiAgICAvLyB0aGUgYW50aWFsaWFzIGJsdXIgZG9lc24ndCBnZXQgY3V0IG9mZiAoc2VlICMxNSkuIFRoaXMgYmx1ciBmYWxscyB0bwogICAgLy8gemVybyBhdCBhIHJhZGl1cyBvZiBBTlRJQUxJQVNfUkFESVVTIHBpeGVscyBpbiB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZXMKICAgIC8vIGFuZCB3ZSB3YW50IHRvIGJ1ZmZlciB0aGUgdmVydGljZXMgaW4gdGhlICpzb3VyY2UqIHNwcml0ZSBjb29yZGluYXRlCiAgICAvLyBzeXN0ZW0gc28gdGhhdCB3ZSBnZXQgdGhpcyBhbW91bnQgaW4gdGhlIG91dHB1dCBjb29yZGluYXRlcy4KICAgIC8vCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgbWFwcGluZyBmcm9tIHNwcml0ZSB4eQogICAgLy8gY29vcmRpbmF0ZXMgKGRlZmluZWQgYnkgYHRyYW5zYCkgaW50byB0aGUgdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuCiAgICAvLyBUaGUgZGVyaXZhdGl2ZSBuZWVkcyB0byBpbmNsdWRlIHRoZSBwcm9wZXIgdGVybSBmb3IgdGhlIHBlcnNwZWN0aXZlCiAgICAvLyBkaXZpZGUgaW50byBOREMsIGV2YWx1YXRlZCBhdCB0aGUgY2VudHJlIHBvaW50IGB2Y2xpcGAuCiAgICBtYXQ0IGRfbmRjX2RfY2xpcCA9IG1hdDQoCiAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsCiAgICAgICAgLXZjbGlwLnh5ei8odmNsaXAudyp2Y2xpcC53KSwgICAgICAgICAgMC4wCiAgICApOwogICAgbWF0MiBkeHl2X2R4eXMgPSBkaWFnbSgwLjUgKiBweF9wZXJfdW5pdCAqIGdldF9yZXNvbHV0aW9uKCkpICogbWF0MihkX25kY19kX2NsaXAqdHJhbnMpOwogICAgLy8gTm93LCBvdXIgYnVmZmVyIHNpemUgaXMgZXhwcmVzc2VkIGluIHZpZXdwb3J0IHBpeGVscyBidXQgd2UgZ2V0IGJhY2sgdG8KICAgIC8vIHRoZSBzcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gdXNpbmcgdGhlIHNjYWxlIGZhY3RvciBvZiB0aGUKICAgIC8vIHRyYW5zZm9ybWF0aW9uIChmb3IgaXNvdHJvcGljIHRyYW5zZm9ybWF0aW9ucykuIEZvciBhbmlzb3Ryb3BpYwogICAgLy8gdHJhbnNmb3JtYXRpb25zLCB0aGUgZ2VvbWV0cmljIG1lYW4gb2YgdGhlIHR3byBwcmluY2lwbGUgc2NhbGUgZmFjdG9ycwogICAgLy8gaXMgYSByZWFzb25hYmxlIGNvbXByb21pc2U6CiAgICBmbG9hdCB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSA9IHNxcnQoYWJzKF9kZXRlcm1pbmFudChkeHl2X2R4eXMpKSk7CgogICAgLy8gSW4gdGhlIGZyYWdtZW50IHNoYWRlciB3ZSB3YW50IG91ciBzaWduZWQgZGlzdGFuY2UgaW4gdmlld3BvcnQgKHBpeGVsKQogICAgLy8gY29vcmRzIGZvciBkaXJlY3QgdXNlIGluIGFudGlhbGlhc2luZyBzdGVwIGZ1bmN0aW9ucy4gV2UgdGhlcmVmb3JlIG5lZWQKICAgIC8vIGEgc2NhbGluZyBmYWN0b3Igc2ltaWxhciB0byB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSwgYnV0IGluY2x1ZGluZwogICAgLy8gdGhlIHV2LT5zcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gc2NhbGluZyBmYWN0b3IgYXMgd2VsbC4gIFdlIGNob29zZSB0bwogICAgLy8gdXNlIHRoZSBib3VuZGluZyBib3ggKngqIHdpZHRoIGZvciB0aGlzLiBUaGlzIGNvbWVzIHdpdGggc29tZQogICAgLy8gY29uc2lzdGVuY3kgY29uZGl0aW9uczoKICAgIC8vICogRm9yIHByb2NlZHVyYWwgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRoZSBzcHJpdGUgYm91bmRpbmcgYm94IHRvIGJlCiAgICAvLyAgIHNxdWFyZS4gKElmIG5vdCwgdGhlIHV2IGNvb3JkaW5hdGVzIHdpbGwgYmUgYW5pc290cm9waWNhbGx5IHNjYWxlZCBhbmQKICAgIC8vICAgYW55IGNhbGN1bGF0aW9uIGJhc2VkIG9uIHRoZW0gd2lsbCBub3QgYmUgYSBkaXN0YW5jZSBmdW5jdGlvbi4pCiAgICAvLyAqIEZvciBzYW1wbGVkIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0byBjb25zaXN0ZW50bHkgY2hvb3NlIHRoZSAqeCoKICAgIC8vICAgZm9yIHRoZSBzY2FsaW5nIGluIGdldF9kaXN0YW5jZWZpZWxkX3NjYWxlKCkuCiAgICBmbG9hdCBzcHJpdGVfZnJvbV91X3NjYWxlID0gbWluKGFicyhnZXRfbWFya2Vyc2l6ZSgpLngpLCBhYnMoZ2V0X21hcmtlcnNpemUoKS55KSk7CiAgICBmcmFnX3V2c2NhbGUgPSB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSAqIHNwcml0ZV9mcm9tX3Vfc2NhbGU7CiAgICBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgPSBkaXN0YW5jZWZpZWxkX3NjYWxlKCk7CgogICAgLy8gYWRkIHBhZGRpbmcgZm9yIEFBLCBzdHJva2UgYW5kIGdsb3cgKG5vbiBuYXRpdmUgZGlzdGFuY2VmaWVsZHMgZG9uJ3QgbmVlZAogICAgLy8gQUEgcGFkZGluZyBidXQgQ0lSQ0xFIGV0YyBkbykKICAgIGZsb2F0IHBwdSA9IGdldF9weF9wZXJfdW5pdCgpOwogICAgdmVjMiBwYWRkZWRfYmJveF9zaXplID0gYmJveF9yYWRpdXMgKyAoCiAgICAgICAgQU5USUFMSUFTX1JBRElVUyArIG1heCgwLjAsIGdldF9zdHJva2V3aWR0aCgpICogcHB1KSArIG1heCgwLjAsIGdldF9nbG93d2lkdGgoKSAqIHBwdSkKICAgICkgLyB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZTsKICAgIHZlYzIgdXZfcGFkX3NjYWxlID0gcGFkZGVkX2Jib3hfc2l6ZSAvIGJib3hfcmFkaXVzOwoKICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yKCkpOwogICAgZnJhZ191dl9vZmZzZXRfd2lkdGggPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICAvLyBnZXRfdXYoKSByZXR1cm5zICgwLCAwKSwgKDEsIDApLCAoMCwgMSkgb3IgKDEsIDEpCiAgICAvLyB0byBhY2NvbW9kYXRlIHN0cm9rZSBhbmQgZ2xvd3dpZHRoIHdlIG5lZWQgdG8gZXh0cnVkZSB1didzIG91dHdhcmRzIGZyb20gKDAuNSwgMC41KQogICAgZnJhZ191diA9IHZlYzIoMC41KSArIChnZXRfdXYoKSAtIHZlYzIoMC41KSkgKiB1dl9wYWRfc2NhbGU7CgogICAgLy8gc2NyZWVuIHNwYWNlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb3NpdGlvbgogICAgdmVjNCBxdWFkX3ZlcnRleCA9ICh0cmFucyAqIHZlYzQoMi4wICogcGFkZGVkX2Jib3hfc2l6ZSAqIGdldF9wb3NpdGlvbigpLCAwLjAsIDAuMCkpOwogICAgZ2xfUG9zaXRpb24gPSB2Y2xpcCArIHF1YWRfdmVydGV4OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cn0KCq9mcmFnbWVudF9zb3VyY2XaHAgKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjNCBnbG93Y29sb3I7CnZlYzQgZ2V0X2dsb3djb2xvcigpe3JldHVybiBnbG93Y29sb3I7fQp1bmlmb3JtIHZlYzQgc3Ryb2tlY29sb3I7CnZlYzQgZ2V0X3N0cm9rZWNvbG9yKCl7cmV0dXJuIHN0cm9rZWNvbG9yO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgZ2xvd3dpZHRoOwpmbG9hdCBnZXRfZ2xvd3dpZHRoKCl7cmV0dXJuIGdsb3d3aWR0aDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBmbG9hdCBzdHJva2V3aWR0aDsKZmxvYXQgZ2V0X3N0cm9rZXdpZHRoKCl7cmV0dXJuIHN0cm9rZXdpZHRoO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKaW4gdmVjNCBmcmFnX2NvbG9yOwppbiB2ZWMyIGZyYWdfdXY7CgojZGVmaW5lIENJUkNMRSAgICAgICAgICAgIDAKI2RlZmluZSBSRUNUQU5HTEUgICAgICAgICAxCiNkZWZpbmUgUk9VTkRFRF9SRUNUQU5HTEUgMgojZGVmaW5lIERJU1RBTkNFRklFTEQgICAgIDMKI2RlZmluZSBUUklBTkdMRSAgICAgICAgICA0CgojZGVmaW5lIE1fU1FSVF8yICAgICAgICAgIDEuNDE0MjEzNQoKCi8vIEhhbGYgd2lkdGggb2YgYW50aWFsaWFzaW5nIHNtb290aHN0ZXAKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAoKaW4gZmxvYXQgZnJhZ191dnNjYWxlOwppbiBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7CmluIHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwoKLy8gVGhlc2UgdmVyc2lvbnMgb2YgYWFzdGVwIGFzc3VtZSB0aGF0IGBkaXN0YCBpcyBhIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbgovLyB3aGljaCBoYXMgYmVlbiBzY2FsZWQgdG8gYmUgaW4gdW5pdHMgb2YgcGl4ZWxzLgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxICsgQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCB0aHJlc2hvbGQyLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDErQU5USUFMSUFTX1JBRElVUywgZGlzdCkgLQogICAgICAgICAgIHNtb290aHN0ZXAodGhyZXNob2xkMi1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQyK0FOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgovLyBQcm9jZWR1cmFsIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbnMgb24gdGhlIHV2IGNvb3JkaW5hdGUgcGF0Y2ggWzAsMV14WzAsMV0KLy8gTm90ZSB0aGF0IGZvciBhbnRpYWxpYXNpbmcgdG8gd29yayBwcm9wZXJseSB0aGVzZSBzaG91bGQgYmUgKnNjYWxlIHByZXNlcnZpbmcqCi8vIChJZiB5b3UgbXVzdCByZXNjYWxlIHV2LCBtYWtlIHN1cmUgdG8gcHV0IHRoZSBzY2FsZSBmYWN0b3IgYmFjayBpbiBsYXRlci4pCmZsb2F0IHRyaWFuZ2xlKHZlYzIgUCl7CiAgICBQIC09IHZlYzIoMC41KTsKICAgIGZsb2F0IHggPSBNX1NRUlRfMiAqIChQLnggLSBQLnkpOwogICAgZmxvYXQgeSA9IE1fU1FSVF8yICogKFAueCArIFAueSk7CiAgICBmbG9hdCByMSA9IG1heChhYnMoeCksIGFicyh5KSkgLSAxLjAvKDIuMCpNX1NRUlRfMik7CiAgICBmbG9hdCByMiA9IFAueTsKICAgIHJldHVybiAtbWF4KHIxLHIyKTsKfQoKZmxvYXQgY2lyY2xlKHZlYzIgdXYpewogICAgcmV0dXJuIDAuNS1sZW5ndGgodXYtdmVjMigwLjUpKTsKfQoKZmxvYXQgcmVjdGFuZ2xlKHZlYzIgdXYpewogICAgdmVjMiBkID0gbWF4KC11diwgdXYtdmVjMigxKSk7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKSk7Cn0KCmZsb2F0IHJvdW5kZWRfcmVjdGFuZ2xlKHZlYzIgdXYsIHZlYzIgdGwsIHZlYzIgYnIpewogICAgdmVjMiBkID0gbWF4KHRsLXV2LCB1di1icik7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKS10bC54KTsKfQoKdm9pZCBmaWxsKGJvb2wgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgY29sb3IgPSBtaXgoY29sb3IsIGZpbGxjb2xvciwgaW5maWxsKTsKfQoKdm9pZCBmaWxsKHNhbXBsZXIyRCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICB2ZWM0IGltX2NvbG9yID0gdGV4dHVyZShpbWFnZSwgdXYueXgpOwogICAgY29sb3IgPSBtaXgoY29sb3IsIGltX2NvbG9yLCBpbmZpbGwpOwp9Cgp2b2lkIHN0cm9rZSh2ZWM0IHN0cm9rZWNvbG9yLCBmbG9hdCBzaWduZWRfZGlzdGFuY2UsIGZsb2F0IHdpZHRoLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGlmICh3aWR0aCAhPSAwLjApewogICAgICAgIGZsb2F0IHQgPSBhYXN0ZXAobWluKHdpZHRoLCAwLjApLCBtYXgod2lkdGgsIDAuMCksIHNpZ25lZF9kaXN0YW5jZSk7CiAgICAgICAgdmVjNCBiZ19jb2xvciA9IG1peChjb2xvciwgdmVjNChzdHJva2Vjb2xvci5yZ2IsIDApLCBmbG9hdChzaWduZWRfZGlzdGFuY2UgPCAwLjUgKiB3aWR0aCkpOwogICAgICAgIGNvbG9yID0gbWl4KGJnX2NvbG9yLCBzdHJva2Vjb2xvciwgdCk7CiAgICB9Cn0KCnZvaWQgZ2xvdyh2ZWM0IGdsb3djb2xvciwgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlLCBmbG9hdCBpbnNpZGUsIGlub3V0IHZlYzQgY29sb3IpewogICAgZmxvYXQgZ2xvd193aWR0aCA9IGdldF9nbG93d2lkdGgoKSAqIGdldF9weF9wZXJfdW5pdCgpOwogICAgZmxvYXQgc3Ryb2tlX3dpZHRoID0gZ2V0X3N0cm9rZXdpZHRoKCkgKiBnZXRfcHhfcGVyX3VuaXQoKTsKICAgIGlmIChnbG93X3dpZHRoID4gMC4wKXsKICAgICAgICBmbG9hdCBvdXRzaWRlID0gKGFicyhzaWduZWRfZGlzdGFuY2UpIC0gc3Ryb2tlX3dpZHRoKSAvIGdsb3dfd2lkdGg7CiAgICAgICAgZmxvYXQgYWxwaGEgPSAxLjAgLSBvdXRzaWRlOwogICAgICAgIGNvbG9yID0gbWl4KHZlYzQoZ2xvd2NvbG9yLnJnYiwgZ2xvd2NvbG9yLmEqYWxwaGEpLCBjb2xvciwgaW5zaWRlKTsKICAgIH0KfQoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVscy4gQ29udmVydCB0byBzYW1lIGRpc3RhbmNlCiAgICAvLyBzY2FsaW5nIGFzIGZfdXYueCBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgcHJvY2VkdXJhbCBzaWduZWRfZGlzdGFuY2UKICAgIC8vIGNhbGN1bGF0aW9ucy4KICAgIHJldHVybiBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgKiB0ZXh0dXJlKGRpc3RhbmNlZmllbGQsIHV2KS5yOwp9CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChib29sIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgcmV0dXJuIDAuMDsKfQoKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlID0gMC4wOwoKICAgIHZlYzQgdXZfb2ZmID0gZnJhZ191dl9vZmZzZXRfd2lkdGg7CiAgICB2ZWMyIHRleF91diA9IG1peCh1dl9vZmYueHksIHV2X29mZi56dywgY2xhbXAoZnJhZ191diwgMC4wLCAxLjApKTsKCiAgICBpbnQgc2hhcGUgPSBnZXRfc2hhcGVfdHlwZSgpOwogICAgaWYoc2hhcGUgPT0gQ0lSQ0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IGNpcmNsZShmcmFnX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gRElTVEFOQ0VGSUVMRCkgewogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGRpc3RhbmNlZmllbGQsIHRleF91dik7CiAgICAgICAgaWYgKGdldF9zdHJva2V3aWR0aCgpID4gMC4wIHx8IGdldF9nbG93d2lkdGgoKSA+IDAuMCkgewogICAgICAgICAgICAvLyBDb21wZW5zYXRlIGZvciB0aGUgY2xhbXBpbmcgb2YgdGV4X3V2IGJ5IGFuIGFwcHJveGltYXRlCiAgICAgICAgICAgIC8vIGV4dGVuc2lvbiBvZiB0aGUgc2lnbmVkIGRpc3RhbmNlIG91dHNpZGUgdGhlIHZhbGlkIHRleHR1cmUKICAgICAgICAgICAgLy8gcmVnaW9uLgogICAgICAgICAgICB2ZWMyIGJ1ZnV2ID0gZnJhZ191diAtIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKTsKICAgICAgICAgICAgc2lnbmVkX2Rpc3RhbmNlIC09IGxlbmd0aChidWZ1dik7CiAgICAgICAgfQogICAgfSBlbHNlIGlmKHNoYXBlID09IFJPVU5ERURfUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHJvdW5kZWRfcmVjdGFuZ2xlKGZyYWdfdXYsIHZlYzIoMC4yKSwgdmVjMigwLjgpKTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IDEuMDsgLy8gcmVjdGFuZ2xlKGZfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBUUklBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSB0cmlhbmdsZShmcmFnX3V2KTsKCiAgICBzaWduZWRfZGlzdGFuY2UgKj0gZnJhZ191dnNjYWxlOwoKCiAgICBmbG9hdCBzdHJva2Vfd2lkdGggPSBnZXRfc3Ryb2tld2lkdGgoKSAqIGdldF9weF9wZXJfdW5pdCgpOwogICAgZmxvYXQgaW5zaWRlX3N0YXJ0ID0gbWF4KC1zdHJva2Vfd2lkdGgsIDAuMCk7CiAgICBmbG9hdCBpbnNpZGUgPSBhYXN0ZXAoaW5zaWRlX3N0YXJ0LCBzaWduZWRfZGlzdGFuY2UpOwoKICAgIHZlYzQgZmluYWxfY29sb3IgPSB2ZWM0KGZyYWdfY29sb3IueHl6LCAwKTsKICAgIGZpbGwoaW1hZ2UsIGZyYWdfY29sb3IsIGZyYWdfdXYsIGluc2lkZSwgZmluYWxfY29sb3IpOwogICAgc3Ryb2tlKGdldF9zdHJva2Vjb2xvcigpLCBzaWduZWRfZGlzdGFuY2UsIC1zdHJva2Vfd2lkdGgsIGZpbmFsX2NvbG9yKTsKICAgIGdsb3coZ2V0X2dsb3djb2xvcigpLCBzaWduZWRfZGlzdGFuY2UsIGFhc3RlcCgtc3Ryb2tlX3dpZHRoLCBzaWduZWRfZGlzdGFuY2UpLCBmaW5hbF9jb2xvcik7CgogICAgLy8gZGVidWcgLSBzaG93IGJhY2tncm91bmQKICAgIC8vIGZpbmFsX2NvbG9yLmEgPSBjbGFtcChmaW5hbF9jb2xvci5hLCAwLjAsIDEuMCk7CiAgICAvLyBmaW5hbF9jb2xvciA9IHZlYzQoCiAgICAvLyAgICAgdmVjMygxLDAsMCkgKiAoMS4wIC0gZmluYWxfY29sb3IuYSkgKyBmaW5hbF9jb2xvci5yZ2IgKiBmaW5hbF9jb2xvci5hLAogICAgLy8gICAgIDAuNCArIDAuNiAqIGZpbmFsX2NvbG9yLmEKICAgIC8vICk7CgogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZmluYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCgogICAgaWYgKGZpbmFsX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmaW5hbF9jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4ercXVhZF9vZmZzZXSCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXppt0wAAAqMCcxJjAAACowPypmcBSuK7AvHSbwAAAqMCqbWFya2Vyc2l6ZYKrdHlwZV9sZW5ndGgCpGZsYXTHIBdI4V5BcmijQYtsiUFyaKNBhxaJQYcWpUGgGotBcmijQa1tYXJrZXJfb2Zmc2V0gqt0eXBlX2xlbmd0aAOkZmxhdMcwF4cWecDFIFTBAAAAAIcWecDFIFTBAAAAAIcWecDFIFTBAAAAAIcWecDFIFTBAAAAAKVjb2xvcoKrdHlwZV9sZW5ndGgEpGZsYXTHQBcAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/r3V2X29mZnNldF93aWR0aIKrdHlwZV9sZW5ndGgEpGZsYXTHQBcAgDA+ACAPPwCATz4AoBo/AMCUPgDA7z4AQKg+AGADPwDAlD4AoAM/AECoPgBgDz8AwJQ+AKAPPwBAqD4AIBs/o3Bvc4KrdHlwZV9sZW5ndGgDpGZsYXTHMBfoojFCAAD4QQAAAAB78PBCAAD4QQAAAADCh0RDAAD4QQAAAACjS4hDAAD4QQAAAACpcm90YXRpb25zgqt0eXBlX2xlbmd0aASkZmxhdMdAFwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD+Ip3Zpc2libGXHB2imOTQ2NzE3pG5hbWXZIGxpbmVzZWdtZW50cy04NTI4MDA0ODg4Njg3Njk0MzU1qmF0dHJpYnV0ZXODpWNvbG9yxwdopjk0ODI4MKlsaW5lcG9pbnTHB2imOTQ4Mjc5qWxpbmV3aWR0aMcHaKY5NDgyODGkdXVpZLM4NTI4MDA0ODg4Njg3Njk0MzU1qWNhbV9zcGFjZaVwaXhlbKlwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5NDgyODKodW5pZm9ybXOGp3BpY2tpbmfCpW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAAp2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAiKd2aXNpYmxlxwdopjk0Njc1OKRuYW1l2SFsaW5lc2VnbWVudHMtMTY2MzA3NzY0MTcyNjMwOTIyMzCqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjk0ODI4NaR1dWlktDE2NjMwNzc2NDE3MjYzMDkyMjMwqWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjk0ODI4Nqh1bmlmb3Jtc4qncGlja2luZ8KpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAIA/rWxpbmV3aWR0aF9lbmTKP4AAAKtkZXB0aF9zaGlmdMoAAAAAq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIEEAAIA/r2xpbmV3aWR0aF9zdGFydMo/gAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAIindmlzaWJsZccHaKY5NDY3NjikbmFtZdkgbGluZXNlZ21lbnRzLTk4MDg2NTE1NTUxMjA3OTgzNTiqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjk0ODI4OaR1dWlkszk4MDg2NTE1NTUxMjA3OTgzNTipY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTQ4MjkwqHVuaWZvcm1ziqdwaWNraW5nwqljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+tbGluZXdpZHRoX2VuZMo/gAAAq2RlcHRoX3NoaWZ0ygAAAACrY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+vbGluZXdpZHRoX3N0YXJ0yj+AAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAA3gAQrHRyYW5zcGFyZW5jeccHaKY5NDY5MTalc3BhY2XHB2imOTQ2OTIxrHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgD8AAIA/AACAPwAAAAAAAAAAAACAPwAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAvwAAAL8AAAA/AAAAvwAAAL8AAAA/AAAAPwAAAD+kbmFtZbl0ZXh0LTE0NTA0Mjc2NTczOTg5MTMyOTUyqWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1z3gAYq3B4X3Blcl91bml0yj+AAACpZ2xvd2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqWJpbGxib2FyZMKoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACtcHJlcHJvamVjdGlvbsdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+nYW1iaWVudMcMF2Zm5j5mZuY+ZmbmPqluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACtZGlzdGFuY2VmaWVsZIqpbWluRmlsdGVyrExpbmVhckZpbHRlcqphbmlzb3Ryb3B5ykGAAACpbWFnRmlsdGVyrExpbmVhckZpbHRlcqV3cmFwU65SZXBlYXRXcmFwcGluZ6RkYXRhrXRleHR1cmVfYXRsYXOsdGhyZWVfZm9ybWF0qVJlZEZvcm1hdKRzaXplks0EAM0EAKV3cmFwVK5SZXBlYXRXcmFwcGluZ6R0eXBlp1NhbXBsZXKqdGhyZWVfdHlwZalGbG9hdFR5cGWqY29sb3JyYW5nZcKyYXRsYXNfdGV4dHVyZV9zaXplykSAAACrc3Ryb2tld2lkdGjKAAAAAKtzdHJva2Vjb2xvctgXAAAAAAAAAAAAAAAAAAAAAKlnbG93d2lkdGjKAAAAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAJZDAACWQ6VpbWFnZcKpb2JqZWN0X2lkAKpzaGFwZV90eXBlA7B0cmFuc2Zvcm1fbWFya2VywqtsaWdodF9jb2xvcscMFwAAAD8AAAA/AAAAP6tkZXB0aF9zaGlmdMoAAAAAqGNvbG9ybWFwwqd2aXNpYmxlxwdopjk0Njc1M6ttYXJrZXJzcGFjZccHaKY5NDY5MzCxYXR0cmlidXRlX3VwZGF0ZXLHB2imOTQ4MzI3qG92ZXJkcmF3xwdopjk0NjkxN691bmlmb3JtX3VwZGF0ZXLHB2imOTQ4MzI4pWZhY2Vzxwdopjk0ODMyNqR1dWlktDE0NTA0Mjc2NTczOTg5MTMyOTUyrXZlcnRleF9zb3VyY2XaIJYKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWM0IGdsb3djb2xvcjsKdmVjNCBnZXRfZ2xvd2NvbG9yKCl7cmV0dXJuIGdsb3djb2xvcjt9CnVuaWZvcm0gdmVjNCBzdHJva2Vjb2xvcjsKdmVjNCBnZXRfc3Ryb2tlY29sb3IoKXtyZXR1cm4gc3Ryb2tlY29sb3I7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSBmbG9hdCBnbG93d2lkdGg7CmZsb2F0IGdldF9nbG93d2lkdGgoKXtyZXR1cm4gZ2xvd3dpZHRoO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGZsb2F0IHB4X3Blcl91bml0OwpmbG9hdCBnZXRfcHhfcGVyX3VuaXQoKXtyZXR1cm4gcHhfcGVyX3VuaXQ7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHN0cm9rZXdpZHRoOwpmbG9hdCBnZXRfc3Ryb2tld2lkdGgoKXtyZXR1cm4gc3Ryb2tld2lkdGg7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgbWFya2Vyc2l6ZTsKdmVjMiBnZXRfbWFya2Vyc2l6ZSgpe3JldHVybiBtYXJrZXJzaXplO30KaW4gdmVjNCByb3RhdGlvbnM7CnZlYzQgZ2V0X3JvdGF0aW9ucygpe3JldHVybiByb3RhdGlvbnM7fQppbiB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CmluIHZlYzMgcG9zOwp2ZWMzIGdldF9wb3MoKXtyZXR1cm4gcG9zO30KaW4gdmVjMiBxdWFkX29mZnNldDsKdmVjMiBnZXRfcXVhZF9vZmZzZXQoKXtyZXR1cm4gcXVhZF9vZmZzZXQ7fQppbiB2ZWM0IHV2X29mZnNldF93aWR0aDsKdmVjNCBnZXRfdXZfb2Zmc2V0X3dpZHRoKCl7cmV0dXJuIHV2X29mZnNldF93aWR0aDt9CmluIHZlYzMgbWFya2VyX29mZnNldDsKdmVjMyBnZXRfbWFya2VyX29mZnNldCgpe3JldHVybiBtYXJrZXJfb2Zmc2V0O30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4X2RpbTsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cm91dCB2ZWMyIGZyYWdfdXY7Cm91dCBmbG9hdCBmcmFnX3V2c2NhbGU7Cm91dCBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7Cm91dCB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAoKCm1hdDQgcW1hdCh2ZWM0IHF1YXQpewogICAgZmxvYXQgbnVtID0gcXVhdC54ICogMi4wOwogICAgZmxvYXQgbnVtMiA9IHF1YXQueSAqIDIuMDsKICAgIGZsb2F0IG51bTMgPSBxdWF0LnogKiAyLjA7CiAgICBmbG9hdCBudW00ID0gcXVhdC54ICogbnVtOwogICAgZmxvYXQgbnVtNSA9IHF1YXQueSAqIG51bTI7CiAgICBmbG9hdCBudW02ID0gcXVhdC56ICogbnVtMzsKICAgIGZsb2F0IG51bTcgPSBxdWF0LnggKiBudW0yOwogICAgZmxvYXQgbnVtOCA9IHF1YXQueCAqIG51bTM7CiAgICBmbG9hdCBudW05ID0gcXVhdC55ICogbnVtMzsKICAgIGZsb2F0IG51bTEwID0gcXVhdC53ICogbnVtOwogICAgZmxvYXQgbnVtMTEgPSBxdWF0LncgKiBudW0yOwogICAgZmxvYXQgbnVtMTIgPSBxdWF0LncgKiBudW0zOwogICAgcmV0dXJuIG1hdDQoCiAgICAgICAgKDEuMCAtIChudW01ICsgbnVtNikpLCAobnVtNyArIG51bTEyKSwgICAgICAgIChudW04IC0gbnVtMTEpLCAgICAgICAgMC4wLAogICAgICAgIChudW03IC0gbnVtMTIpLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNikpLCAobnVtOSArIG51bTEwKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtOCArIG51bTExKSwgICAgICAgIChudW05IC0gbnVtMTApLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNSkpLCAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMS4wCiAgICApOwp9CgpmbG9hdCBkaXN0YW5jZWZpZWxkX3NjYWxlKCl7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzOyBjb252ZXJ0IHRvIGRpbWVuc2lvbmxlc3MKICAgIC8vIHgtY29vcmRpbmF0ZSBvZiB0ZXh0dXJlIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggcHJvZ3JhbW1hdGljIHV2CiAgICAvLyBkaXN0YW5jZSBmaWVsZHMgaW4gZnJhZ21lbnQgc2hhZGVyLiBTZWUgYWxzbyBjb21tZW50cyBiZWxvdy4KICAgIHZlYzQgdXZfcmVjdCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIGZsb2F0IHBpeHNpemVfeCA9ICh1dl9yZWN0LnogLSB1dl9yZWN0LngpICogZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpOwogICAgcmV0dXJuIC0xLjAvcGl4c2l6ZV94Owp9Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKbWF0MiBkaWFnbSh2ZWMyIHYpewogICAgcmV0dXJuIG1hdDIodi54LCAwLjAsIDAuMCwgdi55KTsKfQoKZmxvYXQgX2RldGVybWluYW50KG1hdDIgbSkgewogIHJldHVybiBtWzBdWzBdICogbVsxXVsxXSAtIG1bMF1bMV0gKiBtWzFdWzBdOwp9Cgp2b2lkIG1haW4oKXsKICAgIC8vIGdldF9wb3MoKSByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2NhdHRlciBtYXJrZXIKICAgIC8vIGdldF9wb3NpdGlvbigpIHJldHVybnMgdGhlIChyZWxhdGl2ZSkgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgcXVhZCB2ZXJ0ZXgKCiAgICB2ZWMyIGJib3hfcmFkaXVzID0gMC41ICogZ2V0X21hcmtlcnNpemUoKTsKICAgIHZlYzIgc3ByaXRlX2Jib3hfY2VudHJlID0gZ2V0X3F1YWRfb2Zmc2V0KCkgKyBiYm94X3JhZGl1czsKCiAgICBtYXQ0IHB2aWV3ID0gcHJvamVjdGlvbiAqIHZpZXc7CiAgICBtYXQ0IHRyYW5zID0gZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKSA/IG1vZGVsIDogbWF0NCgxLjApOwoKICAgIC8vIENvbXB1dGUgY2VudHJlIG9mIGJpbGxib2FyZCBpbiBjbGlwcGluZyBjb29yZGluYXRlcwogICAgLy8gQWx3YXlzIHRyYW5zZm9ybSB0ZXh0L3NjYXR0ZXIgcG9zaXRpb24gYXJndW1lbnQKICAgIHZlYzQgZGF0YV9wb2ludCA9IGdldF9wcmVwcm9qZWN0aW9uKCkgKiBtb2RlbCAqIHZlYzQodG92ZWMzKGdldF9wb3MoKSksIDEpOwogICAgLy8gbWF5YmUgdHJhbnNmb3JtIG1hcmtlcl9vZmZzZXQgKyBnbHlwaCBvZmZzZXRzCiAgICBkYXRhX3BvaW50ID0gdmVjNChkYXRhX3BvaW50Lnh5eiAvIGRhdGFfcG9pbnQudyArIG1hdDModHJhbnMpICogdG92ZWMzKGdldF9tYXJrZXJfb2Zmc2V0KCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSBwdmlldyAqIGRhdGFfcG9pbnQ7CgogICAgLy8gQ29tcHV0ZSB0cmFuc2Zvcm0gZm9yIHRoZSBvZmZzZXQgdmVjdG9ycyBmcm9tIHRoZSBjZW50cmFsIHBvaW50CiAgICB0cmFucyA9IChnZXRfYmlsbGJvYXJkKCkgPyBwcm9qZWN0aW9uIDogcHZpZXcpICogcW1hdChnZXRfcm90YXRpb25zKCkpICogdHJhbnM7CiAgICB2ZWM0IHNwcml0ZV9jZW50ZXIgPSB0cmFucyAqIHZlYzQoc3ByaXRlX2Jib3hfY2VudHJlLCAwLCAwKTsKCiAgICB2ZWM0IHZjbGlwID0gZGF0YV9wb2ludCArIHNwcml0ZV9jZW50ZXI7CgogICAgLy8gRXh0cmEgYnVmZmVyaW5nIGlzIHJlcXVpcmVkIGFyb3VuZCBzcHJpdGVzIHdoaWNoIGFyZSBhbnRpYWxpYXNlZCBzbyB0aGF0CiAgICAvLyB0aGUgYW50aWFsaWFzIGJsdXIgZG9lc24ndCBnZXQgY3V0IG9mZiAoc2VlICMxNSkuIFRoaXMgYmx1ciBmYWxscyB0bwogICAgLy8gemVybyBhdCBhIHJhZGl1cyBvZiBBTlRJQUxJQVNfUkFESVVTIHBpeGVscyBpbiB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZXMKICAgIC8vIGFuZCB3ZSB3YW50IHRvIGJ1ZmZlciB0aGUgdmVydGljZXMgaW4gdGhlICpzb3VyY2UqIHNwcml0ZSBjb29yZGluYXRlCiAgICAvLyBzeXN0ZW0gc28gdGhhdCB3ZSBnZXQgdGhpcyBhbW91bnQgaW4gdGhlIG91dHB1dCBjb29yZGluYXRlcy4KICAgIC8vCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgbWFwcGluZyBmcm9tIHNwcml0ZSB4eQogICAgLy8gY29vcmRpbmF0ZXMgKGRlZmluZWQgYnkgYHRyYW5zYCkgaW50byB0aGUgdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuCiAgICAvLyBUaGUgZGVyaXZhdGl2ZSBuZWVkcyB0byBpbmNsdWRlIHRoZSBwcm9wZXIgdGVybSBmb3IgdGhlIHBlcnNwZWN0aXZlCiAgICAvLyBkaXZpZGUgaW50byBOREMsIGV2YWx1YXRlZCBhdCB0aGUgY2VudHJlIHBvaW50IGB2Y2xpcGAuCiAgICBtYXQ0IGRfbmRjX2RfY2xpcCA9IG1hdDQoCiAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsCiAgICAgICAgLXZjbGlwLnh5ei8odmNsaXAudyp2Y2xpcC53KSwgICAgICAgICAgMC4wCiAgICApOwogICAgbWF0MiBkeHl2X2R4eXMgPSBkaWFnbSgwLjUgKiBweF9wZXJfdW5pdCAqIGdldF9yZXNvbHV0aW9uKCkpICogbWF0MihkX25kY19kX2NsaXAqdHJhbnMpOwogICAgLy8gTm93LCBvdXIgYnVmZmVyIHNpemUgaXMgZXhwcmVzc2VkIGluIHZpZXdwb3J0IHBpeGVscyBidXQgd2UgZ2V0IGJhY2sgdG8KICAgIC8vIHRoZSBzcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gdXNpbmcgdGhlIHNjYWxlIGZhY3RvciBvZiB0aGUKICAgIC8vIHRyYW5zZm9ybWF0aW9uIChmb3IgaXNvdHJvcGljIHRyYW5zZm9ybWF0aW9ucykuIEZvciBhbmlzb3Ryb3BpYwogICAgLy8gdHJhbnNmb3JtYXRpb25zLCB0aGUgZ2VvbWV0cmljIG1lYW4gb2YgdGhlIHR3byBwcmluY2lwbGUgc2NhbGUgZmFjdG9ycwogICAgLy8gaXMgYSByZWFzb25hYmxlIGNvbXByb21pc2U6CiAgICBmbG9hdCB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSA9IHNxcnQoYWJzKF9kZXRlcm1pbmFudChkeHl2X2R4eXMpKSk7CgogICAgLy8gSW4gdGhlIGZyYWdtZW50IHNoYWRlciB3ZSB3YW50IG91ciBzaWduZWQgZGlzdGFuY2UgaW4gdmlld3BvcnQgKHBpeGVsKQogICAgLy8gY29vcmRzIGZvciBkaXJlY3QgdXNlIGluIGFudGlhbGlhc2luZyBzdGVwIGZ1bmN0aW9ucy4gV2UgdGhlcmVmb3JlIG5lZWQKICAgIC8vIGEgc2NhbGluZyBmYWN0b3Igc2ltaWxhciB0byB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSwgYnV0IGluY2x1ZGluZwogICAgLy8gdGhlIHV2LT5zcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gc2NhbGluZyBmYWN0b3IgYXMgd2VsbC4gIFdlIGNob29zZSB0bwogICAgLy8gdXNlIHRoZSBib3VuZGluZyBib3ggKngqIHdpZHRoIGZvciB0aGlzLiBUaGlzIGNvbWVzIHdpdGggc29tZQogICAgLy8gY29uc2lzdGVuY3kgY29uZGl0aW9uczoKICAgIC8vICogRm9yIHByb2NlZHVyYWwgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRoZSBzcHJpdGUgYm91bmRpbmcgYm94IHRvIGJlCiAgICAvLyAgIHNxdWFyZS4gKElmIG5vdCwgdGhlIHV2IGNvb3JkaW5hdGVzIHdpbGwgYmUgYW5pc290cm9waWNhbGx5IHNjYWxlZCBhbmQKICAgIC8vICAgYW55IGNhbGN1bGF0aW9uIGJhc2VkIG9uIHRoZW0gd2lsbCBub3QgYmUgYSBkaXN0YW5jZSBmdW5jdGlvbi4pCiAgICAvLyAqIEZvciBzYW1wbGVkIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0byBjb25zaXN0ZW50bHkgY2hvb3NlIHRoZSAqeCoKICAgIC8vICAgZm9yIHRoZSBzY2FsaW5nIGluIGdldF9kaXN0YW5jZWZpZWxkX3NjYWxlKCkuCiAgICBmbG9hdCBzcHJpdGVfZnJvbV91X3NjYWxlID0gbWluKGFicyhnZXRfbWFya2Vyc2l6ZSgpLngpLCBhYnMoZ2V0X21hcmtlcnNpemUoKS55KSk7CiAgICBmcmFnX3V2c2NhbGUgPSB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSAqIHNwcml0ZV9mcm9tX3Vfc2NhbGU7CiAgICBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgPSBkaXN0YW5jZWZpZWxkX3NjYWxlKCk7CgogICAgLy8gYWRkIHBhZGRpbmcgZm9yIEFBLCBzdHJva2UgYW5kIGdsb3cgKG5vbiBuYXRpdmUgZGlzdGFuY2VmaWVsZHMgZG9uJ3QgbmVlZAogICAgLy8gQUEgcGFkZGluZyBidXQgQ0lSQ0xFIGV0YyBkbykKICAgIGZsb2F0IHBwdSA9IGdldF9weF9wZXJfdW5pdCgpOwogICAgdmVjMiBwYWRkZWRfYmJveF9zaXplID0gYmJveF9yYWRpdXMgKyAoCiAgICAgICAgQU5USUFMSUFTX1JBRElVUyArIG1heCgwLjAsIGdldF9zdHJva2V3aWR0aCgpICogcHB1KSArIG1heCgwLjAsIGdldF9nbG93d2lkdGgoKSAqIHBwdSkKICAgICkgLyB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZTsKICAgIHZlYzIgdXZfcGFkX3NjYWxlID0gcGFkZGVkX2Jib3hfc2l6ZSAvIGJib3hfcmFkaXVzOwoKICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yKCkpOwogICAgZnJhZ191dl9vZmZzZXRfd2lkdGggPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICAvLyBnZXRfdXYoKSByZXR1cm5zICgwLCAwKSwgKDEsIDApLCAoMCwgMSkgb3IgKDEsIDEpCiAgICAvLyB0byBhY2NvbW9kYXRlIHN0cm9rZSBhbmQgZ2xvd3dpZHRoIHdlIG5lZWQgdG8gZXh0cnVkZSB1didzIG91dHdhcmRzIGZyb20gKDAuNSwgMC41KQogICAgZnJhZ191diA9IHZlYzIoMC41KSArIChnZXRfdXYoKSAtIHZlYzIoMC41KSkgKiB1dl9wYWRfc2NhbGU7CgogICAgLy8gc2NyZWVuIHNwYWNlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb3NpdGlvbgogICAgdmVjNCBxdWFkX3ZlcnRleCA9ICh0cmFucyAqIHZlYzQoMi4wICogcGFkZGVkX2Jib3hfc2l6ZSAqIGdldF9wb3NpdGlvbigpLCAwLjAsIDAuMCkpOwogICAgZ2xfUG9zaXRpb24gPSB2Y2xpcCArIHF1YWRfdmVydGV4OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cn0KCq9mcmFnbWVudF9zb3VyY2XaHAgKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjNCBnbG93Y29sb3I7CnZlYzQgZ2V0X2dsb3djb2xvcigpe3JldHVybiBnbG93Y29sb3I7fQp1bmlmb3JtIHZlYzQgc3Ryb2tlY29sb3I7CnZlYzQgZ2V0X3N0cm9rZWNvbG9yKCl7cmV0dXJuIHN0cm9rZWNvbG9yO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgZ2xvd3dpZHRoOwpmbG9hdCBnZXRfZ2xvd3dpZHRoKCl7cmV0dXJuIGdsb3d3aWR0aDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBmbG9hdCBzdHJva2V3aWR0aDsKZmxvYXQgZ2V0X3N0cm9rZXdpZHRoKCl7cmV0dXJuIHN0cm9rZXdpZHRoO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKaW4gdmVjNCBmcmFnX2NvbG9yOwppbiB2ZWMyIGZyYWdfdXY7CgojZGVmaW5lIENJUkNMRSAgICAgICAgICAgIDAKI2RlZmluZSBSRUNUQU5HTEUgICAgICAgICAxCiNkZWZpbmUgUk9VTkRFRF9SRUNUQU5HTEUgMgojZGVmaW5lIERJU1RBTkNFRklFTEQgICAgIDMKI2RlZmluZSBUUklBTkdMRSAgICAgICAgICA0CgojZGVmaW5lIE1fU1FSVF8yICAgICAgICAgIDEuNDE0MjEzNQoKCi8vIEhhbGYgd2lkdGggb2YgYW50aWFsaWFzaW5nIHNtb290aHN0ZXAKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAoKaW4gZmxvYXQgZnJhZ191dnNjYWxlOwppbiBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7CmluIHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwoKLy8gVGhlc2UgdmVyc2lvbnMgb2YgYWFzdGVwIGFzc3VtZSB0aGF0IGBkaXN0YCBpcyBhIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbgovLyB3aGljaCBoYXMgYmVlbiBzY2FsZWQgdG8gYmUgaW4gdW5pdHMgb2YgcGl4ZWxzLgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxICsgQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCB0aHJlc2hvbGQyLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDErQU5USUFMSUFTX1JBRElVUywgZGlzdCkgLQogICAgICAgICAgIHNtb290aHN0ZXAodGhyZXNob2xkMi1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQyK0FOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgovLyBQcm9jZWR1cmFsIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbnMgb24gdGhlIHV2IGNvb3JkaW5hdGUgcGF0Y2ggWzAsMV14WzAsMV0KLy8gTm90ZSB0aGF0IGZvciBhbnRpYWxpYXNpbmcgdG8gd29yayBwcm9wZXJseSB0aGVzZSBzaG91bGQgYmUgKnNjYWxlIHByZXNlcnZpbmcqCi8vIChJZiB5b3UgbXVzdCByZXNjYWxlIHV2LCBtYWtlIHN1cmUgdG8gcHV0IHRoZSBzY2FsZSBmYWN0b3IgYmFjayBpbiBsYXRlci4pCmZsb2F0IHRyaWFuZ2xlKHZlYzIgUCl7CiAgICBQIC09IHZlYzIoMC41KTsKICAgIGZsb2F0IHggPSBNX1NRUlRfMiAqIChQLnggLSBQLnkpOwogICAgZmxvYXQgeSA9IE1fU1FSVF8yICogKFAueCArIFAueSk7CiAgICBmbG9hdCByMSA9IG1heChhYnMoeCksIGFicyh5KSkgLSAxLjAvKDIuMCpNX1NRUlRfMik7CiAgICBmbG9hdCByMiA9IFAueTsKICAgIHJldHVybiAtbWF4KHIxLHIyKTsKfQoKZmxvYXQgY2lyY2xlKHZlYzIgdXYpewogICAgcmV0dXJuIDAuNS1sZW5ndGgodXYtdmVjMigwLjUpKTsKfQoKZmxvYXQgcmVjdGFuZ2xlKHZlYzIgdXYpewogICAgdmVjMiBkID0gbWF4KC11diwgdXYtdmVjMigxKSk7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKSk7Cn0KCmZsb2F0IHJvdW5kZWRfcmVjdGFuZ2xlKHZlYzIgdXYsIHZlYzIgdGwsIHZlYzIgYnIpewogICAgdmVjMiBkID0gbWF4KHRsLXV2LCB1di1icik7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKS10bC54KTsKfQoKdm9pZCBmaWxsKGJvb2wgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgY29sb3IgPSBtaXgoY29sb3IsIGZpbGxjb2xvciwgaW5maWxsKTsKfQoKdm9pZCBmaWxsKHNhbXBsZXIyRCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICB2ZWM0IGltX2NvbG9yID0gdGV4dHVyZShpbWFnZSwgdXYueXgpOwogICAgY29sb3IgPSBtaXgoY29sb3IsIGltX2NvbG9yLCBpbmZpbGwpOwp9Cgp2b2lkIHN0cm9rZSh2ZWM0IHN0cm9rZWNvbG9yLCBmbG9hdCBzaWduZWRfZGlzdGFuY2UsIGZsb2F0IHdpZHRoLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGlmICh3aWR0aCAhPSAwLjApewogICAgICAgIGZsb2F0IHQgPSBhYXN0ZXAobWluKHdpZHRoLCAwLjApLCBtYXgod2lkdGgsIDAuMCksIHNpZ25lZF9kaXN0YW5jZSk7CiAgICAgICAgdmVjNCBiZ19jb2xvciA9IG1peChjb2xvciwgdmVjNChzdHJva2Vjb2xvci5yZ2IsIDApLCBmbG9hdChzaWduZWRfZGlzdGFuY2UgPCAwLjUgKiB3aWR0aCkpOwogICAgICAgIGNvbG9yID0gbWl4KGJnX2NvbG9yLCBzdHJva2Vjb2xvciwgdCk7CiAgICB9Cn0KCnZvaWQgZ2xvdyh2ZWM0IGdsb3djb2xvciwgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlLCBmbG9hdCBpbnNpZGUsIGlub3V0IHZlYzQgY29sb3IpewogICAgZmxvYXQgZ2xvd193aWR0aCA9IGdldF9nbG93d2lkdGgoKSAqIGdldF9weF9wZXJfdW5pdCgpOwogICAgZmxvYXQgc3Ryb2tlX3dpZHRoID0gZ2V0X3N0cm9rZXdpZHRoKCkgKiBnZXRfcHhfcGVyX3VuaXQoKTsKICAgIGlmIChnbG93X3dpZHRoID4gMC4wKXsKICAgICAgICBmbG9hdCBvdXRzaWRlID0gKGFicyhzaWduZWRfZGlzdGFuY2UpIC0gc3Ryb2tlX3dpZHRoKSAvIGdsb3dfd2lkdGg7CiAgICAgICAgZmxvYXQgYWxwaGEgPSAxLjAgLSBvdXRzaWRlOwogICAgICAgIGNvbG9yID0gbWl4KHZlYzQoZ2xvd2NvbG9yLnJnYiwgZ2xvd2NvbG9yLmEqYWxwaGEpLCBjb2xvciwgaW5zaWRlKTsKICAgIH0KfQoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVscy4gQ29udmVydCB0byBzYW1lIGRpc3RhbmNlCiAgICAvLyBzY2FsaW5nIGFzIGZfdXYueCBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgcHJvY2VkdXJhbCBzaWduZWRfZGlzdGFuY2UKICAgIC8vIGNhbGN1bGF0aW9ucy4KICAgIHJldHVybiBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgKiB0ZXh0dXJlKGRpc3RhbmNlZmllbGQsIHV2KS5yOwp9CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChib29sIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgcmV0dXJuIDAuMDsKfQoKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlID0gMC4wOwoKICAgIHZlYzQgdXZfb2ZmID0gZnJhZ191dl9vZmZzZXRfd2lkdGg7CiAgICB2ZWMyIHRleF91diA9IG1peCh1dl9vZmYueHksIHV2X29mZi56dywgY2xhbXAoZnJhZ191diwgMC4wLCAxLjApKTsKCiAgICBpbnQgc2hhcGUgPSBnZXRfc2hhcGVfdHlwZSgpOwogICAgaWYoc2hhcGUgPT0gQ0lSQ0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IGNpcmNsZShmcmFnX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gRElTVEFOQ0VGSUVMRCkgewogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGRpc3RhbmNlZmllbGQsIHRleF91dik7CiAgICAgICAgaWYgKGdldF9zdHJva2V3aWR0aCgpID4gMC4wIHx8IGdldF9nbG93d2lkdGgoKSA+IDAuMCkgewogICAgICAgICAgICAvLyBDb21wZW5zYXRlIGZvciB0aGUgY2xhbXBpbmcgb2YgdGV4X3V2IGJ5IGFuIGFwcHJveGltYXRlCiAgICAgICAgICAgIC8vIGV4dGVuc2lvbiBvZiB0aGUgc2lnbmVkIGRpc3RhbmNlIG91dHNpZGUgdGhlIHZhbGlkIHRleHR1cmUKICAgICAgICAgICAgLy8gcmVnaW9uLgogICAgICAgICAgICB2ZWMyIGJ1ZnV2ID0gZnJhZ191diAtIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKTsKICAgICAgICAgICAgc2lnbmVkX2Rpc3RhbmNlIC09IGxlbmd0aChidWZ1dik7CiAgICAgICAgfQogICAgfSBlbHNlIGlmKHNoYXBlID09IFJPVU5ERURfUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHJvdW5kZWRfcmVjdGFuZ2xlKGZyYWdfdXYsIHZlYzIoMC4yKSwgdmVjMigwLjgpKTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IDEuMDsgLy8gcmVjdGFuZ2xlKGZfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBUUklBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSB0cmlhbmdsZShmcmFnX3V2KTsKCiAgICBzaWduZWRfZGlzdGFuY2UgKj0gZnJhZ191dnNjYWxlOwoKCiAgICBmbG9hdCBzdHJva2Vfd2lkdGggPSBnZXRfc3Ryb2tld2lkdGgoKSAqIGdldF9weF9wZXJfdW5pdCgpOwogICAgZmxvYXQgaW5zaWRlX3N0YXJ0ID0gbWF4KC1zdHJva2Vfd2lkdGgsIDAuMCk7CiAgICBmbG9hdCBpbnNpZGUgPSBhYXN0ZXAoaW5zaWRlX3N0YXJ0LCBzaWduZWRfZGlzdGFuY2UpOwoKICAgIHZlYzQgZmluYWxfY29sb3IgPSB2ZWM0KGZyYWdfY29sb3IueHl6LCAwKTsKICAgIGZpbGwoaW1hZ2UsIGZyYWdfY29sb3IsIGZyYWdfdXYsIGluc2lkZSwgZmluYWxfY29sb3IpOwogICAgc3Ryb2tlKGdldF9zdHJva2Vjb2xvcigpLCBzaWduZWRfZGlzdGFuY2UsIC1zdHJva2Vfd2lkdGgsIGZpbmFsX2NvbG9yKTsKICAgIGdsb3coZ2V0X2dsb3djb2xvcigpLCBzaWduZWRfZGlzdGFuY2UsIGFhc3RlcCgtc3Ryb2tlX3dpZHRoLCBzaWduZWRfZGlzdGFuY2UpLCBmaW5hbF9jb2xvcik7CgogICAgLy8gZGVidWcgLSBzaG93IGJhY2tncm91bmQKICAgIC8vIGZpbmFsX2NvbG9yLmEgPSBjbGFtcChmaW5hbF9jb2xvci5hLCAwLjAsIDEuMCk7CiAgICAvLyBmaW5hbF9jb2xvciA9IHZlYzQoCiAgICAvLyAgICAgdmVjMygxLDAsMCkgKiAoMS4wIC0gZmluYWxfY29sb3IuYSkgKyBmaW5hbF9jb2xvci5yZ2IgKiBmaW5hbF9jb2xvci5hLAogICAgLy8gICAgIDAuNCArIDAuNiAqIGZpbmFsX2NvbG9yLmEKICAgIC8vICk7CgogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZmluYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCgogICAgaWYgKGZpbmFsX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmaW5hbF9jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4ercXVhZF9vZmZzZXSCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXqm1hcmtlcnNpemWCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXrW1hcmtlcl9vZmZzZXSCq3R5cGVfbGVuZ3RoA6RmbGF0xwAXpWNvbG9ygqt0eXBlX2xlbmd0aASkZmxhdMcAF691dl9vZmZzZXRfd2lkdGiCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXo3Bvc4KrdHlwZV9sZW5ndGgDpGZsYXTHABepcm90YXRpb25zgqt0eXBlX2xlbmd0aASkZmxhdMcAF4indmlzaWJsZccHaKY5NDcwMDekbmFtZdkgbGluZXNlZ21lbnRzLTYxNTE1NjEwNDQ4NTY1OTA0MTaqYXR0cmlidXRlc4OlY29sb3LHB2imOTQ4MzMyqWxpbmVwb2ludMcHaKY5NDgzMzGpbGluZXdpZHRoxwdopjk0ODMzM6R1dWlkszYxNTE1NjEwNDQ4NTY1OTA0MTapY2FtX3NwYWNlpXBpeGVsqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjk0ODMzNKh1bmlmb3Jtc4ancGlja2luZ8KlbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACnbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACIp3Zpc2libGXHB2imOTQ2NzU5pG5hbWXZIGxpbmVzZWdtZW50cy01NDA4MTU3Nzk3NDgxOTkxMjUxqmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5NDgzMzekdXVpZLM1NDA4MTU3Nzk3NDgxOTkxMjUxqWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjk0ODMzOKh1bmlmb3Jtc4qncGlja2luZ8KpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAIA/rWxpbmV3aWR0aF9lbmTKP4AAAKtkZXB0aF9zaGlmdMoAAAAAq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAoEEAAIA/r2xpbmV3aWR0aF9zdGFydMo/gAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAN4AEKx0cmFuc3BhcmVuY3nHB2imOTQ3MTEzpXNwYWNlxwdopjk0NzExOKx2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIA/AACAPwAAgD8AAAAAAAAAAAAAgD8AAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAL8AAAC/AAAAPwAAAL8AAAC/AAAAPwAAAD8AAAA/pG5hbWW4dGV4dC00NDM2NDk2MTY3OTk0MDE1MjE0qWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1z3gAYq3B4X3Blcl91bml0yj+AAACpZ2xvd2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqWJpbGxib2FyZMKoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACtcHJlcHJvamVjdGlvbsdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+nYW1iaWVudMcMF2Zm5j5mZuY+ZmbmPqluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACtZGlzdGFuY2VmaWVsZIqpbWluRmlsdGVyrExpbmVhckZpbHRlcqphbmlzb3Ryb3B5ykGAAACpbWFnRmlsdGVyrExpbmVhckZpbHRlcqV3cmFwU65SZXBlYXRXcmFwcGluZ6RkYXRhrXRleHR1cmVfYXRsYXOsdGhyZWVfZm9ybWF0qVJlZEZvcm1hdKRzaXplks0EAM0EAKV3cmFwVK5SZXBlYXRXcmFwcGluZ6R0eXBlp1NhbXBsZXKqdGhyZWVfdHlwZalGbG9hdFR5cGWqY29sb3JyYW5nZcKyYXRsYXNfdGV4dHVyZV9zaXplykSAAACrc3Ryb2tld2lkdGjKAAAAAKtzdHJva2Vjb2xvctgXAAAAAAAAAAAAAAAAAAAAAKlnbG93d2lkdGjKAAAAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAJZDAACWQ6VpbWFnZcKpb2JqZWN0X2lkAKpzaGFwZV90eXBlA7B0cmFuc2Zvcm1fbWFya2VywqtsaWdodF9jb2xvcscMFwAAAD8AAAA/AAAAP6tkZXB0aF9zaGlmdMoAAAAAqGNvbG9ybWFwwqd2aXNpYmxlxwdopjk0Njc1N6ttYXJrZXJzcGFjZccHaKY5NDcxMjaxYXR0cmlidXRlX3VwZGF0ZXLHB2imOTQ4Mzc1qG92ZXJkcmF3xwdopjk0NzExNK91bmlmb3JtX3VwZGF0ZXLHB2imOTQ4Mzc2pWZhY2Vzxwdopjk0ODM3NKR1dWlkszQ0MzY0OTYxNjc5OTQwMTUyMTStdmVydGV4X3NvdXJjZdoglgpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKcHJlY2lzaW9uIG1lZGl1bXAgaXNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgaXNhbXBsZXIzRDsKcHJlY2lzaW9uIG1lZGl1bXAgdXNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgdXNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQppbiB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzQgZ2xvd2NvbG9yOwp2ZWM0IGdldF9nbG93Y29sb3IoKXtyZXR1cm4gZ2xvd2NvbG9yO30KdW5pZm9ybSB2ZWM0IHN0cm9rZWNvbG9yOwp2ZWM0IGdldF9zdHJva2Vjb2xvcigpe3JldHVybiBzdHJva2Vjb2xvcjt9CnVuaWZvcm0gYm9vbCBjb2xvcm1hcDsKYm9vbCBnZXRfY29sb3JtYXAoKXtyZXR1cm4gY29sb3JtYXA7fQp1bmlmb3JtIGZsb2F0IGdsb3d3aWR0aDsKZmxvYXQgZ2V0X2dsb3d3aWR0aCgpe3JldHVybiBnbG93d2lkdGg7fQp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleHR1cmVfc2l6ZTsKZmxvYXQgZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpe3JldHVybiBhdGxhc190ZXh0dXJlX3NpemU7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gZmxvYXQgcHhfcGVyX3VuaXQ7CmZsb2F0IGdldF9weF9wZXJfdW5pdCgpe3JldHVybiBweF9wZXJfdW5pdDt9CnVuaWZvcm0gaW50IHNoYXBlX3R5cGU7CmludCBnZXRfc2hhcGVfdHlwZSgpe3JldHVybiBzaGFwZV90eXBlO30KdW5pZm9ybSBzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZDsKdW5pZm9ybSB2ZWM0IG5hbl9jb2xvcjsKdmVjNCBnZXRfbmFuX2NvbG9yKCl7cmV0dXJuIG5hbl9jb2xvcjt9CnVuaWZvcm0gZmxvYXQgc3Ryb2tld2lkdGg7CmZsb2F0IGdldF9zdHJva2V3aWR0aCgpe3JldHVybiBzdHJva2V3aWR0aDt9CnVuaWZvcm0gYm9vbCBpbWFnZTsKYm9vbCBnZXRfaW1hZ2UoKXtyZXR1cm4gaW1hZ2U7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gYm9vbCBiaWxsYm9hcmQ7CmJvb2wgZ2V0X2JpbGxib2FyZCgpe3JldHVybiBiaWxsYm9hcmQ7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSBib29sIGNvbG9ycmFuZ2U7CmJvb2wgZ2V0X2NvbG9ycmFuZ2UoKXtyZXR1cm4gY29sb3JyYW5nZTt9CnVuaWZvcm0gdmVjNCBsb3djbGlwOwp2ZWM0IGdldF9sb3djbGlwKCl7cmV0dXJuIGxvd2NsaXA7fQp1bmlmb3JtIGJvb2wgdHJhbnNmb3JtX21hcmtlcjsKYm9vbCBnZXRfdHJhbnNmb3JtX21hcmtlcigpe3JldHVybiB0cmFuc2Zvcm1fbWFya2VyO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBtYXJrZXJzaXplOwp2ZWMyIGdldF9tYXJrZXJzaXplKCl7cmV0dXJuIG1hcmtlcnNpemU7fQppbiB2ZWM0IHJvdGF0aW9uczsKdmVjNCBnZXRfcm90YXRpb25zKCl7cmV0dXJuIHJvdGF0aW9uczt9CmluIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KaW4gdmVjMyBwb3M7CnZlYzMgZ2V0X3Bvcygpe3JldHVybiBwb3M7fQppbiB2ZWMyIHF1YWRfb2Zmc2V0Owp2ZWMyIGdldF9xdWFkX29mZnNldCgpe3JldHVybiBxdWFkX29mZnNldDt9CmluIHZlYzQgdXZfb2Zmc2V0X3dpZHRoOwp2ZWM0IGdldF91dl9vZmZzZXRfd2lkdGgoKXtyZXR1cm4gdXZfb2Zmc2V0X3dpZHRoO30KaW4gdmVjMyBtYXJrZXJfb2Zmc2V0Owp2ZWMzIGdldF9tYXJrZXJfb2Zmc2V0KCl7cmV0dXJuIG1hcmtlcl9vZmZzZXQ7fQoKdW5pZm9ybSBtYXQ0IHByb2plY3Rpb247CnVuaWZvcm0gbWF0NCB2aWV3OwoKdW5pZm9ybSBmbG9hdCBhdGxhc190ZXhfZGltOwoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKb3V0IHZlYzIgZnJhZ191djsKb3V0IGZsb2F0IGZyYWdfdXZzY2FsZTsKb3V0IGZsb2F0IGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZTsKb3V0IHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CgojZGVmaW5lIEFOVElBTElBU19SQURJVVMgMC44CgoKbWF0NCBxbWF0KHZlYzQgcXVhdCl7CiAgICBmbG9hdCBudW0gPSBxdWF0LnggKiAyLjA7CiAgICBmbG9hdCBudW0yID0gcXVhdC55ICogMi4wOwogICAgZmxvYXQgbnVtMyA9IHF1YXQueiAqIDIuMDsKICAgIGZsb2F0IG51bTQgPSBxdWF0LnggKiBudW07CiAgICBmbG9hdCBudW01ID0gcXVhdC55ICogbnVtMjsKICAgIGZsb2F0IG51bTYgPSBxdWF0LnogKiBudW0zOwogICAgZmxvYXQgbnVtNyA9IHF1YXQueCAqIG51bTI7CiAgICBmbG9hdCBudW04ID0gcXVhdC54ICogbnVtMzsKICAgIGZsb2F0IG51bTkgPSBxdWF0LnkgKiBudW0zOwogICAgZmxvYXQgbnVtMTAgPSBxdWF0LncgKiBudW07CiAgICBmbG9hdCBudW0xMSA9IHF1YXQudyAqIG51bTI7CiAgICBmbG9hdCBudW0xMiA9IHF1YXQudyAqIG51bTM7CiAgICByZXR1cm4gbWF0NCgKICAgICAgICAoMS4wIC0gKG51bTUgKyBudW02KSksIChudW03ICsgbnVtMTIpLCAgICAgICAgKG51bTggLSBudW0xMSksICAgICAgICAwLjAsCiAgICAgICAgKG51bTcgLSBudW0xMiksICAgICAgICAoMS4wIC0gKG51bTQgKyBudW02KSksIChudW05ICsgbnVtMTApLCAgICAgICAgMC4wLAogICAgICAgIChudW04ICsgbnVtMTEpLCAgICAgICAgKG51bTkgLSBudW0xMCksICAgICAgICAoMS4wIC0gKG51bTQgKyBudW01KSksIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAxLjAKICAgICk7Cn0KCmZsb2F0IGRpc3RhbmNlZmllbGRfc2NhbGUoKXsKICAgIC8vIEdseXBoIGRpc3RhbmNlIGZpZWxkIHVuaXRzIGFyZSBpbiBwaXhlbHM7IGNvbnZlcnQgdG8gZGltZW5zaW9ubGVzcwogICAgLy8geC1jb29yZGluYXRlIG9mIHRleHR1cmUgaW5zdGVhZCBmb3IgY29uc2lzdGVuY3kgd2l0aCBwcm9ncmFtbWF0aWMgdXYKICAgIC8vIGRpc3RhbmNlIGZpZWxkcyBpbiBmcmFnbWVudCBzaGFkZXIuIFNlZSBhbHNvIGNvbW1lbnRzIGJlbG93LgogICAgdmVjNCB1dl9yZWN0ID0gZ2V0X3V2X29mZnNldF93aWR0aCgpOwogICAgZmxvYXQgcGl4c2l6ZV94ID0gKHV2X3JlY3QueiAtIHV2X3JlY3QueCkgKiBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCk7CiAgICByZXR1cm4gLTEuMC9waXhzaXplX3g7Cn0KCnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQodmVjMyB2KXtyZXR1cm4gdmVjNCh2LCAxLjApO30KdmVjNCB0b3ZlYzQodmVjNCB2KXtyZXR1cm4gdjt9CgptYXQyIGRpYWdtKHZlYzIgdil7CiAgICByZXR1cm4gbWF0Mih2LngsIDAuMCwgMC4wLCB2LnkpOwp9CgpmbG9hdCBfZGV0ZXJtaW5hbnQobWF0MiBtKSB7CiAgcmV0dXJuIG1bMF1bMF0gKiBtWzFdWzFdIC0gbVswXVsxXSAqIG1bMV1bMF07Cn0KCnZvaWQgbWFpbigpewogICAgLy8gZ2V0X3BvcygpIHJldHVybnMgdGhlIHBvc2l0aW9uIG9mIHRoZSBzY2F0dGVyIG1hcmtlcgogICAgLy8gZ2V0X3Bvc2l0aW9uKCkgcmV0dXJucyB0aGUgKHJlbGF0aXZlKSBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCBxdWFkIHZlcnRleAoKICAgIHZlYzIgYmJveF9yYWRpdXMgPSAwLjUgKiBnZXRfbWFya2Vyc2l6ZSgpOwogICAgdmVjMiBzcHJpdGVfYmJveF9jZW50cmUgPSBnZXRfcXVhZF9vZmZzZXQoKSArIGJib3hfcmFkaXVzOwoKICAgIG1hdDQgcHZpZXcgPSBwcm9qZWN0aW9uICogdmlldzsKICAgIG1hdDQgdHJhbnMgPSBnZXRfdHJhbnNmb3JtX21hcmtlcigpID8gbW9kZWwgOiBtYXQ0KDEuMCk7CgogICAgLy8gQ29tcHV0ZSBjZW50cmUgb2YgYmlsbGJvYXJkIGluIGNsaXBwaW5nIGNvb3JkaW5hdGVzCiAgICAvLyBBbHdheXMgdHJhbnNmb3JtIHRleHQvc2NhdHRlciBwb3NpdGlvbiBhcmd1bWVudAogICAgdmVjNCBkYXRhX3BvaW50ID0gZ2V0X3ByZXByb2plY3Rpb24oKSAqIG1vZGVsICogdmVjNCh0b3ZlYzMoZ2V0X3BvcygpKSwgMSk7CiAgICAvLyBtYXliZSB0cmFuc2Zvcm0gbWFya2VyX29mZnNldCArIGdseXBoIG9mZnNldHMKICAgIGRhdGFfcG9pbnQgPSB2ZWM0KGRhdGFfcG9pbnQueHl6IC8gZGF0YV9wb2ludC53ICsgbWF0Myh0cmFucykgKiB0b3ZlYzMoZ2V0X21hcmtlcl9vZmZzZXQoKSksIDEpOwogICAgZGF0YV9wb2ludCA9IHB2aWV3ICogZGF0YV9wb2ludDsKCiAgICAvLyBDb21wdXRlIHRyYW5zZm9ybSBmb3IgdGhlIG9mZnNldCB2ZWN0b3JzIGZyb20gdGhlIGNlbnRyYWwgcG9pbnQKICAgIHRyYW5zID0gKGdldF9iaWxsYm9hcmQoKSA/IHByb2plY3Rpb24gOiBwdmlldykgKiBxbWF0KGdldF9yb3RhdGlvbnMoKSkgKiB0cmFuczsKICAgIHZlYzQgc3ByaXRlX2NlbnRlciA9IHRyYW5zICogdmVjNChzcHJpdGVfYmJveF9jZW50cmUsIDAsIDApOwoKICAgIHZlYzQgdmNsaXAgPSBkYXRhX3BvaW50ICsgc3ByaXRlX2NlbnRlcjsKCiAgICAvLyBFeHRyYSBidWZmZXJpbmcgaXMgcmVxdWlyZWQgYXJvdW5kIHNwcml0ZXMgd2hpY2ggYXJlIGFudGlhbGlhc2VkIHNvIHRoYXQKICAgIC8vIHRoZSBhbnRpYWxpYXMgYmx1ciBkb2Vzbid0IGdldCBjdXQgb2ZmIChzZWUgIzE1KS4gVGhpcyBibHVyIGZhbGxzIHRvCiAgICAvLyB6ZXJvIGF0IGEgcmFkaXVzIG9mIEFOVElBTElBU19SQURJVVMgcGl4ZWxzIGluIHRoZSB2aWV3cG9ydCBjb29yZGluYXRlcwogICAgLy8gYW5kIHdlIHdhbnQgdG8gYnVmZmVyIHRoZSB2ZXJ0aWNlcyBpbiB0aGUgKnNvdXJjZSogc3ByaXRlIGNvb3JkaW5hdGUKICAgIC8vIHN5c3RlbSBzbyB0aGF0IHdlIGdldCB0aGlzIGFtb3VudCBpbiB0aGUgb3V0cHV0IGNvb3JkaW5hdGVzLgogICAgLy8KICAgIC8vIEhlcmUgd2UgY2FsY3VsYXRlIHRoZSBkZXJpdmF0aXZlIG9mIHRoZSBtYXBwaW5nIGZyb20gc3ByaXRlIHh5CiAgICAvLyBjb29yZGluYXRlcyAoZGVmaW5lZCBieSBgdHJhbnNgKSBpbnRvIHRoZSB2aWV3cG9ydCBwaXhlbCBjb29yZGluYXRlcy4KICAgIC8vIFRoZSBkZXJpdmF0aXZlIG5lZWRzIHRvIGluY2x1ZGUgdGhlIHByb3BlciB0ZXJtIGZvciB0aGUgcGVyc3BlY3RpdmUKICAgIC8vIGRpdmlkZSBpbnRvIE5EQywgZXZhbHVhdGVkIGF0IHRoZSBjZW50cmUgcG9pbnQgYHZjbGlwYC4KICAgIG1hdDQgZF9uZGNfZF9jbGlwID0gbWF0NCgKICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwgICAgICAgICAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwKICAgICAgICAtdmNsaXAueHl6Lyh2Y2xpcC53KnZjbGlwLncpLCAgICAgICAgICAwLjAKICAgICk7CiAgICBtYXQyIGR4eXZfZHh5cyA9IGRpYWdtKDAuNSAqIHB4X3Blcl91bml0ICogZ2V0X3Jlc29sdXRpb24oKSkgKiBtYXQyKGRfbmRjX2RfY2xpcCp0cmFucyk7CiAgICAvLyBOb3csIG91ciBidWZmZXIgc2l6ZSBpcyBleHByZXNzZWQgaW4gdmlld3BvcnQgcGl4ZWxzIGJ1dCB3ZSBnZXQgYmFjayB0bwogICAgLy8gdGhlIHNwcml0ZSBjb29yZGluYXRlIHN5c3RlbSB1c2luZyB0aGUgc2NhbGUgZmFjdG9yIG9mIHRoZQogICAgLy8gdHJhbnNmb3JtYXRpb24gKGZvciBpc290cm9waWMgdHJhbnNmb3JtYXRpb25zKS4gRm9yIGFuaXNvdHJvcGljCiAgICAvLyB0cmFuc2Zvcm1hdGlvbnMsIHRoZSBnZW9tZXRyaWMgbWVhbiBvZiB0aGUgdHdvIHByaW5jaXBsZSBzY2FsZSBmYWN0b3JzCiAgICAvLyBpcyBhIHJlYXNvbmFibGUgY29tcHJvbWlzZToKICAgIGZsb2F0IHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlID0gc3FydChhYnMoX2RldGVybWluYW50KGR4eXZfZHh5cykpKTsKCiAgICAvLyBJbiB0aGUgZnJhZ21lbnQgc2hhZGVyIHdlIHdhbnQgb3VyIHNpZ25lZCBkaXN0YW5jZSBpbiB2aWV3cG9ydCAocGl4ZWwpCiAgICAvLyBjb29yZHMgZm9yIGRpcmVjdCB1c2UgaW4gYW50aWFsaWFzaW5nIHN0ZXAgZnVuY3Rpb25zLiBXZSB0aGVyZWZvcmUgbmVlZAogICAgLy8gYSBzY2FsaW5nIGZhY3RvciBzaW1pbGFyIHRvIHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlLCBidXQgaW5jbHVkaW5nCiAgICAvLyB0aGUgdXYtPnNwcml0ZSBjb29yZGluYXRlIHN5c3RlbSBzY2FsaW5nIGZhY3RvciBhcyB3ZWxsLiAgV2UgY2hvb3NlIHRvCiAgICAvLyB1c2UgdGhlIGJvdW5kaW5nIGJveCAqeCogd2lkdGggZm9yIHRoaXMuIFRoaXMgY29tZXMgd2l0aCBzb21lCiAgICAvLyBjb25zaXN0ZW5jeSBjb25kaXRpb25zOgogICAgLy8gKiBGb3IgcHJvY2VkdXJhbCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdGhlIHNwcml0ZSBib3VuZGluZyBib3ggdG8gYmUKICAgIC8vICAgc3F1YXJlLiAoSWYgbm90LCB0aGUgdXYgY29vcmRpbmF0ZXMgd2lsbCBiZSBhbmlzb3Ryb3BpY2FsbHkgc2NhbGVkIGFuZAogICAgLy8gICBhbnkgY2FsY3VsYXRpb24gYmFzZWQgb24gdGhlbSB3aWxsIG5vdCBiZSBhIGRpc3RhbmNlIGZ1bmN0aW9uLikKICAgIC8vICogRm9yIHNhbXBsZWQgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRvIGNvbnNpc3RlbnRseSBjaG9vc2UgdGhlICp4KgogICAgLy8gICBmb3IgdGhlIHNjYWxpbmcgaW4gZ2V0X2Rpc3RhbmNlZmllbGRfc2NhbGUoKS4KICAgIGZsb2F0IHNwcml0ZV9mcm9tX3Vfc2NhbGUgPSBtaW4oYWJzKGdldF9tYXJrZXJzaXplKCkueCksIGFicyhnZXRfbWFya2Vyc2l6ZSgpLnkpKTsKICAgIGZyYWdfdXZzY2FsZSA9IHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlICogc3ByaXRlX2Zyb21fdV9zY2FsZTsKICAgIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSA9IGRpc3RhbmNlZmllbGRfc2NhbGUoKTsKCiAgICAvLyBhZGQgcGFkZGluZyBmb3IgQUEsIHN0cm9rZSBhbmQgZ2xvdyAobm9uIG5hdGl2ZSBkaXN0YW5jZWZpZWxkcyBkb24ndCBuZWVkCiAgICAvLyBBQSBwYWRkaW5nIGJ1dCBDSVJDTEUgZXRjIGRvKQogICAgZmxvYXQgcHB1ID0gZ2V0X3B4X3Blcl91bml0KCk7CiAgICB2ZWMyIHBhZGRlZF9iYm94X3NpemUgPSBiYm94X3JhZGl1cyArICgKICAgICAgICBBTlRJQUxJQVNfUkFESVVTICsgbWF4KDAuMCwgZ2V0X3N0cm9rZXdpZHRoKCkgKiBwcHUpICsgbWF4KDAuMCwgZ2V0X2dsb3d3aWR0aCgpICogcHB1KQogICAgKSAvIHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlOwogICAgdmVjMiB1dl9wYWRfc2NhbGUgPSBwYWRkZWRfYmJveF9zaXplIC8gYmJveF9yYWRpdXM7CgogICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3IoKSk7CiAgICBmcmFnX3V2X29mZnNldF93aWR0aCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIC8vIGdldF91digpIHJldHVybnMgKDAsIDApLCAoMSwgMCksICgwLCAxKSBvciAoMSwgMSkKICAgIC8vIHRvIGFjY29tb2RhdGUgc3Ryb2tlIGFuZCBnbG93d2lkdGggd2UgbmVlZCB0byBleHRydWRlIHV2J3Mgb3V0d2FyZHMgZnJvbSAoMC41LCAwLjUpCiAgICBmcmFnX3V2ID0gdmVjMigwLjUpICsgKGdldF91digpIC0gdmVjMigwLjUpKSAqIHV2X3BhZF9zY2FsZTsKCiAgICAvLyBzY3JlZW4gc3BhY2UgY29vcmRpbmF0ZXMgb2YgdGhlIHBvc2l0aW9uCiAgICB2ZWM0IHF1YWRfdmVydGV4ID0gKHRyYW5zICogdmVjNCgyLjAgKiBwYWRkZWRfYmJveF9zaXplICogZ2V0X3Bvc2l0aW9uKCksIDAuMCwgMC4wKSk7CiAgICBnbF9Qb3NpdGlvbiA9IHZjbGlwICsgcXVhZF92ZXJ0ZXg7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKfQoKr2ZyYWdtZW50X3NvdXJjZdocCApwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKcHJlY2lzaW9uIG1lZGl1bXAgaXNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgaXNhbXBsZXIzRDsKcHJlY2lzaW9uIG1lZGl1bXAgdXNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgdXNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWM0IGdsb3djb2xvcjsKdmVjNCBnZXRfZ2xvd2NvbG9yKCl7cmV0dXJuIGdsb3djb2xvcjt9CnVuaWZvcm0gdmVjNCBzdHJva2Vjb2xvcjsKdmVjNCBnZXRfc3Ryb2tlY29sb3IoKXtyZXR1cm4gc3Ryb2tlY29sb3I7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSBmbG9hdCBnbG93d2lkdGg7CmZsb2F0IGdldF9nbG93d2lkdGgoKXtyZXR1cm4gZ2xvd3dpZHRoO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGZsb2F0IHB4X3Blcl91bml0OwpmbG9hdCBnZXRfcHhfcGVyX3VuaXQoKXtyZXR1cm4gcHhfcGVyX3VuaXQ7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHN0cm9rZXdpZHRoOwpmbG9hdCBnZXRfc3Ryb2tld2lkdGgoKXtyZXR1cm4gc3Ryb2tld2lkdGg7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgppbiB2ZWM0IGZyYWdfY29sb3I7CmluIHZlYzIgZnJhZ191djsKCiNkZWZpbmUgQ0lSQ0xFICAgICAgICAgICAgMAojZGVmaW5lIFJFQ1RBTkdMRSAgICAgICAgIDEKI2RlZmluZSBST1VOREVEX1JFQ1RBTkdMRSAyCiNkZWZpbmUgRElTVEFOQ0VGSUVMRCAgICAgMwojZGVmaW5lIFRSSUFOR0xFICAgICAgICAgIDQKCiNkZWZpbmUgTV9TUVJUXzIgICAgICAgICAgMS40MTQyMTM1CgoKLy8gSGFsZiB3aWR0aCBvZiBhbnRpYWxpYXNpbmcgc21vb3Roc3RlcAojZGVmaW5lIEFOVElBTElBU19SQURJVVMgMC44CgppbiBmbG9hdCBmcmFnX3V2c2NhbGU7CmluIGZsb2F0IGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZTsKaW4gdmVjNCBmcmFnX3V2X29mZnNldF93aWR0aDsKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CgovLyBUaGVzZSB2ZXJzaW9ucyBvZiBhYXN0ZXAgYXNzdW1lIHRoYXQgYGRpc3RgIGlzIGEgc2lnbmVkIGRpc3RhbmNlIGZ1bmN0aW9uCi8vIHdoaWNoIGhhcyBiZWVuIHNjYWxlZCB0byBiZSBpbiB1bml0cyBvZiBwaXhlbHMuCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDEgKyBBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IHRocmVzaG9sZDIsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMStBTlRJQUxJQVNfUkFESVVTLCBkaXN0KSAtCiAgICAgICAgICAgc21vb3Roc3RlcCh0aHJlc2hvbGQyLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDIrQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCi8vIFByb2NlZHVyYWwgc2lnbmVkIGRpc3RhbmNlIGZ1bmN0aW9ucyBvbiB0aGUgdXYgY29vcmRpbmF0ZSBwYXRjaCBbMCwxXXhbMCwxXQovLyBOb3RlIHRoYXQgZm9yIGFudGlhbGlhc2luZyB0byB3b3JrIHByb3Blcmx5IHRoZXNlIHNob3VsZCBiZSAqc2NhbGUgcHJlc2VydmluZyoKLy8gKElmIHlvdSBtdXN0IHJlc2NhbGUgdXYsIG1ha2Ugc3VyZSB0byBwdXQgdGhlIHNjYWxlIGZhY3RvciBiYWNrIGluIGxhdGVyLikKZmxvYXQgdHJpYW5nbGUodmVjMiBQKXsKICAgIFAgLT0gdmVjMigwLjUpOwogICAgZmxvYXQgeCA9IE1fU1FSVF8yICogKFAueCAtIFAueSk7CiAgICBmbG9hdCB5ID0gTV9TUVJUXzIgKiAoUC54ICsgUC55KTsKICAgIGZsb2F0IHIxID0gbWF4KGFicyh4KSwgYWJzKHkpKSAtIDEuMC8oMi4wKk1fU1FSVF8yKTsKICAgIGZsb2F0IHIyID0gUC55OwogICAgcmV0dXJuIC1tYXgocjEscjIpOwp9CgpmbG9hdCBjaXJjbGUodmVjMiB1dil7CiAgICByZXR1cm4gMC41LWxlbmd0aCh1di12ZWMyKDAuNSkpOwp9CgpmbG9hdCByZWN0YW5nbGUodmVjMiB1dil7CiAgICB2ZWMyIGQgPSBtYXgoLXV2LCB1di12ZWMyKDEpKTsKICAgIHJldHVybiAtKChsZW5ndGgobWF4KHZlYzIoMC4wKSwgZCkpICsgbWluKDAuMCwgbWF4KGQueCwgZC55KSkpKTsKfQoKZmxvYXQgcm91bmRlZF9yZWN0YW5nbGUodmVjMiB1diwgdmVjMiB0bCwgdmVjMiBicil7CiAgICB2ZWMyIGQgPSBtYXgodGwtdXYsIHV2LWJyKTsKICAgIHJldHVybiAtKChsZW5ndGgobWF4KHZlYzIoMC4wKSwgZCkpICsgbWluKDAuMCwgbWF4KGQueCwgZC55KSkpLXRsLngpOwp9Cgp2b2lkIGZpbGwoYm9vbCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICBjb2xvciA9IG1peChjb2xvciwgZmlsbGNvbG9yLCBpbmZpbGwpOwp9Cgp2b2lkIGZpbGwoc2FtcGxlcjJEIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIHZlYzQgaW1fY29sb3IgPSB0ZXh0dXJlKGltYWdlLCB1di55eCk7CiAgICBjb2xvciA9IG1peChjb2xvciwgaW1fY29sb3IsIGluZmlsbCk7Cn0KCnZvaWQgc3Ryb2tlKHZlYzQgc3Ryb2tlY29sb3IsIGZsb2F0IHNpZ25lZF9kaXN0YW5jZSwgZmxvYXQgd2lkdGgsIGlub3V0IHZlYzQgY29sb3IpewogICAgaWYgKHdpZHRoICE9IDAuMCl7CiAgICAgICAgZmxvYXQgdCA9IGFhc3RlcChtaW4od2lkdGgsIDAuMCksIG1heCh3aWR0aCwgMC4wKSwgc2lnbmVkX2Rpc3RhbmNlKTsKICAgICAgICB2ZWM0IGJnX2NvbG9yID0gbWl4KGNvbG9yLCB2ZWM0KHN0cm9rZWNvbG9yLnJnYiwgMCksIGZsb2F0KHNpZ25lZF9kaXN0YW5jZSA8IDAuNSAqIHdpZHRoKSk7CiAgICAgICAgY29sb3IgPSBtaXgoYmdfY29sb3IsIHN0cm9rZWNvbG9yLCB0KTsKICAgIH0KfQoKdm9pZCBnbG93KHZlYzQgZ2xvd2NvbG9yLCBmbG9hdCBzaWduZWRfZGlzdGFuY2UsIGZsb2F0IGluc2lkZSwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICBmbG9hdCBnbG93X3dpZHRoID0gZ2V0X2dsb3d3aWR0aCgpICogZ2V0X3B4X3Blcl91bml0KCk7CiAgICBmbG9hdCBzdHJva2Vfd2lkdGggPSBnZXRfc3Ryb2tld2lkdGgoKSAqIGdldF9weF9wZXJfdW5pdCgpOwogICAgaWYgKGdsb3dfd2lkdGggPiAwLjApewogICAgICAgIGZsb2F0IG91dHNpZGUgPSAoYWJzKHNpZ25lZF9kaXN0YW5jZSkgLSBzdHJva2Vfd2lkdGgpIC8gZ2xvd193aWR0aDsKICAgICAgICBmbG9hdCBhbHBoYSA9IDEuMCAtIG91dHNpZGU7CiAgICAgICAgY29sb3IgPSBtaXgodmVjNChnbG93Y29sb3IucmdiLCBnbG93Y29sb3IuYSphbHBoYSksIGNvbG9yLCBpbnNpZGUpOwogICAgfQp9CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzLiBDb252ZXJ0IHRvIHNhbWUgZGlzdGFuY2UKICAgIC8vIHNjYWxpbmcgYXMgZl91di54IGZvciBjb25zaXN0ZW5jeSB3aXRoIHRoZSBwcm9jZWR1cmFsIHNpZ25lZF9kaXN0YW5jZQogICAgLy8gY2FsY3VsYXRpb25zLgogICAgcmV0dXJuIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSAqIHRleHR1cmUoZGlzdGFuY2VmaWVsZCwgdXYpLnI7Cn0KCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGJvb2wgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICByZXR1cm4gMC4wOwp9Cgp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CiAgICBmbG9hdCBzaWduZWRfZGlzdGFuY2UgPSAwLjA7CgogICAgdmVjNCB1dl9vZmYgPSBmcmFnX3V2X29mZnNldF93aWR0aDsKICAgIHZlYzIgdGV4X3V2ID0gbWl4KHV2X29mZi54eSwgdXZfb2ZmLnp3LCBjbGFtcChmcmFnX3V2LCAwLjAsIDEuMCkpOwoKICAgIGludCBzaGFwZSA9IGdldF9zaGFwZV90eXBlKCk7CiAgICBpZihzaGFwZSA9PSBDSVJDTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gY2lyY2xlKGZyYWdfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBESVNUQU5DRUZJRUxEKSB7CiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gc2NhbGVkX2Rpc3RhbmNlZmllbGQoZGlzdGFuY2VmaWVsZCwgdGV4X3V2KTsKICAgICAgICBpZiAoZ2V0X3N0cm9rZXdpZHRoKCkgPiAwLjAgfHwgZ2V0X2dsb3d3aWR0aCgpID4gMC4wKSB7CiAgICAgICAgICAgIC8vIENvbXBlbnNhdGUgZm9yIHRoZSBjbGFtcGluZyBvZiB0ZXhfdXYgYnkgYW4gYXBwcm94aW1hdGUKICAgICAgICAgICAgLy8gZXh0ZW5zaW9uIG9mIHRoZSBzaWduZWQgZGlzdGFuY2Ugb3V0c2lkZSB0aGUgdmFsaWQgdGV4dHVyZQogICAgICAgICAgICAvLyByZWdpb24uCiAgICAgICAgICAgIHZlYzIgYnVmdXYgPSBmcmFnX3V2IC0gY2xhbXAoZnJhZ191diwgMC4wLCAxLjApOwogICAgICAgICAgICBzaWduZWRfZGlzdGFuY2UgLT0gbGVuZ3RoKGJ1ZnV2KTsKICAgICAgICB9CiAgICB9IGVsc2UgaWYoc2hhcGUgPT0gUk9VTkRFRF9SRUNUQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gcm91bmRlZF9yZWN0YW5nbGUoZnJhZ191diwgdmVjMigwLjIpLCB2ZWMyKDAuOCkpOwogICAgZWxzZSBpZihzaGFwZSA9PSBSRUNUQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gMS4wOyAvLyByZWN0YW5nbGUoZl91dik7CiAgICBlbHNlIGlmKHNoYXBlID09IFRSSUFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHRyaWFuZ2xlKGZyYWdfdXYpOwoKICAgIHNpZ25lZF9kaXN0YW5jZSAqPSBmcmFnX3V2c2NhbGU7CgoKICAgIGZsb2F0IHN0cm9rZV93aWR0aCA9IGdldF9zdHJva2V3aWR0aCgpICogZ2V0X3B4X3Blcl91bml0KCk7CiAgICBmbG9hdCBpbnNpZGVfc3RhcnQgPSBtYXgoLXN0cm9rZV93aWR0aCwgMC4wKTsKICAgIGZsb2F0IGluc2lkZSA9IGFhc3RlcChpbnNpZGVfc3RhcnQsIHNpZ25lZF9kaXN0YW5jZSk7CgogICAgdmVjNCBmaW5hbF9jb2xvciA9IHZlYzQoZnJhZ19jb2xvci54eXosIDApOwogICAgZmlsbChpbWFnZSwgZnJhZ19jb2xvciwgZnJhZ191diwgaW5zaWRlLCBmaW5hbF9jb2xvcik7CiAgICBzdHJva2UoZ2V0X3N0cm9rZWNvbG9yKCksIHNpZ25lZF9kaXN0YW5jZSwgLXN0cm9rZV93aWR0aCwgZmluYWxfY29sb3IpOwogICAgZ2xvdyhnZXRfZ2xvd2NvbG9yKCksIHNpZ25lZF9kaXN0YW5jZSwgYWFzdGVwKC1zdHJva2Vfd2lkdGgsIHNpZ25lZF9kaXN0YW5jZSksIGZpbmFsX2NvbG9yKTsKCiAgICAvLyBkZWJ1ZyAtIHNob3cgYmFja2dyb3VuZAogICAgLy8gZmluYWxfY29sb3IuYSA9IGNsYW1wKGZpbmFsX2NvbG9yLmEsIDAuMCwgMS4wKTsKICAgIC8vIGZpbmFsX2NvbG9yID0gdmVjNCgKICAgIC8vICAgICB2ZWMzKDEsMCwwKSAqICgxLjAgLSBmaW5hbF9jb2xvci5hKSArIGZpbmFsX2NvbG9yLnJnYiAqIGZpbmFsX2NvbG9yLmEsCiAgICAvLyAgICAgMC40ICsgMC42ICogZmluYWxfY29sb3IuYQogICAgLy8gKTsKCiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChmaW5hbF9jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKCiAgICBpZiAoZmluYWxfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IGZpbmFsX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzh6txdWFkX29mZnNldIKrdHlwZV9sZW5ndGgCpGZsYXTHIBemm3TAAACowJzEmMAAAKjA/KmZwFK4rsC8dJvAAACowKptYXJrZXJzaXplgqt0eXBlX2xlbmd0aAKkZmxhdMcgF0jhXkFyaKNBi2yJQXJoo0GHFolBhxalQaAai0FyaKNBrW1hcmtlcl9vZmZzZXSCq3R5cGVfbGVuZ3RoA6RmbGF0xzAXhxb5wMdLo8AAAAAAhxb5wMdLo8AAAAAAhxb5wMdLo8AAAAAAhxb5wMdLo8AAAAAApWNvbG9ygqt0eXBlX2xlbmd0aASkZmxhdMdAFwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD+vdXZfb2Zmc2V0X3dpZHRogqt0eXBlX2xlbmd0aASkZmxhdMdAFwCAMD4AIA8/AIBPPgCgGj8AwJQ+AMDvPgBAqD4AYAM/AMCUPgCgAz8AQKg+AGAPPwDAlD4AoA8/AECoPgAgGz+jcG9zgqt0eXBlX2xlbmd0aAOkZmxhdMcwFwAAuEGii0hCAAAAAAAAuEHvwfhCAAAAAAAAuEEHn0ZDAAAAAAAAuEGMbohDAAAAAKlyb3RhdGlvbnOCq3R5cGVfbGVuZ3RoBKRmbGF0x0AXAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAP4indmlzaWJsZccHaKY5NDcyNTekbmFtZdkhbGluZXNlZ21lbnRzLTEzNzY0MzA4MjY3NTA0MDUxNjc0qmF0dHJpYnV0ZXODpWNvbG9yxwdopjk0ODM4MKlsaW5lcG9pbnTHB2imOTQ4Mzc5qWxpbmV3aWR0aMcHaKY5NDgzODGkdXVpZLQxMzc2NDMwODI2NzUwNDA1MTY3NKljYW1fc3BhY2WlcGl4ZWypcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTQ4MzgyqHVuaWZvcm1zhqdwaWNraW5nwqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAKdsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAIindmlzaWJsZccHaKY5NDczMTGkbmFtZdkhbGluZXNlZ21lbnRzLTEwNDg2MzEzNDkyNTMxMDcyMTkyqmF0dHJpYnV0ZXOBqWxpbmVwb2ludMcHaKY5NDgzODWkdXVpZLQxMDQ4NjMxMzQ5MjUzMTA3MjE5MqljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5NDgzODaodW5pZm9ybXOKp3BpY2tpbmfCqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAAACAP61saW5ld2lkdGhfZW5kyj+AAACrZGVwdGhfc2hpZnTKAAAAAKtjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAACBBAACAP69saW5ld2lkdGhfc3RhcnTKP4AAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACIp3Zpc2libGXHB2imOTQ3MzQ2pG5hbWXZIWxpbmVzZWdtZW50cy0xMTI1ODUxOTM0MjUwOTMxNzA0MqphdHRyaWJ1dGVzgalsaW5lcG9pbnTHB2imOTQ4Mzg5pHV1aWS0MTEyNTg1MTkzNDI1MDkzMTcwNDKpY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTQ4MzkwqHVuaWZvcm1ziqdwaWNraW5nwqljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+tbGluZXdpZHRoX2VuZMo/gAAAq2RlcHRoX3NoaWZ0ygAAAACrY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+vbGluZXdpZHRoX3N0YXJ0yj+AAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAiKd2aXNpYmxlxwdopjk0NzM4MaRuYW1l2SFsaW5lc2VnbWVudHMtMTYzODQ1NTAwNTAxNzY5NjgxNzmqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjk0ODM5M6R1dWlktDE2Mzg0NTUwMDUwMTc2OTY4MTc5qWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjk0ODM5NKh1bmlmb3Jtc4qncGlja2luZ8KpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAIA/rWxpbmV3aWR0aF9lbmTKP4AAAKtkZXB0aF9zaGlmdMoAAAAAq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIEEAAIA/r2xpbmV3aWR0aF9zdGFydMo/gAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAIindmlzaWJsZccHaKY5NDc0MTakbmFtZdkgbGluZXNlZ21lbnRzLTkxMjk1MjY4Njk5MDQyNzM4NDeqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjk0ODM5N6R1dWlkszkxMjk1MjY4Njk5MDQyNzM4NDepY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTQ4Mzk4qHVuaWZvcm1ziqdwaWNraW5nwqljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+tbGluZXdpZHRoX2VuZMo/gAAAq2RlcHRoX3NoaWZ0ygAAAACrY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+vbGluZXdpZHRoX3N0YXJ0yj+AAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAiKd2aXNpYmxlxwdopjk0NzQ1MaRuYW1l2SFsaW5lc2VnbWVudHMtMTEwMTc5MTIyMDE0NjkxOTUwODOqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjk0ODQwMaR1dWlktDExMDE3OTEyMjAxNDY5MTk1MDgzqWNhbV9zcGFjZaRkYXRhqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjk0ODQwMqh1bmlmb3Jtc4qncGlja2luZ8KpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAIA/rWxpbmV3aWR0aF9lbmTKP4AAAKtkZXB0aF9zaGlmdMoAAAAAq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAoEEAAIA/r2xpbmV3aWR0aF9zdGFydMo/gAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAIindmlzaWJsZccHaKY5NDc0ODekbmFtZdkgbGluZXNlZ21lbnRzLTQ1MTIwOTIxMTI5NTM1OTgzNDOqYXR0cmlidXRlc4GpbGluZXBvaW50xwdopjk0ODQwNaR1dWlkszQ1MTIwOTIxMTI5NTM1OTgzNDOpY2FtX3NwYWNlpGRhdGGpcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTQ4NDA2qHVuaWZvcm1ziqdwaWNraW5nwqljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+tbGluZXdpZHRoX2VuZMo/gAAAq2RlcHRoX3NoaWZ0ygAAAACrY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACgQQAAgD+vbGluZXdpZHRoX3N0YXJ0yj+AAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAA3gAQrHRyYW5zcGFyZW5jeccHaKY5NDc1Mjilc3BhY2XHB2imOTQ3NTMzrHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgD8AAIA/AACAPwAAAAAAAAAAAACAPwAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAvwAAAL8AAAA/AAAAvwAAAL8AAAA/AAAAPwAAAD+kbmFtZbh0ZXh0LTI2MDY4ODMwNTMwNzU2MjE1MzKpY2FtX3NwYWNlpGRhdGGodW5pZm9ybXPeABircHhfcGVyX3VuaXTKP4AAAKlnbG93Y29sb3LYFwAAAAAAAAAAAAAAAAAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/p2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACpYmlsbGJvYXJkwqhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAK1wcmVwcm9qZWN0aW9ux0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dhbWJpZW50xwwXZmbmPmZm5j5mZuY+qW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAK1kaXN0YW5jZWZpZWxkiqltaW5GaWx0ZXKsTGluZWFyRmlsdGVyqmFuaXNvdHJvcHnKQYAAAKltYWdGaWx0ZXKsTGluZWFyRmlsdGVypXdyYXBTrlJlcGVhdFdyYXBwaW5npGRhdGGtdGV4dHVyZV9hdGxhc6x0aHJlZV9mb3JtYXSpUmVkRm9ybWF0pHNpemWSzQQAzQQApXdyYXBUrlJlcGVhdFdyYXBwaW5npHR5cGWnU2FtcGxlcqp0aHJlZV90eXBlqUZsb2F0VHlwZapjb2xvcnJhbmdlwrJhdGxhc190ZXh0dXJlX3NpemXKRIAAAKtzdHJva2V3aWR0aMoAAAAAq3N0cm9rZWNvbG9y2BcAAAAAAAAAAAAAAAAAAAAAqWdsb3d3aWR0aMoAAAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAAlkMAAJZDpWltYWdlwqlvYmplY3RfaWQAqnNoYXBlX3R5cGUDsHRyYW5zZm9ybV9tYXJrZXLCq2xpZ2h0X2NvbG9yxwwXAAAAPwAAAD8AAAA/q2RlcHRoX3NoaWZ0ygAAAACoY29sb3JtYXDCp3Zpc2libGXHB2imOTQ3NTQyq21hcmtlcnNwYWNlxwdopjk0NzU0NrFhdHRyaWJ1dGVfdXBkYXRlcscHaKY5NDg0NDOob3ZlcmRyYXfHB2imOTQ3NTI5r3VuaWZvcm1fdXBkYXRlcscHaKY5NDg0NDSlZmFjZXPHB2imOTQ4NDQypHV1aWSzMjYwNjg4MzA1MzA3NTYyMTUzMq12ZXJ0ZXhfc291cmNl2iCWCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjNCBnbG93Y29sb3I7CnZlYzQgZ2V0X2dsb3djb2xvcigpe3JldHVybiBnbG93Y29sb3I7fQp1bmlmb3JtIHZlYzQgc3Ryb2tlY29sb3I7CnZlYzQgZ2V0X3N0cm9rZWNvbG9yKCl7cmV0dXJuIHN0cm9rZWNvbG9yO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgZ2xvd3dpZHRoOwpmbG9hdCBnZXRfZ2xvd3dpZHRoKCl7cmV0dXJuIGdsb3d3aWR0aDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBmbG9hdCBzdHJva2V3aWR0aDsKZmxvYXQgZ2V0X3N0cm9rZXdpZHRoKCl7cmV0dXJuIHN0cm9rZXdpZHRoO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKCgoKLy8gUGVyIGluc3RhbmNlIGF0dHJpYnV0ZXM6IAppbiB2ZWMyIG1hcmtlcnNpemU7CnZlYzIgZ2V0X21hcmtlcnNpemUoKXtyZXR1cm4gbWFya2Vyc2l6ZTt9CmluIHZlYzQgcm90YXRpb25zOwp2ZWM0IGdldF9yb3RhdGlvbnMoKXtyZXR1cm4gcm90YXRpb25zO30KaW4gdmVjNCBjb2xvcjsKdmVjNCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQppbiB2ZWMzIHBvczsKdmVjMyBnZXRfcG9zKCl7cmV0dXJuIHBvczt9CmluIHZlYzIgcXVhZF9vZmZzZXQ7CnZlYzIgZ2V0X3F1YWRfb2Zmc2V0KCl7cmV0dXJuIHF1YWRfb2Zmc2V0O30KaW4gdmVjNCB1dl9vZmZzZXRfd2lkdGg7CnZlYzQgZ2V0X3V2X29mZnNldF93aWR0aCgpe3JldHVybiB1dl9vZmZzZXRfd2lkdGg7fQppbiB2ZWMzIG1hcmtlcl9vZmZzZXQ7CnZlYzMgZ2V0X21hcmtlcl9vZmZzZXQoKXtyZXR1cm4gbWFya2VyX29mZnNldDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleF9kaW07CgpvdXQgdmVjNCBmcmFnX2NvbG9yOwpvdXQgdmVjMiBmcmFnX3V2OwpvdXQgZmxvYXQgZnJhZ191dnNjYWxlOwpvdXQgZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwpvdXQgdmVjNCBmcmFnX3V2X29mZnNldF93aWR0aDsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCiNkZWZpbmUgQU5USUFMSUFTX1JBRElVUyAwLjgKCgptYXQ0IHFtYXQodmVjNCBxdWF0KXsKICAgIGZsb2F0IG51bSA9IHF1YXQueCAqIDIuMDsKICAgIGZsb2F0IG51bTIgPSBxdWF0LnkgKiAyLjA7CiAgICBmbG9hdCBudW0zID0gcXVhdC56ICogMi4wOwogICAgZmxvYXQgbnVtNCA9IHF1YXQueCAqIG51bTsKICAgIGZsb2F0IG51bTUgPSBxdWF0LnkgKiBudW0yOwogICAgZmxvYXQgbnVtNiA9IHF1YXQueiAqIG51bTM7CiAgICBmbG9hdCBudW03ID0gcXVhdC54ICogbnVtMjsKICAgIGZsb2F0IG51bTggPSBxdWF0LnggKiBudW0zOwogICAgZmxvYXQgbnVtOSA9IHF1YXQueSAqIG51bTM7CiAgICBmbG9hdCBudW0xMCA9IHF1YXQudyAqIG51bTsKICAgIGZsb2F0IG51bTExID0gcXVhdC53ICogbnVtMjsKICAgIGZsb2F0IG51bTEyID0gcXVhdC53ICogbnVtMzsKICAgIHJldHVybiBtYXQ0KAogICAgICAgICgxLjAgLSAobnVtNSArIG51bTYpKSwgKG51bTcgKyBudW0xMiksICAgICAgICAobnVtOCAtIG51bTExKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtNyAtIG51bTEyKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTYpKSwgKG51bTkgKyBudW0xMCksICAgICAgICAwLjAsCiAgICAgICAgKG51bTggKyBudW0xMSksICAgICAgICAobnVtOSAtIG51bTEwKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTUpKSwgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDEuMAogICAgKTsKfQoKZmxvYXQgZGlzdGFuY2VmaWVsZF9zY2FsZSgpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVsczsgY29udmVydCB0byBkaW1lbnNpb25sZXNzCiAgICAvLyB4LWNvb3JkaW5hdGUgb2YgdGV4dHVyZSBpbnN0ZWFkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHByb2dyYW1tYXRpYyB1dgogICAgLy8gZGlzdGFuY2UgZmllbGRzIGluIGZyYWdtZW50IHNoYWRlci4gU2VlIGFsc28gY29tbWVudHMgYmVsb3cuCiAgICB2ZWM0IHV2X3JlY3QgPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICBmbG9hdCBwaXhzaXplX3ggPSAodXZfcmVjdC56IC0gdXZfcmVjdC54KSAqIGdldF9hdGxhc190ZXh0dXJlX3NpemUoKTsKICAgIHJldHVybiAtMS4wL3BpeHNpemVfeDsKfQoKdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm1hdDIgZGlhZ20odmVjMiB2KXsKICAgIHJldHVybiBtYXQyKHYueCwgMC4wLCAwLjAsIHYueSk7Cn0KCmZsb2F0IF9kZXRlcm1pbmFudChtYXQyIG0pIHsKICByZXR1cm4gbVswXVswXSAqIG1bMV1bMV0gLSBtWzBdWzFdICogbVsxXVswXTsKfQoKdm9pZCBtYWluKCl7CiAgICAvLyBnZXRfcG9zKCkgcmV0dXJucyB0aGUgcG9zaXRpb24gb2YgdGhlIHNjYXR0ZXIgbWFya2VyCiAgICAvLyBnZXRfcG9zaXRpb24oKSByZXR1cm5zIHRoZSAocmVsYXRpdmUpIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IHF1YWQgdmVydGV4CgogICAgdmVjMiBiYm94X3JhZGl1cyA9IDAuNSAqIGdldF9tYXJrZXJzaXplKCk7CiAgICB2ZWMyIHNwcml0ZV9iYm94X2NlbnRyZSA9IGdldF9xdWFkX29mZnNldCgpICsgYmJveF9yYWRpdXM7CgogICAgbWF0NCBwdmlldyA9IHByb2plY3Rpb24gKiB2aWV3OwogICAgbWF0NCB0cmFucyA9IGdldF90cmFuc2Zvcm1fbWFya2VyKCkgPyBtb2RlbCA6IG1hdDQoMS4wKTsKCiAgICAvLyBDb21wdXRlIGNlbnRyZSBvZiBiaWxsYm9hcmQgaW4gY2xpcHBpbmcgY29vcmRpbmF0ZXMKICAgIC8vIEFsd2F5cyB0cmFuc2Zvcm0gdGV4dC9zY2F0dGVyIHBvc2l0aW9uIGFyZ3VtZW50CiAgICB2ZWM0IGRhdGFfcG9pbnQgPSBnZXRfcHJlcHJvamVjdGlvbigpICogbW9kZWwgKiB2ZWM0KHRvdmVjMyhnZXRfcG9zKCkpLCAxKTsKICAgIC8vIG1heWJlIHRyYW5zZm9ybSBtYXJrZXJfb2Zmc2V0ICsgZ2x5cGggb2Zmc2V0cwogICAgZGF0YV9wb2ludCA9IHZlYzQoZGF0YV9wb2ludC54eXogLyBkYXRhX3BvaW50LncgKyBtYXQzKHRyYW5zKSAqIHRvdmVjMyhnZXRfbWFya2VyX29mZnNldCgpKSwgMSk7CiAgICBkYXRhX3BvaW50ID0gcHZpZXcgKiBkYXRhX3BvaW50OwoKICAgIC8vIENvbXB1dGUgdHJhbnNmb3JtIGZvciB0aGUgb2Zmc2V0IHZlY3RvcnMgZnJvbSB0aGUgY2VudHJhbCBwb2ludAogICAgdHJhbnMgPSAoZ2V0X2JpbGxib2FyZCgpID8gcHJvamVjdGlvbiA6IHB2aWV3KSAqIHFtYXQoZ2V0X3JvdGF0aW9ucygpKSAqIHRyYW5zOwogICAgdmVjNCBzcHJpdGVfY2VudGVyID0gdHJhbnMgKiB2ZWM0KHNwcml0ZV9iYm94X2NlbnRyZSwgMCwgMCk7CgogICAgdmVjNCB2Y2xpcCA9IGRhdGFfcG9pbnQgKyBzcHJpdGVfY2VudGVyOwoKICAgIC8vIEV4dHJhIGJ1ZmZlcmluZyBpcyByZXF1aXJlZCBhcm91bmQgc3ByaXRlcyB3aGljaCBhcmUgYW50aWFsaWFzZWQgc28gdGhhdAogICAgLy8gdGhlIGFudGlhbGlhcyBibHVyIGRvZXNuJ3QgZ2V0IGN1dCBvZmYgKHNlZSAjMTUpLiBUaGlzIGJsdXIgZmFsbHMgdG8KICAgIC8vIHplcm8gYXQgYSByYWRpdXMgb2YgQU5USUFMSUFTX1JBRElVUyBwaXhlbHMgaW4gdGhlIHZpZXdwb3J0IGNvb3JkaW5hdGVzCiAgICAvLyBhbmQgd2Ugd2FudCB0byBidWZmZXIgdGhlIHZlcnRpY2VzIGluIHRoZSAqc291cmNlKiBzcHJpdGUgY29vcmRpbmF0ZQogICAgLy8gc3lzdGVtIHNvIHRoYXQgd2UgZ2V0IHRoaXMgYW1vdW50IGluIHRoZSBvdXRwdXQgY29vcmRpbmF0ZXMuCiAgICAvLwogICAgLy8gSGVyZSB3ZSBjYWxjdWxhdGUgdGhlIGRlcml2YXRpdmUgb2YgdGhlIG1hcHBpbmcgZnJvbSBzcHJpdGUgeHkKICAgIC8vIGNvb3JkaW5hdGVzIChkZWZpbmVkIGJ5IGB0cmFuc2ApIGludG8gdGhlIHZpZXdwb3J0IHBpeGVsIGNvb3JkaW5hdGVzLgogICAgLy8gVGhlIGRlcml2YXRpdmUgbmVlZHMgdG8gaW5jbHVkZSB0aGUgcHJvcGVyIHRlcm0gZm9yIHRoZSBwZXJzcGVjdGl2ZQogICAgLy8gZGl2aWRlIGludG8gTkRDLCBldmFsdWF0ZWQgYXQgdGhlIGNlbnRyZSBwb2ludCBgdmNsaXBgLgogICAgbWF0NCBkX25kY19kX2NsaXAgPSBtYXQ0KAogICAgICAgIDEuMC92Y2xpcC53LCAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLAogICAgICAgIC12Y2xpcC54eXovKHZjbGlwLncqdmNsaXAudyksICAgICAgICAgIDAuMAogICAgKTsKICAgIG1hdDIgZHh5dl9keHlzID0gZGlhZ20oMC41ICogcHhfcGVyX3VuaXQgKiBnZXRfcmVzb2x1dGlvbigpKSAqIG1hdDIoZF9uZGNfZF9jbGlwKnRyYW5zKTsKICAgIC8vIE5vdywgb3VyIGJ1ZmZlciBzaXplIGlzIGV4cHJlc3NlZCBpbiB2aWV3cG9ydCBwaXhlbHMgYnV0IHdlIGdldCBiYWNrIHRvCiAgICAvLyB0aGUgc3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHVzaW5nIHRoZSBzY2FsZSBmYWN0b3Igb2YgdGhlCiAgICAvLyB0cmFuc2Zvcm1hdGlvbiAoZm9yIGlzb3Ryb3BpYyB0cmFuc2Zvcm1hdGlvbnMpLiBGb3IgYW5pc290cm9waWMKICAgIC8vIHRyYW5zZm9ybWF0aW9ucywgdGhlIGdlb21ldHJpYyBtZWFuIG9mIHRoZSB0d28gcHJpbmNpcGxlIHNjYWxlIGZhY3RvcnMKICAgIC8vIGlzIGEgcmVhc29uYWJsZSBjb21wcm9taXNlOgogICAgZmxvYXQgdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgPSBzcXJ0KGFicyhfZGV0ZXJtaW5hbnQoZHh5dl9keHlzKSkpOwoKICAgIC8vIEluIHRoZSBmcmFnbWVudCBzaGFkZXIgd2Ugd2FudCBvdXIgc2lnbmVkIGRpc3RhbmNlIGluIHZpZXdwb3J0IChwaXhlbCkKICAgIC8vIGNvb3JkcyBmb3IgZGlyZWN0IHVzZSBpbiBhbnRpYWxpYXNpbmcgc3RlcCBmdW5jdGlvbnMuIFdlIHRoZXJlZm9yZSBuZWVkCiAgICAvLyBhIHNjYWxpbmcgZmFjdG9yIHNpbWlsYXIgdG8gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUsIGJ1dCBpbmNsdWRpbmcKICAgIC8vIHRoZSB1di0+c3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHNjYWxpbmcgZmFjdG9yIGFzIHdlbGwuICBXZSBjaG9vc2UgdG8KICAgIC8vIHVzZSB0aGUgYm91bmRpbmcgYm94ICp4KiB3aWR0aCBmb3IgdGhpcy4gVGhpcyBjb21lcyB3aXRoIHNvbWUKICAgIC8vIGNvbnNpc3RlbmN5IGNvbmRpdGlvbnM6CiAgICAvLyAqIEZvciBwcm9jZWR1cmFsIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0aGUgc3ByaXRlIGJvdW5kaW5nIGJveCB0byBiZQogICAgLy8gICBzcXVhcmUuIChJZiBub3QsIHRoZSB1diBjb29yZGluYXRlcyB3aWxsIGJlIGFuaXNvdHJvcGljYWxseSBzY2FsZWQgYW5kCiAgICAvLyAgIGFueSBjYWxjdWxhdGlvbiBiYXNlZCBvbiB0aGVtIHdpbGwgbm90IGJlIGEgZGlzdGFuY2UgZnVuY3Rpb24uKQogICAgLy8gKiBGb3Igc2FtcGxlZCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdG8gY29uc2lzdGVudGx5IGNob29zZSB0aGUgKngqCiAgICAvLyAgIGZvciB0aGUgc2NhbGluZyBpbiBnZXRfZGlzdGFuY2VmaWVsZF9zY2FsZSgpLgogICAgZmxvYXQgc3ByaXRlX2Zyb21fdV9zY2FsZSA9IG1pbihhYnMoZ2V0X21hcmtlcnNpemUoKS54KSwgYWJzKGdldF9tYXJrZXJzaXplKCkueSkpOwogICAgZnJhZ191dnNjYWxlID0gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgKiBzcHJpdGVfZnJvbV91X3NjYWxlOwogICAgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlID0gZGlzdGFuY2VmaWVsZF9zY2FsZSgpOwoKICAgIC8vIGFkZCBwYWRkaW5nIGZvciBBQSwgc3Ryb2tlIGFuZCBnbG93IChub24gbmF0aXZlIGRpc3RhbmNlZmllbGRzIGRvbid0IG5lZWQKICAgIC8vIEFBIHBhZGRpbmcgYnV0IENJUkNMRSBldGMgZG8pCiAgICBmbG9hdCBwcHUgPSBnZXRfcHhfcGVyX3VuaXQoKTsKICAgIHZlYzIgcGFkZGVkX2Jib3hfc2l6ZSA9IGJib3hfcmFkaXVzICsgKAogICAgICAgIEFOVElBTElBU19SQURJVVMgKyBtYXgoMC4wLCBnZXRfc3Ryb2tld2lkdGgoKSAqIHBwdSkgKyBtYXgoMC4wLCBnZXRfZ2xvd3dpZHRoKCkgKiBwcHUpCiAgICApIC8gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGU7CiAgICB2ZWMyIHV2X3BhZF9zY2FsZSA9IHBhZGRlZF9iYm94X3NpemUgLyBiYm94X3JhZGl1czsKCiAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcigpKTsKICAgIGZyYWdfdXZfb2Zmc2V0X3dpZHRoID0gZ2V0X3V2X29mZnNldF93aWR0aCgpOwogICAgLy8gZ2V0X3V2KCkgcmV0dXJucyAoMCwgMCksICgxLCAwKSwgKDAsIDEpIG9yICgxLCAxKQogICAgLy8gdG8gYWNjb21vZGF0ZSBzdHJva2UgYW5kIGdsb3d3aWR0aCB3ZSBuZWVkIHRvIGV4dHJ1ZGUgdXYncyBvdXR3YXJkcyBmcm9tICgwLjUsIDAuNSkKICAgIGZyYWdfdXYgPSB2ZWMyKDAuNSkgKyAoZ2V0X3V2KCkgLSB2ZWMyKDAuNSkpICogdXZfcGFkX3NjYWxlOwoKICAgIC8vIHNjcmVlbiBzcGFjZSBjb29yZGluYXRlcyBvZiB0aGUgcG9zaXRpb24KICAgIHZlYzQgcXVhZF92ZXJ0ZXggPSAodHJhbnMgKiB2ZWM0KDIuMCAqIHBhZGRlZF9iYm94X3NpemUgKiBnZXRfcG9zaXRpb24oKSwgMC4wLCAwLjApKTsKICAgIGdsX1Bvc2l0aW9uID0gdmNsaXAgKyBxdWFkX3ZlcnRleDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwp9CgqvZnJhZ21lbnRfc291cmNl2hwICnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzQgZ2xvd2NvbG9yOwp2ZWM0IGdldF9nbG93Y29sb3IoKXtyZXR1cm4gZ2xvd2NvbG9yO30KdW5pZm9ybSB2ZWM0IHN0cm9rZWNvbG9yOwp2ZWM0IGdldF9zdHJva2Vjb2xvcigpe3JldHVybiBzdHJva2Vjb2xvcjt9CnVuaWZvcm0gYm9vbCBjb2xvcm1hcDsKYm9vbCBnZXRfY29sb3JtYXAoKXtyZXR1cm4gY29sb3JtYXA7fQp1bmlmb3JtIGZsb2F0IGdsb3d3aWR0aDsKZmxvYXQgZ2V0X2dsb3d3aWR0aCgpe3JldHVybiBnbG93d2lkdGg7fQp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleHR1cmVfc2l6ZTsKZmxvYXQgZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpe3JldHVybiBhdGxhc190ZXh0dXJlX3NpemU7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gZmxvYXQgcHhfcGVyX3VuaXQ7CmZsb2F0IGdldF9weF9wZXJfdW5pdCgpe3JldHVybiBweF9wZXJfdW5pdDt9CnVuaWZvcm0gaW50IHNoYXBlX3R5cGU7CmludCBnZXRfc2hhcGVfdHlwZSgpe3JldHVybiBzaGFwZV90eXBlO30KdW5pZm9ybSBzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZDsKdW5pZm9ybSB2ZWM0IG5hbl9jb2xvcjsKdmVjNCBnZXRfbmFuX2NvbG9yKCl7cmV0dXJuIG5hbl9jb2xvcjt9CnVuaWZvcm0gZmxvYXQgc3Ryb2tld2lkdGg7CmZsb2F0IGdldF9zdHJva2V3aWR0aCgpe3JldHVybiBzdHJva2V3aWR0aDt9CnVuaWZvcm0gYm9vbCBpbWFnZTsKYm9vbCBnZXRfaW1hZ2UoKXtyZXR1cm4gaW1hZ2U7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gYm9vbCBiaWxsYm9hcmQ7CmJvb2wgZ2V0X2JpbGxib2FyZCgpe3JldHVybiBiaWxsYm9hcmQ7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSBib29sIGNvbG9ycmFuZ2U7CmJvb2wgZ2V0X2NvbG9ycmFuZ2UoKXtyZXR1cm4gY29sb3JyYW5nZTt9CnVuaWZvcm0gdmVjNCBsb3djbGlwOwp2ZWM0IGdldF9sb3djbGlwKCl7cmV0dXJuIGxvd2NsaXA7fQp1bmlmb3JtIGJvb2wgdHJhbnNmb3JtX21hcmtlcjsKYm9vbCBnZXRfdHJhbnNmb3JtX21hcmtlcigpe3JldHVybiB0cmFuc2Zvcm1fbWFya2VyO30KCmluIHZlYzQgZnJhZ19jb2xvcjsKaW4gdmVjMiBmcmFnX3V2OwoKI2RlZmluZSBDSVJDTEUgICAgICAgICAgICAwCiNkZWZpbmUgUkVDVEFOR0xFICAgICAgICAgMQojZGVmaW5lIFJPVU5ERURfUkVDVEFOR0xFIDIKI2RlZmluZSBESVNUQU5DRUZJRUxEICAgICAzCiNkZWZpbmUgVFJJQU5HTEUgICAgICAgICAgNAoKI2RlZmluZSBNX1NRUlRfMiAgICAgICAgICAxLjQxNDIxMzUKCgovLyBIYWxmIHdpZHRoIG9mIGFudGlhbGlhc2luZyBzbW9vdGhzdGVwCiNkZWZpbmUgQU5USUFMSUFTX1JBRElVUyAwLjgKCmluIGZsb2F0IGZyYWdfdXZzY2FsZTsKaW4gZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwppbiB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCi8vIFRoZXNlIHZlcnNpb25zIG9mIGFhc3RlcCBhc3N1bWUgdGhhdCBgZGlzdGAgaXMgYSBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb24KLy8gd2hpY2ggaGFzIGJlZW4gc2NhbGVkIHRvIGJlIGluIHVuaXRzIG9mIHBpeGVscy4KZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMSArIEFOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgdGhyZXNob2xkMiwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxK0FOVElBTElBU19SQURJVVMsIGRpc3QpIC0KICAgICAgICAgICBzbW9vdGhzdGVwKHRocmVzaG9sZDItQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMitBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKLy8gUHJvY2VkdXJhbCBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb25zIG9uIHRoZSB1diBjb29yZGluYXRlIHBhdGNoIFswLDFdeFswLDFdCi8vIE5vdGUgdGhhdCBmb3IgYW50aWFsaWFzaW5nIHRvIHdvcmsgcHJvcGVybHkgdGhlc2Ugc2hvdWxkIGJlICpzY2FsZSBwcmVzZXJ2aW5nKgovLyAoSWYgeW91IG11c3QgcmVzY2FsZSB1diwgbWFrZSBzdXJlIHRvIHB1dCB0aGUgc2NhbGUgZmFjdG9yIGJhY2sgaW4gbGF0ZXIuKQpmbG9hdCB0cmlhbmdsZSh2ZWMyIFApewogICAgUCAtPSB2ZWMyKDAuNSk7CiAgICBmbG9hdCB4ID0gTV9TUVJUXzIgKiAoUC54IC0gUC55KTsKICAgIGZsb2F0IHkgPSBNX1NRUlRfMiAqIChQLnggKyBQLnkpOwogICAgZmxvYXQgcjEgPSBtYXgoYWJzKHgpLCBhYnMoeSkpIC0gMS4wLygyLjAqTV9TUVJUXzIpOwogICAgZmxvYXQgcjIgPSBQLnk7CiAgICByZXR1cm4gLW1heChyMSxyMik7Cn0KCmZsb2F0IGNpcmNsZSh2ZWMyIHV2KXsKICAgIHJldHVybiAwLjUtbGVuZ3RoKHV2LXZlYzIoMC41KSk7Cn0KCmZsb2F0IHJlY3RhbmdsZSh2ZWMyIHV2KXsKICAgIHZlYzIgZCA9IG1heCgtdXYsIHV2LXZlYzIoMSkpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSkpOwp9CgpmbG9hdCByb3VuZGVkX3JlY3RhbmdsZSh2ZWMyIHV2LCB2ZWMyIHRsLCB2ZWMyIGJyKXsKICAgIHZlYzIgZCA9IG1heCh0bC11diwgdXYtYnIpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSktdGwueCk7Cn0KCnZvaWQgZmlsbChib29sIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBmaWxsY29sb3IsIGluZmlsbCk7Cn0KCnZvaWQgZmlsbChzYW1wbGVyMkQgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgdmVjNCBpbV9jb2xvciA9IHRleHR1cmUoaW1hZ2UsIHV2Lnl4KTsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBpbV9jb2xvciwgaW5maWxsKTsKfQoKdm9pZCBzdHJva2UodmVjNCBzdHJva2Vjb2xvciwgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlLCBmbG9hdCB3aWR0aCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICBpZiAod2lkdGggIT0gMC4wKXsKICAgICAgICBmbG9hdCB0ID0gYWFzdGVwKG1pbih3aWR0aCwgMC4wKSwgbWF4KHdpZHRoLCAwLjApLCBzaWduZWRfZGlzdGFuY2UpOwogICAgICAgIHZlYzQgYmdfY29sb3IgPSBtaXgoY29sb3IsIHZlYzQoc3Ryb2tlY29sb3IucmdiLCAwKSwgZmxvYXQoc2lnbmVkX2Rpc3RhbmNlIDwgMC41ICogd2lkdGgpKTsKICAgICAgICBjb2xvciA9IG1peChiZ19jb2xvciwgc3Ryb2tlY29sb3IsIHQpOwogICAgfQp9Cgp2b2lkIGdsb3codmVjNCBnbG93Y29sb3IsIGZsb2F0IHNpZ25lZF9kaXN0YW5jZSwgZmxvYXQgaW5zaWRlLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGZsb2F0IGdsb3dfd2lkdGggPSBnZXRfZ2xvd3dpZHRoKCkgKiBnZXRfcHhfcGVyX3VuaXQoKTsKICAgIGZsb2F0IHN0cm9rZV93aWR0aCA9IGdldF9zdHJva2V3aWR0aCgpICogZ2V0X3B4X3Blcl91bml0KCk7CiAgICBpZiAoZ2xvd193aWR0aCA+IDAuMCl7CiAgICAgICAgZmxvYXQgb3V0c2lkZSA9IChhYnMoc2lnbmVkX2Rpc3RhbmNlKSAtIHN0cm9rZV93aWR0aCkgLyBnbG93X3dpZHRoOwogICAgICAgIGZsb2F0IGFscGhhID0gMS4wIC0gb3V0c2lkZTsKICAgICAgICBjb2xvciA9IG1peCh2ZWM0KGdsb3djb2xvci5yZ2IsIGdsb3djb2xvci5hKmFscGhhKSwgY29sb3IsIGluc2lkZSk7CiAgICB9Cn0KCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIC8vIEdseXBoIGRpc3RhbmNlIGZpZWxkIHVuaXRzIGFyZSBpbiBwaXhlbHMuIENvbnZlcnQgdG8gc2FtZSBkaXN0YW5jZQogICAgLy8gc2NhbGluZyBhcyBmX3V2LnggZm9yIGNvbnNpc3RlbmN5IHdpdGggdGhlIHByb2NlZHVyYWwgc2lnbmVkX2Rpc3RhbmNlCiAgICAvLyBjYWxjdWxhdGlvbnMuCiAgICByZXR1cm4gZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlICogdGV4dHVyZShkaXN0YW5jZWZpZWxkLCB1dikucjsKfQoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoYm9vbCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIHJldHVybiAwLjA7Cn0KCnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKICAgIGZsb2F0IHNpZ25lZF9kaXN0YW5jZSA9IDAuMDsKCiAgICB2ZWM0IHV2X29mZiA9IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwogICAgdmVjMiB0ZXhfdXYgPSBtaXgodXZfb2ZmLnh5LCB1dl9vZmYuencsIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKSk7CgogICAgaW50IHNoYXBlID0gZ2V0X3NoYXBlX3R5cGUoKTsKICAgIGlmKHNoYXBlID09IENJUkNMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBjaXJjbGUoZnJhZ191dik7CiAgICBlbHNlIGlmKHNoYXBlID09IERJU1RBTkNFRklFTEQpIHsKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBzY2FsZWRfZGlzdGFuY2VmaWVsZChkaXN0YW5jZWZpZWxkLCB0ZXhfdXYpOwogICAgICAgIGlmIChnZXRfc3Ryb2tld2lkdGgoKSA+IDAuMCB8fCBnZXRfZ2xvd3dpZHRoKCkgPiAwLjApIHsKICAgICAgICAgICAgLy8gQ29tcGVuc2F0ZSBmb3IgdGhlIGNsYW1waW5nIG9mIHRleF91diBieSBhbiBhcHByb3hpbWF0ZQogICAgICAgICAgICAvLyBleHRlbnNpb24gb2YgdGhlIHNpZ25lZCBkaXN0YW5jZSBvdXRzaWRlIHRoZSB2YWxpZCB0ZXh0dXJlCiAgICAgICAgICAgIC8vIHJlZ2lvbi4KICAgICAgICAgICAgdmVjMiBidWZ1diA9IGZyYWdfdXYgLSBjbGFtcChmcmFnX3V2LCAwLjAsIDEuMCk7CiAgICAgICAgICAgIHNpZ25lZF9kaXN0YW5jZSAtPSBsZW5ndGgoYnVmdXYpOwogICAgICAgIH0KICAgIH0gZWxzZSBpZihzaGFwZSA9PSBST1VOREVEX1JFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSByb3VuZGVkX3JlY3RhbmdsZShmcmFnX3V2LCB2ZWMyKDAuMiksIHZlYzIoMC44KSk7CiAgICBlbHNlIGlmKHNoYXBlID09IFJFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSAxLjA7IC8vIHJlY3RhbmdsZShmX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gVFJJQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gdHJpYW5nbGUoZnJhZ191dik7CgogICAgc2lnbmVkX2Rpc3RhbmNlICo9IGZyYWdfdXZzY2FsZTsKCgogICAgZmxvYXQgc3Ryb2tlX3dpZHRoID0gZ2V0X3N0cm9rZXdpZHRoKCkgKiBnZXRfcHhfcGVyX3VuaXQoKTsKICAgIGZsb2F0IGluc2lkZV9zdGFydCA9IG1heCgtc3Ryb2tlX3dpZHRoLCAwLjApOwogICAgZmxvYXQgaW5zaWRlID0gYWFzdGVwKGluc2lkZV9zdGFydCwgc2lnbmVkX2Rpc3RhbmNlKTsKCiAgICB2ZWM0IGZpbmFsX2NvbG9yID0gdmVjNChmcmFnX2NvbG9yLnh5eiwgMCk7CiAgICBmaWxsKGltYWdlLCBmcmFnX2NvbG9yLCBmcmFnX3V2LCBpbnNpZGUsIGZpbmFsX2NvbG9yKTsKICAgIHN0cm9rZShnZXRfc3Ryb2tlY29sb3IoKSwgc2lnbmVkX2Rpc3RhbmNlLCAtc3Ryb2tlX3dpZHRoLCBmaW5hbF9jb2xvcik7CiAgICBnbG93KGdldF9nbG93Y29sb3IoKSwgc2lnbmVkX2Rpc3RhbmNlLCBhYXN0ZXAoLXN0cm9rZV93aWR0aCwgc2lnbmVkX2Rpc3RhbmNlKSwgZmluYWxfY29sb3IpOwoKICAgIC8vIGRlYnVnIC0gc2hvdyBiYWNrZ3JvdW5kCiAgICAvLyBmaW5hbF9jb2xvci5hID0gY2xhbXAoZmluYWxfY29sb3IuYSwgMC4wLCAxLjApOwogICAgLy8gZmluYWxfY29sb3IgPSB2ZWM0KAogICAgLy8gICAgIHZlYzMoMSwwLDApICogKDEuMCAtIGZpbmFsX2NvbG9yLmEpICsgZmluYWxfY29sb3IucmdiICogZmluYWxfY29sb3IuYSwKICAgIC8vICAgICAwLjQgKyAwLjYgKiBmaW5hbF9jb2xvci5hCiAgICAvLyApOwoKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZpbmFsX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CgoKICAgIGlmIChmaW5hbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZmluYWxfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOHq3F1YWRfb2Zmc2V0gqt0eXBlX2xlbmd0aAKkZmxhdMcAF6ptYXJrZXJzaXplgqt0eXBlX2xlbmd0aAKkZmxhdMcAF61tYXJrZXJfb2Zmc2V0gqt0eXBlX2xlbmd0aAOkZmxhdMcAF6Vjb2xvcoKrdHlwZV9sZW5ndGgEpGZsYXTHABevdXZfb2Zmc2V0X3dpZHRogqt0eXBlX2xlbmd0aASkZmxhdMcAF6Nwb3OCq3R5cGVfbGVuZ3RoA6RmbGF0xwAXqXJvdGF0aW9uc4KrdHlwZV9sZW5ndGgEpGZsYXTHABeIp3Zpc2libGXHB2imOTQ3NjIypG5hbWXZIGxpbmVzZWdtZW50cy0yNjUyNDU1NDg0MzAwNjY4NzYxqmF0dHJpYnV0ZXODpWNvbG9yxwdopjk0ODQ0OKlsaW5lcG9pbnTHB2imOTQ4NDQ3qWxpbmV3aWR0aMcHaKY5NDg0NDmkdXVpZLMyNjUyNDU1NDg0MzAwNjY4NzYxqWNhbV9zcGFjZaVwaXhlbKlwbG90X3R5cGWsbGluZXNlZ21lbnRzr3VuaWZvcm1fdXBkYXRlcscHaKY5NDg0NTCodW5pZm9ybXOGp3BpY2tpbmfCpW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAAp2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAA3gAQrHRyYW5zcGFyZW5jeccHaKY5NDc2Nzilc3BhY2XHB2imOTQ3NjgzrHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgD8AAIA/AACAPwAAAAAAAAAAAACAPwAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAvwAAAL8AAAA/AAAAvwAAAL8AAAA/AAAAPwAAAD+kbmFtZbl0ZXh0LTExMjQxMDkwNDI1MzQzNzQ3NDkwqWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1z3gAYq3B4X3Blcl91bml0yj+AAACpZ2xvd2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqWJpbGxib2FyZMKoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACtcHJlcHJvamVjdGlvbsdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+nYW1iaWVudMcMF2Zm5j5mZuY+ZmbmPqluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACtZGlzdGFuY2VmaWVsZIqpbWluRmlsdGVyrExpbmVhckZpbHRlcqphbmlzb3Ryb3B5ykGAAACpbWFnRmlsdGVyrExpbmVhckZpbHRlcqV3cmFwU65SZXBlYXRXcmFwcGluZ6RkYXRhrXRleHR1cmVfYXRsYXOsdGhyZWVfZm9ybWF0qVJlZEZvcm1hdKRzaXplks0EAM0EAKV3cmFwVK5SZXBlYXRXcmFwcGluZ6R0eXBlp1NhbXBsZXKqdGhyZWVfdHlwZalGbG9hdFR5cGWqY29sb3JyYW5nZcKyYXRsYXNfdGV4dHVyZV9zaXplykSAAACrc3Ryb2tld2lkdGjKAAAAAKtzdHJva2Vjb2xvctgXAAAAAAAAAAAAAAAAAAAAAKlnbG93d2lkdGjKAAAAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAJZDAACWQ6VpbWFnZcKpb2JqZWN0X2lkAKpzaGFwZV90eXBlA7B0cmFuc2Zvcm1fbWFya2VywqtsaWdodF9jb2xvcscMFwAAAD8AAAA/AAAAP6tkZXB0aF9zaGlmdMoAAAAAqGNvbG9ybWFwwqd2aXNpYmxlxwdopjk0NzY5MqttYXJrZXJzcGFjZccHaKY5NDc2OTaxYXR0cmlidXRlX3VwZGF0ZXLHB2imOTQ4NDg3qG92ZXJkcmF3xwdopjk0NzY3Oa91bmlmb3JtX3VwZGF0ZXLHB2imOTQ4NDg4pWZhY2Vzxwdopjk0ODQ4NqR1dWlktDExMjQxMDkwNDI1MzQzNzQ3NDkwrXZlcnRleF9zb3VyY2XaIJYKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWM0IGdsb3djb2xvcjsKdmVjNCBnZXRfZ2xvd2NvbG9yKCl7cmV0dXJuIGdsb3djb2xvcjt9CnVuaWZvcm0gdmVjNCBzdHJva2Vjb2xvcjsKdmVjNCBnZXRfc3Ryb2tlY29sb3IoKXtyZXR1cm4gc3Ryb2tlY29sb3I7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSBmbG9hdCBnbG93d2lkdGg7CmZsb2F0IGdldF9nbG93d2lkdGgoKXtyZXR1cm4gZ2xvd3dpZHRoO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGZsb2F0IHB4X3Blcl91bml0OwpmbG9hdCBnZXRfcHhfcGVyX3VuaXQoKXtyZXR1cm4gcHhfcGVyX3VuaXQ7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHN0cm9rZXdpZHRoOwpmbG9hdCBnZXRfc3Ryb2tld2lkdGgoKXtyZXR1cm4gc3Ryb2tld2lkdGg7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgbWFya2Vyc2l6ZTsKdmVjMiBnZXRfbWFya2Vyc2l6ZSgpe3JldHVybiBtYXJrZXJzaXplO30KaW4gdmVjNCByb3RhdGlvbnM7CnZlYzQgZ2V0X3JvdGF0aW9ucygpe3JldHVybiByb3RhdGlvbnM7fQppbiB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CmluIHZlYzMgcG9zOwp2ZWMzIGdldF9wb3MoKXtyZXR1cm4gcG9zO30KaW4gdmVjMiBxdWFkX29mZnNldDsKdmVjMiBnZXRfcXVhZF9vZmZzZXQoKXtyZXR1cm4gcXVhZF9vZmZzZXQ7fQppbiB2ZWM0IHV2X29mZnNldF93aWR0aDsKdmVjNCBnZXRfdXZfb2Zmc2V0X3dpZHRoKCl7cmV0dXJuIHV2X29mZnNldF93aWR0aDt9CmluIHZlYzMgbWFya2VyX29mZnNldDsKdmVjMyBnZXRfbWFya2VyX29mZnNldCgpe3JldHVybiBtYXJrZXJfb2Zmc2V0O30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4X2RpbTsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cm91dCB2ZWMyIGZyYWdfdXY7Cm91dCBmbG9hdCBmcmFnX3V2c2NhbGU7Cm91dCBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7Cm91dCB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAoKCm1hdDQgcW1hdCh2ZWM0IHF1YXQpewogICAgZmxvYXQgbnVtID0gcXVhdC54ICogMi4wOwogICAgZmxvYXQgbnVtMiA9IHF1YXQueSAqIDIuMDsKICAgIGZsb2F0IG51bTMgPSBxdWF0LnogKiAyLjA7CiAgICBmbG9hdCBudW00ID0gcXVhdC54ICogbnVtOwogICAgZmxvYXQgbnVtNSA9IHF1YXQueSAqIG51bTI7CiAgICBmbG9hdCBudW02ID0gcXVhdC56ICogbnVtMzsKICAgIGZsb2F0IG51bTcgPSBxdWF0LnggKiBudW0yOwogICAgZmxvYXQgbnVtOCA9IHF1YXQueCAqIG51bTM7CiAgICBmbG9hdCBudW05ID0gcXVhdC55ICogbnVtMzsKICAgIGZsb2F0IG51bTEwID0gcXVhdC53ICogbnVtOwogICAgZmxvYXQgbnVtMTEgPSBxdWF0LncgKiBudW0yOwogICAgZmxvYXQgbnVtMTIgPSBxdWF0LncgKiBudW0zOwogICAgcmV0dXJuIG1hdDQoCiAgICAgICAgKDEuMCAtIChudW01ICsgbnVtNikpLCAobnVtNyArIG51bTEyKSwgICAgICAgIChudW04IC0gbnVtMTEpLCAgICAgICAgMC4wLAogICAgICAgIChudW03IC0gbnVtMTIpLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNikpLCAobnVtOSArIG51bTEwKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtOCArIG51bTExKSwgICAgICAgIChudW05IC0gbnVtMTApLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNSkpLCAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMS4wCiAgICApOwp9CgpmbG9hdCBkaXN0YW5jZWZpZWxkX3NjYWxlKCl7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzOyBjb252ZXJ0IHRvIGRpbWVuc2lvbmxlc3MKICAgIC8vIHgtY29vcmRpbmF0ZSBvZiB0ZXh0dXJlIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggcHJvZ3JhbW1hdGljIHV2CiAgICAvLyBkaXN0YW5jZSBmaWVsZHMgaW4gZnJhZ21lbnQgc2hhZGVyLiBTZWUgYWxzbyBjb21tZW50cyBiZWxvdy4KICAgIHZlYzQgdXZfcmVjdCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIGZsb2F0IHBpeHNpemVfeCA9ICh1dl9yZWN0LnogLSB1dl9yZWN0LngpICogZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpOwogICAgcmV0dXJuIC0xLjAvcGl4c2l6ZV94Owp9Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKbWF0MiBkaWFnbSh2ZWMyIHYpewogICAgcmV0dXJuIG1hdDIodi54LCAwLjAsIDAuMCwgdi55KTsKfQoKZmxvYXQgX2RldGVybWluYW50KG1hdDIgbSkgewogIHJldHVybiBtWzBdWzBdICogbVsxXVsxXSAtIG1bMF1bMV0gKiBtWzFdWzBdOwp9Cgp2b2lkIG1haW4oKXsKICAgIC8vIGdldF9wb3MoKSByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2NhdHRlciBtYXJrZXIKICAgIC8vIGdldF9wb3NpdGlvbigpIHJldHVybnMgdGhlIChyZWxhdGl2ZSkgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgcXVhZCB2ZXJ0ZXgKCiAgICB2ZWMyIGJib3hfcmFkaXVzID0gMC41ICogZ2V0X21hcmtlcnNpemUoKTsKICAgIHZlYzIgc3ByaXRlX2Jib3hfY2VudHJlID0gZ2V0X3F1YWRfb2Zmc2V0KCkgKyBiYm94X3JhZGl1czsKCiAgICBtYXQ0IHB2aWV3ID0gcHJvamVjdGlvbiAqIHZpZXc7CiAgICBtYXQ0IHRyYW5zID0gZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKSA/IG1vZGVsIDogbWF0NCgxLjApOwoKICAgIC8vIENvbXB1dGUgY2VudHJlIG9mIGJpbGxib2FyZCBpbiBjbGlwcGluZyBjb29yZGluYXRlcwogICAgLy8gQWx3YXlzIHRyYW5zZm9ybSB0ZXh0L3NjYXR0ZXIgcG9zaXRpb24gYXJndW1lbnQKICAgIHZlYzQgZGF0YV9wb2ludCA9IGdldF9wcmVwcm9qZWN0aW9uKCkgKiBtb2RlbCAqIHZlYzQodG92ZWMzKGdldF9wb3MoKSksIDEpOwogICAgLy8gbWF5YmUgdHJhbnNmb3JtIG1hcmtlcl9vZmZzZXQgKyBnbHlwaCBvZmZzZXRzCiAgICBkYXRhX3BvaW50ID0gdmVjNChkYXRhX3BvaW50Lnh5eiAvIGRhdGFfcG9pbnQudyArIG1hdDModHJhbnMpICogdG92ZWMzKGdldF9tYXJrZXJfb2Zmc2V0KCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSBwdmlldyAqIGRhdGFfcG9pbnQ7CgogICAgLy8gQ29tcHV0ZSB0cmFuc2Zvcm0gZm9yIHRoZSBvZmZzZXQgdmVjdG9ycyBmcm9tIHRoZSBjZW50cmFsIHBvaW50CiAgICB0cmFucyA9IChnZXRfYmlsbGJvYXJkKCkgPyBwcm9qZWN0aW9uIDogcHZpZXcpICogcW1hdChnZXRfcm90YXRpb25zKCkpICogdHJhbnM7CiAgICB2ZWM0IHNwcml0ZV9jZW50ZXIgPSB0cmFucyAqIHZlYzQoc3ByaXRlX2Jib3hfY2VudHJlLCAwLCAwKTsKCiAgICB2ZWM0IHZjbGlwID0gZGF0YV9wb2ludCArIHNwcml0ZV9jZW50ZXI7CgogICAgLy8gRXh0cmEgYnVmZmVyaW5nIGlzIHJlcXVpcmVkIGFyb3VuZCBzcHJpdGVzIHdoaWNoIGFyZSBhbnRpYWxpYXNlZCBzbyB0aGF0CiAgICAvLyB0aGUgYW50aWFsaWFzIGJsdXIgZG9lc24ndCBnZXQgY3V0IG9mZiAoc2VlICMxNSkuIFRoaXMgYmx1ciBmYWxscyB0bwogICAgLy8gemVybyBhdCBhIHJhZGl1cyBvZiBBTlRJQUxJQVNfUkFESVVTIHBpeGVscyBpbiB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZXMKICAgIC8vIGFuZCB3ZSB3YW50IHRvIGJ1ZmZlciB0aGUgdmVydGljZXMgaW4gdGhlICpzb3VyY2UqIHNwcml0ZSBjb29yZGluYXRlCiAgICAvLyBzeXN0ZW0gc28gdGhhdCB3ZSBnZXQgdGhpcyBhbW91bnQgaW4gdGhlIG91dHB1dCBjb29yZGluYXRlcy4KICAgIC8vCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgbWFwcGluZyBmcm9tIHNwcml0ZSB4eQogICAgLy8gY29vcmRpbmF0ZXMgKGRlZmluZWQgYnkgYHRyYW5zYCkgaW50byB0aGUgdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuCiAgICAvLyBUaGUgZGVyaXZhdGl2ZSBuZWVkcyB0byBpbmNsdWRlIHRoZSBwcm9wZXIgdGVybSBmb3IgdGhlIHBlcnNwZWN0aXZlCiAgICAvLyBkaXZpZGUgaW50byBOREMsIGV2YWx1YXRlZCBhdCB0aGUgY2VudHJlIHBvaW50IGB2Y2xpcGAuCiAgICBtYXQ0IGRfbmRjX2RfY2xpcCA9IG1hdDQoCiAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsCiAgICAgICAgLXZjbGlwLnh5ei8odmNsaXAudyp2Y2xpcC53KSwgICAgICAgICAgMC4wCiAgICApOwogICAgbWF0MiBkeHl2X2R4eXMgPSBkaWFnbSgwLjUgKiBweF9wZXJfdW5pdCAqIGdldF9yZXNvbHV0aW9uKCkpICogbWF0MihkX25kY19kX2NsaXAqdHJhbnMpOwogICAgLy8gTm93LCBvdXIgYnVmZmVyIHNpemUgaXMgZXhwcmVzc2VkIGluIHZpZXdwb3J0IHBpeGVscyBidXQgd2UgZ2V0IGJhY2sgdG8KICAgIC8vIHRoZSBzcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gdXNpbmcgdGhlIHNjYWxlIGZhY3RvciBvZiB0aGUKICAgIC8vIHRyYW5zZm9ybWF0aW9uIChmb3IgaXNvdHJvcGljIHRyYW5zZm9ybWF0aW9ucykuIEZvciBhbmlzb3Ryb3BpYwogICAgLy8gdHJhbnNmb3JtYXRpb25zLCB0aGUgZ2VvbWV0cmljIG1lYW4gb2YgdGhlIHR3byBwcmluY2lwbGUgc2NhbGUgZmFjdG9ycwogICAgLy8gaXMgYSByZWFzb25hYmxlIGNvbXByb21pc2U6CiAgICBmbG9hdCB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSA9IHNxcnQoYWJzKF9kZXRlcm1pbmFudChkeHl2X2R4eXMpKSk7CgogICAgLy8gSW4gdGhlIGZyYWdtZW50IHNoYWRlciB3ZSB3YW50IG91ciBzaWduZWQgZGlzdGFuY2UgaW4gdmlld3BvcnQgKHBpeGVsKQogICAgLy8gY29vcmRzIGZvciBkaXJlY3QgdXNlIGluIGFudGlhbGlhc2luZyBzdGVwIGZ1bmN0aW9ucy4gV2UgdGhlcmVmb3JlIG5lZWQKICAgIC8vIGEgc2NhbGluZyBmYWN0b3Igc2ltaWxhciB0byB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSwgYnV0IGluY2x1ZGluZwogICAgLy8gdGhlIHV2LT5zcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gc2NhbGluZyBmYWN0b3IgYXMgd2VsbC4gIFdlIGNob29zZSB0bwogICAgLy8gdXNlIHRoZSBib3VuZGluZyBib3ggKngqIHdpZHRoIGZvciB0aGlzLiBUaGlzIGNvbWVzIHdpdGggc29tZQogICAgLy8gY29uc2lzdGVuY3kgY29uZGl0aW9uczoKICAgIC8vICogRm9yIHByb2NlZHVyYWwgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRoZSBzcHJpdGUgYm91bmRpbmcgYm94IHRvIGJlCiAgICAvLyAgIHNxdWFyZS4gKElmIG5vdCwgdGhlIHV2IGNvb3JkaW5hdGVzIHdpbGwgYmUgYW5pc290cm9waWNhbGx5IHNjYWxlZCBhbmQKICAgIC8vICAgYW55IGNhbGN1bGF0aW9uIGJhc2VkIG9uIHRoZW0gd2lsbCBub3QgYmUgYSBkaXN0YW5jZSBmdW5jdGlvbi4pCiAgICAvLyAqIEZvciBzYW1wbGVkIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0byBjb25zaXN0ZW50bHkgY2hvb3NlIHRoZSAqeCoKICAgIC8vICAgZm9yIHRoZSBzY2FsaW5nIGluIGdldF9kaXN0YW5jZWZpZWxkX3NjYWxlKCkuCiAgICBmbG9hdCBzcHJpdGVfZnJvbV91X3NjYWxlID0gbWluKGFicyhnZXRfbWFya2Vyc2l6ZSgpLngpLCBhYnMoZ2V0X21hcmtlcnNpemUoKS55KSk7CiAgICBmcmFnX3V2c2NhbGUgPSB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSAqIHNwcml0ZV9mcm9tX3Vfc2NhbGU7CiAgICBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgPSBkaXN0YW5jZWZpZWxkX3NjYWxlKCk7CgogICAgLy8gYWRkIHBhZGRpbmcgZm9yIEFBLCBzdHJva2UgYW5kIGdsb3cgKG5vbiBuYXRpdmUgZGlzdGFuY2VmaWVsZHMgZG9uJ3QgbmVlZAogICAgLy8gQUEgcGFkZGluZyBidXQgQ0lSQ0xFIGV0YyBkbykKICAgIGZsb2F0IHBwdSA9IGdldF9weF9wZXJfdW5pdCgpOwogICAgdmVjMiBwYWRkZWRfYmJveF9zaXplID0gYmJveF9yYWRpdXMgKyAoCiAgICAgICAgQU5USUFMSUFTX1JBRElVUyArIG1heCgwLjAsIGdldF9zdHJva2V3aWR0aCgpICogcHB1KSArIG1heCgwLjAsIGdldF9nbG93d2lkdGgoKSAqIHBwdSkKICAgICkgLyB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZTsKICAgIHZlYzIgdXZfcGFkX3NjYWxlID0gcGFkZGVkX2Jib3hfc2l6ZSAvIGJib3hfcmFkaXVzOwoKICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yKCkpOwogICAgZnJhZ191dl9vZmZzZXRfd2lkdGggPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICAvLyBnZXRfdXYoKSByZXR1cm5zICgwLCAwKSwgKDEsIDApLCAoMCwgMSkgb3IgKDEsIDEpCiAgICAvLyB0byBhY2NvbW9kYXRlIHN0cm9rZSBhbmQgZ2xvd3dpZHRoIHdlIG5lZWQgdG8gZXh0cnVkZSB1didzIG91dHdhcmRzIGZyb20gKDAuNSwgMC41KQogICAgZnJhZ191diA9IHZlYzIoMC41KSArIChnZXRfdXYoKSAtIHZlYzIoMC41KSkgKiB1dl9wYWRfc2NhbGU7CgogICAgLy8gc2NyZWVuIHNwYWNlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb3NpdGlvbgogICAgdmVjNCBxdWFkX3ZlcnRleCA9ICh0cmFucyAqIHZlYzQoMi4wICogcGFkZGVkX2Jib3hfc2l6ZSAqIGdldF9wb3NpdGlvbigpLCAwLjAsIDAuMCkpOwogICAgZ2xfUG9zaXRpb24gPSB2Y2xpcCArIHF1YWRfdmVydGV4OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cn0KCq9mcmFnbWVudF9zb3VyY2XaHAgKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjNCBnbG93Y29sb3I7CnZlYzQgZ2V0X2dsb3djb2xvcigpe3JldHVybiBnbG93Y29sb3I7fQp1bmlmb3JtIHZlYzQgc3Ryb2tlY29sb3I7CnZlYzQgZ2V0X3N0cm9rZWNvbG9yKCl7cmV0dXJuIHN0cm9rZWNvbG9yO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgZ2xvd3dpZHRoOwpmbG9hdCBnZXRfZ2xvd3dpZHRoKCl7cmV0dXJuIGdsb3d3aWR0aDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBmbG9hdCBzdHJva2V3aWR0aDsKZmxvYXQgZ2V0X3N0cm9rZXdpZHRoKCl7cmV0dXJuIHN0cm9rZXdpZHRoO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKaW4gdmVjNCBmcmFnX2NvbG9yOwppbiB2ZWMyIGZyYWdfdXY7CgojZGVmaW5lIENJUkNMRSAgICAgICAgICAgIDAKI2RlZmluZSBSRUNUQU5HTEUgICAgICAgICAxCiNkZWZpbmUgUk9VTkRFRF9SRUNUQU5HTEUgMgojZGVmaW5lIERJU1RBTkNFRklFTEQgICAgIDMKI2RlZmluZSBUUklBTkdMRSAgICAgICAgICA0CgojZGVmaW5lIE1fU1FSVF8yICAgICAgICAgIDEuNDE0MjEzNQoKCi8vIEhhbGYgd2lkdGggb2YgYW50aWFsaWFzaW5nIHNtb290aHN0ZXAKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAoKaW4gZmxvYXQgZnJhZ191dnNjYWxlOwppbiBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7CmluIHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwoKLy8gVGhlc2UgdmVyc2lvbnMgb2YgYWFzdGVwIGFzc3VtZSB0aGF0IGBkaXN0YCBpcyBhIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbgovLyB3aGljaCBoYXMgYmVlbiBzY2FsZWQgdG8gYmUgaW4gdW5pdHMgb2YgcGl4ZWxzLgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxICsgQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCB0aHJlc2hvbGQyLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDErQU5USUFMSUFTX1JBRElVUywgZGlzdCkgLQogICAgICAgICAgIHNtb290aHN0ZXAodGhyZXNob2xkMi1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQyK0FOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgovLyBQcm9jZWR1cmFsIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbnMgb24gdGhlIHV2IGNvb3JkaW5hdGUgcGF0Y2ggWzAsMV14WzAsMV0KLy8gTm90ZSB0aGF0IGZvciBhbnRpYWxpYXNpbmcgdG8gd29yayBwcm9wZXJseSB0aGVzZSBzaG91bGQgYmUgKnNjYWxlIHByZXNlcnZpbmcqCi8vIChJZiB5b3UgbXVzdCByZXNjYWxlIHV2LCBtYWtlIHN1cmUgdG8gcHV0IHRoZSBzY2FsZSBmYWN0b3IgYmFjayBpbiBsYXRlci4pCmZsb2F0IHRyaWFuZ2xlKHZlYzIgUCl7CiAgICBQIC09IHZlYzIoMC41KTsKICAgIGZsb2F0IHggPSBNX1NRUlRfMiAqIChQLnggLSBQLnkpOwogICAgZmxvYXQgeSA9IE1fU1FSVF8yICogKFAueCArIFAueSk7CiAgICBmbG9hdCByMSA9IG1heChhYnMoeCksIGFicyh5KSkgLSAxLjAvKDIuMCpNX1NRUlRfMik7CiAgICBmbG9hdCByMiA9IFAueTsKICAgIHJldHVybiAtbWF4KHIxLHIyKTsKfQoKZmxvYXQgY2lyY2xlKHZlYzIgdXYpewogICAgcmV0dXJuIDAuNS1sZW5ndGgodXYtdmVjMigwLjUpKTsKfQoKZmxvYXQgcmVjdGFuZ2xlKHZlYzIgdXYpewogICAgdmVjMiBkID0gbWF4KC11diwgdXYtdmVjMigxKSk7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKSk7Cn0KCmZsb2F0IHJvdW5kZWRfcmVjdGFuZ2xlKHZlYzIgdXYsIHZlYzIgdGwsIHZlYzIgYnIpewogICAgdmVjMiBkID0gbWF4KHRsLXV2LCB1di1icik7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKS10bC54KTsKfQoKdm9pZCBmaWxsKGJvb2wgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgY29sb3IgPSBtaXgoY29sb3IsIGZpbGxjb2xvciwgaW5maWxsKTsKfQoKdm9pZCBmaWxsKHNhbXBsZXIyRCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICB2ZWM0IGltX2NvbG9yID0gdGV4dHVyZShpbWFnZSwgdXYueXgpOwogICAgY29sb3IgPSBtaXgoY29sb3IsIGltX2NvbG9yLCBpbmZpbGwpOwp9Cgp2b2lkIHN0cm9rZSh2ZWM0IHN0cm9rZWNvbG9yLCBmbG9hdCBzaWduZWRfZGlzdGFuY2UsIGZsb2F0IHdpZHRoLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGlmICh3aWR0aCAhPSAwLjApewogICAgICAgIGZsb2F0IHQgPSBhYXN0ZXAobWluKHdpZHRoLCAwLjApLCBtYXgod2lkdGgsIDAuMCksIHNpZ25lZF9kaXN0YW5jZSk7CiAgICAgICAgdmVjNCBiZ19jb2xvciA9IG1peChjb2xvciwgdmVjNChzdHJva2Vjb2xvci5yZ2IsIDApLCBmbG9hdChzaWduZWRfZGlzdGFuY2UgPCAwLjUgKiB3aWR0aCkpOwogICAgICAgIGNvbG9yID0gbWl4KGJnX2NvbG9yLCBzdHJva2Vjb2xvciwgdCk7CiAgICB9Cn0KCnZvaWQgZ2xvdyh2ZWM0IGdsb3djb2xvciwgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlLCBmbG9hdCBpbnNpZGUsIGlub3V0IHZlYzQgY29sb3IpewogICAgZmxvYXQgZ2xvd193aWR0aCA9IGdldF9nbG93d2lkdGgoKSAqIGdldF9weF9wZXJfdW5pdCgpOwogICAgZmxvYXQgc3Ryb2tlX3dpZHRoID0gZ2V0X3N0cm9rZXdpZHRoKCkgKiBnZXRfcHhfcGVyX3VuaXQoKTsKICAgIGlmIChnbG93X3dpZHRoID4gMC4wKXsKICAgICAgICBmbG9hdCBvdXRzaWRlID0gKGFicyhzaWduZWRfZGlzdGFuY2UpIC0gc3Ryb2tlX3dpZHRoKSAvIGdsb3dfd2lkdGg7CiAgICAgICAgZmxvYXQgYWxwaGEgPSAxLjAgLSBvdXRzaWRlOwogICAgICAgIGNvbG9yID0gbWl4KHZlYzQoZ2xvd2NvbG9yLnJnYiwgZ2xvd2NvbG9yLmEqYWxwaGEpLCBjb2xvciwgaW5zaWRlKTsKICAgIH0KfQoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVscy4gQ29udmVydCB0byBzYW1lIGRpc3RhbmNlCiAgICAvLyBzY2FsaW5nIGFzIGZfdXYueCBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgcHJvY2VkdXJhbCBzaWduZWRfZGlzdGFuY2UKICAgIC8vIGNhbGN1bGF0aW9ucy4KICAgIHJldHVybiBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgKiB0ZXh0dXJlKGRpc3RhbmNlZmllbGQsIHV2KS5yOwp9CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChib29sIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgcmV0dXJuIDAuMDsKfQoKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlID0gMC4wOwoKICAgIHZlYzQgdXZfb2ZmID0gZnJhZ191dl9vZmZzZXRfd2lkdGg7CiAgICB2ZWMyIHRleF91diA9IG1peCh1dl9vZmYueHksIHV2X29mZi56dywgY2xhbXAoZnJhZ191diwgMC4wLCAxLjApKTsKCiAgICBpbnQgc2hhcGUgPSBnZXRfc2hhcGVfdHlwZSgpOwogICAgaWYoc2hhcGUgPT0gQ0lSQ0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IGNpcmNsZShmcmFnX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gRElTVEFOQ0VGSUVMRCkgewogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGRpc3RhbmNlZmllbGQsIHRleF91dik7CiAgICAgICAgaWYgKGdldF9zdHJva2V3aWR0aCgpID4gMC4wIHx8IGdldF9nbG93d2lkdGgoKSA+IDAuMCkgewogICAgICAgICAgICAvLyBDb21wZW5zYXRlIGZvciB0aGUgY2xhbXBpbmcgb2YgdGV4X3V2IGJ5IGFuIGFwcHJveGltYXRlCiAgICAgICAgICAgIC8vIGV4dGVuc2lvbiBvZiB0aGUgc2lnbmVkIGRpc3RhbmNlIG91dHNpZGUgdGhlIHZhbGlkIHRleHR1cmUKICAgICAgICAgICAgLy8gcmVnaW9uLgogICAgICAgICAgICB2ZWMyIGJ1ZnV2ID0gZnJhZ191diAtIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKTsKICAgICAgICAgICAgc2lnbmVkX2Rpc3RhbmNlIC09IGxlbmd0aChidWZ1dik7CiAgICAgICAgfQogICAgfSBlbHNlIGlmKHNoYXBlID09IFJPVU5ERURfUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHJvdW5kZWRfcmVjdGFuZ2xlKGZyYWdfdXYsIHZlYzIoMC4yKSwgdmVjMigwLjgpKTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IDEuMDsgLy8gcmVjdGFuZ2xlKGZfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBUUklBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSB0cmlhbmdsZShmcmFnX3V2KTsKCiAgICBzaWduZWRfZGlzdGFuY2UgKj0gZnJhZ191dnNjYWxlOwoKCiAgICBmbG9hdCBzdHJva2Vfd2lkdGggPSBnZXRfc3Ryb2tld2lkdGgoKSAqIGdldF9weF9wZXJfdW5pdCgpOwogICAgZmxvYXQgaW5zaWRlX3N0YXJ0ID0gbWF4KC1zdHJva2Vfd2lkdGgsIDAuMCk7CiAgICBmbG9hdCBpbnNpZGUgPSBhYXN0ZXAoaW5zaWRlX3N0YXJ0LCBzaWduZWRfZGlzdGFuY2UpOwoKICAgIHZlYzQgZmluYWxfY29sb3IgPSB2ZWM0KGZyYWdfY29sb3IueHl6LCAwKTsKICAgIGZpbGwoaW1hZ2UsIGZyYWdfY29sb3IsIGZyYWdfdXYsIGluc2lkZSwgZmluYWxfY29sb3IpOwogICAgc3Ryb2tlKGdldF9zdHJva2Vjb2xvcigpLCBzaWduZWRfZGlzdGFuY2UsIC1zdHJva2Vfd2lkdGgsIGZpbmFsX2NvbG9yKTsKICAgIGdsb3coZ2V0X2dsb3djb2xvcigpLCBzaWduZWRfZGlzdGFuY2UsIGFhc3RlcCgtc3Ryb2tlX3dpZHRoLCBzaWduZWRfZGlzdGFuY2UpLCBmaW5hbF9jb2xvcik7CgogICAgLy8gZGVidWcgLSBzaG93IGJhY2tncm91bmQKICAgIC8vIGZpbmFsX2NvbG9yLmEgPSBjbGFtcChmaW5hbF9jb2xvci5hLCAwLjAsIDEuMCk7CiAgICAvLyBmaW5hbF9jb2xvciA9IHZlYzQoCiAgICAvLyAgICAgdmVjMygxLDAsMCkgKiAoMS4wIC0gZmluYWxfY29sb3IuYSkgKyBmaW5hbF9jb2xvci5yZ2IgKiBmaW5hbF9jb2xvci5hLAogICAgLy8gICAgIDAuNCArIDAuNiAqIGZpbmFsX2NvbG9yLmEKICAgIC8vICk7CgogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZmluYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCgogICAgaWYgKGZpbmFsX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmaW5hbF9jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4ercXVhZF9vZmZzZXSCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXqm1hcmtlcnNpemWCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXrW1hcmtlcl9vZmZzZXSCq3R5cGVfbGVuZ3RoA6RmbGF0xwAXpWNvbG9ygqt0eXBlX2xlbmd0aASkZmxhdMcAF691dl9vZmZzZXRfd2lkdGiCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXo3Bvc4KrdHlwZV9sZW5ndGgDpGZsYXTHABepcm90YXRpb25zgqt0eXBlX2xlbmd0aASkZmxhdMcAF4indmlzaWJsZccHaKY5NDc3NzKkbmFtZdkgbGluZXNlZ21lbnRzLTU2ODI4NTE1MDQxNTM4NzA5MDiqYXR0cmlidXRlc4OlY29sb3LHB2imOTQ4NDkyqWxpbmVwb2ludMcHaKY5NDg0OTGpbGluZXdpZHRoxwdopjk0ODQ5M6R1dWlkszU2ODI4NTE1MDQxNTM4NzA5MDipY2FtX3NwYWNlpXBpeGVsqXBsb3RfdHlwZaxsaW5lc2VnbWVudHOvdW5pZm9ybV91cGRhdGVyxwdopjk0ODQ5NKh1bmlmb3Jtc4ancGlja2luZ8KlbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACnbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKluYW5fY29sb3LYFwAAAAAAAAAAAAAAAAAAAACOrHRyYW5zcGFyZW5jeccHaKY5NDc4MzWlc3BhY2XHB2imOTQ3ODI2rHZlcnRleGFycmF5c4Knbm9ybWFsc4KrdHlwZV9sZW5ndGgDpGZsYXTHYBcAAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD+ocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0x0AXAABdQsP1ckIAwAlDw/VyQgDACUOQQg1DAABdQpBCDUMAAF1Cw/VyQgAAbELD9XJCAABsQszMgEIAAF1CzMyAQqRuYW1luW1lc2gtMTU4NTUxMTA1MTM2ODcwMDMyMDepY2FtX3NwYWNlpGRhdGGodW5pZm9ybXPeABe+aW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyw6liYWNrbGlnaHTKAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAADIQgAAgD+nZGlmZnVzZccMFwAAgD8AAIA/AACAP6pjb2xvcnJhbmdlwqdsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAp2FtYmllbnTHDBdmZuY+ZmbmPmZm5j6pbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAp3BhdHRlcm7CrG5vcm1hbG1hdHJpeMckFwAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAP6J1dtcXAAAAAAAAAACnc2hhZGluZ8Koc3BlY3VsYXLHDBfNzEw+zcxMPs3MTD6ncGlja2luZ8KvbGlnaHRfZGlyZWN0aW9uxwwXAACAPwAAgD8AAIA/qW9iamVjdF9pZACtdW5pZm9ybV9jb2xvctgXAAAAAAAAAAAAAAAAzcxMPqtsaWdodF9jb2xvcscMFwAAAD8AAAA/AAAAP6tkZXB0aF9zaGlmdMoAAAAApWNvbG9ywqlzaGluaW5lc3PKQgAAAKhjb2xvcm1hcMKndmlzaWJsZccHaKY5NDc4MzaxYXR0cmlidXRlX3VwZGF0ZXLHB2imOTQ4NTE4qG92ZXJkcmF3xwdopjk0NzgyM691bmlmb3JtX3VwZGF0ZXLHB2imOTQ4NTE5pWZhY2Vzxwdopjk0ODUxN6R1dWlktDE1ODU1MTEwNTEzNjg3MDAzMjA3rXZlcnRleF9zb3VyY2XaE78KcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMyBub3JtYWxzOwp2ZWMzIGdldF9ub3JtYWxzKCl7cmV0dXJuIG5vcm1hbHM7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWMzIHNwZWN1bGFyOwp2ZWMzIGdldF9zcGVjdWxhcigpe3JldHVybiBzcGVjdWxhcjt9CnVuaWZvcm0gYm9vbCBjb2xvcm1hcDsKYm9vbCBnZXRfY29sb3JtYXAoKXtyZXR1cm4gY29sb3JtYXA7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBhdHRlcm47CmJvb2wgZ2V0X3BhdHRlcm4oKXtyZXR1cm4gcGF0dGVybjt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGJvb2wgaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyOwpib29sIGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKXtyZXR1cm4gaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyO30KdW5pZm9ybSBmbG9hdCBiYWNrbGlnaHQ7CmZsb2F0IGdldF9iYWNrbGlnaHQoKXtyZXR1cm4gYmFja2xpZ2h0O30KdW5pZm9ybSB2ZWMzIGFtYmllbnQ7CnZlYzMgZ2V0X2FtYmllbnQoKXtyZXR1cm4gYW1iaWVudDt9CnVuaWZvcm0gbWF0MyBub3JtYWxtYXRyaXg7Cm1hdDMgZ2V0X25vcm1hbG1hdHJpeCgpe3JldHVybiBub3JtYWxtYXRyaXg7fQp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7CmZsb2F0IGdldF9zaGluaW5lc3MoKXtyZXR1cm4gc2hpbmluZXNzO30KdW5pZm9ybSB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CnVuaWZvcm0gdmVjMyBsaWdodF9jb2xvcjsKdmVjMyBnZXRfbGlnaHRfY29sb3IoKXtyZXR1cm4gbGlnaHRfY29sb3I7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGNvbG9ycmFuZ2U7CmJvb2wgZ2V0X2NvbG9ycmFuZ2UoKXtyZXR1cm4gY29sb3JyYW5nZTt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBjb2xvcjsKYm9vbCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQp1bmlmb3JtIHZlYzQgdW5pZm9ybV9jb2xvcjsKdmVjNCBnZXRfdW5pZm9ybV9jb2xvcigpe3JldHVybiB1bmlmb3JtX2NvbG9yO30KdW5pZm9ybSBib29sIHNoYWRpbmc7CmJvb2wgZ2V0X3NoYWRpbmcoKXtyZXR1cm4gc2hhZGluZzt9CnVuaWZvcm0gdmVjMyBkaWZmdXNlOwp2ZWMzIGdldF9kaWZmdXNlKCl7cmV0dXJuIGRpZmZ1c2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSB2ZWMzIGxpZ2h0X2RpcmVjdGlvbjsKdmVjMyBnZXRfbGlnaHRfZGlyZWN0aW9uKCl7cmV0dXJuIGxpZ2h0X2RpcmVjdGlvbjt9CgoKCm91dCB2ZWMyIGZyYWdfdXY7Cm91dCB2ZWMzIG9fbm9ybWFsOwpvdXQgdmVjMyBvX2NhbWRpcjsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7CnVuaWZvcm0gdmVjMyBleWVwb3NpdGlvbjsKCnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQoZmxvYXQgdil7cmV0dXJuIHZlYzQodiwgMC4wLCAwLjAsIDAuMCk7fQp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCmZsb2F0IF9ub3JtYWxpemUoZmxvYXQgdmFsLCBmbG9hdCBmcm9tLCBmbG9hdCB0byl7cmV0dXJuICh2YWwtZnJvbSkgLyAodG8gLSBmcm9tKTt9Cgp2ZWM0IGdldF9jb2xvcl9mcm9tX2NtYXAoZmxvYXQgdmFsdWUsIHNhbXBsZXIyRCBjb2xvcl9tYXAsIHZlYzIgY29sb3JyYW5nZSkgewogICAgZmxvYXQgY21pbiA9IGNvbG9ycmFuZ2UueDsKICAgIGZsb2F0IGNtYXggPSBjb2xvcnJhbmdlLnk7CiAgICBpZiAodmFsdWUgPD0gY21heCAmJiB2YWx1ZSA+PSBjbWluKSB7CiAgICAgICAgLy8gaW4gdmFsdWUgcmFuZ2UsIGNvbnRpbnVlIQogICAgfSBlbHNlIGlmICh2YWx1ZSA8IGNtaW4pIHsKICAgICAgICByZXR1cm4gZ2V0X2xvd2NsaXAoKTsKICAgIH0gZWxzZSBpZiAodmFsdWUgPiBjbWF4KSB7CiAgICAgICAgcmV0dXJuIGdldF9oaWdoY2xpcCgpOwogICAgfSBlbHNlIHsKICAgICAgICAvLyBpc25hbiBpcyBicm9rZW4gKG9mIGNvdXJzZSkgLS4tCiAgICAgICAgLy8gc28gaWYgb3V0c2lkZSB2YWx1ZSByYW5nZSBhbmQgbm90IHNtYWxsZXIvYmlnZ2VyIG1pbi9tYXggd2UgYXNzdW1lIE5hTgogICAgICAgIHJldHVybiBnZXRfbmFuX2NvbG9yKCk7CiAgICB9CiAgICBmbG9hdCBpMDEgPSBjbGFtcCgodmFsdWUgLSBjbWluKSAvIChjbWF4IC0gY21pbiksIDAuMCwgMS4wKTsKICAgIC8vIDEvMCBjb3JyZXNwb25kcyB0byB0aGUgY29ybmVyIG9mIHRoZSBjb2xvcm1hcCwgc28gdG8gcHJvcGVybHkgaW50ZXJwb2xhdGUKICAgIC8vIGJldHdlZW4gdGhlIGNvbG9ycywgd2UgbmVlZCB0byBzY2FsZSBpdCwgc28gdGhhdCB0aGUgZW5kcyBhcmUgYXQgMSAtIChzdGVwc2l6ZS8yKSBhbmQgMCsoc3RlcHNpemUvMikuCiAgICBmbG9hdCBzdGVwc2l6ZSA9IDEuMCAvIGZsb2F0KHRleHR1cmVTaXplKGNvbG9yX21hcCwgMCkpOwogICAgaTAxID0gKDEuMCAtIHN0ZXBzaXplKSAqIGkwMSArIDAuNSAqIHN0ZXBzaXplOwogICAgcmV0dXJuIHRleHR1cmUoY29sb3JfbWFwLCB2ZWMyKGkwMSwgMC4wKSk7Cn0KCnZlYzQgdmVydGV4X2NvbG9yKHZlYzMgY29sb3IsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdmVjNChjb2xvciwgMS4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcih2ZWM0IGNvbG9yLCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgcmV0dXJuIGNvbG9yOwp9CnZlYzQgdmVydGV4X2NvbG9yKGJvb2wgY29sb3IsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICAvLyBjb2xvciBzYW1wbGluZyBoYXBwZW5zIGluIGZyYWdtZW50IHNoYWRlcgogICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcihib29sIHZhbHVlLCB2ZWMyIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICAvLyBjb2xvciBzYW1wbGluZyBoYXBwZW5zIGluIGZyYWdtZW50IHNoYWRlcgogICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcihmbG9hdCB2YWx1ZSwgdmVjMiBjb2xvcnJhbmdlLCBzYW1wbGVyMkQgY29sb3JtYXApewogICAgaWYgKGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKSkgewogICAgICAgIHJldHVybiB2ZWM0KHZhbHVlLCAwLjAsIDAuMCwgMC4wKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGdldF9jb2xvcl9mcm9tX2NtYXAodmFsdWUsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKICAgIH0KfQoKdm9pZCByZW5kZXIodmVjNCBwb3NpdGlvbl93b3JsZCwgdmVjMyBub3JtYWwsIG1hdDQgdmlldywgbWF0NCBwcm9qZWN0aW9uKQp7CiAgICAvLyBub3JtYWwgaW4gd29ybGQgc3BhY2UKICAgIG9fbm9ybWFsID0gZ2V0X25vcm1hbG1hdHJpeCgpICogbm9ybWFsOwogICAgLy8gcG9zaXRpb24gaW4gY2xpcCBzcGFjZSAody8gZGVwdGgpCiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb24gKiB2aWV3ICogcG9zaXRpb25fd29ybGQ7IC8vIFRPRE8gY29uc2lkZXIgdXNpbmcgcHJvamVjdGlvbnZpZXcgZGlyZWN0bHkKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwogICAgLy8gZGlyZWN0aW9uIHRvIGNhbWVyYQogICAgb19jYW1kaXIgPSBwb3NpdGlvbl93b3JsZC54eXogLyBwb3NpdGlvbl93b3JsZC53IC0gZXllcG9zaXRpb247Cn0KCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpewogICAgLy8gZ2V0XyogZ2V0cyB0aGUgZ2xvYmFsIGlucHV0cyAodW5pZm9ybSwgc2FtcGxlciwgcG9zaXRpb24gYXJyYXkpCiAgICAvLyB0aG9zZSBmdW5jdGlvbnMgd2lsbCBnZXQgaW5zZXJ0ZWQgYnkgdGhlIHNoYWRlciBjcmVhdGlvbiBwaXBlbGluZQogICAgdmVjMyB2ZXJ0ZXhfcG9zaXRpb24gPSB0b3ZlYzMoZ2V0X3Bvc2l0aW9uKCkpOwogICAgaWYgKGlzbmFuKHZlcnRleF9wb3NpdGlvbi56KSkgewogICAgICAgIHZlcnRleF9wb3NpdGlvbi56ID0gMC4wOwogICAgfQogICAgdmVjNCBwb3NpdGlvbl93b3JsZCA9IG1vZGVsICogdmVjNCh2ZXJ0ZXhfcG9zaXRpb24sIDEpOwoKICAgIHJlbmRlcihwb3NpdGlvbl93b3JsZCwgZ2V0X25vcm1hbHMoKSwgdmlldywgcHJvamVjdGlvbik7CiAgICBmcmFnX3V2ID0gZ2V0X3V2KCk7CiAgICBmcmFnX3V2ID0gdmVjMigxLjAgLSBmcmFnX3V2LnksIGZyYWdfdXYueCk7CiAgICBmcmFnX2NvbG9yID0gdmVydGV4X2NvbG9yKGdldF9jb2xvcigpLCBnZXRfY29sb3JyYW5nZSgpLCBjb2xvcm1hcCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfVmVydGV4SUQpOwp9CgqvZnJhZ21lbnRfc291cmNl2heCCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBpc2FtcGxlcjNEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCB1c2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzMgc3BlY3VsYXI7CnZlYzMgZ2V0X3NwZWN1bGFyKCl7cmV0dXJuIHNwZWN1bGFyO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGF0dGVybjsKYm9vbCBnZXRfcGF0dGVybigpe3JldHVybiBwYXR0ZXJuO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gYm9vbCBpbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXI7CmJvb2wgZ2V0X2ludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcigpe3JldHVybiBpbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXI7fQp1bmlmb3JtIGZsb2F0IGJhY2tsaWdodDsKZmxvYXQgZ2V0X2JhY2tsaWdodCgpe3JldHVybiBiYWNrbGlnaHQ7fQp1bmlmb3JtIHZlYzMgYW1iaWVudDsKdmVjMyBnZXRfYW1iaWVudCgpe3JldHVybiBhbWJpZW50O30KdW5pZm9ybSBtYXQzIG5vcm1hbG1hdHJpeDsKbWF0MyBnZXRfbm9ybWFsbWF0cml4KCl7cmV0dXJuIG5vcm1hbG1hdHJpeDt9CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHNoaW5pbmVzczsKZmxvYXQgZ2V0X3NoaW5pbmVzcygpe3JldHVybiBzaGluaW5lc3M7fQp1bmlmb3JtIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KdW5pZm9ybSB2ZWMzIGxpZ2h0X2NvbG9yOwp2ZWMzIGdldF9saWdodF9jb2xvcigpe3JldHVybiBsaWdodF9jb2xvcjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBib29sIGNvbG9yOwpib29sIGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gdmVjNCB1bmlmb3JtX2NvbG9yOwp2ZWM0IGdldF91bmlmb3JtX2NvbG9yKCl7cmV0dXJuIHVuaWZvcm1fY29sb3I7fQp1bmlmb3JtIGJvb2wgc2hhZGluZzsKYm9vbCBnZXRfc2hhZGluZygpe3JldHVybiBzaGFkaW5nO30KdW5pZm9ybSB2ZWMzIGRpZmZ1c2U7CnZlYzMgZ2V0X2RpZmZ1c2UoKXtyZXR1cm4gZGlmZnVzZTt9CnVuaWZvcm0gdmVjNCBsb3djbGlwOwp2ZWM0IGdldF9sb3djbGlwKCl7cmV0dXJuIGxvd2NsaXA7fQp1bmlmb3JtIHZlYzMgbGlnaHRfZGlyZWN0aW9uOwp2ZWMzIGdldF9saWdodF9kaXJlY3Rpb24oKXtyZXR1cm4gbGlnaHRfZGlyZWN0aW9uO30KCmluIHZlYzIgZnJhZ191djsKaW4gdmVjNCBmcmFnX2NvbG9yOwpmbGF0IGluIGludCBzYW1wbGVfZnJhZ19jb2xvcjsKCmluIHZlYzMgb19ub3JtYWw7CmluIHZlYzMgb19jYW1kaXI7CgovLyBTbW9vdGhlcyBvdXQgZWRnZSBhcm91bmQgMCBsaWdodCBpbnRlbnNpdHksIHNlZSBHTE1ha2llCmZsb2F0IHNtb290aF96ZXJvX21heChmbG9hdCB4KSB7CiAgICBjb25zdCBmbG9hdCBjID0gMC4wMDM5MDYyNSwgeHN3YXAgPSAwLjY0MDY3MDcxMjAxNTI3NTksIHlzd2FwID0gMC4yMDUwODM4MzkwMDE5MDk1NTsKICAgIGNvbnN0IGZsb2F0IHNoaWZ0ID0gMS4wICsgeHN3YXAgLSB5c3dhcDsKICAgIGZsb2F0IHBvdzggPSB4ICsgc2hpZnQ7CiAgICBwb3c4ID0gcG93OCAqIHBvdzg7IHBvdzggPSBwb3c4ICogcG93ODsgcG93OCA9IHBvdzggKiBwb3c4OwogICAgcmV0dXJuIHggPCB5c3dhcCA/IGMgKiBwb3c4IDogeDsKfQoKdmVjMyBibGlubnBob25nKHZlYzMgTiwgdmVjMyBWLCB2ZWMzIEwsIHZlYzMgY29sb3IpewogICAgZmxvYXQgYmFja2xpZ2h0ID0gZ2V0X2JhY2tsaWdodCgpOwogICAgZmxvYXQgZGlmZl9jb2VmZiA9IHNtb290aF96ZXJvX21heChkb3QoTCwgLU4pKSArCiAgICAgICAgYmFja2xpZ2h0ICogc21vb3RoX3plcm9fbWF4KGRvdChMLCBOKSk7CgogICAgLy8gc3BlY3VsYXIgY29lZmZpY2llbnQKICAgIHZlYzMgSCA9IG5vcm1hbGl6ZShMICsgVik7CgogICAgZmxvYXQgc3BlY19jb2VmZiA9IHBvdyhtYXgoZG90KEgsIC1OKSwgMC4wKSwgZ2V0X3NoaW5pbmVzcygpKSArCiAgICAgICAgYmFja2xpZ2h0ICogcG93KG1heChkb3QoSCwgTiksIDAuMCksIGdldF9zaGluaW5lc3MoKSk7CiAgICBpZiAoZGlmZl9jb2VmZiA8PSAwLjApCiAgICAgICAgc3BlY19jb2VmZiA9IDAuMDsKCiAgICAvLyBmaW5hbCBsaWdodGluZyBtb2RlbAogICAgcmV0dXJuIGdldF9saWdodF9jb2xvcigpICogdmVjMygKICAgICAgICBnZXRfZGlmZnVzZSgpICogZGlmZl9jb2VmZiAqIGNvbG9yICsKICAgICAgICBnZXRfc3BlY3VsYXIoKSAqIHNwZWNfY29lZmYKICAgICk7Cn0KCnZlYzQgZ2V0X2NvbG9yKHZlYzMgY29sb3IsIHZlYzIgdXYsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdmVjNChjb2xvciwgMS4wKTsKfQoKdmVjNCBnZXRfY29sb3IodmVjNCBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiBjb2xvcjsKfQoKdmVjNCBnZXRfY29sb3IoYm9vbCBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiBmcmFnX2NvbG9yOyAgLy8gY29sb3Igbm90IGluIHVuaWZvcm0KfQoKdmVjNCBnZXRfY29sb3Ioc2FtcGxlcjJEIGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgaWYgKGdldF9wYXR0ZXJuKCkpIHsKICAgICAgICB2ZWMyIHNpemUgPSB2ZWMyKHRleHR1cmVTaXplKGNvbG9yLCAwKSk7CiAgICAgICAgdmVjMiBwb3MgPSBnbF9GcmFnQ29vcmQueHk7CiAgICAgICAgcmV0dXJuIHRleGVsRmV0Y2goY29sb3IsIGl2ZWMyKG1vZChwb3MueCwgc2l6ZS54KSwgbW9kKHBvcy55LCBzaXplLnkpKSwgMCk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0ZXh0dXJlKGNvbG9yLCB1dik7CiAgICB9Cn0KCmZsb2F0IF9ub3JtYWxpemUoZmxvYXQgdmFsLCBmbG9hdCBmcm9tLCBmbG9hdCB0byl7cmV0dXJuICh2YWwtZnJvbSkgLyAodG8gLSBmcm9tKTt9Cgp2ZWM0IGdldF9jb2xvcl9mcm9tX2NtYXAoZmxvYXQgdmFsdWUsIHNhbXBsZXIyRCBjb2xvcl9tYXAsIHZlYzIgY29sb3JyYW5nZSkgewogICAgZmxvYXQgY21pbiA9IGNvbG9ycmFuZ2UueDsKICAgIGZsb2F0IGNtYXggPSBjb2xvcnJhbmdlLnk7CiAgICBpZiAodmFsdWUgPD0gY21heCAmJiB2YWx1ZSA+PSBjbWluKSB7CiAgICAgICAgLy8gaW4gdmFsdWUgcmFuZ2UsIGNvbnRpbnVlIQogICAgfSBlbHNlIGlmICh2YWx1ZSA8IGNtaW4pIHsKICAgICAgICByZXR1cm4gZ2V0X2xvd2NsaXAoKTsKICAgIH0gZWxzZSBpZiAodmFsdWUgPiBjbWF4KSB7CiAgICAgICAgcmV0dXJuIGdldF9oaWdoY2xpcCgpOwogICAgfSBlbHNlIHsKICAgICAgICAvLyBpc25hbiBpcyBicm9rZW4gKG9mIGNvdXJzZSkgLS4tCiAgICAgICAgLy8gc28gaWYgb3V0c2lkZSB2YWx1ZSByYW5nZSBhbmQgbm90IHNtYWxsZXIvYmlnZ2VyIG1pbi9tYXggd2UgYXNzdW1lIE5hTgogICAgICAgIHJldHVybiBnZXRfbmFuX2NvbG9yKCk7CiAgICB9CiAgICBmbG9hdCBpMDEgPSBjbGFtcCgodmFsdWUgLSBjbWluKSAvIChjbWF4IC0gY21pbiksIDAuMCwgMS4wKTsKICAgIC8vIDEvMCBjb3JyZXNwb25kcyB0byB0aGUgY29ybmVyIG9mIHRoZSBjb2xvcm1hcCwgc28gdG8gcHJvcGVybHkgaW50ZXJwb2xhdGUKICAgIC8vIGJldHdlZW4gdGhlIGNvbG9ycywgd2UgbmVlZCB0byBzY2FsZSBpdCwgc28gdGhhdCB0aGUgZW5kcyBhcmUgYXQgMSAtIChzdGVwc2l6ZS8yKSBhbmQgMCsoc3RlcHNpemUvMikuCiAgICBmbG9hdCBzdGVwc2l6ZSA9IDEuMCAvIGZsb2F0KHRleHR1cmVTaXplKGNvbG9yX21hcCwgMCkpOwogICAgaTAxID0gKDEuMCAtIHN0ZXBzaXplKSAqIGkwMSArIDAuNSAqIHN0ZXBzaXplOwogICAgcmV0dXJuIHRleHR1cmUoY29sb3JfbWFwLCB2ZWMyKGkwMSwgMC4wKSk7Cn0KCnZlYzQgZ2V0X2NvbG9yKGJvb2wgY29sb3IsIHZlYzIgdXYsIHZlYzIgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIGlmIChnZXRfaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyKCkpIHsKICAgICAgICByZXR1cm4gZ2V0X2NvbG9yX2Zyb21fY21hcChmcmFnX2NvbG9yLngsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZyYWdfY29sb3I7CiAgICB9Cn0KCnZlYzQgZ2V0X2NvbG9yKHNhbXBsZXIyRCB2YWx1ZXMsIHZlYzIgdXYsIHZlYzIgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIGZsb2F0IHZhbHVlID0gdGV4dHVyZSh2YWx1ZXMsIHV2KS54OwogICAgcmV0dXJuIGdldF9jb2xvcl9mcm9tX2NtYXAodmFsdWUsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKfQoKdmVjNCBnZXRfY29sb3Ioc2FtcGxlcjJEIGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdGV4dHVyZShjb2xvciwgdXYpOwp9CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgdmVjNCByZWFsX2NvbG9yID0gZ2V0X2NvbG9yKHVuaWZvcm1fY29sb3IsIGZyYWdfdXYsIGdldF9jb2xvcnJhbmdlKCksIGNvbG9ybWFwKTsKICAgIHZlYzMgc2hhZGVkX2NvbG9yID0gcmVhbF9jb2xvci5yZ2I7CgogICAgaWYoZ2V0X3NoYWRpbmcoKSl7CiAgICAgICAgdmVjMyBMID0gZ2V0X2xpZ2h0X2RpcmVjdGlvbigpOwogICAgICAgIHZlYzMgTiA9IG5vcm1hbGl6ZShvX25vcm1hbCk7CiAgICAgICAgdmVjMyBsaWdodCA9IGJsaW5ucGhvbmcoTiwgbm9ybWFsaXplKG9fY2FtZGlyKSwgTCwgcmVhbF9jb2xvci5yZ2IpOwogICAgICAgIHNoYWRlZF9jb2xvciA9IGdldF9hbWJpZW50KCkgKiByZWFsX2NvbG9yLnJnYiArIGxpZ2h0OwogICAgfQoKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKHJlYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAocmVhbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gdmVjNChzaGFkZWRfY29sb3IsIHJlYWxfY29sb3IuYSk7Cn0Kr2JhY2tncm91bmRjb2xvcscHaKY5NDgxMzW1Y2FtZXJhX3JlbGF0aXZlX2xpZ2h0w6hjaGlsZHJlbpGMpXBsb3Rzk94AEKx0cmFuc3BhcmVuY3nHB2imOTQ3OTIxpXNwYWNlxwdopjk0NzkyNqx2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIA/AACAPwAAgD8AAAAAAAAAAAAAgD8AAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAL8AAAC/AAAAPwAAAL8AAAC/AAAAPwAAAD8AAAA/pG5hbWW4dGV4dC0zNjc0ODQyODIxMTQ3MTIxMDQ0qWNhbV9zcGFjZaVwaXhlbKh1bmlmb3Jtc94AGKtweF9wZXJfdW5pdMo/gAAAqWdsb3djb2xvctgXAAAAAAAAAAAAAAAAAAAAAKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+nbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKliaWxsYm9hcmTCqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAArXByZXByb2plY3Rpb27HQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/p2FtYmllbnTHDBdmZuY+ZmbmPmZm5j6pbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAArWRpc3RhbmNlZmllbGSKqW1pbkZpbHRlcqxMaW5lYXJGaWx0ZXKqYW5pc290cm9wecpBgAAAqW1hZ0ZpbHRlcqxMaW5lYXJGaWx0ZXKld3JhcFOuUmVwZWF0V3JhcHBpbmekZGF0Ya10ZXh0dXJlX2F0bGFzrHRocmVlX2Zvcm1hdKlSZWRGb3JtYXSkc2l6ZZLNBADNBACld3JhcFSuUmVwZWF0V3JhcHBpbmekdHlwZadTYW1wbGVyqnRocmVlX3R5cGWpRmxvYXRUeXBlqmNvbG9ycmFuZ2XCsmF0bGFzX3RleHR1cmVfc2l6ZcpEgAAAq3N0cm9rZXdpZHRoygAAAACrc3Ryb2tlY29sb3LYFwAAAAAAAAAAAAAAAAAAAACpZ2xvd3dpZHRoygAAAACncGlja2luZ8KqcmVzb2x1dGlvbtcXAAB7QwAAdUOlaW1hZ2XCqW9iamVjdF9pZACqc2hhcGVfdHlwZQOwdHJhbnNmb3JtX21hcmtlcsKrbGlnaHRfY29sb3LHDBcAAAA/AAAAPwAAAD+rZGVwdGhfc2hpZnTKAAAAAKhjb2xvcm1hcMKndmlzaWJsZccHaKY5NDc5MjCrbWFya2Vyc3BhY2XHB2imOTQ3OTEzsWF0dHJpYnV0ZV91cGRhdGVyxwdopjk0ODEyMqhvdmVyZHJhd8cHaKY5NDc5MjKvdW5pZm9ybV91cGRhdGVyxwdopjk0ODEyM6VmYWNlc8cHaKY5NDgxMjGkdXVpZLMzNjc0ODQyODIxMTQ3MTIxMDQ0rXZlcnRleF9zb3VyY2XaIJYKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWM0IGdsb3djb2xvcjsKdmVjNCBnZXRfZ2xvd2NvbG9yKCl7cmV0dXJuIGdsb3djb2xvcjt9CnVuaWZvcm0gdmVjNCBzdHJva2Vjb2xvcjsKdmVjNCBnZXRfc3Ryb2tlY29sb3IoKXtyZXR1cm4gc3Ryb2tlY29sb3I7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSBmbG9hdCBnbG93d2lkdGg7CmZsb2F0IGdldF9nbG93d2lkdGgoKXtyZXR1cm4gZ2xvd3dpZHRoO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGZsb2F0IHB4X3Blcl91bml0OwpmbG9hdCBnZXRfcHhfcGVyX3VuaXQoKXtyZXR1cm4gcHhfcGVyX3VuaXQ7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHN0cm9rZXdpZHRoOwpmbG9hdCBnZXRfc3Ryb2tld2lkdGgoKXtyZXR1cm4gc3Ryb2tld2lkdGg7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCBjb2xvcnJhbmdlOwpib29sIGdldF9jb2xvcnJhbmdlKCl7cmV0dXJuIGNvbG9ycmFuZ2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgbWFya2Vyc2l6ZTsKdmVjMiBnZXRfbWFya2Vyc2l6ZSgpe3JldHVybiBtYXJrZXJzaXplO30KaW4gdmVjNCByb3RhdGlvbnM7CnZlYzQgZ2V0X3JvdGF0aW9ucygpe3JldHVybiByb3RhdGlvbnM7fQppbiB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CmluIHZlYzMgcG9zOwp2ZWMzIGdldF9wb3MoKXtyZXR1cm4gcG9zO30KaW4gdmVjMiBxdWFkX29mZnNldDsKdmVjMiBnZXRfcXVhZF9vZmZzZXQoKXtyZXR1cm4gcXVhZF9vZmZzZXQ7fQppbiB2ZWM0IHV2X29mZnNldF93aWR0aDsKdmVjNCBnZXRfdXZfb2Zmc2V0X3dpZHRoKCl7cmV0dXJuIHV2X29mZnNldF93aWR0aDt9CmluIHZlYzMgbWFya2VyX29mZnNldDsKdmVjMyBnZXRfbWFya2VyX29mZnNldCgpe3JldHVybiBtYXJrZXJfb2Zmc2V0O30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4X2RpbTsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cm91dCB2ZWMyIGZyYWdfdXY7Cm91dCBmbG9hdCBmcmFnX3V2c2NhbGU7Cm91dCBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7Cm91dCB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAoKCm1hdDQgcW1hdCh2ZWM0IHF1YXQpewogICAgZmxvYXQgbnVtID0gcXVhdC54ICogMi4wOwogICAgZmxvYXQgbnVtMiA9IHF1YXQueSAqIDIuMDsKICAgIGZsb2F0IG51bTMgPSBxdWF0LnogKiAyLjA7CiAgICBmbG9hdCBudW00ID0gcXVhdC54ICogbnVtOwogICAgZmxvYXQgbnVtNSA9IHF1YXQueSAqIG51bTI7CiAgICBmbG9hdCBudW02ID0gcXVhdC56ICogbnVtMzsKICAgIGZsb2F0IG51bTcgPSBxdWF0LnggKiBudW0yOwogICAgZmxvYXQgbnVtOCA9IHF1YXQueCAqIG51bTM7CiAgICBmbG9hdCBudW05ID0gcXVhdC55ICogbnVtMzsKICAgIGZsb2F0IG51bTEwID0gcXVhdC53ICogbnVtOwogICAgZmxvYXQgbnVtMTEgPSBxdWF0LncgKiBudW0yOwogICAgZmxvYXQgbnVtMTIgPSBxdWF0LncgKiBudW0zOwogICAgcmV0dXJuIG1hdDQoCiAgICAgICAgKDEuMCAtIChudW01ICsgbnVtNikpLCAobnVtNyArIG51bTEyKSwgICAgICAgIChudW04IC0gbnVtMTEpLCAgICAgICAgMC4wLAogICAgICAgIChudW03IC0gbnVtMTIpLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNikpLCAobnVtOSArIG51bTEwKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtOCArIG51bTExKSwgICAgICAgIChudW05IC0gbnVtMTApLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNSkpLCAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMS4wCiAgICApOwp9CgpmbG9hdCBkaXN0YW5jZWZpZWxkX3NjYWxlKCl7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzOyBjb252ZXJ0IHRvIGRpbWVuc2lvbmxlc3MKICAgIC8vIHgtY29vcmRpbmF0ZSBvZiB0ZXh0dXJlIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggcHJvZ3JhbW1hdGljIHV2CiAgICAvLyBkaXN0YW5jZSBmaWVsZHMgaW4gZnJhZ21lbnQgc2hhZGVyLiBTZWUgYWxzbyBjb21tZW50cyBiZWxvdy4KICAgIHZlYzQgdXZfcmVjdCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIGZsb2F0IHBpeHNpemVfeCA9ICh1dl9yZWN0LnogLSB1dl9yZWN0LngpICogZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpOwogICAgcmV0dXJuIC0xLjAvcGl4c2l6ZV94Owp9Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKbWF0MiBkaWFnbSh2ZWMyIHYpewogICAgcmV0dXJuIG1hdDIodi54LCAwLjAsIDAuMCwgdi55KTsKfQoKZmxvYXQgX2RldGVybWluYW50KG1hdDIgbSkgewogIHJldHVybiBtWzBdWzBdICogbVsxXVsxXSAtIG1bMF1bMV0gKiBtWzFdWzBdOwp9Cgp2b2lkIG1haW4oKXsKICAgIC8vIGdldF9wb3MoKSByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2NhdHRlciBtYXJrZXIKICAgIC8vIGdldF9wb3NpdGlvbigpIHJldHVybnMgdGhlIChyZWxhdGl2ZSkgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgcXVhZCB2ZXJ0ZXgKCiAgICB2ZWMyIGJib3hfcmFkaXVzID0gMC41ICogZ2V0X21hcmtlcnNpemUoKTsKICAgIHZlYzIgc3ByaXRlX2Jib3hfY2VudHJlID0gZ2V0X3F1YWRfb2Zmc2V0KCkgKyBiYm94X3JhZGl1czsKCiAgICBtYXQ0IHB2aWV3ID0gcHJvamVjdGlvbiAqIHZpZXc7CiAgICBtYXQ0IHRyYW5zID0gZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKSA/IG1vZGVsIDogbWF0NCgxLjApOwoKICAgIC8vIENvbXB1dGUgY2VudHJlIG9mIGJpbGxib2FyZCBpbiBjbGlwcGluZyBjb29yZGluYXRlcwogICAgLy8gQWx3YXlzIHRyYW5zZm9ybSB0ZXh0L3NjYXR0ZXIgcG9zaXRpb24gYXJndW1lbnQKICAgIHZlYzQgZGF0YV9wb2ludCA9IGdldF9wcmVwcm9qZWN0aW9uKCkgKiBtb2RlbCAqIHZlYzQodG92ZWMzKGdldF9wb3MoKSksIDEpOwogICAgLy8gbWF5YmUgdHJhbnNmb3JtIG1hcmtlcl9vZmZzZXQgKyBnbHlwaCBvZmZzZXRzCiAgICBkYXRhX3BvaW50ID0gdmVjNChkYXRhX3BvaW50Lnh5eiAvIGRhdGFfcG9pbnQudyArIG1hdDModHJhbnMpICogdG92ZWMzKGdldF9tYXJrZXJfb2Zmc2V0KCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSBwdmlldyAqIGRhdGFfcG9pbnQ7CgogICAgLy8gQ29tcHV0ZSB0cmFuc2Zvcm0gZm9yIHRoZSBvZmZzZXQgdmVjdG9ycyBmcm9tIHRoZSBjZW50cmFsIHBvaW50CiAgICB0cmFucyA9IChnZXRfYmlsbGJvYXJkKCkgPyBwcm9qZWN0aW9uIDogcHZpZXcpICogcW1hdChnZXRfcm90YXRpb25zKCkpICogdHJhbnM7CiAgICB2ZWM0IHNwcml0ZV9jZW50ZXIgPSB0cmFucyAqIHZlYzQoc3ByaXRlX2Jib3hfY2VudHJlLCAwLCAwKTsKCiAgICB2ZWM0IHZjbGlwID0gZGF0YV9wb2ludCArIHNwcml0ZV9jZW50ZXI7CgogICAgLy8gRXh0cmEgYnVmZmVyaW5nIGlzIHJlcXVpcmVkIGFyb3VuZCBzcHJpdGVzIHdoaWNoIGFyZSBhbnRpYWxpYXNlZCBzbyB0aGF0CiAgICAvLyB0aGUgYW50aWFsaWFzIGJsdXIgZG9lc24ndCBnZXQgY3V0IG9mZiAoc2VlICMxNSkuIFRoaXMgYmx1ciBmYWxscyB0bwogICAgLy8gemVybyBhdCBhIHJhZGl1cyBvZiBBTlRJQUxJQVNfUkFESVVTIHBpeGVscyBpbiB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZXMKICAgIC8vIGFuZCB3ZSB3YW50IHRvIGJ1ZmZlciB0aGUgdmVydGljZXMgaW4gdGhlICpzb3VyY2UqIHNwcml0ZSBjb29yZGluYXRlCiAgICAvLyBzeXN0ZW0gc28gdGhhdCB3ZSBnZXQgdGhpcyBhbW91bnQgaW4gdGhlIG91dHB1dCBjb29yZGluYXRlcy4KICAgIC8vCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgbWFwcGluZyBmcm9tIHNwcml0ZSB4eQogICAgLy8gY29vcmRpbmF0ZXMgKGRlZmluZWQgYnkgYHRyYW5zYCkgaW50byB0aGUgdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuCiAgICAvLyBUaGUgZGVyaXZhdGl2ZSBuZWVkcyB0byBpbmNsdWRlIHRoZSBwcm9wZXIgdGVybSBmb3IgdGhlIHBlcnNwZWN0aXZlCiAgICAvLyBkaXZpZGUgaW50byBOREMsIGV2YWx1YXRlZCBhdCB0aGUgY2VudHJlIHBvaW50IGB2Y2xpcGAuCiAgICBtYXQ0IGRfbmRjX2RfY2xpcCA9IG1hdDQoCiAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsCiAgICAgICAgLXZjbGlwLnh5ei8odmNsaXAudyp2Y2xpcC53KSwgICAgICAgICAgMC4wCiAgICApOwogICAgbWF0MiBkeHl2X2R4eXMgPSBkaWFnbSgwLjUgKiBweF9wZXJfdW5pdCAqIGdldF9yZXNvbHV0aW9uKCkpICogbWF0MihkX25kY19kX2NsaXAqdHJhbnMpOwogICAgLy8gTm93LCBvdXIgYnVmZmVyIHNpemUgaXMgZXhwcmVzc2VkIGluIHZpZXdwb3J0IHBpeGVscyBidXQgd2UgZ2V0IGJhY2sgdG8KICAgIC8vIHRoZSBzcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gdXNpbmcgdGhlIHNjYWxlIGZhY3RvciBvZiB0aGUKICAgIC8vIHRyYW5zZm9ybWF0aW9uIChmb3IgaXNvdHJvcGljIHRyYW5zZm9ybWF0aW9ucykuIEZvciBhbmlzb3Ryb3BpYwogICAgLy8gdHJhbnNmb3JtYXRpb25zLCB0aGUgZ2VvbWV0cmljIG1lYW4gb2YgdGhlIHR3byBwcmluY2lwbGUgc2NhbGUgZmFjdG9ycwogICAgLy8gaXMgYSByZWFzb25hYmxlIGNvbXByb21pc2U6CiAgICBmbG9hdCB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSA9IHNxcnQoYWJzKF9kZXRlcm1pbmFudChkeHl2X2R4eXMpKSk7CgogICAgLy8gSW4gdGhlIGZyYWdtZW50IHNoYWRlciB3ZSB3YW50IG91ciBzaWduZWQgZGlzdGFuY2UgaW4gdmlld3BvcnQgKHBpeGVsKQogICAgLy8gY29vcmRzIGZvciBkaXJlY3QgdXNlIGluIGFudGlhbGlhc2luZyBzdGVwIGZ1bmN0aW9ucy4gV2UgdGhlcmVmb3JlIG5lZWQKICAgIC8vIGEgc2NhbGluZyBmYWN0b3Igc2ltaWxhciB0byB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSwgYnV0IGluY2x1ZGluZwogICAgLy8gdGhlIHV2LT5zcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gc2NhbGluZyBmYWN0b3IgYXMgd2VsbC4gIFdlIGNob29zZSB0bwogICAgLy8gdXNlIHRoZSBib3VuZGluZyBib3ggKngqIHdpZHRoIGZvciB0aGlzLiBUaGlzIGNvbWVzIHdpdGggc29tZQogICAgLy8gY29uc2lzdGVuY3kgY29uZGl0aW9uczoKICAgIC8vICogRm9yIHByb2NlZHVyYWwgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRoZSBzcHJpdGUgYm91bmRpbmcgYm94IHRvIGJlCiAgICAvLyAgIHNxdWFyZS4gKElmIG5vdCwgdGhlIHV2IGNvb3JkaW5hdGVzIHdpbGwgYmUgYW5pc290cm9waWNhbGx5IHNjYWxlZCBhbmQKICAgIC8vICAgYW55IGNhbGN1bGF0aW9uIGJhc2VkIG9uIHRoZW0gd2lsbCBub3QgYmUgYSBkaXN0YW5jZSBmdW5jdGlvbi4pCiAgICAvLyAqIEZvciBzYW1wbGVkIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0byBjb25zaXN0ZW50bHkgY2hvb3NlIHRoZSAqeCoKICAgIC8vICAgZm9yIHRoZSBzY2FsaW5nIGluIGdldF9kaXN0YW5jZWZpZWxkX3NjYWxlKCkuCiAgICBmbG9hdCBzcHJpdGVfZnJvbV91X3NjYWxlID0gbWluKGFicyhnZXRfbWFya2Vyc2l6ZSgpLngpLCBhYnMoZ2V0X21hcmtlcnNpemUoKS55KSk7CiAgICBmcmFnX3V2c2NhbGUgPSB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSAqIHNwcml0ZV9mcm9tX3Vfc2NhbGU7CiAgICBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgPSBkaXN0YW5jZWZpZWxkX3NjYWxlKCk7CgogICAgLy8gYWRkIHBhZGRpbmcgZm9yIEFBLCBzdHJva2UgYW5kIGdsb3cgKG5vbiBuYXRpdmUgZGlzdGFuY2VmaWVsZHMgZG9uJ3QgbmVlZAogICAgLy8gQUEgcGFkZGluZyBidXQgQ0lSQ0xFIGV0YyBkbykKICAgIGZsb2F0IHBwdSA9IGdldF9weF9wZXJfdW5pdCgpOwogICAgdmVjMiBwYWRkZWRfYmJveF9zaXplID0gYmJveF9yYWRpdXMgKyAoCiAgICAgICAgQU5USUFMSUFTX1JBRElVUyArIG1heCgwLjAsIGdldF9zdHJva2V3aWR0aCgpICogcHB1KSArIG1heCgwLjAsIGdldF9nbG93d2lkdGgoKSAqIHBwdSkKICAgICkgLyB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZTsKICAgIHZlYzIgdXZfcGFkX3NjYWxlID0gcGFkZGVkX2Jib3hfc2l6ZSAvIGJib3hfcmFkaXVzOwoKICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yKCkpOwogICAgZnJhZ191dl9vZmZzZXRfd2lkdGggPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICAvLyBnZXRfdXYoKSByZXR1cm5zICgwLCAwKSwgKDEsIDApLCAoMCwgMSkgb3IgKDEsIDEpCiAgICAvLyB0byBhY2NvbW9kYXRlIHN0cm9rZSBhbmQgZ2xvd3dpZHRoIHdlIG5lZWQgdG8gZXh0cnVkZSB1didzIG91dHdhcmRzIGZyb20gKDAuNSwgMC41KQogICAgZnJhZ191diA9IHZlYzIoMC41KSArIChnZXRfdXYoKSAtIHZlYzIoMC41KSkgKiB1dl9wYWRfc2NhbGU7CgogICAgLy8gc2NyZWVuIHNwYWNlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb3NpdGlvbgogICAgdmVjNCBxdWFkX3ZlcnRleCA9ICh0cmFucyAqIHZlYzQoMi4wICogcGFkZGVkX2Jib3hfc2l6ZSAqIGdldF9wb3NpdGlvbigpLCAwLjAsIDAuMCkpOwogICAgZ2xfUG9zaXRpb24gPSB2Y2xpcCArIHF1YWRfdmVydGV4OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cn0KCq9mcmFnbWVudF9zb3VyY2XaHAgKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIGlzYW1wbGVyM0Q7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjNCBnbG93Y29sb3I7CnZlYzQgZ2V0X2dsb3djb2xvcigpe3JldHVybiBnbG93Y29sb3I7fQp1bmlmb3JtIHZlYzQgc3Ryb2tlY29sb3I7CnZlYzQgZ2V0X3N0cm9rZWNvbG9yKCl7cmV0dXJuIHN0cm9rZWNvbG9yO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gZmxvYXQgZ2xvd3dpZHRoOwpmbG9hdCBnZXRfZ2xvd3dpZHRoKCl7cmV0dXJuIGdsb3d3aWR0aDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gdmVjNCBoaWdoY2xpcDsKdmVjNCBnZXRfaGlnaGNsaXAoKXtyZXR1cm4gaGlnaGNsaXA7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBmbG9hdCBweF9wZXJfdW5pdDsKZmxvYXQgZ2V0X3B4X3Blcl91bml0KCl7cmV0dXJuIHB4X3Blcl91bml0O30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBmbG9hdCBzdHJva2V3aWR0aDsKZmxvYXQgZ2V0X3N0cm9rZXdpZHRoKCl7cmV0dXJuIHN0cm9rZXdpZHRoO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKaW4gdmVjNCBmcmFnX2NvbG9yOwppbiB2ZWMyIGZyYWdfdXY7CgojZGVmaW5lIENJUkNMRSAgICAgICAgICAgIDAKI2RlZmluZSBSRUNUQU5HTEUgICAgICAgICAxCiNkZWZpbmUgUk9VTkRFRF9SRUNUQU5HTEUgMgojZGVmaW5lIERJU1RBTkNFRklFTEQgICAgIDMKI2RlZmluZSBUUklBTkdMRSAgICAgICAgICA0CgojZGVmaW5lIE1fU1FSVF8yICAgICAgICAgIDEuNDE0MjEzNQoKCi8vIEhhbGYgd2lkdGggb2YgYW50aWFsaWFzaW5nIHNtb290aHN0ZXAKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAoKaW4gZmxvYXQgZnJhZ191dnNjYWxlOwppbiBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7CmluIHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwoKLy8gVGhlc2UgdmVyc2lvbnMgb2YgYWFzdGVwIGFzc3VtZSB0aGF0IGBkaXN0YCBpcyBhIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbgovLyB3aGljaCBoYXMgYmVlbiBzY2FsZWQgdG8gYmUgaW4gdW5pdHMgb2YgcGl4ZWxzLgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxICsgQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCB0aHJlc2hvbGQyLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDErQU5USUFMSUFTX1JBRElVUywgZGlzdCkgLQogICAgICAgICAgIHNtb290aHN0ZXAodGhyZXNob2xkMi1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQyK0FOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgovLyBQcm9jZWR1cmFsIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbnMgb24gdGhlIHV2IGNvb3JkaW5hdGUgcGF0Y2ggWzAsMV14WzAsMV0KLy8gTm90ZSB0aGF0IGZvciBhbnRpYWxpYXNpbmcgdG8gd29yayBwcm9wZXJseSB0aGVzZSBzaG91bGQgYmUgKnNjYWxlIHByZXNlcnZpbmcqCi8vIChJZiB5b3UgbXVzdCByZXNjYWxlIHV2LCBtYWtlIHN1cmUgdG8gcHV0IHRoZSBzY2FsZSBmYWN0b3IgYmFjayBpbiBsYXRlci4pCmZsb2F0IHRyaWFuZ2xlKHZlYzIgUCl7CiAgICBQIC09IHZlYzIoMC41KTsKICAgIGZsb2F0IHggPSBNX1NRUlRfMiAqIChQLnggLSBQLnkpOwogICAgZmxvYXQgeSA9IE1fU1FSVF8yICogKFAueCArIFAueSk7CiAgICBmbG9hdCByMSA9IG1heChhYnMoeCksIGFicyh5KSkgLSAxLjAvKDIuMCpNX1NRUlRfMik7CiAgICBmbG9hdCByMiA9IFAueTsKICAgIHJldHVybiAtbWF4KHIxLHIyKTsKfQoKZmxvYXQgY2lyY2xlKHZlYzIgdXYpewogICAgcmV0dXJuIDAuNS1sZW5ndGgodXYtdmVjMigwLjUpKTsKfQoKZmxvYXQgcmVjdGFuZ2xlKHZlYzIgdXYpewogICAgdmVjMiBkID0gbWF4KC11diwgdXYtdmVjMigxKSk7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKSk7Cn0KCmZsb2F0IHJvdW5kZWRfcmVjdGFuZ2xlKHZlYzIgdXYsIHZlYzIgdGwsIHZlYzIgYnIpewogICAgdmVjMiBkID0gbWF4KHRsLXV2LCB1di1icik7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKS10bC54KTsKfQoKdm9pZCBmaWxsKGJvb2wgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgY29sb3IgPSBtaXgoY29sb3IsIGZpbGxjb2xvciwgaW5maWxsKTsKfQoKdm9pZCBmaWxsKHNhbXBsZXIyRCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICB2ZWM0IGltX2NvbG9yID0gdGV4dHVyZShpbWFnZSwgdXYueXgpOwogICAgY29sb3IgPSBtaXgoY29sb3IsIGltX2NvbG9yLCBpbmZpbGwpOwp9Cgp2b2lkIHN0cm9rZSh2ZWM0IHN0cm9rZWNvbG9yLCBmbG9hdCBzaWduZWRfZGlzdGFuY2UsIGZsb2F0IHdpZHRoLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGlmICh3aWR0aCAhPSAwLjApewogICAgICAgIGZsb2F0IHQgPSBhYXN0ZXAobWluKHdpZHRoLCAwLjApLCBtYXgod2lkdGgsIDAuMCksIHNpZ25lZF9kaXN0YW5jZSk7CiAgICAgICAgdmVjNCBiZ19jb2xvciA9IG1peChjb2xvciwgdmVjNChzdHJva2Vjb2xvci5yZ2IsIDApLCBmbG9hdChzaWduZWRfZGlzdGFuY2UgPCAwLjUgKiB3aWR0aCkpOwogICAgICAgIGNvbG9yID0gbWl4KGJnX2NvbG9yLCBzdHJva2Vjb2xvciwgdCk7CiAgICB9Cn0KCnZvaWQgZ2xvdyh2ZWM0IGdsb3djb2xvciwgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlLCBmbG9hdCBpbnNpZGUsIGlub3V0IHZlYzQgY29sb3IpewogICAgZmxvYXQgZ2xvd193aWR0aCA9IGdldF9nbG93d2lkdGgoKSAqIGdldF9weF9wZXJfdW5pdCgpOwogICAgZmxvYXQgc3Ryb2tlX3dpZHRoID0gZ2V0X3N0cm9rZXdpZHRoKCkgKiBnZXRfcHhfcGVyX3VuaXQoKTsKICAgIGlmIChnbG93X3dpZHRoID4gMC4wKXsKICAgICAgICBmbG9hdCBvdXRzaWRlID0gKGFicyhzaWduZWRfZGlzdGFuY2UpIC0gc3Ryb2tlX3dpZHRoKSAvIGdsb3dfd2lkdGg7CiAgICAgICAgZmxvYXQgYWxwaGEgPSAxLjAgLSBvdXRzaWRlOwogICAgICAgIGNvbG9yID0gbWl4KHZlYzQoZ2xvd2NvbG9yLnJnYiwgZ2xvd2NvbG9yLmEqYWxwaGEpLCBjb2xvciwgaW5zaWRlKTsKICAgIH0KfQoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVscy4gQ29udmVydCB0byBzYW1lIGRpc3RhbmNlCiAgICAvLyBzY2FsaW5nIGFzIGZfdXYueCBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgcHJvY2VkdXJhbCBzaWduZWRfZGlzdGFuY2UKICAgIC8vIGNhbGN1bGF0aW9ucy4KICAgIHJldHVybiBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgKiB0ZXh0dXJlKGRpc3RhbmNlZmllbGQsIHV2KS5yOwp9CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChib29sIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgcmV0dXJuIDAuMDsKfQoKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlID0gMC4wOwoKICAgIHZlYzQgdXZfb2ZmID0gZnJhZ191dl9vZmZzZXRfd2lkdGg7CiAgICB2ZWMyIHRleF91diA9IG1peCh1dl9vZmYueHksIHV2X29mZi56dywgY2xhbXAoZnJhZ191diwgMC4wLCAxLjApKTsKCiAgICBpbnQgc2hhcGUgPSBnZXRfc2hhcGVfdHlwZSgpOwogICAgaWYoc2hhcGUgPT0gQ0lSQ0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IGNpcmNsZShmcmFnX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gRElTVEFOQ0VGSUVMRCkgewogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGRpc3RhbmNlZmllbGQsIHRleF91dik7CiAgICAgICAgaWYgKGdldF9zdHJva2V3aWR0aCgpID4gMC4wIHx8IGdldF9nbG93d2lkdGgoKSA+IDAuMCkgewogICAgICAgICAgICAvLyBDb21wZW5zYXRlIGZvciB0aGUgY2xhbXBpbmcgb2YgdGV4X3V2IGJ5IGFuIGFwcHJveGltYXRlCiAgICAgICAgICAgIC8vIGV4dGVuc2lvbiBvZiB0aGUgc2lnbmVkIGRpc3RhbmNlIG91dHNpZGUgdGhlIHZhbGlkIHRleHR1cmUKICAgICAgICAgICAgLy8gcmVnaW9uLgogICAgICAgICAgICB2ZWMyIGJ1ZnV2ID0gZnJhZ191diAtIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKTsKICAgICAgICAgICAgc2lnbmVkX2Rpc3RhbmNlIC09IGxlbmd0aChidWZ1dik7CiAgICAgICAgfQogICAgfSBlbHNlIGlmKHNoYXBlID09IFJPVU5ERURfUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHJvdW5kZWRfcmVjdGFuZ2xlKGZyYWdfdXYsIHZlYzIoMC4yKSwgdmVjMigwLjgpKTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IDEuMDsgLy8gcmVjdGFuZ2xlKGZfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBUUklBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSB0cmlhbmdsZShmcmFnX3V2KTsKCiAgICBzaWduZWRfZGlzdGFuY2UgKj0gZnJhZ191dnNjYWxlOwoKCiAgICBmbG9hdCBzdHJva2Vfd2lkdGggPSBnZXRfc3Ryb2tld2lkdGgoKSAqIGdldF9weF9wZXJfdW5pdCgpOwogICAgZmxvYXQgaW5zaWRlX3N0YXJ0ID0gbWF4KC1zdHJva2Vfd2lkdGgsIDAuMCk7CiAgICBmbG9hdCBpbnNpZGUgPSBhYXN0ZXAoaW5zaWRlX3N0YXJ0LCBzaWduZWRfZGlzdGFuY2UpOwoKICAgIHZlYzQgZmluYWxfY29sb3IgPSB2ZWM0KGZyYWdfY29sb3IueHl6LCAwKTsKICAgIGZpbGwoaW1hZ2UsIGZyYWdfY29sb3IsIGZyYWdfdXYsIGluc2lkZSwgZmluYWxfY29sb3IpOwogICAgc3Ryb2tlKGdldF9zdHJva2Vjb2xvcigpLCBzaWduZWRfZGlzdGFuY2UsIC1zdHJva2Vfd2lkdGgsIGZpbmFsX2NvbG9yKTsKICAgIGdsb3coZ2V0X2dsb3djb2xvcigpLCBzaWduZWRfZGlzdGFuY2UsIGFhc3RlcCgtc3Ryb2tlX3dpZHRoLCBzaWduZWRfZGlzdGFuY2UpLCBmaW5hbF9jb2xvcik7CgogICAgLy8gZGVidWcgLSBzaG93IGJhY2tncm91bmQKICAgIC8vIGZpbmFsX2NvbG9yLmEgPSBjbGFtcChmaW5hbF9jb2xvci5hLCAwLjAsIDEuMCk7CiAgICAvLyBmaW5hbF9jb2xvciA9IHZlYzQoCiAgICAvLyAgICAgdmVjMygxLDAsMCkgKiAoMS4wIC0gZmluYWxfY29sb3IuYSkgKyBmaW5hbF9jb2xvci5yZ2IgKiBmaW5hbF9jb2xvci5hLAogICAgLy8gICAgIDAuNCArIDAuNiAqIGZpbmFsX2NvbG9yLmEKICAgIC8vICk7CgogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZmluYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCgogICAgaWYgKGZpbmFsX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmaW5hbF9jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4ercXVhZF9vZmZzZXSCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXqm1hcmtlcnNpemWCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXrW1hcmtlcl9vZmZzZXSCq3R5cGVfbGVuZ3RoA6RmbGF0xwAXpWNvbG9ygqt0eXBlX2xlbmd0aASkZmxhdMcAF691dl9vZmZzZXRfd2lkdGiCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXo3Bvc4KrdHlwZV9sZW5ndGgDpGZsYXTHABepcm90YXRpb25zgqt0eXBlX2xlbmd0aASkZmxhdMcAF4indmlzaWJsZccHaKY5NDgwMTOkbmFtZdkhbGluZXNlZ21lbnRzLTE4MjkwNDg4MDA3MjE2MDI0MDc3qmF0dHJpYnV0ZXODpWNvbG9yxwdopjk0ODEyN6lsaW5lcG9pbnTHB2imOTQ4MTI2qWxpbmV3aWR0aMcHaKY5NDgxMjikdXVpZLQxODI5MDQ4ODAwNzIxNjAyNDA3N6ljYW1fc3BhY2WlcGl4ZWypcGxvdF90eXBlrGxpbmVzZWdtZW50c691bmlmb3JtX3VwZGF0ZXLHB2imOTQ4MTI5qHVuaWZvcm1zhqdwaWNraW5nwqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAKdsb3djbGlw2BcAAAAAAAAAAAAAAAAAAAAAqGhpZ2hjbGlw2BcAAAAAAAAAAAAAAAAAAAAAqW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAIindmlzaWJsZccHaKY5NDc4NjmkbmFtZblsaW5lcy05OTcyNTg1NDQ4OTI0NjgyOTE5qmF0dHJpYnV0ZXOCpWNvbG9yxwdopjk0ODEzM6lsaW5lcG9pbnTHB2imOTQ4MTMypHV1aWSzOTk3MjU4NTQ0ODkyNDY4MjkxOaljYW1fc3BhY2WkZGF0YalwbG90X3R5cGWlbGluZXOvdW5pZm9ybV91cGRhdGVyxwdopjk0ODEzNKh1bmlmb3Jtc4incGlja2luZ8KtbGluZXdpZHRoX2VuZMo/gAAApW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAAp2xvd2NsaXDYFwAAAAAAAAAAAAAAAAAAAACvbGluZXdpZHRoX3N0YXJ0yj+AAACoaGlnaGNsaXDYFwAAAAAAAAAAAAAAAAAAAACpbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAAr2JhY2tncm91bmRjb2xvcscHaKY5NDgwODO1Y2FtZXJhX3JlbGF0aXZlX2xpZ2h0w6hjaGlsZHJlbpCndmlzaWJsZccHaKY5NDU4NTm1YmFja2dyb3VuZGNvbG9yX2FscGhhxwdopjk0ODA4NKZjYW1lcmHHB2imOTQ4MDg1r2xpZ2h0X2RpcmVjdGlvbscHaKY5NDU5MTOqY2xlYXJzY2VuZccHaKY5NDU4NTikdXVpZLM2OTUzMTc0MjA4MTMyNzg1Nzk4qHZpZXdwb3J0xwdopjk0ODA4MqtjYW0zZF9zdGF0ZcCndmlzaWJsZccHaKY5NDU2NjK1YmFja2dyb3VuZGNvbG9yX2FscGhhxwdopjk0ODEzNqZjYW1lcmHHB2imOTQ4MTM3r2xpZ2h0X2RpcmVjdGlvbscHaKY5NDU3MTeqY2xlYXJzY2VuZccHaKY5NDU2NjGkdXVpZLM2NjEwMzM2OTE1MzkyOTI4NDQ3qHZpZXdwb3J0xwdopjk0ODA4MatjYW0zZF9zdGF0ZcCndmlzaWJsZccHaKY5NDU0NzW1YmFja2dyb3VuZGNvbG9yX2FscGhhxwdopjk0ODUyMaZjYW1lcmHHB2imOTQ4NTIyr2xpZ2h0X2RpcmVjdGlvbscHaKY5NDU1NzOqY2xlYXJzY2VuZccHaKY5NDU1NjmkdXVpZLMxNTk3NjAwMDc3MDMwMDg1MjcxqHZpZXdwb3J0xwdopjk0ODA4MKtjYW0zZF9zdGF0ZcDbABOHOygoKSA9PiB7CiAgICAgICAgICAgIGlmICghd2luZG93LkJPTklUT19JTVBPUlRTKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuQk9OSVRPX0lNUE9SVFMgPSB7fTsKICAgICAgICAgICAgfQogICAgICAgICAgICBCT05JVE9fSU1QT1JUU1snY2M0YzZhYTZhMWYwNmExYjUwMTNiY2EwMTcwMmYzNmExODRjMDQzOS13Z2xtYWtpZS5qcyddID0gYGRhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdDtiYXNlNjQsTHk4Z1pHVnVieTFtYlhRdGFXZHViM0psTFdacGJHVUtMeThnWkdWdWJ5MXNhVzUwTFdsbmJtOXlaUzFtYVd4bENpOHZJRlJvYVhNZ1kyOWtaU0IzWVhNZ1luVnVaR3hsWkNCMWMybHVaeUJnWkdWdWJ5QmlkVzVrYkdWZ0lHRnVaQ0JwZENkeklHNXZkQ0J5WldOdmJXMWxibVJsWkNCMGJ5QmxaR2wwSUdsMElHMWhiblZoYkd4NUNncDJZWElnU0dNZ1BTQWlNVFUzSWl3Z2VuZ2dQU0I3Q2lBZ0lDQk1SVVpVT2lBd0xBb2dJQ0FnVFVsRVJFeEZPaUF4TEFvZ0lDQWdVa2xIU0ZRNklESXNDaUFnSUNCU1QxUkJWRVU2SURBc0NpQWdJQ0JFVDB4TVdUb2dNU3dLSUNBZ0lGQkJUam9nTWdwOUxDQldlQ0E5SUhzS0lDQWdJRkpQVkVGVVJUb2dNQ3dLSUNBZ0lGQkJUam9nTVN3S0lDQWdJRVJQVEV4WlgxQkJUam9nTWl3S0lDQWdJRVJQVEV4WlgxSlBWRUZVUlRvZ013cDlMQ0JyWkNBOUlEQXNJSEpzSUQwZ01Td2dTR1FnUFNBeUxDQnJlQ0E5SURNc0lFaDRJRDBnTUN3Z1kyUWdQU0F4TENCSFpDQTlJRElzSUhCdUlEMGdNeXdnUW00Z1BTQXdMQ0JHZENBOUlERXNJR2R1SUQwZ01pd2dSM2dnUFNBeUxDQkViaUE5SURBc0lGZHBJRDBnTVN3Z1lXd2dQU0F5TENCdmJDQTlJRE1zSUdOc0lEMGdOQ3dnVjJRZ1BTQTFMQ0JDYVNBOUlERXdNQ3dnV0dRZ1BTQXhNREVzSUhGa0lEMGdNVEF5TENCc2JDQTlJREV3TXl3Z2FHd2dQU0F4TURRc0lGbGtJRDBnTWpBd0xDQmFaQ0E5SURJd01Td2dTbVFnUFNBeU1ESXNJQ1JrSUQwZ01qQXpMQ0JzWkNBOUlESXdOQ3dnYUdRZ1BTQXlNRFVzSUV0a0lEMGdNakEyTENCUlpDQTlJREl3Tnl3Z2FtUWdQU0F5TURnc0lHVm1JRDBnTWpBNUxDQjBaaUE5SURJeE1Dd2dibVlnUFNBd0xDQnpaaUE5SURFc0lISm1JRDBnTWl3Z2RXOGdQU0F6TENCaFppQTlJRFFzSUc5bUlEMGdOU3dnWTJZZ1BTQTJMQ0JzWmlBOUlEY3NJSGhoSUQwZ01Dd2dhR1lnUFNBeExDQjFaaUE5SURJc0lFNXVJRDBnTUN3Z1pHWWdQU0F4TENCbVppQTlJRElzSUhCbUlEMGdNeXdnYldZZ1BTQTBMQ0JuWmlBOUlEVXNJRWRqSUQwZ016QXdMQ0I2YmlBOUlETXdNU3dnWTJrZ1BTQXpNRElzSUVseUlEMGdNekF6TENCVmNpQTlJRE13TkN3Z1ZuTWdQU0F6TURZc0lFUnlJRDBnTVdVekxDQkpkQ0E5SURFd01ERXNJRTV5SUQwZ01UQXdNaXdnY0hRZ1BTQXhNREF6TENCbWJ5QTlJREV3TURRc0lGZDRJRDBnTVRBd05Dd2dUSElnUFNBeE1EQTFMQ0JZZUNBOUlERXdNRFVzSUcxMElEMGdNVEF3Tml3Z2RXUWdQU0F4TURBM0xDQnhlQ0E5SURFd01EY3NJR3hwSUQwZ01UQXdPQ3dnV1hnZ1BTQXhNREE0TENCUGJpQTlJREV3TURrc0lGOW1JRDBnTVRBeE1Dd2dlR1lnUFNBeE1ERXhMQ0JYWXlBOUlERXdNVElzSUdSa0lEMGdNVEF4TXl3Z1RHNGdQU0F4TURFMExDQjRiaUE5SURFd01UVXNJRlJ6SUQwZ01UQXhOaXdnWm1RZ1BTQXhNREUzTENCd1pDQTlJREV3TVRnc0lHbHBJRDBnTVRBeU1Dd2dkbVlnUFNBeE1ESXhMQ0JYZENBOUlERXdNak1zSUhsbUlEMGdNVEF5TkN3Z1RXWWdQU0F4TURJMUxDQnphU0E5SURFd01qWXNJRmxwSUQwZ01UQXlOeXdnVTJZZ1BTQXhNREk0TENCdFpDQTlJREV3TWprc0lHSm1JRDBnTVRBek1Dd2daMlFnUFNBeE1ETXhMQ0JmWkNBOUlERXdNek1zSUhkaElEMGdNek0zTnpZc0lFRmhJRDBnTXpNM056Y3NJRkpoSUQwZ016TTNOemdzSUVOaElEMGdNek0zTnprc0lIVnNJRDBnTXpVNE5EQXNJR1JzSUQwZ016VTROREVzSUdac0lEMGdNelU0TkRJc0lIQnNJRDBnTXpVNE5ETXNJRVZtSUQwZ016WXhPVFlzSUcxc0lEMGdNemMwT1RJc0lHZHNJRDBnTXpjME9UWXNJRjlzSUQwZ016YzRNRGdzSUhoc0lEMGdNemM0TURrc0lIWnNJRDBnTXpjNE1UQXNJSGxzSUQwZ016YzRNVEVzSUUxc0lEMGdNemM0TVRJc0lGTnNJRDBnTXpjNE1UTXNJR0pzSUQwZ016YzRNVFFzSUVWc0lEMGdNemM0TVRVc0lGUnNJRDBnTXpjNE1UWXNJSGRzSUQwZ016YzRNVGNzSUVGc0lEMGdNemM0TVRnc0lGSnNJRDBnTXpjNE1Ua3NJRU5zSUQwZ016YzRNakFzSUZCc0lEMGdNemM0TWpFc0lGQmhJRDBnTXpZME9USXNJRXhzSUQwZ016WTBPVFFzSUVsc0lEMGdNelkwT1RVc0lGUm1JRDBnTXpZeU9ETXNJRlZzSUQwZ016WXlPRFFzSUVSc0lEMGdNell5T0RVc0lFNXNJRDBnTXpZeU9EWXNJSGRtSUQwZ01qSXdNQ3dnUVdZZ1BTQXlNakF4TENCU1ppQTlJREl5TURJc0lFOXlJRDBnTWpNd01Dd2dSbklnUFNBeU16QXhMQ0JNWVNBOUlESXpNRElzSUhwcElEMGdNalF3TUN3Z1Zta2dQU0F5TkRBeExDQkNjaUE5SURJME1ESXNJRmhqSUQwZ01qVXdNQ3dnZUdRZ1BTQXlOVEF4TENCYWVDQTlJREFzSUVwNElEMGdNU3dnSkhnZ1BTQXlMQ0IyWkNBOUlETmxNeXdnY21rZ1BTQXpNREF4TENCRFppQTlJRE15TURBc0lGQm1JRDBnTXpJd01Td2diV2tnUFNBd0xDQk1aaUE5SURFc0lGaDBJRDBnSWlJc0lIWjBJRDBnSW5OeVoySWlMQ0JOYmlBOUlDSnpjbWRpTFd4cGJtVmhjaUlzSUhGaklEMGdJbVJwYzNCc1lYa3RjRE1pTENCMllTQTlJQ0prYVhOd2JHRjVMWEF6TFd4cGJtVmhjaUlzSUhweUlEMGdJbXhwYm1WaGNpSXNJRzUwSUQwZ0luTnlaMklpTENCV2NpQTlJQ0p5WldNM01Ea2lMQ0JyY2lBOUlDSndNeUlzSUV0NElEMGdNQ3dnU1dFZ1BTQTNOamd3TENCUmVDQTlJRGMyT0RFc0lHcDRJRDBnTnpZNE1pd2daWFlnUFNBM05qZ3pMQ0IwZGlBOUlETTBNRFUxTENCdWRpQTlJRE0wTURVMkxDQnBkaUE5SURVek9EWXNJSE4ySUQwZ05URXlMQ0J5ZGlBOUlEVXhNeXdnWVhZZ1BTQTFNVFFzSUc5MklEMGdOVEUxTENCamRpQTlJRFV4Tml3Z2JIWWdQU0ExTVRjc0lHaDJJRDBnTlRFNExDQkpaaUE5SURVeE9Td2dWV1lnUFNBMU1USXNJRVJtSUQwZ05URXpMQ0JPWmlBOUlEVXhOQ3dnVDJZZ1BTQTFNVFVzSUVabUlEMGdOVEUyTENCQ1ppQTlJRFV4Tnl3Z2VtWWdQU0ExTVRnc0lGWm1JRDBnTlRFNUxDQkljaUE5SURNMU1EUTBMQ0IxZGlBOUlETTFNRFE0TENCa2RpQTlJRE0xTURRd0xDQm1kaUE5SURNMU1EUTFMQ0J3ZGlBOUlETTFNRFE1TENCdGRpQTlJRE0xTURReExDQm5kaUE5SURNMU1EUTJMQ0JmZGlBOUlETTFNRFV3TENCNGRpQTlJRE0xTURReUxDQjJkaUE5SUNJeE1EQWlMQ0JQYkNBOUlDSXpNREFnWlhNaUxDQndieUE5SURFd016VXNJSFp1SUQwZ01tVXpMQ0JIY2lBOUlESXdNREVzSUhOdUlEMGdZMnhoYzNNZ2V3b2dJQ0FnWVdSa1JYWmxiblJNYVhOMFpXNWxjaWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHbHpkR1Z1WlhKeklEMDlQU0IyYjJsa0lEQWdKaVlnS0hSb2FYTXVYMnhwYzNSbGJtVnljeUE5SUh0OUtUc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WDJ4cGMzUmxibVZ5Y3pzS0lDQWdJQ0FnSUNCdVcyVmRJRDA5UFNCMmIybGtJREFnSmlZZ0tHNWJaVjBnUFNCYlhTa3NJRzViWlYwdWFXNWtaWGhQWmloMEtTQTlQVDBnTFRFZ0ppWWdibHRsWFM1d2RYTm9LSFFwT3dvZ0lDQWdmUW9nSUNBZ2FHRnpSWFpsYm5STWFYTjBaVzVsY2lobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJ4cGMzUmxibVZ5Y3lBOVBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z0lURTdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TGw5c2FYTjBaVzVsY25NN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1YlpWMGdJVDA5SUhadmFXUWdNQ0FtSmlCdVcyVmRMbWx1WkdWNFQyWW9kQ2tnSVQwOUlDMHhPd29nSUNBZ2ZRb2dJQ0FnY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJ4cGMzUmxibVZ5Y3lBOVBUMGdkbTlwWkNBd0tTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMbDlzYVhOMFpXNWxjbk5iWlYwN0NpQWdJQ0FnSUNBZ2FXWWdLR2tnSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJR2t1YVc1a1pYaFBaaWgwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjaUFoUFQwZ0xURWdKaVlnYVM1emNHeHBZMlVvY2l3Z01TazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWkdsemNHRjBZMmhGZG1WdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJ4cGMzUmxibVZ5Y3lBOVBUMGdkbTlwWkNBd0tTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbDlzYVhOMFpXNWxjbk5iWlM1MGVYQmxYVHNLSUNBZ0lDQWdJQ0JwWmlBb2JpQWhQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVXVkR0Z5WjJWMElEMGdkR2hwY3pzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVMbk5zYVdObEtEQXBPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhJZ1BTQXdMQ0JoSUQwZ2FTNXNaVzVuZEdnN0lISWdQQ0JoT3lCeUt5c3BhVnR5WFM1allXeHNLSFJvYVhNc0lHVXBPd29nSUNBZ0lDQWdJQ0FnSUNCbExuUmhjbWRsZENBOUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUXA5TENCRmRDQTlJRnNLSUNBZ0lDSXdNQ0lzQ2lBZ0lDQWlNREVpTEFvZ0lDQWdJakF5SWl3S0lDQWdJQ0l3TXlJc0NpQWdJQ0FpTURRaUxBb2dJQ0FnSWpBMUlpd0tJQ0FnSUNJd05pSXNDaUFnSUNBaU1EY2lMQW9nSUNBZ0lqQTRJaXdLSUNBZ0lDSXdPU0lzQ2lBZ0lDQWlNR0VpTEFvZ0lDQWdJakJpSWl3S0lDQWdJQ0l3WXlJc0NpQWdJQ0FpTUdRaUxBb2dJQ0FnSWpCbElpd0tJQ0FnSUNJd1ppSXNDaUFnSUNBaU1UQWlMQW9nSUNBZ0lqRXhJaXdLSUNBZ0lDSXhNaUlzQ2lBZ0lDQWlNVE1pTEFvZ0lDQWdJakUwSWl3S0lDQWdJQ0l4TlNJc0NpQWdJQ0FpTVRZaUxBb2dJQ0FnSWpFM0lpd0tJQ0FnSUNJeE9DSXNDaUFnSUNBaU1Ua2lMQW9nSUNBZ0lqRmhJaXdLSUNBZ0lDSXhZaUlzQ2lBZ0lDQWlNV01pTEFvZ0lDQWdJakZrSWl3S0lDQWdJQ0l4WlNJc0NpQWdJQ0FpTVdZaUxBb2dJQ0FnSWpJd0lpd0tJQ0FnSUNJeU1TSXNDaUFnSUNBaU1qSWlMQW9nSUNBZ0lqSXpJaXdLSUNBZ0lDSXlOQ0lzQ2lBZ0lDQWlNalVpTEFvZ0lDQWdJakkySWl3S0lDQWdJQ0l5TnlJc0NpQWdJQ0FpTWpnaUxBb2dJQ0FnSWpJNUlpd0tJQ0FnSUNJeVlTSXNDaUFnSUNBaU1tSWlMQW9nSUNBZ0lqSmpJaXdLSUNBZ0lDSXlaQ0lzQ2lBZ0lDQWlNbVVpTEFvZ0lDQWdJakptSWl3S0lDQWdJQ0l6TUNJc0NpQWdJQ0FpTXpFaUxBb2dJQ0FnSWpNeUlpd0tJQ0FnSUNJek15SXNDaUFnSUNBaU16UWlMQW9nSUNBZ0lqTTFJaXdLSUNBZ0lDSXpOaUlzQ2lBZ0lDQWlNemNpTEFvZ0lDQWdJak00SWl3S0lDQWdJQ0l6T1NJc0NpQWdJQ0FpTTJFaUxBb2dJQ0FnSWpOaUlpd0tJQ0FnSUNJell5SXNDaUFnSUNBaU0yUWlMQW9nSUNBZ0lqTmxJaXdLSUNBZ0lDSXpaaUlzQ2lBZ0lDQWlOREFpTEFvZ0lDQWdJalF4SWl3S0lDQWdJQ0kwTWlJc0NpQWdJQ0FpTkRNaUxBb2dJQ0FnSWpRMElpd0tJQ0FnSUNJME5TSXNDaUFnSUNBaU5EWWlMQW9nSUNBZ0lqUTNJaXdLSUNBZ0lDSTBPQ0lzQ2lBZ0lDQWlORGtpTEFvZ0lDQWdJalJoSWl3S0lDQWdJQ0kwWWlJc0NpQWdJQ0FpTkdNaUxBb2dJQ0FnSWpSa0lpd0tJQ0FnSUNJMFpTSXNDaUFnSUNBaU5HWWlMQW9nSUNBZ0lqVXdJaXdLSUNBZ0lDSTFNU0lzQ2lBZ0lDQWlOVElpTEFvZ0lDQWdJalV6SWl3S0lDQWdJQ0kxTkNJc0NpQWdJQ0FpTlRVaUxBb2dJQ0FnSWpVMklpd0tJQ0FnSUNJMU55SXNDaUFnSUNBaU5UZ2lMQW9nSUNBZ0lqVTVJaXdLSUNBZ0lDSTFZU0lzQ2lBZ0lDQWlOV0lpTEFvZ0lDQWdJalZqSWl3S0lDQWdJQ0kxWkNJc0NpQWdJQ0FpTldVaUxBb2dJQ0FnSWpWbUlpd0tJQ0FnSUNJMk1DSXNDaUFnSUNBaU5qRWlMQW9nSUNBZ0lqWXlJaXdLSUNBZ0lDSTJNeUlzQ2lBZ0lDQWlOalFpTEFvZ0lDQWdJalkxSWl3S0lDQWdJQ0kyTmlJc0NpQWdJQ0FpTmpjaUxBb2dJQ0FnSWpZNElpd0tJQ0FnSUNJMk9TSXNDaUFnSUNBaU5tRWlMQW9nSUNBZ0lqWmlJaXdLSUNBZ0lDSTJZeUlzQ2lBZ0lDQWlObVFpTEFvZ0lDQWdJalpsSWl3S0lDQWdJQ0kyWmlJc0NpQWdJQ0FpTnpBaUxBb2dJQ0FnSWpjeElpd0tJQ0FnSUNJM01pSXNDaUFnSUNBaU56TWlMQW9nSUNBZ0lqYzBJaXdLSUNBZ0lDSTNOU0lzQ2lBZ0lDQWlOellpTEFvZ0lDQWdJamMzSWl3S0lDQWdJQ0kzT0NJc0NpQWdJQ0FpTnpraUxBb2dJQ0FnSWpkaElpd0tJQ0FnSUNJM1lpSXNDaUFnSUNBaU4yTWlMQW9nSUNBZ0lqZGtJaXdLSUNBZ0lDSTNaU0lzQ2lBZ0lDQWlOMllpTEFvZ0lDQWdJamd3SWl3S0lDQWdJQ0k0TVNJc0NpQWdJQ0FpT0RJaUxBb2dJQ0FnSWpneklpd0tJQ0FnSUNJNE5DSXNDaUFnSUNBaU9EVWlMQW9nSUNBZ0lqZzJJaXdLSUNBZ0lDSTROeUlzQ2lBZ0lDQWlPRGdpTEFvZ0lDQWdJamc1SWl3S0lDQWdJQ0k0WVNJc0NpQWdJQ0FpT0dJaUxBb2dJQ0FnSWpoaklpd0tJQ0FnSUNJNFpDSXNDaUFnSUNBaU9HVWlMQW9nSUNBZ0lqaG1JaXdLSUNBZ0lDSTVNQ0lzQ2lBZ0lDQWlPVEVpTEFvZ0lDQWdJamt5SWl3S0lDQWdJQ0k1TXlJc0NpQWdJQ0FpT1RRaUxBb2dJQ0FnSWprMUlpd0tJQ0FnSUNJNU5pSXNDaUFnSUNBaU9UY2lMQW9nSUNBZ0lqazRJaXdLSUNBZ0lDSTVPU0lzQ2lBZ0lDQWlPV0VpTEFvZ0lDQWdJamxpSWl3S0lDQWdJQ0k1WXlJc0NpQWdJQ0FpT1dRaUxBb2dJQ0FnSWpsbElpd0tJQ0FnSUNJNVppSXNDaUFnSUNBaVlUQWlMQW9nSUNBZ0ltRXhJaXdLSUNBZ0lDSmhNaUlzQ2lBZ0lDQWlZVE1pTEFvZ0lDQWdJbUUwSWl3S0lDQWdJQ0poTlNJc0NpQWdJQ0FpWVRZaUxBb2dJQ0FnSW1FM0lpd0tJQ0FnSUNKaE9DSXNDaUFnSUNBaVlUa2lMQW9nSUNBZ0ltRmhJaXdLSUNBZ0lDSmhZaUlzQ2lBZ0lDQWlZV01pTEFvZ0lDQWdJbUZrSWl3S0lDQWdJQ0poWlNJc0NpQWdJQ0FpWVdZaUxBb2dJQ0FnSW1Jd0lpd0tJQ0FnSUNKaU1TSXNDaUFnSUNBaVlqSWlMQW9nSUNBZ0ltSXpJaXdLSUNBZ0lDSmlOQ0lzQ2lBZ0lDQWlZalVpTEFvZ0lDQWdJbUkySWl3S0lDQWdJQ0ppTnlJc0NpQWdJQ0FpWWpnaUxBb2dJQ0FnSW1JNUlpd0tJQ0FnSUNKaVlTSXNDaUFnSUNBaVltSWlMQW9nSUNBZ0ltSmpJaXdLSUNBZ0lDSmlaQ0lzQ2lBZ0lDQWlZbVVpTEFvZ0lDQWdJbUptSWl3S0lDQWdJQ0pqTUNJc0NpQWdJQ0FpWXpFaUxBb2dJQ0FnSW1NeUlpd0tJQ0FnSUNKak15SXNDaUFnSUNBaVl6UWlMQW9nSUNBZ0ltTTFJaXdLSUNBZ0lDSmpOaUlzQ2lBZ0lDQWlZemNpTEFvZ0lDQWdJbU00SWl3S0lDQWdJQ0pqT1NJc0NpQWdJQ0FpWTJFaUxBb2dJQ0FnSW1OaUlpd0tJQ0FnSUNKall5SXNDaUFnSUNBaVkyUWlMQW9nSUNBZ0ltTmxJaXdLSUNBZ0lDSmpaaUlzQ2lBZ0lDQWlaREFpTEFvZ0lDQWdJbVF4SWl3S0lDQWdJQ0prTWlJc0NpQWdJQ0FpWkRNaUxBb2dJQ0FnSW1RMElpd0tJQ0FnSUNKa05TSXNDaUFnSUNBaVpEWWlMQW9nSUNBZ0ltUTNJaXdLSUNBZ0lDSmtPQ0lzQ2lBZ0lDQWlaRGtpTEFvZ0lDQWdJbVJoSWl3S0lDQWdJQ0prWWlJc0NpQWdJQ0FpWkdNaUxBb2dJQ0FnSW1Sa0lpd0tJQ0FnSUNKa1pTSXNDaUFnSUNBaVpHWWlMQW9nSUNBZ0ltVXdJaXdLSUNBZ0lDSmxNU0lzQ2lBZ0lDQWlaVElpTEFvZ0lDQWdJbVV6SWl3S0lDQWdJQ0psTkNJc0NpQWdJQ0FpWlRVaUxBb2dJQ0FnSW1VMklpd0tJQ0FnSUNKbE55SXNDaUFnSUNBaVpUZ2lMQW9nSUNBZ0ltVTVJaXdLSUNBZ0lDSmxZU0lzQ2lBZ0lDQWlaV0lpTEFvZ0lDQWdJbVZqSWl3S0lDQWdJQ0psWkNJc0NpQWdJQ0FpWldVaUxBb2dJQ0FnSW1WbUlpd0tJQ0FnSUNKbU1DSXNDaUFnSUNBaVpqRWlMQW9nSUNBZ0ltWXlJaXdLSUNBZ0lDSm1NeUlzQ2lBZ0lDQWlaalFpTEFvZ0lDQWdJbVkxSWl3S0lDQWdJQ0ptTmlJc0NpQWdJQ0FpWmpjaUxBb2dJQ0FnSW1ZNElpd0tJQ0FnSUNKbU9TSXNDaUFnSUNBaVptRWlMQW9nSUNBZ0ltWmlJaXdLSUNBZ0lDSm1ZeUlzQ2lBZ0lDQWlabVFpTEFvZ0lDQWdJbVpsSWl3S0lDQWdJQ0ptWmlJS1hTd2dSbXdnUFNBeE1qTTBOVFkzTENCaGFTQTlJRTFoZEdndVVFa2dMeUF4T0RBc0lGcHBJRDBnTVRnd0lDOGdUV0YwYUM1UVNUc0tablZ1WTNScGIyNGdhM1FvS1NCN0NpQWdJQ0JzWlhRZ2N6RWdQU0JOWVhSb0xuSmhibVJ2YlNncElDb2dOREk1TkRrMk56STVOU0I4SURBc0lHVWdQU0JOWVhSb0xuSmhibVJ2YlNncElDb2dOREk1TkRrMk56STVOU0I4SURBc0lIUWdQU0JOWVhSb0xuSmhibVJ2YlNncElDb2dOREk1TkRrMk56STVOU0I4SURBc0lHNGdQU0JOWVhSb0xuSmhibVJ2YlNncElDb2dOREk1TkRrMk56STVOU0I4SURBN0NpQWdJQ0J5WlhSMWNtNGdLRVYwVzNNeElDWWdNalUxWFNBcklFVjBXM014SUQ0K0lEZ2dKaUF5TlRWZElDc2dSWFJiY3pFZ1BqNGdNVFlnSmlBeU5UVmRJQ3NnUlhSYmN6RWdQajRnTWpRZ0ppQXlOVFZkSUNzZ0lpMGlJQ3NnUlhSYlpTQW1JREkxTlYwZ0t5QkZkRnRsSUQ0K0lEZ2dKaUF5TlRWZElDc2dJaTBpSUNzZ1JYUmJaU0ErUGlBeE5pQW1JREUxSUh3Z05qUmRJQ3NnUlhSYlpTQStQaUF5TkNBbUlESTFOVjBnS3lBaUxTSWdLeUJGZEZ0MElDWWdOak1nZkNBeE1qaGRJQ3NnUlhSYmRDQStQaUE0SUNZZ01qVTFYU0FySUNJdElpQXJJRVYwVzNRZ1BqNGdNVFlnSmlBeU5UVmRJQ3NnUlhSYmRDQStQaUF5TkNBbUlESTFOVjBnS3lCRmRGdHVJQ1lnTWpVMVhTQXJJRVYwVzI0Z1BqNGdPQ0FtSURJMU5WMGdLeUJGZEZ0dUlENCtJREUySUNZZ01qVTFYU0FySUVWMFcyNGdQajRnTWpRZ0ppQXlOVFZkS1M1MGIweHZkMlZ5UTJGelpTZ3BPd3A5Q21aMWJtTjBhVzl1SUdOMEtITXhMQ0JsTENCMEtTQjdDaUFnSUNCeVpYUjFjbTRnVFdGMGFDNXRZWGdvWlN3Z1RXRjBhQzV0YVc0b2RDd2djekVwS1RzS2ZRcG1kVzVqZEdsdmJpQlpZeWh6TVN3Z1pTa2dld29nSUNBZ2NtVjBkWEp1SUNoek1TQWxJR1VnS3lCbEtTQWxJR1U3Q24wS1puVnVZM1JwYjI0Z2EyWW9jekVzSUdVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUhKbGRIVnliaUJ1SUNzZ0tITXhJQzBnWlNrZ0tpQW9hU0F0SUc0cElDOGdLSFFnTFNCbEtUc0tmUXBtZFc1amRHbHZiaUJJWmloek1Td2daU3dnZENrZ2V3b2dJQ0FnY21WMGRYSnVJSE14SUNFOVBTQmxJRDhnS0hRZ0xTQnpNU2tnTHlBb1pTQXRJSE14S1NBNklEQTdDbjBLWm5WdVkzUnBiMjRnZVhNb2N6RXNJR1VzSUhRcElIc0tJQ0FnSUhKbGRIVnliaUFvTVNBdElIUXBJQ29nY3pFZ0t5QjBJQ29nWlRzS2ZRcG1kVzVqZEdsdmJpQkhaaWh6TVN3Z1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnY21WMGRYSnVJSGx6S0hNeExDQmxMQ0F4SUMwZ1RXRjBhQzVsZUhBb0xYUWdLaUJ1S1NrN0NuMEtablZ1WTNScGIyNGdWMllvY3pFc0lHVWdQU0F4S1NCN0NpQWdJQ0J5WlhSMWNtNGdaU0F0SUUxaGRHZ3VZV0p6S0ZsaktITXhMQ0JsSUNvZ01pa2dMU0JsS1RzS2ZRcG1kVzVqZEdsdmJpQllaaWh6TVN3Z1pTd2dkQ2tnZXdvZ0lDQWdjbVYwZFhKdUlITXhJRHc5SUdVZ1B5QXdJRG9nY3pFZ1BqMGdkQ0EvSURFZ09pQW9jekVnUFNBb2N6RWdMU0JsS1NBdklDaDBJQzBnWlNrc0lITXhJQ29nY3pFZ0tpQW9NeUF0SURJZ0tpQnpNU2twT3dwOUNtWjFibU4wYVc5dUlIRm1LSE14TENCbExDQjBLU0I3Q2lBZ0lDQnlaWFIxY200Z2N6RWdQRDBnWlNBL0lEQWdPaUJ6TVNBK1BTQjBJRDhnTVNBNklDaHpNU0E5SUNoek1TQXRJR1VwSUM4Z0tIUWdMU0JsS1N3Z2N6RWdLaUJ6TVNBcUlITXhJQ29nS0hNeElDb2dLSE14SUNvZ05pQXRJREUxS1NBcklERXdLU2s3Q24wS1puVnVZM1JwYjI0Z1dXWW9jekVzSUdVcElIc0tJQ0FnSUhKbGRIVnliaUJ6TVNBcklFMWhkR2d1Wm14dmIzSW9UV0YwYUM1eVlXNWtiMjBvS1NBcUlDaGxJQzBnY3pFZ0t5QXhLU2s3Q24wS1puVnVZM1JwYjI0Z1dtWW9jekVzSUdVcElIc0tJQ0FnSUhKbGRIVnliaUJ6TVNBcklFMWhkR2d1Y21GdVpHOXRLQ2tnS2lBb1pTQXRJSE14S1RzS2ZRcG1kVzVqZEdsdmJpQktaaWh6TVNrZ2V3b2dJQ0FnY21WMGRYSnVJSE14SUNvZ0tDNDFJQzBnVFdGMGFDNXlZVzVrYjIwb0tTazdDbjBLWm5WdVkzUnBiMjRnSkdZb2N6RXBJSHNLSUNBZ0lITXhJQ0U5UFNCMmIybGtJREFnSmlZZ0tFWnNJRDBnY3pFcE93b2dJQ0FnYkdWMElHVWdQU0JHYkNBclBTQXhPRE14TlRZMU9ERXpPd29nSUNBZ2NtVjBkWEp1SUdVZ1BTQk5ZWFJvTG1sdGRXd29aU0JlSUdVZ1BqNCtJREUxTENCbElId2dNU2tzSUdVZ1hqMGdaU0FySUUxaGRHZ3VhVzExYkNobElGNGdaU0ErUGo0Z055d2daU0I4SURZeEtTd2dLQ2hsSUY0Z1pTQStQajRnTVRRcElENCtQaUF3S1NBdklEUXlPVFE1TmpjeU9UWTdDbjBLWm5WdVkzUnBiMjRnUzJZb2N6RXBJSHNLSUNBZ0lISmxkSFZ5YmlCek1TQXFJR0ZwT3dwOUNtWjFibU4wYVc5dUlGRm1LSE14S1NCN0NpQWdJQ0J5WlhSMWNtNGdjekVnS2lCYWFUc0tmUXBtZFc1amRHbHZiaUJ0Ynloek1Ta2dld29nSUNBZ2NtVjBkWEp1SUNoek1TQW1JSE14SUMwZ01Ta2dQVDA5SURBZ0ppWWdjekVnSVQwOUlEQTdDbjBLWm5WdVkzUnBiMjRnZVdRb2N6RXBJSHNLSUNBZ0lISmxkSFZ5YmlCTllYUm9MbkJ2ZHlneUxDQk5ZWFJvTG1ObGFXd29UV0YwYUM1c2IyY29jekVwSUM4Z1RXRjBhQzVNVGpJcEtUc0tmUXBtZFc1amRHbHZiaUJYY2loek1Ta2dld29nSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjRzkzS0RJc0lFMWhkR2d1Wm14dmIzSW9UV0YwYUM1c2IyY29jekVwSUM4Z1RXRjBhQzVNVGpJcEtUc0tmUXBtZFc1amRHbHZiaUJxWmloek1Td2daU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdiR1YwSUhJZ1BTQk5ZWFJvTG1OdmN5d2dZU0E5SUUxaGRHZ3VjMmx1TENCdklEMGdjaWgwSUM4Z01pa3NJR01nUFNCaEtIUWdMeUF5S1N3Z2JDQTlJSElvS0dVZ0t5QnVLU0F2SURJcExDQm9JRDBnWVNnb1pTQXJJRzRwSUM4Z01pa3NJSFVnUFNCeUtDaGxJQzBnYmlrZ0x5QXlLU3dnWkNBOUlHRW9LR1VnTFNCdUtTQXZJRElwTENCbUlEMGdjaWdvYmlBdElHVXBJQzhnTWlrc0lHMGdQU0JoS0NodUlDMGdaU2tnTHlBeUtUc0tJQ0FnSUhOM2FYUmphQ2hwS1hzS0lDQWdJQ0FnSUNCallYTmxJQ0pZV1ZnaU9nb2dJQ0FnSUNBZ0lDQWdJQ0J6TVM1elpYUW9ieUFxSUdnc0lHTWdLaUIxTENCaklDb2daQ3dnYnlBcUlHd3BPd29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0JqWVhObElDSlpXbGtpT2dvZ0lDQWdJQ0FnSUNBZ0lDQnpNUzV6WlhRb1l5QXFJR1FzSUc4Z0tpQm9MQ0JqSUNvZ2RTd2dieUFxSUd3cE93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQmpZWE5sSUNKYVdGb2lPZ29nSUNBZ0lDQWdJQ0FnSUNCek1TNXpaWFFvWXlBcUlIVXNJR01nS2lCa0xDQnZJQ29nYUN3Z2J5QXFJR3dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCallYTmxJQ0pZV2xnaU9nb2dJQ0FnSUNBZ0lDQWdJQ0J6TVM1elpYUW9ieUFxSUdnc0lHTWdLaUJ0TENCaklDb2daaXdnYnlBcUlHd3BPd29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0JqWVhObElDSlpXRmtpT2dvZ0lDQWdJQ0FnSUNBZ0lDQnpNUzV6WlhRb1l5QXFJR1lzSUc4Z0tpQm9MQ0JqSUNvZ2JTd2dieUFxSUd3cE93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQmpZWE5sSUNKYVdWb2lPZ29nSUNBZ0lDQWdJQ0FnSUNCek1TNXpaWFFvWXlBcUlHMHNJR01nS2lCbUxDQnZJQ29nYUN3Z2J5QXFJR3dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMazFoZEdoVmRHbHNjem9nTG5ObGRGRjFZWFJsY201cGIyNUdjbTl0VUhKdmNHVnlSWFZzWlhJb0tTQmxibU52ZFc1MFpYSmxaQ0JoYmlCMWJtdHViM2R1SUc5eVpHVnlPaUFpSUNzZ2FTazdDaUFnSUNCOUNuMEtablZ1WTNScGIyNGdUM1FvY3pFc0lHVXBJSHNLSUNBZ0lITjNhWFJqYUNobExtTnZibk4wY25WamRHOXlLWHNLSUNBZ0lDQWdJQ0JqWVhObElFWnNiMkYwTXpKQmNuSmhlVG9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhNeE93b2dJQ0FnSUNBZ0lHTmhjMlVnVldsdWRETXlRWEp5WVhrNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpNU0F2SURReU9UUTVOamN5T1RVN0NpQWdJQ0FnSUNBZ1kyRnpaU0JWYVc1ME1UWkJjbkpoZVRvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITXhJQzhnTmpVMU16VTdDaUFnSUNBZ0lDQWdZMkZ6WlNCVmFXNTBPRUZ5Y21GNU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjekVnTHlBeU5UVTdDaUFnSUNBZ0lDQWdZMkZ6WlNCSmJuUXpNa0Z5Y21GNU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1dFlYZ29jekVnTHlBeU1UUTNORGd6TmpRM0xDQXRNU2s3Q2lBZ0lDQWdJQ0FnWTJGelpTQkpiblF4TmtGeWNtRjVPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNXRZWGdvY3pFZ0x5QXpNamMyTnl3Z0xURXBPd29nSUNBZ0lDQWdJR05oYzJVZ1NXNTBPRUZ5Y21GNU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1dFlYZ29jekVnTHlBeE1qY3NJQzB4S1RzS0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0lrbHVkbUZzYVdRZ1kyOXRjRzl1Wlc1MElIUjVjR1V1SWlrN0NpQWdJQ0I5Q24wS1puVnVZM1JwYjI0Z1FtVW9jekVzSUdVcElIc0tJQ0FnSUhOM2FYUmphQ2hsTG1OdmJuTjBjblZqZEc5eUtYc0tJQ0FnSUNBZ0lDQmpZWE5sSUVac2IyRjBNekpCY25KaGVUb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE14T3dvZ0lDQWdJQ0FnSUdOaGMyVWdWV2x1ZERNeVFYSnlZWGs2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9Mbkp2ZFc1a0tITXhJQ29nTkRJNU5EazJOekk1TlNrN0NpQWdJQ0FnSUNBZ1kyRnpaU0JWYVc1ME1UWkJjbkpoZVRvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1Y205MWJtUW9jekVnS2lBMk5UVXpOU2s3Q2lBZ0lDQWdJQ0FnWTJGelpTQlZhVzUwT0VGeWNtRjVPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNXliM1Z1WkNoek1TQXFJREkxTlNrN0NpQWdJQ0FnSUNBZ1kyRnpaU0JKYm5Rek1rRnljbUY1T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1RXRjBhQzV5YjNWdVpDaHpNU0FxSURJeE5EYzBPRE0yTkRjcE93b2dJQ0FnSUNBZ0lHTmhjMlVnU1c1ME1UWkJjbkpoZVRvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1Y205MWJtUW9jekVnS2lBek1qYzJOeWs3Q2lBZ0lDQWdJQ0FnWTJGelpTQkpiblE0UVhKeVlYazZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xuSnZkVzVrS0hNeElDb2dNVEkzS1RzS0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0lrbHVkbUZzYVdRZ1kyOXRjRzl1Wlc1MElIUjVjR1V1SWlrN0NpQWdJQ0I5Q24wS2RtRnlJSGwySUQwZ2V3b2dJQ0FnUkVWSE1sSkJSRG9nWVdrc0NpQWdJQ0JTUVVReVJFVkhPaUJhYVN3S0lDQWdJR2RsYm1WeVlYUmxWVlZKUkRvZ2EzUXNDaUFnSUNCamJHRnRjRG9nWTNRc0NpQWdJQ0JsZFdOc2FXUmxZVzVOYjJSMWJHODZJRmxqTEFvZ0lDQWdiV0Z3VEdsdVpXRnlPaUJyWml3S0lDQWdJR2x1ZG1WeWMyVk1aWEp3T2lCSVppd0tJQ0FnSUd4bGNuQTZJSGx6TEFvZ0lDQWdaR0Z0Y0RvZ1IyWXNDaUFnSUNCd2FXNW5jRzl1WnpvZ1YyWXNDaUFnSUNCemJXOXZkR2h6ZEdWd09pQllaaXdLSUNBZ0lITnRiMjkwYUdWeWMzUmxjRG9nY1dZc0NpQWdJQ0J5WVc1a1NXNTBPaUJaWml3S0lDQWdJSEpoYm1SR2JHOWhkRG9nV21Zc0NpQWdJQ0J5WVc1a1JteHZZWFJUY0hKbFlXUTZJRXBtTEFvZ0lDQWdjMlZsWkdWa1VtRnVaRzl0T2lBa1ppd0tJQ0FnSUdSbFoxUnZVbUZrT2lCTFppd0tJQ0FnSUhKaFpGUnZSR1ZuT2lCUlppd0tJQ0FnSUdselVHOTNaWEpQWmxSM2J6b2diVzhzQ2lBZ0lDQmpaV2xzVUc5M1pYSlBabFIzYnpvZ2VXUXNDaUFnSUNCbWJHOXZjbEJ2ZDJWeVQyWlVkMjg2SUZkeUxBb2dJQ0FnYzJWMFVYVmhkR1Z5Ym1sdmJrWnliMjFRY205d1pYSkZkV3hsY2pvZ2FtWXNDaUFnSUNCdWIzSnRZV3hwZW1VNklFSmxMQW9nSUNBZ1pHVnViM0p0WVd4cGVtVTZJRTkwQ24wc0lGb2dQU0JqYkdGemN5QnpNU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ01Dd2dkQ0E5SURBcGV3b2dJQ0FnSUNBZ0lITXhMbkJ5YjNSdmRIbHdaUzVwYzFabFkzUnZjaklnUFNBaE1Dd2dkR2hwY3k1NElEMGdaU3dnZEdocGN5NTVJRDBnZERzS0lDQWdJSDBLSUNBZ0lHZGxkQ0IzYVdSMGFDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NE93b2dJQ0FnZlFvZ0lDQWdjMlYwSUhkcFpIUm9LR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbmdnUFNCbE93b2dJQ0FnZlFvZ0lDQWdaMlYwSUdobGFXZG9kQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTVPd29nSUNBZ2ZRb2dJQ0FnYzJWMElHaGxhV2RvZENobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1NUlEMGdaVHNLSUNBZ0lIMEtJQ0FnSUhObGRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUdVc0lIUm9hWE11ZVNBOUlIUXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJUWTJGc1lYSW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsTENCMGFHbHpMbmtnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBXQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUlpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTVJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFTnZiWEJ2Ym1WdWRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2MzZHBkR05vS0dVcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEQTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5nZ1BTQjBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Ub0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZVNBOUlIUTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnaWFXNWtaWGdnYVhNZ2IzVjBJRzltSUhKaGJtZGxPaUFpSUNzZ1pTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1oyVjBRMjl0Y0c5dVpXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCemQybDBZMmdvWlNsN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Eb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmc3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTVRvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuazdDaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9JbWx1WkdWNElHbHpJRzkxZENCdlppQnlZVzVuWlRvZ0lpQXJJR1VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lHTnNiMjVsS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpaDBhR2x6TG5nc0lIUm9hWE11ZVNrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1pTNTRMQ0IwYUdsekxua2dQU0JsTG5rc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCaFpHUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dLejBnWlM1NExDQjBhR2x6TG5rZ0t6MGdaUzU1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVdSa1UyTmhiR0Z5S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUNzOUlHVXNJSFJvYVhNdWVTQXJQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVdSa1ZtVmpkRzl5Y3lobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR1V1ZUNBcklIUXVlQ3dnZEdocGN5NTVJRDBnWlM1NUlDc2dkQzU1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVdSa1UyTmhiR1ZrVm1WamRHOXlLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUNzOUlHVXVlQ0FxSUhRc0lIUm9hWE11ZVNBclBTQmxMbmtnS2lCMExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MzVmlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJQzA5SUdVdWVDd2dkR2hwY3k1NUlDMDlJR1V1ZVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOMVlsTmpZV3hoY2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBdFBTQmxMQ0IwYUdsekxua2dMVDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOMVlsWmxZM1J2Y25Nb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsTG5nZ0xTQjBMbmdzSUhSb2FYTXVlU0E5SUdVdWVTQXRJSFF1ZVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxMWJIUnBjR3g1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUNvOUlHVXVlQ3dnZEdocGN5NTVJQ285SUdVdWVTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMTFiSFJwY0d4NVUyTmhiR0Z5S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUNvOUlHVXNJSFJvYVhNdWVTQXFQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWkdsMmFXUmxLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJQzg5SUdVdWVDd2dkR2hwY3k1NUlDODlJR1V1ZVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdScGRtbGtaVk5qWVd4aGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJYVnNkR2x3YkhsVFkyRnNZWElvTVNBdklHVXBPd29nSUNBZ2ZRb2dJQ0FnWVhCd2JIbE5ZWFJ5YVhnektHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdWVDd2diaUE5SUhSb2FYTXVlU3dnYVNBOUlHVXVaV3hsYldWdWRITTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlHbGJNRjBnS2lCMElDc2dhVnN6WFNBcUlHNGdLeUJwV3paZExDQjBhR2x6TG5rZ1BTQnBXekZkSUNvZ2RDQXJJR2xiTkYwZ0tpQnVJQ3NnYVZzM1hTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMXBiaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUUxaGRHZ3ViV2x1S0hSb2FYTXVlQ3dnWlM1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1dGFXNG9kR2hwY3k1NUxDQmxMbmtwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYldGNEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdUV0YwYUM1dFlYZ29kR2hwY3k1NExDQmxMbmdwTENCMGFHbHpMbmtnUFNCTllYUm9MbTFoZUNoMGFHbHpMbmtzSUdVdWVTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiR0Z0Y0NobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJRTFoZEdndWJXRjRLR1V1ZUN3Z1RXRjBhQzV0YVc0b2RDNTRMQ0IwYUdsekxuZ3BLU3dnZEdocGN5NTVJRDBnVFdGMGFDNXRZWGdvWlM1NUxDQk5ZWFJvTG0xcGJpaDBMbmtzSUhSb2FYTXVlU2twTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJ4aGJYQlRZMkZzWVhJb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JOWVhSb0xtMWhlQ2hsTENCTllYUm9MbTFwYmloMExDQjBhR2x6TG5ncEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1dFlYZ29aU3dnVFdGMGFDNXRhVzRvZEN3Z2RHaHBjeTU1S1Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamJHRnRjRXhsYm1kMGFDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbXhsYm1kMGFDZ3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1ScGRtbGtaVk5qWVd4aGNpaHVJSHg4SURFcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0UxaGRHZ3ViV0Y0S0dVc0lFMWhkR2d1YldsdUtIUXNJRzRwS1NrN0NpQWdJQ0I5Q2lBZ0lDQm1iRzl2Y2lncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1RXRjBhQzVtYkc5dmNpaDBhR2x6TG5ncExDQjBhR2x6TG5rZ1BTQk5ZWFJvTG1ac2IyOXlLSFJvYVhNdWVTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpaV2xzS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCTllYUm9MbU5sYVd3b2RHaHBjeTU0S1N3Z2RHaHBjeTU1SUQwZ1RXRjBhQzVqWldsc0tIUm9hWE11ZVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeWIzVnVaQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnVFdGMGFDNXliM1Z1WkNoMGFHbHpMbmdwTENCMGFHbHpMbmtnUFNCTllYUm9Mbkp2ZFc1a0tIUm9hWE11ZVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeWIzVnVaRlJ2V21WeWJ5Z3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdUV0YwYUM1MGNuVnVZeWgwYUdsekxuZ3BMQ0IwYUdsekxua2dQU0JOWVhSb0xuUnlkVzVqS0hSb2FYTXVlU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J1WldkaGRHVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJQzEwYUdsekxuZ3NJSFJvYVhNdWVTQTlJQzEwYUdsekxua3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmtiM1FvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS2lCbExuZ2dLeUIwYUdsekxua2dLaUJsTG5rN0NpQWdJQ0I5Q2lBZ0lDQmpjbTl6Y3lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBcUlHVXVlU0F0SUhSb2FYTXVlU0FxSUdVdWVEc0tJQ0FnSUgwS0lDQWdJR3hsYm1kMGFGTnhLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dLaUIwYUdsekxuZ2dLeUIwYUdsekxua2dLaUIwYUdsekxuazdDaUFnSUNCOUNpQWdJQ0JzWlc1bmRHZ29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRTFoZEdndWMzRnlkQ2gwYUdsekxuZ2dLaUIwYUdsekxuZ2dLeUIwYUdsekxua2dLaUIwYUdsekxua3BPd29nSUNBZ2ZRb2dJQ0FnYldGdWFHRjBkR0Z1VEdWdVozUm9LQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xtRmljeWgwYUdsekxuZ3BJQ3NnVFdGMGFDNWhZbk1vZEdocGN5NTVLVHNLSUNBZ0lIMEtJQ0FnSUc1dmNtMWhiR2w2WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVrYVhacFpHVlRZMkZzWVhJb2RHaHBjeTVzWlc1bmRHZ29LU0I4ZkNBeEtUc0tJQ0FnSUgwS0lDQWdJR0Z1WjJ4bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG1GMFlXNHlLQzEwYUdsekxua3NJQzEwYUdsekxuZ3BJQ3NnVFdGMGFDNVFTVHNLSUNBZ0lIMEtJQ0FnSUdGdVoyeGxWRzhvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1RXRjBhQzV6Y1hKMEtIUm9hWE11YkdWdVozUm9VM0VvS1NBcUlHVXViR1Z1WjNSb1UzRW9LU2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUWdQVDA5SURBcElISmxkSFZ5YmlCTllYUm9MbEJKSUM4Z01qc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11Wkc5MEtHVXBJQzhnZERzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNWhZMjl6S0dOMEtHNHNJQzB4TENBeEtTazdDaUFnSUNCOUNpQWdJQ0JrYVhOMFlXNWpaVlJ2S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1RXRjBhQzV6Y1hKMEtIUm9hWE11WkdsemRHRnVZMlZVYjFOeGRXRnlaV1FvWlNrcE93b2dJQ0FnZlFvZ0lDQWdaR2x6ZEdGdVkyVlViMU54ZFdGeVpXUW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NTRJQzBnWlM1NExDQnVJRDBnZEdocGN5NTVJQzBnWlM1NU93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMElDb2dkQ0FySUc0Z0tpQnVPd29nSUNBZ2ZRb2dJQ0FnYldGdWFHRjBkR0Z1UkdsemRHRnVZMlZVYnlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1WVdKektIUm9hWE11ZUNBdElHVXVlQ2tnS3lCTllYUm9MbUZpY3loMGFHbHpMbmtnTFNCbExua3BPd29nSUNBZ2ZRb2dJQ0FnYzJWMFRHVnVaM1JvS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXeHBlbVVvS1M1dGRXeDBhWEJzZVZOallXeGhjaWhsS1RzS0lDQWdJSDBLSUNBZ0lHeGxjbkFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0t6MGdLR1V1ZUNBdElIUm9hWE11ZUNrZ0tpQjBMQ0IwYUdsekxua2dLejBnS0dVdWVTQXRJSFJvYVhNdWVTa2dLaUIwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYkdWeWNGWmxZM1J2Y25Nb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCbExuZ2dLeUFvZEM1NElDMGdaUzU0S1NBcUlHNHNJSFJvYVhNdWVTQTlJR1V1ZVNBcklDaDBMbmtnTFNCbExua3BJQ29nYml3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdWeGRXRnNjeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWVDQTlQVDBnZEdocGN5NTRJQ1ltSUdVdWVTQTlQVDBnZEdocGN5NTVPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVRnljbUY1S0dVc0lIUWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUdWYmRGMHNJSFJvYVhNdWVTQTlJR1ZiZENBcklERmRMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlCY25KaGVTaGxJRDBnVzEwc0lIUWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWYmRGMGdQU0IwYUdsekxuZ3NJR1ZiZENBcklERmRJRDBnZEdocGN5NTVMQ0JsT3dvZ0lDQWdmUW9nSUNBZ1puSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUdVdVoyVjBXQ2gwS1N3Z2RHaHBjeTU1SUQwZ1pTNW5aWFJaS0hRcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2NtOTBZWFJsUVhKdmRXNWtLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlFMWhkR2d1WTI5ektIUXBMQ0JwSUQwZ1RXRjBhQzV6YVc0b2RDa3NJSElnUFNCMGFHbHpMbmdnTFNCbExuZ3NJR0VnUFNCMGFHbHpMbmtnTFNCbExuazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlISWdLaUJ1SUMwZ1lTQXFJR2tnS3lCbExuZ3NJSFJvYVhNdWVTQTlJSElnS2lCcElDc2dZU0FxSUc0Z0t5QmxMbmtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5WVc1a2IyMG9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJRTFoZEdndWNtRnVaRzl0S0Nrc0lIUm9hWE11ZVNBOUlFMWhkR2d1Y21GdVpHOXRLQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0FxVzFONWJXSnZiQzVwZEdWeVlYUnZjbDBvS1NCN0NpQWdJQ0FnSUNBZ2VXbGxiR1FnZEdocGN5NTRMQ0I1YVdWc1pDQjBhR2x6TG5rN0NpQWdJQ0I5Q24wc0lFaGxJRDBnWTJ4aGMzTWdjekVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaXdnYVN3Z2Npd2dZU3dnYnl3Z1l5d2diQ2w3Q2lBZ0lDQWdJQ0FnY3pFdWNISnZkRzkwZVhCbExtbHpUV0YwY21sNE15QTlJQ0V3TENCMGFHbHpMbVZzWlcxbGJuUnpJRDBnV3dvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4Q2lBZ0lDQWdJQ0FnWFN3Z1pTQWhQVDBnZG05cFpDQXdJQ1ltSUhSb2FYTXVjMlYwS0dVc0lIUXNJRzRzSUdrc0lISXNJR0VzSUc4c0lHTXNJR3dwT3dvZ0lDQWdmUW9nSUNBZ2MyVjBLR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXNJRzhzSUdNc0lHd3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdoYk1GMGdQU0JsTENCb1d6RmRJRDBnYVN3Z2FGc3lYU0E5SUc4c0lHaGJNMTBnUFNCMExDQm9XelJkSUQwZ2Npd2dhRnMxWFNBOUlHTXNJR2hiTmwwZ1BTQnVMQ0JvV3pkZElEMGdZU3dnYUZzNFhTQTlJR3dzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JwWkdWdWRHbDBlU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpaWFFvTVN3Z01Dd2dNQ3dnTUN3Z01Td2dNQ3dnTUN3Z01Dd2dNU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNc0lHNGdQU0JsTG1Wc1pXMWxiblJ6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwV3pCZElEMGdibHN3WFN3Z2RGc3hYU0E5SUc1Yk1WMHNJSFJiTWwwZ1BTQnVXekpkTENCMFd6TmRJRDBnYmxzelhTd2dkRnMwWFNBOUlHNWJORjBzSUhSYk5WMGdQU0J1V3pWZExDQjBXelpkSUQwZ2JsczJYU3dnZEZzM1hTQTlJRzViTjEwc0lIUmJPRjBnUFNCdVd6aGRMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWGgwY21GamRFSmhjMmx6S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1elpYUkdjbTl0VFdGMGNtbDRNME52YkhWdGJpaDBhR2x6TENBd0tTd2dkQzV6WlhSR2NtOXRUV0YwY21sNE0wTnZiSFZ0YmloMGFHbHpMQ0F4S1N3Z2JpNXpaWFJHY205dFRXRjBjbWw0TTBOdmJIVnRiaWgwYUdsekxDQXlLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMU5ZWFJ5YVhnMEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJR1V1Wld4bGJXVnVkSE03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBLSFJiTUYwc0lIUmJORjBzSUhSYk9GMHNJSFJiTVYwc0lIUmJOVjBzSUhSYk9WMHNJSFJiTWwwc0lIUmJObDBzSUhSYk1UQmRLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRzExYkhScGNHeDVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRkV3gwYVhCc2VVMWhkSEpwWTJWektIUm9hWE1zSUdVcE93b2dJQ0FnZlFvZ0lDQWdjSEpsYlhWc2RHbHdiSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTExYkhScGNHeDVUV0YwY21salpYTW9aU3dnZEdocGN5azdDaUFnSUNCOUNpQWdJQ0J0ZFd4MGFYQnNlVTFoZEhKcFkyVnpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHVXVaV3hsYldWdWRITXNJR2tnUFNCMExtVnNaVzFsYm5SekxDQnlJRDBnZEdocGN5NWxiR1Z0Wlc1MGN5d2dZU0E5SUc1Yk1GMHNJRzhnUFNCdVd6TmRMQ0JqSUQwZ2JsczJYU3dnYkNBOUlHNWJNVjBzSUdnZ1BTQnVXelJkTENCMUlEMGdibHMzWFN3Z1pDQTlJRzViTWwwc0lHWWdQU0J1V3pWZExDQnRJRDBnYmxzNFhTd2dYeUE5SUdsYk1GMHNJR2NnUFNCcFd6TmRMQ0J3SUQwZ2FWczJYU3dnZGlBOUlHbGJNVjBzSUhnZ1BTQnBXelJkTENCNUlEMGdhVnMzWFN3Z1lpQTlJR2xiTWwwc0lIY2dQU0JwV3pWZExDQlNJRDBnYVZzNFhUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2Nsc3dYU0E5SUdFZ0tpQmZJQ3NnYnlBcUlIWWdLeUJqSUNvZ1lpd2djbHN6WFNBOUlHRWdLaUJuSUNzZ2J5QXFJSGdnS3lCaklDb2dkeXdnY2xzMlhTQTlJR0VnS2lCd0lDc2dieUFxSUhrZ0t5QmpJQ29nVWl3Z2Nsc3hYU0E5SUd3Z0tpQmZJQ3NnYUNBcUlIWWdLeUIxSUNvZ1lpd2djbHMwWFNBOUlHd2dLaUJuSUNzZ2FDQXFJSGdnS3lCMUlDb2dkeXdnY2xzM1hTQTlJR3dnS2lCd0lDc2dhQ0FxSUhrZ0t5QjFJQ29nVWl3Z2Nsc3lYU0E5SUdRZ0tpQmZJQ3NnWmlBcUlIWWdLeUJ0SUNvZ1lpd2djbHMxWFNBOUlHUWdLaUJuSUNzZ1ppQXFJSGdnS3lCdElDb2dkeXdnY2xzNFhTQTlJR1FnS2lCd0lDc2daaUFxSUhrZ0t5QnRJQ29nVWl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxMWJIUnBjR3g1VTJOaGJHRnlLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVaV3hsYldWdWRITTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUmJNRjBnS2owZ1pTd2dkRnN6WFNBcVBTQmxMQ0IwV3paZElDbzlJR1VzSUhSYk1WMGdLajBnWlN3Z2RGczBYU0FxUFNCbExDQjBXemRkSUNvOUlHVXNJSFJiTWwwZ0tqMGdaU3dnZEZzMVhTQXFQU0JsTENCMFd6aGRJQ285SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCa1pYUmxjbTFwYm1GdWRDZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNc0lIUWdQU0JsV3pCZExDQnVJRDBnWlZzeFhTd2dhU0E5SUdWYk1sMHNJSElnUFNCbFd6TmRMQ0JoSUQwZ1pWczBYU3dnYnlBOUlHVmJOVjBzSUdNZ1BTQmxXelpkTENCc0lEMGdaVnMzWFN3Z2FDQTlJR1ZiT0YwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRZ0tpQmhJQ29nYUNBdElIUWdLaUJ2SUNvZ2JDQXRJRzRnS2lCeUlDb2dhQ0FySUc0Z0tpQnZJQ29nWXlBcklHa2dLaUJ5SUNvZ2JDQXRJR2tnS2lCaElDb2dZenNLSUNBZ0lIMEtJQ0FnSUdsdWRtVnlkQ2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVaV3hsYldWdWRITXNJSFFnUFNCbFd6QmRMQ0J1SUQwZ1pWc3hYU3dnYVNBOUlHVmJNbDBzSUhJZ1BTQmxXek5kTENCaElEMGdaVnMwWFN3Z2J5QTlJR1ZiTlYwc0lHTWdQU0JsV3paZExDQnNJRDBnWlZzM1hTd2dhQ0E5SUdWYk9GMHNJSFVnUFNCb0lDb2dZU0F0SUc4Z0tpQnNMQ0JrSUQwZ2J5QXFJR01nTFNCb0lDb2djaXdnWmlBOUlHd2dLaUJ5SUMwZ1lTQXFJR01zSUcwZ1BTQjBJQ29nZFNBcklHNGdLaUJrSUNzZ2FTQXFJR1k3Q2lBZ0lDQWdJQ0FnYVdZZ0tHMGdQVDA5SURBcElISmxkSFZ5YmlCMGFHbHpMbk5sZENnd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBd0xDQXdMQ0F3S1RzS0lDQWdJQ0FnSUNCc1pYUWdYeUE5SURFZ0x5QnRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxXekJkSUQwZ2RTQXFJRjhzSUdWYk1WMGdQU0FvYVNBcUlHd2dMU0JvSUNvZ2Jpa2dLaUJmTENCbFd6SmRJRDBnS0c4Z0tpQnVJQzBnYVNBcUlHRXBJQ29nWHl3Z1pWc3pYU0E5SUdRZ0tpQmZMQ0JsV3pSZElEMGdLR2dnS2lCMElDMGdhU0FxSUdNcElDb2dYeXdnWlZzMVhTQTlJQ2hwSUNvZ2NpQXRJRzhnS2lCMEtTQXFJRjhzSUdWYk5sMGdQU0JtSUNvZ1h5d2daVnMzWFNBOUlDaHVJQ29nWXlBdElHd2dLaUIwS1NBcUlGOHNJR1ZiT0YwZ1BTQW9ZU0FxSUhRZ0xTQnVJQ29nY2lrZ0tpQmZMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkSEpoYm5Od2IzTmxLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxMQ0IwSUQwZ2RHaHBjeTVsYkdWdFpXNTBjenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaU0E5SUhSYk1WMHNJSFJiTVYwZ1BTQjBXek5kTENCMFd6TmRJRDBnWlN3Z1pTQTlJSFJiTWwwc0lIUmJNbDBnUFNCMFd6WmRMQ0IwV3paZElEMGdaU3dnWlNBOUlIUmJOVjBzSUhSYk5WMGdQU0IwV3pkZExDQjBXemRkSUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHZGxkRTV2Y20xaGJFMWhkSEpwZUNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMFJuSnZiVTFoZEhKcGVEUW9aU2t1YVc1MlpYSjBLQ2t1ZEhKaGJuTndiM05sS0NrN0NpQWdJQ0I5Q2lBZ0lDQjBjbUZ1YzNCdmMyVkpiblJ2UVhKeVlYa29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pWc3dYU0E5SUhSYk1GMHNJR1ZiTVYwZ1BTQjBXek5kTENCbFd6SmRJRDBnZEZzMlhTd2daVnN6WFNBOUlIUmJNVjBzSUdWYk5GMGdQU0IwV3pSZExDQmxXelZkSUQwZ2RGczNYU3dnWlZzMlhTQTlJSFJiTWwwc0lHVmJOMTBnUFNCMFd6VmRMQ0JsV3poZElEMGdkRnM0WFN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRGVjJWSEpoYm5ObWIzSnRLR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXNJRzhwSUhzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUUxaGRHZ3VZMjl6S0hJcExDQnNJRDBnVFdGMGFDNXphVzRvY2lrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwS0c0Z0tpQmpMQ0J1SUNvZ2JDd2dMVzRnS2lBb1l5QXFJR0VnS3lCc0lDb2dieWtnS3lCaElDc2daU3dnTFdrZ0tpQnNMQ0JwSUNvZ1l5d2dMV2tnS2lBb0xXd2dLaUJoSUNzZ1l5QXFJRzhwSUNzZ2J5QXJJSFFzSURBc0lEQXNJREVwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJOaGJHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJ5WlcxMWJIUnBjR3g1S0ZWaExtMWhhMlZUWTJGc1pTaGxMQ0IwS1Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeWIzUmhkR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJ5WlcxMWJIUnBjR3g1S0ZWaExtMWhhMlZTYjNSaGRHbHZiaWd0WlNrcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RISmhibk5zWVhSbEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXdjbVZ0ZFd4MGFYQnNlU2hWWVM1dFlXdGxWSEpoYm5Oc1lYUnBiMjRvWlN3Z2RDa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiV0ZyWlZSeVlXNXpiR0YwYVc5dUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1cGMxWmxZM1J2Y2pJZ1B5QjBhR2x6TG5ObGRDZ3hMQ0F3TENCbExuZ3NJREFzSURFc0lHVXVlU3dnTUN3Z01Dd2dNU2tnT2lCMGFHbHpMbk5sZENneExDQXdMQ0JsTENBd0xDQXhMQ0IwTENBd0xDQXdMQ0F4S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxaGEyVlNiM1JoZEdsdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JOWVhSb0xtTnZjeWhsS1N3Z2JpQTlJRTFoZEdndWMybHVLR1VwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTmxkQ2gwTENBdGJpd2dNQ3dnYml3Z2RDd2dNQ3dnTUN3Z01Dd2dNU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0WVd0bFUyTmhiR1VvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRDaGxMQ0F3TENBd0xDQXdMQ0IwTENBd0xDQXdMQ0F3TENBeEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHVnhkV0ZzY3lobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1Wc1pXMWxiblJ6TENCdUlEMGdaUzVsYkdWdFpXNTBjenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2tnUFNBd095QnBJRHdnT1RzZ2FTc3JLV2xtSUNoMFcybGRJQ0U5UFNCdVcybGRLU0J5WlhSMWNtNGdJVEU3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJQ0V3T3dvZ0lDQWdmUW9nSUNBZ1puSnZiVUZ5Y21GNUtHVXNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnVJRDBnTURzZ2JpQThJRGs3SUc0ckt5bDBhR2x6TG1Wc1pXMWxiblJ6VzI1ZElEMGdaVnR1SUNzZ2RGMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGIwRnljbUY1S0dVZ1BTQmJYU3dnZENBOUlEQXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWYmRGMGdQU0J1V3pCZExDQmxXM1FnS3lBeFhTQTlJRzViTVYwc0lHVmJkQ0FySURKZElEMGdibHN5WFN3Z1pWdDBJQ3NnTTEwZ1BTQnVXek5kTENCbFczUWdLeUEwWFNBOUlHNWJORjBzSUdWYmRDQXJJRFZkSUQwZ2JsczFYU3dnWlZ0MElDc2dObDBnUFNCdVd6WmRMQ0JsVzNRZ0t5QTNYU0E5SUc1Yk4xMHNJR1ZiZENBcklEaGRJRDBnYmxzNFhTd2daVHNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lncExtWnliMjFCY25KaGVTaDBhR2x6TG1Wc1pXMWxiblJ6S1RzS0lDQWdJSDBLZlN3Z1ZXRWdQU0J1WlhjZ1NHVTdDbVoxYm1OMGFXOXVJRTFrS0hNeEtTQjdDaUFnSUNCbWIzSW9iR1YwSUdVZ1BTQnpNUzVzWlc1bmRHZ2dMU0F4T3lCbElENDlJREE3SUMwdFpTbHBaaUFvY3pGYlpWMGdQajBnTmpVMU16VXBJSEpsZEhWeWJpQWhNRHNLSUNBZ0lISmxkSFZ5YmlBaE1Uc0tmUXAyWVhJZ1pYQWdQU0I3Q2lBZ0lDQkpiblE0UVhKeVlYa3NDaUFnSUNCVmFXNTBPRUZ5Y21GNUxBb2dJQ0FnVldsdWREaERiR0Z0Y0dWa1FYSnlZWGtzQ2lBZ0lDQkpiblF4TmtGeWNtRjVMQW9nSUNBZ1ZXbHVkREUyUVhKeVlYa3NDaUFnSUNCSmJuUXpNa0Z5Y21GNUxBb2dJQ0FnVldsdWRETXlRWEp5WVhrc0NpQWdJQ0JHYkc5aGRETXlRWEp5WVhrc0NpQWdJQ0JHYkc5aGREWTBRWEp5WVhrS2ZUc0tablZ1WTNScGIyNGdhMmtvY3pFc0lHVXBJSHNLSUNBZ0lISmxkSFZ5YmlCdVpYY2daWEJiY3pGZEtHVXBPd3A5Q21aMWJtTjBhVzl1SUhkektITXhLU0I3Q2lBZ0lDQnlaWFIxY200Z1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkRTVUS0NKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eE9UazVMM2hvZEcxc0lpd2djekVwT3dwOUNtWjFibU4wYVc5dUlIUndLQ2tnZXdvZ0lDQWdiR1YwSUhNeElEMGdkM01vSW1OaGJuWmhjeUlwT3dvZ0lDQWdjbVYwZFhKdUlITXhMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQWlZbXh2WTJzaUxDQnpNVHNLZlFwMllYSWdRbXdnUFNCN2ZUc0tablZ1WTNScGIyNGdUWE1vY3pFcElIc0tJQ0FnSUhNeElHbHVJRUpzSUh4OElDaENiRnR6TVYwZ1BTQWhNQ3dnWTI5dWMyOXNaUzUzWVhKdUtITXhLU2s3Q24wS2RtRnlJSHBzSUQwZ2JtVjNJRWhsS0NrdWMyVjBLQzQ0TWpJME5qSXhMQ0F1TVRjM05UTTRMQ0F3TENBdU1ETXpNVGswTVN3Z0xqazJOamd3TlRnc0lEQXNJQzR3TVRjd09ESTNMQ0F1TURjeU16azNOQ3dnTGpreE1EVXhPVGtwTENCV2JDQTlJRzVsZHlCSVpTZ3BMbk5sZENneExqSXlORGswTURFc0lDMHVNakkwT1RRd05Dd2dNQ3dnTFM0d05ESXdOVFk1TENBeExqQTBNakExTnpFc0lEQXNJQzB1TURFNU5qTTNOaXdnTFM0d056ZzJNell4TENBeExqQTVPREkzTXpVcExDQkhjeUE5SUhzS0lDQWdJRnROYmwwNklIc0tJQ0FnSUNBZ0lDQjBjbUZ1YzJabGNqb2dlbklzQ2lBZ0lDQWdJQ0FnY0hKcGJXRnlhV1Z6T2lCV2Npd0tJQ0FnSUNBZ0lDQjBiMUpsWm1WeVpXNWpaVG9nS0hNeEtUMCtjekVzQ2lBZ0lDQWdJQ0FnWm5KdmJWSmxabVZ5Wlc1alpUb2dLSE14S1QwK2N6RUtJQ0FnSUgwc0NpQWdJQ0JiZG5SZE9pQjdDaUFnSUNBZ0lDQWdkSEpoYm5ObVpYSTZJRzUwTEFvZ0lDQWdJQ0FnSUhCeWFXMWhjbWxsY3pvZ1ZuSXNDaUFnSUNBZ0lDQWdkRzlTWldabGNtVnVZMlU2SUNoek1TazlQbk14TG1OdmJuWmxjblJUVWtkQ1ZHOU1hVzVsWVhJb0tTd0tJQ0FnSUNBZ0lDQm1jbTl0VW1WbVpYSmxibU5sT2lBb2N6RXBQVDV6TVM1amIyNTJaWEowVEdsdVpXRnlWRzlUVWtkQ0tDa0tJQ0FnSUgwc0NpQWdJQ0JiZG1GZE9pQjdDaUFnSUNBZ0lDQWdkSEpoYm5ObVpYSTZJSHB5TEFvZ0lDQWdJQ0FnSUhCeWFXMWhjbWxsY3pvZ2EzSXNDaUFnSUNBZ0lDQWdkRzlTWldabGNtVnVZMlU2SUNoek1TazlQbk14TG1Gd2NHeDVUV0YwY21sNE15aFdiQ2tzQ2lBZ0lDQWdJQ0FnWm5KdmJWSmxabVZ5Wlc1alpUb2dLSE14S1QwK2N6RXVZWEJ3YkhsTllYUnlhWGd6S0hwc0tRb2dJQ0FnZlN3S0lDQWdJRnR4WTEwNklIc0tJQ0FnSUNBZ0lDQjBjbUZ1YzJabGNqb2diblFzQ2lBZ0lDQWdJQ0FnY0hKcGJXRnlhV1Z6T2lCcmNpd0tJQ0FnSUNBZ0lDQjBiMUpsWm1WeVpXNWpaVG9nS0hNeEtUMCtjekV1WTI5dWRtVnlkRk5TUjBKVWIweHBibVZoY2lncExtRndjR3g1VFdGMGNtbDRNeWhXYkNrc0NpQWdJQ0FnSUNBZ1puSnZiVkpsWm1WeVpXNWpaVG9nS0hNeEtUMCtjekV1WVhCd2JIbE5ZWFJ5YVhnektIcHNLUzVqYjI1MlpYSjBUR2x1WldGeVZHOVRVa2RDS0NrS0lDQWdJSDBLZlN3Z2JuQWdQU0J1WlhjZ1UyVjBLRnNLSUNBZ0lFMXVMQW9nSUNBZ2RtRUtYU2tzSUZGbElEMGdld29nSUNBZ1pXNWhZbXhsWkRvZ0lUQXNDaUFnSUNCZmQyOXlhMmx1WjBOdmJHOXlVM0JoWTJVNklFMXVMQW9nSUNBZ1oyVjBJR3hsWjJGamVVMXZaR1VnS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrTnZiRzl5VFdGdVlXZGxiV1Z1ZERvZ0xteGxaMkZqZVUxdlpHVTlabUZzYzJVZ2NtVnVZVzFsWkNCMGJ5QXVaVzVoWW14bFpEMTBjblZsSUdsdUlISXhOVEF1SWlrc0lDRjBhR2x6TG1WdVlXSnNaV1E3Q2lBZ0lDQjlMQW9nSUNBZ2MyVjBJR3hsWjJGamVVMXZaR1VnS0hNcGV3b2dJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRMjlzYjNKTllXNWhaMlZ0Wlc1ME9pQXViR1ZuWVdONVRXOWtaVDFtWVd4elpTQnlaVzVoYldWa0lIUnZJQzVsYm1GaWJHVmtQWFJ5ZFdVZ2FXNGdjakUxTUM0aUtTd2dkR2hwY3k1bGJtRmliR1ZrSUQwZ0lYTTdDaUFnSUNCOUxBb2dJQ0FnWjJWMElIZHZjbXRwYm1kRGIyeHZjbE53WVdObElDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmQyOXlhMmx1WjBOdmJHOXlVM0JoWTJVN0NpQWdJQ0I5TEFvZ0lDQWdjMlYwSUhkdmNtdHBibWREYjJ4dmNsTndZV05sSUNoektYc0tJQ0FnSUNBZ0lDQnBaaUFvSVc1d0xtaGhjeWh6S1NrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCVmJuTjFjSEJ2Y25SbFpDQjNiM0pyYVc1bklHTnZiRzl5SUhOd1lXTmxMQ0FpSkh0emZTSXVZQ2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZkMjl5YTJsdVowTnZiRzl5VTNCaFkyVWdQU0J6T3dvZ0lDQWdmU3dLSUNBZ0lHTnZiblpsY25RNklHWjFibU4wYVc5dUtITXhMQ0JsTENCMEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVaVzVoWW14bFpDQTlQVDBnSVRFZ2ZId2daU0E5UFQwZ2RDQjhmQ0FoWlNCOGZDQWhkQ2tnY21WMGRYSnVJSE14T3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnUjNOYlpWMHVkRzlTWldabGNtVnVZMlVzSUdrZ1BTQkhjMXQwWFM1bWNtOXRVbVZtWlhKbGJtTmxPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnBLRzRvY3pFcEtUc0tJQ0FnSUgwc0NpQWdJQ0JtY205dFYyOXlhMmx1WjBOdmJHOXlVM0JoWTJVNklHWjFibU4wYVc5dUtITXhMQ0JsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl1ZG1WeWRDaHpNU3dnZEdocGN5NWZkMjl5YTJsdVowTnZiRzl5VTNCaFkyVXNJR1VwT3dvZ0lDQWdmU3dLSUNBZ0lIUnZWMjl5YTJsdVowTnZiRzl5VTNCaFkyVTZJR1oxYm1OMGFXOXVLSE14TENCbEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTI5dWRtVnlkQ2h6TVN3Z1pTd2dkR2hwY3k1ZmQyOXlhMmx1WjBOdmJHOXlVM0JoWTJVcE93b2dJQ0FnZlN3S0lDQWdJR2RsZEZCeWFXMWhjbWxsY3pvZ1puVnVZM1JwYjI0b2N6RXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdSM05iY3pGZExuQnlhVzFoY21sbGN6c0tJQ0FnSUgwc0NpQWdJQ0JuWlhSVWNtRnVjMlpsY2pvZ1puVnVZM1JwYjI0b2N6RXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjekVnUFQwOUlGaDBJRDhnZW5JZ09pQkhjMXR6TVYwdWRISmhibk5tWlhJN0NpQWdJQ0I5Q24wN0NtWjFibU4wYVc5dUlGaHBLSE14S1NCN0NpQWdJQ0J5WlhSMWNtNGdjekVnUENBdU1EUXdORFVnUHlCek1TQXFJQzR3Tnpjek9Ua3pPREE0SURvZ1RXRjBhQzV3YjNjb2N6RWdLaUF1T1RRM09EWTNNams0TmlBcklDNHdOVEl4TXpJM01ERTBMQ0F5TGpRcE93cDlDbVoxYm1OMGFXOXVJRVJoS0hNeEtTQjdDaUFnSUNCeVpYUjFjbTRnY3pFZ1BDQXVNREF6TVRNd09DQS9JSE14SUNvZ01USXVPVElnT2lBeExqQTFOU0FxSUUxaGRHZ3VjRzkzS0hNeExDQXVOREUyTmpZcElDMGdMakExTlRzS2ZRcDJZWElnWjJrc0lGaHlJRDBnWTJ4aGMzTWdld29nSUNBZ2MzUmhkR2xqSUdkbGRFUmhkR0ZWVWt3b1pTa2dld29nSUNBZ0lDQWdJR2xtSUNndlhtUmhkR0U2TDJrdWRHVnpkQ2hsTG5OeVl5a2dmSHdnZEhsd1pXOW1JRWhVVFV4RFlXNTJZWE5GYkdWdFpXNTBJRDRnSW5VaUtTQnlaWFIxY200Z1pTNXpjbU03Q2lBZ0lDQWdJQ0FnYkdWMElIUTdDaUFnSUNBZ0lDQWdhV1lnS0dVZ2FXNXpkR0Z1WTJWdlppQklWRTFNUTJGdWRtRnpSV3hsYldWdWRDa2dkQ0E5SUdVN0NpQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHZHBJRDA5UFNCMmIybGtJREFnSmlZZ0tHZHBJRDBnZDNNb0ltTmhiblpoY3lJcEtTd2daMmt1ZDJsa2RHZ2dQU0JsTG5kcFpIUm9MQ0JuYVM1b1pXbG5hSFFnUFNCbExtaGxhV2RvZERzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc0Z1BTQm5hUzVuWlhSRGIyNTBaWGgwS0NJeVpDSXBPd29nSUNBZ0lDQWdJQ0FnSUNCbElHbHVjM1JoYm1ObGIyWWdTVzFoWjJWRVlYUmhJRDhnYmk1d2RYUkpiV0ZuWlVSaGRHRW9aU3dnTUN3Z01Da2dPaUJ1TG1SeVlYZEpiV0ZuWlNobExDQXdMQ0F3TENCbExuZHBaSFJvTENCbExtaGxhV2RvZENrc0lIUWdQU0JuYVRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRdWQybGtkR2dnUGlBeU1EUTRJSHg4SUhRdWFHVnBaMmgwSUQ0Z01qQTBPQ0EvSUNoamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrbHRZV2RsVlhScGJITXVaMlYwUkdGMFlWVlNURG9nU1cxaFoyVWdZMjl1ZG1WeWRHVmtJSFJ2SUdwd1p5Qm1iM0lnY0dWeVptOXliV0Z1WTJVZ2NtVmhjMjl1Y3lJc0lHVXBMQ0IwTG5SdlJHRjBZVlZTVENnaWFXMWhaMlV2YW5CbFp5SXNJQzQyS1NrZ09pQjBMblJ2UkdGMFlWVlNUQ2dpYVcxaFoyVXZjRzVuSWlrN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ2MxSkhRbFJ2VEdsdVpXRnlLR1VwSUhzS0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlFaFVUVXhKYldGblpVVnNaVzFsYm5RZ1BDQWlkU0lnSmlZZ1pTQnBibk4wWVc1alpXOW1JRWhVVFV4SmJXRm5aVVZzWlcxbGJuUWdmSHdnZEhsd1pXOW1JRWhVVFV4RFlXNTJZWE5GYkdWdFpXNTBJRHdnSW5VaUlDWW1JR1VnYVc1emRHRnVZMlZ2WmlCSVZFMU1RMkZ1ZG1GelJXeGxiV1Z1ZENCOGZDQjBlWEJsYjJZZ1NXMWhaMlZDYVhSdFlYQWdQQ0FpZFNJZ0ppWWdaU0JwYm5OMFlXNWpaVzltSUVsdFlXZGxRbWwwYldGd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZDNNb0ltTmhiblpoY3lJcE93b2dJQ0FnSUNBZ0lDQWdJQ0IwTG5kcFpIUm9JRDBnWlM1M2FXUjBhQ3dnZEM1b1pXbG5hSFFnUFNCbExtaGxhV2RvZERzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBMbWRsZEVOdmJuUmxlSFFvSWpKa0lpazdDaUFnSUNBZ0lDQWdJQ0FnSUc0dVpISmhkMGx0WVdkbEtHVXNJREFzSURBc0lHVXVkMmxrZEdnc0lHVXVhR1ZwWjJoMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0J1TG1kbGRFbHRZV2RsUkdGMFlTZ3dMQ0F3TENCbExuZHBaSFJvTENCbExtaGxhV2RvZENrc0lISWdQU0JwTG1SaGRHRTdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWVNBOUlEQTdJR0VnUENCeUxteGxibWQwYURzZ1lTc3JLWEpiWVYwZ1BTQllhU2h5VzJGZElDOGdNalUxS1NBcUlESTFOVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0dWNIVjBTVzFoWjJWRVlYUmhLR2tzSURBc0lEQXBMQ0IwT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pTNWtZWFJoS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMElEMGdaUzVrWVhSaExuTnNhV05sS0RBcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd095QnVJRHdnZEM1c1pXNW5kR2c3SUc0ckt5bDBJR2x1YzNSaGJtTmxiMllnVldsdWREaEJjbkpoZVNCOGZDQjBJR2x1YzNSaGJtTmxiMllnVldsdWREaERiR0Z0Y0dWa1FYSnlZWGtnUHlCMFcyNWRJRDBnVFdGMGFDNW1iRzl2Y2loWWFTaDBXMjVkSUM4Z01qVTFLU0FxSURJMU5Ta2dPaUIwVzI1ZElEMGdXR2tvZEZ0dVhTazdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaE9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmxrZEdnNklHVXVkMmxrZEdnc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUdVdWFHVnBaMmgwQ2lBZ0lDQWdJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdmU0JsYkhObElISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrbHRZV2RsVlhScGJITXVjMUpIUWxSdlRHbHVaV0Z5S0NrNklGVnVjM1Z3Y0c5eWRHVmtJR2x0WVdkbElIUjVjR1V1SUU1dklHTnZiRzl5SUhOd1lXTmxJR052Ym5abGNuTnBiMjRnWVhCd2JHbGxaQzRpS1N3Z1pUc0tJQ0FnSUgwS2ZTd2dhWEFnUFNBd0xDQkpiaUE5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCdWRXeHNLWHNLSUNBZ0lDQWdJQ0IwYUdsekxtbHpVMjkxY21ObElEMGdJVEFzSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBhR2x6TENBaWFXUWlMQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCcGNDc3JDaUFnSUNBZ0lDQWdmU2tzSUhSb2FYTXVkWFZwWkNBOUlHdDBLQ2tzSUhSb2FYTXVaR0YwWVNBOUlHVXNJSFJvYVhNdWRtVnljMmx2YmlBOUlEQTdDaUFnSUNCOUNpQWdJQ0J6WlhRZ2JtVmxaSE5WY0dSaGRHVW9aU2tnZXdvZ0lDQWdJQ0FnSUdVZ1BUMDlJQ0V3SUNZbUlIUm9hWE11ZG1WeWMybHZiaXNyT3dvZ0lDQWdmUW9nSUNBZ2RHOUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlHVWdQVDA5SUhadmFXUWdNQ0I4ZkNCMGVYQmxiMllnWlNBOVBTQWljM1J5YVc1bklqc0tJQ0FnSUNBZ0lDQnBaaUFvSVhRZ0ppWWdaUzVwYldGblpYTmJkR2hwY3k1MWRXbGtYU0FoUFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnWlM1cGJXRm5aWE5iZEdocGN5NTFkV2xrWFRzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkWFZwWkRvZ2RHaHBjeTUxZFdsa0xBb2dJQ0FnSUNBZ0lDQWdJQ0IxY213NklDSWlDaUFnSUNBZ0lDQWdmU3dnYVNBOUlIUm9hWE11WkdGMFlUc0tJQ0FnSUNBZ0lDQnBaaUFvYVNBaFBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2Nqc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYVNrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISWdQU0JiWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWVNBOUlEQXNJRzhnUFNCcExteGxibWQwYURzZ1lTQThJRzg3SUdFckt5bHBXMkZkTG1selJHRjBZVlJsZUhSMWNtVWdQeUJ5TG5CMWMyZ29UbUVvYVZ0aFhTNXBiV0ZuWlNrcElEb2djaTV3ZFhOb0tFNWhLR2xiWVYwcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSElnUFNCT1lTaHBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JpNTFjbXdnUFNCeU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDQjhmQ0FvWlM1cGJXRm5aWE5iZEdocGN5NTFkV2xrWFNBOUlHNHBMQ0J1T3dvZ0lDQWdmUXA5T3dwbWRXNWpkR2x2YmlCT1lTaHpNU2tnZXdvZ0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCSVZFMU1TVzFoWjJWRmJHVnRaVzUwSUR3Z0luVWlJQ1ltSUhNeElHbHVjM1JoYm1ObGIyWWdTRlJOVEVsdFlXZGxSV3hsYldWdWRDQjhmQ0IwZVhCbGIyWWdTRlJOVEVOaGJuWmhjMFZzWlcxbGJuUWdQQ0FpZFNJZ0ppWWdjekVnYVc1emRHRnVZMlZ2WmlCSVZFMU1RMkZ1ZG1GelJXeGxiV1Z1ZENCOGZDQjBlWEJsYjJZZ1NXMWhaMlZDYVhSdFlYQWdQQ0FpZFNJZ0ppWWdjekVnYVc1emRHRnVZMlZ2WmlCSmJXRm5aVUpwZEcxaGNDQS9JRmh5TG1kbGRFUmhkR0ZWVWt3b2N6RXBJRG9nY3pFdVpHRjBZU0EvSUhzS0lDQWdJQ0FnSUNCa1lYUmhPaUJCY25KaGVTNW1jbTl0S0hNeExtUmhkR0VwTEFvZ0lDQWdJQ0FnSUhkcFpIUm9PaUJ6TVM1M2FXUjBhQ3dLSUNBZ0lDQWdJQ0JvWldsbmFIUTZJSE14TG1obGFXZG9kQ3dLSUNBZ0lDQWdJQ0IwZVhCbE9pQnpNUzVrWVhSaExtTnZibk4wY25WamRHOXlMbTVoYldVS0lDQWdJSDBnT2lBb1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVVaWGgwZFhKbE9pQlZibUZpYkdVZ2RHOGdjMlZ5YVdGc2FYcGxJRlJsZUhSMWNtVXVJaWtzSUh0OUtUc0tmUXAyWVhJZ2MzQWdQU0F3TENCVGRDQTlJR05zWVhOeklITXhJR1Y0ZEdWdVpITWdjMjRnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlITXhMa1JGUmtGVlRGUmZTVTFCUjBVc0lIUWdQU0J6TVM1RVJVWkJWVXhVWDAxQlVGQkpUa2NzSUc0Z1BTQkpkQ3dnYVNBOUlFbDBMQ0J5SUQwZ2JYUXNJR0VnUFNCc2FTd2dieUE5SUZkMExDQmpJRDBnVDI0c0lHd2dQU0J6TVM1RVJVWkJWVXhVWDBGT1NWTlBWRkpQVUZrc0lHZ2dQU0JZZENsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1N3Z2RHaHBjeTVwYzFSbGVIUjFjbVVnUFNBaE1Dd2dUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ0pwWkNJc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJSE53S3lzS0lDQWdJQ0FnSUNCOUtTd2dkR2hwY3k1MWRXbGtJRDBnYTNRb0tTd2dkR2hwY3k1dVlXMWxJRDBnSWlJc0lIUm9hWE11YzI5MWNtTmxJRDBnYm1WM0lFbHVLR1VwTENCMGFHbHpMbTFwY0cxaGNITWdQU0JiWFN3Z2RHaHBjeTV0WVhCd2FXNW5JRDBnZEN3Z2RHaHBjeTVqYUdGdWJtVnNJRDBnTUN3Z2RHaHBjeTUzY21Gd1V5QTlJRzRzSUhSb2FYTXVkM0poY0ZRZ1BTQnBMQ0IwYUdsekxtMWhaMFpwYkhSbGNpQTlJSElzSUhSb2FYTXViV2x1Um1sc2RHVnlJRDBnWVN3Z2RHaHBjeTVoYm1semIzUnliM0I1SUQwZ2JDd2dkR2hwY3k1bWIzSnRZWFFnUFNCdkxDQjBhR2x6TG1sdWRHVnlibUZzUm05eWJXRjBJRDBnYm5Wc2JDd2dkR2hwY3k1MGVYQmxJRDBnWXl3Z2RHaHBjeTV2Wm1aelpYUWdQU0J1WlhjZ1dpZ3dMQ0F3S1N3Z2RHaHBjeTV5WlhCbFlYUWdQU0J1WlhjZ1dpZ3hMQ0F4S1N3Z2RHaHBjeTVqWlc1MFpYSWdQU0J1WlhjZ1dpZ3dMQ0F3S1N3Z2RHaHBjeTV5YjNSaGRHbHZiaUE5SURBc0lIUm9hWE11YldGMGNtbDRRWFYwYjFWd1pHRjBaU0E5SUNFd0xDQjBhR2x6TG0xaGRISnBlQ0E5SUc1bGR5QklaU3dnZEdocGN5NW5aVzVsY21GMFpVMXBjRzFoY0hNZ1BTQWhNQ3dnZEdocGN5NXdjbVZ0ZFd4MGFYQnNlVUZzY0doaElEMGdJVEVzSUhSb2FYTXVabXhwY0ZrZ1BTQWhNQ3dnZEdocGN5NTFibkJoWTJ0QmJHbG5ibTFsYm5RZ1BTQTBMQ0IwZVhCbGIyWWdhQ0E5UFNBaWMzUnlhVzVuSWlBL0lIUm9hWE11WTI5c2IzSlRjR0ZqWlNBOUlHZ2dPaUFvVFhNb0lsUklVa1ZGTGxSbGVIUjFjbVU2SUZCeWIzQmxjblI1SUM1bGJtTnZaR2x1WnlCb1lYTWdZbVZsYmlCeVpYQnNZV05sWkNCaWVTQXVZMjlzYjNKVGNHRmpaUzRpS1N3Z2RHaHBjeTVqYjJ4dmNsTndZV05sSUQwZ2FDQTlQVDBnY21rZ1B5QjJkQ0E2SUZoMEtTd2dkR2hwY3k1MWMyVnlSR0YwWVNBOUlIdDlMQ0IwYUdsekxuWmxjbk5wYjI0Z1BTQXdMQ0IwYUdsekxtOXVWWEJrWVhSbElEMGdiblZzYkN3Z2RHaHBjeTVwYzFKbGJtUmxjbFJoY21kbGRGUmxlSFIxY21VZ1BTQWhNU3dnZEdocGN5NXVaV1ZrYzFCTlVrVk5WWEJrWVhSbElEMGdJVEU3Q2lBZ0lDQjlDaUFnSUNCblpYUWdhVzFoWjJVb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzI5MWNtTmxMbVJoZEdFN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFnYVcxaFoyVW9aU0E5SUc1MWJHd3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuTnZkWEpqWlM1a1lYUmhJRDBnWlRzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlUxaGRISnBlQ2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbTFoZEhKcGVDNXpaWFJWZGxSeVlXNXpabTl5YlNoMGFHbHpMbTltWm5ObGRDNTRMQ0IwYUdsekxtOW1abk5sZEM1NUxDQjBhR2x6TG5KbGNHVmhkQzU0TENCMGFHbHpMbkpsY0dWaGRDNTVMQ0IwYUdsekxuSnZkR0YwYVc5dUxDQjBhR2x6TG1ObGJuUmxjaTU0TENCMGFHbHpMbU5sYm5SbGNpNTVLVHNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lncExtTnZjSGtvZEdocGN5azdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dVlXMWxJRDBnWlM1dVlXMWxMQ0IwYUdsekxuTnZkWEpqWlNBOUlHVXVjMjkxY21ObExDQjBhR2x6TG0xcGNHMWhjSE1nUFNCbExtMXBjRzFoY0hNdWMyeHBZMlVvTUNrc0lIUm9hWE11YldGd2NHbHVaeUE5SUdVdWJXRndjR2x1Wnl3Z2RHaHBjeTVqYUdGdWJtVnNJRDBnWlM1amFHRnVibVZzTENCMGFHbHpMbmR5WVhCVElEMGdaUzUzY21Gd1V5d2dkR2hwY3k1M2NtRndWQ0E5SUdVdWQzSmhjRlFzSUhSb2FYTXViV0ZuUm1sc2RHVnlJRDBnWlM1dFlXZEdhV3gwWlhJc0lIUm9hWE11YldsdVJtbHNkR1Z5SUQwZ1pTNXRhVzVHYVd4MFpYSXNJSFJvYVhNdVlXNXBjMjkwY205d2VTQTlJR1V1WVc1cGMyOTBjbTl3ZVN3Z2RHaHBjeTVtYjNKdFlYUWdQU0JsTG1admNtMWhkQ3dnZEdocGN5NXBiblJsY201aGJFWnZjbTFoZENBOUlHVXVhVzUwWlhKdVlXeEdiM0p0WVhRc0lIUm9hWE11ZEhsd1pTQTlJR1V1ZEhsd1pTd2dkR2hwY3k1dlptWnpaWFF1WTI5d2VTaGxMbTltWm5ObGRDa3NJSFJvYVhNdWNtVndaV0YwTG1OdmNIa29aUzV5WlhCbFlYUXBMQ0IwYUdsekxtTmxiblJsY2k1amIzQjVLR1V1WTJWdWRHVnlLU3dnZEdocGN5NXliM1JoZEdsdmJpQTlJR1V1Y205MFlYUnBiMjRzSUhSb2FYTXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQTlJR1V1YldGMGNtbDRRWFYwYjFWd1pHRjBaU3dnZEdocGN5NXRZWFJ5YVhndVkyOXdlU2hsTG0xaGRISnBlQ2tzSUhSb2FYTXVaMlZ1WlhKaGRHVk5hWEJ0WVhCeklEMGdaUzVuWlc1bGNtRjBaVTFwY0cxaGNITXNJSFJvYVhNdWNISmxiWFZzZEdsd2JIbEJiSEJvWVNBOUlHVXVjSEpsYlhWc2RHbHdiSGxCYkhCb1lTd2dkR2hwY3k1bWJHbHdXU0E5SUdVdVpteHBjRmtzSUhSb2FYTXVkVzV3WVdOclFXeHBaMjV0Wlc1MElEMGdaUzUxYm5CaFkydEJiR2xuYm0xbGJuUXNJSFJvYVhNdVkyOXNiM0pUY0dGalpTQTlJR1V1WTI5c2IzSlRjR0ZqWlN3Z2RHaHBjeTUxYzJWeVJHRjBZU0E5SUVwVFQwNHVjR0Z5YzJVb1NsTlBUaTV6ZEhKcGJtZHBabmtvWlM1MWMyVnlSR0YwWVNrcExDQjBhR2x6TG01bFpXUnpWWEJrWVhSbElEMGdJVEFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlNBOVBUMGdkbTlwWkNBd0lIeDhJSFI1Y0dWdlppQmxJRDA5SUNKemRISnBibWNpT3dvZ0lDQWdJQ0FnSUdsbUlDZ2hkQ0FtSmlCbExuUmxlSFIxY21WelczUm9hWE11ZFhWcFpGMGdJVDA5SUhadmFXUWdNQ2tnY21WMGRYSnVJR1V1ZEdWNGRIVnlaWE5iZEdocGN5NTFkV2xrWFRzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdiV1YwWVdSaGRHRTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpsY25OcGIyNDZJRFF1Tml3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ0pVWlhoMGRYSmxJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsYm1WeVlYUnZjam9nSWxSbGVIUjFjbVV1ZEc5S1UwOU9JZ29nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0IxZFdsa09pQjBhR2x6TG5WMWFXUXNDaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJSFJvYVhNdWJtRnRaU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXMWhaMlU2SUhSb2FYTXVjMjkxY21ObExuUnZTbE5QVGlobEtTNTFkV2xrTEFvZ0lDQWdJQ0FnSUNBZ0lDQnRZWEJ3YVc1bk9pQjBhR2x6TG0xaGNIQnBibWNzQ2lBZ0lDQWdJQ0FnSUNBZ0lHTm9ZVzV1Wld3NklIUm9hWE11WTJoaGJtNWxiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2NtVndaV0YwT2lCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsY0dWaGRDNTRMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpYQmxZWFF1ZVFvZ0lDQWdJQ0FnSUNBZ0lDQmRMQW9nSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFE2SUZzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViMlptYzJWMExuZ3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05bVpuTmxkQzU1Q2lBZ0lDQWdJQ0FnSUNBZ0lGMHNDaUFnSUNBZ0lDQWdJQ0FnSUdObGJuUmxjam9nV3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpaVzUwWlhJdWVDd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTJWdWRHVnlMbmtLSUNBZ0lDQWdJQ0FnSUNBZ1hTd0tJQ0FnSUNBZ0lDQWdJQ0FnY205MFlYUnBiMjQ2SUhSb2FYTXVjbTkwWVhScGIyNHNDaUFnSUNBZ0lDQWdJQ0FnSUhkeVlYQTZJRnNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQzSmhjRk1zQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZHlZWEJVQ2lBZ0lDQWdJQ0FnSUNBZ0lGMHNDaUFnSUNBZ0lDQWdJQ0FnSUdadmNtMWhkRG9nZEdocGN5NW1iM0p0WVhRc0NpQWdJQ0FnSUNBZ0lDQWdJR2x1ZEdWeWJtRnNSbTl5YldGME9pQjBhR2x6TG1sdWRHVnlibUZzUm05eWJXRjBMQW9nSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUIwYUdsekxuUjVjR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5VTNCaFkyVTZJSFJvYVhNdVkyOXNiM0pUY0dGalpTd0tJQ0FnSUNBZ0lDQWdJQ0FnYldsdVJtbHNkR1Z5T2lCMGFHbHpMbTFwYmtacGJIUmxjaXdLSUNBZ0lDQWdJQ0FnSUNBZ2JXRm5SbWxzZEdWeU9pQjBhR2x6TG0xaFowWnBiSFJsY2l3S0lDQWdJQ0FnSUNBZ0lDQWdZVzVwYzI5MGNtOXdlVG9nZEdocGN5NWhibWx6YjNSeWIzQjVMQW9nSUNBZ0lDQWdJQ0FnSUNCbWJHbHdXVG9nZEdocGN5NW1iR2x3V1N3S0lDQWdJQ0FnSUNBZ0lDQWdaMlZ1WlhKaGRHVk5hWEJ0WVhCek9pQjBhR2x6TG1kbGJtVnlZWFJsVFdsd2JXRndjeXdLSUNBZ0lDQWdJQ0FnSUNBZ2NISmxiWFZzZEdsd2JIbEJiSEJvWVRvZ2RHaHBjeTV3Y21WdGRXeDBhWEJzZVVGc2NHaGhMQW9nSUNBZ0lDQWdJQ0FnSUNCMWJuQmhZMnRCYkdsbmJtMWxiblE2SUhSb2FYTXVkVzV3WVdOclFXeHBaMjV0Wlc1MENpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1QySnFaV04wTG10bGVYTW9kR2hwY3k1MWMyVnlSR0YwWVNrdWJHVnVaM1JvSUQ0Z01DQW1KaUFvYmk1MWMyVnlSR0YwWVNBOUlIUm9hWE11ZFhObGNrUmhkR0VwTENCMElIeDhJQ2hsTG5SbGVIUjFjbVZ6VzNSb2FYTXVkWFZwWkYwZ1BTQnVLU3dnYmpzS0lDQWdJSDBLSUNBZ0lHUnBjM0J2YzJVb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1a2FYTndZWFJqYUVWMlpXNTBLSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSW1ScGMzQnZjMlVpQ2lBZ0lDQWdJQ0FnZlNrN0NpQWdJQ0I5Q2lBZ0lDQjBjbUZ1YzJadmNtMVZkaWhsS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWJXRndjR2x1WnlBaFBUMGdSMk1wSUhKbGRIVnliaUJsT3dvZ0lDQWdJQ0FnSUdsbUlDaGxMbUZ3Y0d4NVRXRjBjbWw0TXloMGFHbHpMbTFoZEhKcGVDa3NJR1V1ZUNBOElEQWdmSHdnWlM1NElENGdNU2tnYzNkcGRHTm9LSFJvYVhNdWQzSmhjRk1wZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVSeU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pTNTRJRDBnWlM1NElDMGdUV0YwYUM1bWJHOXZjaWhsTG5ncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnU1hRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbExuZ2dQU0JsTG5nZ1BDQXdJRDhnTUNBNklERTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCT2Nqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFMWhkR2d1WVdKektFMWhkR2d1Wm14dmIzSW9aUzU0S1NBbElESXBJRDA5UFNBeElEOGdaUzU0SUQwZ1RXRjBhQzVqWldsc0tHVXVlQ2tnTFNCbExuZ2dPaUJsTG5nZ1BTQmxMbmdnTFNCTllYUm9MbVpzYjI5eUtHVXVlQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0dVdWVTQThJREFnZkh3Z1pTNTVJRDRnTVNrZ2MzZHBkR05vS0hSb2FYTXVkM0poY0ZRcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElFUnlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaUzU1SUQwZ1pTNTVJQzBnVFdGMGFDNW1iRzl2Y2lobExua3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1NYUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbmtnUFNCbExua2dQQ0F3SUQ4Z01DQTZJREU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQk9jam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTFoZEdndVlXSnpLRTFoZEdndVpteHZiM0lvWlM1NUtTQWxJRElwSUQwOVBTQXhJRDhnWlM1NUlEMGdUV0YwYUM1alpXbHNLR1V1ZVNrZ0xTQmxMbmtnT2lCbExua2dQU0JsTG5rZ0xTQk5ZWFJvTG1ac2IyOXlLR1V1ZVNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpteHBjRmtnSmlZZ0tHVXVlU0E5SURFZ0xTQmxMbmtwTENCbE93b2dJQ0FnZlFvZ0lDQWdjMlYwSUc1bFpXUnpWWEJrWVhSbEtHVXBJSHNLSUNBZ0lDQWdJQ0JsSUQwOVBTQWhNQ0FtSmlBb2RHaHBjeTUyWlhKemFXOXVLeXNzSUhSb2FYTXVjMjkxY21ObExtNWxaV1J6VlhCa1lYUmxJRDBnSVRBcE93b2dJQ0FnZlFvZ0lDQWdaMlYwSUdWdVkyOWthVzVuS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCTmN5Z2lWRWhTUlVVdVZHVjRkSFZ5WlRvZ1VISnZjR1Z5ZEhrZ0xtVnVZMjlrYVc1bklHaGhjeUJpWldWdUlISmxjR3hoWTJWa0lHSjVJQzVqYjJ4dmNsTndZV05sTGlJcExDQjBhR2x6TG1OdmJHOXlVM0JoWTJVZ1BUMDlJSFowSUQ4Z2Nta2dPaUIyWkRzS0lDQWdJSDBLSUNBZ0lITmxkQ0JsYm1OdlpHbHVaeWhsS1NCN0NpQWdJQ0FnSUNBZ1RYTW9JbFJJVWtWRkxsUmxlSFIxY21VNklGQnliM0JsY25SNUlDNWxibU52WkdsdVp5Qm9ZWE1nWW1WbGJpQnlaWEJzWVdObFpDQmllU0F1WTI5c2IzSlRjR0ZqWlM0aUtTd2dkR2hwY3k1amIyeHZjbE53WVdObElEMGdaU0E5UFQwZ2Nta2dQeUIyZENBNklGaDBPd29nSUNBZ2ZRcDlPd3BUZEM1RVJVWkJWVXhVWDBsTlFVZEZJRDBnYm5Wc2JEc0tVM1F1UkVWR1FWVk1WRjlOUVZCUVNVNUhJRDBnUjJNN0NsTjBMa1JGUmtGVlRGUmZRVTVKVTA5VVVrOVFXU0E5SURFN0NuWmhjaUJxWlNBOUlHTnNZWE56SUhNeElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F3TENCMElEMGdNQ3dnYmlBOUlEQXNJR2tnUFNBeEtYc0tJQ0FnSUNBZ0lDQnpNUzV3Y205MGIzUjVjR1V1YVhOV1pXTjBiM0kwSUQwZ0lUQXNJSFJvYVhNdWVDQTlJR1VzSUhSb2FYTXVlU0E5SUhRc0lIUm9hWE11ZWlBOUlHNHNJSFJvYVhNdWR5QTlJR2s3Q2lBZ0lDQjlDaUFnSUNCblpYUWdkMmxrZEdnb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZWpzS0lDQWdJSDBLSUNBZ0lITmxkQ0IzYVdSMGFDaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NTZJRDBnWlRzS0lDQWdJSDBLSUNBZ0lHZGxkQ0JvWldsbmFIUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWR6c0tJQ0FnSUgwS0lDQWdJSE5sZENCb1pXbG5hSFFvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11ZHlBOUlHVTdDaUFnSUNCOUNpQWdJQ0J6WlhRb1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxMQ0IwYUdsekxua2dQU0IwTENCMGFHbHpMbm9nUFNCdUxDQjBhR2x6TG5jZ1BTQnBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwVTJOaGJHRnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnWlN3Z2RHaHBjeTU1SUQwZ1pTd2dkR2hwY3k1NklEMGdaU3dnZEdocGN5NTNJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRGZ29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFdTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVTQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSYUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NklEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZjb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5jZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUTI5dGNHOXVaVzUwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J6ZDJsMFkyZ29aU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTURvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVlQ0E5SUhRN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F4T2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTVJRDBnZERzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJREk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxub2dQU0IwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNem9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWR5QTlJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lhVzVrWlhnZ2FYTWdiM1YwSUc5bUlISmhibWRsT2lBaUlDc2daU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdaMlYwUTI5dGNHOXVaVzUwS0dVcElIc0tJQ0FnSUNBZ0lDQnpkMmwwWTJnb1pTbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Ub0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbms3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxubzdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNem9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5jN0NpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ltbHVaR1Y0SUdseklHOTFkQ0J2WmlCeVlXNW5aVG9nSWlBcklHVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2loMGFHbHpMbmdzSUhSb2FYTXVlU3dnZEdocGN5NTZMQ0IwYUdsekxuY3BPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR1V1ZUN3Z2RHaHBjeTU1SUQwZ1pTNTVMQ0IwYUdsekxub2dQU0JsTG5vc0lIUm9hWE11ZHlBOUlHVXVkeUFoUFQwZ2RtOXBaQ0F3SUQ4Z1pTNTNJRG9nTVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGa1pDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXJQU0JsTG5nc0lIUm9hWE11ZVNBclBTQmxMbmtzSUhSb2FYTXVlaUFyUFNCbExub3NJSFJvYVhNdWR5QXJQU0JsTG5jc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCaFpHUlRZMkZzWVhJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0t6MGdaU3dnZEdocGN5NTVJQ3M5SUdVc0lIUm9hWE11ZWlBclBTQmxMQ0IwYUdsekxuY2dLejBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGa1pGWmxZM1J2Y25Nb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsTG5nZ0t5QjBMbmdzSUhSb2FYTXVlU0E5SUdVdWVTQXJJSFF1ZVN3Z2RHaHBjeTU2SUQwZ1pTNTZJQ3NnZEM1NkxDQjBhR2x6TG5jZ1BTQmxMbmNnS3lCMExuY3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmhaR1JUWTJGc1pXUldaV04wYjNJb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dLejBnWlM1NElDb2dkQ3dnZEdocGN5NTVJQ3M5SUdVdWVTQXFJSFFzSUhSb2FYTXVlaUFyUFNCbExub2dLaUIwTENCMGFHbHpMbmNnS3owZ1pTNTNJQ29nZEN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOMVlpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXRQU0JsTG5nc0lIUm9hWE11ZVNBdFBTQmxMbmtzSUhSb2FYTXVlaUF0UFNCbExub3NJSFJvYVhNdWR5QXRQU0JsTG5jc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCemRXSlRZMkZzWVhJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0xUMGdaU3dnZEdocGN5NTVJQzA5SUdVc0lIUm9hWE11ZWlBdFBTQmxMQ0IwYUdsekxuY2dMVDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOMVlsWmxZM1J2Y25Nb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsTG5nZ0xTQjBMbmdzSUhSb2FYTXVlU0E5SUdVdWVTQXRJSFF1ZVN3Z2RHaHBjeTU2SUQwZ1pTNTZJQzBnZEM1NkxDQjBhR2x6TG5jZ1BTQmxMbmNnTFNCMExuY3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRkV3gwYVhCc2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXFQU0JsTG5nc0lIUm9hWE11ZVNBcVBTQmxMbmtzSUhSb2FYTXVlaUFxUFNCbExub3NJSFJvYVhNdWR5QXFQU0JsTG5jc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdGRXeDBhWEJzZVZOallXeGhjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0FxUFNCbExDQjBhR2x6TG5rZ0tqMGdaU3dnZEdocGN5NTZJQ285SUdVc0lIUm9hWE11ZHlBcVBTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZWEJ3YkhsTllYUnlhWGcwS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11ZUN3Z2JpQTlJSFJvYVhNdWVTd2dhU0E5SUhSb2FYTXVlaXdnY2lBOUlIUm9hWE11ZHl3Z1lTQTlJR1V1Wld4bGJXVnVkSE03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR0ZiTUYwZ0tpQjBJQ3NnWVZzMFhTQXFJRzRnS3lCaFd6aGRJQ29nYVNBcklHRmJNVEpkSUNvZ2Npd2dkR2hwY3k1NUlEMGdZVnN4WFNBcUlIUWdLeUJoV3pWZElDb2diaUFySUdGYk9WMGdLaUJwSUNzZ1lWc3hNMTBnS2lCeUxDQjBhR2x6TG5vZ1BTQmhXekpkSUNvZ2RDQXJJR0ZiTmwwZ0tpQnVJQ3NnWVZzeE1GMGdLaUJwSUNzZ1lWc3hORjBnS2lCeUxDQjBhR2x6TG5jZ1BTQmhXek5kSUNvZ2RDQXJJR0ZiTjEwZ0tpQnVJQ3NnWVZzeE1WMGdLaUJwSUNzZ1lWc3hOVjBnS2lCeUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pHbDJhV1JsVTJOaGJHRnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRkV3gwYVhCc2VWTmpZV3hoY2lneElDOGdaU2s3Q2lBZ0lDQjlDaUFnSUNCelpYUkJlR2x6UVc1bmJHVkdjbTl0VVhWaGRHVnlibWx2YmlobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1M0lEMGdNaUFxSUUxaGRHZ3VZV052Y3lobExuY3BPd29nSUNBZ0lDQWdJR3hsZENCMElEMGdUV0YwYUM1emNYSjBLREVnTFNCbExuY2dLaUJsTG5jcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMElEd2dNV1V0TkNBL0lDaDBhR2x6TG5nZ1BTQXhMQ0IwYUdsekxua2dQU0F3TENCMGFHbHpMbm9nUFNBd0tTQTZJQ2gwYUdsekxuZ2dQU0JsTG5nZ0x5QjBMQ0IwYUdsekxua2dQU0JsTG5rZ0x5QjBMQ0IwYUdsekxub2dQU0JsTG5vZ0x5QjBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVGNGFYTkJibWRzWlVaeWIyMVNiM1JoZEdsdmJrMWhkSEpwZUNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRc0lHNHNJR2tzSUhJc0lHTWdQU0JsTG1Wc1pXMWxiblJ6TENCc0lEMGdZMXN3WFN3Z2FDQTlJR05iTkYwc0lIVWdQU0JqV3poZExDQmtJRDBnWTFzeFhTd2daaUE5SUdOYk5WMHNJRzBnUFNCald6bGRMQ0JmSUQwZ1kxc3lYU3dnWnlBOUlHTmJObDBzSUhBZ1BTQmpXekV3WFRzS0lDQWdJQ0FnSUNCcFppQW9UV0YwYUM1aFluTW9hQ0F0SUdRcElEd2dMakF4SUNZbUlFMWhkR2d1WVdKektIVWdMU0JmS1NBOElDNHdNU0FtSmlCTllYUm9MbUZpY3lodElDMGdaeWtnUENBdU1ERXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRTFoZEdndVlXSnpLR2dnS3lCa0tTQThJQzR4SUNZbUlFMWhkR2d1WVdKektIVWdLeUJmS1NBOElDNHhJQ1ltSUUxaGRHZ3VZV0p6S0cwZ0t5Qm5LU0E4SUM0eElDWW1JRTFoZEdndVlXSnpLR3dnS3lCbUlDc2djQ0F0SURNcElEd2dMakVwSUhKbGRIVnliaUIwYUdsekxuTmxkQ2d4TENBd0xDQXdMQ0F3S1N3Z2RHaHBjenNLSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJRTFoZEdndVVFazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjRJRDBnS0d3Z0t5QXhLU0F2SURJc0lIa2dQU0FvWmlBcklERXBJQzhnTWl3Z1lpQTlJQ2h3SUNzZ01Ta2dMeUF5TENCM0lEMGdLR2dnS3lCa0tTQXZJRFFzSUZJZ1BTQW9kU0FySUY4cElDOGdOQ3dnU1NBOUlDaHRJQ3NnWnlrZ0x5QTBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZUNBK0lIa2dKaVlnZUNBK0lHSWdQeUI0SUR3Z0xqQXhJRDhnS0c0Z1BTQXdMQ0JwSUQwZ0xqY3dOekV3TmpjNE1Td2djaUE5SUM0M01EY3hNRFkzT0RFcElEb2dLRzRnUFNCTllYUm9Mbk54Y25Rb2VDa3NJR2tnUFNCM0lDOGdiaXdnY2lBOUlGSWdMeUJ1S1NBNklIa2dQaUJpSUQ4Z2VTQThJQzR3TVNBL0lDaHVJRDBnTGpjd056RXdOamM0TVN3Z2FTQTlJREFzSUhJZ1BTQXVOekEzTVRBMk56Z3hLU0E2SUNocElEMGdUV0YwYUM1emNYSjBLSGtwTENCdUlEMGdkeUF2SUdrc0lISWdQU0JKSUM4Z2FTa2dPaUJpSUR3Z0xqQXhJRDhnS0c0Z1BTQXVOekEzTVRBMk56Z3hMQ0JwSUQwZ0xqY3dOekV3TmpjNE1Td2djaUE5SURBcElEb2dLSElnUFNCTllYUm9Mbk54Y25Rb1lpa3NJRzRnUFNCU0lDOGdjaXdnYVNBOUlFa2dMeUJ5S1N3Z2RHaHBjeTV6WlhRb2Jpd2dhU3dnY2l3Z2RDa3NJSFJvYVhNN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0IySUQwZ1RXRjBhQzV6Y1hKMEtDaG5JQzBnYlNrZ0tpQW9aeUF0SUcwcElDc2dLSFVnTFNCZktTQXFJQ2gxSUMwZ1h5a2dLeUFvWkNBdElHZ3BJQ29nS0dRZ0xTQm9LU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRTFoZEdndVlXSnpLSFlwSUR3Z0xqQXdNU0FtSmlBb2RpQTlJREVwTENCMGFHbHpMbmdnUFNBb1p5QXRJRzBwSUM4Z2Rpd2dkR2hwY3k1NUlEMGdLSFVnTFNCZktTQXZJSFlzSUhSb2FYTXVlaUE5SUNoa0lDMGdhQ2tnTHlCMkxDQjBhR2x6TG5jZ1BTQk5ZWFJvTG1GamIzTW9LR3dnS3lCbUlDc2djQ0F0SURFcElDOGdNaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0YVc0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQk5ZWFJvTG0xcGJpaDBhR2x6TG5nc0lHVXVlQ2tzSUhSb2FYTXVlU0E5SUUxaGRHZ3ViV2x1S0hSb2FYTXVlU3dnWlM1NUtTd2dkR2hwY3k1NklEMGdUV0YwYUM1dGFXNG9kR2hwY3k1NkxDQmxMbm9wTENCMGFHbHpMbmNnUFNCTllYUm9MbTFwYmloMGFHbHpMbmNzSUdVdWR5a3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRZWGdvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCTllYUm9MbTFoZUNoMGFHbHpMbmdzSUdVdWVDa3NJSFJvYVhNdWVTQTlJRTFoZEdndWJXRjRLSFJvYVhNdWVTd2daUzU1S1N3Z2RHaHBjeTU2SUQwZ1RXRjBhQzV0WVhnb2RHaHBjeTU2TENCbExub3BMQ0IwYUdsekxuY2dQU0JOWVhSb0xtMWhlQ2gwYUdsekxuY3NJR1V1ZHlrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamJHRnRjQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1YldGNEtHVXVlQ3dnVFdGMGFDNXRhVzRvZEM1NExDQjBhR2x6TG5ncEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1dFlYZ29aUzU1TENCTllYUm9MbTFwYmloMExua3NJSFJvYVhNdWVTa3BMQ0IwYUdsekxub2dQU0JOWVhSb0xtMWhlQ2hsTG5vc0lFMWhkR2d1YldsdUtIUXVlaXdnZEdocGN5NTZLU2tzSUhSb2FYTXVkeUE5SUUxaGRHZ3ViV0Y0S0dVdWR5d2dUV0YwYUM1dGFXNG9kQzUzTENCMGFHbHpMbmNwS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOc1lXMXdVMk5oYkdGeUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnVFdGMGFDNXRZWGdvWlN3Z1RXRjBhQzV0YVc0b2RDd2dkR2hwY3k1NEtTa3NJSFJvYVhNdWVTQTlJRTFoZEdndWJXRjRLR1VzSUUxaGRHZ3ViV2x1S0hRc0lIUm9hWE11ZVNrcExDQjBhR2x6TG5vZ1BTQk5ZWFJvTG0xaGVDaGxMQ0JOWVhSb0xtMXBiaWgwTENCMGFHbHpMbm9wS1N3Z2RHaHBjeTUzSUQwZ1RXRjBhQzV0WVhnb1pTd2dUV0YwYUM1dGFXNG9kQ3dnZEdocGN5NTNLU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkdGdGNFeGxibWQwYUNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxteGxibWQwYUNncE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJwZG1sa1pWTmpZV3hoY2lodUlIeDhJREVwTG0xMWJIUnBjR3g1VTJOaGJHRnlLRTFoZEdndWJXRjRLR1VzSUUxaGRHZ3ViV2x1S0hRc0lHNHBLU2s3Q2lBZ0lDQjlDaUFnSUNCbWJHOXZjaWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnVFdGMGFDNW1iRzl2Y2loMGFHbHpMbmdwTENCMGFHbHpMbmtnUFNCTllYUm9MbVpzYjI5eUtIUm9hWE11ZVNrc0lIUm9hWE11ZWlBOUlFMWhkR2d1Wm14dmIzSW9kR2hwY3k1NktTd2dkR2hwY3k1M0lEMGdUV0YwYUM1bWJHOXZjaWgwYUdsekxuY3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMlZwYkNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1RXRjBhQzVqWldsc0tIUm9hWE11ZUNrc0lIUm9hWE11ZVNBOUlFMWhkR2d1WTJWcGJDaDBhR2x6TG5rcExDQjBhR2x6TG5vZ1BTQk5ZWFJvTG1ObGFXd29kR2hwY3k1NktTd2dkR2hwY3k1M0lEMGdUV0YwYUM1alpXbHNLSFJvYVhNdWR5a3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnliM1Z1WkNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1RXRjBhQzV5YjNWdVpDaDBhR2x6TG5ncExDQjBhR2x6TG5rZ1BTQk5ZWFJvTG5KdmRXNWtLSFJvYVhNdWVTa3NJSFJvYVhNdWVpQTlJRTFoZEdndWNtOTFibVFvZEdocGN5NTZLU3dnZEdocGN5NTNJRDBnVFdGMGFDNXliM1Z1WkNoMGFHbHpMbmNwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnY205MWJtUlViMXBsY204b0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1ZEhKMWJtTW9kR2hwY3k1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1MGNuVnVZeWgwYUdsekxua3BMQ0IwYUdsekxub2dQU0JOWVhSb0xuUnlkVzVqS0hSb2FYTXVlaWtzSUhSb2FYTXVkeUE5SUUxaGRHZ3VkSEoxYm1Nb2RHaHBjeTUzS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUc1bFoyRjBaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnTFhSb2FYTXVlQ3dnZEdocGN5NTVJRDBnTFhSb2FYTXVlU3dnZEdocGN5NTZJRDBnTFhSb2FYTXVlaXdnZEdocGN5NTNJRDBnTFhSb2FYTXVkeXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR1J2ZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBcUlHVXVlQ0FySUhSb2FYTXVlU0FxSUdVdWVTQXJJSFJvYVhNdWVpQXFJR1V1ZWlBcklIUm9hWE11ZHlBcUlHVXVkenNLSUNBZ0lIMEtJQ0FnSUd4bGJtZDBhRk54S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS2lCMGFHbHpMbmdnS3lCMGFHbHpMbmtnS2lCMGFHbHpMbmtnS3lCMGFHbHpMbm9nS2lCMGFHbHpMbm9nS3lCMGFHbHpMbmNnS2lCMGFHbHpMbmM3Q2lBZ0lDQjlDaUFnSUNCc1pXNW5kR2dvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjM0Z5ZENoMGFHbHpMbmdnS2lCMGFHbHpMbmdnS3lCMGFHbHpMbmtnS2lCMGFHbHpMbmtnS3lCMGFHbHpMbm9nS2lCMGFHbHpMbm9nS3lCMGFHbHpMbmNnS2lCMGFHbHpMbmNwT3dvZ0lDQWdmUW9nSUNBZ2JXRnVhR0YwZEdGdVRHVnVaM1JvS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbUZpY3loMGFHbHpMbmdwSUNzZ1RXRjBhQzVoWW5Nb2RHaHBjeTU1S1NBcklFMWhkR2d1WVdKektIUm9hWE11ZWlrZ0t5Qk5ZWFJvTG1GaWN5aDBhR2x6TG5jcE93b2dJQ0FnZlFvZ0lDQWdibTl5YldGc2FYcGxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtUnBkbWxrWlZOallXeGhjaWgwYUdsekxteGxibWQwYUNncElIeDhJREVwT3dvZ0lDQWdmUW9nSUNBZ2MyVjBUR1Z1WjNSb0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dWIzSnRZV3hwZW1Vb0tTNXRkV3gwYVhCc2VWTmpZV3hoY2lobEtUc0tJQ0FnSUgwS0lDQWdJR3hsY25Bb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dLejBnS0dVdWVDQXRJSFJvYVhNdWVDa2dLaUIwTENCMGFHbHpMbmtnS3owZ0tHVXVlU0F0SUhSb2FYTXVlU2tnS2lCMExDQjBhR2x6TG5vZ0t6MGdLR1V1ZWlBdElIUm9hWE11ZWlrZ0tpQjBMQ0IwYUdsekxuY2dLejBnS0dVdWR5QXRJSFJvYVhNdWR5a2dLaUIwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYkdWeWNGWmxZM1J2Y25Nb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCbExuZ2dLeUFvZEM1NElDMGdaUzU0S1NBcUlHNHNJSFJvYVhNdWVTQTlJR1V1ZVNBcklDaDBMbmtnTFNCbExua3BJQ29nYml3Z2RHaHBjeTU2SUQwZ1pTNTZJQ3NnS0hRdWVpQXRJR1V1ZWlrZ0tpQnVMQ0IwYUdsekxuY2dQU0JsTG5jZ0t5QW9kQzUzSUMwZ1pTNTNLU0FxSUc0c0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCbGNYVmhiSE1vWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExuZ2dQVDA5SUhSb2FYTXVlQ0FtSmlCbExua2dQVDA5SUhSb2FYTXVlU0FtSmlCbExub2dQVDA5SUhSb2FYTXVlaUFtSmlCbExuY2dQVDA5SUhSb2FYTXVkenNLSUNBZ0lIMEtJQ0FnSUdaeWIyMUJjbkpoZVNobExDQjBJRDBnTUNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCbFczUmRMQ0IwYUdsekxua2dQU0JsVzNRZ0t5QXhYU3dnZEdocGN5NTZJRDBnWlZ0MElDc2dNbDBzSUhSb2FYTXVkeUE5SUdWYmRDQXJJRE5kTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5QmNuSmhlU2hsSUQwZ1cxMHNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVmJkRjBnUFNCMGFHbHpMbmdzSUdWYmRDQXJJREZkSUQwZ2RHaHBjeTU1TENCbFczUWdLeUF5WFNBOUlIUm9hWE11ZWl3Z1pWdDBJQ3NnTTEwZ1BTQjBhR2x6TG5jc0lHVTdDaUFnSUNCOUNpQWdJQ0JtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdaUzVuWlhSWUtIUXBMQ0IwYUdsekxua2dQU0JsTG1kbGRGa29kQ2tzSUhSb2FYTXVlaUE5SUdVdVoyVjBXaWgwS1N3Z2RHaHBjeTUzSUQwZ1pTNW5aWFJYS0hRcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2NtRnVaRzl0S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCTllYUm9MbkpoYm1SdmJTZ3BMQ0IwYUdsekxua2dQU0JOWVhSb0xuSmhibVJ2YlNncExDQjBhR2x6TG5vZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwTENCMGFHbHpMbmNnUFNCTllYUm9MbkpoYm1SdmJTZ3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdLbHRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2tnZXdvZ0lDQWdJQ0FnSUhscFpXeGtJSFJvYVhNdWVDd2dlV2xsYkdRZ2RHaHBjeTU1TENCNWFXVnNaQ0IwYUdsekxub3NJSGxwWld4a0lIUm9hWE11ZHpzS0lDQWdJSDBLZlN3Z1oyOGdQU0JqYkdGemN5QmxlSFJsYm1SeklITnVJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBeExDQjBJRDBnTVN3Z2JpQTlJSHQ5S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6VW1WdVpHVnlWR0Z5WjJWMElEMGdJVEFzSUhSb2FYTXVkMmxrZEdnZ1BTQmxMQ0IwYUdsekxtaGxhV2RvZENBOUlIUXNJSFJvYVhNdVpHVndkR2dnUFNBeExDQjBhR2x6TG5OamFYTnpiM0lnUFNCdVpYY2dhbVVvTUN3Z01Dd2daU3dnZENrc0lIUm9hWE11YzJOcGMzTnZjbFJsYzNRZ1BTQWhNU3dnZEdocGN5NTJhV1YzY0c5eWRDQTlJRzVsZHlCcVpTZ3dMQ0F3TENCbExDQjBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c2SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2dkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1pHVndkR2c2SURFS0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lHNHVaVzVqYjJScGJtY2dJVDA5SUhadmFXUWdNQ0FtSmlBb1RYTW9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlWR0Z5WjJWME9pQnZjSFJwYjI0dVpXNWpiMlJwYm1jZ2FHRnpJR0psWlc0Z2NtVndiR0ZqWldRZ1lua2diM0IwYVc5dUxtTnZiRzl5VTNCaFkyVXVJaWtzSUc0dVkyOXNiM0pUY0dGalpTQTlJRzR1Wlc1amIyUnBibWNnUFQwOUlISnBJRDhnZG5RZ09pQllkQ2tzSUc0Z1BTQlBZbXBsWTNRdVlYTnphV2R1S0hzS0lDQWdJQ0FnSUNBZ0lDQWdaMlZ1WlhKaGRHVk5hWEJ0WVhCek9pQWhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXNTBaWEp1WVd4R2IzSnRZWFE2SUc1MWJHd3NDaUFnSUNBZ0lDQWdJQ0FnSUcxcGJrWnBiSFJsY2pvZ2JYUXNDaUFnSUNBZ0lDQWdJQ0FnSUdSbGNIUm9RblZtWm1WeU9pQWhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2MzUmxibU5wYkVKMVptWmxjam9nSVRFc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb1ZHVjRkSFZ5WlRvZ2JuVnNiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2MyRnRjR3hsY3pvZ01Bb2dJQ0FnSUNBZ0lIMHNJRzRwTENCMGFHbHpMblJsZUhSMWNtVWdQU0J1WlhjZ1UzUW9hU3dnYmk1dFlYQndhVzVuTENCdUxuZHlZWEJUTENCdUxuZHlZWEJVTENCdUxtMWhaMFpwYkhSbGNpd2diaTV0YVc1R2FXeDBaWElzSUc0dVptOXliV0YwTENCdUxuUjVjR1VzSUc0dVlXNXBjMjkwY205d2VTd2diaTVqYjJ4dmNsTndZV05sS1N3Z2RHaHBjeTUwWlhoMGRYSmxMbWx6VW1WdVpHVnlWR0Z5WjJWMFZHVjRkSFZ5WlNBOUlDRXdMQ0IwYUdsekxuUmxlSFIxY21VdVpteHBjRmtnUFNBaE1Td2dkR2hwY3k1MFpYaDBkWEpsTG1kbGJtVnlZWFJsVFdsd2JXRndjeUE5SUc0dVoyVnVaWEpoZEdWTmFYQnRZWEJ6TENCMGFHbHpMblJsZUhSMWNtVXVhVzUwWlhKdVlXeEdiM0p0WVhRZ1BTQnVMbWx1ZEdWeWJtRnNSbTl5YldGMExDQjBhR2x6TG1SbGNIUm9RblZtWm1WeUlEMGdiaTVrWlhCMGFFSjFabVpsY2l3Z2RHaHBjeTV6ZEdWdVkybHNRblZtWm1WeUlEMGdiaTV6ZEdWdVkybHNRblZtWm1WeUxDQjBhR2x6TG1SbGNIUm9WR1Y0ZEhWeVpTQTlJRzR1WkdWd2RHaFVaWGgwZFhKbExDQjBhR2x6TG5OaGJYQnNaWE1nUFNCdUxuTmhiWEJzWlhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJUYVhwbEtHVXNJSFFzSUc0Z1BTQXhLU0I3Q2lBZ0lDQWdJQ0FnS0hSb2FYTXVkMmxrZEdnZ0lUMDlJR1VnZkh3Z2RHaHBjeTVvWldsbmFIUWdJVDA5SUhRZ2ZId2dkR2hwY3k1a1pYQjBhQ0FoUFQwZ2Jpa2dKaVlnS0hSb2FYTXVkMmxrZEdnZ1BTQmxMQ0IwYUdsekxtaGxhV2RvZENBOUlIUXNJSFJvYVhNdVpHVndkR2dnUFNCdUxDQjBhR2x6TG5SbGVIUjFjbVV1YVcxaFoyVXVkMmxrZEdnZ1BTQmxMQ0IwYUdsekxuUmxlSFIxY21VdWFXMWhaMlV1YUdWcFoyaDBJRDBnZEN3Z2RHaHBjeTUwWlhoMGRYSmxMbWx0WVdkbExtUmxjSFJvSUQwZ2Jpd2dkR2hwY3k1a2FYTndiM05sS0NrcExDQjBhR2x6TG5acFpYZHdiM0owTG5ObGRDZ3dMQ0F3TENCbExDQjBLU3dnZEdocGN5NXpZMmx6YzI5eUxuTmxkQ2d3TENBd0xDQmxMQ0IwS1RzS0lDQWdJSDBLSUNBZ0lHTnNiMjVsS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpZ3BMbU52Y0hrb2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbmRwWkhSb0lEMGdaUzUzYVdSMGFDd2dkR2hwY3k1b1pXbG5hSFFnUFNCbExtaGxhV2RvZEN3Z2RHaHBjeTVrWlhCMGFDQTlJR1V1WkdWd2RHZ3NJSFJvYVhNdWMyTnBjM052Y2k1amIzQjVLR1V1YzJOcGMzTnZjaWtzSUhSb2FYTXVjMk5wYzNOdmNsUmxjM1FnUFNCbExuTmphWE56YjNKVVpYTjBMQ0IwYUdsekxuWnBaWGR3YjNKMExtTnZjSGtvWlM1MmFXVjNjRzl5ZENrc0lIUm9hWE11ZEdWNGRIVnlaU0E5SUdVdWRHVjRkSFZ5WlM1amJHOXVaU2dwTENCMGFHbHpMblJsZUhSMWNtVXVhWE5TWlc1a1pYSlVZWEpuWlhSVVpYaDBkWEpsSUQwZ0lUQTdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQmxMblJsZUhSMWNtVXVhVzFoWjJVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblJsZUhSMWNtVXVjMjkxY21ObElEMGdibVYzSUVsdUtIUXBMQ0IwYUdsekxtUmxjSFJvUW5WbVptVnlJRDBnWlM1a1pYQjBhRUoxWm1abGNpd2dkR2hwY3k1emRHVnVZMmxzUW5WbVptVnlJRDBnWlM1emRHVnVZMmxzUW5WbVptVnlMQ0JsTG1SbGNIUm9WR1Y0ZEhWeVpTQWhQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWtaWEIwYUZSbGVIUjFjbVVnUFNCbExtUmxjSFJvVkdWNGRIVnlaUzVqYkc5dVpTZ3BLU3dnZEdocGN5NXpZVzF3YkdWeklEMGdaUzV6WVcxd2JHVnpMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaR2x6Y0c5elpTZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtUnBjM0JoZEdOb1JYWmxiblFvZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaVpHbHpjRzl6WlNJS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUgwS2ZTd2djWFFnUFNCamJHRnpjeUJsZUhSbGJtUnpJR2R2SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhMQ0IwSUQwZ01Td2diaUE5SUh0OUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBMQ0J1S1N3Z2RHaHBjeTVwYzFkbFlrZE1VbVZ1WkdWeVZHRnlaMlYwSUQwZ0lUQTdDaUFnSUNCOUNuMHNJRUZ6SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJUZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdiblZzYkN3Z2RDQTlJREVzSUc0Z1BTQXhMQ0JwSUQwZ01TbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2JuVnNiQ2tzSUhSb2FYTXVhWE5FWVhSaFFYSnlZWGxVWlhoMGRYSmxJRDBnSVRBc0lIUm9hWE11YVcxaFoyVWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUc0c0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb09pQnBDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NXRZV2RHYVd4MFpYSWdQU0J3ZEN3Z2RHaHBjeTV0YVc1R2FXeDBaWElnUFNCd2RDd2dkR2hwY3k1M2NtRndVaUE5SUVsMExDQjBhR2x6TG1kbGJtVnlZWFJsVFdsd2JXRndjeUE5SUNFeExDQjBhR2x6TG1ac2FYQlpJRDBnSVRFc0lIUm9hWE11ZFc1d1lXTnJRV3hwWjI1dFpXNTBJRDBnTVRzS0lDQWdJSDBLZlN3Z2Eyd2dQU0JqYkdGemN5QmxlSFJsYm1SeklIRjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBeExDQjBJRDBnTVN3Z2JpQTlJREVwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VzSUhRcExDQjBhR2x6TG1selYyVmlSMHhCY25KaGVWSmxibVJsY2xSaGNtZGxkQ0E5SUNFd0xDQjBhR2x6TG1SbGNIUm9JRDBnYml3Z2RHaHBjeTUwWlhoMGRYSmxJRDBnYm1WM0lFRnpLRzUxYkd3c0lHVXNJSFFzSUc0cExDQjBhR2x6TG5SbGVIUjFjbVV1YVhOU1pXNWtaWEpVWVhKblpYUlVaWGgwZFhKbElEMGdJVEE3Q2lBZ0lDQjlDbjBzSUhGeUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCVGRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnYm5Wc2JDd2dkQ0E5SURFc0lHNGdQU0F4TENCcElEMGdNU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9iblZzYkNrc0lIUm9hWE11YVhORVlYUmhNMFJVWlhoMGRYSmxJRDBnSVRBc0lIUm9hWE11YVcxaFoyVWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUc0c0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb09pQnBDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NXRZV2RHYVd4MFpYSWdQU0J3ZEN3Z2RHaHBjeTV0YVc1R2FXeDBaWElnUFNCd2RDd2dkR2hwY3k1M2NtRndVaUE5SUVsMExDQjBhR2x6TG1kbGJtVnlZWFJsVFdsd2JXRndjeUE5SUNFeExDQjBhR2x6TG1ac2FYQlpJRDBnSVRFc0lIUm9hWE11ZFc1d1lXTnJRV3hwWjI1dFpXNTBJRDBnTVRzS0lDQWdJSDBLZlN3Z1NHd2dQU0JqYkdGemN5QmxlSFJsYm1SeklIRjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBeExDQjBJRDBnTVN3Z2JpQTlJREVwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VzSUhRcExDQjBhR2x6TG1selYyVmlSMHd6UkZKbGJtUmxjbFJoY21kbGRDQTlJQ0V3TENCMGFHbHpMbVJsY0hSb0lEMGdiaXdnZEdocGN5NTBaWGgwZFhKbElEMGdibVYzSUhGeUtHNTFiR3dzSUdVc0lIUXNJRzRwTENCMGFHbHpMblJsZUhSMWNtVXVhWE5TWlc1a1pYSlVZWEpuWlhSVVpYaDBkWEpsSUQwZ0lUQTdDaUFnSUNCOUNuMHNJRWRzSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJ4ZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdNU3dnZENBOUlERXNJRzRnUFNBeExDQnBJRDBnZTMwcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVc0lIUXNJR2twTENCMGFHbHpMbWx6VjJWaVIweE5kV3gwYVhCc1pWSmxibVJsY2xSaGNtZGxkSE1nUFNBaE1Ec0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUm9hWE11ZEdWNGRIVnlaVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUmxlSFIxY21VZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR0VnUFNBd095QmhJRHdnYmpzZ1lTc3JLWFJvYVhNdWRHVjRkSFZ5WlZ0aFhTQTlJSEl1WTJ4dmJtVW9LU3dnZEdocGN5NTBaWGgwZFhKbFcyRmRMbWx6VW1WdVpHVnlWR0Z5WjJWMFZHVjRkSFZ5WlNBOUlDRXdPd29nSUNBZ2ZRb2dJQ0FnYzJWMFUybDZaU2hsTENCMExDQnVJRDBnTVNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuZHBaSFJvSUNFOVBTQmxJSHg4SUhSb2FYTXVhR1ZwWjJoMElDRTlQU0IwSUh4OElIUm9hWE11WkdWd2RHZ2dJVDA5SUc0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNhV1IwYUNBOUlHVXNJSFJvYVhNdWFHVnBaMmgwSUQwZ2RDd2dkR2hwY3k1a1pYQjBhQ0E5SUc0N0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SURBc0lISWdQU0IwYUdsekxuUmxlSFIxY21VdWJHVnVaM1JvT3lCcElEd2djanNnYVNzcktYUm9hWE11ZEdWNGRIVnlaVnRwWFM1cGJXRm5aUzUzYVdSMGFDQTlJR1VzSUhSb2FYTXVkR1Y0ZEhWeVpWdHBYUzVwYldGblpTNW9aV2xuYUhRZ1BTQjBMQ0IwYUdsekxuUmxlSFIxY21WYmFWMHVhVzFoWjJVdVpHVndkR2dnUFNCdU93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUnBjM0J2YzJVb0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdkR2hwY3k1MmFXVjNjRzl5ZEM1elpYUW9NQ3dnTUN3Z1pTd2dkQ2tzSUhSb2FYTXVjMk5wYzNOdmNpNXpaWFFvTUN3Z01Dd2daU3dnZENrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTUzYVdSMGFDQTlJR1V1ZDJsa2RHZ3NJSFJvYVhNdWFHVnBaMmgwSUQwZ1pTNW9aV2xuYUhRc0lIUm9hWE11WkdWd2RHZ2dQU0JsTG1SbGNIUm9MQ0IwYUdsekxuTmphWE56YjNJdVkyOXdlU2hsTG5OamFYTnpiM0lwTENCMGFHbHpMbk5qYVhOemIzSlVaWE4wSUQwZ1pTNXpZMmx6YzI5eVZHVnpkQ3dnZEdocGN5NTJhV1YzY0c5eWRDNWpiM0I1S0dVdWRtbGxkM0J2Y25RcExDQjBhR2x6TG1SbGNIUm9RblZtWm1WeUlEMGdaUzVrWlhCMGFFSjFabVpsY2l3Z2RHaHBjeTV6ZEdWdVkybHNRblZtWm1WeUlEMGdaUzV6ZEdWdVkybHNRblZtWm1WeUxDQmxMbVJsY0hSb1ZHVjRkSFZ5WlNBaFBUMGdiblZzYkNBbUppQW9kR2hwY3k1a1pYQjBhRlJsZUhSMWNtVWdQU0JsTG1SbGNIUm9WR1Y0ZEhWeVpTNWpiRzl1WlNncEtTd2dkR2hwY3k1MFpYaDBkWEpsTG14bGJtZDBhQ0E5SURBN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNQ3dnYmlBOUlHVXVkR1Y0ZEhWeVpTNXNaVzVuZEdnN0lIUWdQQ0J1T3lCMEt5c3BkR2hwY3k1MFpYaDBkWEpsVzNSZElEMGdaUzUwWlhoMGRYSmxXM1JkTG1Oc2IyNWxLQ2tzSUhSb2FYTXVkR1Y0ZEhWeVpWdDBYUzVwYzFKbGJtUmxjbFJoY21kbGRGUmxlSFIxY21VZ1BTQWhNRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLZlN3Z1ZYUWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnTUN3Z2RDQTlJREFzSUc0Z1BTQXdMQ0JwSUQwZ01TbDdDaUFnSUNBZ0lDQWdkR2hwY3k1cGMxRjFZWFJsY201cGIyNGdQU0FoTUN3Z2RHaHBjeTVmZUNBOUlHVXNJSFJvYVhNdVgza2dQU0IwTENCMGFHbHpMbDk2SUQwZ2Jpd2dkR2hwY3k1ZmR5QTlJR2s3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nYzJ4bGNuQkdiR0YwS0dVc0lIUXNJRzRzSUdrc0lISXNJR0VzSUc4cElIc0tJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlHNWJhU0FySURCZExDQnNJRDBnYmx0cElDc2dNVjBzSUdnZ1BTQnVXMmtnS3lBeVhTd2dkU0E5SUc1YmFTQXJJRE5kTENCa0lEMGdjbHRoSUNzZ01GMHNJR1lnUFNCeVcyRWdLeUF4WFN3Z2JTQTlJSEpiWVNBcklESmRMQ0JmSUQwZ2NsdGhJQ3NnTTEwN0NpQWdJQ0FnSUNBZ2FXWWdLRzhnUFQwOUlEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1pWdDBJQ3NnTUYwZ1BTQmpMQ0JsVzNRZ0t5QXhYU0E5SUd3c0lHVmJkQ0FySURKZElEMGdhQ3dnWlZ0MElDc2dNMTBnUFNCMU93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNodklEMDlQU0F4S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR1ZiZENBcklEQmRJRDBnWkN3Z1pWdDBJQ3NnTVYwZ1BTQm1MQ0JsVzNRZ0t5QXlYU0E5SUcwc0lHVmJkQ0FySUROZElEMGdYenNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9kU0FoUFQwZ1h5QjhmQ0JqSUNFOVBTQmtJSHg4SUd3Z0lUMDlJR1lnZkh3Z2FDQWhQVDBnYlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1p5QTlJREVnTFNCdkxDQndJRDBnWXlBcUlHUWdLeUJzSUNvZ1ppQXJJR2dnS2lCdElDc2dkU0FxSUY4c0lIWWdQU0J3SUQ0OUlEQWdQeUF4SURvZ0xURXNJSGdnUFNBeElDMGdjQ0FxSUhBN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoNElENGdUblZ0WW1WeUxrVlFVMGxNVDA0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JpSUQwZ1RXRjBhQzV6Y1hKMEtIZ3BMQ0IzSUQwZ1RXRjBhQzVoZEdGdU1paGlMQ0J3SUNvZ2RpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5JRDBnVFdGMGFDNXphVzRvWnlBcUlIY3BJQzhnWWl3Z2J5QTlJRTFoZEdndWMybHVLRzhnS2lCM0tTQXZJR0k3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIa2dQU0J2SUNvZ2Rqc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTWdQU0JqSUNvZ1p5QXJJR1FnS2lCNUxDQnNJRDBnYkNBcUlHY2dLeUJtSUNvZ2VTd2dhQ0E5SUdnZ0tpQm5JQ3NnYlNBcUlIa3NJSFVnUFNCMUlDb2daeUFySUY4Z0tpQjVMQ0JuSUQwOVBTQXhJQzBnYnlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0lnUFNBeElDOGdUV0YwYUM1emNYSjBLR01nS2lCaklDc2diQ0FxSUd3Z0t5Qm9JQ29nYUNBcklIVWdLaUIxS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdNZ0tqMGdZaXdnYkNBcVBTQmlMQ0JvSUNvOUlHSXNJSFVnS2owZ1lqc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbFczUmRJRDBnWXl3Z1pWdDBJQ3NnTVYwZ1BTQnNMQ0JsVzNRZ0t5QXlYU0E5SUdnc0lHVmJkQ0FySUROZElEMGdkVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJ0ZFd4MGFYQnNlVkYxWVhSbGNtNXBiMjV6Um14aGRDaGxMQ0IwTENCdUxDQnBMQ0J5TENCaEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc4Z1BTQnVXMmxkTENCaklEMGdibHRwSUNzZ01WMHNJR3dnUFNCdVcya2dLeUF5WFN3Z2FDQTlJRzViYVNBcklETmRMQ0IxSUQwZ2NsdGhYU3dnWkNBOUlISmJZU0FySURGZExDQm1JRDBnY2x0aElDc2dNbDBzSUcwZ1BTQnlXMkVnS3lBelhUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pWdDBYU0E5SUc4Z0tpQnRJQ3NnYUNBcUlIVWdLeUJqSUNvZ1ppQXRJR3dnS2lCa0xDQmxXM1FnS3lBeFhTQTlJR01nS2lCdElDc2dhQ0FxSUdRZ0t5QnNJQ29nZFNBdElHOGdLaUJtTENCbFczUWdLeUF5WFNBOUlHd2dLaUJ0SUNzZ2FDQXFJR1lnS3lCdklDb2daQ0F0SUdNZ0tpQjFMQ0JsVzNRZ0t5QXpYU0E5SUdnZ0tpQnRJQzBnYnlBcUlIVWdMU0JqSUNvZ1pDQXRJR3dnS2lCbUxDQmxPd29nSUNBZ2ZRb2dJQ0FnWjJWMElIZ29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzZzdDaUFnSUNCOUNpQWdJQ0J6WlhRZ2VDaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZlQ0E5SUdVc0lIUm9hWE11WDI5dVEyaGhibWRsUTJGc2JHSmhZMnNvS1RzS0lDQWdJSDBLSUNBZ0lHZGxkQ0I1S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDk1T3dvZ0lDQWdmUW9nSUNBZ2MyVjBJSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WDNrZ1BTQmxMQ0IwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcktDazdDaUFnSUNCOUNpQWdJQ0JuWlhRZ2VpZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmVqc0tJQ0FnSUgwS0lDQWdJSE5sZENCNktHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxsOTZJRDBnWlN3Z2RHaHBjeTVmYjI1RGFHRnVaMlZEWVd4c1ltRmpheWdwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBJSGNvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM2M3Q2lBZ0lDQjlDaUFnSUNCelpYUWdkeWhsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmZHlBOUlHVXNJSFJvYVhNdVgyOXVRMmhoYm1kbFEyRnNiR0poWTJzb0tUc0tJQ0FnSUgwS0lDQWdJSE5sZENobExDQjBMQ0J1TENCcEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNnZ1BTQmxMQ0IwYUdsekxsOTVJRDBnZEN3Z2RHaHBjeTVmZWlBOUlHNHNJSFJvYVhNdVgzY2dQU0JwTENCMGFHbHpMbDl2YmtOb1lXNW5aVU5oYkd4aVlXTnJLQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvZEdocGN5NWZlQ3dnZEdocGN5NWZlU3dnZEdocGN5NWZlaXdnZEdocGN5NWZkeWs3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZlQ0E5SUdVdWVDd2dkR2hwY3k1ZmVTQTlJR1V1ZVN3Z2RHaHBjeTVmZWlBOUlHVXVlaXdnZEdocGN5NWZkeUE5SUdVdWR5d2dkR2hwY3k1ZmIyNURhR0Z1WjJWRFlXeHNZbUZqYXlncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbkp2YlVWMWJHVnlLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHVXVYM2dzSUdrZ1BTQmxMbDk1TENCeUlEMGdaUzVmZWl3Z1lTQTlJR1V1WDI5eVpHVnlMQ0J2SUQwZ1RXRjBhQzVqYjNNc0lHTWdQU0JOWVhSb0xuTnBiaXdnYkNBOUlHOG9iaUF2SURJcExDQm9JRDBnYnlocElDOGdNaWtzSUhVZ1BTQnZLSElnTHlBeUtTd2daQ0E5SUdNb2JpQXZJRElwTENCbUlEMGdZeWhwSUM4Z01pa3NJRzBnUFNCaktISWdMeUF5S1RzS0lDQWdJQ0FnSUNCemQybDBZMmdvWVNsN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lsaFpXaUk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTRJRDBnWkNBcUlHZ2dLaUIxSUNzZ2JDQXFJR1lnS2lCdExDQjBhR2x6TGw5NUlEMGdiQ0FxSUdZZ0tpQjFJQzBnWkNBcUlHZ2dLaUJ0TENCMGFHbHpMbDk2SUQwZ2JDQXFJR2dnS2lCdElDc2daQ0FxSUdZZ0tpQjFMQ0IwYUdsekxsOTNJRDBnYkNBcUlHZ2dLaUIxSUMwZ1pDQXFJR1lnS2lCdE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWxsWVdpSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5NElEMGdaQ0FxSUdnZ0tpQjFJQ3NnYkNBcUlHWWdLaUJ0TENCMGFHbHpMbDk1SUQwZ2JDQXFJR1lnS2lCMUlDMGdaQ0FxSUdnZ0tpQnRMQ0IwYUdsekxsOTZJRDBnYkNBcUlHZ2dLaUJ0SUMwZ1pDQXFJR1lnS2lCMUxDQjBhR2x6TGw5M0lEMGdiQ0FxSUdnZ0tpQjFJQ3NnWkNBcUlHWWdLaUJ0T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbHBZV1NJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDk0SUQwZ1pDQXFJR2dnS2lCMUlDMGdiQ0FxSUdZZ0tpQnRMQ0IwYUdsekxsOTVJRDBnYkNBcUlHWWdLaUIxSUNzZ1pDQXFJR2dnS2lCdExDQjBhR2x6TGw5NklEMGdiQ0FxSUdnZ0tpQnRJQ3NnWkNBcUlHWWdLaUIxTENCMGFHbHpMbDkzSUQwZ2JDQXFJR2dnS2lCMUlDMGdaQ0FxSUdZZ0tpQnRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lscFpXQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTRJRDBnWkNBcUlHZ2dLaUIxSUMwZ2JDQXFJR1lnS2lCdExDQjBhR2x6TGw5NUlEMGdiQ0FxSUdZZ0tpQjFJQ3NnWkNBcUlHZ2dLaUJ0TENCMGFHbHpMbDk2SUQwZ2JDQXFJR2dnS2lCdElDMGdaQ0FxSUdZZ0tpQjFMQ0IwYUdsekxsOTNJRDBnYkNBcUlHZ2dLaUIxSUNzZ1pDQXFJR1lnS2lCdE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWxsYVdDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5NElEMGdaQ0FxSUdnZ0tpQjFJQ3NnYkNBcUlHWWdLaUJ0TENCMGFHbHpMbDk1SUQwZ2JDQXFJR1lnS2lCMUlDc2daQ0FxSUdnZ0tpQnRMQ0IwYUdsekxsOTZJRDBnYkNBcUlHZ2dLaUJ0SUMwZ1pDQXFJR1lnS2lCMUxDQjBhR2x6TGw5M0lEMGdiQ0FxSUdnZ0tpQjFJQzBnWkNBcUlHWWdLaUJ0T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbGhhV1NJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDk0SUQwZ1pDQXFJR2dnS2lCMUlDMGdiQ0FxSUdZZ0tpQnRMQ0IwYUdsekxsOTVJRDBnYkNBcUlHWWdLaUIxSUMwZ1pDQXFJR2dnS2lCdExDQjBhR2x6TGw5NklEMGdiQ0FxSUdnZ0tpQnRJQ3NnWkNBcUlHWWdLaUIxTENCMGFHbHpMbDkzSUQwZ2JDQXFJR2dnS2lCMUlDc2daQ0FxSUdZZ0tpQnRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbEYxWVhSbGNtNXBiMjQ2SUM1elpYUkdjbTl0UlhWc1pYSW9LU0JsYm1OdmRXNTBaWEpsWkNCaGJpQjFibXR1YjNkdUlHOXlaR1Z5T2lBaUlDc2dZU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwSUNFOVBTQWhNU0FtSmlCMGFHbHpMbDl2YmtOb1lXNW5aVU5oYkd4aVlXTnJLQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSR2NtOXRRWGhwYzBGdVoyeGxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUWdMeUF5TENCcElEMGdUV0YwYUM1emFXNG9iaWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzZ2dQU0JsTG5nZ0tpQnBMQ0IwYUdsekxsOTVJRDBnWlM1NUlDb2dhU3dnZEdocGN5NWZlaUE5SUdVdWVpQXFJR2tzSUhSb2FYTXVYM2NnUFNCTllYUm9MbU52Y3lodUtTd2dkR2hwY3k1ZmIyNURhR0Z1WjJWRFlXeHNZbUZqYXlncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbkp2YlZKdmRHRjBhVzl1VFdGMGNtbDRLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUdVdVpXeGxiV1Z1ZEhNc0lHNGdQU0IwV3pCZExDQnBJRDBnZEZzMFhTd2djaUE5SUhSYk9GMHNJR0VnUFNCMFd6RmRMQ0J2SUQwZ2RGczFYU3dnWXlBOUlIUmJPVjBzSUd3Z1BTQjBXekpkTENCb0lEMGdkRnMyWFN3Z2RTQTlJSFJiTVRCZExDQmtJRDBnYmlBcklHOGdLeUIxT3dvZ0lDQWdJQ0FnSUdsbUlDaGtJRDRnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJQzQxSUM4Z1RXRjBhQzV6Y1hKMEtHUWdLeUF4S1RzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmR5QTlJQzR5TlNBdklHWXNJSFJvYVhNdVgzZ2dQU0FvYUNBdElHTXBJQ29nWml3Z2RHaHBjeTVmZVNBOUlDaHlJQzBnYkNrZ0tpQm1MQ0IwYUdsekxsOTZJRDBnS0dFZ0xTQnBLU0FxSUdZN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHVJRDRnYnlBbUppQnVJRDRnZFNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJRElnS2lCTllYUm9Mbk54Y25Rb01TQXJJRzRnTFNCdklDMGdkU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNjZ1BTQW9hQ0F0SUdNcElDOGdaaXdnZEdocGN5NWZlQ0E5SUM0eU5TQXFJR1lzSUhSb2FYTXVYM2tnUFNBb2FTQXJJR0VwSUM4Z1ppd2dkR2hwY3k1ZmVpQTlJQ2h5SUNzZ2JDa2dMeUJtT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2J5QStJSFVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdZZ1BTQXlJQ29nVFdGMGFDNXpjWEowS0RFZ0t5QnZJQzBnYmlBdElIVXBPd29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkzSUQwZ0tISWdMU0JzS1NBdklHWXNJSFJvYVhNdVgzZ2dQU0FvYVNBcklHRXBJQzhnWml3Z2RHaHBjeTVmZVNBOUlDNHlOU0FxSUdZc0lIUm9hWE11WDNvZ1BTQW9ZeUFySUdncElDOGdaanNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaaUE5SURJZ0tpQk5ZWFJvTG5OeGNuUW9NU0FySUhVZ0xTQnVJQzBnYnlrN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzY2dQU0FvWVNBdElHa3BJQzhnWml3Z2RHaHBjeTVmZUNBOUlDaHlJQ3NnYkNrZ0x5Qm1MQ0IwYUdsekxsOTVJRDBnS0dNZ0t5Qm9LU0F2SUdZc0lIUm9hWE11WDNvZ1BTQXVNalVnS2lCbU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYjI1RGFHRnVaMlZEWVd4c1ltRmpheWdwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVlZ1YVhSV1pXTjBiM0p6S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJR1V1Wkc5MEtIUXBJQ3NnTVRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmlBOElFNTFiV0psY2k1RlVGTkpURTlPSUQ4Z0tHNGdQU0F3TENCTllYUm9MbUZpY3lobExuZ3BJRDRnVFdGMGFDNWhZbk1vWlM1NktTQS9JQ2gwYUdsekxsOTRJRDBnTFdVdWVTd2dkR2hwY3k1ZmVTQTlJR1V1ZUN3Z2RHaHBjeTVmZWlBOUlEQXNJSFJvYVhNdVgzY2dQU0J1S1NBNklDaDBhR2x6TGw5NElEMGdNQ3dnZEdocGN5NWZlU0E5SUMxbExub3NJSFJvYVhNdVgzb2dQU0JsTG5rc0lIUm9hWE11WDNjZ1BTQnVLU2tnT2lBb2RHaHBjeTVmZUNBOUlHVXVlU0FxSUhRdWVpQXRJR1V1ZWlBcUlIUXVlU3dnZEdocGN5NWZlU0E5SUdVdWVpQXFJSFF1ZUNBdElHVXVlQ0FxSUhRdWVpd2dkR2hwY3k1ZmVpQTlJR1V1ZUNBcUlIUXVlU0F0SUdVdWVTQXFJSFF1ZUN3Z2RHaHBjeTVmZHlBOUlHNHBMQ0IwYUdsekxtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ2ZRb2dJQ0FnWVc1bmJHVlVieWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SURJZ0tpQk5ZWFJvTG1GamIzTW9UV0YwYUM1aFluTW9ZM1FvZEdocGN5NWtiM1FvWlNrc0lDMHhMQ0F4S1NrcE93b2dJQ0FnZlFvZ0lDQWdjbTkwWVhSbFZHOTNZWEprY3lobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxtRnVaMnhsVkc4b1pTazdDaUFnSUNBZ0lDQWdhV1lnS0c0Z1BUMDlJREFwSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ1RXRjBhQzV0YVc0b01Td2dkQ0F2SUc0cE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5zWlhKd0tHVXNJR2twTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYVdSbGJuUnBkSGtvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwS0RBc0lEQXNJREFzSURFcE93b2dJQ0FnZlFvZ0lDQWdhVzUyWlhKMEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdmJtcDFaMkYwWlNncE93b2dJQ0FnZlFvZ0lDQWdZMjl1YW5WbllYUmxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTRJQ285SUMweExDQjBhR2x6TGw5NUlDbzlJQzB4TENCMGFHbHpMbDk2SUNvOUlDMHhMQ0IwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcktDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmtiM1FvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDk0SUNvZ1pTNWZlQ0FySUhSb2FYTXVYM2tnS2lCbExsOTVJQ3NnZEdocGN5NWZlaUFxSUdVdVgzb2dLeUIwYUdsekxsOTNJQ29nWlM1ZmR6c0tJQ0FnSUgwS0lDQWdJR3hsYm1kMGFGTnhLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTRJQ29nZEdocGN5NWZlQ0FySUhSb2FYTXVYM2tnS2lCMGFHbHpMbDk1SUNzZ2RHaHBjeTVmZWlBcUlIUm9hWE11WDNvZ0t5QjBhR2x6TGw5M0lDb2dkR2hwY3k1ZmR6c0tJQ0FnSUgwS0lDQWdJR3hsYm1kMGFDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1emNYSjBLSFJvYVhNdVgzZ2dLaUIwYUdsekxsOTRJQ3NnZEdocGN5NWZlU0FxSUhSb2FYTXVYM2tnS3lCMGFHbHpMbDk2SUNvZ2RHaHBjeTVmZWlBcklIUm9hWE11WDNjZ0tpQjBhR2x6TGw5M0tUc0tJQ0FnSUgwS0lDQWdJRzV2Y20xaGJHbDZaU2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXViR1Z1WjNSb0tDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVWdQVDA5SURBZ1B5QW9kR2hwY3k1ZmVDQTlJREFzSUhSb2FYTXVYM2tnUFNBd0xDQjBhR2x6TGw5NklEMGdNQ3dnZEdocGN5NWZkeUE5SURFcElEb2dLR1VnUFNBeElDOGdaU3dnZEdocGN5NWZlQ0E5SUhSb2FYTXVYM2dnS2lCbExDQjBhR2x6TGw5NUlEMGdkR2hwY3k1ZmVTQXFJR1VzSUhSb2FYTXVYM29nUFNCMGFHbHpMbDk2SUNvZ1pTd2dkR2hwY3k1ZmR5QTlJSFJvYVhNdVgzY2dLaUJsS1N3Z2RHaHBjeTVmYjI1RGFHRnVaMlZEWVd4c1ltRmpheWdwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYlhWc2RHbHdiSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTExYkhScGNHeDVVWFZoZEdWeWJtbHZibk1vZEdocGN5d2daU2s3Q2lBZ0lDQjlDaUFnSUNCd2NtVnRkV3gwYVhCc2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJYVnNkR2x3YkhsUmRXRjBaWEp1YVc5dWN5aGxMQ0IwYUdsektUc0tJQ0FnSUgwS0lDQWdJRzExYkhScGNHeDVVWFZoZEdWeWJtbHZibk1vWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdaUzVmZUN3Z2FTQTlJR1V1WDNrc0lISWdQU0JsTGw5NkxDQmhJRDBnWlM1ZmR5d2dieUE5SUhRdVgzZ3NJR01nUFNCMExsOTVMQ0JzSUQwZ2RDNWZlaXdnYUNBOUlIUXVYM2M3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzZ2dQU0J1SUNvZ2FDQXJJR0VnS2lCdklDc2dhU0FxSUd3Z0xTQnlJQ29nWXl3Z2RHaHBjeTVmZVNBOUlHa2dLaUJvSUNzZ1lTQXFJR01nS3lCeUlDb2dieUF0SUc0Z0tpQnNMQ0IwYUdsekxsOTZJRDBnY2lBcUlHZ2dLeUJoSUNvZ2JDQXJJRzRnS2lCaklDMGdhU0FxSUc4c0lIUm9hWE11WDNjZ1BTQmhJQ29nYUNBdElHNGdLaUJ2SUMwZ2FTQXFJR01nTFNCeUlDb2diQ3dnZEdocGN5NWZiMjVEYUdGdVoyVkRZV3hzWW1GamF5Z3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMnhsY25Bb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaDBJRDA5UFNBd0tTQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lDQWdJQ0JwWmlBb2RDQTlQVDBnTVNrZ2NtVjBkWEp1SUhSb2FYTXVZMjl3ZVNobEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WDNnc0lHa2dQU0IwYUdsekxsOTVMQ0J5SUQwZ2RHaHBjeTVmZWl3Z1lTQTlJSFJvYVhNdVgzY3NJRzhnUFNCaElDb2daUzVmZHlBcklHNGdLaUJsTGw5NElDc2dhU0FxSUdVdVgza2dLeUJ5SUNvZ1pTNWZlanNLSUNBZ0lDQWdJQ0JwWmlBb2J5QThJREFnUHlBb2RHaHBjeTVmZHlBOUlDMWxMbDkzTENCMGFHbHpMbDk0SUQwZ0xXVXVYM2dzSUhSb2FYTXVYM2tnUFNBdFpTNWZlU3dnZEdocGN5NWZlaUE5SUMxbExsOTZMQ0J2SUQwZ0xXOHBJRG9nZEdocGN5NWpiM0I1S0dVcExDQnZJRDQ5SURFcElISmxkSFZ5YmlCMGFHbHpMbDkzSUQwZ1lTd2dkR2hwY3k1ZmVDQTlJRzRzSUhSb2FYTXVYM2tnUFNCcExDQjBhR2x6TGw5NklEMGdjaXdnZEdocGN6c0tJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlERWdMU0J2SUNvZ2J6c0tJQ0FnSUNBZ0lDQnBaaUFvWXlBOFBTQk9kVzFpWlhJdVJWQlRTVXhQVGlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJREVnTFNCME93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmR5QTlJR1lnS2lCaElDc2dkQ0FxSUhSb2FYTXVYM2NzSUhSb2FYTXVYM2dnUFNCbUlDb2diaUFySUhRZ0tpQjBhR2x6TGw5NExDQjBhR2x6TGw5NUlEMGdaaUFxSUdrZ0t5QjBJQ29nZEdocGN5NWZlU3dnZEdocGN5NWZlaUE5SUdZZ0tpQnlJQ3NnZENBcUlIUm9hWE11WDNvc0lIUm9hWE11Ym05eWJXRnNhWHBsS0Nrc0lIUm9hWE11WDI5dVEyaGhibWRsUTJGc2JHSmhZMnNvS1N3Z2RHaHBjenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYkdWMElHd2dQU0JOWVhSb0xuTnhjblFvWXlrc0lHZ2dQU0JOWVhSb0xtRjBZVzR5S0d3c0lHOHBMQ0IxSUQwZ1RXRjBhQzV6YVc0b0tERWdMU0IwS1NBcUlHZ3BJQzhnYkN3Z1pDQTlJRTFoZEdndWMybHVLSFFnS2lCb0tTQXZJR3c3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzY2dQU0JoSUNvZ2RTQXJJSFJvYVhNdVgzY2dLaUJrTENCMGFHbHpMbDk0SUQwZ2JpQXFJSFVnS3lCMGFHbHpMbDk0SUNvZ1pDd2dkR2hwY3k1ZmVTQTlJR2tnS2lCMUlDc2dkR2hwY3k1ZmVTQXFJR1FzSUhSb2FYTXVYM29nUFNCeUlDb2dkU0FySUhSb2FYTXVYM29nS2lCa0xDQjBhR2x6TGw5dmJrTm9ZVzVuWlVOaGJHeGlZV05yS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCemJHVnljRkYxWVhSbGNtNXBiMjV6S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpiM0I1S0dVcExuTnNaWEp3S0hRc0lHNHBPd29nSUNBZ2ZRb2dJQ0FnY21GdVpHOXRLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnVFdGMGFDNXlZVzVrYjIwb0tTd2dkQ0E5SUUxaGRHZ3VjM0Z5ZENneElDMGdaU2tzSUc0Z1BTQk5ZWFJvTG5OeGNuUW9aU2tzSUdrZ1BTQXlJQ29nVFdGMGFDNVFTU0FxSUUxaGRHZ3VjbUZ1Wkc5dEtDa3NJSElnUFNBeUlDb2dUV0YwYUM1UVNTQXFJRTFoZEdndWNtRnVaRzl0S0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwS0hRZ0tpQk5ZWFJvTG1OdmN5aHBLU3dnYmlBcUlFMWhkR2d1YzJsdUtISXBMQ0J1SUNvZ1RXRjBhQzVqYjNNb2Npa3NJSFFnS2lCTllYUm9Mbk5wYmlocEtTazdDaUFnSUNCOUNpQWdJQ0JsY1hWaGJITW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTGw5NElEMDlQU0IwYUdsekxsOTRJQ1ltSUdVdVgza2dQVDA5SUhSb2FYTXVYM2tnSmlZZ1pTNWZlaUE5UFQwZ2RHaHBjeTVmZWlBbUppQmxMbDkzSUQwOVBTQjBhR2x6TGw5M093b2dJQ0FnZlFvZ0lDQWdabkp2YlVGeWNtRjVLR1VzSUhRZ1BTQXdLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzZ2dQU0JsVzNSZExDQjBhR2x6TGw5NUlEMGdaVnQwSUNzZ01WMHNJSFJvYVhNdVgzb2dQU0JsVzNRZ0t5QXlYU3dnZEdocGN5NWZkeUE5SUdWYmRDQXJJRE5kTENCMGFHbHpMbDl2YmtOb1lXNW5aVU5oYkd4aVlXTnJLQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwYjBGeWNtRjVLR1VnUFNCYlhTd2dkQ0E5SURBcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pWdDBYU0E5SUhSb2FYTXVYM2dzSUdWYmRDQXJJREZkSUQwZ2RHaHBjeTVmZVN3Z1pWdDBJQ3NnTWwwZ1BTQjBhR2x6TGw5NkxDQmxXM1FnS3lBelhTQTlJSFJvYVhNdVgzY3NJR1U3Q2lBZ0lDQjlDaUFnSUNCbWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZlQ0E5SUdVdVoyVjBXQ2gwS1N3Z2RHaHBjeTVmZVNBOUlHVXVaMlYwV1NoMEtTd2dkR2hwY3k1ZmVpQTlJR1V1WjJWMFdpaDBLU3dnZEdocGN5NWZkeUE5SUdVdVoyVjBWeWgwS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTBiMEZ5Y21GNUtDazdDaUFnSUNCOUNpQWdJQ0JmYjI1RGFHRnVaMlVvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl2YmtOb1lXNW5aVU5oYkd4aVlXTnJJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUY5dmJrTm9ZVzVuWlVOaGJHeGlZV05yS0NrZ2UzMEtJQ0FnSUNwYlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNncElIc0tJQ0FnSUNBZ0lDQjVhV1ZzWkNCMGFHbHpMbDk0TENCNWFXVnNaQ0IwYUdsekxsOTVMQ0I1YVdWc1pDQjBhR2x6TGw5NkxDQjVhV1ZzWkNCMGFHbHpMbDkzT3dvZ0lDQWdmUXA5TENCQklEMGdZMnhoYzNNZ2N6RWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SURBc0lIUWdQU0F3TENCdUlEMGdNQ2w3Q2lBZ0lDQWdJQ0FnY3pFdWNISnZkRzkwZVhCbExtbHpWbVZqZEc5eU15QTlJQ0V3TENCMGFHbHpMbmdnUFNCbExDQjBhR2x6TG5rZ1BTQjBMQ0IwYUdsekxub2dQU0J1T3dvZ0lDQWdmUW9nSUNBZ2MyVjBLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaUE5UFQwZ2RtOXBaQ0F3SUNZbUlDaHVJRDBnZEdocGN5NTZLU3dnZEdocGN5NTRJRDBnWlN3Z2RHaHBjeTU1SUQwZ2RDd2dkR2hwY3k1NklEMGdiaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZOallXeGhjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUdVc0lIUm9hWE11ZVNBOUlHVXNJSFJvYVhNdWVpQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSWUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5rZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwV2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZWlBOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJEYjIxd2IyNWxiblFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSE4zYVhSamFDaGxLWHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F3T2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTRJRDBnZERzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJREU2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxua2dQU0IwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWVpQTlJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lhVzVrWlhnZ2FYTWdiM1YwSUc5bUlISmhibWRsT2lBaUlDc2daU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdaMlYwUTI5dGNHOXVaVzUwS0dVcElIc0tJQ0FnSUNBZ0lDQnpkMmwwWTJnb1pTbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Ub0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbms3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxubzdDaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9JbWx1WkdWNElHbHpJRzkxZENCdlppQnlZVzVuWlRvZ0lpQXJJR1VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lHTnNiMjVsS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpaDBhR2x6TG5nc0lIUm9hWE11ZVN3Z2RHaHBjeTU2S1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCbExuZ3NJSFJvYVhNdWVTQTlJR1V1ZVN3Z2RHaHBjeTU2SUQwZ1pTNTZMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZV1JrS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUNzOUlHVXVlQ3dnZEdocGN5NTVJQ3M5SUdVdWVTd2dkR2hwY3k1NklDczlJR1V1ZWl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGa1pGTmpZV3hoY2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBclBTQmxMQ0IwYUdsekxua2dLejBnWlN3Z2RHaHBjeTU2SUNzOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmhaR1JXWldOMGIzSnpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1pTNTRJQ3NnZEM1NExDQjBhR2x6TG5rZ1BTQmxMbmtnS3lCMExua3NJSFJvYVhNdWVpQTlJR1V1ZWlBcklIUXVlaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0ZrWkZOallXeGxaRlpsWTNSdmNpaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0FyUFNCbExuZ2dLaUIwTENCMGFHbHpMbmtnS3owZ1pTNTVJQ29nZEN3Z2RHaHBjeTU2SUNzOUlHVXVlaUFxSUhRc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCemRXSW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dMVDBnWlM1NExDQjBhR2x6TG5rZ0xUMGdaUzU1TENCMGFHbHpMbm9nTFQwZ1pTNTZMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjM1ZpVTJOaGJHRnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJQzA5SUdVc0lIUm9hWE11ZVNBdFBTQmxMQ0IwYUdsekxub2dMVDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOMVlsWmxZM1J2Y25Nb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsTG5nZ0xTQjBMbmdzSUhSb2FYTXVlU0E5SUdVdWVTQXRJSFF1ZVN3Z2RHaHBjeTU2SUQwZ1pTNTZJQzBnZEM1NkxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JYVnNkR2x3Ykhrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0tqMGdaUzU0TENCMGFHbHpMbmtnS2owZ1pTNTVMQ0IwYUdsekxub2dLajBnWlM1NkxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JYVnNkR2x3YkhsVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS2owZ1pTd2dkR2hwY3k1NUlDbzlJR1VzSUhSb2FYTXVlaUFxUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JYVnNkR2x3YkhsV1pXTjBiM0p6S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdaUzU0SUNvZ2RDNTRMQ0IwYUdsekxua2dQU0JsTG5rZ0tpQjBMbmtzSUhSb2FYTXVlaUE5SUdVdWVpQXFJSFF1ZWl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGd2NHeDVSWFZzWlhJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1Gd2NHeDVVWFZoZEdWeWJtbHZiaWhYYkM1elpYUkdjbTl0UlhWc1pYSW9aU2twT3dvZ0lDQWdmUW9nSUNBZ1lYQndiSGxCZUdselFXNW5iR1VvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1Gd2NHeDVVWFZoZEdWeWJtbHZiaWhYYkM1elpYUkdjbTl0UVhocGMwRnVaMnhsS0dVc0lIUXBLVHNLSUNBZ0lIMEtJQ0FnSUdGd2NHeDVUV0YwY21sNE15aGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuZ3NJRzRnUFNCMGFHbHpMbmtzSUdrZ1BTQjBhR2x6TG5vc0lISWdQU0JsTG1Wc1pXMWxiblJ6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0J5V3pCZElDb2dkQ0FySUhKYk0xMGdLaUJ1SUNzZ2NsczJYU0FxSUdrc0lIUm9hWE11ZVNBOUlISmJNVjBnS2lCMElDc2djbHMwWFNBcUlHNGdLeUJ5V3pkZElDb2dhU3dnZEdocGN5NTZJRDBnY2xzeVhTQXFJSFFnS3lCeVd6VmRJQ29nYmlBcklISmJPRjBnS2lCcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1lYQndiSGxPYjNKdFlXeE5ZWFJ5YVhnb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1Gd2NHeDVUV0YwY21sNE15aGxLUzV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJSDBLSUNBZ0lHRndjR3g1VFdGMGNtbDROQ2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbmdzSUc0Z1BTQjBhR2x6TG5rc0lHa2dQU0IwYUdsekxub3NJSElnUFNCbExtVnNaVzFsYm5SekxDQmhJRDBnTVNBdklDaHlXek5kSUNvZ2RDQXJJSEpiTjEwZ0tpQnVJQ3NnY2xzeE1WMGdLaUJwSUNzZ2Nsc3hOVjBwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0FvY2xzd1hTQXFJSFFnS3lCeVd6UmRJQ29nYmlBcklISmJPRjBnS2lCcElDc2djbHN4TWwwcElDb2dZU3dnZEdocGN5NTVJRDBnS0hKYk1WMGdLaUIwSUNzZ2NsczFYU0FxSUc0Z0t5QnlXemxkSUNvZ2FTQXJJSEpiTVROZEtTQXFJR0VzSUhSb2FYTXVlaUE5SUNoeVd6SmRJQ29nZENBcklISmJObDBnS2lCdUlDc2djbHN4TUYwZ0tpQnBJQ3NnY2xzeE5GMHBJQ29nWVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGd2NHeDVVWFZoZEdWeWJtbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbmdzSUc0Z1BTQjBhR2x6TG5rc0lHa2dQU0IwYUdsekxub3NJSElnUFNCbExuZ3NJR0VnUFNCbExua3NJRzhnUFNCbExub3NJR01nUFNCbExuY3NJR3dnUFNCaklDb2dkQ0FySUdFZ0tpQnBJQzBnYnlBcUlHNHNJR2dnUFNCaklDb2diaUFySUc4Z0tpQjBJQzBnY2lBcUlHa3NJSFVnUFNCaklDb2dhU0FySUhJZ0tpQnVJQzBnWVNBcUlIUXNJR1FnUFNBdGNpQXFJSFFnTFNCaElDb2diaUF0SUc4Z0tpQnBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQnNJQ29nWXlBcklHUWdLaUF0Y2lBcklHZ2dLaUF0YnlBdElIVWdLaUF0WVN3Z2RHaHBjeTU1SUQwZ2FDQXFJR01nS3lCa0lDb2dMV0VnS3lCMUlDb2dMWElnTFNCc0lDb2dMVzhzSUhSb2FYTXVlaUE5SUhVZ0tpQmpJQ3NnWkNBcUlDMXZJQ3NnYkNBcUlDMWhJQzBnYUNBcUlDMXlMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjSEp2YW1WamRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlYQndiSGxOWVhSeWFYZzBLR1V1YldGMGNtbDRWMjl5YkdSSmJuWmxjbk5sS1M1aGNIQnNlVTFoZEhKcGVEUW9aUzV3Y205cVpXTjBhVzl1VFdGMGNtbDRLVHNLSUNBZ0lIMEtJQ0FnSUhWdWNISnZhbVZqZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVhCd2JIbE5ZWFJ5YVhnMEtHVXVjSEp2YW1WamRHbHZiazFoZEhKcGVFbHVkbVZ5YzJVcExtRndjR3g1VFdGMGNtbDROQ2hsTG0xaGRISnBlRmR2Y214a0tUc0tJQ0FnSUgwS0lDQWdJSFJ5WVc1elptOXliVVJwY21WamRHbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbmdzSUc0Z1BTQjBhR2x6TG5rc0lHa2dQU0IwYUdsekxub3NJSElnUFNCbExtVnNaVzFsYm5Sek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCeVd6QmRJQ29nZENBcklISmJORjBnS2lCdUlDc2djbHM0WFNBcUlHa3NJSFJvYVhNdWVTQTlJSEpiTVYwZ0tpQjBJQ3NnY2xzMVhTQXFJRzRnS3lCeVd6bGRJQ29nYVN3Z2RHaHBjeTU2SUQwZ2Nsc3lYU0FxSUhRZ0t5QnlXelpkSUNvZ2JpQXJJSEpiTVRCZElDb2dhU3dnZEdocGN5NXViM0p0WVd4cGVtVW9LVHNLSUNBZ0lIMEtJQ0FnSUdScGRtbGtaU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0F2UFNCbExuZ3NJSFJvYVhNdWVTQXZQU0JsTG5rc0lIUm9hWE11ZWlBdlBTQmxMbm9zSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JrYVhacFpHVlRZMkZzWVhJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xMWJIUnBjR3g1VTJOaGJHRnlLREVnTHlCbEtUc0tJQ0FnSUgwS0lDQWdJRzFwYmlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1YldsdUtIUm9hWE11ZUN3Z1pTNTRLU3dnZEdocGN5NTVJRDBnVFdGMGFDNXRhVzRvZEdocGN5NTVMQ0JsTG5rcExDQjBhR2x6TG5vZ1BTQk5ZWFJvTG0xcGJpaDBhR2x6TG5vc0lHVXVlaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0WVhnb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQk5ZWFJvTG0xaGVDaDBhR2x6TG5nc0lHVXVlQ2tzSUhSb2FYTXVlU0E5SUUxaGRHZ3ViV0Y0S0hSb2FYTXVlU3dnWlM1NUtTd2dkR2hwY3k1NklEMGdUV0YwYUM1dFlYZ29kR2hwY3k1NkxDQmxMbm9wTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJ4aGJYQW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCTllYUm9MbTFoZUNobExuZ3NJRTFoZEdndWJXbHVLSFF1ZUN3Z2RHaHBjeTU0S1Nrc0lIUm9hWE11ZVNBOUlFMWhkR2d1YldGNEtHVXVlU3dnVFdGMGFDNXRhVzRvZEM1NUxDQjBhR2x6TG5rcEtTd2dkR2hwY3k1NklEMGdUV0YwYUM1dFlYZ29aUzU2TENCTllYUm9MbTFwYmloMExub3NJSFJvYVhNdWVpa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMnhoYlhCVFkyRnNZWElvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQk5ZWFJvTG0xaGVDaGxMQ0JOWVhSb0xtMXBiaWgwTENCMGFHbHpMbmdwS1N3Z2RHaHBjeTU1SUQwZ1RXRjBhQzV0WVhnb1pTd2dUV0YwYUM1dGFXNG9kQ3dnZEdocGN5NTVLU2tzSUhSb2FYTXVlaUE5SUUxaGRHZ3ViV0Y0S0dVc0lFMWhkR2d1YldsdUtIUXNJSFJvYVhNdWVpa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMnhoYlhCTVpXNW5kR2dvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1c1pXNW5kR2dvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWthWFpwWkdWVFkyRnNZWElvYmlCOGZDQXhLUzV0ZFd4MGFYQnNlVk5qWVd4aGNpaE5ZWFJvTG0xaGVDaGxMQ0JOWVhSb0xtMXBiaWgwTENCdUtTa3BPd29nSUNBZ2ZRb2dJQ0FnWm14dmIzSW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJRTFoZEdndVpteHZiM0lvZEdocGN5NTRLU3dnZEdocGN5NTVJRDBnVFdGMGFDNW1iRzl2Y2loMGFHbHpMbmtwTENCMGFHbHpMbm9nUFNCTllYUm9MbVpzYjI5eUtIUm9hWE11ZWlrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCalpXbHNLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JOWVhSb0xtTmxhV3dvZEdocGN5NTRLU3dnZEdocGN5NTVJRDBnVFdGMGFDNWpaV2xzS0hSb2FYTXVlU2tzSUhSb2FYTXVlaUE5SUUxaGRHZ3VZMlZwYkNoMGFHbHpMbm9wTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnY205MWJtUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJRTFoZEdndWNtOTFibVFvZEdocGN5NTRLU3dnZEdocGN5NTVJRDBnVFdGMGFDNXliM1Z1WkNoMGFHbHpMbmtwTENCMGFHbHpMbm9nUFNCTllYUm9Mbkp2ZFc1a0tIUm9hWE11ZWlrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeWIzVnVaRlJ2V21WeWJ5Z3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdUV0YwYUM1MGNuVnVZeWgwYUdsekxuZ3BMQ0IwYUdsekxua2dQU0JOWVhSb0xuUnlkVzVqS0hSb2FYTXVlU2tzSUhSb2FYTXVlaUE5SUUxaGRHZ3VkSEoxYm1Nb2RHaHBjeTU2S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUc1bFoyRjBaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnTFhSb2FYTXVlQ3dnZEdocGN5NTVJRDBnTFhSb2FYTXVlU3dnZEdocGN5NTZJRDBnTFhSb2FYTXVlaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR1J2ZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBcUlHVXVlQ0FySUhSb2FYTXVlU0FxSUdVdWVTQXJJSFJvYVhNdWVpQXFJR1V1ZWpzS0lDQWdJSDBLSUNBZ0lHeGxibWQwYUZOeEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0tpQjBhR2x6TG5nZ0t5QjBhR2x6TG5rZ0tpQjBhR2x6TG5rZ0t5QjBhR2x6TG5vZ0tpQjBhR2x6TG5vN0NpQWdJQ0I5Q2lBZ0lDQnNaVzVuZEdnb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1YzNGeWRDaDBhR2x6TG5nZ0tpQjBhR2x6TG5nZ0t5QjBhR2x6TG5rZ0tpQjBhR2x6TG5rZ0t5QjBhR2x6TG5vZ0tpQjBhR2x6TG5vcE93b2dJQ0FnZlFvZ0lDQWdiV0Z1YUdGMGRHRnVUR1Z1WjNSb0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG1GaWN5aDBhR2x6TG5ncElDc2dUV0YwYUM1aFluTW9kR2hwY3k1NUtTQXJJRTFoZEdndVlXSnpLSFJvYVhNdWVpazdDaUFnSUNCOUNpQWdJQ0J1YjNKdFlXeHBlbVVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaR2wyYVdSbFUyTmhiR0Z5S0hSb2FYTXViR1Z1WjNSb0tDa2dmSHdnTVNrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJNWlc1bmRHZ29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNXZjbTFoYkdsNlpTZ3BMbTExYkhScGNHeDVVMk5oYkdGeUtHVXBPd29nSUNBZ2ZRb2dJQ0FnYkdWeWNDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0FyUFNBb1pTNTRJQzBnZEdocGN5NTRLU0FxSUhRc0lIUm9hWE11ZVNBclBTQW9aUzU1SUMwZ2RHaHBjeTU1S1NBcUlIUXNJSFJvYVhNdWVpQXJQU0FvWlM1NklDMGdkR2hwY3k1NktTQXFJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JzWlhKd1ZtVmpkRzl5Y3lobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUdVdWVDQXJJQ2gwTG5nZ0xTQmxMbmdwSUNvZ2Jpd2dkR2hwY3k1NUlEMGdaUzU1SUNzZ0tIUXVlU0F0SUdVdWVTa2dLaUJ1TENCMGFHbHpMbm9nUFNCbExub2dLeUFvZEM1NklDMGdaUzU2S1NBcUlHNHNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpjbTl6Y3lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKdmMzTldaV04wYjNKektIUm9hWE1zSUdVcE93b2dJQ0FnZlFvZ0lDQWdZM0p2YzNOV1pXTjBiM0p6S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJR1V1ZUN3Z2FTQTlJR1V1ZVN3Z2NpQTlJR1V1ZWl3Z1lTQTlJSFF1ZUN3Z2J5QTlJSFF1ZVN3Z1l5QTlJSFF1ZWpzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnYVNBcUlHTWdMU0J5SUNvZ2J5d2dkR2hwY3k1NUlEMGdjaUFxSUdFZ0xTQnVJQ29nWXl3Z2RHaHBjeTU2SUQwZ2JpQXFJRzhnTFNCcElDb2dZU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSEJ5YjJwbFkzUlBibFpsWTNSdmNpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JsTG14bGJtZDBhRk54S0NrN0NpQWdJQ0FnSUNBZ2FXWWdLSFFnUFQwOUlEQXBJSEpsZEhWeWJpQjBhR2x6TG5ObGRDZ3dMQ0F3TENBd0tUc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHVXVaRzkwS0hSb2FYTXBJQzhnZERzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpiM0I1S0dVcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0c0cE93b2dJQ0FnZlFvZ0lDQWdjSEp2YW1WamRFOXVVR3hoYm1Vb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQlBZUzVqYjNCNUtIUm9hWE1wTG5CeWIycGxZM1JQYmxabFkzUnZjaWhsS1N3Z2RHaHBjeTV6ZFdJb1QyRXBPd29nSUNBZ2ZRb2dJQ0FnY21WbWJHVmpkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjM1ZpS0U5aExtTnZjSGtvWlNrdWJYVnNkR2x3YkhsVFkyRnNZWElvTWlBcUlIUm9hWE11Wkc5MEtHVXBLU2s3Q2lBZ0lDQjlDaUFnSUNCaGJtZHNaVlJ2S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlFMWhkR2d1YzNGeWRDaDBhR2x6TG14bGJtZDBhRk54S0NrZ0tpQmxMbXhsYm1kMGFGTnhLQ2twT3dvZ0lDQWdJQ0FnSUdsbUlDaDBJRDA5UFNBd0tTQnlaWFIxY200Z1RXRjBhQzVRU1NBdklESTdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1SdmRDaGxLU0F2SUhRN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VZV052Y3loamRDaHVMQ0F0TVN3Z01Ta3BPd29nSUNBZ2ZRb2dJQ0FnWkdsemRHRnVZMlZVYnlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1YzNGeWRDaDBhR2x6TG1ScGMzUmhibU5sVkc5VGNYVmhjbVZrS0dVcEtUc0tJQ0FnSUgwS0lDQWdJR1JwYzNSaGJtTmxWRzlUY1hWaGNtVmtLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVlQ0F0SUdVdWVDd2diaUE5SUhSb2FYTXVlU0F0SUdVdWVTd2dhU0E5SUhSb2FYTXVlaUF0SUdVdWVqc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDQXFJSFFnS3lCdUlDb2diaUFySUdrZ0tpQnBPd29nSUNBZ2ZRb2dJQ0FnYldGdWFHRjBkR0Z1UkdsemRHRnVZMlZVYnlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1WVdKektIUm9hWE11ZUNBdElHVXVlQ2tnS3lCTllYUm9MbUZpY3loMGFHbHpMbmtnTFNCbExua3BJQ3NnVFdGMGFDNWhZbk1vZEdocGN5NTZJQzBnWlM1NktUc0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMVRjR2hsY21sallXd29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTmxkRVp5YjIxVGNHaGxjbWxqWVd4RGIyOXlaSE1vWlM1eVlXUnBkWE1zSUdVdWNHaHBMQ0JsTG5Sb1pYUmhLVHNLSUNBZ0lIMEtJQ0FnSUhObGRFWnliMjFUY0dobGNtbGpZV3hEYjI5eVpITW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJR3hsZENCcElEMGdUV0YwYUM1emFXNG9kQ2tnS2lCbE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCcElDb2dUV0YwYUM1emFXNG9iaWtzSUhSb2FYTXVlU0E5SUUxaGRHZ3VZMjl6S0hRcElDb2daU3dnZEdocGN5NTZJRDBnYVNBcUlFMWhkR2d1WTI5ektHNHBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJVTjViR2x1WkhKcFkyRnNLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpaWFJHY205dFEzbHNhVzVrY21sallXeERiMjl5WkhNb1pTNXlZV1JwZFhNc0lHVXVkR2hsZEdFc0lHVXVlU2s3Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0UTNsc2FXNWtjbWxqWVd4RGIyOXlaSE1vWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsSUNvZ1RXRjBhQzV6YVc0b2RDa3NJSFJvYVhNdWVTQTlJRzRzSUhSb2FYTXVlaUE5SUdVZ0tpQk5ZWFJvTG1OdmN5aDBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbVZzWlcxbGJuUnpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQjBXekV5WFN3Z2RHaHBjeTU1SUQwZ2RGc3hNMTBzSUhSb2FYTXVlaUE5SUhSYk1UUmRMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJVMWhkSEpwZUZOallXeGxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVjMlYwUm5KdmJVMWhkSEpwZUVOdmJIVnRiaWhsTENBd0tTNXNaVzVuZEdnb0tTd2diaUE5SUhSb2FYTXVjMlYwUm5KdmJVMWhkSEpwZUVOdmJIVnRiaWhsTENBeEtTNXNaVzVuZEdnb0tTd2dhU0E5SUhSb2FYTXVjMlYwUm5KdmJVMWhkSEpwZUVOdmJIVnRiaWhsTENBeUtTNXNaVzVuZEdnb0tUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ2RDd2dkR2hwY3k1NUlEMGdiaXdnZEdocGN5NTZJRDBnYVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFWnliMjFOWVhSeWFYaERiMngxYlc0b1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnliMjFCY25KaGVTaGxMbVZzWlcxbGJuUnpMQ0IwSUNvZ05DazdDaUFnSUNCOUNpQWdJQ0J6WlhSR2NtOXRUV0YwY21sNE0wTnZiSFZ0YmlobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpuSnZiVUZ5Y21GNUtHVXVaV3hsYldWdWRITXNJSFFnS2lBektUc0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMUZkV3hsY2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlHVXVYM2dzSUhSb2FYTXVlU0E5SUdVdVgza3NJSFJvYVhNdWVpQTlJR1V1WDNvc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0UTI5c2IzSW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsTG5Jc0lIUm9hWE11ZVNBOUlHVXVaeXdnZEdocGN5NTZJRDBnWlM1aUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pYRjFZV3h6S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNTRJRDA5UFNCMGFHbHpMbmdnSmlZZ1pTNTVJRDA5UFNCMGFHbHpMbmtnSmlZZ1pTNTZJRDA5UFNCMGFHbHpMbm83Q2lBZ0lDQjlDaUFnSUNCbWNtOXRRWEp5WVhrb1pTd2dkQ0E5SURBcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1pWdDBYU3dnZEdocGN5NTVJRDBnWlZ0MElDc2dNVjBzSUhSb2FYTXVlaUE5SUdWYmRDQXJJREpkTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5QmNuSmhlU2hsSUQwZ1cxMHNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVmJkRjBnUFNCMGFHbHpMbmdzSUdWYmRDQXJJREZkSUQwZ2RHaHBjeTU1TENCbFczUWdLeUF5WFNBOUlIUm9hWE11ZWl3Z1pUc0tJQ0FnSUgwS0lDQWdJR1p5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxMbWRsZEZnb2RDa3NJSFJvYVhNdWVTQTlJR1V1WjJWMFdTaDBLU3dnZEdocGN5NTZJRDBnWlM1blpYUmFLSFFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnY21GdVpHOXRLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JOWVhSb0xuSmhibVJ2YlNncExDQjBhR2x6TG5rZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwTENCMGFHbHpMbm9nUFNCTllYUm9MbkpoYm1SdmJTZ3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbUZ1Wkc5dFJHbHlaV04wYVc5dUtDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdLRTFoZEdndWNtRnVaRzl0S0NrZ0xTQXVOU2tnS2lBeUxDQjBJRDBnVFdGMGFDNXlZVzVrYjIwb0tTQXFJRTFoZEdndVVFa2dLaUF5TENCdUlEMGdUV0YwYUM1emNYSjBLREVnTFNCbElDb3FJRElwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0J1SUNvZ1RXRjBhQzVqYjNNb2RDa3NJSFJvYVhNdWVTQTlJRzRnS2lCTllYUm9Mbk5wYmloMEtTd2dkR2hwY3k1NklEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJQ3BiVTNsdFltOXNMbWwwWlhKaGRHOXlYU2dwSUhzS0lDQWdJQ0FnSUNCNWFXVnNaQ0IwYUdsekxuZ3NJSGxwWld4a0lIUm9hWE11ZVN3Z2VXbGxiR1FnZEdocGN5NTZPd29nSUNBZ2ZRcDlMQ0JQWVNBOUlHNWxkeUJCTENCWGJDQTlJRzVsZHlCVmRDd2dVWFFnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ2JtVjNJRUVvTVNBdklEQXNJREVnTHlBd0xDQXhJQzhnTUNrc0lIUWdQU0J1WlhjZ1FTZ3RNU0F2SURBc0lDMHhJQzhnTUN3Z0xURWdMeUF3S1NsN0NpQWdJQ0FnSUNBZ2RHaHBjeTVwYzBKdmVETWdQU0FoTUN3Z2RHaHBjeTV0YVc0Z1BTQmxMQ0IwYUdsekxtMWhlQ0E5SUhRN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNWpiM0I1S0dVcExDQjBhR2x6TG0xaGVDNWpiM0I1S0hRcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbkp2YlVGeWNtRjVLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbTFoYTJWRmJYQjBlU2dwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZENBOUlEQXNJRzRnUFNCbExteGxibWQwYURzZ2RDQThJRzQ3SUhRZ0t6MGdNeWwwYUdsekxtVjRjR0Z1WkVKNVVHOXBiblFvWTI0dVpuSnZiVUZ5Y21GNUtHVXNJSFFwS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdWJXRnJaVVZ0Y0hSNUtDazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJR1V1WTI5MWJuUTdJSFFnUENCdU95QjBLeXNwZEdocGN5NWxlSEJoYm1SQ2VWQnZhVzUwS0dOdUxtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9aU3dnZENrcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVkJ2YVc1MGN5aGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXRZV3RsUlcxd2RIa29LVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnWlM1c1pXNW5kR2c3SUhRZ1BDQnVPeUIwS3lzcGRHaHBjeTVsZUhCaGJtUkNlVkJ2YVc1MEtHVmJkRjBwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJVTmxiblJsY2tGdVpGTnBlbVVvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdZMjR1WTI5d2VTaDBLUzV0ZFd4MGFYQnNlVk5qWVd4aGNpZ3VOU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXbHVMbU52Y0hrb1pTa3VjM1ZpS0c0cExDQjBhR2x6TG0xaGVDNWpiM0I1S0dVcExtRmtaQ2h1S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFWnliMjFQWW1wbFkzUW9aU3dnZENBOUlDRXhLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXRnJaVVZ0Y0hSNUtDa3NJSFJvYVhNdVpYaHdZVzVrUW5sUFltcGxZM1FvWlN3Z2RDazdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvS1M1amIzQjVLSFJvYVhNcE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldsdUxtTnZjSGtvWlM1dGFXNHBMQ0IwYUdsekxtMWhlQzVqYjNCNUtHVXViV0Y0S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxaGEyVkZiWEIwZVNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV0YVc0dWVDQTlJSFJvYVhNdWJXbHVMbmtnUFNCMGFHbHpMbTFwYmk1NklEMGdNU0F2SURBc0lIUm9hWE11YldGNExuZ2dQU0IwYUdsekxtMWhlQzU1SUQwZ2RHaHBjeTV0WVhndWVpQTlJQzB4SUM4Z01Dd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHbHpSVzF3ZEhrb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldGNExuZ2dQQ0IwYUdsekxtMXBiaTU0SUh4OElIUm9hWE11YldGNExua2dQQ0IwYUdsekxtMXBiaTU1SUh4OElIUm9hWE11YldGNExub2dQQ0IwYUdsekxtMXBiaTU2T3dvZ0lDQWdmUW9nSUNBZ1oyVjBRMlZ1ZEdWeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1cGMwVnRjSFI1S0NrZ1B5QmxMbk5sZENnd0xDQXdMQ0F3S1NBNklHVXVZV1JrVm1WamRHOXljeWgwYUdsekxtMXBiaXdnZEdocGN5NXRZWGdwTG0xMWJIUnBjR3g1VTJOaGJHRnlLQzQxS1RzS0lDQWdJSDBLSUNBZ0lHZGxkRk5wZW1Vb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1selJXMXdkSGtvS1NBL0lHVXVjMlYwS0RBc0lEQXNJREFwSURvZ1pTNXpkV0pXWldOMGIzSnpLSFJvYVhNdWJXRjRMQ0IwYUdsekxtMXBiaWs3Q2lBZ0lDQjlDaUFnSUNCbGVIQmhibVJDZVZCdmFXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRhVzR1YldsdUtHVXBMQ0IwYUdsekxtMWhlQzV0WVhnb1pTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmxlSEJoYm1SQ2VWWmxZM1J2Y2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldsdUxuTjFZaWhsS1N3Z2RHaHBjeTV0WVhndVlXUmtLR1VwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWlhod1lXNWtRbmxUWTJGc1lYSW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMXBiaTVoWkdSVFkyRnNZWElvTFdVcExDQjBhR2x6TG0xaGVDNWhaR1JUWTJGc1lYSW9aU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JsZUhCaGJtUkNlVTlpYW1WamRDaGxMQ0IwSUQwZ0lURXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb1pTNTFjR1JoZEdWWGIzSnNaRTFoZEhKcGVDZ2hNU3dnSVRFcExDQmxMbUp2ZFc1a2FXNW5RbTk0SUNFOVBTQjJiMmxrSURBcElHVXVZbTkxYm1ScGJtZENiM2dnUFQwOUlHNTFiR3dnSmlZZ1pTNWpiMjF3ZFhSbFFtOTFibVJwYm1kQ2IzZ29LU3dnWDJrdVkyOXdlU2hsTG1KdmRXNWthVzVuUW05NEtTd2dYMmt1WVhCd2JIbE5ZWFJ5YVhnMEtHVXViV0YwY21sNFYyOXliR1FwTENCMGFHbHpMblZ1YVc5dUtGOXBLVHNLSUNBZ0lDQWdJQ0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0JsTG1kbGIyMWxkSEo1T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBaFBUMGdkbTlwWkNBd0tTQnBaaUFvZENBbUppQnBMbUYwZEhKcFluVjBaWE1nSVQwOUlIWnZhV1FnTUNBbUppQnBMbUYwZEhKcFluVjBaWE11Y0c5emFYUnBiMjRnSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSElnUFNCcExtRjBkSEpwWW5WMFpYTXVjRzl6YVhScGIyNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHRWdQU0F3TENCdklEMGdjaTVqYjNWdWREc2dZU0E4SUc4N0lHRXJLeWxqYmk1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtISXNJR0VwTG1Gd2NHeDVUV0YwY21sNE5DaGxMbTFoZEhKcGVGZHZjbXhrS1N3Z2RHaHBjeTVsZUhCaGJtUkNlVkJ2YVc1MEtHTnVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdrdVltOTFibVJwYm1kQ2IzZ2dQVDA5SUc1MWJHd2dKaVlnYVM1amIyMXdkWFJsUW05MWJtUnBibWRDYjNnb0tTd2dYMmt1WTI5d2VTaHBMbUp2ZFc1a2FXNW5RbTk0S1N3Z1gya3VZWEJ3YkhsTllYUnlhWGcwS0dVdWJXRjBjbWw0VjI5eWJHUXBMQ0IwYUdsekxuVnVhVzl1S0Y5cEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQmxMbU5vYVd4a2NtVnVPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SURBc0lISWdQU0J1TG14bGJtZDBhRHNnYVNBOElISTdJR2tyS3lsMGFHbHpMbVY0Y0dGdVpFSjVUMkpxWldOMEtHNWJhVjBzSUhRcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5dWRHRnBibk5RYjJsdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJQ0VvWlM1NElEd2dkR2hwY3k1dGFXNHVlQ0I4ZkNCbExuZ2dQaUIwYUdsekxtMWhlQzU0SUh4OElHVXVlU0E4SUhSb2FYTXViV2x1TG5rZ2ZId2daUzU1SUQ0Z2RHaHBjeTV0WVhndWVTQjhmQ0JsTG5vZ1BDQjBhR2x6TG0xcGJpNTZJSHg4SUdVdWVpQStJSFJvYVhNdWJXRjRMbm9wT3dvZ0lDQWdmUW9nSUNBZ1kyOXVkR0ZwYm5OQ2IzZ29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMXBiaTU0SUR3OUlHVXViV2x1TG5nZ0ppWWdaUzV0WVhndWVDQThQU0IwYUdsekxtMWhlQzU0SUNZbUlIUm9hWE11YldsdUxua2dQRDBnWlM1dGFXNHVlU0FtSmlCbExtMWhlQzU1SUR3OUlIUm9hWE11YldGNExua2dKaVlnZEdocGN5NXRhVzR1ZWlBOFBTQmxMbTFwYmk1NklDWW1JR1V1YldGNExub2dQRDBnZEdocGN5NXRZWGd1ZWpzS0lDQWdJSDBLSUNBZ0lHZGxkRkJoY21GdFpYUmxjaWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUXVjMlYwS0NobExuZ2dMU0IwYUdsekxtMXBiaTU0S1NBdklDaDBhR2x6TG0xaGVDNTRJQzBnZEdocGN5NXRhVzR1ZUNrc0lDaGxMbmtnTFNCMGFHbHpMbTFwYmk1NUtTQXZJQ2gwYUdsekxtMWhlQzU1SUMwZ2RHaHBjeTV0YVc0dWVTa3NJQ2hsTG5vZ0xTQjBhR2x6TG0xcGJpNTZLU0F2SUNoMGFHbHpMbTFoZUM1NklDMGdkR2hwY3k1dGFXNHVlaWtwT3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMGMwSnZlQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNFb1pTNXRZWGd1ZUNBOElIUm9hWE11YldsdUxuZ2dmSHdnWlM1dGFXNHVlQ0ErSUhSb2FYTXViV0Y0TG5nZ2ZId2daUzV0WVhndWVTQThJSFJvYVhNdWJXbHVMbmtnZkh3Z1pTNXRhVzR1ZVNBK0lIUm9hWE11YldGNExua2dmSHdnWlM1dFlYZ3VlaUE4SUhSb2FYTXViV2x1TG5vZ2ZId2daUzV0YVc0dWVpQStJSFJvYVhNdWJXRjRMbm9wT3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMGMxTndhR1Z5WlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTJ4aGJYQlFiMmx1ZENobExtTmxiblJsY2l3Z1kyNHBMQ0JqYmk1a2FYTjBZVzVqWlZSdlUzRjFZWEpsWkNobExtTmxiblJsY2lrZ1BEMGdaUzV5WVdScGRYTWdLaUJsTG5KaFpHbDFjenNLSUNBZ0lIMEtJQ0FnSUdsdWRHVnljMlZqZEhOUWJHRnVaU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFzSUc0N0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWJtOXliV0ZzTG5nZ1BpQXdJRDhnS0hRZ1BTQmxMbTV2Y20xaGJDNTRJQ29nZEdocGN5NXRhVzR1ZUN3Z2JpQTlJR1V1Ym05eWJXRnNMbmdnS2lCMGFHbHpMbTFoZUM1NEtTQTZJQ2gwSUQwZ1pTNXViM0p0WVd3dWVDQXFJSFJvYVhNdWJXRjRMbmdzSUc0Z1BTQmxMbTV2Y20xaGJDNTRJQ29nZEdocGN5NXRhVzR1ZUNrc0lHVXVibTl5YldGc0xua2dQaUF3SUQ4Z0tIUWdLejBnWlM1dWIzSnRZV3d1ZVNBcUlIUm9hWE11YldsdUxua3NJRzRnS3owZ1pTNXViM0p0WVd3dWVTQXFJSFJvYVhNdWJXRjRMbmtwSURvZ0tIUWdLejBnWlM1dWIzSnRZV3d1ZVNBcUlIUm9hWE11YldGNExua3NJRzRnS3owZ1pTNXViM0p0WVd3dWVTQXFJSFJvYVhNdWJXbHVMbmtwTENCbExtNXZjbTFoYkM1NklENGdNQ0EvSUNoMElDczlJR1V1Ym05eWJXRnNMbm9nS2lCMGFHbHpMbTFwYmk1NkxDQnVJQ3M5SUdVdWJtOXliV0ZzTG5vZ0tpQjBhR2x6TG0xaGVDNTZLU0E2SUNoMElDczlJR1V1Ym05eWJXRnNMbm9nS2lCMGFHbHpMbTFoZUM1NkxDQnVJQ3M5SUdVdWJtOXliV0ZzTG5vZ0tpQjBhR2x6TG0xcGJpNTZLU3dnZENBOFBTQXRaUzVqYjI1emRHRnVkQ0FtSmlCdUlENDlJQzFsTG1OdmJuTjBZVzUwT3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMGMxUnlhV0Z1WjJ4bEtHVXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVwYzBWdGNIUjVLQ2twSUhKbGRIVnliaUFoTVRzS0lDQWdJQ0FnSUNCMGFHbHpMbWRsZEVObGJuUmxjaWhqY3lrc0lGZHpMbk4xWWxabFkzUnZjbk1vZEdocGN5NXRZWGdzSUdOektTd2dlR2t1YzNWaVZtVmpkRzl5Y3lobExtRXNJR056S1N3Z2Rta3VjM1ZpVm1WamRHOXljeWhsTG1Jc0lHTnpLU3dnZVdrdWMzVmlWbVZqZEc5eWN5aGxMbU1zSUdOektTd2dWRzR1YzNWaVZtVmpkRzl5Y3loMmFTd2dlR2twTENCM2JpNXpkV0pXWldOMGIzSnpLSGxwTENCMmFTa3NJRmR1TG5OMVlsWmxZM1J2Y25Nb2VHa3NJSGxwS1RzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xWUnVMbm9zQ2lBZ0lDQWdJQ0FnSUNBZ0lGUnVMbmtzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMxM2JpNTZMQW9nSUNBZ0lDQWdJQ0FnSUNCM2JpNTVMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F0VjI0dWVpd0tJQ0FnSUNBZ0lDQWdJQ0FnVjI0dWVTd0tJQ0FnSUNBZ0lDQWdJQ0FnVkc0dWVpd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdMVlJ1TG5nc0NpQWdJQ0FnSUNBZ0lDQWdJSGR1TG5vc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMTNiaTU0TEFvZ0lDQWdJQ0FnSUNBZ0lDQlhiaTU2TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBdFYyNHVlQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xWUnVMbmtzQ2lBZ0lDQWdJQ0FnSUNBZ0lGUnVMbmdzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMxM2JpNTVMQW9nSUNBZ0lDQWdJQ0FnSUNCM2JpNTRMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F0VjI0dWVTd0tJQ0FnSUNBZ0lDQWdJQ0FnVjI0dWVDd0tJQ0FnSUNBZ0lDQWdJQ0FnTUFvZ0lDQWdJQ0FnSUYwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNGR1lTaDBMQ0I0YVN3Z2Rta3NJSGxwTENCWGN5a2dmSHdnS0hRZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERUtJQ0FnSUNBZ0lDQmRMQ0FoUm1Fb2RDd2dlR2tzSUhacExDQjVhU3dnVjNNcEtTQS9JQ0V4SURvZ0tGaHpMbU55YjNOelZtVmpkRzl5Y3loVWJpd2dkMjRwTENCMElEMGdXd29nSUNBZ0lDQWdJQ0FnSUNCWWN5NTRMQW9nSUNBZ0lDQWdJQ0FnSUNCWWN5NTVMQW9nSUNBZ0lDQWdJQ0FnSUNCWWN5NTZDaUFnSUNBZ0lDQWdYU3dnUm1Fb2RDd2dlR2tzSUhacExDQjVhU3dnVjNNcEtUc0tJQ0FnSUgwS0lDQWdJR05zWVcxd1VHOXBiblFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBMbU52Y0hrb1pTa3VZMnhoYlhBb2RHaHBjeTV0YVc0c0lIUm9hWE11YldGNEtUc0tJQ0FnSUgwS0lDQWdJR1JwYzNSaGJtTmxWRzlRYjJsdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyeGhiWEJRYjJsdWRDaGxMQ0JqYmlrdVpHbHpkR0Z1WTJWVWJ5aGxLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFSnZkVzVrYVc1blUzQm9aWEpsS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYzBWdGNIUjVLQ2tnUHlCbExtMWhhMlZGYlhCMGVTZ3BJRG9nS0hSb2FYTXVaMlYwUTJWdWRHVnlLR1V1WTJWdWRHVnlLU3dnWlM1eVlXUnBkWE1nUFNCMGFHbHpMbWRsZEZOcGVtVW9ZMjRwTG14bGJtZDBhQ2dwSUNvZ0xqVXBMQ0JsT3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dGFXNHViV0Y0S0dVdWJXbHVLU3dnZEdocGN5NXRZWGd1YldsdUtHVXViV0Y0S1N3Z2RHaHBjeTVwYzBWdGNIUjVLQ2tnSmlZZ2RHaHBjeTV0WVd0bFJXMXdkSGtvS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhWdWFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRhVzR1YldsdUtHVXViV2x1S1N3Z2RHaHBjeTV0WVhndWJXRjRLR1V1YldGNEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHRndjR3g1VFdGMGNtbDROQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhWE5GYlhCMGVTZ3BJRDhnZEdocGN5QTZJQ2h2Ymxzd1hTNXpaWFFvZEdocGN5NXRhVzR1ZUN3Z2RHaHBjeTV0YVc0dWVTd2dkR2hwY3k1dGFXNHVlaWt1WVhCd2JIbE5ZWFJ5YVhnMEtHVXBMQ0J2YmxzeFhTNXpaWFFvZEdocGN5NXRhVzR1ZUN3Z2RHaHBjeTV0YVc0dWVTd2dkR2hwY3k1dFlYZ3VlaWt1WVhCd2JIbE5ZWFJ5YVhnMEtHVXBMQ0J2YmxzeVhTNXpaWFFvZEdocGN5NXRhVzR1ZUN3Z2RHaHBjeTV0WVhndWVTd2dkR2hwY3k1dGFXNHVlaWt1WVhCd2JIbE5ZWFJ5YVhnMEtHVXBMQ0J2YmxzelhTNXpaWFFvZEdocGN5NXRhVzR1ZUN3Z2RHaHBjeTV0WVhndWVTd2dkR2hwY3k1dFlYZ3VlaWt1WVhCd2JIbE5ZWFJ5YVhnMEtHVXBMQ0J2YmxzMFhTNXpaWFFvZEdocGN5NXRZWGd1ZUN3Z2RHaHBjeTV0YVc0dWVTd2dkR2hwY3k1dGFXNHVlaWt1WVhCd2JIbE5ZWFJ5YVhnMEtHVXBMQ0J2YmxzMVhTNXpaWFFvZEdocGN5NXRZWGd1ZUN3Z2RHaHBjeTV0YVc0dWVTd2dkR2hwY3k1dFlYZ3VlaWt1WVhCd2JIbE5ZWFJ5YVhnMEtHVXBMQ0J2YmxzMlhTNXpaWFFvZEdocGN5NXRZWGd1ZUN3Z2RHaHBjeTV0WVhndWVTd2dkR2hwY3k1dGFXNHVlaWt1WVhCd2JIbE5ZWFJ5YVhnMEtHVXBMQ0J2YmxzM1hTNXpaWFFvZEdocGN5NXRZWGd1ZUN3Z2RHaHBjeTV0WVhndWVTd2dkR2hwY3k1dFlYZ3VlaWt1WVhCd2JIbE5ZWFJ5YVhnMEtHVXBMQ0IwYUdsekxuTmxkRVp5YjIxUWIybHVkSE1vYjI0cExDQjBhR2x6S1RzS0lDQWdJSDBLSUNBZ0lIUnlZVzV6YkdGMFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXbHVMbUZrWkNobEtTd2dkR2hwY3k1dFlYZ3VZV1JrS0dVcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pYRjFZV3h6S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXRhVzR1WlhGMVlXeHpLSFJvYVhNdWJXbHVLU0FtSmlCbExtMWhlQzVsY1hWaGJITW9kR2hwY3k1dFlYZ3BPd29nSUNBZ2ZRcDlMQ0J2YmlBOUlGc0tJQ0FnSUc1bGR5QkJMQW9nSUNBZ2JtVjNJRUVzQ2lBZ0lDQnVaWGNnUVN3S0lDQWdJRzVsZHlCQkxBb2dJQ0FnYm1WM0lFRXNDaUFnSUNCdVpYY2dRU3dLSUNBZ0lHNWxkeUJCTEFvZ0lDQWdibVYzSUVFS1hTd2dZMjRnUFNCdVpYY2dRU3dnWDJrZ1BTQnVaWGNnVVhRc0lIaHBJRDBnYm1WM0lFRXNJSFpwSUQwZ2JtVjNJRUVzSUhscElEMGdibVYzSUVFc0lGUnVJRDBnYm1WM0lFRXNJSGR1SUQwZ2JtVjNJRUVzSUZkdUlEMGdibVYzSUVFc0lHTnpJRDBnYm1WM0lFRXNJRmR6SUQwZ2JtVjNJRUVzSUZoeklEMGdibVYzSUVFc0lGaHVJRDBnYm1WM0lFRTdDbVoxYm1OMGFXOXVJRVpoS0hNeExDQmxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQm1iM0lvYkdWMElISWdQU0F3TENCaElEMGdjekV1YkdWdVozUm9JQzBnTXpzZ2NpQThQU0JoT3lCeUlDczlJRE1wZXdvZ0lDQWdJQ0FnSUZodUxtWnliMjFCY25KaGVTaHpNU3dnY2lrN0NpQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCcExuZ2dLaUJOWVhSb0xtRmljeWhZYmk1NEtTQXJJR2t1ZVNBcUlFMWhkR2d1WVdKektGaHVMbmtwSUNzZ2FTNTZJQ29nVFdGMGFDNWhZbk1vV0c0dWVpa3NJR01nUFNCbExtUnZkQ2hZYmlrc0lHd2dQU0IwTG1SdmRDaFliaWtzSUdnZ1BTQnVMbVJ2ZENoWWJpazdDaUFnSUNBZ0lDQWdhV1lnS0UxaGRHZ3ViV0Y0S0MxTllYUm9MbTFoZUNoakxDQnNMQ0JvS1N3Z1RXRjBhQzV0YVc0b1l5d2diQ3dnYUNrcElENGdieWtnY21WMGRYSnVJQ0V4T3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUNFd093cDlDblpoY2lCeWNDQTlJRzVsZHlCUmRDd2diSE1nUFNCdVpYY2dRU3dnUW1FZ1BTQnVaWGNnUVN3Z1dYUWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnYm1WM0lFRXNJSFFnUFNBdE1TbDdDaUFnSUNBZ0lDQWdkR2hwY3k1alpXNTBaWElnUFNCbExDQjBhR2x6TG5KaFpHbDFjeUE5SUhRN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1ObGJuUmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxuSmhaR2wxY3lBOUlIUXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFVHOXBiblJ6S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVkyVnVkR1Z5T3dvZ0lDQWdJQ0FnSUhRZ0lUMDlJSFp2YVdRZ01DQS9JRzR1WTI5d2VTaDBLU0E2SUhKd0xuTmxkRVp5YjIxUWIybHVkSE1vWlNrdVoyVjBRMlZ1ZEdWeUtHNHBPd29nSUNBZ0lDQWdJR3hsZENCcElEMGdNRHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSElnUFNBd0xDQmhJRDBnWlM1c1pXNW5kR2c3SUhJZ1BDQmhPeUJ5S3lzcGFTQTlJRTFoZEdndWJXRjRLR2tzSUc0dVpHbHpkR0Z1WTJWVWIxTnhkV0Z5WldRb1pWdHlYU2twT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmhaR2wxY3lBOUlFMWhkR2d1YzNGeWRDaHBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1ObGJuUmxjaTVqYjNCNUtHVXVZMlZ1ZEdWeUtTd2dkR2hwY3k1eVlXUnBkWE1nUFNCbExuSmhaR2wxY3l3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdselJXMXdkSGtvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbUZrYVhWeklEd2dNRHNLSUNBZ0lIMEtJQ0FnSUcxaGEyVkZiWEIwZVNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqWlc1MFpYSXVjMlYwS0RBc0lEQXNJREFwTENCMGFHbHpMbkpoWkdsMWN5QTlJQzB4TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5dWRHRnBibk5RYjJsdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1WkdsemRHRnVZMlZVYjFOeGRXRnlaV1FvZEdocGN5NWpaVzUwWlhJcElEdzlJSFJvYVhNdWNtRmthWFZ6SUNvZ2RHaHBjeTV5WVdScGRYTTdDaUFnSUNCOUNpQWdJQ0JrYVhOMFlXNWpaVlJ2VUc5cGJuUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTG1ScGMzUmhibU5sVkc4b2RHaHBjeTVqWlc1MFpYSXBJQzBnZEdocGN5NXlZV1JwZFhNN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpVM0JvWlhKbEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdWNtRmthWFZ6SUNzZ1pTNXlZV1JwZFhNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdVkyVnVkR1Z5TG1ScGMzUmhibU5sVkc5VGNYVmhjbVZrS0hSb2FYTXVZMlZ1ZEdWeUtTQThQU0IwSUNvZ2REc0tJQ0FnSUgwS0lDQWdJR2x1ZEdWeWMyVmpkSE5DYjNnb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbWx1ZEdWeWMyVmpkSE5UY0dobGNtVW9kR2hwY3lrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpVR3hoYm1Vb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG1GaWN5aGxMbVJwYzNSaGJtTmxWRzlRYjJsdWRDaDBhR2x6TG1ObGJuUmxjaWtwSUR3OUlIUm9hWE11Y21Ga2FYVnpPd29nSUNBZ2ZRb2dJQ0FnWTJ4aGJYQlFiMmx1ZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxtTmxiblJsY2k1a2FYTjBZVzVqWlZSdlUzRjFZWEpsWkNobEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDNWpiM0I1S0dVcExDQnVJRDRnZEdocGN5NXlZV1JwZFhNZ0tpQjBhR2x6TG5KaFpHbDFjeUFtSmlBb2RDNXpkV0lvZEdocGN5NWpaVzUwWlhJcExtNXZjbTFoYkdsNlpTZ3BMQ0IwTG0xMWJIUnBjR3g1VTJOaGJHRnlLSFJvYVhNdWNtRmthWFZ6S1M1aFpHUW9kR2hwY3k1alpXNTBaWElwS1N3Z2REc0tJQ0FnSUgwS0lDQWdJR2RsZEVKdmRXNWthVzVuUW05NEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1cGMwVnRjSFI1S0NrZ1B5QW9aUzV0WVd0bFJXMXdkSGtvS1N3Z1pTa2dPaUFvWlM1elpYUW9kR2hwY3k1alpXNTBaWElzSUhSb2FYTXVZMlZ1ZEdWeUtTd2daUzVsZUhCaGJtUkNlVk5qWVd4aGNpaDBhR2x6TG5KaFpHbDFjeWtzSUdVcE93b2dJQ0FnZlFvZ0lDQWdZWEJ3YkhsTllYUnlhWGcwS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqWlc1MFpYSXVZWEJ3YkhsTllYUnlhWGcwS0dVcExDQjBhR2x6TG5KaFpHbDFjeUE5SUhSb2FYTXVjbUZrYVhWeklDb2daUzVuWlhSTllYaFRZMkZzWlU5dVFYaHBjeWdwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEhKaGJuTnNZWFJsS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqWlc1MFpYSXVZV1JrS0dVcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pYaHdZVzVrUW5sUWIybHVkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFYTkZiWEIwZVNncEtTQnlaWFIxY200Z2RHaHBjeTVqWlc1MFpYSXVZMjl3ZVNobEtTd2dkR2hwY3k1eVlXUnBkWE1nUFNBd0xDQjBhR2x6T3dvZ0lDQWdJQ0FnSUd4ekxuTjFZbFpsWTNSdmNuTW9aU3dnZEdocGN5NWpaVzUwWlhJcE93b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2JITXViR1Z1WjNSb1UzRW9LVHNLSUNBZ0lDQWdJQ0JwWmlBb2RDQStJSFJvYVhNdWNtRmthWFZ6SUNvZ2RHaHBjeTV5WVdScGRYTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCTllYUm9Mbk54Y25Rb2RDa3NJR2tnUFNBb2JpQXRJSFJvYVhNdWNtRmthWFZ6S1NBcUlDNDFPd29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5sYm5SbGNpNWhaR1JUWTJGc1pXUldaV04wYjNJb2JITXNJR2tnTHlCdUtTd2dkR2hwY3k1eVlXUnBkWE1nS3owZ2FUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMWJtbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWFYTkZiWEIwZVNncElEOGdkR2hwY3lBNklIUm9hWE11YVhORmJYQjBlU2dwSUQ4Z0tIUm9hWE11WTI5d2VTaGxLU3dnZEdocGN5a2dPaUFvZEdocGN5NWpaVzUwWlhJdVpYRjFZV3h6S0dVdVkyVnVkR1Z5S1NBOVBUMGdJVEFnUHlCMGFHbHpMbkpoWkdsMWN5QTlJRTFoZEdndWJXRjRLSFJvYVhNdWNtRmthWFZ6TENCbExuSmhaR2wxY3lrZ09pQW9RbUV1YzNWaVZtVmpkRzl5Y3lobExtTmxiblJsY2l3Z2RHaHBjeTVqWlc1MFpYSXBMbk5sZEV4bGJtZDBhQ2hsTG5KaFpHbDFjeWtzSUhSb2FYTXVaWGh3WVc1a1FubFFiMmx1ZENoc2N5NWpiM0I1S0dVdVkyVnVkR1Z5S1M1aFpHUW9RbUVwS1N3Z2RHaHBjeTVsZUhCaGJtUkNlVkJ2YVc1MEtHeHpMbU52Y0hrb1pTNWpaVzUwWlhJcExuTjFZaWhDWVNrcEtTd2dkR2hwY3lrN0NpQWdJQ0I5Q2lBZ0lDQmxjWFZoYkhNb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbU5sYm5SbGNpNWxjWFZoYkhNb2RHaHBjeTVqWlc1MFpYSXBJQ1ltSUdVdWNtRmthWFZ6SUQwOVBTQjBhR2x6TG5KaFpHbDFjenNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lncExtTnZjSGtvZEdocGN5azdDaUFnSUNCOUNuMHNJR3h1SUQwZ2JtVjNJRUVzSUhwaElEMGdibVYzSUVFc0lIRnpJRDBnYm1WM0lFRXNJRUZ1SUQwZ2JtVjNJRUVzSUZaaElEMGdibVYzSUVFc0lGbHpJRDBnYm1WM0lFRXNJR3RoSUQwZ2JtVjNJRUVzSUdocElEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRzVsZHlCQkxDQjBJRDBnYm1WM0lFRW9NQ3dnTUN3Z0xURXBLWHNLSUNBZ0lDQWdJQ0IwYUdsekxtOXlhV2RwYmlBOUlHVXNJSFJvYVhNdVpHbHlaV04wYVc5dUlEMGdkRHNLSUNBZ0lIMEtJQ0FnSUhObGRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViM0pwWjJsdUxtTnZjSGtvWlNrc0lIUm9hWE11WkdseVpXTjBhVzl1TG1OdmNIa29kQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dmNtbG5hVzR1WTI5d2VTaGxMbTl5YVdkcGJpa3NJSFJvYVhNdVpHbHlaV04wYVc5dUxtTnZjSGtvWlM1a2FYSmxZM1JwYjI0cExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1lYUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtTnZjSGtvZEdocGN5NXZjbWxuYVc0cExtRmtaRk5qWVd4bFpGWmxZM1J2Y2loMGFHbHpMbVJwY21WamRHbHZiaXdnWlNrN0NpQWdJQ0I5Q2lBZ0lDQnNiMjlyUVhRb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1ScGNtVmpkR2x2Ymk1amIzQjVLR1VwTG5OMVlpaDBhR2x6TG05eWFXZHBiaWt1Ym05eWJXRnNhWHBsS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeVpXTmhjM1FvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTl5YVdkcGJpNWpiM0I1S0hSb2FYTXVZWFFvWlN3Z2JHNHBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR05zYjNObGMzUlFiMmx1ZEZSdlVHOXBiblFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSFF1YzNWaVZtVmpkRzl5Y3lobExDQjBhR2x6TG05eWFXZHBiaWs3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwTG1SdmRDaDBhR2x6TG1ScGNtVmpkR2x2YmlrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0Z1BDQXdJRDhnZEM1amIzQjVLSFJvYVhNdWIzSnBaMmx1S1NBNklIUXVZMjl3ZVNoMGFHbHpMbTl5YVdkcGJpa3VZV1JrVTJOaGJHVmtWbVZqZEc5eUtIUm9hWE11WkdseVpXTjBhVzl1TENCdUtUc0tJQ0FnSUgwS0lDQWdJR1JwYzNSaGJtTmxWRzlRYjJsdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRTFoZEdndWMzRnlkQ2gwYUdsekxtUnBjM1JoYm1ObFUzRlViMUJ2YVc1MEtHVXBLVHNLSUNBZ0lIMEtJQ0FnSUdScGMzUmhibU5sVTNGVWIxQnZhVzUwS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlHeHVMbk4xWWxabFkzUnZjbk1vWlN3Z2RHaHBjeTV2Y21sbmFXNHBMbVJ2ZENoMGFHbHpMbVJwY21WamRHbHZiaWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFFnUENBd0lEOGdkR2hwY3k1dmNtbG5hVzR1WkdsemRHRnVZMlZVYjFOeGRXRnlaV1FvWlNrZ09pQW9iRzR1WTI5d2VTaDBhR2x6TG05eWFXZHBiaWt1WVdSa1UyTmhiR1ZrVm1WamRHOXlLSFJvYVhNdVpHbHlaV04wYVc5dUxDQjBLU3dnYkc0dVpHbHpkR0Z1WTJWVWIxTnhkV0Z5WldRb1pTa3BPd29nSUNBZ2ZRb2dJQ0FnWkdsemRHRnVZMlZUY1ZSdlUyVm5iV1Z1ZENobExDQjBMQ0J1TENCcEtTQjdDaUFnSUNBZ0lDQWdlbUV1WTI5d2VTaGxLUzVoWkdRb2RDa3ViWFZzZEdsd2JIbFRZMkZzWVhJb0xqVXBMQ0J4Y3k1amIzQjVLSFFwTG5OMVlpaGxLUzV1YjNKdFlXeHBlbVVvS1N3Z1FXNHVZMjl3ZVNoMGFHbHpMbTl5YVdkcGJpa3VjM1ZpS0hwaEtUc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHVXVaR2x6ZEdGdVkyVlVieWgwS1NBcUlDNDFMQ0JoSUQwZ0xYUm9hWE11WkdseVpXTjBhVzl1TG1SdmRDaHhjeWtzSUc4Z1BTQkJiaTVrYjNRb2RHaHBjeTVrYVhKbFkzUnBiMjRwTENCaklEMGdMVUZ1TG1SdmRDaHhjeWtzSUd3Z1BTQkJiaTVzWlc1bmRHaFRjU2dwTENCb0lEMGdUV0YwYUM1aFluTW9NU0F0SUdFZ0tpQmhLU3dnZFN3Z1pDd2daaXdnYlRzS0lDQWdJQ0FnSUNCcFppQW9hQ0ErSURBcElHbG1JQ2gxSUQwZ1lTQXFJR01nTFNCdkxDQmtJRDBnWVNBcUlHOGdMU0JqTENCdElEMGdjaUFxSUdnc0lIVWdQajBnTUNrZ2FXWWdLR1FnUGowZ0xXMHBJR2xtSUNoa0lEdzlJRzBwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUY4Z1BTQXhJQzhnYURzS0lDQWdJQ0FnSUNBZ0lDQWdkU0FxUFNCZkxDQmtJQ285SUY4c0lHWWdQU0IxSUNvZ0tIVWdLeUJoSUNvZ1pDQXJJRElnS2lCdktTQXJJR1FnS2lBb1lTQXFJSFVnS3lCa0lDc2dNaUFxSUdNcElDc2diRHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdaQ0E5SUhJc0lIVWdQU0JOWVhSb0xtMWhlQ2d3TENBdEtHRWdLaUJrSUNzZ2J5a3BMQ0JtSUQwZ0xYVWdLaUIxSUNzZ1pDQXFJQ2hrSUNzZ01pQXFJR01wSUNzZ2JEc0tJQ0FnSUNBZ0lDQmxiSE5sSUdRZ1BTQXRjaXdnZFNBOUlFMWhkR2d1YldGNEtEQXNJQzBvWVNBcUlHUWdLeUJ2S1Nrc0lHWWdQU0F0ZFNBcUlIVWdLeUJrSUNvZ0tHUWdLeUF5SUNvZ1l5a2dLeUJzT3dvZ0lDQWdJQ0FnSUdWc2MyVWdaQ0E4UFNBdGJTQS9JQ2gxSUQwZ1RXRjBhQzV0WVhnb01Dd2dMU2d0WVNBcUlISWdLeUJ2S1Nrc0lHUWdQU0IxSUQ0Z01DQS9JQzF5SURvZ1RXRjBhQzV0YVc0b1RXRjBhQzV0WVhnb0xYSXNJQzFqS1N3Z2Npa3NJR1lnUFNBdGRTQXFJSFVnS3lCa0lDb2dLR1FnS3lBeUlDb2dZeWtnS3lCc0tTQTZJR1FnUEQwZ2JTQS9JQ2gxSUQwZ01Dd2daQ0E5SUUxaGRHZ3ViV2x1S0UxaGRHZ3ViV0Y0S0MxeUxDQXRZeWtzSUhJcExDQm1JRDBnWkNBcUlDaGtJQ3NnTWlBcUlHTXBJQ3NnYkNrZ09pQW9kU0E5SUUxaGRHZ3ViV0Y0S0RBc0lDMG9ZU0FxSUhJZ0t5QnZLU2tzSUdRZ1BTQjFJRDRnTUNBL0lISWdPaUJOWVhSb0xtMXBiaWhOWVhSb0xtMWhlQ2d0Y2l3Z0xXTXBMQ0J5S1N3Z1ppQTlJQzExSUNvZ2RTQXJJR1FnS2lBb1pDQXJJRElnS2lCaktTQXJJR3dwT3dvZ0lDQWdJQ0FnSUdWc2MyVWdaQ0E5SUdFZ1BpQXdJRDhnTFhJZ09pQnlMQ0IxSUQwZ1RXRjBhQzV0WVhnb01Dd2dMU2hoSUNvZ1pDQXJJRzhwS1N3Z1ppQTlJQzExSUNvZ2RTQXJJR1FnS2lBb1pDQXJJRElnS2lCaktTQXJJR3c3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzRnSmlZZ2JpNWpiM0I1S0hSb2FYTXViM0pwWjJsdUtTNWhaR1JUWTJGc1pXUldaV04wYjNJb2RHaHBjeTVrYVhKbFkzUnBiMjRzSUhVcExDQnBJQ1ltSUdrdVkyOXdlU2g2WVNrdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0hGekxDQmtLU3dnWmpzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5YzJWamRGTndhR1Z5WlNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkc0dWMzVmlWbVZqZEc5eWN5aGxMbU5sYm5SbGNpd2dkR2hwY3k1dmNtbG5hVzRwT3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnYkc0dVpHOTBLSFJvYVhNdVpHbHlaV04wYVc5dUtTd2dhU0E5SUd4dUxtUnZkQ2hzYmlrZ0xTQnVJQ29nYml3Z2NpQTlJR1V1Y21Ga2FYVnpJQ29nWlM1eVlXUnBkWE03Q2lBZ0lDQWdJQ0FnYVdZZ0tHa2dQaUJ5S1NCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlFMWhkR2d1YzNGeWRDaHlJQzBnYVNrc0lHOGdQU0J1SUMwZ1lTd2dZeUE5SUc0Z0t5QmhPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmpJRHdnTUNBL0lHNTFiR3dnT2lCdklEd2dNQ0EvSUhSb2FYTXVZWFFvWXl3Z2RDa2dPaUIwYUdsekxtRjBLRzhzSUhRcE93b2dJQ0FnZlFvZ0lDQWdhVzUwWlhKelpXTjBjMU53YUdWeVpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpHbHpkR0Z1WTJWVGNWUnZVRzlwYm5Rb1pTNWpaVzUwWlhJcElEdzlJR1V1Y21Ga2FYVnpJQ29nWlM1eVlXUnBkWE03Q2lBZ0lDQjlDaUFnSUNCa2FYTjBZVzVqWlZSdlVHeGhibVVvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTNXViM0p0WVd3dVpHOTBLSFJvYVhNdVpHbHlaV04wYVc5dUtUc0tJQ0FnSUNBZ0lDQnBaaUFvZENBOVBUMGdNQ2tnY21WMGRYSnVJR1V1WkdsemRHRnVZMlZVYjFCdmFXNTBLSFJvYVhNdWIzSnBaMmx1S1NBOVBUMGdNQ0EvSURBZ09pQnVkV3hzT3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnTFNoMGFHbHpMbTl5YVdkcGJpNWtiM1FvWlM1dWIzSnRZV3dwSUNzZ1pTNWpiMjV6ZEdGdWRDa2dMeUIwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1SUQ0OUlEQWdQeUJ1SURvZ2JuVnNiRHNLSUNBZ0lIMEtJQ0FnSUdsdWRHVnljMlZqZEZCc1lXNWxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WkdsemRHRnVZMlZVYjFCc1lXNWxLR1VwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1SUQwOVBTQnVkV3hzSUQ4Z2JuVnNiQ0E2SUhSb2FYTXVZWFFvYml3Z2RDazdDaUFnSUNCOUNpQWdJQ0JwYm5SbGNuTmxZM1J6VUd4aGJtVW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlM1a2FYTjBZVzVqWlZSdlVHOXBiblFvZEdocGN5NXZjbWxuYVc0cE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMElEMDlQU0F3SUh4OElHVXVibTl5YldGc0xtUnZkQ2gwYUdsekxtUnBjbVZqZEdsdmJpa2dLaUIwSUR3Z01Ec0tJQ0FnSUgwS0lDQWdJR2x1ZEdWeWMyVmpkRUp2ZUNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNHNJR2tzSUhJc0lHRXNJRzhzSUdNc0lHd2dQU0F4SUM4Z2RHaHBjeTVrYVhKbFkzUnBiMjR1ZUN3Z2FDQTlJREVnTHlCMGFHbHpMbVJwY21WamRHbHZiaTU1TENCMUlEMGdNU0F2SUhSb2FYTXVaR2x5WldOMGFXOXVMbm9zSUdRZ1BTQjBhR2x6TG05eWFXZHBianNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiQ0ErUFNBd0lEOGdLRzRnUFNBb1pTNXRhVzR1ZUNBdElHUXVlQ2tnS2lCc0xDQnBJRDBnS0dVdWJXRjRMbmdnTFNCa0xuZ3BJQ29nYkNrZ09pQW9iaUE5SUNobExtMWhlQzU0SUMwZ1pDNTRLU0FxSUd3c0lHa2dQU0FvWlM1dGFXNHVlQ0F0SUdRdWVDa2dLaUJzS1N3Z2FDQStQU0F3SUQ4Z0tISWdQU0FvWlM1dGFXNHVlU0F0SUdRdWVTa2dLaUJvTENCaElEMGdLR1V1YldGNExua2dMU0JrTG5rcElDb2dhQ2tnT2lBb2NpQTlJQ2hsTG0xaGVDNTVJQzBnWkM1NUtTQXFJR2dzSUdFZ1BTQW9aUzV0YVc0dWVTQXRJR1F1ZVNrZ0tpQm9LU3dnYmlBK0lHRWdmSHdnY2lBK0lHa2dmSHdnS0NoeUlENGdiaUI4ZkNCcGMwNWhUaWh1S1NrZ0ppWWdLRzRnUFNCeUtTd2dLR0VnUENCcElIeDhJR2x6VG1GT0tHa3BLU0FtSmlBb2FTQTlJR0VwTENCMUlENDlJREFnUHlBb2J5QTlJQ2hsTG0xcGJpNTZJQzBnWkM1NktTQXFJSFVzSUdNZ1BTQW9aUzV0WVhndWVpQXRJR1F1ZWlrZ0tpQjFLU0E2SUNodklEMGdLR1V1YldGNExub2dMU0JrTG5vcElDb2dkU3dnWXlBOUlDaGxMbTFwYmk1NklDMGdaQzU2S1NBcUlIVXBMQ0J1SUQ0Z1l5QjhmQ0J2SUQ0Z2FTa2dmSHdnS0NodklENGdiaUI4ZkNCdUlDRTlQU0J1S1NBbUppQW9iaUE5SUc4cExDQW9ZeUE4SUdrZ2ZId2dhU0FoUFQwZ2FTa2dKaVlnS0drZ1BTQmpLU3dnYVNBOElEQXBJRDhnYm5Wc2JDQTZJSFJvYVhNdVlYUW9iaUErUFNBd0lEOGdiaUE2SUdrc0lIUXBPd29nSUNBZ2ZRb2dJQ0FnYVc1MFpYSnpaV04wYzBKdmVDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWFXNTBaWEp6WldOMFFtOTRLR1VzSUd4dUtTQWhQVDBnYm5Wc2JEc0tJQ0FnSUgwS0lDQWdJR2x1ZEdWeWMyVmpkRlJ5YVdGdVoyeGxLR1VzSUhRc0lHNHNJR2tzSUhJcElIc0tJQ0FnSUNBZ0lDQldZUzV6ZFdKV1pXTjBiM0p6S0hRc0lHVXBMQ0JaY3k1emRXSldaV04wYjNKektHNHNJR1VwTENCcllTNWpjbTl6YzFabFkzUnZjbk1vVm1Fc0lGbHpLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJSFJvYVhNdVpHbHlaV04wYVc5dUxtUnZkQ2hyWVNrc0lHODdDaUFnSUNBZ0lDQWdhV1lnS0dFZ1BpQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwS1NCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUNBZ0lDQWdJQ0FnYnlBOUlERTdDaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hoSUR3Z01Da2dieUE5SUMweExDQmhJRDBnTFdFN0NpQWdJQ0FnSUNBZ1pXeHpaU0J5WlhSMWNtNGdiblZzYkRzS0lDQWdJQ0FnSUNCQmJpNXpkV0pXWldOMGIzSnpLSFJvYVhNdWIzSnBaMmx1TENCbEtUc0tJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlHOGdLaUIwYUdsekxtUnBjbVZqZEdsdmJpNWtiM1FvV1hNdVkzSnZjM05XWldOMGIzSnpLRUZ1TENCWmN5a3BPd29nSUNBZ0lDQWdJR2xtSUNoaklEd2dNQ2tnY21WMGRYSnVJRzUxYkd3N0NpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCdklDb2dkR2hwY3k1a2FYSmxZM1JwYjI0dVpHOTBLRlpoTG1OeWIzTnpLRUZ1S1NrN0NpQWdJQ0FnSUNBZ2FXWWdLR3dnUENBd0lIeDhJR01nS3lCc0lENGdZU2tnY21WMGRYSnVJRzUxYkd3N0NpQWdJQ0FnSUNBZ2JHVjBJR2dnUFNBdGJ5QXFJRUZ1TG1SdmRDaHJZU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR2dnUENBd0lEOGdiblZzYkNBNklIUm9hWE11WVhRb2FDQXZJR0VzSUhJcE93b2dJQ0FnZlFvZ0lDQWdZWEJ3YkhsTllYUnlhWGcwS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV2Y21sbmFXNHVZWEJ3YkhsTllYUnlhWGcwS0dVcExDQjBhR2x6TG1ScGNtVmpkR2x2Ymk1MGNtRnVjMlp2Y20xRWFYSmxZM1JwYjI0b1pTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmxjWFZoYkhNb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbTl5YVdkcGJpNWxjWFZoYkhNb2RHaHBjeTV2Y21sbmFXNHBJQ1ltSUdVdVpHbHlaV04wYVc5dUxtVnhkV0ZzY3loMGFHbHpMbVJwY21WamRHbHZiaWs3Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb0tTNWpiM0I1S0hSb2FYTXBPd29nSUNBZ2ZRcDlMQ0I2WlNBOUlHTnNZWE56SUhNeElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0c0lHa3NJSElzSUdFc0lHOHNJR01zSUd3c0lHZ3NJSFVzSUdRc0lHWXNJRzBzSUY4c0lHY3Bld29nSUNBZ0lDQWdJSE14TG5CeWIzUnZkSGx3WlM1cGMwMWhkSEpwZURRZ1BTQWhNQ3dnZEdocGN5NWxiR1Z0Wlc1MGN5QTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Rb2dJQ0FnSUNBZ0lGMHNJR1VnSVQwOUlIWnZhV1FnTUNBbUppQjBhR2x6TG5ObGRDaGxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZMQ0JqTENCc0xDQm9MQ0IxTENCa0xDQm1MQ0J0TENCZkxDQm5LVHNLSUNBZ0lIMEtJQ0FnSUhObGRDaGxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZMQ0JqTENCc0xDQm9MQ0IxTENCa0xDQm1MQ0J0TENCZkxDQm5LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIQWdQU0IwYUdsekxtVnNaVzFsYm5Sek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCd1d6QmRJRDBnWlN3Z2NGczBYU0E5SUhRc0lIQmJPRjBnUFNCdUxDQndXekV5WFNBOUlHa3NJSEJiTVYwZ1BTQnlMQ0J3V3pWZElEMGdZU3dnY0ZzNVhTQTlJRzhzSUhCYk1UTmRJRDBnWXl3Z2NGc3lYU0E5SUd3c0lIQmJObDBnUFNCb0xDQndXekV3WFNBOUlIVXNJSEJiTVRSZElEMGdaQ3dnY0ZzelhTQTlJR1lzSUhCYk4xMGdQU0J0TENCd1d6RXhYU0E5SUY4c0lIQmJNVFZkSUQwZ1p5d2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHbGtaVzUwYVhSNUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRDZ3hMQ0F3TENBd0xDQXdMQ0F3TENBeExDQXdMQ0F3TENBd0xDQXdMQ0F4TENBd0xDQXdMQ0F3TENBd0xDQXhLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnY3pFb0tTNW1jbTl0UVhKeVlYa29kR2hwY3k1bGJHVnRaVzUwY3lrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11Wld4bGJXVnVkSE1zSUc0Z1BTQmxMbVZzWlcxbGJuUnpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBXekJkSUQwZ2Jsc3dYU3dnZEZzeFhTQTlJRzViTVYwc0lIUmJNbDBnUFNCdVd6SmRMQ0IwV3pOZElEMGdibHN6WFN3Z2RGczBYU0E5SUc1Yk5GMHNJSFJiTlYwZ1BTQnVXelZkTENCMFd6WmRJRDBnYmxzMlhTd2dkRnMzWFNBOUlHNWJOMTBzSUhSYk9GMGdQU0J1V3poZExDQjBXemxkSUQwZ2JsczVYU3dnZEZzeE1GMGdQU0J1V3pFd1hTd2dkRnN4TVYwZ1BTQnVXekV4WFN3Z2RGc3hNbDBnUFNCdVd6RXlYU3dnZEZzeE0xMGdQU0J1V3pFelhTd2dkRnN4TkYwZ1BTQnVXekUwWFN3Z2RGc3hOVjBnUFNCdVd6RTFYU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR052Y0hsUWIzTnBkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1Wc1pXMWxiblJ6TENCdUlEMGdaUzVsYkdWdFpXNTBjenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRnN4TWwwZ1BTQnVXekV5WFN3Z2RGc3hNMTBnUFNCdVd6RXpYU3dnZEZzeE5GMGdQU0J1V3pFMFhTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxTllYUnlhWGd6S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlHVXVaV3hsYldWdWRITTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMEtIUmJNRjBzSUhSYk0xMHNJSFJiTmwwc0lEQXNJSFJiTVYwc0lIUmJORjBzSUhSYk4xMHNJREFzSUhSYk1sMHNJSFJiTlYwc0lIUmJPRjBzSURBc0lEQXNJREFzSURBc0lERXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWGgwY21GamRFSmhjMmx6S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1elpYUkdjbTl0VFdGMGNtbDRRMjlzZFcxdUtIUm9hWE1zSURBcExDQjBMbk5sZEVaeWIyMU5ZWFJ5YVhoRGIyeDFiVzRvZEdocGN5d2dNU2tzSUc0dWMyVjBSbkp2YlUxaGRISnBlRU52YkhWdGJpaDBhR2x6TENBeUtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMWhhMlZDWVhOcGN5aGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMEtHVXVlQ3dnZEM1NExDQnVMbmdzSURBc0lHVXVlU3dnZEM1NUxDQnVMbmtzSURBc0lHVXVlaXdnZEM1NkxDQnVMbm9zSURBc0lEQXNJREFzSURBc0lERXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWGgwY21GamRGSnZkR0YwYVc5dUtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNc0lHNGdQU0JsTG1Wc1pXMWxiblJ6TENCcElEMGdNU0F2SUUxcExuTmxkRVp5YjIxTllYUnlhWGhEYjJ4MWJXNG9aU3dnTUNrdWJHVnVaM1JvS0Nrc0lISWdQU0F4SUM4Z1RXa3VjMlYwUm5KdmJVMWhkSEpwZUVOdmJIVnRiaWhsTENBeEtTNXNaVzVuZEdnb0tTd2dZU0E5SURFZ0x5Qk5hUzV6WlhSR2NtOXRUV0YwY21sNFEyOXNkVzF1S0dVc0lESXBMbXhsYm1kMGFDZ3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBXekJkSUQwZ2Jsc3dYU0FxSUdrc0lIUmJNVjBnUFNCdVd6RmRJQ29nYVN3Z2RGc3lYU0E5SUc1Yk1sMGdLaUJwTENCMFd6TmRJRDBnTUN3Z2RGczBYU0E5SUc1Yk5GMGdLaUJ5TENCMFd6VmRJRDBnYmxzMVhTQXFJSElzSUhSYk5sMGdQU0J1V3paZElDb2djaXdnZEZzM1hTQTlJREFzSUhSYk9GMGdQU0J1V3poZElDb2dZU3dnZEZzNVhTQTlJRzViT1YwZ0tpQmhMQ0IwV3pFd1hTQTlJRzViTVRCZElDb2dZU3dnZEZzeE1WMGdQU0F3TENCMFd6RXlYU0E5SURBc0lIUmJNVE5kSUQwZ01Dd2dkRnN4TkYwZ1BTQXdMQ0IwV3pFMVhTQTlJREVzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0WVd0bFVtOTBZWFJwYjI1R2NtOXRSWFZzWlhJb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1bGJHVnRaVzUwY3l3Z2JpQTlJR1V1ZUN3Z2FTQTlJR1V1ZVN3Z2NpQTlJR1V1ZWl3Z1lTQTlJRTFoZEdndVkyOXpLRzRwTENCdklEMGdUV0YwYUM1emFXNG9iaWtzSUdNZ1BTQk5ZWFJvTG1OdmN5aHBLU3dnYkNBOUlFMWhkR2d1YzJsdUtHa3BMQ0JvSUQwZ1RXRjBhQzVqYjNNb2Npa3NJSFVnUFNCTllYUm9Mbk5wYmloeUtUc0tJQ0FnSUNBZ0lDQnBaaUFvWlM1dmNtUmxjaUE5UFQwZ0lsaFpXaUlwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQmhJQ29nYUN3Z1ppQTlJR0VnS2lCMUxDQnRJRDBnYnlBcUlHZ3NJRjhnUFNCdklDb2dkVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RGc3dYU0E5SUdNZ0tpQm9MQ0IwV3pSZElEMGdMV01nS2lCMUxDQjBXemhkSUQwZ2JDd2dkRnN4WFNBOUlHWWdLeUJ0SUNvZ2JDd2dkRnMxWFNBOUlHUWdMU0JmSUNvZ2JDd2dkRnM1WFNBOUlDMXZJQ29nWXl3Z2RGc3lYU0E5SUY4Z0xTQmtJQ29nYkN3Z2RGczJYU0E5SUcwZ0t5Qm1JQ29nYkN3Z2RGc3hNRjBnUFNCaElDb2dZenNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dVdWIzSmtaWElnUFQwOUlDSlpXRm9pS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdZeUFxSUdnc0lHWWdQU0JqSUNvZ2RTd2diU0E5SUd3Z0tpQm9MQ0JmSUQwZ2JDQXFJSFU3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUmJNRjBnUFNCa0lDc2dYeUFxSUc4c0lIUmJORjBnUFNCdElDb2dieUF0SUdZc0lIUmJPRjBnUFNCaElDb2diQ3dnZEZzeFhTQTlJR0VnS2lCMUxDQjBXelZkSUQwZ1lTQXFJR2dzSUhSYk9WMGdQU0F0Ynl3Z2RGc3lYU0E5SUdZZ0tpQnZJQzBnYlN3Z2RGczJYU0E5SUY4Z0t5QmtJQ29nYnl3Z2RGc3hNRjBnUFNCaElDb2dZenNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dVdWIzSmtaWElnUFQwOUlDSmFXRmtpS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdZeUFxSUdnc0lHWWdQU0JqSUNvZ2RTd2diU0E5SUd3Z0tpQm9MQ0JmSUQwZ2JDQXFJSFU3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUmJNRjBnUFNCa0lDMGdYeUFxSUc4c0lIUmJORjBnUFNBdFlTQXFJSFVzSUhSYk9GMGdQU0J0SUNzZ1ppQXFJRzhzSUhSYk1WMGdQU0JtSUNzZ2JTQXFJRzhzSUhSYk5WMGdQU0JoSUNvZ2FDd2dkRnM1WFNBOUlGOGdMU0JrSUNvZ2J5d2dkRnN5WFNBOUlDMWhJQ29nYkN3Z2RGczJYU0E5SUc4c0lIUmJNVEJkSUQwZ1lTQXFJR003Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNobExtOXlaR1Z5SUQwOVBTQWlXbGxZSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pDQTlJR0VnS2lCb0xDQm1JRDBnWVNBcUlIVXNJRzBnUFNCdklDb2dhQ3dnWHlBOUlHOGdLaUIxT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBXekJkSUQwZ1l5QXFJR2dzSUhSYk5GMGdQU0J0SUNvZ2JDQXRJR1lzSUhSYk9GMGdQU0JrSUNvZ2JDQXJJRjhzSUhSYk1WMGdQU0JqSUNvZ2RTd2dkRnMxWFNBOUlGOGdLaUJzSUNzZ1pDd2dkRnM1WFNBOUlHWWdLaUJzSUMwZ2JTd2dkRnN5WFNBOUlDMXNMQ0IwV3paZElEMGdieUFxSUdNc0lIUmJNVEJkSUQwZ1lTQXFJR003Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNobExtOXlaR1Z5SUQwOVBTQWlXVnBZSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pDQTlJR0VnS2lCakxDQm1JRDBnWVNBcUlHd3NJRzBnUFNCdklDb2dZeXdnWHlBOUlHOGdLaUJzT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBXekJkSUQwZ1l5QXFJR2dzSUhSYk5GMGdQU0JmSUMwZ1pDQXFJSFVzSUhSYk9GMGdQU0J0SUNvZ2RTQXJJR1lzSUhSYk1WMGdQU0IxTENCMFd6VmRJRDBnWVNBcUlHZ3NJSFJiT1YwZ1BTQXRieUFxSUdnc0lIUmJNbDBnUFNBdGJDQXFJR2dzSUhSYk5sMGdQU0JtSUNvZ2RTQXJJRzBzSUhSYk1UQmRJRDBnWkNBdElGOGdLaUIxT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pTNXZjbVJsY2lBOVBUMGdJbGhhV1NJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0JoSUNvZ1l5d2daaUE5SUdFZ0tpQnNMQ0J0SUQwZ2J5QXFJR01zSUY4Z1BTQnZJQ29nYkRzS0lDQWdJQ0FnSUNBZ0lDQWdkRnN3WFNBOUlHTWdLaUJvTENCMFd6UmRJRDBnTFhVc0lIUmJPRjBnUFNCc0lDb2dhQ3dnZEZzeFhTQTlJR1FnS2lCMUlDc2dYeXdnZEZzMVhTQTlJR0VnS2lCb0xDQjBXemxkSUQwZ1ppQXFJSFVnTFNCdExDQjBXekpkSUQwZ2JTQXFJSFVnTFNCbUxDQjBXelpkSUQwZ2J5QXFJR2dzSUhSYk1UQmRJRDBnWHlBcUlIVWdLeUJrT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEZzelhTQTlJREFzSUhSYk4xMGdQU0F3TENCMFd6RXhYU0E5SURBc0lIUmJNVEpkSUQwZ01Dd2dkRnN4TTEwZ1BTQXdMQ0IwV3pFMFhTQTlJREFzSUhSYk1UVmRJRDBnTVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxaGEyVlNiM1JoZEdsdmJrWnliMjFSZFdGMFpYSnVhVzl1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYjIxd2IzTmxLR0Z3TENCbExDQnZjQ2s3Q2lBZ0lDQjlDaUFnSUNCc2IyOXJRWFFvWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEdocGN5NWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2VuUXVjM1ZpVm1WamRHOXljeWhsTENCMEtTd2dlblF1YkdWdVozUm9VM0VvS1NBOVBUMGdNQ0FtSmlBb2VuUXVlaUE5SURFcExDQjZkQzV1YjNKdFlXeHBlbVVvS1N3Z1VtNHVZM0p2YzNOV1pXTjBiM0p6S0c0c0lIcDBLU3dnVW00dWJHVnVaM1JvVTNFb0tTQTlQVDBnTUNBbUppQW9UV0YwYUM1aFluTW9iaTU2S1NBOVBUMGdNU0EvSUhwMExuZ2dLejBnTVdVdE5DQTZJSHAwTG5vZ0t6MGdNV1V0TkN3Z2VuUXVibTl5YldGc2FYcGxLQ2tzSUZKdUxtTnliM056Vm1WamRHOXljeWh1TENCNmRDa3BMQ0JTYmk1dWIzSnRZV3hwZW1Vb0tTd2dXbk11WTNKdmMzTldaV04wYjNKektIcDBMQ0JTYmlrc0lHbGJNRjBnUFNCU2JpNTRMQ0JwV3pSZElEMGdXbk11ZUN3Z2FWczRYU0E5SUhwMExuZ3NJR2xiTVYwZ1BTQlNiaTU1TENCcFd6VmRJRDBnV25NdWVTd2dhVnM1WFNBOUlIcDBMbmtzSUdsYk1sMGdQU0JTYmk1NkxDQnBXelpkSUQwZ1duTXVlaXdnYVZzeE1GMGdQU0I2ZEM1NkxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JYVnNkR2x3Ykhrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xMWJIUnBjR3g1VFdGMGNtbGpaWE1vZEdocGN5d2daU2s3Q2lBZ0lDQjlDaUFnSUNCd2NtVnRkV3gwYVhCc2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJYVnNkR2x3YkhsTllYUnlhV05sY3lobExDQjBhR2x6S1RzS0lDQWdJSDBLSUNBZ0lHMTFiSFJwY0d4NVRXRjBjbWxqWlhNb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnWlM1bGJHVnRaVzUwY3l3Z2FTQTlJSFF1Wld4bGJXVnVkSE1zSUhJZ1BTQjBhR2x6TG1Wc1pXMWxiblJ6TENCaElEMGdibHN3WFN3Z2J5QTlJRzViTkYwc0lHTWdQU0J1V3poZExDQnNJRDBnYmxzeE1sMHNJR2dnUFNCdVd6RmRMQ0IxSUQwZ2JsczFYU3dnWkNBOUlHNWJPVjBzSUdZZ1BTQnVXekV6WFN3Z2JTQTlJRzViTWwwc0lGOGdQU0J1V3paZExDQm5JRDBnYmxzeE1GMHNJSEFnUFNCdVd6RTBYU3dnZGlBOUlHNWJNMTBzSUhnZ1BTQnVXemRkTENCNUlEMGdibHN4TVYwc0lHSWdQU0J1V3pFMVhTd2dkeUE5SUdsYk1GMHNJRklnUFNCcFd6UmRMQ0JKSUQwZ2FWczRYU3dnVFNBOUlHbGJNVEpkTENCVUlEMGdhVnN4WFN3Z1R5QTlJR2xiTlYwc0lGa2dQU0JwV3psZExDQWtJRDBnYVZzeE0xMHNJRlVnUFNCcFd6SmRMQ0I2SUQwZ2FWczJYU3dnY1NBOUlHbGJNVEJkTENCSUlEMGdhVnN4TkYwc0lHNWxJRDBnYVZzelhTd2dWeUE5SUdsYk4xMHNJRXNnUFNCcFd6RXhYU3dnUkNBOUlHbGJNVFZkT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5V3pCZElEMGdZU0FxSUhjZ0t5QnZJQ29nVkNBcklHTWdLaUJWSUNzZ2JDQXFJRzVsTENCeVd6UmRJRDBnWVNBcUlGSWdLeUJ2SUNvZ1R5QXJJR01nS2lCNklDc2diQ0FxSUZjc0lISmJPRjBnUFNCaElDb2dTU0FySUc4Z0tpQlpJQ3NnWXlBcUlIRWdLeUJzSUNvZ1N5d2djbHN4TWwwZ1BTQmhJQ29nVFNBcklHOGdLaUFrSUNzZ1l5QXFJRWdnS3lCc0lDb2dSQ3dnY2xzeFhTQTlJR2dnS2lCM0lDc2dkU0FxSUZRZ0t5QmtJQ29nVlNBcklHWWdLaUJ1WlN3Z2NsczFYU0E5SUdnZ0tpQlNJQ3NnZFNBcUlFOGdLeUJrSUNvZ2VpQXJJR1lnS2lCWExDQnlXemxkSUQwZ2FDQXFJRWtnS3lCMUlDb2dXU0FySUdRZ0tpQnhJQ3NnWmlBcUlFc3NJSEpiTVROZElEMGdhQ0FxSUUwZ0t5QjFJQ29nSkNBcklHUWdLaUJJSUNzZ1ppQXFJRVFzSUhKYk1sMGdQU0J0SUNvZ2R5QXJJRjhnS2lCVUlDc2daeUFxSUZVZ0t5QndJQ29nYm1Vc0lISmJObDBnUFNCdElDb2dVaUFySUY4Z0tpQlBJQ3NnWnlBcUlIb2dLeUJ3SUNvZ1Z5d2djbHN4TUYwZ1BTQnRJQ29nU1NBcklGOGdLaUJaSUNzZ1p5QXFJSEVnS3lCd0lDb2dTeXdnY2xzeE5GMGdQU0J0SUNvZ1RTQXJJRjhnS2lBa0lDc2daeUFxSUVnZ0t5QndJQ29nUkN3Z2Nsc3pYU0E5SUhZZ0tpQjNJQ3NnZUNBcUlGUWdLeUI1SUNvZ1ZTQXJJR0lnS2lCdVpTd2djbHMzWFNBOUlIWWdLaUJTSUNzZ2VDQXFJRThnS3lCNUlDb2dlaUFySUdJZ0tpQlhMQ0J5V3pFeFhTQTlJSFlnS2lCSklDc2dlQ0FxSUZrZ0t5QjVJQ29nY1NBcklHSWdLaUJMTENCeVd6RTFYU0E5SUhZZ0tpQk5JQ3NnZUNBcUlDUWdLeUI1SUNvZ1NDQXJJR0lnS2lCRUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JYVnNkR2x3YkhsVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVsYkdWdFpXNTBjenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRnN3WFNBcVBTQmxMQ0IwV3pSZElDbzlJR1VzSUhSYk9GMGdLajBnWlN3Z2RGc3hNbDBnS2owZ1pTd2dkRnN4WFNBcVBTQmxMQ0IwV3pWZElDbzlJR1VzSUhSYk9WMGdLajBnWlN3Z2RGc3hNMTBnS2owZ1pTd2dkRnN5WFNBcVBTQmxMQ0IwV3paZElDbzlJR1VzSUhSYk1UQmRJQ285SUdVc0lIUmJNVFJkSUNvOUlHVXNJSFJiTTEwZ0tqMGdaU3dnZEZzM1hTQXFQU0JsTENCMFd6RXhYU0FxUFNCbExDQjBXekUxWFNBcVBTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaR1YwWlhKdGFXNWhiblFvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbVZzWlcxbGJuUnpMQ0IwSUQwZ1pWc3dYU3dnYmlBOUlHVmJORjBzSUdrZ1BTQmxXemhkTENCeUlEMGdaVnN4TWwwc0lHRWdQU0JsV3pGZExDQnZJRDBnWlZzMVhTd2dZeUE5SUdWYk9WMHNJR3dnUFNCbFd6RXpYU3dnYUNBOUlHVmJNbDBzSUhVZ1BTQmxXelpkTENCa0lEMGdaVnN4TUYwc0lHWWdQU0JsV3pFMFhTd2diU0E5SUdWYk0xMHNJRjhnUFNCbFd6ZGRMQ0JuSUQwZ1pWc3hNVjBzSUhBZ1BTQmxXekUxWFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYlNBcUlDZ3JjaUFxSUdNZ0tpQjFJQzBnYVNBcUlHd2dLaUIxSUMwZ2NpQXFJRzhnS2lCa0lDc2diaUFxSUd3Z0tpQmtJQ3NnYVNBcUlHOGdLaUJtSUMwZ2JpQXFJR01nS2lCbUtTQXJJRjhnS2lBb0szUWdLaUJqSUNvZ1ppQXRJSFFnS2lCc0lDb2daQ0FySUhJZ0tpQmhJQ29nWkNBdElHa2dLaUJoSUNvZ1ppQXJJR2tnS2lCc0lDb2dhQ0F0SUhJZ0tpQmpJQ29nYUNrZ0t5Qm5JQ29nS0N0MElDb2diQ0FxSUhVZ0xTQjBJQ29nYnlBcUlHWWdMU0J5SUNvZ1lTQXFJSFVnS3lCdUlDb2dZU0FxSUdZZ0t5QnlJQ29nYnlBcUlHZ2dMU0J1SUNvZ2JDQXFJR2dwSUNzZ2NDQXFJQ2d0YVNBcUlHOGdLaUJvSUMwZ2RDQXFJR01nS2lCMUlDc2dkQ0FxSUc4Z0tpQmtJQ3NnYVNBcUlHRWdLaUIxSUMwZ2JpQXFJR0VnS2lCa0lDc2diaUFxSUdNZ0tpQm9LVHNLSUNBZ0lIMEtJQ0FnSUhSeVlXNXpjRzl6WlNncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11Wld4bGJXVnVkSE1zSUhRN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRZ1BTQmxXekZkTENCbFd6RmRJRDBnWlZzMFhTd2daVnMwWFNBOUlIUXNJSFFnUFNCbFd6SmRMQ0JsV3pKZElEMGdaVnM0WFN3Z1pWczRYU0E5SUhRc0lIUWdQU0JsV3paZExDQmxXelpkSUQwZ1pWczVYU3dnWlZzNVhTQTlJSFFzSUhRZ1BTQmxXek5kTENCbFd6TmRJRDBnWlZzeE1sMHNJR1ZiTVRKZElEMGdkQ3dnZENBOUlHVmJOMTBzSUdWYk4xMGdQU0JsV3pFelhTd2daVnN4TTEwZ1BTQjBMQ0IwSUQwZ1pWc3hNVjBzSUdWYk1URmRJRDBnWlZzeE5GMHNJR1ZiTVRSZElEMGdkQ3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZCdmMybDBhVzl1S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXVaV3hsYldWdWRITTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVhWE5XWldOMGIzSXpJRDhnS0dsYk1USmRJRDBnWlM1NExDQnBXekV6WFNBOUlHVXVlU3dnYVZzeE5GMGdQU0JsTG5vcElEb2dLR2xiTVRKZElEMGdaU3dnYVZzeE0xMGdQU0IwTENCcFd6RTBYU0E5SUc0cExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2FXNTJaWEowS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVsYkdWdFpXNTBjeXdnZENBOUlHVmJNRjBzSUc0Z1BTQmxXekZkTENCcElEMGdaVnN5WFN3Z2NpQTlJR1ZiTTEwc0lHRWdQU0JsV3pSZExDQnZJRDBnWlZzMVhTd2dZeUE5SUdWYk5sMHNJR3dnUFNCbFd6ZGRMQ0JvSUQwZ1pWczRYU3dnZFNBOUlHVmJPVjBzSUdRZ1BTQmxXekV3WFN3Z1ppQTlJR1ZiTVRGZExDQnRJRDBnWlZzeE1sMHNJRjhnUFNCbFd6RXpYU3dnWnlBOUlHVmJNVFJkTENCd0lEMGdaVnN4TlYwc0lIWWdQU0IxSUNvZ1p5QXFJR3dnTFNCZklDb2daQ0FxSUd3Z0t5QmZJQ29nWXlBcUlHWWdMU0J2SUNvZ1p5QXFJR1lnTFNCMUlDb2dZeUFxSUhBZ0t5QnZJQ29nWkNBcUlIQXNJSGdnUFNCdElDb2daQ0FxSUd3Z0xTQm9JQ29nWnlBcUlHd2dMU0J0SUNvZ1l5QXFJR1lnS3lCaElDb2daeUFxSUdZZ0t5Qm9JQ29nWXlBcUlIQWdMU0JoSUNvZ1pDQXFJSEFzSUhrZ1BTQm9JQ29nWHlBcUlHd2dMU0J0SUNvZ2RTQXFJR3dnS3lCdElDb2dieUFxSUdZZ0xTQmhJQ29nWHlBcUlHWWdMU0JvSUNvZ2J5QXFJSEFnS3lCaElDb2dkU0FxSUhBc0lHSWdQU0J0SUNvZ2RTQXFJR01nTFNCb0lDb2dYeUFxSUdNZ0xTQnRJQ29nYnlBcUlHUWdLeUJoSUNvZ1h5QXFJR1FnS3lCb0lDb2dieUFxSUdjZ0xTQmhJQ29nZFNBcUlHY3NJSGNnUFNCMElDb2dkaUFySUc0Z0tpQjRJQ3NnYVNBcUlIa2dLeUJ5SUNvZ1lqc0tJQ0FnSUNBZ0lDQnBaaUFvZHlBOVBUMGdNQ2tnY21WMGRYSnVJSFJvYVhNdWMyVjBLREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFwT3dvZ0lDQWdJQ0FnSUd4bGRDQlNJRDBnTVNBdklIYzdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVmJNRjBnUFNCMklDb2dVaXdnWlZzeFhTQTlJQ2hmSUNvZ1pDQXFJSElnTFNCMUlDb2daeUFxSUhJZ0xTQmZJQ29nYVNBcUlHWWdLeUJ1SUNvZ1p5QXFJR1lnS3lCMUlDb2dhU0FxSUhBZ0xTQnVJQ29nWkNBcUlIQXBJQ29nVWl3Z1pWc3lYU0E5SUNodklDb2daeUFxSUhJZ0xTQmZJQ29nWXlBcUlISWdLeUJmSUNvZ2FTQXFJR3dnTFNCdUlDb2daeUFxSUd3Z0xTQnZJQ29nYVNBcUlIQWdLeUJ1SUNvZ1l5QXFJSEFwSUNvZ1Vpd2daVnN6WFNBOUlDaDFJQ29nWXlBcUlISWdMU0J2SUNvZ1pDQXFJSElnTFNCMUlDb2dhU0FxSUd3Z0t5QnVJQ29nWkNBcUlHd2dLeUJ2SUNvZ2FTQXFJR1lnTFNCdUlDb2dZeUFxSUdZcElDb2dVaXdnWlZzMFhTQTlJSGdnS2lCU0xDQmxXelZkSUQwZ0tHZ2dLaUJuSUNvZ2NpQXRJRzBnS2lCa0lDb2djaUFySUcwZ0tpQnBJQ29nWmlBdElIUWdLaUJuSUNvZ1ppQXRJR2dnS2lCcElDb2djQ0FySUhRZ0tpQmtJQ29nY0NrZ0tpQlNMQ0JsV3paZElEMGdLRzBnS2lCaklDb2djaUF0SUdFZ0tpQm5JQ29nY2lBdElHMGdLaUJwSUNvZ2JDQXJJSFFnS2lCbklDb2diQ0FySUdFZ0tpQnBJQ29nY0NBdElIUWdLaUJqSUNvZ2NDa2dLaUJTTENCbFd6ZGRJRDBnS0dFZ0tpQmtJQ29nY2lBdElHZ2dLaUJqSUNvZ2NpQXJJR2dnS2lCcElDb2diQ0F0SUhRZ0tpQmtJQ29nYkNBdElHRWdLaUJwSUNvZ1ppQXJJSFFnS2lCaklDb2daaWtnS2lCU0xDQmxXemhkSUQwZ2VTQXFJRklzSUdWYk9WMGdQU0FvYlNBcUlIVWdLaUJ5SUMwZ2FDQXFJRjhnS2lCeUlDMGdiU0FxSUc0Z0tpQm1JQ3NnZENBcUlGOGdLaUJtSUNzZ2FDQXFJRzRnS2lCd0lDMGdkQ0FxSUhVZ0tpQndLU0FxSUZJc0lHVmJNVEJkSUQwZ0tHRWdLaUJmSUNvZ2NpQXRJRzBnS2lCdklDb2djaUFySUcwZ0tpQnVJQ29nYkNBdElIUWdLaUJmSUNvZ2JDQXRJR0VnS2lCdUlDb2djQ0FySUhRZ0tpQnZJQ29nY0NrZ0tpQlNMQ0JsV3pFeFhTQTlJQ2hvSUNvZ2J5QXFJSElnTFNCaElDb2dkU0FxSUhJZ0xTQm9JQ29nYmlBcUlHd2dLeUIwSUNvZ2RTQXFJR3dnS3lCaElDb2diaUFxSUdZZ0xTQjBJQ29nYnlBcUlHWXBJQ29nVWl3Z1pWc3hNbDBnUFNCaUlDb2dVaXdnWlZzeE0xMGdQU0FvYUNBcUlGOGdLaUJwSUMwZ2JTQXFJSFVnS2lCcElDc2diU0FxSUc0Z0tpQmtJQzBnZENBcUlGOGdLaUJrSUMwZ2FDQXFJRzRnS2lCbklDc2dkQ0FxSUhVZ0tpQm5LU0FxSUZJc0lHVmJNVFJkSUQwZ0tHMGdLaUJ2SUNvZ2FTQXRJR0VnS2lCZklDb2dhU0F0SUcwZ0tpQnVJQ29nWXlBcklIUWdLaUJmSUNvZ1l5QXJJR0VnS2lCdUlDb2daeUF0SUhRZ0tpQnZJQ29nWnlrZ0tpQlNMQ0JsV3pFMVhTQTlJQ2hoSUNvZ2RTQXFJR2tnTFNCb0lDb2dieUFxSUdrZ0t5Qm9JQ29nYmlBcUlHTWdMU0IwSUNvZ2RTQXFJR01nTFNCaElDb2diaUFxSUdRZ0t5QjBJQ29nYnlBcUlHUXBJQ29nVWl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOallXeGxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVaV3hsYldWdWRITXNJRzRnUFNCbExuZ3NJR2tnUFNCbExua3NJSElnUFNCbExubzdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUmJNRjBnS2owZ2Jpd2dkRnMwWFNBcVBTQnBMQ0IwV3poZElDbzlJSElzSUhSYk1WMGdLajBnYml3Z2RGczFYU0FxUFNCcExDQjBXemxkSUNvOUlISXNJSFJiTWwwZ0tqMGdiaXdnZEZzMlhTQXFQU0JwTENCMFd6RXdYU0FxUFNCeUxDQjBXek5kSUNvOUlHNHNJSFJiTjEwZ0tqMGdhU3dnZEZzeE1WMGdLajBnY2l3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRFMWhlRk5qWVd4bFQyNUJlR2x6S0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVsYkdWdFpXNTBjeXdnZENBOUlHVmJNRjBnS2lCbFd6QmRJQ3NnWlZzeFhTQXFJR1ZiTVYwZ0t5QmxXekpkSUNvZ1pWc3lYU3dnYmlBOUlHVmJORjBnS2lCbFd6UmRJQ3NnWlZzMVhTQXFJR1ZiTlYwZ0t5QmxXelpkSUNvZ1pWczJYU3dnYVNBOUlHVmJPRjBnS2lCbFd6aGRJQ3NnWlZzNVhTQXFJR1ZiT1YwZ0t5QmxXekV3WFNBcUlHVmJNVEJkT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xuTnhjblFvVFdGMGFDNXRZWGdvZEN3Z2Jpd2dhU2twT3dvZ0lDQWdmUW9nSUNBZ2JXRnJaVlJ5WVc1emJHRjBhVzl1S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1cGMxWmxZM1J2Y2pNZ1B5QjBhR2x6TG5ObGRDZ3hMQ0F3TENBd0xDQmxMbmdzSURBc0lERXNJREFzSUdVdWVTd2dNQ3dnTUN3Z01Td2daUzU2TENBd0xDQXdMQ0F3TENBeEtTQTZJSFJvYVhNdWMyVjBLREVzSURBc0lEQXNJR1VzSURBc0lERXNJREFzSUhRc0lEQXNJREFzSURFc0lHNHNJREFzSURBc0lEQXNJREVwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYldGclpWSnZkR0YwYVc5dVdDaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JOWVhSb0xtTnZjeWhsS1N3Z2JpQTlJRTFoZEdndWMybHVLR1VwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTmxkQ2d4TENBd0xDQXdMQ0F3TENBd0xDQjBMQ0F0Yml3Z01Dd2dNQ3dnYml3Z2RDd2dNQ3dnTUN3Z01Dd2dNQ3dnTVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdFlXdGxVbTkwWVhScGIyNVpLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUUxaGRHZ3VZMjl6S0dVcExDQnVJRDBnVFdGMGFDNXphVzRvWlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwS0hRc0lEQXNJRzRzSURBc0lEQXNJREVzSURBc0lEQXNJQzF1TENBd0xDQjBMQ0F3TENBd0xDQXdMQ0F3TENBeEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMWhhMlZTYjNSaGRHbHZibG9vWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1RXRjBhQzVqYjNNb1pTa3NJRzRnUFNCTllYUm9Mbk5wYmlobEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhRb2RDd2dMVzRzSURBc0lEQXNJRzRzSUhRc0lEQXNJREFzSURBc0lEQXNJREVzSURBc0lEQXNJREFzSURBc0lERXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiV0ZyWlZKdmRHRjBhVzl1UVhocGN5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCTllYUm9MbU52Y3loMEtTd2dhU0E5SUUxaGRHZ3VjMmx1S0hRcExDQnlJRDBnTVNBdElHNHNJR0VnUFNCbExuZ3NJRzhnUFNCbExua3NJR01nUFNCbExub3NJR3dnUFNCeUlDb2dZU3dnYUNBOUlISWdLaUJ2T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTmxkQ2hzSUNvZ1lTQXJJRzRzSUd3Z0tpQnZJQzBnYVNBcUlHTXNJR3dnS2lCaklDc2dhU0FxSUc4c0lEQXNJR3dnS2lCdklDc2dhU0FxSUdNc0lHZ2dLaUJ2SUNzZ2Jpd2dhQ0FxSUdNZ0xTQnBJQ29nWVN3Z01Dd2diQ0FxSUdNZ0xTQnBJQ29nYnl3Z2FDQXFJR01nS3lCcElDb2dZU3dnY2lBcUlHTWdLaUJqSUNzZ2Jpd2dNQ3dnTUN3Z01Dd2dNQ3dnTVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdFlXdGxVMk5oYkdVb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5sZENobExDQXdMQ0F3TENBd0xDQXdMQ0IwTENBd0xDQXdMQ0F3TENBd0xDQnVMQ0F3TENBd0xDQXdMQ0F3TENBeEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMWhhMlZUYUdWaGNpaGxMQ0IwTENCdUxDQnBMQ0J5TENCaEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMEtERXNJRzRzSUhJc0lEQXNJR1VzSURFc0lHRXNJREFzSUhRc0lHa3NJREVzSURBc0lEQXNJREFzSURBc0lERXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMjl0Y0c5elpTaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQjBhR2x6TG1Wc1pXMWxiblJ6TENCeUlEMGdkQzVmZUN3Z1lTQTlJSFF1WDNrc0lHOGdQU0IwTGw5NkxDQmpJRDBnZEM1ZmR5d2diQ0E5SUhJZ0t5QnlMQ0JvSUQwZ1lTQXJJR0VzSUhVZ1BTQnZJQ3NnYnl3Z1pDQTlJSElnS2lCc0xDQm1JRDBnY2lBcUlHZ3NJRzBnUFNCeUlDb2dkU3dnWHlBOUlHRWdLaUJvTENCbklEMGdZU0FxSUhVc0lIQWdQU0J2SUNvZ2RTd2dkaUE5SUdNZ0tpQnNMQ0I0SUQwZ1l5QXFJR2dzSUhrZ1BTQmpJQ29nZFN3Z1lpQTlJRzR1ZUN3Z2R5QTlJRzR1ZVN3Z1VpQTlJRzR1ZWpzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVZzd1hTQTlJQ2d4SUMwZ0tGOGdLeUJ3S1NrZ0tpQmlMQ0JwV3pGZElEMGdLR1lnS3lCNUtTQXFJR0lzSUdsYk1sMGdQU0FvYlNBdElIZ3BJQ29nWWl3Z2FWc3pYU0E5SURBc0lHbGJORjBnUFNBb1ppQXRJSGtwSUNvZ2R5d2dhVnMxWFNBOUlDZ3hJQzBnS0dRZ0t5QndLU2tnS2lCM0xDQnBXelpkSUQwZ0tHY2dLeUIyS1NBcUlIY3NJR2xiTjEwZ1BTQXdMQ0JwV3poZElEMGdLRzBnS3lCNEtTQXFJRklzSUdsYk9WMGdQU0FvWnlBdElIWXBJQ29nVWl3Z2FWc3hNRjBnUFNBb01TQXRJQ2hrSUNzZ1h5a3BJQ29nVWl3Z2FWc3hNVjBnUFNBd0xDQnBXekV5WFNBOUlHVXVlQ3dnYVZzeE0xMGdQU0JsTG5rc0lHbGJNVFJkSUQwZ1pTNTZMQ0JwV3pFMVhTQTlJREVzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JrWldOdmJYQnZjMlVvWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEdocGN5NWxiR1Z0Wlc1MGN5d2djaUE5SUUxcExuTmxkQ2hwV3pCZExDQnBXekZkTENCcFd6SmRLUzVzWlc1bmRHZ29LU3dnWVNBOUlFMXBMbk5sZENocFd6UmRMQ0JwV3pWZExDQnBXelpkS1M1c1pXNW5kR2dvS1N3Z2J5QTlJRTFwTG5ObGRDaHBXemhkTENCcFd6bGRMQ0JwV3pFd1hTa3ViR1Z1WjNSb0tDazdDaUFnSUNBZ0lDQWdkR2hwY3k1a1pYUmxjbTFwYm1GdWRDZ3BJRHdnTUNBbUppQW9jaUE5SUMxeUtTd2daUzU0SUQwZ2FWc3hNbDBzSUdVdWVTQTlJR2xiTVROZExDQmxMbm9nUFNCcFd6RTBYU3dnSkhRdVkyOXdlU2gwYUdsektUc0tJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlERWdMeUJ5TENCb0lEMGdNU0F2SUdFc0lIVWdQU0F4SUM4Z2J6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z0pIUXVaV3hsYldWdWRITmJNRjBnS2owZ2JDd2dKSFF1Wld4bGJXVnVkSE5iTVYwZ0tqMGdiQ3dnSkhRdVpXeGxiV1Z1ZEhOYk1sMGdLajBnYkN3Z0pIUXVaV3hsYldWdWRITmJORjBnS2owZ2FDd2dKSFF1Wld4bGJXVnVkSE5iTlYwZ0tqMGdhQ3dnSkhRdVpXeGxiV1Z1ZEhOYk5sMGdLajBnYUN3Z0pIUXVaV3hsYldWdWRITmJPRjBnS2owZ2RTd2dKSFF1Wld4bGJXVnVkSE5iT1YwZ0tqMGdkU3dnSkhRdVpXeGxiV1Z1ZEhOYk1UQmRJQ285SUhVc0lIUXVjMlYwUm5KdmJWSnZkR0YwYVc5dVRXRjBjbWw0S0NSMEtTd2diaTU0SUQwZ2Npd2diaTU1SUQwZ1lTd2diaTU2SUQwZ2J5d2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMWhhMlZRWlhKemNHVmpkR2wyWlNobExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdklEMGdkbTRwSUhzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUhSb2FYTXVaV3hsYldWdWRITXNJR3dnUFNBeUlDb2djaUF2SUNoMElDMGdaU2tzSUdnZ1BTQXlJQ29nY2lBdklDaHVJQzBnYVNrc0lIVWdQU0FvZENBcklHVXBJQzhnS0hRZ0xTQmxLU3dnWkNBOUlDaHVJQ3NnYVNrZ0x5QW9iaUF0SUdrcExDQm1MQ0J0T3dvZ0lDQWdJQ0FnSUdsbUlDaHZJRDA5UFNCMmJpa2daaUE5SUMwb1lTQXJJSElwSUM4Z0tHRWdMU0J5S1N3Z2JTQTlJQzB5SUNvZ1lTQXFJSElnTHlBb1lTQXRJSElwT3dvZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0c4Z1BUMDlJRWR5S1NCbUlEMGdMV0VnTHlBb1lTQXRJSElwTENCdElEMGdMV0VnS2lCeUlDOGdLR0VnTFNCeUtUc0tJQ0FnSUNBZ0lDQmxiSE5sSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWdpVkVoU1JVVXVUV0YwY21sNE5DNXRZV3RsVUdWeWMzQmxZM1JwZG1Vb0tUb2dTVzUyWVd4cFpDQmpiMjl5WkdsdVlYUmxJSE41YzNSbGJUb2dJaUFySUc4cE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCald6QmRJRDBnYkN3Z1kxczBYU0E5SURBc0lHTmJPRjBnUFNCMUxDQmpXekV5WFNBOUlEQXNJR05iTVYwZ1BTQXdMQ0JqV3pWZElEMGdhQ3dnWTFzNVhTQTlJR1FzSUdOYk1UTmRJRDBnTUN3Z1kxc3lYU0E5SURBc0lHTmJObDBnUFNBd0xDQmpXekV3WFNBOUlHWXNJR05iTVRSZElEMGdiU3dnWTFzelhTQTlJREFzSUdOYk4xMGdQU0F3TENCald6RXhYU0E5SUMweExDQmpXekUxWFNBOUlEQXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRZV3RsVDNKMGFHOW5jbUZ3YUdsaktHVXNJSFFzSUc0c0lHa3NJSElzSUdFc0lHOGdQU0IyYmlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ2RHaHBjeTVsYkdWdFpXNTBjeXdnYkNBOUlERWdMeUFvZENBdElHVXBMQ0JvSUQwZ01TQXZJQ2h1SUMwZ2FTa3NJSFVnUFNBeElDOGdLR0VnTFNCeUtTd2daQ0E5SUNoMElDc2daU2tnS2lCc0xDQm1JRDBnS0c0Z0t5QnBLU0FxSUdnc0lHMHNJRjg3Q2lBZ0lDQWdJQ0FnYVdZZ0tHOGdQVDA5SUhadUtTQnRJRDBnS0dFZ0t5QnlLU0FxSUhVc0lGOGdQU0F0TWlBcUlIVTdDaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9ieUE5UFQwZ1IzSXBJRzBnUFNCeUlDb2dkU3dnWHlBOUlDMHhJQ29nZFRzS0lDQWdJQ0FnSUNCbGJITmxJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lWRWhTUlVVdVRXRjBjbWw0TkM1dFlXdGxUM0owYUc5bmNtRndhR2xqS0NrNklFbHVkbUZzYVdRZ1kyOXZjbVJwYm1GMFpTQnplWE4wWlcwNklDSWdLeUJ2S1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTFzd1hTQTlJRElnS2lCc0xDQmpXelJkSUQwZ01Dd2dZMXM0WFNBOUlEQXNJR05iTVRKZElEMGdMV1FzSUdOYk1WMGdQU0F3TENCald6VmRJRDBnTWlBcUlHZ3NJR05iT1YwZ1BTQXdMQ0JqV3pFelhTQTlJQzFtTENCald6SmRJRDBnTUN3Z1kxczJYU0E5SURBc0lHTmJNVEJkSUQwZ1h5d2dZMXN4TkYwZ1BTQXRiU3dnWTFzelhTQTlJREFzSUdOYk4xMGdQU0F3TENCald6RXhYU0E5SURBc0lHTmJNVFZkSUQwZ01Td2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHVnhkV0ZzY3lobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1Wc1pXMWxiblJ6TENCdUlEMGdaUzVsYkdWdFpXNTBjenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2tnUFNBd095QnBJRHdnTVRZN0lHa3JLeWxwWmlBb2RGdHBYU0FoUFQwZ2JsdHBYU2tnY21WMGRYSnVJQ0V4T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUFoTURzS0lDQWdJSDBLSUNBZ0lHWnliMjFCY25KaGVTaGxMQ0IwSUQwZ01Da2dld29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiaUE5SURBN0lHNGdQQ0F4TmpzZ2Jpc3JLWFJvYVhNdVpXeGxiV1Z1ZEhOYmJsMGdQU0JsVzI0Z0t5QjBYVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZRWEp5WVhrb1pTQTlJRnRkTENCMElEMGdNQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pWdDBYU0E5SUc1Yk1GMHNJR1ZiZENBcklERmRJRDBnYmxzeFhTd2daVnQwSUNzZ01sMGdQU0J1V3pKZExDQmxXM1FnS3lBelhTQTlJRzViTTEwc0lHVmJkQ0FySURSZElEMGdibHMwWFN3Z1pWdDBJQ3NnTlYwZ1BTQnVXelZkTENCbFczUWdLeUEyWFNBOUlHNWJObDBzSUdWYmRDQXJJRGRkSUQwZ2JsczNYU3dnWlZ0MElDc2dPRjBnUFNCdVd6aGRMQ0JsVzNRZ0t5QTVYU0E5SUc1Yk9WMHNJR1ZiZENBcklERXdYU0E5SUc1Yk1UQmRMQ0JsVzNRZ0t5QXhNVjBnUFNCdVd6RXhYU3dnWlZ0MElDc2dNVEpkSUQwZ2Jsc3hNbDBzSUdWYmRDQXJJREV6WFNBOUlHNWJNVE5kTENCbFczUWdLeUF4TkYwZ1BTQnVXekUwWFN3Z1pWdDBJQ3NnTVRWZElEMGdibHN4TlYwc0lHVTdDaUFnSUNCOUNuMHNJRTFwSUQwZ2JtVjNJRUVzSUNSMElEMGdibVYzSUhwbExDQmhjQ0E5SUc1bGR5QkJLREFzSURBc0lEQXBMQ0J2Y0NBOUlHNWxkeUJCS0RFc0lERXNJREVwTENCU2JpQTlJRzVsZHlCQkxDQmFjeUE5SUc1bGR5QkJMQ0I2ZENBOUlHNWxkeUJCTENCWWJDQTlJRzVsZHlCNlpTd2djV3dnUFNCdVpYY2dWWFFzSUZseUlEMGdZMnhoYzNNZ2N6RWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SURBc0lIUWdQU0F3TENCdUlEMGdNQ3dnYVNBOUlITXhMa1JGUmtGVlRGUmZUMUpFUlZJcGV3b2dJQ0FnSUNBZ0lIUm9hWE11YVhORmRXeGxjaUE5SUNFd0xDQjBhR2x6TGw5NElEMGdaU3dnZEdocGN5NWZlU0E5SUhRc0lIUm9hWE11WDNvZ1BTQnVMQ0IwYUdsekxsOXZjbVJsY2lBOUlHazdDaUFnSUNCOUNpQWdJQ0JuWlhRZ2VDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmVEc0tJQ0FnSUgwS0lDQWdJSE5sZENCNEtHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxsOTRJRDBnWlN3Z2RHaHBjeTVmYjI1RGFHRnVaMlZEWVd4c1ltRmpheWdwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBJSGtvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM2s3Q2lBZ0lDQjlDaUFnSUNCelpYUWdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmZVNBOUlHVXNJSFJvYVhNdVgyOXVRMmhoYm1kbFEyRnNiR0poWTJzb0tUc0tJQ0FnSUgwS0lDQWdJR2RsZENCNktDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5Nk93b2dJQ0FnZlFvZ0lDQWdjMlYwSUhvb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdVgzb2dQU0JsTENCMGFHbHpMbDl2YmtOb1lXNW5aVU5oYkd4aVlXTnJLQ2s3Q2lBZ0lDQjlDaUFnSUNCblpYUWdiM0prWlhJb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDI5eVpHVnlPd29nSUNBZ2ZRb2dJQ0FnYzJWMElHOXlaR1Z5S0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TGw5dmNtUmxjaUE5SUdVc0lIUm9hWE11WDI5dVEyaGhibWRsUTJGc2JHSmhZMnNvS1RzS0lDQWdJSDBLSUNBZ0lITmxkQ2hsTENCMExDQnVMQ0JwSUQwZ2RHaHBjeTVmYjNKa1pYSXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmVDQTlJR1VzSUhSb2FYTXVYM2tnUFNCMExDQjBhR2x6TGw5NklEMGdiaXdnZEdocGN5NWZiM0prWlhJZ1BTQnBMQ0IwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcktDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9kR2hwY3k1ZmVDd2dkR2hwY3k1ZmVTd2dkR2hwY3k1ZmVpd2dkR2hwY3k1ZmIzSmtaWElwT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM2dnUFNCbExsOTRMQ0IwYUdsekxsOTVJRDBnWlM1ZmVTd2dkR2hwY3k1ZmVpQTlJR1V1WDNvc0lIUm9hWE11WDI5eVpHVnlJRDBnWlM1ZmIzSmtaWElzSUhSb2FYTXVYMjl1UTJoaGJtZGxRMkZzYkdKaFkyc29LU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMVNiM1JoZEdsdmJrMWhkSEpwZUNobExDQjBJRDBnZEdocGN5NWZiM0prWlhJc0lHNGdQU0FoTUNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ1pTNWxiR1Z0Wlc1MGN5d2djaUE5SUdsYk1GMHNJR0VnUFNCcFd6UmRMQ0J2SUQwZ2FWczRYU3dnWXlBOUlHbGJNVjBzSUd3Z1BTQnBXelZkTENCb0lEMGdhVnM1WFN3Z2RTQTlJR2xiTWwwc0lHUWdQU0JwV3paZExDQm1JRDBnYVZzeE1GMDdDaUFnSUNBZ0lDQWdjM2RwZEdOb0tIUXBld29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pZV1ZvaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZVNBOUlFMWhkR2d1WVhOcGJpaGpkQ2h2TENBdE1Td2dNU2twTENCTllYUm9MbUZpY3lodktTQThJQzQ1T1RrNU9UazVJRDhnS0hSb2FYTXVYM2dnUFNCTllYUm9MbUYwWVc0eUtDMW9MQ0JtS1N3Z2RHaHBjeTVmZWlBOUlFMWhkR2d1WVhSaGJqSW9MV0VzSUhJcEtTQTZJQ2gwYUdsekxsOTRJRDBnVFdGMGFDNWhkR0Z1TWloa0xDQnNLU3dnZEdocGN5NWZlaUE5SURBcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWxsWVdpSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5NElEMGdUV0YwYUM1aGMybHVLQzFqZENob0xDQXRNU3dnTVNrcExDQk5ZWFJvTG1GaWN5aG9LU0E4SUM0NU9UazVPVGs1SUQ4Z0tIUm9hWE11WDNrZ1BTQk5ZWFJvTG1GMFlXNHlLRzhzSUdZcExDQjBhR2x6TGw5NklEMGdUV0YwYUM1aGRHRnVNaWhqTENCc0tTa2dPaUFvZEdocGN5NWZlU0E5SUUxaGRHZ3VZWFJoYmpJb0xYVXNJSElwTENCMGFHbHpMbDk2SUQwZ01DazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVdsaFpJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzZ2dQU0JOWVhSb0xtRnphVzRvWTNRb1pDd2dMVEVzSURFcEtTd2dUV0YwYUM1aFluTW9aQ2tnUENBdU9UazVPVGs1T1NBL0lDaDBhR2x6TGw5NUlEMGdUV0YwYUM1aGRHRnVNaWd0ZFN3Z1ppa3NJSFJvYVhNdVgzb2dQU0JOWVhSb0xtRjBZVzR5S0MxaExDQnNLU2tnT2lBb2RHaHBjeTVmZVNBOUlEQXNJSFJvYVhNdVgzb2dQU0JOWVhSb0xtRjBZVzR5S0dNc0lISXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSmFXVmdpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZlU0E5SUUxaGRHZ3VZWE5wYmlndFkzUW9kU3dnTFRFc0lERXBLU3dnVFdGMGFDNWhZbk1vZFNrZ1BDQXVPVGs1T1RrNU9TQS9JQ2gwYUdsekxsOTRJRDBnVFdGMGFDNWhkR0Z1TWloa0xDQm1LU3dnZEdocGN5NWZlaUE5SUUxaGRHZ3VZWFJoYmpJb1l5d2djaWtwSURvZ0tIUm9hWE11WDNnZ1BTQXdMQ0IwYUdsekxsOTZJRDBnVFdGMGFDNWhkR0Z1TWlndFlTd2diQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbGxhV0NJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDk2SUQwZ1RXRjBhQzVoYzJsdUtHTjBLR01zSUMweExDQXhLU2tzSUUxaGRHZ3VZV0p6S0dNcElEd2dMams1T1RrNU9Ua2dQeUFvZEdocGN5NWZlQ0E5SUUxaGRHZ3VZWFJoYmpJb0xXZ3NJR3dwTENCMGFHbHpMbDk1SUQwZ1RXRjBhQzVoZEdGdU1pZ3RkU3dnY2lrcElEb2dLSFJvYVhNdVgzZ2dQU0F3TENCMGFHbHpMbDk1SUQwZ1RXRjBhQzVoZEdGdU1paHZMQ0JtS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpV0ZwWklqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNvZ1BTQk5ZWFJvTG1GemFXNG9MV04wS0dFc0lDMHhMQ0F4S1Nrc0lFMWhkR2d1WVdKektHRXBJRHdnTGprNU9UazVPVGtnUHlBb2RHaHBjeTVmZUNBOUlFMWhkR2d1WVhSaGJqSW9aQ3dnYkNrc0lIUm9hWE11WDNrZ1BTQk5ZWFJvTG1GMFlXNHlLRzhzSUhJcEtTQTZJQ2gwYUdsekxsOTRJRDBnVFdGMGFDNWhkR0Z1TWlndGFDd2daaWtzSUhSb2FYTXVYM2tnUFNBd0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUZkV3hsY2pvZ0xuTmxkRVp5YjIxU2IzUmhkR2x2YmsxaGRISnBlQ2dwSUdWdVkyOTFiblJsY21Wa0lHRnVJSFZ1YTI1dmQyNGdiM0prWlhJNklDSWdLeUIwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjl5WkdWeUlEMGdkQ3dnYmlBOVBUMGdJVEFnSmlZZ2RHaHBjeTVmYjI1RGFHRnVaMlZEWVd4c1ltRmpheWdwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVkYxWVhSbGNtNXBiMjRvWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJZYkM1dFlXdGxVbTkwWVhScGIyNUdjbTl0VVhWaGRHVnlibWx2YmlobEtTd2dkR2hwY3k1elpYUkdjbTl0VW05MFlYUnBiMjVOWVhSeWFYZ29XR3dzSUhRc0lHNHBPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVlpsWTNSdmNqTW9aU3dnZENBOUlIUm9hWE11WDI5eVpHVnlLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBLR1V1ZUN3Z1pTNTVMQ0JsTG5vc0lIUXBPd29nSUNBZ2ZRb2dJQ0FnY21WdmNtUmxjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhGc0xuTmxkRVp5YjIxRmRXeGxjaWgwYUdsektTd2dkR2hwY3k1elpYUkdjbTl0VVhWaGRHVnlibWx2YmloeGJDd2daU2s3Q2lBZ0lDQjlDaUFnSUNCbGNYVmhiSE1vWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExsOTRJRDA5UFNCMGFHbHpMbDk0SUNZbUlHVXVYM2tnUFQwOUlIUm9hWE11WDNrZ0ppWWdaUzVmZWlBOVBUMGdkR2hwY3k1ZmVpQW1KaUJsTGw5dmNtUmxjaUE5UFQwZ2RHaHBjeTVmYjNKa1pYSTdDaUFnSUNCOUNpQWdJQ0JtY205dFFYSnlZWGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDk0SUQwZ1pWc3dYU3dnZEdocGN5NWZlU0E5SUdWYk1WMHNJSFJvYVhNdVgzb2dQU0JsV3pKZExDQmxXek5kSUNFOVBTQjJiMmxrSURBZ0ppWWdLSFJvYVhNdVgyOXlaR1Z5SUQwZ1pWc3pYU2tzSUhSb2FYTXVYMjl1UTJoaGJtZGxRMkZzYkdKaFkyc29LU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2UVhKeVlYa29aU0E5SUZ0ZExDQjBJRDBnTUNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbFczUmRJRDBnZEdocGN5NWZlQ3dnWlZ0MElDc2dNVjBnUFNCMGFHbHpMbDk1TENCbFczUWdLeUF5WFNBOUlIUm9hWE11WDNvc0lHVmJkQ0FySUROZElEMGdkR2hwY3k1ZmIzSmtaWElzSUdVN0NpQWdJQ0I5Q2lBZ0lDQmZiMjVEYUdGdVoyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcklEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRjl2YmtOb1lXNW5aVU5oYkd4aVlXTnJLQ2tnZTMwS0lDQWdJQ3BiVTNsdFltOXNMbWwwWlhKaGRHOXlYU2dwSUhzS0lDQWdJQ0FnSUNCNWFXVnNaQ0IwYUdsekxsOTRMQ0I1YVdWc1pDQjBhR2x6TGw5NUxDQjVhV1ZzWkNCMGFHbHpMbDk2TENCNWFXVnNaQ0IwYUdsekxsOXZjbVJsY2pzS0lDQWdJSDBLZlRzS1dYSXVSRVZHUVZWTVZGOVBVa1JGVWlBOUlDSllXVm9pT3dwMllYSWdVbk1nUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwZXdvZ0lDQWdJQ0FnSUhSb2FYTXViV0Z6YXlBOUlERTdDaUFnSUNCOUNpQWdJQ0J6WlhRb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdWJXRnpheUE5SUNneElEdzhJR1VnZkNBd0tTQStQajRnTURzS0lDQWdJSDBLSUNBZ0lHVnVZV0pzWlNobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1dFlYTnJJSHc5SURFZ1BEd2daU0I4SURBN0NpQWdJQ0I5Q2lBZ0lDQmxibUZpYkdWQmJHd29LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXRZWE5ySUQwZ0xURTdDaUFnSUNCOUNpQWdJQ0IwYjJkbmJHVW9aU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXViV0Z6YXlCZVBTQXhJRHc4SUdVZ2ZDQXdPd29nSUNBZ2ZRb2dJQ0FnWkdsellXSnNaU2hsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhOcklDWTlJSDRvTVNBOFBDQmxJSHdnTUNrN0NpQWdJQ0I5Q2lBZ0lDQmthWE5oWW14bFFXeHNLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXViV0Z6YXlBOUlEQTdDaUFnSUNCOUNpQWdJQ0IwWlhOMEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSFJvYVhNdWJXRnpheUFtSUdVdWJXRnpheWtnSVQwOUlEQTdDaUFnSUNCOUNpQWdJQ0JwYzBWdVlXSnNaV1FvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlBb2RHaHBjeTV0WVhOcklDWWdLREVnUER3Z1pTQjhJREFwS1NBaFBUMGdNRHNLSUNBZ0lIMEtmU3dnWTNBZ1BTQXdMQ0JaYkNBOUlHNWxkeUJCTENCVGFTQTlJRzVsZHlCVmRDd2dhRzRnUFNCdVpYY2dlbVVzSUVweklEMGdibVYzSUVFc0lHaHpJRDBnYm1WM0lFRXNJR3h3SUQwZ2JtVjNJRUVzSUdod0lEMGdibVYzSUZWMExDQmFiQ0E5SUc1bGR5QkJLREVzSURBc0lEQXBMQ0JLYkNBOUlHNWxkeUJCS0RBc0lERXNJREFwTENBa2JDQTlJRzVsZHlCQktEQXNJREFzSURFcExDQjFjQ0E5SUhzS0lDQWdJSFI1Y0dVNklDSmhaR1JsWkNJS2ZTd2daSEFnUFNCN0NpQWdJQ0IwZVhCbE9pQWljbVZ0YjNabFpDSUtmU3dnU21VZ1BTQmpiR0Z6Y3lCek1TQmxlSFJsYm1SeklITnVJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NXBjMDlpYW1WamRETkVJRDBnSVRBc0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwYUdsekxDQWlhV1FpTENCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmpjQ3NyQ2lBZ0lDQWdJQ0FnZlNrc0lIUm9hWE11ZFhWcFpDQTlJR3QwS0Nrc0lIUm9hWE11Ym1GdFpTQTlJQ0lpTENCMGFHbHpMblI1Y0dVZ1BTQWlUMkpxWldOME0wUWlMQ0IwYUdsekxuQmhjbVZ1ZENBOUlHNTFiR3dzSUhSb2FYTXVZMmhwYkdSeVpXNGdQU0JiWFN3Z2RHaHBjeTUxY0NBOUlITXhMa1JGUmtGVlRGUmZWVkF1WTJ4dmJtVW9LVHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJRzVsZHlCQkxDQjBJRDBnYm1WM0lGbHlMQ0J1SUQwZ2JtVjNJRlYwTENCcElEMGdibVYzSUVFb01Td2dNU3dnTVNrN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2NpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JpNXpaWFJHY205dFJYVnNaWElvZEN3Z0lURXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJoS0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwTG5ObGRFWnliMjFSZFdGMFpYSnVhVzl1S0c0c0lIWnZhV1FnTUN3Z0lURXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwTGw5dmJrTm9ZVzVuWlNoeUtTd2diaTVmYjI1RGFHRnVaMlVvWVNrc0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6S0hSb2FYTXNJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nSVRBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJuVnRaWEpoWW14bE9pQWhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmxDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSEp2ZEdGMGFXOXVPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSVRBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nZEFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCeGRXRjBaWEp1YVc5dU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diZ29nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0J6WTJGc1pUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lBaE1Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR2tLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYlc5a1pXeFdhV1YzVFdGMGNtbDRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dibVYzSUhwbENpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNXZjbTFoYkUxaGRISnBlRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzVsZHlCSVpRb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlNrc0lIUm9hWE11YldGMGNtbDRJRDBnYm1WM0lIcGxMQ0IwYUdsekxtMWhkSEpwZUZkdmNteGtJRDBnYm1WM0lIcGxMQ0IwYUdsekxtMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ1BTQnpNUzVFUlVaQlZVeFVYMDFCVkZKSldGOUJWVlJQWDFWUVJFRlVSU3dnZEdocGN5NXRZWFJ5YVhoWGIzSnNaRTVsWldSelZYQmtZWFJsSUQwZ0lURXNJSFJvYVhNdWJXRjBjbWw0VjI5eWJHUkJkWFJ2VlhCa1lYUmxJRDBnY3pFdVJFVkdRVlZNVkY5TlFWUlNTVmhmVjA5U1RFUmZRVlZVVDE5VlVFUkJWRVVzSUhSb2FYTXViR0Y1WlhKeklEMGdibVYzSUZKekxDQjBhR2x6TG5acGMybGliR1VnUFNBaE1Dd2dkR2hwY3k1allYTjBVMmhoWkc5M0lEMGdJVEVzSUhSb2FYTXVjbVZqWldsMlpWTm9ZV1J2ZHlBOUlDRXhMQ0IwYUdsekxtWnlkWE4wZFcxRGRXeHNaV1FnUFNBaE1Dd2dkR2hwY3k1eVpXNWtaWEpQY21SbGNpQTlJREFzSUhSb2FYTXVZVzVwYldGMGFXOXVjeUE5SUZ0ZExDQjBhR2x6TG5WelpYSkVZWFJoSUQwZ2UzMDdDaUFnSUNCOUNpQWdJQ0J2YmtKbFptOXlaVkpsYm1SbGNpZ3BJSHQ5Q2lBZ0lDQnZia0ZtZEdWeVVtVnVaR1Z5S0NrZ2UzMEtJQ0FnSUdGd2NHeDVUV0YwY21sNE5DaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXRZWFJ5YVhoQmRYUnZWWEJrWVhSbElDWW1JSFJvYVhNdWRYQmtZWFJsVFdGMGNtbDRLQ2tzSUhSb2FYTXViV0YwY21sNExuQnlaVzExYkhScGNHeDVLR1VwTENCMGFHbHpMbTFoZEhKcGVDNWtaV052YlhCdmMyVW9kR2hwY3k1d2IzTnBkR2x2Yml3Z2RHaHBjeTV4ZFdGMFpYSnVhVzl1TENCMGFHbHpMbk5qWVd4bEtUc0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVVYVmhkR1Z5Ym1sdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNYVmhkR1Z5Ym1sdmJpNXdjbVZ0ZFd4MGFYQnNlU2hsS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRGSnZkR0YwYVc5dVJuSnZiVUY0YVhOQmJtZHNaU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1eGRXRjBaWEp1YVc5dUxuTmxkRVp5YjIxQmVHbHpRVzVuYkdVb1pTd2dkQ2s3Q2lBZ0lDQjlDaUFnSUNCelpYUlNiM1JoZEdsdmJrWnliMjFGZFd4bGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXhkV0YwWlhKdWFXOXVMbk5sZEVaeWIyMUZkV3hsY2lobExDQWhNQ2s3Q2lBZ0lDQjlDaUFnSUNCelpYUlNiM1JoZEdsdmJrWnliMjFOWVhSeWFYZ29aU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjWFZoZEdWeWJtbHZiaTV6WlhSR2NtOXRVbTkwWVhScGIyNU5ZWFJ5YVhnb1pTazdDaUFnSUNCOUNpQWdJQ0J6WlhSU2IzUmhkR2x2YmtaeWIyMVJkV0YwWlhKdWFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbkYxWVhSbGNtNXBiMjR1WTI5d2VTaGxLVHNLSUNBZ0lIMEtJQ0FnSUhKdmRHRjBaVTl1UVhocGN5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZOcExuTmxkRVp5YjIxQmVHbHpRVzVuYkdVb1pTd2dkQ2tzSUhSb2FYTXVjWFZoZEdWeWJtbHZiaTV0ZFd4MGFYQnNlU2hUYVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeWIzUmhkR1ZQYmxkdmNteGtRWGhwY3lobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRk5wTG5ObGRFWnliMjFCZUdselFXNW5iR1VvWlN3Z2RDa3NJSFJvYVhNdWNYVmhkR1Z5Ym1sdmJpNXdjbVZ0ZFd4MGFYQnNlU2hUYVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeWIzUmhkR1ZZS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5YjNSaGRHVlBia0Y0YVhNb1dtd3NJR1VwT3dvZ0lDQWdmUW9nSUNBZ2NtOTBZWFJsV1NobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y205MFlYUmxUMjVCZUdsektFcHNMQ0JsS1RzS0lDQWdJSDBLSUNBZ0lISnZkR0YwWlZvb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KdmRHRjBaVTl1UVhocGN5Z2tiQ3dnWlNrN0NpQWdJQ0I5Q2lBZ0lDQjBjbUZ1YzJ4aGRHVlBia0Y0YVhNb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJaYkM1amIzQjVLR1VwTG1Gd2NHeDVVWFZoZEdWeWJtbHZiaWgwYUdsekxuRjFZWFJsY201cGIyNHBMQ0IwYUdsekxuQnZjMmwwYVc5dUxtRmtaQ2haYkM1dGRXeDBhWEJzZVZOallXeGhjaWgwS1Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGNtRnVjMnhoZEdWWUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MGNtRnVjMnhoZEdWUGJrRjRhWE1vV213c0lHVXBPd29nSUNBZ2ZRb2dJQ0FnZEhKaGJuTnNZWFJsV1NobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZEhKaGJuTnNZWFJsVDI1QmVHbHpLRXBzTENCbEtUc0tJQ0FnSUgwS0lDQWdJSFJ5WVc1emJHRjBaVm9vWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblJ5WVc1emJHRjBaVTl1UVhocGN5Z2tiQ3dnWlNrN0NpQWdJQ0I5Q2lBZ0lDQnNiMk5oYkZSdlYyOXliR1FvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblZ3WkdGMFpWZHZjbXhrVFdGMGNtbDRLQ0V3TENBaE1Ta3NJR1V1WVhCd2JIbE5ZWFJ5YVhnMEtIUm9hWE11YldGMGNtbDRWMjl5YkdRcE93b2dJQ0FnZlFvZ0lDQWdkMjl5YkdSVWIweHZZMkZzS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUxY0dSaGRHVlhiM0pzWkUxaGRISnBlQ2doTUN3Z0lURXBMQ0JsTG1Gd2NHeDVUV0YwY21sNE5DaG9iaTVqYjNCNUtIUm9hWE11YldGMGNtbDRWMjl5YkdRcExtbHVkbVZ5ZENncEtUc0tJQ0FnSUgwS0lDQWdJR3h2YjJ0QmRDaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdaUzVwYzFabFkzUnZjak1nUHlCS2N5NWpiM0I1S0dVcElEb2dTbk11YzJWMEtHVXNJSFFzSUc0cE93b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ2RHaHBjeTV3WVhKbGJuUTdDaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZYYjNKc1pFMWhkSEpwZUNnaE1Dd2dJVEVwTENCb2N5NXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvZEdocGN5NXRZWFJ5YVhoWGIzSnNaQ2tzSUhSb2FYTXVhWE5EWVcxbGNtRWdmSHdnZEdocGN5NXBjMHhwWjJoMElEOGdhRzR1Ykc5dmEwRjBLR2h6TENCS2N5d2dkR2hwY3k1MWNDa2dPaUJvYmk1c2IyOXJRWFFvU25Nc0lHaHpMQ0IwYUdsekxuVndLU3dnZEdocGN5NXhkV0YwWlhKdWFXOXVMbk5sZEVaeWIyMVNiM1JoZEdsdmJrMWhkSEpwZUNob2Jpa3NJR2tnSmlZZ0tHaHVMbVY0ZEhKaFkzUlNiM1JoZEdsdmJpaHBMbTFoZEhKcGVGZHZjbXhrS1N3Z1Uya3VjMlYwUm5KdmJWSnZkR0YwYVc5dVRXRjBjbWw0S0dodUtTd2dkR2hwY3k1eGRXRjBaWEp1YVc5dUxuQnlaVzExYkhScGNHeDVLRk5wTG1sdWRtVnlkQ2dwS1NrN0NpQWdJQ0I5Q2lBZ0lDQmhaR1FvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd095QjBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnZENzcktYUm9hWE11WVdSa0tHRnlaM1Z0Wlc1MGMxdDBYU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaU0E5UFQwZ2RHaHBjeUEvSUNoamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVBZbXBsWTNRelJDNWhaR1E2SUc5aWFtVmpkQ0JqWVc0bmRDQmlaU0JoWkdSbFpDQmhjeUJoSUdOb2FXeGtJRzltSUdsMGMyVnNaaTRpTENCbEtTd2dkR2hwY3lrZ09pQW9aU0FtSmlCbExtbHpUMkpxWldOME0wUWdQeUFvWlM1d1lYSmxiblFnSVQwOUlHNTFiR3dnSmlZZ1pTNXdZWEpsYm5RdWNtVnRiM1psS0dVcExDQmxMbkJoY21WdWRDQTlJSFJvYVhNc0lIUm9hWE11WTJocGJHUnlaVzR1Y0hWemFDaGxLU3dnWlM1a2FYTndZWFJqYUVWMlpXNTBLSFZ3S1NrZ09pQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVQWW1wbFkzUXpSQzVoWkdRNklHOWlhbVZqZENCdWIzUWdZVzRnYVc1emRHRnVZMlVnYjJZZ1ZFaFNSVVV1VDJKcVpXTjBNMFF1SWl3Z1pTa3NJSFJvYVhNcE93b2dJQ0FnZlFvZ0lDQWdjbVZ0YjNabEtHVXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNRHNnYmlBOElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHNHJLeWwwYUdsekxuSmxiVzkyWlNoaGNtZDFiV1Z1ZEhOYmJsMHBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1Ob2FXeGtjbVZ1TG1sdVpHVjRUMllvWlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRZ0lUMDlJQzB4SUNZbUlDaGxMbkJoY21WdWRDQTlJRzUxYkd3c0lIUm9hWE11WTJocGJHUnlaVzR1YzNCc2FXTmxLSFFzSURFcExDQmxMbVJwYzNCaGRHTm9SWFpsYm5Rb1pIQXBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSEpsYlc5MlpVWnliMjFRWVhKbGJuUW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxuQmhjbVZ1ZERzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlNBaFBUMGdiblZzYkNBbUppQmxMbkpsYlc5MlpTaDBhR2x6S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOc1pXRnlLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxiVzkyWlNndUxpNTBhR2x6TG1Ob2FXeGtjbVZ1S1RzS0lDQWdJSDBLSUNBZ0lHRjBkR0ZqYUNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZFhCa1lYUmxWMjl5YkdSTllYUnlhWGdvSVRBc0lDRXhLU3dnYUc0dVkyOXdlU2gwYUdsekxtMWhkSEpwZUZkdmNteGtLUzVwYm5abGNuUW9LU3dnWlM1d1lYSmxiblFnSVQwOUlHNTFiR3dnSmlZZ0tHVXVjR0Z5Wlc1MExuVndaR0YwWlZkdmNteGtUV0YwY21sNEtDRXdMQ0FoTVNrc0lHaHVMbTExYkhScGNHeDVLR1V1Y0dGeVpXNTBMbTFoZEhKcGVGZHZjbXhrS1Nrc0lHVXVZWEJ3YkhsTllYUnlhWGcwS0dodUtTd2dkR2hwY3k1aFpHUW9aU2tzSUdVdWRYQmtZWFJsVjI5eWJHUk5ZWFJ5YVhnb0lURXNJQ0V3S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRFOWlhbVZqZEVKNVNXUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRTlpYW1WamRFSjVVSEp2Y0dWeWRIa29JbWxrSWl3Z1pTazdDaUFnSUNCOUNpQWdJQ0JuWlhSUFltcGxZM1JDZVU1aGJXVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRTlpYW1WamRFSjVVSEp2Y0dWeWRIa29JbTVoYldVaUxDQmxLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFOWlhbVZqZEVKNVVISnZjR1Z5ZEhrb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6VzJWZElEMDlQU0IwS1NCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3TENCcElEMGdkR2hwY3k1amFHbHNaSEpsYmk1c1pXNW5kR2c3SUc0Z1BDQnBPeUJ1S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJSFJvYVhNdVkyaHBiR1J5Wlc1YmJsMHVaMlYwVDJKcVpXTjBRbmxRY205d1pYSjBlU2hsTENCMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRWdJVDA5SUhadmFXUWdNQ2tnY21WMGRYSnVJR0U3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1oyVjBUMkpxWldOMGMwSjVVSEp2Y0dWeWRIa29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1cxMDdDaUFnSUNBZ0lDQWdkR2hwYzF0bFhTQTlQVDBnZENBbUppQnVMbkIxYzJnb2RHaHBjeWs3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Dd2djaUE5SUhSb2FYTXVZMmhwYkdSeVpXNHViR1Z1WjNSb095QnBJRHdnY2pzZ2FTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCMGFHbHpMbU5vYVd4a2NtVnVXMmxkTG1kbGRFOWlhbVZqZEhOQ2VWQnliM0JsY25SNUtHVXNJSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmhMbXhsYm1kMGFDQStJREFnSmlZZ0tHNGdQU0J1TG1OdmJtTmhkQ2hoS1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdU93b2dJQ0FnZlFvZ0lDQWdaMlYwVjI5eWJHUlFiM05wZEdsdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRYQmtZWFJsVjI5eWJHUk5ZWFJ5YVhnb0lUQXNJQ0V4S1N3Z1pTNXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvZEdocGN5NXRZWFJ5YVhoWGIzSnNaQ2s3Q2lBZ0lDQjlDaUFnSUNCblpYUlhiM0pzWkZGMVlYUmxjbTVwYjI0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5Wd1pHRjBaVmR2Y214a1RXRjBjbWw0S0NFd0xDQWhNU2tzSUhSb2FYTXViV0YwY21sNFYyOXliR1F1WkdWamIyMXdiM05sS0doekxDQmxMQ0JzY0Nrc0lHVTdDaUFnSUNCOUNpQWdJQ0JuWlhSWGIzSnNaRk5qWVd4bEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MWNHUmhkR1ZYYjNKc1pFMWhkSEpwZUNnaE1Dd2dJVEVwTENCMGFHbHpMbTFoZEhKcGVGZHZjbXhrTG1SbFkyOXRjRzl6WlNob2N5d2dhSEFzSUdVcExDQmxPd29nSUNBZ2ZRb2dJQ0FnWjJWMFYyOXliR1JFYVhKbFkzUnBiMjRvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxWMjl5YkdSTllYUnlhWGdvSVRBc0lDRXhLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXVaV3hsYldWdWRITTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVjMlYwS0hSYk9GMHNJSFJiT1Ywc0lIUmJNVEJkS1M1dWIzSnRZV3hwZW1Vb0tUc0tJQ0FnSUgwS0lDQWdJSEpoZVdOaGMzUW9LU0I3ZlFvZ0lDQWdkSEpoZG1WeWMyVW9aU2tnZXdvZ0lDQWdJQ0FnSUdVb2RHaHBjeWs3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxtTm9hV3hrY21WdU93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJREFzSUdrZ1BTQjBMbXhsYm1kMGFEc2diaUE4SUdrN0lHNHJLeWwwVzI1ZExuUnlZWFpsY25ObEtHVXBPd29nSUNBZ2ZRb2dJQ0FnZEhKaGRtVnljMlZXYVhOcFlteGxLR1VwSUhzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1MmFYTnBZbXhsSUQwOVBTQWhNU2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJR1VvZEdocGN5azdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1Ob2FXeGtjbVZ1T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQXNJR2tnUFNCMExteGxibWQwYURzZ2JpQThJR2s3SUc0ckt5bDBXMjVkTG5SeVlYWmxjbk5sVm1semFXSnNaU2hsS1RzS0lDQWdJSDBLSUNBZ0lIUnlZWFpsY25ObFFXNWpaWE4wYjNKektHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdWNHRnlaVzUwT3dvZ0lDQWdJQ0FnSUhRZ0lUMDlJRzUxYkd3Z0ppWWdLR1VvZENrc0lIUXVkSEpoZG1WeWMyVkJibU5sYzNSdmNuTW9aU2twT3dvZ0lDQWdmUW9nSUNBZ2RYQmtZWFJsVFdGMGNtbDRLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXViV0YwY21sNExtTnZiWEJ2YzJVb2RHaHBjeTV3YjNOcGRHbHZiaXdnZEdocGN5NXhkV0YwWlhKdWFXOXVMQ0IwYUdsekxuTmpZV3hsS1N3Z2RHaHBjeTV0WVhSeWFYaFhiM0pzWkU1bFpXUnpWWEJrWVhSbElEMGdJVEE3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1dFlYUnlhWGhCZFhSdlZYQmtZWFJsSUNZbUlIUm9hWE11ZFhCa1lYUmxUV0YwY21sNEtDa3NJQ2gwYUdsekxtMWhkSEpwZUZkdmNteGtUbVZsWkhOVmNHUmhkR1VnZkh3Z1pTa2dKaVlnS0hSb2FYTXVjR0Z5Wlc1MElEMDlQU0J1ZFd4c0lEOGdkR2hwY3k1dFlYUnlhWGhYYjNKc1pDNWpiM0I1S0hSb2FYTXViV0YwY21sNEtTQTZJSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXViWFZzZEdsd2JIbE5ZWFJ5YVdObGN5aDBhR2x6TG5CaGNtVnVkQzV0WVhSeWFYaFhiM0pzWkN3Z2RHaHBjeTV0WVhSeWFYZ3BMQ0IwYUdsekxtMWhkSEpwZUZkdmNteGtUbVZsWkhOVmNHUmhkR1VnUFNBaE1Td2daU0E5SUNFd0tUc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WTJocGJHUnlaVzQ3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Dd2dhU0E5SUhRdWJHVnVaM1JvT3lCdUlEd2dhVHNnYmlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISWdQU0IwVzI1ZE93b2dJQ0FnSUNBZ0lDQWdJQ0FvY2k1dFlYUnlhWGhYYjNKc1pFRjFkRzlWY0dSaGRHVWdQVDA5SUNFd0lIeDhJR1VnUFQwOUlDRXdLU0FtSmlCeUxuVndaR0YwWlUxaGRISnBlRmR2Y214a0tHVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaVmR2Y214a1RXRjBjbWw0S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdWNHRnlaVzUwT3dvZ0lDQWdJQ0FnSUdsbUlDaGxJRDA5UFNBaE1DQW1KaUJ1SUNFOVBTQnVkV3hzSUNZbUlHNHViV0YwY21sNFYyOXliR1JCZFhSdlZYQmtZWFJsSUQwOVBTQWhNQ0FtSmlCdUxuVndaR0YwWlZkdmNteGtUV0YwY21sNEtDRXdMQ0FoTVNrc0lIUm9hWE11YldGMGNtbDRRWFYwYjFWd1pHRjBaU0FtSmlCMGFHbHpMblZ3WkdGMFpVMWhkSEpwZUNncExDQjBhR2x6TG5CaGNtVnVkQ0E5UFQwZ2JuVnNiQ0EvSUhSb2FYTXViV0YwY21sNFYyOXliR1F1WTI5d2VTaDBhR2x6TG0xaGRISnBlQ2tnT2lCMGFHbHpMbTFoZEhKcGVGZHZjbXhrTG0xMWJIUnBjR3g1VFdGMGNtbGpaWE1vZEdocGN5NXdZWEpsYm5RdWJXRjBjbWw0VjI5eWJHUXNJSFJvYVhNdWJXRjBjbWw0S1N3Z2RDQTlQVDBnSVRBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0IwYUdsekxtTm9hV3hrY21WdU93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSElnUFNBd0xDQmhJRDBnYVM1c1pXNW5kR2c3SUhJZ1BDQmhPeUJ5S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCcFczSmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieTV0WVhSeWFYaFhiM0pzWkVGMWRHOVZjR1JoZEdVZ1BUMDlJQ0V3SUNZbUlHOHVkWEJrWVhSbFYyOXliR1JOWVhSeWFYZ29JVEVzSUNFd0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxJRDA5UFNCMmIybGtJREFnZkh3Z2RIbHdaVzltSUdVZ1BUMGdJbk4wY21sdVp5SXNJRzRnUFNCN2ZUc0tJQ0FnSUNBZ0lDQjBJQ1ltSUNobElEMGdld29nSUNBZ0lDQWdJQ0FnSUNCblpXOXRaWFJ5YVdWek9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBaWEpwWVd4ek9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkSFZ5WlhNNklIdDlMQW9nSUNBZ0lDQWdJQ0FnSUNCcGJXRm5aWE02SUh0OUxBb2dJQ0FnSUNBZ0lDQWdJQ0J6YUdGd1pYTTZJSHQ5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnphMlZzWlhSdmJuTTZJSHQ5TEFvZ0lDQWdJQ0FnSUNBZ0lDQmhibWx0WVhScGIyNXpPaUI3ZlN3S0lDQWdJQ0FnSUNBZ0lDQWdibTlrWlhNNklIdDlDaUFnSUNBZ0lDQWdmU3dnYmk1dFpYUmhaR0YwWVNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWMybHZiam9nTkM0MkxBb2dJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWlUMkpxWldOMElpd0tJQ0FnSUNBZ0lDQWdJQ0FnWjJWdVpYSmhkRzl5T2lBaVQySnFaV04wTTBRdWRHOUtVMDlPSWdvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ2UzMDdDaUFnSUNBZ0lDQWdhUzUxZFdsa0lEMGdkR2hwY3k1MWRXbGtMQ0JwTG5SNWNHVWdQU0IwYUdsekxuUjVjR1VzSUhSb2FYTXVibUZ0WlNBaFBUMGdJaUlnSmlZZ0tHa3VibUZ0WlNBOUlIUm9hWE11Ym1GdFpTa3NJSFJvYVhNdVkyRnpkRk5vWVdSdmR5QTlQVDBnSVRBZ0ppWWdLR2t1WTJGemRGTm9ZV1J2ZHlBOUlDRXdLU3dnZEdocGN5NXlaV05sYVhabFUyaGhaRzkzSUQwOVBTQWhNQ0FtSmlBb2FTNXlaV05sYVhabFUyaGhaRzkzSUQwZ0lUQXBMQ0IwYUdsekxuWnBjMmxpYkdVZ1BUMDlJQ0V4SUNZbUlDaHBMblpwYzJsaWJHVWdQU0FoTVNrc0lIUm9hWE11Wm5KMWMzUjFiVU4xYkd4bFpDQTlQVDBnSVRFZ0ppWWdLR2t1Wm5KMWMzUjFiVU4xYkd4bFpDQTlJQ0V4S1N3Z2RHaHBjeTV5Wlc1a1pYSlBjbVJsY2lBaFBUMGdNQ0FtSmlBb2FTNXlaVzVrWlhKUGNtUmxjaUE5SUhSb2FYTXVjbVZ1WkdWeVQzSmtaWElwTENCUFltcGxZM1F1YTJWNWN5aDBhR2x6TG5WelpYSkVZWFJoS1M1c1pXNW5kR2dnUGlBd0lDWW1JQ2hwTG5WelpYSkVZWFJoSUQwZ2RHaHBjeTUxYzJWeVJHRjBZU2tzSUdrdWJHRjVaWEp6SUQwZ2RHaHBjeTVzWVhsbGNuTXViV0Z6YXl3Z2FTNXRZWFJ5YVhnZ1BTQjBhR2x6TG0xaGRISnBlQzUwYjBGeWNtRjVLQ2tzSUdrdWRYQWdQU0IwYUdsekxuVndMblJ2UVhKeVlYa29LU3dnZEdocGN5NXRZWFJ5YVhoQmRYUnZWWEJrWVhSbElEMDlQU0FoTVNBbUppQW9hUzV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnSVRFcExDQjBhR2x6TG1selNXNXpkR0Z1WTJWa1RXVnphQ0FtSmlBb2FTNTBlWEJsSUQwZ0lrbHVjM1JoYm1ObFpFMWxjMmdpTENCcExtTnZkVzUwSUQwZ2RHaHBjeTVqYjNWdWRDd2dhUzVwYm5OMFlXNWpaVTFoZEhKcGVDQTlJSFJvYVhNdWFXNXpkR0Z1WTJWTllYUnlhWGd1ZEc5S1UwOU9LQ2tzSUhSb2FYTXVhVzV6ZEdGdVkyVkRiMnh2Y2lBaFBUMGdiblZzYkNBbUppQW9hUzVwYm5OMFlXNWpaVU52Ykc5eUlEMGdkR2hwY3k1cGJuTjBZVzVqWlVOdmJHOXlMblJ2U2xOUFRpZ3BLU2s3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnY2lodkxDQmpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdlcyTXVkWFZwWkYwZ1BUMDlJSFp2YVdRZ01DQW1KaUFvYjF0akxuVjFhV1JkSUQwZ1l5NTBiMHBUVDA0b1pTa3BMQ0JqTG5WMWFXUTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWx6VTJObGJtVXBJSFJvYVhNdVltRmphMmR5YjNWdVpDQW1KaUFvZEdocGN5NWlZV05yWjNKdmRXNWtMbWx6UTI5c2IzSWdQeUJwTG1KaFkydG5jbTkxYm1RZ1BTQjBhR2x6TG1KaFkydG5jbTkxYm1RdWRHOUtVMDlPS0NrZ09pQjBhR2x6TG1KaFkydG5jbTkxYm1RdWFYTlVaWGgwZFhKbElDWW1JQ2hwTG1KaFkydG5jbTkxYm1RZ1BTQjBhR2x6TG1KaFkydG5jbTkxYm1RdWRHOUtVMDlPS0dVcExuVjFhV1FwS1N3Z2RHaHBjeTVsYm5acGNtOXViV1Z1ZENBbUppQjBhR2x6TG1WdWRtbHliMjV0Wlc1MExtbHpWR1Y0ZEhWeVpTQW1KaUIwYUdsekxtVnVkbWx5YjI1dFpXNTBMbWx6VW1WdVpHVnlWR0Z5WjJWMFZHVjRkSFZ5WlNBaFBUMGdJVEFnSmlZZ0tHa3VaVzUyYVhKdmJtMWxiblFnUFNCMGFHbHpMbVZ1ZG1seWIyNXRaVzUwTG5SdlNsTlBUaWhsS1M1MWRXbGtLVHNLSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2gwYUdsekxtbHpUV1Z6YUNCOGZDQjBhR2x6TG1selRHbHVaU0I4ZkNCMGFHbHpMbWx6VUc5cGJuUnpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHa3VaMlZ2YldWMGNua2dQU0J5S0dVdVoyVnZiV1YwY21sbGN5d2dkR2hwY3k1blpXOXRaWFJ5ZVNrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdklEMGdkR2hwY3k1blpXOXRaWFJ5ZVM1d1lYSmhiV1YwWlhKek93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2J5QWhQVDBnZG05cFpDQXdJQ1ltSUc4dWMyaGhjR1Z6SUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ2J5NXphR0Z3WlhNN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoaktTa2dabTl5S0d4bGRDQnNJRDBnTUN3Z2FDQTlJR011YkdWdVozUm9PeUJzSUR3Z2FEc2diQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZFNBOUlHTmJiRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NpaGxMbk5vWVhCbGN5d2dkU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElISW9aUzV6YUdGd1pYTXNJR01wT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWx6VTJ0cGJtNWxaRTFsYzJnZ0ppWWdLR2t1WW1sdVpFMXZaR1VnUFNCMGFHbHpMbUpwYm1STmIyUmxMQ0JwTG1KcGJtUk5ZWFJ5YVhnZ1BTQjBhR2x6TG1KcGJtUk5ZWFJ5YVhndWRHOUJjbkpoZVNncExDQjBhR2x6TG5OclpXeGxkRzl1SUNFOVBTQjJiMmxrSURBZ0ppWWdLSElvWlM1emEyVnNaWFJ2Ym5Nc0lIUm9hWE11YzJ0bGJHVjBiMjRwTENCcExuTnJaV3hsZEc5dUlEMGdkR2hwY3k1emEyVnNaWFJ2Ymk1MWRXbGtLU2tzSUhSb2FYTXViV0YwWlhKcFlXd2dJVDA5SUhadmFXUWdNQ2tnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZEdocGN5NXRZWFJsY21saGJDa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JqSUQwZ01Dd2diQ0E5SUhSb2FYTXViV0YwWlhKcFlXd3ViR1Z1WjNSb095QmpJRHdnYkRzZ1l5c3JLVzh1Y0hWemFDaHlLR1V1YldGMFpYSnBZV3h6TENCMGFHbHpMbTFoZEdWeWFXRnNXMk5kS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJR2t1YldGMFpYSnBZV3dnUFNCdk93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCcExtMWhkR1Z5YVdGc0lEMGdjaWhsTG0xaGRHVnlhV0ZzY3l3Z2RHaHBjeTV0WVhSbGNtbGhiQ2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTJocGJHUnlaVzR1YkdWdVozUm9JRDRnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwTG1Ob2FXeGtjbVZ1SUQwZ1cxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYnlBOUlEQTdJRzhnUENCMGFHbHpMbU5vYVd4a2NtVnVMbXhsYm1kMGFEc2dieXNyS1drdVkyaHBiR1J5Wlc0dWNIVnphQ2gwYUdsekxtTm9hV3hrY21WdVcyOWRMblJ2U2xOUFRpaGxLUzV2WW1wbFkzUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVoYm1sdFlYUnBiMjV6TG14bGJtZDBhQ0ErSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVM1aGJtbHRZWFJwYjI1eklEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2J5QTlJREE3SUc4Z1BDQjBhR2x6TG1GdWFXMWhkR2x2Ym5NdWJHVnVaM1JvT3lCdkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdNZ1BTQjBhR2x6TG1GdWFXMWhkR2x2Ym5OYmIxMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBMbUZ1YVcxaGRHbHZibk11Y0hWemFDaHlLR1V1WVc1cGJXRjBhVzl1Y3l3Z1l5a3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2gwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdklEMGdZU2hsTG1kbGIyMWxkSEpwWlhNcExDQmpJRDBnWVNobExtMWhkR1Z5YVdGc2N5a3NJR3dnUFNCaEtHVXVkR1Y0ZEhWeVpYTXBMQ0JvSUQwZ1lTaGxMbWx0WVdkbGN5a3NJSFVnUFNCaEtHVXVjMmhoY0dWektTd2daQ0E5SUdFb1pTNXphMlZzWlhSdmJuTXBMQ0JtSUQwZ1lTaGxMbUZ1YVcxaGRHbHZibk1wTENCdElEMGdZU2hsTG01dlpHVnpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2J5NXNaVzVuZEdnZ1BpQXdJQ1ltSUNodUxtZGxiMjFsZEhKcFpYTWdQU0J2S1N3Z1l5NXNaVzVuZEdnZ1BpQXdJQ1ltSUNodUxtMWhkR1Z5YVdGc2N5QTlJR01wTENCc0xteGxibWQwYUNBK0lEQWdKaVlnS0c0dWRHVjRkSFZ5WlhNZ1BTQnNLU3dnYUM1c1pXNW5kR2dnUGlBd0lDWW1JQ2h1TG1sdFlXZGxjeUE5SUdncExDQjFMbXhsYm1kMGFDQStJREFnSmlZZ0tHNHVjMmhoY0dWeklEMGdkU2tzSUdRdWJHVnVaM1JvSUQ0Z01DQW1KaUFvYmk1emEyVnNaWFJ2Ym5NZ1BTQmtLU3dnWmk1c1pXNW5kR2dnUGlBd0lDWW1JQ2h1TG1GdWFXMWhkR2x2Ym5NZ1BTQm1LU3dnYlM1c1pXNW5kR2dnUGlBd0lDWW1JQ2h1TG01dlpHVnpJRDBnYlNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdUxtOWlhbVZqZENBOUlHa3NJRzQ3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWVNodktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiQ0JwYmlCdktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvSUQwZ2IxdHNYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQm9MbTFsZEdGa1lYUmhMQ0JqTG5CMWMyZ29hQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR003Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1kyeHZibVVvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpZ3BMbU52Y0hrb2RHaHBjeXdnWlNrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVc0lIUWdQU0FoTUNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtNWhiV1VnUFNCbExtNWhiV1VzSUhSb2FYTXVkWEF1WTI5d2VTaGxMblZ3S1N3Z2RHaHBjeTV3YjNOcGRHbHZiaTVqYjNCNUtHVXVjRzl6YVhScGIyNHBMQ0IwYUdsekxuSnZkR0YwYVc5dUxtOXlaR1Z5SUQwZ1pTNXliM1JoZEdsdmJpNXZjbVJsY2l3Z2RHaHBjeTV4ZFdGMFpYSnVhVzl1TG1OdmNIa29aUzV4ZFdGMFpYSnVhVzl1S1N3Z2RHaHBjeTV6WTJGc1pTNWpiM0I1S0dVdWMyTmhiR1VwTENCMGFHbHpMbTFoZEhKcGVDNWpiM0I1S0dVdWJXRjBjbWw0S1N3Z2RHaHBjeTV0WVhSeWFYaFhiM0pzWkM1amIzQjVLR1V1YldGMGNtbDRWMjl5YkdRcExDQjBhR2x6TG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNCbExtMWhkSEpwZUVGMWRHOVZjR1JoZEdVc0lIUm9hWE11YldGMGNtbDRWMjl5YkdST1pXVmtjMVZ3WkdGMFpTQTlJR1V1YldGMGNtbDRWMjl5YkdST1pXVmtjMVZ3WkdGMFpTd2dkR2hwY3k1dFlYUnlhWGhYYjNKc1pFRjFkRzlWY0dSaGRHVWdQU0JsTG0xaGRISnBlRmR2Y214a1FYVjBiMVZ3WkdGMFpTd2dkR2hwY3k1c1lYbGxjbk11YldGemF5QTlJR1V1YkdGNVpYSnpMbTFoYzJzc0lIUm9hWE11ZG1semFXSnNaU0E5SUdVdWRtbHphV0pzWlN3Z2RHaHBjeTVqWVhOMFUyaGhaRzkzSUQwZ1pTNWpZWE4wVTJoaFpHOTNMQ0IwYUdsekxuSmxZMlZwZG1WVGFHRmtiM2NnUFNCbExuSmxZMlZwZG1WVGFHRmtiM2NzSUhSb2FYTXVabkoxYzNSMWJVTjFiR3hsWkNBOUlHVXVabkoxYzNSMWJVTjFiR3hsWkN3Z2RHaHBjeTV5Wlc1a1pYSlBjbVJsY2lBOUlHVXVjbVZ1WkdWeVQzSmtaWElzSUhSb2FYTXVZVzVwYldGMGFXOXVjeUE5SUdVdVlXNXBiV0YwYVc5dWN5NXpiR2xqWlNncExDQjBhR2x6TG5WelpYSkVZWFJoSUQwZ1NsTlBUaTV3WVhKelpTaEtVMDlPTG5OMGNtbHVaMmxtZVNobExuVnpaWEpFWVhSaEtTa3NJSFFnUFQwOUlDRXdLU0JtYjNJb2JHVjBJRzRnUFNBd095QnVJRHdnWlM1amFHbHNaSEpsYmk1c1pXNW5kR2c3SUc0ckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnWlM1amFHbHNaSEpsYmx0dVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhaR1FvYVM1amJHOXVaU2dwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNuMDdDa3BsTGtSRlJrRlZURlJmVlZBZ1BTQnVaWGNnUVNnd0xDQXhMQ0F3S1RzS1NtVXVSRVZHUVZWTVZGOU5RVlJTU1ZoZlFWVlVUMTlWVUVSQlZFVWdQU0FoTURzS1NtVXVSRVZHUVZWTVZGOU5RVlJTU1ZoZlYwOVNURVJmUVZWVVQxOVZVRVJCVkVVZ1BTQWhNRHNLZG1GeUlFdDBJRDBnYm1WM0lFRXNJSFZ1SUQwZ2JtVjNJRUVzSUVoaElEMGdibVYzSUVFc0lHUnVJRDBnYm1WM0lFRXNJR0pwSUQwZ2JtVjNJRUVzSUVWcElEMGdibVYzSUVFc0lFdHNJRDBnYm1WM0lFRXNJRWRoSUQwZ2JtVjNJRUVzSUZkaElEMGdibVYzSUVFc0lGaGhJRDBnYm1WM0lFRXNJQ1J6SUQwZ0lURXNJRlZ1SUQwZ1kyeGhjM01nY3pFZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRzVsZHlCQkxDQjBJRDBnYm1WM0lFRXNJRzRnUFNCdVpYY2dRU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NWhJRDBnWlN3Z2RHaHBjeTVpSUQwZ2RDd2dkR2hwY3k1aklEMGdianNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJuWlhST2IzSnRZV3dvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHa3VjM1ZpVm1WamRHOXljeWh1TENCMEtTd2dTM1F1YzNWaVZtVmpkRzl5Y3lobExDQjBLU3dnYVM1amNtOXpjeWhMZENrN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCcExteGxibWQwYUZOeEtDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlISWdQaUF3SUQ4Z2FTNXRkV3gwYVhCc2VWTmpZV3hoY2lneElDOGdUV0YwYUM1emNYSjBLSElwS1NBNklHa3VjMlYwS0RBc0lEQXNJREFwT3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUdkbGRFSmhjbmxqYjI5eVpDaGxMQ0IwTENCdUxDQnBMQ0J5S1NCN0NpQWdJQ0FnSUNBZ1MzUXVjM1ZpVm1WamRHOXljeWhwTENCMEtTd2dkVzR1YzNWaVZtVmpkRzl5Y3lodUxDQjBLU3dnU0dFdWMzVmlWbVZqZEc5eWN5aGxMQ0IwS1RzS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUV0MExtUnZkQ2hMZENrc0lHOGdQU0JMZEM1a2IzUW9kVzRwTENCaklEMGdTM1F1Wkc5MEtFaGhLU3dnYkNBOUlIVnVMbVJ2ZENoMWJpa3NJR2dnUFNCMWJpNWtiM1FvU0dFcExDQjFJRDBnWVNBcUlHd2dMU0J2SUNvZ2J6c0tJQ0FnSUNBZ0lDQnBaaUFvZFNBOVBUMGdNQ2tnY21WMGRYSnVJSEl1YzJWMEtDMHlMQ0F0TVN3Z0xURXBPd29nSUNBZ0lDQWdJR3hsZENCa0lEMGdNU0F2SUhVc0lHWWdQU0FvYkNBcUlHTWdMU0J2SUNvZ2FDa2dLaUJrTENCdElEMGdLR0VnS2lCb0lDMGdieUFxSUdNcElDb2daRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjaTV6WlhRb01TQXRJR1lnTFNCdExDQnRMQ0JtS1RzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCamIyNTBZV2x1YzFCdmFXNTBLR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJDWVhKNVkyOXZjbVFvWlN3Z2RDd2diaXdnYVN3Z1pHNHBMQ0JrYmk1NElENDlJREFnSmlZZ1pHNHVlU0ErUFNBd0lDWW1JR1J1TG5nZ0t5QmtiaTU1SUR3OUlERTdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdaMlYwVlZZb1pTd2dkQ3dnYml3Z2FTd2djaXdnWVN3Z2J5d2dZeWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUFrY3lBOVBUMGdJVEVnSmlZZ0tHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWSEpwWVc1bmJHVXVaMlYwVlZZb0tTQm9ZWE1nWW1WbGJpQnlaVzVoYldWa0lIUnZJRlJJVWtWRkxsUnlhV0Z1WjJ4bExtZGxkRWx1ZEdWeWNHOXNZWFJwYjI0b0tTNGlLU3dnSkhNZ1BTQWhNQ2tzSUhSb2FYTXVaMlYwU1c1MFpYSndiMnhoZEdsdmJpaGxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZMQ0JqS1RzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCblpYUkpiblJsY25CdmJHRjBhVzl1S0dVc0lIUXNJRzRzSUdrc0lISXNJR0VzSUc4c0lHTXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUkNZWEo1WTI5dmNtUW9aU3dnZEN3Z2Jpd2dhU3dnWkc0cExDQmpMbk5sZEZOallXeGhjaWd3S1N3Z1l5NWhaR1JUWTJGc1pXUldaV04wYjNJb2Npd2daRzR1ZUNrc0lHTXVZV1JrVTJOaGJHVmtWbVZqZEc5eUtHRXNJR1J1TG5rcExDQmpMbUZrWkZOallXeGxaRlpsWTNSdmNpaHZMQ0JrYmk1NktTd2dZenNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJwYzBaeWIyNTBSbUZqYVc1bktHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdTM1F1YzNWaVZtVmpkRzl5Y3lodUxDQjBLU3dnZFc0dWMzVmlWbVZqZEc5eWN5aGxMQ0IwS1N3Z1MzUXVZM0p2YzNNb2RXNHBMbVJ2ZENocEtTQThJREE3Q2lBZ0lDQjlDaUFnSUNCelpYUW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1FdVkyOXdlU2hsS1N3Z2RHaHBjeTVpTG1OdmNIa29kQ2tzSUhSb2FYTXVZeTVqYjNCNUtHNHBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJWQnZhVzUwYzBGdVpFbHVaR2xqWlhNb1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1FdVkyOXdlU2hsVzNSZEtTd2dkR2hwY3k1aUxtTnZjSGtvWlZ0dVhTa3NJSFJvYVhNdVl5NWpiM0I1S0dWYmFWMHBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJVRjBkSEpwWW5WMFpVRnVaRWx1WkdsalpYTW9aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2hsTENCMEtTd2dkR2hwY3k1aUxtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9aU3dnYmlrc0lIUm9hWE11WXk1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHVXNJR2twTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0NrdVkyOXdlU2gwYUdsektUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1FdVkyOXdlU2hsTG1FcExDQjBhR2x6TG1JdVkyOXdlU2hsTG1JcExDQjBhR2x6TG1NdVkyOXdlU2hsTG1NcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1oyVjBRWEpsWVNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1MzUXVjM1ZpVm1WamRHOXljeWgwYUdsekxtTXNJSFJvYVhNdVlpa3NJSFZ1TG5OMVlsWmxZM1J2Y25Nb2RHaHBjeTVoTENCMGFHbHpMbUlwTENCTGRDNWpjbTl6Y3loMWJpa3ViR1Z1WjNSb0tDa2dLaUF1TlRzS0lDQWdJSDBLSUNBZ0lHZGxkRTFwWkhCdmFXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1aFpHUldaV04wYjNKektIUm9hWE11WVN3Z2RHaHBjeTVpS1M1aFpHUW9kR2hwY3k1aktTNXRkV3gwYVhCc2VWTmpZV3hoY2lneElDOGdNeWs3Q2lBZ0lDQjlDaUFnSUNCblpYUk9iM0p0WVd3b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpNUzVuWlhST2IzSnRZV3dvZEdocGN5NWhMQ0IwYUdsekxtSXNJSFJvYVhNdVl5d2daU2s3Q2lBZ0lDQjlDaUFnSUNCblpYUlFiR0Z1WlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVjMlYwUm5KdmJVTnZjR3hoYm1GeVVHOXBiblJ6S0hSb2FYTXVZU3dnZEdocGN5NWlMQ0IwYUdsekxtTXBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFFtRnllV052YjNKa0tHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnY3pFdVoyVjBRbUZ5ZVdOdmIzSmtLR1VzSUhSb2FYTXVZU3dnZEdocGN5NWlMQ0IwYUdsekxtTXNJSFFwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBWVllvWlN3Z2RDd2diaXdnYVN3Z2Npa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQWtjeUE5UFQwZ0lURWdKaVlnS0dOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVZISnBZVzVuYkdVdVoyVjBWVllvS1NCb1lYTWdZbVZsYmlCeVpXNWhiV1ZrSUhSdklGUklVa1ZGTGxSeWFXRnVaMnhsTG1kbGRFbHVkR1Z5Y0c5c1lYUnBiMjRvS1M0aUtTd2dKSE1nUFNBaE1Da3NJSE14TG1kbGRFbHVkR1Z5Y0c5c1lYUnBiMjRvWlN3Z2RHaHBjeTVoTENCMGFHbHpMbUlzSUhSb2FYTXVZeXdnZEN3Z2Jpd2dhU3dnY2lrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJKYm5SbGNuQnZiR0YwYVc5dUtHVXNJSFFzSUc0c0lHa3NJSElwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnY3pFdVoyVjBTVzUwWlhKd2IyeGhkR2x2YmlobExDQjBhR2x6TG1Fc0lIUm9hWE11WWl3Z2RHaHBjeTVqTENCMExDQnVMQ0JwTENCeUtUc0tJQ0FnSUgwS0lDQWdJR052Ym5SaGFXNXpVRzlwYm5Rb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpNUzVqYjI1MFlXbHVjMUJ2YVc1MEtHVXNJSFJvYVhNdVlTd2dkR2hwY3k1aUxDQjBhR2x6TG1NcE93b2dJQ0FnZlFvZ0lDQWdhWE5HY205dWRFWmhZMmx1WnlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITXhMbWx6Um5KdmJuUkdZV05wYm1jb2RHaHBjeTVoTENCMGFHbHpMbUlzSUhSb2FYTXVZeXdnWlNrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpRbTk0S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXBiblJsY25ObFkzUnpWSEpwWVc1bmJHVW9kR2hwY3lrN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl6WlhOMFVHOXBiblJVYjFCdmFXNTBLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WVN3Z2FTQTlJSFJvYVhNdVlpd2djaUE5SUhSb2FYTXVZeXdnWVN3Z2J6c0tJQ0FnSUNBZ0lDQmlhUzV6ZFdKV1pXTjBiM0p6S0drc0lHNHBMQ0JGYVM1emRXSldaV04wYjNKektISXNJRzRwTENCSFlTNXpkV0pXWldOMGIzSnpLR1VzSUc0cE93b2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ1lta3VaRzkwS0VkaEtTd2diQ0E5SUVWcExtUnZkQ2hIWVNrN0NpQWdJQ0FnSUNBZ2FXWWdLR01nUEQwZ01DQW1KaUJzSUR3OUlEQXBJSEpsZEhWeWJpQjBMbU52Y0hrb2JpazdDaUFnSUNBZ0lDQWdWMkV1YzNWaVZtVmpkRzl5Y3lobExDQnBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJR0pwTG1SdmRDaFhZU2tzSUhVZ1BTQkZhUzVrYjNRb1YyRXBPd29nSUNBZ0lDQWdJR2xtSUNob0lENDlJREFnSmlZZ2RTQThQU0JvS1NCeVpYUjFjbTRnZEM1amIzQjVLR2twT3dvZ0lDQWdJQ0FnSUd4bGRDQmtJRDBnWXlBcUlIVWdMU0JvSUNvZ2JEc0tJQ0FnSUNBZ0lDQnBaaUFvWkNBOFBTQXdJQ1ltSUdNZ1BqMGdNQ0FtSmlCb0lEdzlJREFwSUhKbGRIVnliaUJoSUQwZ1l5QXZJQ2hqSUMwZ2FDa3NJSFF1WTI5d2VTaHVLUzVoWkdSVFkyRnNaV1JXWldOMGIzSW9ZbWtzSUdFcE93b2dJQ0FnSUNBZ0lGaGhMbk4xWWxabFkzUnZjbk1vWlN3Z2NpazdDaUFnSUNBZ0lDQWdiR1YwSUdZZ1BTQmlhUzVrYjNRb1dHRXBMQ0J0SUQwZ1JXa3VaRzkwS0ZoaEtUc0tJQ0FnSUNBZ0lDQnBaaUFvYlNBK1BTQXdJQ1ltSUdZZ1BEMGdiU2tnY21WMGRYSnVJSFF1WTI5d2VTaHlLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1h5QTlJR1lnS2lCc0lDMGdZeUFxSUcwN0NpQWdJQ0FnSUNBZ2FXWWdLRjhnUEQwZ01DQW1KaUJzSUQ0OUlEQWdKaVlnYlNBOFBTQXdLU0J5WlhSMWNtNGdieUE5SUd3Z0x5QW9iQ0F0SUcwcExDQjBMbU52Y0hrb2Jpa3VZV1JrVTJOaGJHVmtWbVZqZEc5eUtFVnBMQ0J2S1RzS0lDQWdJQ0FnSUNCc1pYUWdaeUE5SUdnZ0tpQnRJQzBnWmlBcUlIVTdDaUFnSUNBZ0lDQWdhV1lnS0djZ1BEMGdNQ0FtSmlCMUlDMGdhQ0ErUFNBd0lDWW1JR1lnTFNCdElENDlJREFwSUhKbGRIVnliaUJMYkM1emRXSldaV04wYjNKektISXNJR2twTENCdklEMGdLSFVnTFNCb0tTQXZJQ2gxSUMwZ2FDQXJJQ2htSUMwZ2JTa3BMQ0IwTG1OdmNIa29hU2t1WVdSa1UyTmhiR1ZrVm1WamRHOXlLRXRzTENCdktUc0tJQ0FnSUNBZ0lDQnNaWFFnY0NBOUlERWdMeUFvWnlBcklGOGdLeUJrS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVNBOUlGOGdLaUJ3TENCdklEMGdaQ0FxSUhBc0lIUXVZMjl3ZVNodUtTNWhaR1JUWTJGc1pXUldaV04wYjNJb1lta3NJR0VwTG1Ga1pGTmpZV3hsWkZabFkzUnZjaWhGYVN3Z2J5azdDaUFnSUNCOUNpQWdJQ0JsY1hWaGJITW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTG1FdVpYRjFZV3h6S0hSb2FYTXVZU2tnSmlZZ1pTNWlMbVZ4ZFdGc2N5aDBhR2x6TG1JcElDWW1JR1V1WXk1bGNYVmhiSE1vZEdocGN5NWpLVHNLSUNBZ0lIMEtmU3dnWm5BZ1BTQXdMQ0JpZENBOUlHTnNZWE56SUdWNGRHVnVaSE1nYzI0Z2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selRXRjBaWEpwWVd3Z1BTQWhNQ3dnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIUm9hWE1zSUNKcFpDSXNJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdad0t5c0tJQ0FnSUNBZ0lDQjlLU3dnZEdocGN5NTFkV2xrSUQwZ2EzUW9LU3dnZEdocGN5NXVZVzFsSUQwZ0lpSXNJSFJvYVhNdWRIbHdaU0E5SUNKTllYUmxjbWxoYkNJc0lIUm9hWE11WW14bGJtUnBibWNnUFNCWGFTd2dkR2hwY3k1emFXUmxJRDBnUW00c0lIUm9hWE11ZG1WeWRHVjRRMjlzYjNKeklEMGdJVEVzSUhSb2FYTXViM0JoWTJsMGVTQTlJREVzSUhSb2FYTXVkSEpoYm5Od1lYSmxiblFnUFNBaE1Td2dkR2hwY3k1aGJIQm9ZVWhoYzJnZ1BTQWhNU3dnZEdocGN5NWliR1Z1WkZOeVl5QTlJR3hrTENCMGFHbHpMbUpzWlc1a1JITjBJRDBnYUdRc0lIUm9hWE11WW14bGJtUkZjWFZoZEdsdmJpQTlJRUpwTENCMGFHbHpMbUpzWlc1a1UzSmpRV3h3YUdFZ1BTQnVkV3hzTENCMGFHbHpMbUpzWlc1a1JITjBRV3h3YUdFZ1BTQnVkV3hzTENCMGFHbHpMbUpzWlc1a1JYRjFZWFJwYjI1QmJIQm9ZU0E5SUc1MWJHd3NJSFJvYVhNdVpHVndkR2hHZFc1aklEMGdkVzhzSUhSb2FYTXVaR1Z3ZEdoVVpYTjBJRDBnSVRBc0lIUm9hWE11WkdWd2RHaFhjbWwwWlNBOUlDRXdMQ0IwYUdsekxuTjBaVzVqYVd4WGNtbDBaVTFoYzJzZ1BTQXlOVFVzSUhSb2FYTXVjM1JsYm1OcGJFWjFibU1nUFNCSlppd2dkR2hwY3k1emRHVnVZMmxzVW1WbUlEMGdNQ3dnZEdocGN5NXpkR1Z1WTJsc1JuVnVZMDFoYzJzZ1BTQXlOVFVzSUhSb2FYTXVjM1JsYm1OcGJFWmhhV3dnUFNCSllTd2dkR2hwY3k1emRHVnVZMmxzV2taaGFXd2dQU0JKWVN3Z2RHaHBjeTV6ZEdWdVkybHNXbEJoYzNNZ1BTQkpZU3dnZEdocGN5NXpkR1Z1WTJsc1YzSnBkR1VnUFNBaE1Td2dkR2hwY3k1amJHbHdjR2x1WjFCc1lXNWxjeUE5SUc1MWJHd3NJSFJvYVhNdVkyeHBjRWx1ZEdWeWMyVmpkR2x2YmlBOUlDRXhMQ0IwYUdsekxtTnNhWEJUYUdGa2IzZHpJRDBnSVRFc0lIUm9hWE11YzJoaFpHOTNVMmxrWlNBOUlHNTFiR3dzSUhSb2FYTXVZMjlzYjNKWGNtbDBaU0E5SUNFd0xDQjBhR2x6TG5CeVpXTnBjMmx2YmlBOUlHNTFiR3dzSUhSb2FYTXVjRzlzZVdkdmJrOW1abk5sZENBOUlDRXhMQ0IwYUdsekxuQnZiSGxuYjI1UFptWnpaWFJHWVdOMGIzSWdQU0F3TENCMGFHbHpMbkJ2YkhsbmIyNVBabVp6WlhSVmJtbDBjeUE5SURBc0lIUm9hWE11WkdsMGFHVnlhVzVuSUQwZ0lURXNJSFJvYVhNdVlXeHdhR0ZVYjBOdmRtVnlZV2RsSUQwZ0lURXNJSFJvYVhNdWNISmxiWFZzZEdsd2JHbGxaRUZzY0doaElEMGdJVEVzSUhSb2FYTXVabTl5WTJWVGFXNW5iR1ZRWVhOeklEMGdJVEVzSUhSb2FYTXVkbWx6YVdKc1pTQTlJQ0V3TENCMGFHbHpMblJ2Ym1WTllYQndaV1FnUFNBaE1Dd2dkR2hwY3k1MWMyVnlSR0YwWVNBOUlIdDlMQ0IwYUdsekxuWmxjbk5wYjI0Z1BTQXdMQ0IwYUdsekxsOWhiSEJvWVZSbGMzUWdQU0F3T3dvZ0lDQWdmUW9nSUNBZ1oyVjBJR0ZzY0doaFZHVnpkQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV3h3YUdGVVpYTjBPd29nSUNBZ2ZRb2dJQ0FnYzJWMElHRnNjR2hoVkdWemRDaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZZV3h3YUdGVVpYTjBJRDRnTUNBaFBTQmxJRDRnTUNBbUppQjBhR2x6TG5abGNuTnBiMjRyS3l3Z2RHaHBjeTVmWVd4d2FHRlVaWE4wSUQwZ1pUc0tJQ0FnSUgwS0lDQWdJRzl1UW5WcGJHUW9LU0I3ZlFvZ0lDQWdiMjVDWldadmNtVlNaVzVrWlhJb0tTQjdmUW9nSUNBZ2IyNUNaV1p2Y21WRGIyMXdhV3hsS0NrZ2UzMEtJQ0FnSUdOMWMzUnZiVkJ5YjJkeVlXMURZV05vWlV0bGVTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dmJrSmxabTl5WlVOdmJYQnBiR1V1ZEc5VGRISnBibWNvS1RzS0lDQWdJSDBLSUNBZ0lITmxkRlpoYkhWbGN5aGxLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tHVWdJVDA5SUhadmFXUWdNQ2tnWm05eUtHeGxkQ0IwSUdsdUlHVXBld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdWYmRGMDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGdWRWhTUlVVdVRXRjBaWEpwWVd3NklIQmhjbUZ0WlhSbGNpQW5KSHQwZlNjZ2FHRnpJSFpoYkhWbElHOW1JSFZ1WkdWbWFXNWxaQzVnS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEdocGMxdDBYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2tnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLR0JVU0ZKRlJTNU5ZWFJsY21saGJEb2dKeVI3ZEgwbklHbHpJRzV2ZENCaElIQnliM0JsY25SNUlHOW1JRlJJVWtWRkxpUjdkR2hwY3k1MGVYQmxmUzVnS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdrZ0ppWWdhUzVwYzBOdmJHOXlJRDhnYVM1elpYUW9iaWtnT2lCcElDWW1JR2t1YVhOV1pXTjBiM0l6SUNZbUlHNGdKaVlnYmk1cGMxWmxZM1J2Y2pNZ1B5QnBMbU52Y0hrb2Jpa2dPaUIwYUdselczUmRJRDBnYmpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdaU0E5UFQwZ2RtOXBaQ0F3SUh4OElIUjVjR1Z2WmlCbElEMDlJQ0p6ZEhKcGJtY2lPd29nSUNBZ0lDQWdJSFFnSmlZZ0tHVWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFIxY21Wek9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXMWhaMlZ6T2lCN2ZRb2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdld29nSUNBZ0lDQWdJQ0FnSUNCdFpYUmhaR0YwWVRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtVnljMmx2YmpvZ05DNDJMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0lrMWhkR1Z5YVdGc0lpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxibVZ5WVhSdmNqb2dJazFoZEdWeWFXRnNMblJ2U2xOUFRpSUtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ2JpNTFkV2xrSUQwZ2RHaHBjeTUxZFdsa0xDQnVMblI1Y0dVZ1BTQjBhR2x6TG5SNWNHVXNJSFJvYVhNdWJtRnRaU0FoUFQwZ0lpSWdKaVlnS0c0dWJtRnRaU0E5SUhSb2FYTXVibUZ0WlNrc0lIUm9hWE11WTI5c2IzSWdKaVlnZEdocGN5NWpiMnh2Y2k1cGMwTnZiRzl5SUNZbUlDaHVMbU52Ykc5eUlEMGdkR2hwY3k1amIyeHZjaTVuWlhSSVpYZ29LU2tzSUhSb2FYTXVjbTkxWjJodVpYTnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVjbTkxWjJodVpYTnpJRDBnZEdocGN5NXliM1ZuYUc1bGMzTXBMQ0IwYUdsekxtMWxkR0ZzYm1WemN5QWhQVDBnZG05cFpDQXdJQ1ltSUNodUxtMWxkR0ZzYm1WemN5QTlJSFJvYVhNdWJXVjBZV3h1WlhOektTd2dkR2hwY3k1emFHVmxiaUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHVMbk5vWldWdUlEMGdkR2hwY3k1emFHVmxiaWtzSUhSb2FYTXVjMmhsWlc1RGIyeHZjaUFtSmlCMGFHbHpMbk5vWldWdVEyOXNiM0l1YVhORGIyeHZjaUFtSmlBb2JpNXphR1ZsYmtOdmJHOXlJRDBnZEdocGN5NXphR1ZsYmtOdmJHOXlMbWRsZEVobGVDZ3BLU3dnZEdocGN5NXphR1ZsYmxKdmRXZG9ibVZ6Y3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2h1TG5Ob1pXVnVVbTkxWjJodVpYTnpJRDBnZEdocGN5NXphR1ZsYmxKdmRXZG9ibVZ6Y3lrc0lIUm9hWE11WlcxcGMzTnBkbVVnSmlZZ2RHaHBjeTVsYldsemMybDJaUzVwYzBOdmJHOXlJQ1ltSUNodUxtVnRhWE56YVhabElEMGdkR2hwY3k1bGJXbHpjMmwyWlM1blpYUklaWGdvS1Nrc0lIUm9hWE11WlcxcGMzTnBkbVZKYm5SbGJuTnBkSGtnSmlZZ2RHaHBjeTVsYldsemMybDJaVWx1ZEdWdWMybDBlU0FoUFQwZ01TQW1KaUFvYmk1bGJXbHpjMmwyWlVsdWRHVnVjMmwwZVNBOUlIUm9hWE11WlcxcGMzTnBkbVZKYm5SbGJuTnBkSGtwTENCMGFHbHpMbk53WldOMWJHRnlJQ1ltSUhSb2FYTXVjM0JsWTNWc1lYSXVhWE5EYjJ4dmNpQW1KaUFvYmk1emNHVmpkV3hoY2lBOUlIUm9hWE11YzNCbFkzVnNZWEl1WjJWMFNHVjRLQ2twTENCMGFHbHpMbk53WldOMWJHRnlTVzUwWlc1emFYUjVJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVjM0JsWTNWc1lYSkpiblJsYm5OcGRIa2dQU0IwYUdsekxuTndaV04xYkdGeVNXNTBaVzV6YVhSNUtTd2dkR2hwY3k1emNHVmpkV3hoY2tOdmJHOXlJQ1ltSUhSb2FYTXVjM0JsWTNWc1lYSkRiMnh2Y2k1cGMwTnZiRzl5SUNZbUlDaHVMbk53WldOMWJHRnlRMjlzYjNJZ1BTQjBhR2x6TG5Od1pXTjFiR0Z5UTI5c2IzSXVaMlYwU0dWNEtDa3BMQ0IwYUdsekxuTm9hVzVwYm1WemN5QWhQVDBnZG05cFpDQXdJQ1ltSUNodUxuTm9hVzVwYm1WemN5QTlJSFJvYVhNdWMyaHBibWx1WlhOektTd2dkR2hwY3k1amJHVmhjbU52WVhRZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYmk1amJHVmhjbU52WVhRZ1BTQjBhR2x6TG1Oc1pXRnlZMjloZENrc0lIUm9hWE11WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56SUNFOVBTQjJiMmxrSURBZ0ppWWdLRzR1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56SUQwZ2RHaHBjeTVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM01wTENCMGFHbHpMbU5zWldGeVkyOWhkRTFoY0NBbUppQjBhR2x6TG1Oc1pXRnlZMjloZEUxaGNDNXBjMVJsZUhSMWNtVWdKaVlnS0c0dVkyeGxZWEpqYjJGMFRXRndJRDBnZEdocGN5NWpiR1ZoY21OdllYUk5ZWEF1ZEc5S1UwOU9LR1VwTG5WMWFXUXBMQ0IwYUdsekxtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjQ0FtSmlCMGFHbHpMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjMDFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56VFdGd0lEMGdkR2hwY3k1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNOTllYQXVkRzlLVTA5T0tHVXBMblYxYVdRcExDQjBhR2x6TG1Oc1pXRnlZMjloZEU1dmNtMWhiRTFoY0NBbUppQjBhR2x6TG1Oc1pXRnlZMjloZEU1dmNtMWhiRTFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1WTJ4bFlYSmpiMkYwVG05eWJXRnNUV0Z3SUQwZ2RHaHBjeTVqYkdWaGNtTnZZWFJPYjNKdFlXeE5ZWEF1ZEc5S1UwOU9LR1VwTG5WMWFXUXNJRzR1WTJ4bFlYSmpiMkYwVG05eWJXRnNVMk5oYkdVZ1BTQjBhR2x6TG1Oc1pXRnlZMjloZEU1dmNtMWhiRk5qWVd4bExuUnZRWEp5WVhrb0tTa3NJSFJvYVhNdWFYSnBaR1Z6WTJWdVkyVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2JpNXBjbWxrWlhOalpXNWpaU0E5SUhSb2FYTXVhWEpwWkdWelkyVnVZMlVwTENCMGFHbHpMbWx5YVdSbGMyTmxibU5sU1U5U0lDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dWFYSnBaR1Z6WTJWdVkyVkpUMUlnUFNCMGFHbHpMbWx5YVdSbGMyTmxibU5sU1U5U0tTd2dkR2hwY3k1cGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMxSmhibWRsSUNFOVBTQjJiMmxrSURBZ0ppWWdLRzR1YVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNOU1lXNW5aU0E5SUhSb2FYTXVhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05TWVc1blpTa3NJSFJvYVhNdWFYSnBaR1Z6WTJWdVkyVk5ZWEFnSmlZZ2RHaHBjeTVwY21sa1pYTmpaVzVqWlUxaGNDNXBjMVJsZUhSMWNtVWdKaVlnS0c0dWFYSnBaR1Z6WTJWdVkyVk5ZWEFnUFNCMGFHbHpMbWx5YVdSbGMyTmxibU5sVFdGd0xuUnZTbE5QVGlobEtTNTFkV2xrS1N3Z2RHaHBjeTVwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzAxaGNDQW1KaUIwYUdsekxtbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpUV0Z3TG1selZHVjRkSFZ5WlNBbUppQW9iaTVwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzAxaGNDQTlJSFJvYVhNdWFYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTk5ZWEF1ZEc5S1UwOU9LR1VwTG5WMWFXUXBMQ0IwYUdsekxtRnVhWE52ZEhKdmNIa2dJVDA5SUhadmFXUWdNQ0FtSmlBb2JpNWhibWx6YjNSeWIzQjVJRDBnZEdocGN5NWhibWx6YjNSeWIzQjVLU3dnZEdocGN5NWhibWx6YjNSeWIzQjVVbTkwWVhScGIyNGdJVDA5SUhadmFXUWdNQ0FtSmlBb2JpNWhibWx6YjNSeWIzQjVVbTkwWVhScGIyNGdQU0IwYUdsekxtRnVhWE52ZEhKdmNIbFNiM1JoZEdsdmJpa3NJSFJvYVhNdVlXNXBjMjkwY205d2VVMWhjQ0FtSmlCMGFHbHpMbUZ1YVhOdmRISnZjSGxOWVhBdWFYTlVaWGgwZFhKbElDWW1JQ2h1TG1GdWFYTnZkSEp2Y0hsTllYQWdQU0IwYUdsekxtRnVhWE52ZEhKdmNIbE5ZWEF1ZEc5S1UwOU9LR1VwTG5WMWFXUXBMQ0IwYUdsekxtMWhjQ0FtSmlCMGFHbHpMbTFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1YldGd0lEMGdkR2hwY3k1dFlYQXVkRzlLVTA5T0tHVXBMblYxYVdRcExDQjBhR2x6TG0xaGRHTmhjQ0FtSmlCMGFHbHpMbTFoZEdOaGNDNXBjMVJsZUhSMWNtVWdKaVlnS0c0dWJXRjBZMkZ3SUQwZ2RHaHBjeTV0WVhSallYQXVkRzlLVTA5T0tHVXBMblYxYVdRcExDQjBhR2x6TG1Gc2NHaGhUV0Z3SUNZbUlIUm9hWE11WVd4d2FHRk5ZWEF1YVhOVVpYaDBkWEpsSUNZbUlDaHVMbUZzY0doaFRXRndJRDBnZEdocGN5NWhiSEJvWVUxaGNDNTBiMHBUVDA0b1pTa3VkWFZwWkNrc0lIUm9hWE11YkdsbmFIUk5ZWEFnSmlZZ2RHaHBjeTVzYVdkb2RFMWhjQzVwYzFSbGVIUjFjbVVnSmlZZ0tHNHViR2xuYUhSTllYQWdQU0IwYUdsekxteHBaMmgwVFdGd0xuUnZTbE5QVGlobEtTNTFkV2xrTENCdUxteHBaMmgwVFdGd1NXNTBaVzV6YVhSNUlEMGdkR2hwY3k1c2FXZG9kRTFoY0VsdWRHVnVjMmwwZVNrc0lIUm9hWE11WVc5TllYQWdKaVlnZEdocGN5NWhiMDFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1WVc5TllYQWdQU0IwYUdsekxtRnZUV0Z3TG5SdlNsTlBUaWhsS1M1MWRXbGtMQ0J1TG1GdlRXRndTVzUwWlc1emFYUjVJRDBnZEdocGN5NWhiMDFoY0VsdWRHVnVjMmwwZVNrc0lIUm9hWE11WW5WdGNFMWhjQ0FtSmlCMGFHbHpMbUoxYlhCTllYQXVhWE5VWlhoMGRYSmxJQ1ltSUNodUxtSjFiWEJOWVhBZ1BTQjBhR2x6TG1KMWJYQk5ZWEF1ZEc5S1UwOU9LR1VwTG5WMWFXUXNJRzR1WW5WdGNGTmpZV3hsSUQwZ2RHaHBjeTVpZFcxd1UyTmhiR1VwTENCMGFHbHpMbTV2Y20xaGJFMWhjQ0FtSmlCMGFHbHpMbTV2Y20xaGJFMWhjQzVwYzFSbGVIUjFjbVVnSmlZZ0tHNHVibTl5YldGc1RXRndJRDBnZEdocGN5NXViM0p0WVd4TllYQXVkRzlLVTA5T0tHVXBMblYxYVdRc0lHNHVibTl5YldGc1RXRndWSGx3WlNBOUlIUm9hWE11Ym05eWJXRnNUV0Z3Vkhsd1pTd2diaTV1YjNKdFlXeFRZMkZzWlNBOUlIUm9hWE11Ym05eWJXRnNVMk5oYkdVdWRHOUJjbkpoZVNncEtTd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUk5ZWEFnSmlZZ2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5STllYQXVhWE5VWlhoMGRYSmxJQ1ltSUNodUxtUnBjM0JzWVdObGJXVnVkRTFoY0NBOUlIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFRXRndMblJ2U2xOUFRpaGxLUzUxZFdsa0xDQnVMbVJwYzNCc1lXTmxiV1Z1ZEZOallXeGxJRDBnZEdocGN5NWthWE53YkdGalpXMWxiblJUWTJGc1pTd2diaTVrYVhOd2JHRmpaVzFsYm5SQ2FXRnpJRDBnZEdocGN5NWthWE53YkdGalpXMWxiblJDYVdGektTd2dkR2hwY3k1eWIzVm5hRzVsYzNOTllYQWdKaVlnZEdocGN5NXliM1ZuYUc1bGMzTk5ZWEF1YVhOVVpYaDBkWEpsSUNZbUlDaHVMbkp2ZFdkb2JtVnpjMDFoY0NBOUlIUm9hWE11Y205MVoyaHVaWE56VFdGd0xuUnZTbE5QVGlobEtTNTFkV2xrS1N3Z2RHaHBjeTV0WlhSaGJHNWxjM05OWVhBZ0ppWWdkR2hwY3k1dFpYUmhiRzVsYzNOTllYQXVhWE5VWlhoMGRYSmxJQ1ltSUNodUxtMWxkR0ZzYm1WemMwMWhjQ0E5SUhSb2FYTXViV1YwWVd4dVpYTnpUV0Z3TG5SdlNsTlBUaWhsS1M1MWRXbGtLU3dnZEdocGN5NWxiV2x6YzJsMlpVMWhjQ0FtSmlCMGFHbHpMbVZ0YVhOemFYWmxUV0Z3TG1selZHVjRkSFZ5WlNBbUppQW9iaTVsYldsemMybDJaVTFoY0NBOUlIUm9hWE11WlcxcGMzTnBkbVZOWVhBdWRHOUtVMDlPS0dVcExuVjFhV1FwTENCMGFHbHpMbk53WldOMWJHRnlUV0Z3SUNZbUlIUm9hWE11YzNCbFkzVnNZWEpOWVhBdWFYTlVaWGgwZFhKbElDWW1JQ2h1TG5Od1pXTjFiR0Z5VFdGd0lEMGdkR2hwY3k1emNHVmpkV3hoY2sxaGNDNTBiMHBUVDA0b1pTa3VkWFZwWkNrc0lIUm9hWE11YzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhBZ0ppWWdkR2hwY3k1emNHVmpkV3hoY2tsdWRHVnVjMmwwZVUxaGNDNXBjMVJsZUhSMWNtVWdKaVlnS0c0dWMzQmxZM1ZzWVhKSmJuUmxibk5wZEhsTllYQWdQU0IwYUdsekxuTndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndMblJ2U2xOUFRpaGxLUzUxZFdsa0tTd2dkR2hwY3k1emNHVmpkV3hoY2tOdmJHOXlUV0Z3SUNZbUlIUm9hWE11YzNCbFkzVnNZWEpEYjJ4dmNrMWhjQzVwYzFSbGVIUjFjbVVnSmlZZ0tHNHVjM0JsWTNWc1lYSkRiMnh2Y2sxaGNDQTlJSFJvYVhNdWMzQmxZM1ZzWVhKRGIyeHZjazFoY0M1MGIwcFRUMDRvWlNrdWRYVnBaQ2tzSUhSb2FYTXVaVzUyVFdGd0lDWW1JSFJvYVhNdVpXNTJUV0Z3TG1selZHVjRkSFZ5WlNBbUppQW9iaTVsYm5aTllYQWdQU0IwYUdsekxtVnVkazFoY0M1MGIwcFRUMDRvWlNrdWRYVnBaQ3dnZEdocGN5NWpiMjFpYVc1bElDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dVkyOXRZbWx1WlNBOUlIUm9hWE11WTI5dFltbHVaU2twTENCMGFHbHpMbVZ1ZGsxaGNFbHVkR1Z1YzJsMGVTQWhQVDBnZG05cFpDQXdJQ1ltSUNodUxtVnVkazFoY0VsdWRHVnVjMmwwZVNBOUlIUm9hWE11Wlc1MlRXRndTVzUwWlc1emFYUjVLU3dnZEdocGN5NXlaV1pzWldOMGFYWnBkSGtnSVQwOUlIWnZhV1FnTUNBbUppQW9iaTV5Wldac1pXTjBhWFpwZEhrZ1BTQjBhR2x6TG5KbFpteGxZM1JwZG1sMGVTa3NJSFJvYVhNdWNtVm1jbUZqZEdsdmJsSmhkR2x2SUNFOVBTQjJiMmxrSURBZ0ppWWdLRzR1Y21WbWNtRmpkR2x2YmxKaGRHbHZJRDBnZEdocGN5NXlaV1p5WVdOMGFXOXVVbUYwYVc4cExDQjBhR2x6TG1keVlXUnBaVzUwVFdGd0lDWW1JSFJvYVhNdVozSmhaR2xsYm5STllYQXVhWE5VWlhoMGRYSmxJQ1ltSUNodUxtZHlZV1JwWlc1MFRXRndJRDBnZEdocGN5NW5jbUZrYVdWdWRFMWhjQzUwYjBwVFQwNG9aU2t1ZFhWcFpDa3NJSFJvYVhNdWRISmhibk50YVhOemFXOXVJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVkSEpoYm5OdGFYTnphVzl1SUQwZ2RHaHBjeTUwY21GdWMyMXBjM05wYjI0cExDQjBhR2x6TG5SeVlXNXpiV2x6YzJsdmJrMWhjQ0FtSmlCMGFHbHpMblJ5WVc1emJXbHpjMmx2YmsxaGNDNXBjMVJsZUhSMWNtVWdKaVlnS0c0dWRISmhibk50YVhOemFXOXVUV0Z3SUQwZ2RHaHBjeTUwY21GdWMyMXBjM05wYjI1TllYQXVkRzlLVTA5T0tHVXBMblYxYVdRcExDQjBhR2x6TG5Sb2FXTnJibVZ6Y3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2h1TG5Sb2FXTnJibVZ6Y3lBOUlIUm9hWE11ZEdocFkydHVaWE56S1N3Z2RHaHBjeTUwYUdsamEyNWxjM05OWVhBZ0ppWWdkR2hwY3k1MGFHbGphMjVsYzNOTllYQXVhWE5VWlhoMGRYSmxJQ1ltSUNodUxuUm9hV05yYm1WemMwMWhjQ0E5SUhSb2FYTXVkR2hwWTJ0dVpYTnpUV0Z3TG5SdlNsTlBUaWhsS1M1MWRXbGtLU3dnZEdocGN5NWhkSFJsYm5WaGRHbHZia1JwYzNSaGJtTmxJQ0U5UFNCMmIybGtJREFnSmlZZ2RHaHBjeTVoZEhSbGJuVmhkR2x2YmtScGMzUmhibU5sSUNFOVBTQXhJQzhnTUNBbUppQW9iaTVoZEhSbGJuVmhkR2x2YmtScGMzUmhibU5sSUQwZ2RHaHBjeTVoZEhSbGJuVmhkR2x2YmtScGMzUmhibU5sS1N3Z2RHaHBjeTVoZEhSbGJuVmhkR2x2YmtOdmJHOXlJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVZWFIwWlc1MVlYUnBiMjVEYjJ4dmNpQTlJSFJvYVhNdVlYUjBaVzUxWVhScGIyNURiMnh2Y2k1blpYUklaWGdvS1Nrc0lIUm9hWE11YzJsNlpTQWhQVDBnZG05cFpDQXdJQ1ltSUNodUxuTnBlbVVnUFNCMGFHbHpMbk5wZW1VcExDQjBhR2x6TG5Ob1lXUnZkMU5wWkdVZ0lUMDlJRzUxYkd3Z0ppWWdLRzR1YzJoaFpHOTNVMmxrWlNBOUlIUm9hWE11YzJoaFpHOTNVMmxrWlNrc0lIUm9hWE11YzJsNlpVRjBkR1Z1ZFdGMGFXOXVJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVjMmw2WlVGMGRHVnVkV0YwYVc5dUlEMGdkR2hwY3k1emFYcGxRWFIwWlc1MVlYUnBiMjRwTENCMGFHbHpMbUpzWlc1a2FXNW5JQ0U5UFNCWGFTQW1KaUFvYmk1aWJHVnVaR2x1WnlBOUlIUm9hWE11WW14bGJtUnBibWNwTENCMGFHbHpMbk5wWkdVZ0lUMDlJRUp1SUNZbUlDaHVMbk5wWkdVZ1BTQjBhR2x6TG5OcFpHVXBMQ0IwYUdsekxuWmxjblJsZUVOdmJHOXljeUE5UFQwZ0lUQWdKaVlnS0c0dWRtVnlkR1Y0UTI5c2IzSnpJRDBnSVRBcExDQjBhR2x6TG05d1lXTnBkSGtnUENBeElDWW1JQ2h1TG05d1lXTnBkSGtnUFNCMGFHbHpMbTl3WVdOcGRIa3BMQ0IwYUdsekxuUnlZVzV6Y0dGeVpXNTBJRDA5UFNBaE1DQW1KaUFvYmk1MGNtRnVjM0JoY21WdWRDQTlJQ0V3S1N3Z2JpNWtaWEIwYUVaMWJtTWdQU0IwYUdsekxtUmxjSFJvUm5WdVl5d2diaTVrWlhCMGFGUmxjM1FnUFNCMGFHbHpMbVJsY0hSb1ZHVnpkQ3dnYmk1a1pYQjBhRmR5YVhSbElEMGdkR2hwY3k1a1pYQjBhRmR5YVhSbExDQnVMbU52Ykc5eVYzSnBkR1VnUFNCMGFHbHpMbU52Ykc5eVYzSnBkR1VzSUc0dWMzUmxibU5wYkZkeWFYUmxJRDBnZEdocGN5NXpkR1Z1WTJsc1YzSnBkR1VzSUc0dWMzUmxibU5wYkZkeWFYUmxUV0Z6YXlBOUlIUm9hWE11YzNSbGJtTnBiRmR5YVhSbFRXRnpheXdnYmk1emRHVnVZMmxzUm5WdVl5QTlJSFJvYVhNdWMzUmxibU5wYkVaMWJtTXNJRzR1YzNSbGJtTnBiRkpsWmlBOUlIUm9hWE11YzNSbGJtTnBiRkpsWml3Z2JpNXpkR1Z1WTJsc1JuVnVZMDFoYzJzZ1BTQjBhR2x6TG5OMFpXNWphV3hHZFc1alRXRnpheXdnYmk1emRHVnVZMmxzUm1GcGJDQTlJSFJvYVhNdWMzUmxibU5wYkVaaGFXd3NJRzR1YzNSbGJtTnBiRnBHWVdsc0lEMGdkR2hwY3k1emRHVnVZMmxzV2taaGFXd3NJRzR1YzNSbGJtTnBiRnBRWVhOeklEMGdkR2hwY3k1emRHVnVZMmxzV2xCaGMzTXNJSFJvYVhNdWNtOTBZWFJwYjI0Z0lUMDlJSFp2YVdRZ01DQW1KaUIwYUdsekxuSnZkR0YwYVc5dUlDRTlQU0F3SUNZbUlDaHVMbkp2ZEdGMGFXOXVJRDBnZEdocGN5NXliM1JoZEdsdmJpa3NJSFJvYVhNdWNHOXNlV2R2Yms5bVpuTmxkQ0E5UFQwZ0lUQWdKaVlnS0c0dWNHOXNlV2R2Yms5bVpuTmxkQ0E5SUNFd0tTd2dkR2hwY3k1d2IyeDVaMjl1VDJabWMyVjBSbUZqZEc5eUlDRTlQU0F3SUNZbUlDaHVMbkJ2YkhsbmIyNVBabVp6WlhSR1lXTjBiM0lnUFNCMGFHbHpMbkJ2YkhsbmIyNVBabVp6WlhSR1lXTjBiM0lwTENCMGFHbHpMbkJ2YkhsbmIyNVBabVp6WlhSVmJtbDBjeUFoUFQwZ01DQW1KaUFvYmk1d2IyeDVaMjl1VDJabWMyVjBWVzVwZEhNZ1BTQjBhR2x6TG5CdmJIbG5iMjVQWm1aelpYUlZibWwwY3lrc0lIUm9hWE11YkdsdVpYZHBaSFJvSUNFOVBTQjJiMmxrSURBZ0ppWWdkR2hwY3k1c2FXNWxkMmxrZEdnZ0lUMDlJREVnSmlZZ0tHNHViR2x1WlhkcFpIUm9JRDBnZEdocGN5NXNhVzVsZDJsa2RHZ3BMQ0IwYUdsekxtUmhjMmhUYVhwbElDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dVpHRnphRk5wZW1VZ1BTQjBhR2x6TG1SaGMyaFRhWHBsS1N3Z2RHaHBjeTVuWVhCVGFYcGxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVaMkZ3VTJsNlpTQTlJSFJvYVhNdVoyRndVMmw2WlNrc0lIUm9hWE11YzJOaGJHVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2JpNXpZMkZzWlNBOUlIUm9hWE11YzJOaGJHVXBMQ0IwYUdsekxtUnBkR2hsY21sdVp5QTlQVDBnSVRBZ0ppWWdLRzR1WkdsMGFHVnlhVzVuSUQwZ0lUQXBMQ0IwYUdsekxtRnNjR2hoVkdWemRDQStJREFnSmlZZ0tHNHVZV3h3YUdGVVpYTjBJRDBnZEdocGN5NWhiSEJvWVZSbGMzUXBMQ0IwYUdsekxtRnNjR2hoU0dGemFDQTlQVDBnSVRBZ0ppWWdLRzR1WVd4d2FHRklZWE5vSUQwZ0lUQXBMQ0IwYUdsekxtRnNjR2hoVkc5RGIzWmxjbUZuWlNBOVBUMGdJVEFnSmlZZ0tHNHVZV3h3YUdGVWIwTnZkbVZ5WVdkbElEMGdJVEFwTENCMGFHbHpMbkJ5WlcxMWJIUnBjR3hwWldSQmJIQm9ZU0E5UFQwZ0lUQWdKaVlnS0c0dWNISmxiWFZzZEdsd2JHbGxaRUZzY0doaElEMGdJVEFwTENCMGFHbHpMbVp2Y21ObFUybHVaMnhsVUdGemN5QTlQVDBnSVRBZ0ppWWdLRzR1Wm05eVkyVlRhVzVuYkdWUVlYTnpJRDBnSVRBcExDQjBhR2x6TG5kcGNtVm1jbUZ0WlNBOVBUMGdJVEFnSmlZZ0tHNHVkMmx5WldaeVlXMWxJRDBnSVRBcExDQjBhR2x6TG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUNBK0lERWdKaVlnS0c0dWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0lEMGdkR2hwY3k1M2FYSmxabkpoYldWTWFXNWxkMmxrZEdncExDQjBhR2x6TG5kcGNtVm1jbUZ0WlV4cGJtVmpZWEFnSVQwOUlDSnliM1Z1WkNJZ0ppWWdLRzR1ZDJseVpXWnlZVzFsVEdsdVpXTmhjQ0E5SUhSb2FYTXVkMmx5WldaeVlXMWxUR2x1WldOaGNDa3NJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaV3B2YVc0Z0lUMDlJQ0p5YjNWdVpDSWdKaVlnS0c0dWQybHlaV1p5WVcxbFRHbHVaV3B2YVc0Z1BTQjBhR2x6TG5kcGNtVm1jbUZ0WlV4cGJtVnFiMmx1S1N3Z2RHaHBjeTVtYkdGMFUyaGhaR2x1WnlBOVBUMGdJVEFnSmlZZ0tHNHVabXhoZEZOb1lXUnBibWNnUFNBaE1Da3NJSFJvYVhNdWRtbHphV0pzWlNBOVBUMGdJVEVnSmlZZ0tHNHVkbWx6YVdKc1pTQTlJQ0V4S1N3Z2RHaHBjeTUwYjI1bFRXRndjR1ZrSUQwOVBTQWhNU0FtSmlBb2JpNTBiMjVsVFdGd2NHVmtJRDBnSVRFcExDQjBhR2x6TG1adlp5QTlQVDBnSVRFZ0ppWWdLRzR1Wm05bklEMGdJVEVwTENCUFltcGxZM1F1YTJWNWN5aDBhR2x6TG5WelpYSkVZWFJoS1M1c1pXNW5kR2dnUGlBd0lDWW1JQ2h1TG5WelpYSkVZWFJoSUQwZ2RHaHBjeTUxYzJWeVJHRjBZU2s3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYVNoeUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdieUJwYmlCeUtYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ2NsdHZYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQmpMbTFsZEdGa1lYUmhMQ0JoTG5CMWMyZ29ZeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0U3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdsbUlDaDBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2FTaGxMblJsZUhSMWNtVnpLU3dnWVNBOUlHa29aUzVwYldGblpYTXBPd29nSUNBZ0lDQWdJQ0FnSUNCeUxteGxibWQwYUNBK0lEQWdKaVlnS0c0dWRHVjRkSFZ5WlhNZ1BTQnlLU3dnWVM1c1pXNW5kR2dnUGlBd0lDWW1JQ2h1TG1sdFlXZGxjeUE5SUdFcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2Jqc0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWdwTG1OdmNIa29kR2hwY3lrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG01aGJXVWdQU0JsTG01aGJXVXNJSFJvYVhNdVlteGxibVJwYm1jZ1BTQmxMbUpzWlc1a2FXNW5MQ0IwYUdsekxuTnBaR1VnUFNCbExuTnBaR1VzSUhSb2FYTXVkbVZ5ZEdWNFEyOXNiM0p6SUQwZ1pTNTJaWEowWlhoRGIyeHZjbk1zSUhSb2FYTXViM0JoWTJsMGVTQTlJR1V1YjNCaFkybDBlU3dnZEdocGN5NTBjbUZ1YzNCaGNtVnVkQ0E5SUdVdWRISmhibk53WVhKbGJuUXNJSFJvYVhNdVlteGxibVJUY21NZ1BTQmxMbUpzWlc1a1UzSmpMQ0IwYUdsekxtSnNaVzVrUkhOMElEMGdaUzVpYkdWdVpFUnpkQ3dnZEdocGN5NWliR1Z1WkVWeGRXRjBhVzl1SUQwZ1pTNWliR1Z1WkVWeGRXRjBhVzl1TENCMGFHbHpMbUpzWlc1a1UzSmpRV3h3YUdFZ1BTQmxMbUpzWlc1a1UzSmpRV3h3YUdFc0lIUm9hWE11WW14bGJtUkVjM1JCYkhCb1lTQTlJR1V1WW14bGJtUkVjM1JCYkhCb1lTd2dkR2hwY3k1aWJHVnVaRVZ4ZFdGMGFXOXVRV3h3YUdFZ1BTQmxMbUpzWlc1a1JYRjFZWFJwYjI1QmJIQm9ZU3dnZEdocGN5NWtaWEIwYUVaMWJtTWdQU0JsTG1SbGNIUm9SblZ1WXl3Z2RHaHBjeTVrWlhCMGFGUmxjM1FnUFNCbExtUmxjSFJvVkdWemRDd2dkR2hwY3k1a1pYQjBhRmR5YVhSbElEMGdaUzVrWlhCMGFGZHlhWFJsTENCMGFHbHpMbk4wWlc1amFXeFhjbWwwWlUxaGMyc2dQU0JsTG5OMFpXNWphV3hYY21sMFpVMWhjMnNzSUhSb2FYTXVjM1JsYm1OcGJFWjFibU1nUFNCbExuTjBaVzVqYVd4R2RXNWpMQ0IwYUdsekxuTjBaVzVqYVd4U1pXWWdQU0JsTG5OMFpXNWphV3hTWldZc0lIUm9hWE11YzNSbGJtTnBiRVoxYm1OTllYTnJJRDBnWlM1emRHVnVZMmxzUm5WdVkwMWhjMnNzSUhSb2FYTXVjM1JsYm1OcGJFWmhhV3dnUFNCbExuTjBaVzVqYVd4R1lXbHNMQ0IwYUdsekxuTjBaVzVqYVd4YVJtRnBiQ0E5SUdVdWMzUmxibU5wYkZwR1lXbHNMQ0IwYUdsekxuTjBaVzVqYVd4YVVHRnpjeUE5SUdVdWMzUmxibU5wYkZwUVlYTnpMQ0IwYUdsekxuTjBaVzVqYVd4WGNtbDBaU0E5SUdVdWMzUmxibU5wYkZkeWFYUmxPd29nSUNBZ0lDQWdJR3hsZENCMElEMGdaUzVqYkdsd2NHbHVaMUJzWVc1bGN5d2diaUE5SUc1MWJHdzdDaUFnSUNBZ0lDQWdhV1lnS0hRZ0lUMDlJRzUxYkd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0IwTG14bGJtZDBhRHNLSUNBZ0lDQWdJQ0FnSUNBZ2JpQTlJRzVsZHlCQmNuSmhlU2hwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnlJRDBnTURzZ2NpQWhQVDBnYVRzZ0t5dHlLVzViY2wwZ1BTQjBXM0pkTG1Oc2IyNWxLQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnNhWEJ3YVc1blVHeGhibVZ6SUQwZ2Jpd2dkR2hwY3k1amJHbHdTVzUwWlhKelpXTjBhVzl1SUQwZ1pTNWpiR2x3U1c1MFpYSnpaV04wYVc5dUxDQjBhR2x6TG1Oc2FYQlRhR0ZrYjNkeklEMGdaUzVqYkdsd1UyaGhaRzkzY3l3Z2RHaHBjeTV6YUdGa2IzZFRhV1JsSUQwZ1pTNXphR0ZrYjNkVGFXUmxMQ0IwYUdsekxtTnZiRzl5VjNKcGRHVWdQU0JsTG1OdmJHOXlWM0pwZEdVc0lIUm9hWE11Y0hKbFkybHphVzl1SUQwZ1pTNXdjbVZqYVhOcGIyNHNJSFJvYVhNdWNHOXNlV2R2Yms5bVpuTmxkQ0E5SUdVdWNHOXNlV2R2Yms5bVpuTmxkQ3dnZEdocGN5NXdiMng1WjI5dVQyWm1jMlYwUm1GamRHOXlJRDBnWlM1d2IyeDVaMjl1VDJabWMyVjBSbUZqZEc5eUxDQjBhR2x6TG5CdmJIbG5iMjVQWm1aelpYUlZibWwwY3lBOUlHVXVjRzlzZVdkdmJrOW1abk5sZEZWdWFYUnpMQ0IwYUdsekxtUnBkR2hsY21sdVp5QTlJR1V1WkdsMGFHVnlhVzVuTENCMGFHbHpMbUZzY0doaFZHVnpkQ0E5SUdVdVlXeHdhR0ZVWlhOMExDQjBhR2x6TG1Gc2NHaGhTR0Z6YUNBOUlHVXVZV3h3YUdGSVlYTm9MQ0IwYUdsekxtRnNjR2hoVkc5RGIzWmxjbUZuWlNBOUlHVXVZV3h3YUdGVWIwTnZkbVZ5WVdkbExDQjBhR2x6TG5CeVpXMTFiSFJwY0d4cFpXUkJiSEJvWVNBOUlHVXVjSEpsYlhWc2RHbHdiR2xsWkVGc2NHaGhMQ0IwYUdsekxtWnZjbU5sVTJsdVoyeGxVR0Z6Y3lBOUlHVXVabTl5WTJWVGFXNW5iR1ZRWVhOekxDQjBhR2x6TG5acGMybGliR1VnUFNCbExuWnBjMmxpYkdVc0lIUm9hWE11ZEc5dVpVMWhjSEJsWkNBOUlHVXVkRzl1WlUxaGNIQmxaQ3dnZEdocGN5NTFjMlZ5UkdGMFlTQTlJRXBUVDA0dWNHRnljMlVvU2xOUFRpNXpkSEpwYm1kcFpua29aUzUxYzJWeVJHRjBZU2twTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWkdsemNHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbVJwYzNCaGRHTm9SWFpsYm5Rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWlaR2x6Y0c5elpTSUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lIMEtJQ0FnSUhObGRDQnVaV1ZrYzFWd1pHRjBaU2hsS1NCN0NpQWdJQ0FnSUNBZ1pTQTlQVDBnSVRBZ0ppWWdkR2hwY3k1MlpYSnphVzl1S3lzN0NpQWdJQ0I5Q24wc0lGTmtJRDBnZXdvZ0lDQWdZV3hwWTJWaWJIVmxPaUF4TlRjNU1qTTRNeXdLSUNBZ0lHRnVkR2x4ZFdWM2FHbDBaVG9nTVRZME5EUXpOelVzQ2lBZ0lDQmhjWFZoT2lBMk5UVXpOU3dLSUNBZ0lHRnhkV0Z0WVhKcGJtVTZJRGd6T0RnMU5qUXNDaUFnSUNCaGVuVnlaVG9nTVRVM09UUXhOelVzQ2lBZ0lDQmlaV2xuWlRvZ01UWXhNVGt5TmpBc0NpQWdJQ0JpYVhOeGRXVTZJREUyTnpjd01qUTBMQW9nSUNBZ1lteGhZMnM2SURBc0NpQWdJQ0JpYkdGdVkyaGxaR0ZzYlc5dVpEb2dNVFkzTnpJd05EVXNDaUFnSUNCaWJIVmxPaUF5TlRVc0NpQWdJQ0JpYkhWbGRtbHZiR1YwT2lBNU1EVTFNakF5TEFvZ0lDQWdZbkp2ZDI0NklERXdPREkwTWpNMExBb2dJQ0FnWW5WeWJIbDNiMjlrT2lBeE5EVTVOakl6TVN3S0lDQWdJR05oWkdWMFlteDFaVG9nTmpJMk5qVXlPQ3dLSUNBZ0lHTm9ZWEowY21WMWMyVTZJRGd6T0Rnek5USXNDaUFnSUNCamFHOWpiMnhoZEdVNklERXpOemc1TkRjd0xBb2dJQ0FnWTI5eVlXdzZJREUyTnpRME1qY3lMQW9nSUNBZ1kyOXlibVpzYjNkbGNtSnNkV1U2SURZMU9URTVPREVzQ2lBZ0lDQmpiM0p1YzJsc2F6b2dNVFkzTnpVek9EZ3NDaUFnSUNCamNtbHRjMjl1T2lBeE5EUXlNekV3TUN3S0lDQWdJR041WVc0NklEWTFOVE0xTEFvZ0lDQWdaR0Z5YTJKc2RXVTZJREV6T1N3S0lDQWdJR1JoY210amVXRnVPaUF6TlRjeU15d0tJQ0FnSUdSaGNtdG5iMnhrWlc1eWIyUTZJREV5TURreU9UTTVMQW9nSUNBZ1pHRnlhMmR5WVhrNklERXhNVEU1TURFM0xBb2dJQ0FnWkdGeWEyZHlaV1Z1T2lBeU5UWXdNQ3dLSUNBZ0lHUmhjbXRuY21WNU9pQXhNVEV4T1RBeE55d0tJQ0FnSUdSaGNtdHJhR0ZyYVRvZ01USTBNek15TlRrc0NpQWdJQ0JrWVhKcmJXRm5aVzUwWVRvZ09URXdPVFkwTXl3S0lDQWdJR1JoY210dmJHbDJaV2R5WldWdU9pQTFOVGszT1RrNUxBb2dJQ0FnWkdGeWEyOXlZVzVuWlRvZ01UWTNORGMxTWpBc0NpQWdJQ0JrWVhKcmIzSmphR2xrT2lBeE1EQTBNREF4TWl3S0lDQWdJR1JoY210eVpXUTZJRGt4TURrMU1EUXNDaUFnSUNCa1lYSnJjMkZzYlc5dU9pQXhOVE13T0RReE1Dd0tJQ0FnSUdSaGNtdHpaV0ZuY21WbGJqb2dPVFF4T1RreE9Td0tJQ0FnSUdSaGNtdHpiR0YwWldKc2RXVTZJRFEzTXpRek5EY3NDaUFnSUNCa1lYSnJjMnhoZEdWbmNtRjVPaUF6TVRBd05EazFMQW9nSUNBZ1pHRnlhM05zWVhSbFozSmxlVG9nTXpFd01EUTVOU3dLSUNBZ0lHUmhjbXQwZFhKeGRXOXBjMlU2SURVeU9UUTFMQW9nSUNBZ1pHRnlhM1pwYjJ4bGREb2dPVFk1T1RVek9Td0tJQ0FnSUdSbFpYQndhVzVyT2lBeE5qY3hOamswTnl3S0lDQWdJR1JsWlhCemEzbGliSFZsT2lBME9URTFNU3dLSUNBZ0lHUnBiV2R5WVhrNklEWTVNRGd5TmpVc0NpQWdJQ0JrYVcxbmNtVjVPaUEyT1RBNE1qWTFMQW9nSUNBZ1pHOWtaMlZ5WW14MVpUb2dNakF3TXpFNU9Td0tJQ0FnSUdacGNtVmljbWxqYXpvZ01URTJOelF4TkRZc0NpQWdJQ0JtYkc5eVlXeDNhR2wwWlRvZ01UWTNOelU1TWpBc0NpQWdJQ0JtYjNKbGMzUm5jbVZsYmpvZ01qSTJNemcwTWl3S0lDQWdJR1oxWTJoemFXRTZJREUyTnpFeE9UTTFMQW9nSUNBZ1oyRnBibk5pYjNKdk9pQXhORFEzTkRRMk1Dd0tJQ0FnSUdkb2IzTjBkMmhwZEdVNklERTJNekUyTmpjeExBb2dJQ0FnWjI5c1pEb2dNVFkzTmpZM01qQXNDaUFnSUNCbmIyeGtaVzV5YjJRNklERTBNekk1TVRJd0xBb2dJQ0FnWjNKaGVUb2dPRFF5TVRVd05Dd0tJQ0FnSUdkeVpXVnVPaUF6TWpjMk9Dd0tJQ0FnSUdkeVpXVnVlV1ZzYkc5M09pQXhNVFF3TXpBMU5Td0tJQ0FnSUdkeVpYazZJRGcwTWpFMU1EUXNDaUFnSUNCb2IyNWxlV1JsZHpvZ01UVTNPVFF4TmpBc0NpQWdJQ0JvYjNSd2FXNXJPaUF4Tmpjek9EYzBNQ3dLSUNBZ0lHbHVaR2xoYm5KbFpEb2dNVE0wTlRnMU1qUXNDaUFnSUNCcGJtUnBaMjg2SURRNU1UVXpNekFzQ2lBZ0lDQnBkbTl5ZVRvZ01UWTNOemN5TURBc0NpQWdJQ0JyYUdGcmFUb2dNVFUzT0RjMk5qQXNDaUFnSUNCc1lYWmxibVJsY2pvZ01UVXhNekkwTVRBc0NpQWdJQ0JzWVhabGJtUmxjbUpzZFhOb09pQXhOamMzTXpNMk5Td0tJQ0FnSUd4aGQyNW5jbVZsYmpvZ09ERTVNRGszTml3S0lDQWdJR3hsYlc5dVkyaHBabVp2YmpvZ01UWTNOelU0T0RVc0NpQWdJQ0JzYVdkb2RHSnNkV1U2SURFeE16a3pNalUwTEFvZ0lDQWdiR2xuYUhSamIzSmhiRG9nTVRVM05qRTFNellzQ2lBZ0lDQnNhV2RvZEdONVlXNDZJREUwTnpRMU5UazVMQW9nSUNBZ2JHbG5hSFJuYjJ4a1pXNXliMlI1Wld4c2IzYzZJREUyTkRRNE1qRXdMQW9nSUNBZ2JHbG5hSFJuY21GNU9pQXhNemc0TWpNeU15d0tJQ0FnSUd4cFoyaDBaM0psWlc0NklEazBPVGd5TlRZc0NpQWdJQ0JzYVdkb2RHZHlaWGs2SURFek9EZ3lNekl6TEFvZ0lDQWdiR2xuYUhSd2FXNXJPaUF4TmpjMU9EUTJOU3dLSUNBZ0lHeHBaMmgwYzJGc2JXOXVPaUF4TmpjMU1qYzJNaXdLSUNBZ0lHeHBaMmgwYzJWaFozSmxaVzQ2SURJeE5ESTRPVEFzQ2lBZ0lDQnNhV2RvZEhOcmVXSnNkV1U2SURnNU1EQXpORFlzQ2lBZ0lDQnNhV2RvZEhOc1lYUmxaM0poZVRvZ056Z3pNemMxTXl3S0lDQWdJR3hwWjJoMGMyeGhkR1ZuY21WNU9pQTNPRE16TnpVekxBb2dJQ0FnYkdsbmFIUnpkR1ZsYkdKc2RXVTZJREV4TlRnME56TTBMQW9nSUNBZ2JHbG5hSFI1Wld4c2IzYzZJREUyTnpjM01UZzBMQW9nSUNBZ2JHbHRaVG9nTmpVeU9EQXNDaUFnSUNCc2FXMWxaM0psWlc0NklETXpNamt6TXpBc0NpQWdJQ0JzYVc1bGJqb2dNVFkwTkRVMk56QXNDaUFnSUNCdFlXZGxiblJoT2lBeE5qY3hNVGt6TlN3S0lDQWdJRzFoY205dmJqb2dPRE00T0RZd09Dd0tJQ0FnSUcxbFpHbDFiV0Z4ZFdGdFlYSnBibVU2SURZM016Y3pNaklzQ2lBZ0lDQnRaV1JwZFcxaWJIVmxPaUF5TURVc0NpQWdJQ0J0WldScGRXMXZjbU5vYVdRNklERXlNakV4TmpZM0xBb2dJQ0FnYldWa2FYVnRjSFZ5Y0d4bE9pQTVOall5TmpnekxBb2dJQ0FnYldWa2FYVnRjMlZoWjNKbFpXNDZJRE01Tnpnd09UY3NDaUFnSUNCdFpXUnBkVzF6YkdGMFpXSnNkV1U2SURnd09EYzNPVEFzQ2lBZ0lDQnRaV1JwZFcxemNISnBibWRuY21WbGJqb2dOalF4TlRRc0NpQWdJQ0J0WldScGRXMTBkWEp4ZFc5cGMyVTZJRFEzTnpJek1EQXNDaUFnSUNCdFpXUnBkVzEyYVc5c1pYUnlaV1E2SURFek1EUTNNVGN6TEFvZ0lDQWdiV2xrYm1sbmFIUmliSFZsT2lBeE5qUTBPVEV5TEFvZ0lDQWdiV2x1ZEdOeVpXRnRPaUF4TmpFeU1UZzFNQ3dLSUNBZ0lHMXBjM1I1Y205elpUb2dNVFkzTnpBeU56TXNDaUFnSUNCdGIyTmpZWE5wYmpvZ01UWTNOekF5TWprc0NpQWdJQ0J1WVhaaGFtOTNhR2wwWlRvZ01UWTNOamcyT0RVc0NpQWdJQ0J1WVhaNU9pQXhNamdzQ2lBZ0lDQnZiR1JzWVdObE9pQXhOalkwTXpVMU9Dd0tJQ0FnSUc5c2FYWmxPaUE0TkRJeE16YzJMQW9nSUNBZ2IyeHBkbVZrY21GaU9pQTNNRFE0TnpNNUxBb2dJQ0FnYjNKaGJtZGxPaUF4TmpjMU16a3lNQ3dLSUNBZ0lHOXlZVzVuWlhKbFpEb2dNVFkzTWprek5EUXNDaUFnSUNCdmNtTm9hV1E2SURFME16RTFOek0wTEFvZ0lDQWdjR0ZzWldkdmJHUmxibkp2WkRvZ01UVTJOVGN4TXpBc0NpQWdJQ0J3WVd4bFozSmxaVzQ2SURFd01ESTFPRGd3TEFvZ0lDQWdjR0ZzWlhSMWNuRjFiMmx6WlRvZ01URTFNams1TmpZc0NpQWdJQ0J3WVd4bGRtbHZiR1YwY21Wa09pQXhORE00TVRJd015d0tJQ0FnSUhCaGNHRjVZWGRvYVhBNklERTJOemN6TURjM0xBb2dJQ0FnY0dWaFkyaHdkV1ptT2lBeE5qYzJOelkzTXl3S0lDQWdJSEJsY25VNklERXpORFk0T1RreExBb2dJQ0FnY0dsdWF6b2dNVFkzTmpFd016VXNDaUFnSUNCd2JIVnRPaUF4TkRVeU5EWXpOeXdLSUNBZ0lIQnZkMlJsY21Kc2RXVTZJREV4TlRreE9URXdMQW9nSUNBZ2NIVnljR3hsT2lBNE16ZzROek0yTEFvZ0lDQWdjbVZpWldOallYQjFjbkJzWlRvZ05qWTVOemc0TVN3S0lDQWdJSEpsWkRvZ01UWTNNVEUyT0RBc0NpQWdJQ0J5YjNONVluSnZkMjQ2SURFeU16VTNOVEU1TEFvZ0lDQWdjbTk1WVd4aWJIVmxPaUEwTWpnMk9UUTFMQW9nSUNBZ2MyRmtaR3hsWW5KdmQyNDZJRGt4TWpjeE9EY3NDaUFnSUNCellXeHRiMjQ2SURFMk5ERTJPRGd5TEFvZ0lDQWdjMkZ1WkhsaWNtOTNiam9nTVRZd016STROalFzQ2lBZ0lDQnpaV0ZuY21WbGJqb2dNekExTURNeU55d0tJQ0FnSUhObFlYTm9aV3hzT2lBeE5qYzNORFl6T0N3S0lDQWdJSE5wWlc1dVlUb2dNVEExTURZM09UY3NDaUFnSUNCemFXeDJaWEk2SURFeU5qTXlNalUyTEFvZ0lDQWdjMnQ1WW14MVpUb2dPRGt3TURNek1Td0tJQ0FnSUhOc1lYUmxZbXgxWlRvZ05qazNNREEyTVN3S0lDQWdJSE5zWVhSbFozSmhlVG9nTnpNM01qazBOQ3dLSUNBZ0lITnNZWFJsWjNKbGVUb2dOek0zTWprME5Dd0tJQ0FnSUhOdWIzYzZJREUyTnpjMU9UTXdMQW9nSUNBZ2MzQnlhVzVuWjNKbFpXNDZJRFkxTkRBM0xBb2dJQ0FnYzNSbFpXeGliSFZsT2lBME5qSXdPVGd3TEFvZ0lDQWdkR0Z1T2lBeE16Z3dPRGM0TUN3S0lDQWdJSFJsWVd3NklETXlPRGsyTEFvZ0lDQWdkR2hwYzNSc1pUb2dNVFF5TURRNE9EZ3NDaUFnSUNCMGIyMWhkRzg2SURFMk56TTNNRGsxTEFvZ0lDQWdkSFZ5Y1hWdmFYTmxPaUEwTWpVeE9EVTJMQW9nSUNBZ2RtbHZiR1YwT2lBeE5UWXpNVEE0Tml3S0lDQWdJSGRvWldGME9pQXhOakV4TXpNek1Td0tJQ0FnSUhkb2FYUmxPaUF4TmpjM056SXhOU3dLSUNBZ0lIZG9hWFJsYzIxdmEyVTZJREUyTVRFNU1qZzFMQW9nSUNBZ2VXVnNiRzkzT2lBeE5qYzNOamsyTUN3S0lDQWdJSGxsYkd4dmQyZHlaV1Z1T2lBeE1ERTBOVEEzTkFwOUxDQkRiaUE5SUhzS0lDQWdJR2c2SURBc0NpQWdJQ0J6T2lBd0xBb2dJQ0FnYkRvZ01BcDlMQ0JMY3lBOUlIc0tJQ0FnSUdnNklEQXNDaUFnSUNCek9pQXdMQW9nSUNBZ2JEb2dNQXA5T3dwbWRXNWpkR2x2YmlCeFlTaHpNU3dnWlN3Z2RDa2dld29nSUNBZ2NtVjBkWEp1SUhRZ1BDQXdJQ1ltSUNoMElDczlJREVwTENCMElENGdNU0FtSmlBb2RDQXRQU0F4S1N3Z2RDQThJREVnTHlBMklEOGdjekVnS3lBb1pTQXRJSE14S1NBcUlEWWdLaUIwSURvZ2RDQThJREVnTHlBeUlEOGdaU0E2SUhRZ1BDQXlJQzhnTXlBL0lITXhJQ3NnS0dVZ0xTQnpNU2tnS2lBMklDb2dLRElnTHlBeklDMGdkQ2tnT2lCek1Uc0tmUXAyWVhJZ2NHVWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUtYc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYzBOdmJHOXlJRDBnSVRBc0lIUm9hWE11Y2lBOUlERXNJSFJvYVhNdVp5QTlJREVzSUhSb2FYTXVZaUE5SURFc0lIUm9hWE11YzJWMEtHVXNJSFFzSUc0cE93b2dJQ0FnZlFvZ0lDQWdjMlYwS0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCcFppQW9kQ0E5UFQwZ2RtOXBaQ0F3SUNZbUlHNGdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHVTdDaUFnSUNBZ0lDQWdJQ0FnSUdrZ0ppWWdhUzVwYzBOdmJHOXlJRDhnZEdocGN5NWpiM0I1S0drcElEb2dkSGx3Wlc5bUlHa2dQVDBnSW01MWJXSmxjaUlnUHlCMGFHbHpMbk5sZEVobGVDaHBLU0E2SUhSNWNHVnZaaUJwSUQwOUlDSnpkSEpwYm1jaUlDWW1JSFJvYVhNdWMyVjBVM1I1YkdVb2FTazdDaUFnSUNBZ0lDQWdmU0JsYkhObElIUm9hWE11YzJWMFVrZENLR1VzSUhRc0lHNHBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBVMk5oYkdGeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eUlEMGdaU3dnZEdocGN5NW5JRDBnWlN3Z2RHaHBjeTVpSUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRWhsZUNobExDQjBJRDBnZG5RcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTQTlJRTFoZEdndVpteHZiM0lvWlNrc0lIUm9hWE11Y2lBOUlDaGxJRDQrSURFMklDWWdNalUxS1NBdklESTFOU3dnZEdocGN5NW5JRDBnS0dVZ1BqNGdPQ0FtSURJMU5Ta2dMeUF5TlRVc0lIUm9hWE11WWlBOUlDaGxJQ1lnTWpVMUtTQXZJREkxTlN3Z1VXVXVkRzlYYjNKcmFXNW5RMjlzYjNKVGNHRmpaU2gwYUdsekxDQjBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZKSFFpaGxMQ0IwTENCdUxDQnBJRDBnVVdVdWQyOXlhMmx1WjBOdmJHOXlVM0JoWTJVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5SUQwZ1pTd2dkR2hwY3k1bklEMGdkQ3dnZEdocGN5NWlJRDBnYml3Z1VXVXVkRzlYYjNKcmFXNW5RMjlzYjNKVGNHRmpaU2gwYUdsekxDQnBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVoVFRDaGxMQ0IwTENCdUxDQnBJRDBnVVdVdWQyOXlhMmx1WjBOdmJHOXlVM0JoWTJVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvWlNBOUlGbGpLR1VzSURFcExDQjBJRDBnWTNRb2RDd2dNQ3dnTVNrc0lHNGdQU0JqZENodUxDQXdMQ0F4S1N3Z2RDQTlQVDBnTUNrZ2RHaHBjeTV5SUQwZ2RHaHBjeTVuSUQwZ2RHaHBjeTVpSUQwZ2Jqc0tJQ0FnSUNBZ0lDQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhJZ1BTQnVJRHc5SUM0MUlEOGdiaUFxSUNneElDc2dkQ2tnT2lCdUlDc2dkQ0F0SUc0Z0tpQjBMQ0JoSUQwZ01pQXFJRzRnTFNCeU93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSWdQU0J4WVNoaExDQnlMQ0JsSUNzZ01TQXZJRE1wTENCMGFHbHpMbWNnUFNCeFlTaGhMQ0J5TENCbEtTd2dkR2hwY3k1aUlEMGdjV0VvWVN3Z2Npd2daU0F0SURFZ0x5QXpLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRkZsTG5SdlYyOXlhMmx1WjBOdmJHOXlVM0JoWTJVb2RHaHBjeXdnYVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUlRkSGxzWlNobExDQjBJRDBnZG5RcElIc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnVLSElwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjaUFoUFQwZ2RtOXBaQ0F3SUNZbUlIQmhjbk5sUm14dllYUW9jaWtnUENBeElDWW1JR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UTI5c2IzSTZJRUZzY0doaElHTnZiWEJ2Ym1WdWRDQnZaaUFpSUNzZ1pTQXJJQ0lnZDJsc2JDQmlaU0JwWjI1dmNtVmtMaUlwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdhVHNLSUNBZ0lDQWdJQ0JwWmlBb2FTQTlJQzllS0Z4M0t5bGNLQ2hiWGx3cFhTb3BYQ2t2TG1WNFpXTW9aU2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhJc0lHRWdQU0JwV3pGZExDQnZJRDBnYVZzeVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9LR0VwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWljbWRpSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbkpuWW1FaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlEMGdMMTVjY3lvb1hHUXJLVnh6S2l4Y2N5b29YR1FyS1Z4ektpeGNjeW9vWEdRcktWeHpLaWcvT2l4Y2N5b29YR1FxWEM0L1hHUXJLVnh6S2lrL0pDOHVaWGhsWXlodktTa2djbVYwZFhKdUlHNG9jbHMwWFNrc0lIUm9hWE11YzJWMFVrZENLRTFoZEdndWJXbHVLREkxTlN3Z2NHRnljMlZKYm5Rb2Nsc3hYU3dnTVRBcEtTQXZJREkxTlN3Z1RXRjBhQzV0YVc0b01qVTFMQ0J3WVhKelpVbHVkQ2h5V3pKZExDQXhNQ2twSUM4Z01qVTFMQ0JOWVhSb0xtMXBiaWd5TlRVc0lIQmhjbk5sU1c1MEtISmJNMTBzSURFd0tTa2dMeUF5TlRVc0lIUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlJRDBnTDE1Y2N5b29YR1FyS1Z3bFhITXFMRnh6S2loY1pDc3BYQ1ZjY3lvc1hITXFLRnhrS3lsY0pWeHpLaWcvT2l4Y2N5b29YR1FxWEM0L1hHUXJLVnh6S2lrL0pDOHVaWGhsWXlodktTa2djbVYwZFhKdUlHNG9jbHMwWFNrc0lIUm9hWE11YzJWMFVrZENLRTFoZEdndWJXbHVLREV3TUN3Z2NHRnljMlZKYm5Rb2Nsc3hYU3dnTVRBcEtTQXZJREV3TUN3Z1RXRjBhQzV0YVc0b01UQXdMQ0J3WVhKelpVbHVkQ2h5V3pKZExDQXhNQ2twSUM4Z01UQXdMQ0JOWVhSb0xtMXBiaWd4TURBc0lIQmhjbk5sU1c1MEtISmJNMTBzSURFd0tTa2dMeUF4TURBc0lIUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaWFITnNJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ltaHpiR0VpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUQwZ0wxNWNjeW9vWEdRcVhDNC9YR1FyS1Z4ektpeGNjeW9vWEdRcVhDNC9YR1FyS1Z3bFhITXFMRnh6S2loY1pDcGNMajljWkNzcFhDVmNjeW9vUHpvc1hITXFLRnhrS2x3dVAxeGtLeWxjY3lvcFB5UXZMbVY0WldNb2J5a3BJSEpsZEhWeWJpQnVLSEpiTkYwcExDQjBhR2x6TG5ObGRFaFRUQ2h3WVhKelpVWnNiMkYwS0hKYk1WMHBJQzhnTXpZd0xDQndZWEp6WlVac2IyRjBLSEpiTWwwcElDOGdNVEF3TENCd1lYSnpaVVpzYjJGMEtISmJNMTBwSUM4Z01UQXdMQ0IwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNURiMnh2Y2pvZ1ZXNXJibTkzYmlCamIyeHZjaUJ0YjJSbGJDQWlJQ3NnWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0drZ1BTQXZYbHdqS0Z0QkxVWmhMV1pjWkYwcktTUXZMbVY0WldNb1pTa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSElnUFNCcFd6RmRMQ0JoSUQwZ2NpNXNaVzVuZEdnN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaElEMDlQU0F6S1NCeVpYUjFjbTRnZEdocGN5NXpaWFJTUjBJb2NHRnljMlZKYm5Rb2NpNWphR0Z5UVhRb01Da3NJREUyS1NBdklERTFMQ0J3WVhKelpVbHVkQ2h5TG1Ob1lYSkJkQ2d4S1N3Z01UWXBJQzhnTVRVc0lIQmhjbk5sU1c1MEtISXVZMmhoY2tGMEtESXBMQ0F4TmlrZ0x5QXhOU3dnZENrN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaElEMDlQU0EyS1NCeVpYUjFjbTRnZEdocGN5NXpaWFJJWlhnb2NHRnljMlZKYm5Rb2Npd2dNVFlwTENCMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1RGIyeHZjam9nU1c1MllXeHBaQ0JvWlhnZ1kyOXNiM0lnSWlBcklHVXBPd29nSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWlNBbUppQmxMbXhsYm1kMGFDQStJREFwSUhKbGRIVnliaUIwYUdsekxuTmxkRU52Ykc5eVRtRnRaU2hsTENCMEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFTnZiRzl5VG1GdFpTaGxMQ0IwSUQwZ2RuUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJRk5rVzJVdWRHOU1iM2RsY2tOaGMyVW9LVjA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzRnSVQwOUlIWnZhV1FnTUNBL0lIUm9hWE11YzJWMFNHVjRLRzRzSUhRcElEb2dZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVEYjJ4dmNqb2dWVzVyYm05M2JpQmpiMnh2Y2lBaUlDc2daU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvZEdocGN5NXlMQ0IwYUdsekxtY3NJSFJvYVhNdVlpazdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eUlEMGdaUzV5TENCMGFHbHpMbWNnUFNCbExtY3NJSFJvYVhNdVlpQTlJR1V1WWl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOdmNIbFRVa2RDVkc5TWFXNWxZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbklnUFNCWWFTaGxMbklwTENCMGFHbHpMbWNnUFNCWWFTaGxMbWNwTENCMGFHbHpMbUlnUFNCWWFTaGxMbUlwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VVeHBibVZoY2xSdlUxSkhRaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjaUE5SUVSaEtHVXVjaWtzSUhSb2FYTXVaeUE5SUVSaEtHVXVaeWtzSUhSb2FYTXVZaUE5SUVSaEtHVXVZaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYjI1MlpYSjBVMUpIUWxSdlRHbHVaV0Z5S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU52Y0hsVFVrZENWRzlNYVc1bFlYSW9kR2hwY3lrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamIyNTJaWEowVEdsdVpXRnlWRzlUVWtkQ0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdmNIbE1hVzVsWVhKVWIxTlNSMElvZEdocGN5a3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJJWlhnb1pTQTlJSFowS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZGbExtWnliMjFYYjNKcmFXNW5RMjlzYjNKVGNHRmpaU2hVZEM1amIzQjVLSFJvYVhNcExDQmxLU3dnVFdGMGFDNXliM1Z1WkNoamRDaFVkQzV5SUNvZ01qVTFMQ0F3TENBeU5UVXBLU0FxSURZMU5UTTJJQ3NnVFdGMGFDNXliM1Z1WkNoamRDaFVkQzVuSUNvZ01qVTFMQ0F3TENBeU5UVXBLU0FxSURJMU5pQXJJRTFoZEdndWNtOTFibVFvWTNRb1ZIUXVZaUFxSURJMU5Td2dNQ3dnTWpVMUtTazdDaUFnSUNCOUNpQWdJQ0JuWlhSSVpYaFRkSEpwYm1jb1pTQTlJSFowS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNnaU1EQXdNREF3SWlBcklIUm9hWE11WjJWMFNHVjRLR1VwTG5SdlUzUnlhVzVuS0RFMktTa3VjMnhwWTJVb0xUWXBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFNGTk1LR1VzSUhRZ1BTQlJaUzUzYjNKcmFXNW5RMjlzYjNKVGNHRmpaU2tnZXdvZ0lDQWdJQ0FnSUZGbExtWnliMjFYYjNKcmFXNW5RMjlzYjNKVGNHRmpaU2hVZEM1amIzQjVLSFJvYVhNcExDQjBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJRlIwTG5Jc0lHa2dQU0JVZEM1bkxDQnlJRDBnVkhRdVlpd2dZU0E5SUUxaGRHZ3ViV0Y0S0c0c0lHa3NJSElwTENCdklEMGdUV0YwYUM1dGFXNG9iaXdnYVN3Z2Npa3NJR01zSUd3c0lHZ2dQU0FvYnlBcklHRXBJQzhnTWpzS0lDQWdJQ0FnSUNCcFppQW9ieUE5UFQwZ1lTa2dZeUE5SURBc0lHd2dQU0F3T3dvZ0lDQWdJQ0FnSUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkU0E5SUdFZ0xTQnZPd29nSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdvYkNBOUlHZ2dQRDBnTGpVZ1B5QjFJQzhnS0dFZ0t5QnZLU0E2SUhVZ0x5QW9NaUF0SUdFZ0xTQnZLU3dnWVNsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRzQ2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1l5QTlJQ2hwSUMwZ2Npa2dMeUIxSUNzZ0tHa2dQQ0J5SUQ4Z05pQTZJREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQnBPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdNZ1BTQW9jaUF0SUc0cElDOGdkU0FySURJN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJSEk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1l5QTlJQ2h1SUMwZ2FTa2dMeUIxSUNzZ05Ec0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQmpJQzg5SURZN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExtZ2dQU0JqTENCbExuTWdQU0JzTENCbExtd2dQU0JvTENCbE93b2dJQ0FnZlFvZ0lDQWdaMlYwVWtkQ0tHVXNJSFFnUFNCUlpTNTNiM0pyYVc1blEyOXNiM0pUY0dGalpTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQlJaUzVtY205dFYyOXlhMmx1WjBOdmJHOXlVM0JoWTJVb1ZIUXVZMjl3ZVNoMGFHbHpLU3dnZENrc0lHVXVjaUE5SUZSMExuSXNJR1V1WnlBOUlGUjBMbWNzSUdVdVlpQTlJRlIwTG1Jc0lHVTdDaUFnSUNCOUNpQWdJQ0JuWlhSVGRIbHNaU2hsSUQwZ2RuUXBJSHNLSUNBZ0lDQWdJQ0JSWlM1bWNtOXRWMjl5YTJsdVowTnZiRzl5VTNCaFkyVW9WSFF1WTI5d2VTaDBhR2x6S1N3Z1pTazdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQlVkQzV5TENCdUlEMGdWSFF1Wnl3Z2FTQTlJRlIwTG1JN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVZ0lUMDlJSFowSUQ4Z1lHTnZiRzl5S0NSN1pYMGdKSHQwTG5SdlJtbDRaV1FvTXlsOUlDUjdiaTUwYjBacGVHVmtLRE1wZlNBa2Uya3VkRzlHYVhobFpDZ3pLWDBwWUNBNklHQnlaMklvSkh0TllYUm9Mbkp2ZFc1a0tIUWdLaUF5TlRVcGZTd2tlMDFoZEdndWNtOTFibVFvYmlBcUlESTFOU2w5TENSN1RXRjBhQzV5YjNWdVpDaHBJQ29nTWpVMUtYMHBZRHNLSUNBZ0lIMEtJQ0FnSUc5bVpuTmxkRWhUVENobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwU0ZOTUtFTnVLU3dnZEdocGN5NXpaWFJJVTB3b1EyNHVhQ0FySUdVc0lFTnVMbk1nS3lCMExDQkRiaTVzSUNzZ2JpazdDaUFnSUNCOUNpQWdJQ0JoWkdRb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5JZ0t6MGdaUzV5TENCMGFHbHpMbWNnS3owZ1pTNW5MQ0IwYUdsekxtSWdLejBnWlM1aUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1lXUmtRMjlzYjNKektHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlJRDBnWlM1eUlDc2dkQzV5TENCMGFHbHpMbWNnUFNCbExtY2dLeUIwTG1jc0lIUm9hWE11WWlBOUlHVXVZaUFySUhRdVlpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHRmtaRk5qWVd4aGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNpQXJQU0JsTENCMGFHbHpMbWNnS3owZ1pTd2dkR2hwY3k1aUlDczlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6ZFdJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5JZ1BTQk5ZWFJvTG0xaGVDZ3dMQ0IwYUdsekxuSWdMU0JsTG5JcExDQjBhR2x6TG1jZ1BTQk5ZWFJvTG0xaGVDZ3dMQ0IwYUdsekxtY2dMU0JsTG1jcExDQjBhR2x6TG1JZ1BTQk5ZWFJvTG0xaGVDZ3dMQ0IwYUdsekxtSWdMU0JsTG1JcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JYVnNkR2x3Ykhrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5JZ0tqMGdaUzV5TENCMGFHbHpMbWNnS2owZ1pTNW5MQ0IwYUdsekxtSWdLajBnWlM1aUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JYVnNkR2x3YkhsVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbklnS2owZ1pTd2dkR2hwY3k1bklDbzlJR1VzSUhSb2FYTXVZaUFxUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JHVnljQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y2lBclBTQW9aUzV5SUMwZ2RHaHBjeTV5S1NBcUlIUXNJSFJvYVhNdVp5QXJQU0FvWlM1bklDMGdkR2hwY3k1bktTQXFJSFFzSUhSb2FYTXVZaUFyUFNBb1pTNWlJQzBnZEdocGN5NWlLU0FxSUhRc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCc1pYSndRMjlzYjNKektHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5SUQwZ1pTNXlJQ3NnS0hRdWNpQXRJR1V1Y2lrZ0tpQnVMQ0IwYUdsekxtY2dQU0JsTG1jZ0t5QW9kQzVuSUMwZ1pTNW5LU0FxSUc0c0lIUm9hWE11WWlBOUlHVXVZaUFySUNoMExtSWdMU0JsTG1JcElDb2diaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR3hsY25CSVUwd29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WjJWMFNGTk1LRU51S1N3Z1pTNW5aWFJJVTB3b1MzTXBPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdlWE1vUTI0dWFDd2dTM011YUN3Z2RDa3NJR2tnUFNCNWN5aERiaTV6TENCTGN5NXpMQ0IwS1N3Z2NpQTlJSGx6S0VOdUxtd3NJRXR6TG13c0lIUXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRFaFRUQ2h1TENCcExDQnlLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMVdaV04wYjNJektHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eUlEMGdaUzU0TENCMGFHbHpMbWNnUFNCbExua3NJSFJvYVhNdVlpQTlJR1V1ZWl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGd2NHeDVUV0YwY21sNE15aGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuSXNJRzRnUFNCMGFHbHpMbWNzSUdrZ1BTQjBhR2x6TG1Jc0lISWdQU0JsTG1Wc1pXMWxiblJ6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSWdQU0J5V3pCZElDb2dkQ0FySUhKYk0xMGdLaUJ1SUNzZ2NsczJYU0FxSUdrc0lIUm9hWE11WnlBOUlISmJNVjBnS2lCMElDc2djbHMwWFNBcUlHNGdLeUJ5V3pkZElDb2dhU3dnZEdocGN5NWlJRDBnY2xzeVhTQXFJSFFnS3lCeVd6VmRJQ29nYmlBcklISmJPRjBnS2lCcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pYRjFZV3h6S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXlJRDA5UFNCMGFHbHpMbklnSmlZZ1pTNW5JRDA5UFNCMGFHbHpMbWNnSmlZZ1pTNWlJRDA5UFNCMGFHbHpMbUk3Q2lBZ0lDQjlDaUFnSUNCbWNtOXRRWEp5WVhrb1pTd2dkQ0E5SURBcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5SUQwZ1pWdDBYU3dnZEdocGN5NW5JRDBnWlZ0MElDc2dNVjBzSUhSb2FYTXVZaUE5SUdWYmRDQXJJREpkTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5QmNuSmhlU2hsSUQwZ1cxMHNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVmJkRjBnUFNCMGFHbHpMbklzSUdWYmRDQXJJREZkSUQwZ2RHaHBjeTVuTENCbFczUWdLeUF5WFNBOUlIUm9hWE11WWl3Z1pUc0tJQ0FnSUgwS0lDQWdJR1p5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5JZ1BTQmxMbWRsZEZnb2RDa3NJSFJvYVhNdVp5QTlJR1V1WjJWMFdTaDBLU3dnZEdocGN5NWlJRDBnWlM1blpYUmFLSFFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRWhsZUNncE93b2dJQ0FnZlFvZ0lDQWdLbHRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2tnZXdvZ0lDQWdJQ0FnSUhscFpXeGtJSFJvYVhNdWNpd2dlV2xsYkdRZ2RHaHBjeTVuTENCNWFXVnNaQ0IwYUdsekxtSTdDaUFnSUNCOUNuMHNJRlIwSUQwZ2JtVjNJSEJsT3dwd1pTNU9RVTFGVXlBOUlGTmtPd3AyWVhJZ1UyNGdQU0JqYkdGemN5QmxlSFJsYm1SeklHSjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVhWE5OWlhOb1FtRnphV05OWVhSbGNtbGhiQ0E5SUNFd0xDQjBhR2x6TG5SNWNHVWdQU0FpVFdWemFFSmhjMmxqVFdGMFpYSnBZV3dpTENCMGFHbHpMbU52Ykc5eUlEMGdibVYzSUhCbEtERTJOemMzTWpFMUtTd2dkR2hwY3k1dFlYQWdQU0J1ZFd4c0xDQjBhR2x6TG14cFoyaDBUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NXNhV2RvZEUxaGNFbHVkR1Z1YzJsMGVTQTlJREVzSUhSb2FYTXVZVzlOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbUZ2VFdGd1NXNTBaVzV6YVhSNUlEMGdNU3dnZEdocGN5NXpjR1ZqZFd4aGNrMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVlXeHdhR0ZOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbVZ1ZGsxaGNDQTlJRzUxYkd3c0lIUm9hWE11WTI5dFltbHVaU0E5SUhoaExDQjBhR2x6TG5KbFpteGxZM1JwZG1sMGVTQTlJREVzSUhSb2FYTXVjbVZtY21GamRHbHZibEpoZEdsdklEMGdMams0TENCMGFHbHpMbmRwY21WbWNtRnRaU0E5SUNFeExDQjBhR2x6TG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUNBOUlERXNJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaV05oY0NBOUlDSnliM1Z1WkNJc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpXcHZhVzRnUFNBaWNtOTFibVFpTENCMGFHbHpMbVp2WnlBOUlDRXdMQ0IwYUdsekxuTmxkRlpoYkhWbGN5aGxLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG1OdmJHOXlMbU52Y0hrb1pTNWpiMnh2Y2lrc0lIUm9hWE11YldGd0lEMGdaUzV0WVhBc0lIUm9hWE11YkdsbmFIUk5ZWEFnUFNCbExteHBaMmgwVFdGd0xDQjBhR2x6TG14cFoyaDBUV0Z3U1c1MFpXNXphWFI1SUQwZ1pTNXNhV2RvZEUxaGNFbHVkR1Z1YzJsMGVTd2dkR2hwY3k1aGIwMWhjQ0E5SUdVdVlXOU5ZWEFzSUhSb2FYTXVZVzlOWVhCSmJuUmxibk5wZEhrZ1BTQmxMbUZ2VFdGd1NXNTBaVzV6YVhSNUxDQjBhR2x6TG5Od1pXTjFiR0Z5VFdGd0lEMGdaUzV6Y0dWamRXeGhjazFoY0N3Z2RHaHBjeTVoYkhCb1lVMWhjQ0E5SUdVdVlXeHdhR0ZOWVhBc0lIUm9hWE11Wlc1MlRXRndJRDBnWlM1bGJuWk5ZWEFzSUhSb2FYTXVZMjl0WW1sdVpTQTlJR1V1WTI5dFltbHVaU3dnZEdocGN5NXlaV1pzWldOMGFYWnBkSGtnUFNCbExuSmxabXhsWTNScGRtbDBlU3dnZEdocGN5NXlaV1p5WVdOMGFXOXVVbUYwYVc4Z1BTQmxMbkpsWm5KaFkzUnBiMjVTWVhScGJ5d2dkR2hwY3k1M2FYSmxabkpoYldVZ1BTQmxMbmRwY21WbWNtRnRaU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ2dQU0JsTG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bFkyRndJRDBnWlM1M2FYSmxabkpoYldWTWFXNWxZMkZ3TENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WcWIybHVJRDBnWlM1M2FYSmxabkpoYldWTWFXNWxhbTlwYml3Z2RHaHBjeTVtYjJjZ1BTQmxMbVp2Wnl3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnWDI0Z1BTQndjQ2dwT3dwbWRXNWpkR2x2YmlCd2NDZ3BJSHNLSUNBZ0lHeGxkQ0J6TVNBOUlHNWxkeUJCY25KaGVVSjFabVpsY2lnMEtTd2daU0E5SUc1bGR5QkdiRzloZERNeVFYSnlZWGtvY3pFcExDQjBJRDBnYm1WM0lGVnBiblF6TWtGeWNtRjVLSE14S1N3Z2JpQTlJRzVsZHlCVmFXNTBNekpCY25KaGVTZzFNVElwTENCcElEMGdibVYzSUZWcGJuUXpNa0Z5Y21GNUtEVXhNaWs3Q2lBZ0lDQm1iM0lvYkdWMElHTWdQU0F3T3lCaklEd2dNalUyT3lBcksyTXBld29nSUNBZ0lDQWdJR3hsZENCc0lEMGdZeUF0SURFeU56c0tJQ0FnSUNBZ0lDQnNJRHdnTFRJM0lEOGdLRzViWTEwZ1BTQXdMQ0J1VzJNZ2ZDQXlOVFpkSUQwZ016STNOamdzSUdsYlkxMGdQU0F5TkN3Z2FWdGpJSHdnTWpVMlhTQTlJREkwS1NBNklHd2dQQ0F0TVRRZ1B5QW9ibHRqWFNBOUlERXdNalFnUGo0Z0xXd2dMU0F4TkN3Z2JsdGpJSHdnTWpVMlhTQTlJREV3TWpRZ1BqNGdMV3dnTFNBeE5DQjhJRE15TnpZNExDQnBXMk5kSUQwZ0xXd2dMU0F4TENCcFcyTWdmQ0F5TlRaZElEMGdMV3dnTFNBeEtTQTZJR3dnUEQwZ01UVWdQeUFvYmx0alhTQTlJR3dnS3lBeE5TQThQQ0F4TUN3Z2JsdGpJSHdnTWpVMlhTQTlJR3dnS3lBeE5TQThQQ0F4TUNCOElETXlOelk0TENCcFcyTmRJRDBnTVRNc0lHbGJZeUI4SURJMU5sMGdQU0F4TXlrZ09pQnNJRHdnTVRJNElEOGdLRzViWTEwZ1BTQXpNVGMwTkN3Z2JsdGpJSHdnTWpVMlhTQTlJRFkwTlRFeUxDQnBXMk5kSUQwZ01qUXNJR2xiWXlCOElESTFObDBnUFNBeU5Da2dPaUFvYmx0alhTQTlJRE14TnpRMExDQnVXMk1nZkNBeU5UWmRJRDBnTmpRMU1USXNJR2xiWTEwZ1BTQXhNeXdnYVZ0aklId2dNalUyWFNBOUlERXpLVHNLSUNBZ0lIMEtJQ0FnSUd4bGRDQnlJRDBnYm1WM0lGVnBiblF6TWtGeWNtRjVLREl3TkRncExDQmhJRDBnYm1WM0lGVnBiblF6TWtGeWNtRjVLRFkwS1N3Z2J5QTlJRzVsZHlCVmFXNTBNekpCY25KaGVTZzJOQ2s3Q2lBZ0lDQm1iM0lvYkdWMElHTWdQU0F4T3lCaklEd2dNVEF5TkRzZ0t5dGpLWHNLSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJR01nUER3Z01UTXNJR2dnUFNBd093b2dJQ0FnSUNBZ0lHWnZjaWc3SUNFb2JDQW1JRGd6T0RnMk1EZ3BPeWxzSUR3OFBTQXhMQ0JvSUMwOUlEZ3pPRGcyTURnN0NpQWdJQ0FnSUNBZ2JDQW1QU0F0T0RNNE9EWXdPU3dnYUNBclBTQTVORGM1TVRJM01EUXNJSEpiWTEwZ1BTQnNJSHdnYURzS0lDQWdJSDBLSUNBZ0lHWnZjaWhzWlhRZ1l5QTlJREV3TWpRN0lHTWdQQ0F5TURRNE95QXJLMk1wY2x0alhTQTlJRGt6T1RVeU5EQTVOaUFySUNoaklDMGdNVEF5TkNBOFBDQXhNeWs3Q2lBZ0lDQm1iM0lvYkdWMElHTWdQU0F4T3lCaklEd2dNekU3SUNzcll5bGhXMk5kSUQwZ1l5QThQQ0F5TXpzS0lDQWdJR0ZiTXpGZElEMGdNVEU1T1RVM01EazBOQ3dnWVZzek1sMGdQU0F5TVRRM05EZ3pOalE0T3dvZ0lDQWdabTl5S0d4bGRDQmpJRDBnTXpNN0lHTWdQQ0EyTXpzZ0t5dGpLV0ZiWTEwZ1BTQXlNVFEzTkRnek5qUTRJQ3NnS0dNZ0xTQXpNaUE4UENBeU15azdDaUFnSUNCaFd6WXpYU0E5SURNek5EY3dOVFExT1RJN0NpQWdJQ0JtYjNJb2JHVjBJR01nUFNBeE95QmpJRHdnTmpRN0lDc3JZeWxqSUNFOVBTQXpNaUFtSmlBb2IxdGpYU0E5SURFd01qUXBPd29nSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCbWJHOWhkRlpwWlhjNklHVXNDaUFnSUNBZ0lDQWdkV2x1ZERNeVZtbGxkem9nZEN3S0lDQWdJQ0FnSUNCaVlYTmxWR0ZpYkdVNklHNHNDaUFnSUNBZ0lDQWdjMmhwWm5SVVlXSnNaVG9nYVN3S0lDQWdJQ0FnSUNCdFlXNTBhWE56WVZSaFlteGxPaUJ5TEFvZ0lDQWdJQ0FnSUdWNGNHOXVaVzUwVkdGaWJHVTZJR0VzQ2lBZ0lDQWdJQ0FnYjJabWMyVjBWR0ZpYkdVNklHOEtJQ0FnSUgwN0NuMEtablZ1WTNScGIyNGdUblFvY3pFcElIc0tJQ0FnSUUxaGRHZ3VZV0p6S0hNeEtTQStJRFkxTlRBMElDWW1JR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UkdGMFlWVjBhV3h6TG5SdlNHRnNaa1pzYjJGMEtDazZJRlpoYkhWbElHOTFkQ0J2WmlCeVlXNW5aUzRpS1N3Z2N6RWdQU0JqZENoek1Td2dMVFkxTlRBMExDQTJOVFV3TkNrc0lGOXVMbVpzYjJGMFZtbGxkMXN3WFNBOUlITXhPd29nSUNBZ2JHVjBJR1VnUFNCZmJpNTFhVzUwTXpKV2FXVjNXekJkTENCMElEMGdaU0ErUGlBeU15QW1JRFV4TVRzS0lDQWdJSEpsZEhWeWJpQmZiaTVpWVhObFZHRmliR1ZiZEYwZ0t5QW9LR1VnSmlBNE16ZzROakEzS1NBK1BpQmZiaTV6YUdsbWRGUmhZbXhsVzNSZEtUc0tmUXBtZFc1amRHbHZiaUI0Y3loek1Ta2dld29nSUNBZ2JHVjBJR1VnUFNCek1TQStQaUF4TURzS0lDQWdJSEpsZEhWeWJpQmZiaTUxYVc1ME16SldhV1YzV3pCZElEMGdYMjR1YldGdWRHbHpjMkZVWVdKc1pWdGZiaTV2Wm1aelpYUlVZV0pzWlZ0bFhTQXJJQ2h6TVNBbUlERXdNak1wWFNBcklGOXVMbVY0Y0c5dVpXNTBWR0ZpYkdWYlpWMHNJRjl1TG1ac2IyRjBWbWxsZDFzd1hUc0tmUXAyWVhJZ1RYWWdQU0I3Q2lBZ0lDQjBiMGhoYkdaR2JHOWhkRG9nVG5Rc0NpQWdJQ0JtY205dFNHRnNaa1pzYjJGME9pQjRjd3A5TENCbWRDQTlJRzVsZHlCQkxDQlJjeUE5SUc1bGR5QmFMQ0JsZENBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRnUFNBaE1TbDdDaUFnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29aU2twSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0lsUklVa1ZGTGtKMVptWmxja0YwZEhKcFluVjBaVG9nWVhKeVlYa2djMmh2ZFd4a0lHSmxJR0VnVkhsd1pXUWdRWEp5WVhrdUlpazdDaUFnSUNBZ0lDQWdkR2hwY3k1cGMwSjFabVpsY2tGMGRISnBZblYwWlNBOUlDRXdMQ0IwYUdsekxtNWhiV1VnUFNBaUlpd2dkR2hwY3k1aGNuSmhlU0E5SUdVc0lIUm9hWE11YVhSbGJWTnBlbVVnUFNCMExDQjBhR2x6TG1OdmRXNTBJRDBnWlNBaFBUMGdkbTlwWkNBd0lEOGdaUzVzWlc1bmRHZ2dMeUIwSURvZ01Dd2dkR2hwY3k1dWIzSnRZV3hwZW1Wa0lEMGdiaXdnZEdocGN5NTFjMkZuWlNBOUlFaHlMQ0IwYUdsekxuVndaR0YwWlZKaGJtZGxJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnZabVp6WlhRNklEQXNDaUFnSUNBZ0lDQWdJQ0FnSUdOdmRXNTBPaUF0TVFvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11WjNCMVZIbHdaU0E5SUhodUxDQjBhR2x6TG5abGNuTnBiMjRnUFNBd093b2dJQ0FnZlFvZ0lDQWdiMjVWY0d4dllXUkRZV3hzWW1GamF5Z3BJSHQ5Q2lBZ0lDQnpaWFFnYm1WbFpITlZjR1JoZEdVb1pTa2dld29nSUNBZ0lDQWdJR1VnUFQwOUlDRXdJQ1ltSUhSb2FYTXVkbVZ5YzJsdmJpc3JPd29nSUNBZ2ZRb2dJQ0FnYzJWMFZYTmhaMlVvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblZ6WVdkbElEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01aGJXVWdQU0JsTG01aGJXVXNJSFJvYVhNdVlYSnlZWGtnUFNCdVpYY2daUzVoY25KaGVTNWpiMjV6ZEhKMVkzUnZjaWhsTG1GeWNtRjVLU3dnZEdocGN5NXBkR1Z0VTJsNlpTQTlJR1V1YVhSbGJWTnBlbVVzSUhSb2FYTXVZMjkxYm5RZ1BTQmxMbU52ZFc1MExDQjBhR2x6TG01dmNtMWhiR2w2WldRZ1BTQmxMbTV2Y20xaGJHbDZaV1FzSUhSb2FYTXVkWE5oWjJVZ1BTQmxMblZ6WVdkbExDQjBhR2x6TG1kd2RWUjVjR1VnUFNCbExtZHdkVlI1Y0dVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamIzQjVRWFFvWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUdVZ0tqMGdkR2hwY3k1cGRHVnRVMmw2WlN3Z2JpQXFQU0IwTG1sMFpXMVRhWHBsT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQXNJSElnUFNCMGFHbHpMbWwwWlcxVGFYcGxPeUJwSUR3Z2Nqc2dhU3NyS1hSb2FYTXVZWEp5WVhsYlpTQXJJR2xkSUQwZ2RDNWhjbkpoZVZ0dUlDc2dhVjA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1UVhKeVlYa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRnljbUY1TG5ObGRDaGxLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVRXRjBjbWw0TXlobEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhWFJsYlZOcGVtVWdQVDA5SURJcElHWnZjaWhzWlhRZ2RDQTlJREFzSUc0Z1BTQjBhR2x6TG1OdmRXNTBPeUIwSUR3Z2Jqc2dkQ3NyS1ZGekxtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9kR2hwY3l3Z2RDa3NJRkZ6TG1Gd2NHeDVUV0YwY21sNE15aGxLU3dnZEdocGN5NXpaWFJZV1NoMExDQlJjeTU0TENCUmN5NTVLVHNLSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2gwYUdsekxtbDBaVzFUYVhwbElEMDlQU0F6S1NCbWIzSW9iR1YwSUhRZ1BTQXdMQ0J1SUQwZ2RHaHBjeTVqYjNWdWREc2dkQ0E4SUc0N0lIUXJLeWxtZEM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtIUm9hWE1zSUhRcExDQm1kQzVoY0hCc2VVMWhkSEpwZURNb1pTa3NJSFJvYVhNdWMyVjBXRmxhS0hRc0lHWjBMbmdzSUdaMExua3NJR1owTG5vcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVhCd2JIbE5ZWFJ5YVhnMEtHVXBJSHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnZEdocGN5NWpiM1Z1ZERzZ2RDQThJRzQ3SUhRckt5bG1kQzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0hSb2FYTXNJSFFwTENCbWRDNWhjSEJzZVUxaGRISnBlRFFvWlNrc0lIUm9hWE11YzJWMFdGbGFLSFFzSUdaMExuZ3NJR1owTG5rc0lHWjBMbm9wT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdZWEJ3YkhsT2IzSnRZV3hOWVhSeWFYZ29aU2tnZXdvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZENBOUlEQXNJRzRnUFNCMGFHbHpMbU52ZFc1ME95QjBJRHdnYmpzZ2RDc3JLV1owTG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb2RHaHBjeXdnZENrc0lHWjBMbUZ3Y0d4NVRtOXliV0ZzVFdGMGNtbDRLR1VwTENCMGFHbHpMbk5sZEZoWldpaDBMQ0JtZEM1NExDQm1kQzU1TENCbWRDNTZLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnlZVzV6Wm05eWJVUnBjbVZqZEdsdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Dd2diaUE5SUhSb2FYTXVZMjkxYm5RN0lIUWdQQ0J1T3lCMEt5c3BablF1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoMGFHbHpMQ0IwS1N3Z1puUXVkSEpoYm5ObWIzSnRSR2x5WldOMGFXOXVLR1VwTENCMGFHbHpMbk5sZEZoWldpaDBMQ0JtZEM1NExDQm1kQzU1TENCbWRDNTZLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkQ2hsTENCMElEMGdNQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRnljbUY1TG5ObGRDaGxMQ0IwS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRFTnZiWEJ2Ym1WdWRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbUZ5Y21GNVcyVWdLaUIwYUdsekxtbDBaVzFUYVhwbElDc2dkRjA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJtOXliV0ZzYVhwbFpDQW1KaUFvYmlBOUlFOTBLRzRzSUhSb2FYTXVZWEp5WVhrcEtTd2dianNLSUNBZ0lIMEtJQ0FnSUhObGRFTnZiWEJ2Ym1WdWRDaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNhWHBsWkNBbUppQW9iaUE5SUVKbEtHNHNJSFJvYVhNdVlYSnlZWGtwS1N3Z2RHaHBjeTVoY25KaGVWdGxJQ29nZEdocGN5NXBkR1Z0VTJsNlpTQXJJSFJkSUQwZ2Jpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHZGxkRmdvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVoY25KaGVWdGxJQ29nZEdocGN5NXBkR1Z0VTJsNlpWMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNhWHBsWkNBbUppQW9kQ0E5SUU5MEtIUXNJSFJvYVhNdVlYSnlZWGtwS1N3Z2REc0tJQ0FnSUgwS0lDQWdJSE5sZEZnb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNXZjbTFoYkdsNlpXUWdKaVlnS0hRZ1BTQkNaU2gwTENCMGFHbHpMbUZ5Y21GNUtTa3NJSFJvYVhNdVlYSnlZWGxiWlNBcUlIUm9hWE11YVhSbGJWTnBlbVZkSUQwZ2RDd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHZGxkRmtvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVoY25KaGVWdGxJQ29nZEdocGN5NXBkR1Z0VTJsNlpTQXJJREZkT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNXZjbTFoYkdsNlpXUWdKaVlnS0hRZ1BTQlBkQ2gwTENCMGFHbHpMbUZ5Y21GNUtTa3NJSFE3Q2lBZ0lDQjlDaUFnSUNCelpYUlpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXeHBlbVZrSUNZbUlDaDBJRDBnUW1Vb2RDd2dkR2hwY3k1aGNuSmhlU2twTENCMGFHbHpMbUZ5Y21GNVcyVWdLaUIwYUdsekxtbDBaVzFUYVhwbElDc2dNVjBnUFNCMExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1oyVjBXaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbUZ5Y21GNVcyVWdLaUIwYUdsekxtbDBaVzFUYVhwbElDc2dNbDA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJtOXliV0ZzYVhwbFpDQW1KaUFvZENBOUlFOTBLSFFzSUhSb2FYTXVZWEp5WVhrcEtTd2dkRHNLSUNBZ0lIMEtJQ0FnSUhObGRGb29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTV2Y20xaGJHbDZaV1FnSmlZZ0tIUWdQU0JDWlNoMExDQjBhR2x6TG1GeWNtRjVLU2tzSUhSb2FYTXVZWEp5WVhsYlpTQXFJSFJvYVhNdWFYUmxiVk5wZW1VZ0t5QXlYU0E5SUhRc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUlhLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVZWEp5WVhsYlpTQXFJSFJvYVhNdWFYUmxiVk5wZW1VZ0t5QXpYVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dWIzSnRZV3hwZW1Wa0lDWW1JQ2gwSUQwZ1QzUW9kQ3dnZEdocGN5NWhjbkpoZVNrcExDQjBPd29nSUNBZ2ZRb2dJQ0FnYzJWMFZ5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVibTl5YldGc2FYcGxaQ0FtSmlBb2RDQTlJRUpsS0hRc0lIUm9hWE11WVhKeVlYa3BLU3dnZEdocGN5NWhjbkpoZVZ0bElDb2dkR2hwY3k1cGRHVnRVMmw2WlNBcklETmRJRDBnZEN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRGaFpLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaU0FxUFNCMGFHbHpMbWwwWlcxVGFYcGxMQ0IwYUdsekxtNXZjbTFoYkdsNlpXUWdKaVlnS0hRZ1BTQkNaU2gwTENCMGFHbHpMbUZ5Y21GNUtTd2diaUE5SUVKbEtHNHNJSFJvYVhNdVlYSnlZWGtwS1N3Z2RHaHBjeTVoY25KaGVWdGxJQ3NnTUYwZ1BTQjBMQ0IwYUdsekxtRnljbUY1VzJVZ0t5QXhYU0E5SUc0c0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUllXVm9vWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbElDbzlJSFJvYVhNdWFYUmxiVk5wZW1Vc0lIUm9hWE11Ym05eWJXRnNhWHBsWkNBbUppQW9kQ0E5SUVKbEtIUXNJSFJvYVhNdVlYSnlZWGtwTENCdUlEMGdRbVVvYml3Z2RHaHBjeTVoY25KaGVTa3NJR2tnUFNCQ1pTaHBMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUm9hWE11WVhKeVlYbGJaU0FySURCZElEMGdkQ3dnZEdocGN5NWhjbkpoZVZ0bElDc2dNVjBnUFNCdUxDQjBhR2x6TG1GeWNtRjVXMlVnS3lBeVhTQTlJR2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSWVdWcFhLR1VzSUhRc0lHNHNJR2tzSUhJcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTQXFQU0IwYUdsekxtbDBaVzFUYVhwbExDQjBhR2x6TG01dmNtMWhiR2w2WldRZ0ppWWdLSFFnUFNCQ1pTaDBMQ0IwYUdsekxtRnljbUY1S1N3Z2JpQTlJRUpsS0c0c0lIUm9hWE11WVhKeVlYa3BMQ0JwSUQwZ1FtVW9hU3dnZEdocGN5NWhjbkpoZVNrc0lISWdQU0JDWlNoeUxDQjBhR2x6TG1GeWNtRjVLU2tzSUhSb2FYTXVZWEp5WVhsYlpTQXJJREJkSUQwZ2RDd2dkR2hwY3k1aGNuSmhlVnRsSUNzZ01WMGdQU0J1TENCMGFHbHpMbUZ5Y21GNVcyVWdLeUF5WFNBOUlHa3NJSFJvYVhNdVlYSnlZWGxiWlNBcklETmRJRDBnY2l3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUc5dVZYQnNiMkZrS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV2YmxWd2JHOWhaRU5oYkd4aVlXTnJJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2loMGFHbHpMbUZ5Y21GNUxDQjBhR2x6TG1sMFpXMVRhWHBsS1M1amIzQjVLSFJvYVhNcE93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdld29nSUNBZ0lDQWdJQ0FnSUNCcGRHVnRVMmw2WlRvZ2RHaHBjeTVwZEdWdFUybDZaU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nZEdocGN5NWhjbkpoZVM1amIyNXpkSEoxWTNSdmNpNXVZVzFsTEFvZ0lDQWdJQ0FnSUNBZ0lDQmhjbkpoZVRvZ1FYSnlZWGt1Wm5KdmJTaDBhR2x6TG1GeWNtRjVLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtOXliV0ZzYVhwbFpEb2dkR2hwY3k1dWIzSnRZV3hwZW1Wa0NpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1WVcxbElDRTlQU0FpSWlBbUppQW9aUzV1WVcxbElEMGdkR2hwY3k1dVlXMWxLU3dnZEdocGN5NTFjMkZuWlNBaFBUMGdTSElnSmlZZ0tHVXVkWE5oWjJVZ1BTQjBhR2x6TG5WellXZGxLU3dnS0hSb2FYTXVkWEJrWVhSbFVtRnVaMlV1YjJabWMyVjBJQ0U5UFNBd0lIeDhJSFJvYVhNdWRYQmtZWFJsVW1GdVoyVXVZMjkxYm5RZ0lUMDlJQzB4S1NBbUppQW9aUzUxY0dSaGRHVlNZVzVuWlNBOUlIUm9hWE11ZFhCa1lYUmxVbUZ1WjJVcExDQmxPd29nSUNBZ2ZRcDlMQ0JSYkNBOUlHTnNZWE56SUdWNGRHVnVaSE1nWlhRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYmlsN0NpQWdJQ0FnSUNBZ2MzVndaWElvYm1WM0lFbHVkRGhCY25KaGVTaGxLU3dnZEN3Z2JpazdDaUFnSUNCOUNuMHNJR3BzSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJsZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWh1WlhjZ1ZXbHVkRGhCY25KaGVTaGxLU3dnZEN3Z2JpazdDaUFnSUNCOUNuMHNJR1ZvSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJsZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWh1WlhjZ1ZXbHVkRGhEYkdGdGNHVmtRWEp5WVhrb1pTa3NJSFFzSUc0cE93b2dJQ0FnZlFwOUxDQjBhQ0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdaWFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaWw3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9ibVYzSUVsdWRERTJRWEp5WVhrb1pTa3NJSFFzSUc0cE93b2dJQ0FnZlFwOUxDQmFjaUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdaWFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaWw3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9ibVYzSUZWcGJuUXhOa0Z5Y21GNUtHVXBMQ0IwTENCdUtUc0tJQ0FnSUgwS2ZTd2dibWdnUFNCamJHRnpjeUJsZUhSbGJtUnpJR1YwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLRzVsZHlCSmJuUXpNa0Z5Y21GNUtHVXBMQ0IwTENCdUtUc0tJQ0FnSUgwS2ZTd2dTbklnUFNCamJHRnpjeUJsZUhSbGJtUnpJR1YwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLRzVsZHlCVmFXNTBNekpCY25KaGVTaGxLU3dnZEN3Z2JpazdDaUFnSUNCOUNuMHNJR2xvSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJsZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWh1WlhjZ1ZXbHVkREUyUVhKeVlYa29aU2tzSUhRc0lHNHBMQ0IwYUdsekxtbHpSbXh2WVhReE5rSjFabVpsY2tGMGRISnBZblYwWlNBOUlDRXdPd29nSUNBZ2ZRb2dJQ0FnWjJWMFdDaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0I0Y3loMGFHbHpMbUZ5Y21GNVcyVWdLaUIwYUdsekxtbDBaVzFUYVhwbFhTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNhWHBsWkNBbUppQW9kQ0E5SUU5MEtIUXNJSFJvYVhNdVlYSnlZWGtwS1N3Z2REc0tJQ0FnSUgwS0lDQWdJSE5sZEZnb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNXZjbTFoYkdsNlpXUWdKaVlnS0hRZ1BTQkNaU2gwTENCMGFHbHpMbUZ5Y21GNUtTa3NJSFJvYVhNdVlYSnlZWGxiWlNBcUlIUm9hWE11YVhSbGJWTnBlbVZkSUQwZ1RuUW9kQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSWktHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSGh6S0hSb2FYTXVZWEp5WVhsYlpTQXFJSFJvYVhNdWFYUmxiVk5wZW1VZ0t5QXhYU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJtOXliV0ZzYVhwbFpDQW1KaUFvZENBOUlFOTBLSFFzSUhSb2FYTXVZWEp5WVhrcEtTd2dkRHNLSUNBZ0lIMEtJQ0FnSUhObGRGa29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTV2Y20xaGJHbDZaV1FnSmlZZ0tIUWdQU0JDWlNoMExDQjBhR2x6TG1GeWNtRjVLU2tzSUhSb2FYTXVZWEp5WVhsYlpTQXFJSFJvYVhNdWFYUmxiVk5wZW1VZ0t5QXhYU0E5SUU1MEtIUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaMlYwV2lobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjRjeWgwYUdsekxtRnljbUY1VzJVZ0tpQjBhR2x6TG1sMFpXMVRhWHBsSUNzZ01sMHBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmNtMWhiR2w2WldRZ0ppWWdLSFFnUFNCUGRDaDBMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUTdDaUFnSUNCOUNpQWdJQ0J6WlhSYUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViM0p0WVd4cGVtVmtJQ1ltSUNoMElEMGdRbVVvZEN3Z2RHaHBjeTVoY25KaGVTa3BMQ0IwYUdsekxtRnljbUY1VzJVZ0tpQjBhR2x6TG1sMFpXMVRhWHBsSUNzZ01sMGdQU0JPZENoMEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHZGxkRmNvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2VITW9kR2hwY3k1aGNuSmhlVnRsSUNvZ2RHaHBjeTVwZEdWdFUybDZaU0FySUROZEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXeHBlbVZrSUNZbUlDaDBJRDBnVDNRb2RDd2dkR2hwY3k1aGNuSmhlU2twTENCME93b2dJQ0FnZlFvZ0lDQWdjMlYwVnlobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJtOXliV0ZzYVhwbFpDQW1KaUFvZENBOUlFSmxLSFFzSUhSb2FYTXVZWEp5WVhrcEtTd2dkR2hwY3k1aGNuSmhlVnRsSUNvZ2RHaHBjeTVwZEdWdFUybDZaU0FySUROZElEMGdUblFvZENrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUllXU2hsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1VnS2owZ2RHaHBjeTVwZEdWdFUybDZaU3dnZEdocGN5NXViM0p0WVd4cGVtVmtJQ1ltSUNoMElEMGdRbVVvZEN3Z2RHaHBjeTVoY25KaGVTa3NJRzRnUFNCQ1pTaHVMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUm9hWE11WVhKeVlYbGJaU0FySURCZElEMGdUblFvZENrc0lIUm9hWE11WVhKeVlYbGJaU0FySURGZElEMGdUblFvYmlrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUllXVm9vWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbElDbzlJSFJvYVhNdWFYUmxiVk5wZW1Vc0lIUm9hWE11Ym05eWJXRnNhWHBsWkNBbUppQW9kQ0E5SUVKbEtIUXNJSFJvYVhNdVlYSnlZWGtwTENCdUlEMGdRbVVvYml3Z2RHaHBjeTVoY25KaGVTa3NJR2tnUFNCQ1pTaHBMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUm9hWE11WVhKeVlYbGJaU0FySURCZElEMGdUblFvZENrc0lIUm9hWE11WVhKeVlYbGJaU0FySURGZElEMGdUblFvYmlrc0lIUm9hWE11WVhKeVlYbGJaU0FySURKZElEMGdUblFvYVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUllXVnBYS0dVc0lIUXNJRzRzSUdrc0lISXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaU0FxUFNCMGFHbHpMbWwwWlcxVGFYcGxMQ0IwYUdsekxtNXZjbTFoYkdsNlpXUWdKaVlnS0hRZ1BTQkNaU2gwTENCMGFHbHpMbUZ5Y21GNUtTd2diaUE5SUVKbEtHNHNJSFJvYVhNdVlYSnlZWGtwTENCcElEMGdRbVVvYVN3Z2RHaHBjeTVoY25KaGVTa3NJSElnUFNCQ1pTaHlMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUm9hWE11WVhKeVlYbGJaU0FySURCZElEMGdUblFvZENrc0lIUm9hWE11WVhKeVlYbGJaU0FySURGZElEMGdUblFvYmlrc0lIUm9hWE11WVhKeVlYbGJaU0FySURKZElEMGdUblFvYVNrc0lIUm9hWE11WVhKeVlYbGJaU0FySUROZElEMGdUblFvY2lrc0lIUm9hWE03Q2lBZ0lDQjlDbjBzSUhabElEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCbGRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lodVpYY2dSbXh2WVhRek1rRnljbUY1S0dVcExDQjBMQ0J1S1RzS0lDQWdJSDBLZlN3Z2MyZ2dQU0JqYkdGemN5QmxlSFJsYm1SeklHVjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHBld29nSUNBZ0lDQWdJSE4xY0dWeUtHNWxkeUJHYkc5aGREWTBRWEp5WVhrb1pTa3NJSFFzSUc0cE93b2dJQ0FnZlFwOUxDQnRjQ0E5SURBc0lFZDBJRDBnYm1WM0lIcGxMQ0JaWVNBOUlHNWxkeUJLWlN3Z1ZHa2dQU0J1WlhjZ1FTd2dWblFnUFNCdVpYY2dVWFFzSUhWeklEMGdibVYzSUZGMExDQjRkQ0E5SUc1bGR5QkJMQ0JIWlNBOUlHTnNZWE56SUhNeElHVjRkR1Z1WkhNZ2MyNGdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpRblZtWm1WeVIyVnZiV1YwY25rZ1BTQWhNQ3dnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIUm9hWE1zSUNKcFpDSXNJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUcxd0t5c0tJQ0FnSUNBZ0lDQjlLU3dnZEdocGN5NTFkV2xrSUQwZ2EzUW9LU3dnZEdocGN5NXVZVzFsSUQwZ0lpSXNJSFJvYVhNdWRIbHdaU0E5SUNKQ2RXWm1aWEpIWlc5dFpYUnllU0lzSUhSb2FYTXVhVzVrWlhnZ1BTQnVkV3hzTENCMGFHbHpMbUYwZEhKcFluVjBaWE1nUFNCN2ZTd2dkR2hwY3k1dGIzSndhRUYwZEhKcFluVjBaWE1nUFNCN2ZTd2dkR2hwY3k1dGIzSndhRlJoY21kbGRITlNaV3hoZEdsMlpTQTlJQ0V4TENCMGFHbHpMbWR5YjNWd2N5QTlJRnRkTENCMGFHbHpMbUp2ZFc1a2FXNW5RbTk0SUQwZ2JuVnNiQ3dnZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlNBOUlHNTFiR3dzSUhSb2FYTXVaSEpoZDFKaGJtZGxJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZERvZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5MWJuUTZJREVnTHlBd0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1MWMyVnlSR0YwWVNBOUlIdDlPd29nSUNBZ2ZRb2dJQ0FnWjJWMFNXNWtaWGdvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhVzVrWlhnN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJKYm1SbGVDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRUZ5Y21GNUxtbHpRWEp5WVhrb1pTa2dQeUIwYUdsekxtbHVaR1Y0SUQwZ2JtVjNJQ2hOWkNobEtTQS9JRXB5SURvZ1duSXBLR1VzSURFcElEb2dkR2hwY3k1cGJtUmxlQ0E5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUkJkSFJ5YVdKMWRHVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRjBkSEpwWW5WMFpYTmJaVjA3Q2lBZ0lDQjlDaUFnSUNCelpYUkJkSFJ5YVdKMWRHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUYwZEhKcFluVjBaWE5iWlYwZ1BTQjBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaR1ZzWlhSbFFYUjBjbWxpZFhSbEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaR1ZzWlhSbElIUm9hWE11WVhSMGNtbGlkWFJsYzF0bFhTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHaGhjMEYwZEhKcFluVjBaU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWFIwY21saWRYUmxjMXRsWFNBaFBUMGdkbTlwWkNBd093b2dJQ0FnZlFvZ0lDQWdZV1JrUjNKdmRYQW9aU3dnZEN3Z2JpQTlJREFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbWR5YjNWd2N5NXdkWE5vS0hzS0lDQWdJQ0FnSUNBZ0lDQWdjM1JoY25RNklHVXNDaUFnSUNBZ0lDQWdJQ0FnSUdOdmRXNTBPaUIwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJsY21saGJFbHVaR1Y0T2lCdUNpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNCOUNpQWdJQ0JqYkdWaGNrZHliM1Z3Y3lncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1keWIzVndjeUE5SUZ0ZE93b2dJQ0FnZlFvZ0lDQWdjMlYwUkhKaGQxSmhibWRsS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtUnlZWGRTWVc1blpTNXpkR0Z5ZENBOUlHVXNJSFJvYVhNdVpISmhkMUpoYm1kbExtTnZkVzUwSUQwZ2REc0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVRXRjBjbWw0TkNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1GMGRISnBZblYwWlhNdWNHOXphWFJwYjI0N0NpQWdJQ0FnSUNBZ2RDQWhQVDBnZG05cFpDQXdJQ1ltSUNoMExtRndjR3g1VFdGMGNtbDROQ2hsS1N3Z2RDNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0tUc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WVhSMGNtbGlkWFJsY3k1dWIzSnRZV3c3Q2lBZ0lDQWdJQ0FnYVdZZ0tHNGdJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHNWxkeUJJWlNncExtZGxkRTV2Y20xaGJFMWhkSEpwZUNobEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYmk1aGNIQnNlVTV2Y20xaGJFMWhkSEpwZUNoeUtTd2diaTV1WldWa2MxVndaR0YwWlNBOUlDRXdPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdVlYUjBjbWxpZFhSbGN5NTBZVzVuWlc1ME93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCcElDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWRISmhibk5tYjNKdFJHbHlaV04wYVc5dUtHVXBMQ0JwTG01bFpXUnpWWEJrWVhSbElEMGdJVEFwTENCMGFHbHpMbUp2ZFc1a2FXNW5RbTk0SUNFOVBTQnVkV3hzSUNZbUlIUm9hWE11WTI5dGNIVjBaVUp2ZFc1a2FXNW5RbTk0S0Nrc0lIUm9hWE11WW05MWJtUnBibWRUY0dobGNtVWdJVDA5SUc1MWJHd2dKaVlnZEdocGN5NWpiMjF3ZFhSbFFtOTFibVJwYm1kVGNHaGxjbVVvS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGd2NHeDVVWFZoZEdWeWJtbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVkMExtMWhhMlZTYjNSaGRHbHZia1p5YjIxUmRXRjBaWEp1YVc5dUtHVXBMQ0IwYUdsekxtRndjR3g1VFdGMGNtbDROQ2hIZENrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeWIzUmhkR1ZZS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1IzUXViV0ZyWlZKdmRHRjBhVzl1V0NobEtTd2dkR2hwY3k1aGNIQnNlVTFoZEhKcGVEUW9SM1FwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnY205MFlYUmxXU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVkMExtMWhhMlZTYjNSaGRHbHZibGtvWlNrc0lIUm9hWE11WVhCd2JIbE5ZWFJ5YVhnMEtFZDBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSEp2ZEdGMFpWb29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJIZEM1dFlXdGxVbTkwWVhScGIyNWFLR1VwTENCMGFHbHpMbUZ3Y0d4NVRXRjBjbWw0TkNoSGRDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBjbUZ1YzJ4aGRHVW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQkhkQzV0WVd0bFZISmhibk5zWVhScGIyNG9aU3dnZEN3Z2Jpa3NJSFJvYVhNdVlYQndiSGxOWVhSeWFYZzBLRWQwS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOallXeGxLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdSM1F1YldGclpWTmpZV3hsS0dVc0lIUXNJRzRwTENCMGFHbHpMbUZ3Y0d4NVRXRjBjbWw0TkNoSGRDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnNiMjlyUVhRb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQlpZUzVzYjI5clFYUW9aU2tzSUZsaExuVndaR0YwWlUxaGRISnBlQ2dwTENCMGFHbHpMbUZ3Y0d4NVRXRjBjbWw0TkNoWllTNXRZWFJ5YVhncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyVnVkR1Z5S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU52YlhCMWRHVkNiM1Z1WkdsdVowSnZlQ2dwTENCMGFHbHpMbUp2ZFc1a2FXNW5RbTk0TG1kbGRFTmxiblJsY2loVWFTa3VibVZuWVhSbEtDa3NJSFJvYVhNdWRISmhibk5zWVhSbEtGUnBMbmdzSUZScExua3NJRlJwTG5vcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbkp2YlZCdmFXNTBjeWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3TENCcElEMGdaUzVzWlc1bmRHZzdJRzRnUENCcE95QnVLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHVmJibDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUXVjSFZ6YUNoeUxuZ3NJSEl1ZVN3Z2NpNTZJSHg4SURBcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUhabEtIUXNJRE1wS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOdmJYQjFkR1ZDYjNWdVpHbHVaMEp2ZUNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1KdmRXNWthVzVuUW05NElEMDlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxtSnZkVzVrYVc1blFtOTRJRDBnYm1WM0lGRjBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVlYUjBjbWxpZFhSbGN5NXdiM05wZEdsdmJpd2dkQ0E5SUhSb2FYTXViVzl5Y0doQmRIUnlhV0oxZEdWekxuQnZjMmwwYVc5dU93b2dJQ0FnSUNBZ0lHbG1JQ2hsSUNZbUlHVXVhWE5IVEVKMVptWmxja0YwZEhKcFluVjBaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NkVVNGSkZSUzVDZFdabVpYSkhaVzl0WlhSeWVTNWpiMjF3ZFhSbFFtOTFibVJwYm1kQ2IzZ29LVG9nUjB4Q2RXWm1aWEpCZEhSeWFXSjFkR1VnY21WeGRXbHlaWE1nWVNCdFlXNTFZV3dnWW05MWJtUnBibWNnWW05NExpQkJiSFJsY201aGRHbDJaV3g1SUhObGRDQWliV1Z6YUM1bWNuVnpkSFZ0UTNWc2JHVmtJaUIwYnlBaVptRnNjMlVpTGljc0lIUm9hWE1wTENCMGFHbHpMbUp2ZFc1a2FXNW5RbTk0TG5ObGRDaHVaWGNnUVNndE1TQXZJREFzSUMweElDOGdNQ3dnTFRFZ0x5QXdLU3dnYm1WM0lFRW9NU0F2SURBc0lERWdMeUF3TENBeElDOGdNQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2hsSUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WW05MWJtUnBibWRDYjNndWMyVjBSbkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2hsS1N3Z2RDa2dabTl5S0d4bGRDQnVJRDBnTUN3Z2FTQTlJSFF1YkdWdVozUm9PeUJ1SUR3Z2FUc2diaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnZEZ0dVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGWjBMbk5sZEVaeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb2Npa3NJSFJvYVhNdWJXOXljR2hVWVhKblpYUnpVbVZzWVhScGRtVWdQeUFvZUhRdVlXUmtWbVZqZEc5eWN5aDBhR2x6TG1KdmRXNWthVzVuUW05NExtMXBiaXdnVm5RdWJXbHVLU3dnZEdocGN5NWliM1Z1WkdsdVowSnZlQzVsZUhCaGJtUkNlVkJ2YVc1MEtIaDBLU3dnZUhRdVlXUmtWbVZqZEc5eWN5aDBhR2x6TG1KdmRXNWthVzVuUW05NExtMWhlQ3dnVm5RdWJXRjRLU3dnZEdocGN5NWliM1Z1WkdsdVowSnZlQzVsZUhCaGJtUkNlVkJ2YVc1MEtIaDBLU2tnT2lBb2RHaHBjeTVpYjNWdVpHbHVaMEp2ZUM1bGVIQmhibVJDZVZCdmFXNTBLRlowTG0xcGJpa3NJSFJvYVhNdVltOTFibVJwYm1kQ2IzZ3VaWGh3WVc1a1FubFFiMmx1ZENoV2RDNXRZWGdwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBnWld4elpTQjBhR2x6TG1KdmRXNWthVzVuUW05NExtMWhhMlZGYlhCMGVTZ3BPd29nSUNBZ0lDQWdJQ2hwYzA1aFRpaDBhR2x6TG1KdmRXNWthVzVuUW05NExtMXBiaTU0S1NCOGZDQnBjMDVoVGloMGFHbHpMbUp2ZFc1a2FXNW5RbTk0TG0xcGJpNTVLU0I4ZkNCcGMwNWhUaWgwYUdsekxtSnZkVzVrYVc1blFtOTRMbTFwYmk1NktTa2dKaVlnWTI5dWMyOXNaUzVsY25KdmNpZ25WRWhTUlVVdVFuVm1abVZ5UjJWdmJXVjBjbmt1WTI5dGNIVjBaVUp2ZFc1a2FXNW5RbTk0S0NrNklFTnZiWEIxZEdWa0lHMXBiaTl0WVhnZ2FHRjJaU0JPWVU0Z2RtRnNkV1Z6TGlCVWFHVWdJbkJ2YzJsMGFXOXVJaUJoZEhSeWFXSjFkR1VnYVhNZ2JHbHJaV3g1SUhSdklHaGhkbVVnVG1GT0lIWmhiSFZsY3k0bkxDQjBhR2x6S1RzS0lDQWdJSDBLSUNBZ0lHTnZiWEIxZEdWQ2IzVnVaR2x1WjFOd2FHVnlaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbUp2ZFc1a2FXNW5VM0JvWlhKbElEMDlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxtSnZkVzVrYVc1blUzQm9aWEpsSUQwZ2JtVjNJRmwwS1RzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVZWFIwY21saWRYUmxjeTV3YjNOcGRHbHZiaXdnZENBOUlIUm9hWE11Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVPd29nSUNBZ0lDQWdJR2xtSUNobElDWW1JR1V1YVhOSFRFSjFabVpsY2tGMGRISnBZblYwWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZFVTRkpGUlM1Q2RXWm1aWEpIWlc5dFpYUnllUzVqYjIxd2RYUmxRbTkxYm1ScGJtZFRjR2hsY21Vb0tUb2dSMHhDZFdabVpYSkJkSFJ5YVdKMWRHVWdjbVZ4ZFdseVpYTWdZU0J0WVc1MVlXd2dZbTkxYm1ScGJtY2djM0JvWlhKbExpQkJiSFJsY201aGRHbDJaV3g1SUhObGRDQWliV1Z6YUM1bWNuVnpkSFZ0UTNWc2JHVmtJaUIwYnlBaVptRnNjMlVpTGljc0lIUm9hWE1wTENCMGFHbHpMbUp2ZFc1a2FXNW5VM0JvWlhKbExuTmxkQ2h1WlhjZ1FTd2dNU0F2SURBcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNobEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlM1alpXNTBaWEk3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hXZEM1elpYUkdjbTl0UW5WbVptVnlRWFIwY21saWRYUmxLR1VwTENCMEtTQm1iM0lvYkdWMElISWdQU0F3TENCaElEMGdkQzVzWlc1bmRHZzdJSElnUENCaE95QnlLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0IwVzNKZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYTXVjMlYwUm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNodktTd2dkR2hwY3k1dGIzSndhRlJoY21kbGRITlNaV3hoZEdsMlpTQS9JQ2g0ZEM1aFpHUldaV04wYjNKektGWjBMbTFwYml3Z2RYTXViV2x1S1N3Z1ZuUXVaWGh3WVc1a1FubFFiMmx1ZENoNGRDa3NJSGgwTG1Ga1pGWmxZM1J2Y25Nb1ZuUXViV0Y0TENCMWN5NXRZWGdwTENCV2RDNWxlSEJoYm1SQ2VWQnZhVzUwS0hoMEtTa2dPaUFvVm5RdVpYaHdZVzVrUW5sUWIybHVkQ2gxY3k1dGFXNHBMQ0JXZEM1bGVIQmhibVJDZVZCdmFXNTBLSFZ6TG0xaGVDa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJRlowTG1kbGRFTmxiblJsY2lodUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0F3T3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElISWdQU0F3TENCaElEMGdaUzVqYjNWdWREc2djaUE4SUdFN0lISXJLeWw0ZEM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHVXNJSElwTENCcElEMGdUV0YwYUM1dFlYZ29hU3dnYmk1a2FYTjBZVzVqWlZSdlUzRjFZWEpsWkNoNGRDa3BPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9kQ2tnWm05eUtHeGxkQ0J5SUQwZ01Dd2dZU0E5SUhRdWJHVnVaM1JvT3lCeUlEd2dZVHNnY2lzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2RGdHlYU3dnWXlBOUlIUm9hWE11Ylc5eWNHaFVZWEpuWlhSelVtVnNZWFJwZG1VN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUd3Z1BTQXdMQ0JvSUQwZ2J5NWpiM1Z1ZERzZ2JDQThJR2c3SUd3ckt5bDRkQzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0c4c0lHd3BMQ0JqSUNZbUlDaFVhUzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0dVc0lHd3BMQ0I0ZEM1aFpHUW9WR2twS1N3Z2FTQTlJRTFoZEdndWJXRjRLR2tzSUc0dVpHbHpkR0Z1WTJWVWIxTnhkV0Z5WldRb2VIUXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtSnZkVzVrYVc1blUzQm9aWEpsTG5KaFpHbDFjeUE5SUUxaGRHZ3VjM0Z5ZENocEtTd2dhWE5PWVU0b2RHaHBjeTVpYjNWdVpHbHVaMU53YUdWeVpTNXlZV1JwZFhNcElDWW1JR052Ym5OdmJHVXVaWEp5YjNJb0oxUklVa1ZGTGtKMVptWmxja2RsYjIxbGRISjVMbU52YlhCMWRHVkNiM1Z1WkdsdVoxTndhR1Z5WlNncE9pQkRiMjF3ZFhSbFpDQnlZV1JwZFhNZ2FYTWdUbUZPTGlCVWFHVWdJbkJ2YzJsMGFXOXVJaUJoZEhSeWFXSjFkR1VnYVhNZ2JHbHJaV3g1SUhSdklHaGhkbVVnVG1GT0lIWmhiSFZsY3k0bkxDQjBhR2x6S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmpiMjF3ZFhSbFZHRnVaMlZ1ZEhNb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG1sdVpHVjRMQ0IwSUQwZ2RHaHBjeTVoZEhSeWFXSjFkR1Z6T3dvZ0lDQWdJQ0FnSUdsbUlDaGxJRDA5UFNCdWRXeHNJSHg4SUhRdWNHOXphWFJwYjI0Z1BUMDlJSFp2YVdRZ01DQjhmQ0IwTG01dmNtMWhiQ0E5UFQwZ2RtOXBaQ0F3SUh4OElIUXVkWFlnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1Q2RXWm1aWEpIWlc5dFpYUnllVG9nTG1OdmJYQjFkR1ZVWVc1blpXNTBjeWdwSUdaaGFXeGxaQzRnVFdsemMybHVaeUJ5WlhGMWFYSmxaQ0JoZEhSeWFXSjFkR1Z6SUNocGJtUmxlQ3dnY0c5emFYUnBiMjRzSUc1dmNtMWhiQ0J2Y2lCMWRpa2lLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdVdVlYSnlZWGtzSUdrZ1BTQjBMbkJ2YzJsMGFXOXVMbUZ5Y21GNUxDQnlJRDBnZEM1dWIzSnRZV3d1WVhKeVlYa3NJR0VnUFNCMExuVjJMbUZ5Y21GNUxDQnZJRDBnYVM1c1pXNW5kR2dnTHlBek93b2dJQ0FnSUNBZ0lIUm9hWE11YUdGelFYUjBjbWxpZFhSbEtDSjBZVzVuWlc1MElpa2dQVDA5SUNFeElDWW1JSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ0owWVc1blpXNTBJaXdnYm1WM0lHVjBLRzVsZHlCR2JHOWhkRE15UVhKeVlYa29OQ0FxSUc4cExDQTBLU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHTWdQU0IwYUdsekxtZGxkRUYwZEhKcFluVjBaU2dpZEdGdVoyVnVkQ0lwTG1GeWNtRjVMQ0JzSUQwZ1cxMHNJR2dnUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGUWdQU0F3T3lCVUlEd2dienNnVkNzcktXeGJWRjBnUFNCdVpYY2dRU3dnYUZ0VVhTQTlJRzVsZHlCQk93b2dJQ0FnSUNBZ0lHeGxkQ0IxSUQwZ2JtVjNJRUVzSUdRZ1BTQnVaWGNnUVN3Z1ppQTlJRzVsZHlCQkxDQnRJRDBnYm1WM0lGb3NJRjhnUFNCdVpYY2dXaXdnWnlBOUlHNWxkeUJhTENCd0lEMGdibVYzSUVFc0lIWWdQU0J1WlhjZ1FUc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQjRLRlFzSUU4c0lGa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RTNW1jbTl0UVhKeVlYa29hU3dnVkNBcUlETXBMQ0JrTG1aeWIyMUJjbkpoZVNocExDQlBJQ29nTXlrc0lHWXVabkp2YlVGeWNtRjVLR2tzSUZrZ0tpQXpLU3dnYlM1bWNtOXRRWEp5WVhrb1lTd2dWQ0FxSURJcExDQmZMbVp5YjIxQmNuSmhlU2hoTENCUElDb2dNaWtzSUdjdVpuSnZiVUZ5Y21GNUtHRXNJRmtnS2lBeUtTd2daQzV6ZFdJb2RTa3NJR1l1YzNWaUtIVXBMQ0JmTG5OMVlpaHRLU3dnWnk1emRXSW9iU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0FrSUQwZ01TQXZJQ2hmTG5nZ0tpQm5MbmtnTFNCbkxuZ2dLaUJmTG5rcE93b2dJQ0FnSUNBZ0lDQWdJQ0JwYzBacGJtbDBaU2drS1NBbUppQW9jQzVqYjNCNUtHUXBMbTExYkhScGNHeDVVMk5oYkdGeUtHY3VlU2t1WVdSa1UyTmhiR1ZrVm1WamRHOXlLR1lzSUMxZkxua3BMbTExYkhScGNHeDVVMk5oYkdGeUtDUXBMQ0IyTG1OdmNIa29aaWt1YlhWc2RHbHdiSGxUWTJGc1lYSW9YeTU0S1M1aFpHUlRZMkZzWldSV1pXTjBiM0lvWkN3Z0xXY3VlQ2t1YlhWc2RHbHdiSGxUWTJGc1lYSW9KQ2tzSUd4YlZGMHVZV1JrS0hBcExDQnNXMDlkTG1Ga1pDaHdLU3dnYkZ0WlhTNWhaR1FvY0Nrc0lHaGJWRjB1WVdSa0tIWXBMQ0JvVzA5ZExtRmtaQ2gyS1N3Z2FGdFpYUzVoWkdRb2Rpa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2VTQTlJSFJvYVhNdVozSnZkWEJ6T3dvZ0lDQWdJQ0FnSUhrdWJHVnVaM1JvSUQwOVBTQXdJQ1ltSUNoNUlEMGdXd29nSUNBZ0lDQWdJQ0FnSUNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRG9nTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmRXNTBPaUJ1TG14bGJtZDBhQW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1hTazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQlVJRDBnTUN3Z1R5QTlJSGt1YkdWdVozUm9PeUJVSUR3Z1R6c2dLeXRVS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZrZ1BTQjVXMVJkTENBa0lEMGdXUzV6ZEdGeWRDd2dWU0E5SUZrdVkyOTFiblE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2VpQTlJQ1FzSUhFZ1BTQWtJQ3NnVlRzZ2VpQThJSEU3SUhvZ0t6MGdNeWw0S0c1YmVpQXJJREJkTENCdVczb2dLeUF4WFN3Z2JsdDZJQ3NnTWwwcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnWWlBOUlHNWxkeUJCTENCM0lEMGdibVYzSUVFc0lGSWdQU0J1WlhjZ1FTd2dTU0E5SUc1bGR5QkJPd29nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJRTBvVkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JTTG1aeWIyMUJjbkpoZVNoeUxDQlVJQ29nTXlrc0lFa3VZMjl3ZVNoU0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFOGdQU0JzVzFSZE93b2dJQ0FnSUNBZ0lDQWdJQ0JpTG1OdmNIa29UeWtzSUdJdWMzVmlLRkl1YlhWc2RHbHdiSGxUWTJGc1lYSW9VaTVrYjNRb1R5a3BLUzV1YjNKdFlXeHBlbVVvS1N3Z2R5NWpjbTl6YzFabFkzUnZjbk1vU1N3Z1R5azdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQWtJRDBnZHk1a2IzUW9hRnRVWFNrZ1BDQXdJRDhnTFRFZ09pQXhPd29nSUNBZ0lDQWdJQ0FnSUNCalcxUWdLaUEwWFNBOUlHSXVlQ3dnWTF0VUlDb2dOQ0FySURGZElEMGdZaTU1TENCalcxUWdLaUEwSUNzZ01sMGdQU0JpTG5vc0lHTmJWQ0FxSURRZ0t5QXpYU0E5SUNRN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ZDQTlJREFzSUU4Z1BTQjVMbXhsYm1kMGFEc2dWQ0E4SUU4N0lDc3JWQ2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JaSUQwZ2VWdFVYU3dnSkNBOUlGa3VjM1JoY25Rc0lGVWdQU0JaTG1OdmRXNTBPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhvZ1BTQWtMQ0J4SUQwZ0pDQXJJRlU3SUhvZ1BDQnhPeUI2SUNzOUlETXBUU2h1VzNvZ0t5QXdYU2tzSUUwb2JsdDZJQ3NnTVYwcExDQk5LRzViZWlBcklESmRLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCamIyMXdkWFJsVm1WeWRHVjRUbTl5YldGc2N5Z3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdWFXNWtaWGdzSUhRZ1BTQjBhR2x6TG1kbGRFRjBkSEpwWW5WMFpTZ2ljRzl6YVhScGIyNGlLVHNLSUNBZ0lDQWdJQ0JwWmlBb2RDQWhQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVuWlhSQmRIUnlhV0oxZEdVb0ltNXZjbTFoYkNJcE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JpQTlQVDBnZG05cFpDQXdLU0J1SUQwZ2JtVjNJR1YwS0c1bGR5QkdiRzloZERNeVFYSnlZWGtvZEM1amIzVnVkQ0FxSURNcExDQXpLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW01dmNtMWhiQ0lzSUc0cE93b2dJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHWnZjaWhzWlhRZ1pDQTlJREFzSUdZZ1BTQnVMbU52ZFc1ME95QmtJRHdnWmpzZ1pDc3JLVzR1YzJWMFdGbGFLR1FzSURBc0lEQXNJREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHNWxkeUJCTENCeUlEMGdibVYzSUVFc0lHRWdQU0J1WlhjZ1FTd2dieUE5SUc1bGR5QkJMQ0JqSUQwZ2JtVjNJRUVzSUd3Z1BTQnVaWGNnUVN3Z2FDQTlJRzVsZHlCQkxDQjFJRDBnYm1WM0lFRTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxLU0JtYjNJb2JHVjBJR1FnUFNBd0xDQm1JRDBnWlM1amIzVnVkRHNnWkNBOElHWTdJR1FnS3owZ015bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYlNBOUlHVXVaMlYwV0Noa0lDc2dNQ2tzSUY4Z1BTQmxMbWRsZEZnb1pDQXJJREVwTENCbklEMGdaUzVuWlhSWUtHUWdLeUF5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaDBMQ0J0S1N3Z2NpNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLSFFzSUY4cExDQmhMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvZEN3Z1p5a3NJR2d1YzNWaVZtVmpkRzl5Y3loaExDQnlLU3dnZFM1emRXSldaV04wYjNKektHa3NJSElwTENCb0xtTnliM056S0hVcExDQnZMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvYml3Z2JTa3NJR011Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNodUxDQmZLU3dnYkM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHNHNJR2NwTENCdkxtRmtaQ2hvS1N3Z1l5NWhaR1FvYUNrc0lHd3VZV1JrS0dncExDQnVMbk5sZEZoWldpaHRMQ0J2TG5nc0lHOHVlU3dnYnk1NktTd2diaTV6WlhSWVdWb29YeXdnWXk1NExDQmpMbmtzSUdNdWVpa3NJRzR1YzJWMFdGbGFLR2NzSUd3dWVDd2diQzU1TENCc0xub3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ1ptOXlLR3hsZENCa0lEMGdNQ3dnWmlBOUlIUXVZMjkxYm5RN0lHUWdQQ0JtT3lCa0lDczlJRE1wYVM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtIUXNJR1FnS3lBd0tTd2djaTVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0hRc0lHUWdLeUF4S1N3Z1lTNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLSFFzSUdRZ0t5QXlLU3dnYUM1emRXSldaV04wYjNKektHRXNJSElwTENCMUxuTjFZbFpsWTNSdmNuTW9hU3dnY2lrc0lHZ3VZM0p2YzNNb2RTa3NJRzR1YzJWMFdGbGFLR1FnS3lBd0xDQm9MbmdzSUdndWVTd2dhQzU2S1N3Z2JpNXpaWFJZV1Zvb1pDQXJJREVzSUdndWVDd2dhQzU1TENCb0xub3BMQ0J1TG5ObGRGaFpXaWhrSUNzZ01pd2dhQzU0TENCb0xua3NJR2d1ZWlrN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJtOXliV0ZzYVhwbFRtOXliV0ZzY3lncExDQnVMbTVsWldSelZYQmtZWFJsSUQwZ0lUQTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnYm05eWJXRnNhWHBsVG05eWJXRnNjeWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVZWFIwY21saWRYUmxjeTV1YjNKdFlXdzdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJR1V1WTI5MWJuUTdJSFFnUENCdU95QjBLeXNwZUhRdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaGxMQ0IwS1N3Z2VIUXVibTl5YldGc2FYcGxLQ2tzSUdVdWMyVjBXRmxhS0hRc0lIaDBMbmdzSUhoMExua3NJSGgwTG5vcE93b2dJQ0FnZlFvZ0lDQWdkRzlPYjI1SmJtUmxlR1ZrS0NrZ2V3b2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHVW9ieXdnWXlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJRzh1WVhKeVlYa3NJR2dnUFNCdkxtbDBaVzFUYVhwbExDQjFJRDBnYnk1dWIzSnRZV3hwZW1Wa0xDQmtJRDBnYm1WM0lHd3VZMjl1YzNSeWRXTjBiM0lvWXk1c1pXNW5kR2dnS2lCb0tTd2daaUE5SURBc0lHMGdQU0F3T3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGOGdQU0F3TENCbklEMGdZeTVzWlc1bmRHZzdJRjhnUENCbk95QmZLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnk1cGMwbHVkR1Z5YkdWaGRtVmtRblZtWm1WeVFYUjBjbWxpZFhSbElEOGdaaUE5SUdOYlgxMGdLaUJ2TG1SaGRHRXVjM1J5YVdSbElDc2dieTV2Wm1aelpYUWdPaUJtSUQwZ1kxdGZYU0FxSUdnN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhBZ1BTQXdPeUJ3SUR3Z2FEc2djQ3NyS1dSYmJTc3JYU0E5SUd4Ylppc3JYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUdWMEtHUXNJR2dzSUhVcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXBibVJsZUNBOVBUMGdiblZzYkNrZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVFuVm1abVZ5UjJWdmJXVjBjbmt1ZEc5T2IyNUpibVJsZUdWa0tDazZJRUoxWm1abGNrZGxiMjFsZEhKNUlHbHpJR0ZzY21WaFpIa2dibTl1TFdsdVpHVjRaV1F1SWlrc0lIUm9hWE03Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0J1WlhjZ2N6RXNJRzRnUFNCMGFHbHpMbWx1WkdWNExtRnljbUY1TENCcElEMGdkR2hwY3k1aGRIUnlhV0oxZEdWek93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2J5QnBiaUJwS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdNZ1BTQnBXMjlkTENCc0lEMGdaU2hqTENCdUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEM1elpYUkJkSFJ5YVdKMWRHVW9ieXdnYkNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHaHBjeTV0YjNKd2FFRjBkSEpwWW5WMFpYTTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnZJR2x1SUhJcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJRnRkTENCc0lEMGdjbHR2WFRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQm9JRDBnTUN3Z2RTQTlJR3d1YkdWdVozUm9PeUJvSUR3Z2RUc2dhQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtJRDBnYkZ0b1hTd2daaUE5SUdVb1pDd2diaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqTG5CMWMyZ29aaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZEM1dGIzSndhRUYwZEhKcFluVjBaWE5iYjEwZ1BTQmpPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwTG0xdmNuQm9WR0Z5WjJWMGMxSmxiR0YwYVhabElEMGdkR2hwY3k1dGIzSndhRlJoY21kbGRITlNaV3hoZEdsMlpUc0tJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlIUm9hWE11WjNKdmRYQnpPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdieUE5SURBc0lHTWdQU0JoTG14bGJtZDBhRHNnYnlBOElHTTdJRzhyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCc0lEMGdZVnR2WFRzS0lDQWdJQ0FnSUNBZ0lDQWdkQzVoWkdSSGNtOTFjQ2hzTG5OMFlYSjBMQ0JzTG1OdmRXNTBMQ0JzTG0xaGRHVnlhV0ZzU1c1a1pYZ3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRHNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdiV1YwWVdSaGRHRTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpsY25OcGIyNDZJRFF1Tml3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ0pDZFdabVpYSkhaVzl0WlhSeWVTSXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5aVzVsY21GMGIzSTZJQ0pDZFdabVpYSkhaVzl0WlhSeWVTNTBiMHBUVDA0aUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUdsbUlDaGxMblYxYVdRZ1BTQjBhR2x6TG5WMWFXUXNJR1V1ZEhsd1pTQTlJSFJvYVhNdWRIbHdaU3dnZEdocGN5NXVZVzFsSUNFOVBTQWlJaUFtSmlBb1pTNXVZVzFsSUQwZ2RHaHBjeTV1WVcxbEtTd2dUMkpxWldOMExtdGxlWE1vZEdocGN5NTFjMlZ5UkdGMFlTa3ViR1Z1WjNSb0lENGdNQ0FtSmlBb1pTNTFjMlZ5UkdGMFlTQTlJSFJvYVhNdWRYTmxja1JoZEdFcExDQjBhR2x6TG5CaGNtRnRaWFJsY25NZ0lUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUhSb2FYTXVjR0Z5WVcxbGRHVnljenNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCc0lHbHVJR01wWTF0c1hTQWhQVDBnZG05cFpDQXdJQ1ltSUNobFcyeGRJRDBnWTF0c1hTazdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbExtUmhkR0VnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJR0YwZEhKcFluVjBaWE02SUh0OUNpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11YVc1a1pYZzdDaUFnSUNBZ0lDQWdkQ0FoUFQwZ2JuVnNiQ0FtSmlBb1pTNWtZWFJoTG1sdVpHVjRJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCMExtRnljbUY1TG1OdmJuTjBjblZqZEc5eUxtNWhiV1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRnljbUY1T2lCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNoMExtRnljbUY1S1FvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVoZEhSeWFXSjFkR1Z6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWXlCcGJpQnVLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCdVcyTmRPd29nSUNBZ0lDQWdJQ0FnSUNCbExtUmhkR0V1WVhSMGNtbGlkWFJsYzF0alhTQTlJR3d1ZEc5S1UwOU9LR1V1WkdGMFlTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCcElEMGdlMzBzSUhJZ1BTQWhNVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR01nYVc0Z2RHaHBjeTV0YjNKd2FFRjBkSEpwWW5WMFpYTXBld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUhSb2FYTXViVzl5Y0doQmRIUnlhV0oxZEdWelcyTmRMQ0JvSUQwZ1cxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZFNBOUlEQXNJR1FnUFNCc0xteGxibWQwYURzZ2RTQThJR1E3SUhVckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlHeGJkVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvTG5CMWMyZ29aaTUwYjBwVFQwNG9aUzVrWVhSaEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdhQzVzWlc1bmRHZ2dQaUF3SUNZbUlDaHBXMk5kSUQwZ2FDd2djaUE5SUNFd0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjaUFtSmlBb1pTNWtZWFJoTG0xdmNuQm9RWFIwY21saWRYUmxjeUE5SUdrc0lHVXVaR0YwWVM1dGIzSndhRlJoY21kbGRITlNaV3hoZEdsMlpTQTlJSFJvYVhNdWJXOXljR2hVWVhKblpYUnpVbVZzWVhScGRtVXBPd29nSUNBZ0lDQWdJR3hsZENCaElEMGdkR2hwY3k1bmNtOTFjSE03Q2lBZ0lDQWdJQ0FnWVM1c1pXNW5kR2dnUGlBd0lDWW1JQ2hsTG1SaGRHRXVaM0p2ZFhCeklEMGdTbE5QVGk1d1lYSnpaU2hLVTA5T0xuTjBjbWx1WjJsbWVTaGhLU2twT3dvZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYnlBaFBUMGdiblZzYkNBbUppQW9aUzVrWVhSaExtSnZkVzVrYVc1blUzQm9aWEpsSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqWlc1MFpYSTZJRzh1WTJWdWRHVnlMblJ2UVhKeVlYa29LU3dLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthWFZ6T2lCdkxuSmhaR2wxY3dvZ0lDQWdJQ0FnSUgwcExDQmxPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0NrdVkyOXdlU2gwYUdsektUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdWFXNWtaWGdnUFNCdWRXeHNMQ0IwYUdsekxtRjBkSEpwWW5WMFpYTWdQU0I3ZlN3Z2RHaHBjeTV0YjNKd2FFRjBkSEpwWW5WMFpYTWdQU0I3ZlN3Z2RHaHBjeTVuY205MWNITWdQU0JiWFN3Z2RHaHBjeTVpYjNWdVpHbHVaMEp2ZUNBOUlHNTFiR3dzSUhSb2FYTXVZbTkxYm1ScGJtZFRjR2hsY21VZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZTMwN0NpQWdJQ0FnSUNBZ2RHaHBjeTV1WVcxbElEMGdaUzV1WVcxbE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1pTNXBibVJsZURzS0lDQWdJQ0FnSUNCdUlDRTlQU0J1ZFd4c0lDWW1JSFJvYVhNdWMyVjBTVzVrWlhnb2JpNWpiRzl1WlNoMEtTazdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQmxMbUYwZEhKcFluVjBaWE03Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JzSUdsdUlHa3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhQ0E5SUdsYmJGMDdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0d3c0lHZ3VZMnh2Ym1Vb2RDa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJR1V1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiQ0JwYmlCeUtYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHZ2dQU0JiWFN3Z2RTQTlJSEpiYkYwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaQ0E5SURBc0lHWWdQU0IxTG14bGJtZDBhRHNnWkNBOElHWTdJR1FyS3lsb0xuQjFjMmdvZFZ0a1hTNWpiRzl1WlNoMEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViVzl5Y0doQmRIUnlhV0oxZEdWelcyeGRJRDBnYURzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RHaHBjeTV0YjNKd2FGUmhjbWRsZEhOU1pXeGhkR2wyWlNBOUlHVXViVzl5Y0doVVlYSm5aWFJ6VW1Wc1lYUnBkbVU3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0JsTG1keWIzVndjenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR3dnUFNBd0xDQm9JRDBnWVM1c1pXNW5kR2c3SUd3Z1BDQm9PeUJzS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RTQTlJR0ZiYkYwN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlXUmtSM0p2ZFhBb2RTNXpkR0Z5ZEN3Z2RTNWpiM1Z1ZEN3Z2RTNXRZWFJsY21saGJFbHVaR1Y0S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCbExtSnZkVzVrYVc1blFtOTRPd29nSUNBZ0lDQWdJRzhnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11WW05MWJtUnBibWRDYjNnZ1BTQnZMbU5zYjI1bEtDa3BPd29nSUNBZ0lDQWdJR3hsZENCaklEMGdaUzVpYjNWdVpHbHVaMU53YUdWeVpUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1l5QWhQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlNBOUlHTXVZMnh2Ym1Vb0tTa3NJSFJvYVhNdVpISmhkMUpoYm1kbExuTjBZWEowSUQwZ1pTNWtjbUYzVW1GdVoyVXVjM1JoY25Rc0lIUm9hWE11WkhKaGQxSmhibWRsTG1OdmRXNTBJRDBnWlM1a2NtRjNVbUZ1WjJVdVkyOTFiblFzSUhSb2FYTXVkWE5sY2tSaGRHRWdQU0JsTG5WelpYSkVZWFJoTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWkdsemNHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbVJwYzNCaGRHTm9SWFpsYm5Rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWlaR2x6Y0c5elpTSUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lIMEtmU3dnY21nZ1BTQnVaWGNnZW1Vc0lIRnVJRDBnYm1WM0lHaHBMQ0JxY3lBOUlHNWxkeUJaZEN3Z1lXZ2dQU0J1WlhjZ1FTd2dkMmtnUFNCdVpYY2dRU3dnUVdrZ1BTQnVaWGNnUVN3Z1Vta2dQU0J1WlhjZ1FTd2dXbUVnUFNCdVpYY2dRU3dnWlhJZ1BTQnVaWGNnUVN3Z2RISWdQU0J1WlhjZ1dpd2dibklnUFNCdVpYY2dXaXdnYVhJZ1BTQnVaWGNnV2l3Z2IyZ2dQU0J1WlhjZ1FTd2dZMmdnUFNCdVpYY2dRU3dnYkdnZ1BTQnVaWGNnUVN3Z2MzSWdQU0J1WlhjZ1FTd2djbklnUFNCdVpYY2dRU3dnVFhRZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVwbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0J1WlhjZ1IyVXNJSFFnUFNCdVpYY2dVMjRwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVhWE5OWlhOb0lEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSk5aWE5vSWl3Z2RHaHBjeTVuWlc5dFpYUnllU0E5SUdVc0lIUm9hWE11YldGMFpYSnBZV3dnUFNCMExDQjBhR2x6TG5Wd1pHRjBaVTF2Y25Cb1ZHRnlaMlYwY3lncE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlN3Z2RDa3NJR1V1Ylc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeklDRTlQU0IyYjJsa0lEQWdKaVlnS0hSb2FYTXViVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6SUQwZ1pTNXRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE11YzJ4cFkyVW9LU2tzSUdVdWJXOXljR2hVWVhKblpYUkVhV04wYVc5dVlYSjVJQ0U5UFNCMmIybGtJREFnSmlZZ0tIUm9hWE11Ylc5eWNHaFVZWEpuWlhSRWFXTjBhVzl1WVhKNUlEMGdUMkpxWldOMExtRnpjMmxuYmloN2ZTd2daUzV0YjNKd2FGUmhjbWRsZEVScFkzUnBiMjVoY25rcEtTd2dkR2hwY3k1dFlYUmxjbWxoYkNBOUlFRnljbUY1TG1selFYSnlZWGtvWlM1dFlYUmxjbWxoYkNrZ1B5QmxMbTFoZEdWeWFXRnNMbk5zYVdObEtDa2dPaUJsTG0xaGRHVnlhV0ZzTENCMGFHbHpMbWRsYjIxbGRISjVJRDBnWlM1blpXOXRaWFJ5ZVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaVTF2Y25Cb1ZHRnlaMlYwY3lncElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WjJWdmJXVjBjbmt1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMQ0J1SUQwZ1QySnFaV04wTG10bGVYTW9kQ2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tHNHViR1Z1WjNSb0lENGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUmJibHN3WFYwN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocElDRTlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpJRDBnVzEwc0lIUm9hWE11Ylc5eWNHaFVZWEpuWlhSRWFXTjBhVzl1WVhKNUlEMGdlMzA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSElnUFNBd0xDQmhJRDBnYVM1c1pXNW5kR2c3SUhJZ1BDQmhPeUJ5S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdklEMGdhVnR5WFM1dVlXMWxJSHg4SUZOMGNtbHVaeWh5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGN5NXdkWE5vS0RBcExDQjBhR2x6TG0xdmNuQm9WR0Z5WjJWMFJHbGpkR2x2Ym1GeWVWdHZYU0E5SUhJN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCblpYUldaWEowWlhoUWIzTnBkR2x2YmlobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxtZGxiMjFsZEhKNUxDQnBJRDBnYmk1aGRIUnlhV0oxZEdWekxuQnZjMmwwYVc5dUxDQnlJRDBnYmk1dGIzSndhRUYwZEhKcFluVjBaWE11Y0c5emFYUnBiMjRzSUdFZ1BTQnVMbTF2Y25Cb1ZHRnlaMlYwYzFKbGJHRjBhWFpsT3dvZ0lDQWdJQ0FnSUhRdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHBMQ0JsS1RzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUhSb2FYTXViVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6T3dvZ0lDQWdJQ0FnSUdsbUlDaHlJQ1ltSUc4cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWlhJdWMyVjBLREFzSURBc0lEQXBPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdNZ1BTQXdMQ0JzSUQwZ2NpNXNaVzVuZEdnN0lHTWdQQ0JzT3lCakt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdnZ1BTQnZXMk5kTENCMUlEMGdjbHRqWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdnZ0lUMDlJREFnSmlZZ0tGcGhMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvZFN3Z1pTa3NJR0VnUHlCbGNpNWhaR1JUWTJGc1pXUldaV04wYjNJb1dtRXNJR2dwSURvZ1pYSXVZV1JrVTJOaGJHVmtWbVZqZEc5eUtGcGhMbk4xWWloMEtTd2dhQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUhRdVlXUmtLR1Z5S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRN0NpQWdJQ0I5Q2lBZ0lDQnlZWGxqWVhOMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVaMlZ2YldWMGNua3NJR2tnUFNCMGFHbHpMbTFoZEdWeWFXRnNMQ0J5SUQwZ2RHaHBjeTV0WVhSeWFYaFhiM0pzWkRzS0lDQWdJQ0FnSUNCcElDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dVltOTFibVJwYm1kVGNHaGxjbVVnUFQwOUlHNTFiR3dnSmlZZ2JpNWpiMjF3ZFhSbFFtOTFibVJwYm1kVGNHaGxjbVVvS1N3Z2FuTXVZMjl3ZVNodUxtSnZkVzVrYVc1blUzQm9aWEpsS1N3Z2FuTXVZWEJ3YkhsTllYUnlhWGcwS0hJcExDQnhiaTVqYjNCNUtHVXVjbUY1S1M1eVpXTmhjM1FvWlM1dVpXRnlLU3dnSVNocWN5NWpiMjUwWVdsdWMxQnZhVzUwS0hGdUxtOXlhV2RwYmlrZ1BUMDlJQ0V4SUNZbUlDaHhiaTVwYm5SbGNuTmxZM1JUY0dobGNtVW9hbk1zSUdGb0tTQTlQVDBnYm5Wc2JDQjhmQ0J4Ymk1dmNtbG5hVzR1WkdsemRHRnVZMlZVYjFOeGRXRnlaV1FvWVdncElENGdLR1V1Wm1GeUlDMGdaUzV1WldGeUtTQXFLaUF5S1NrZ0ppWWdLSEpvTG1OdmNIa29jaWt1YVc1MlpYSjBLQ2tzSUhGdUxtTnZjSGtvWlM1eVlYa3BMbUZ3Y0d4NVRXRjBjbWw0TkNoeWFDa3NJQ0VvYmk1aWIzVnVaR2x1WjBKdmVDQWhQVDBnYm5Wc2JDQW1KaUJ4Ymk1cGJuUmxjbk5sWTNSelFtOTRLRzR1WW05MWJtUnBibWRDYjNncElEMDlQU0FoTVNrZ0ppWWdkR2hwY3k1ZlkyOXRjSFYwWlVsdWRHVnljMlZqZEdsdmJuTW9aU3dnZEN3Z2NXNHBLU2s3Q2lBZ0lDQjlDaUFnSUNCZlkyOXRjSFYwWlVsdWRHVnljMlZqZEdsdmJuTW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJR3hsZENCcExDQnlJRDBnZEdocGN5NW5aVzl0WlhSeWVTd2dZU0E5SUhSb2FYTXViV0YwWlhKcFlXd3NJRzhnUFNCeUxtbHVaR1Y0TENCaklEMGdjaTVoZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1TENCc0lEMGdjaTVoZEhSeWFXSjFkR1Z6TG5WMkxDQm9JRDBnY2k1aGRIUnlhV0oxZEdWekxuVjJNU3dnZFNBOUlISXVZWFIwY21saWRYUmxjeTV1YjNKdFlXd3NJR1FnUFNCeUxtZHliM1Z3Y3l3Z1ppQTlJSEl1WkhKaGQxSmhibWRsT3dvZ0lDQWdJQ0FnSUdsbUlDaHZJQ0U5UFNCdWRXeHNLU0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hoS1NrZ1ptOXlLR3hsZENCdElEMGdNQ3dnWHlBOUlHUXViR1Z1WjNSb095QnRJRHdnWHpzZ2JTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2NnUFNCa1cyMWRMQ0J3SUQwZ1lWdG5MbTFoZEdWeWFXRnNTVzVrWlhoZExDQjJJRDBnVFdGMGFDNXRZWGdvWnk1emRHRnlkQ3dnWmk1emRHRnlkQ2tzSUhnZ1BTQk5ZWFJvTG0xcGJpaHZMbU52ZFc1MExDQk5ZWFJvTG0xcGJpaG5Mbk4wWVhKMElDc2daeTVqYjNWdWRDd2daaTV6ZEdGeWRDQXJJR1l1WTI5MWJuUXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCNUlEMGdkaXdnWWlBOUlIZzdJSGtnUENCaU95QjVJQ3M5SURNcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGNnUFNCdkxtZGxkRmdvZVNrc0lGSWdQU0J2TG1kbGRGZ29lU0FySURFcExDQkpJRDBnYnk1blpYUllLSGtnS3lBeUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQU0JoY2loMGFHbHpMQ0J3TENCbExDQnVMQ0JzTENCb0xDQjFMQ0IzTENCU0xDQkpLU3dnYVNBbUppQW9hUzVtWVdObFNXNWtaWGdnUFNCTllYUm9MbVpzYjI5eUtIa2dMeUF6S1N3Z2FTNW1ZV05sTG0xaGRHVnlhV0ZzU1c1a1pYZ2dQU0JuTG0xaGRHVnlhV0ZzU1c1a1pYZ3NJSFF1Y0hWemFDaHBLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdElEMGdUV0YwYUM1dFlYZ29NQ3dnWmk1emRHRnlkQ2tzSUY4Z1BTQk5ZWFJvTG0xcGJpaHZMbU52ZFc1MExDQm1Mbk4wWVhKMElDc2daaTVqYjNWdWRDazdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWnlBOUlHMHNJSEFnUFNCZk95Qm5JRHdnY0RzZ1p5QXJQU0F6S1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjJJRDBnYnk1blpYUllLR2NwTENCNElEMGdieTVuWlhSWUtHY2dLeUF4S1N3Z2VTQTlJRzh1WjJWMFdDaG5JQ3NnTWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcElEMGdZWElvZEdocGN5d2dZU3dnWlN3Z2Jpd2diQ3dnYUN3Z2RTd2dkaXdnZUN3Z2VTa3NJR2tnSmlZZ0tHa3VabUZqWlVsdVpHVjRJRDBnVFdGMGFDNW1iRzl2Y2lobklDOGdNeWtzSUhRdWNIVnphQ2hwS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWld4elpTQnBaaUFvWXlBaFBUMGdkbTlwWkNBd0tTQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGhLU2tnWm05eUtHeGxkQ0J0SUQwZ01Dd2dYeUE5SUdRdWJHVnVaM1JvT3lCdElEd2dYenNnYlNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHY2dQU0JrVzIxZExDQndJRDBnWVZ0bkxtMWhkR1Z5YVdGc1NXNWtaWGhkTENCMklEMGdUV0YwYUM1dFlYZ29aeTV6ZEdGeWRDd2daaTV6ZEdGeWRDa3NJSGdnUFNCTllYUm9MbTFwYmloakxtTnZkVzUwTENCTllYUm9MbTFwYmlobkxuTjBZWEowSUNzZ1p5NWpiM1Z1ZEN3Z1ppNXpkR0Z5ZENBcklHWXVZMjkxYm5RcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0I1SUQwZ2Rpd2dZaUE5SUhnN0lIa2dQQ0JpT3lCNUlDczlJRE1wZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIY2dQU0I1TENCU0lEMGdlU0FySURFc0lFa2dQU0I1SUNzZ01qc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQU0JoY2loMGFHbHpMQ0J3TENCbExDQnVMQ0JzTENCb0xDQjFMQ0IzTENCU0xDQkpLU3dnYVNBbUppQW9hUzVtWVdObFNXNWtaWGdnUFNCTllYUm9MbVpzYjI5eUtIa2dMeUF6S1N3Z2FTNW1ZV05sTG0xaGRHVnlhV0ZzU1c1a1pYZ2dQU0JuTG0xaGRHVnlhV0ZzU1c1a1pYZ3NJSFF1Y0hWemFDaHBLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdElEMGdUV0YwYUM1dFlYZ29NQ3dnWmk1emRHRnlkQ2tzSUY4Z1BTQk5ZWFJvTG0xcGJpaGpMbU52ZFc1MExDQm1Mbk4wWVhKMElDc2daaTVqYjNWdWRDazdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWnlBOUlHMHNJSEFnUFNCZk95Qm5JRHdnY0RzZ1p5QXJQU0F6S1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjJJRDBnWnl3Z2VDQTlJR2NnS3lBeExDQjVJRDBnWnlBcklESTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBJRDBnWVhJb2RHaHBjeXdnWVN3Z1pTd2diaXdnYkN3Z2FDd2dkU3dnZGl3Z2VDd2dlU2tzSUdrZ0ppWWdLR2t1Wm1GalpVbHVaR1Y0SUQwZ1RXRjBhQzVtYkc5dmNpaG5JQzhnTXlrc0lIUXVjSFZ6YUNocEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q24wN0NtWjFibU4wYVc5dUlHZHdLSE14TENCbExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdktTQjdDaUFnSUNCc1pYUWdZenNLSUNBZ0lHbG1JQ2hsTG5OcFpHVWdQVDA5SUVaMElEOGdZeUE5SUc0dWFXNTBaWEp6WldOMFZISnBZVzVuYkdVb1lTd2djaXdnYVN3Z0lUQXNJRzhwSURvZ1l5QTlJRzR1YVc1MFpYSnpaV04wVkhKcFlXNW5iR1VvYVN3Z2Npd2dZU3dnWlM1emFXUmxJRDA5UFNCQ2Jpd2dieWtzSUdNZ1BUMDlJRzUxYkd3cElISmxkSFZ5YmlCdWRXeHNPd29nSUNBZ2NuSXVZMjl3ZVNodktTd2djbkl1WVhCd2JIbE5ZWFJ5YVhnMEtITXhMbTFoZEhKcGVGZHZjbXhrS1RzS0lDQWdJR3hsZENCc0lEMGdkQzV5WVhrdWIzSnBaMmx1TG1ScGMzUmhibU5sVkc4b2NuSXBPd29nSUNBZ2NtVjBkWEp1SUd3Z1BDQjBMbTVsWVhJZ2ZId2diQ0ErSUhRdVptRnlJRDhnYm5Wc2JDQTZJSHNLSUNBZ0lDQWdJQ0JrYVhOMFlXNWpaVG9nYkN3S0lDQWdJQ0FnSUNCd2IybHVkRG9nY25JdVkyeHZibVVvS1N3S0lDQWdJQ0FnSUNCdlltcGxZM1E2SUhNeENpQWdJQ0I5T3dwOUNtWjFibU4wYVc5dUlHRnlLSE14TENCbExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdkxDQmpMQ0JzS1NCN0NpQWdJQ0J6TVM1blpYUldaWEowWlhoUWIzTnBkR2x2YmlodkxDQjNhU2tzSUhNeExtZGxkRlpsY25SbGVGQnZjMmwwYVc5dUtHTXNJRUZwS1N3Z2N6RXVaMlYwVm1WeWRHVjRVRzl6YVhScGIyNG9iQ3dnVW1rcE93b2dJQ0FnYkdWMElHZ2dQU0JuY0Noek1Td2daU3dnZEN3Z2Jpd2dkMmtzSUVGcExDQlNhU3dnYzNJcE93b2dJQ0FnYVdZZ0tHZ3BJSHNLSUNBZ0lDQWdJQ0JwSUNZbUlDaDBjaTVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0drc0lHOHBMQ0J1Y2k1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHa3NJR01wTENCcGNpNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLR2tzSUd3cExDQm9MblYySUQwZ1ZXNHVaMlYwU1c1MFpYSndiMnhoZEdsdmJpaHpjaXdnZDJrc0lFRnBMQ0JTYVN3Z2RISXNJRzV5TENCcGNpd2dibVYzSUZvcEtTd2djaUFtSmlBb2RISXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2h5TENCdktTd2dibkl1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoeUxDQmpLU3dnYVhJdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHlMQ0JzS1N3Z2FDNTFkakVnUFNCVmJpNW5aWFJKYm5SbGNuQnZiR0YwYVc5dUtITnlMQ0IzYVN3Z1FXa3NJRkpwTENCMGNpd2dibklzSUdseUxDQnVaWGNnV2lrc0lHZ3VkWFl5SUQwZ2FDNTFkakVwTENCaElDWW1JQ2h2YUM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHRXNJRzhwTENCamFDNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLR0VzSUdNcExDQnNhQzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0dFc0lHd3BMQ0JvTG01dmNtMWhiQ0E5SUZWdUxtZGxkRWx1ZEdWeWNHOXNZWFJwYjI0b2MzSXNJSGRwTENCQmFTd2dVbWtzSUc5b0xDQmphQ3dnYkdnc0lHNWxkeUJCS1N3Z2FDNXViM0p0WVd3dVpHOTBLRzR1WkdseVpXTjBhVzl1S1NBK0lEQWdKaVlnYUM1dWIzSnRZV3d1YlhWc2RHbHdiSGxUWTJGc1lYSW9MVEVwS1RzS0lDQWdJQ0FnSUNCc1pYUWdkU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdZVG9nYnl3S0lDQWdJQ0FnSUNBZ0lDQWdZam9nWXl3S0lDQWdJQ0FnSUNBZ0lDQWdZem9nYkN3S0lDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc09pQnVaWGNnUVN3S0lDQWdJQ0FnSUNBZ0lDQWdiV0YwWlhKcFlXeEpibVJsZURvZ01Bb2dJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdWVzR1WjJWMFRtOXliV0ZzS0hkcExDQkJhU3dnVW1rc0lIVXVibTl5YldGc0tTd2dhQzVtWVdObElEMGdkVHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUJvT3dwOUNuWmhjaUJLYVNBOUlHTnNZWE56SUhNeElHVjRkR1Z1WkhNZ1IyVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SURFc0lIUWdQU0F4TENCdUlEMGdNU3dnYVNBOUlERXNJSElnUFNBeExDQmhJRDBnTVNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1N3Z2RHaHBjeTUwZVhCbElEMGdJa0p2ZUVkbGIyMWxkSEo1SWl3Z2RHaHBjeTV3WVhKaGJXVjBaWEp6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFEb2daU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwT2lCMExBb2dJQ0FnSUNBZ0lDQWdJQ0JrWlhCMGFEb2diaXdLSUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2hUWldkdFpXNTBjem9nYVN3S0lDQWdJQ0FnSUNBZ0lDQWdhR1ZwWjJoMFUyVm5iV1Z1ZEhNNklISXNDaUFnSUNBZ0lDQWdJQ0FnSUdSbGNIUm9VMlZuYldWdWRITTZJR0VLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnZEdocGN6c0tJQ0FnSUNBZ0lDQnBJRDBnVFdGMGFDNW1iRzl2Y2locEtTd2djaUE5SUUxaGRHZ3VabXh2YjNJb2Npa3NJR0VnUFNCTllYUm9MbVpzYjI5eUtHRXBPd29nSUNBZ0lDQWdJR3hsZENCaklEMGdXMTBzSUd3Z1BTQmJYU3dnYUNBOUlGdGRMQ0IxSUQwZ1cxMHNJR1FnUFNBd0xDQm1JRDBnTURzS0lDQWdJQ0FnSUNCdEtDSjZJaXdnSW5raUxDQWllQ0lzSUMweExDQXRNU3dnYml3Z2RDd2daU3dnWVN3Z2Npd2dNQ2tzSUcwb0lub2lMQ0FpZVNJc0lDSjRJaXdnTVN3Z0xURXNJRzRzSUhRc0lDMWxMQ0JoTENCeUxDQXhLU3dnYlNnaWVDSXNJQ0o2SWl3Z0lua2lMQ0F4TENBeExDQmxMQ0J1TENCMExDQnBMQ0JoTENBeUtTd2diU2dpZUNJc0lDSjZJaXdnSW5raUxDQXhMQ0F0TVN3Z1pTd2diaXdnTFhRc0lHa3NJR0VzSURNcExDQnRLQ0o0SWl3Z0lua2lMQ0FpZWlJc0lERXNJQzB4TENCbExDQjBMQ0J1TENCcExDQnlMQ0EwS1N3Z2JTZ2llQ0lzSUNKNUlpd2dJbm9pTENBdE1Td2dMVEVzSUdVc0lIUXNJQzF1TENCcExDQnlMQ0ExS1N3Z2RHaHBjeTV6WlhSSmJtUmxlQ2hqS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUhabEtHd3NJRE1wS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0ltNXZjbTFoYkNJc0lHNWxkeUIyWlNob0xDQXpLU2tzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKMWRpSXNJRzVsZHlCMlpTaDFMQ0F5S1NrN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2JTaGZMQ0JuTENCd0xDQjJMQ0I0TENCNUxDQmlMQ0IzTENCU0xDQkpMQ0JOS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCVUlEMGdlU0F2SUZJc0lFOGdQU0JpSUM4Z1NTd2dXU0E5SUhrZ0x5QXlMQ0FrSUQwZ1lpQXZJRElzSUZVZ1BTQjNJQzhnTWl3Z2VpQTlJRklnS3lBeExDQnhJRDBnU1NBcklERXNJRWdnUFNBd0xDQnVaU0E5SURBc0lGY2dQU0J1WlhjZ1FUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JMSUQwZ01Ec2dTeUE4SUhFN0lFc3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1JDQTlJRXNnS2lCUElDMGdKRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdSeUE5SURBN0lFY2dQQ0I2T3lCSEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm9aU0E5SUVjZ0tpQlVJQzBnV1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlhXMTlkSUQwZ2FHVWdLaUIyTENCWFcyZGRJRDBnUkNBcUlIZ3NJRmRiY0YwZ1BTQlZMQ0JzTG5CMWMyZ29WeTU0TENCWExua3NJRmN1ZWlrc0lGZGJYMTBnUFNBd0xDQlhXMmRkSUQwZ01Dd2dWMXR3WFNBOUlIY2dQaUF3SUQ4Z01TQTZJQzB4TENCb0xuQjFjMmdvVnk1NExDQlhMbmtzSUZjdWVpa3NJSFV1Y0hWemFDaEhJQzhnVWlrc0lIVXVjSFZ6YUNneElDMGdTeUF2SUVrcExDQklJQ3M5SURFN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCTElEMGdNRHNnU3lBOElFazdJRXNyS3lsbWIzSW9iR1YwSUVRZ1BTQXdPeUJFSUR3Z1Vqc2dSQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkhJRDBnWkNBcklFUWdLeUI2SUNvZ1N5d2dhR1VnUFNCa0lDc2dSQ0FySUhvZ0tpQW9TeUFySURFcExDQm1aU0E5SUdRZ0t5QW9SQ0FySURFcElDc2dlaUFxSUNoTElDc2dNU2tzSUY5bElEMGdaQ0FySUNoRUlDc2dNU2tnS3lCNklDb2dTenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR011Y0hWemFDaEhMQ0JvWlN3Z1gyVXBMQ0JqTG5CMWMyZ29hR1VzSUdabExDQmZaU2tzSUc1bElDczlJRFk3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYnk1aFpHUkhjbTkxY0NobUxDQnVaU3dnVFNrc0lHWWdLejBnYm1Vc0lHUWdLejBnU0RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnWlM1d1lYSmhiV1YwWlhKektTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCbWNtOXRTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJ6TVNobExuZHBaSFJvTENCbExtaGxhV2RvZEN3Z1pTNWtaWEIwYUN3Z1pTNTNhV1IwYUZObFoyMWxiblJ6TENCbExtaGxhV2RvZEZObFoyMWxiblJ6TENCbExtUmxjSFJvVTJWbmJXVnVkSE1wT3dvZ0lDQWdmUXA5T3dwbWRXNWpkR2x2YmlBa2FTaHpNU2tnZXdvZ0lDQWdiR1YwSUdVZ1BTQjdmVHNLSUNBZ0lHWnZjaWhzWlhRZ2RDQnBiaUJ6TVNsN0NpQWdJQ0FnSUNBZ1pWdDBYU0E5SUh0OU93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQnBiaUJ6TVZ0MFhTbDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnY3pGYmRGMWJibDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHa2dKaVlnS0drdWFYTkRiMnh2Y2lCOGZDQnBMbWx6VFdGMGNtbDRNeUI4ZkNCcExtbHpUV0YwY21sNE5DQjhmQ0JwTG1selZtVmpkRzl5TWlCOGZDQnBMbWx6Vm1WamRHOXlNeUI4ZkNCcExtbHpWbVZqZEc5eU5DQjhmQ0JwTG1selZHVjRkSFZ5WlNCOGZDQnBMbWx6VVhWaGRHVnlibWx2YmlrZ1B5QnBMbWx6VW1WdVpHVnlWR0Z5WjJWMFZHVjRkSFZ5WlNBL0lDaGpiMjV6YjJ4bExuZGhjbTRvSWxWdWFXWnZjbTF6VlhScGJITTZJRlJsZUhSMWNtVnpJRzltSUhKbGJtUmxjaUIwWVhKblpYUnpJR05oYm01dmRDQmlaU0JqYkc5dVpXUWdkbWxoSUdOc2IyNWxWVzVwWm05eWJYTW9LU0J2Y2lCdFpYSm5aVlZ1YVdadmNtMXpLQ2t1SWlrc0lHVmJkRjFiYmwwZ1BTQnVkV3hzS1NBNklHVmJkRjFiYmwwZ1BTQnBMbU5zYjI1bEtDa2dPaUJCY25KaGVTNXBjMEZ5Y21GNUtHa3BJRDhnWlZ0MFhWdHVYU0E5SUdrdWMyeHBZMlVvS1NBNklHVmJkRjFiYmwwZ1BTQnBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUJsT3dwOUNtWjFibU4wYVc5dUlFeDBLSE14S1NCN0NpQWdJQ0JzWlhRZ1pTQTlJSHQ5T3dvZ0lDQWdabTl5S0d4bGRDQjBJRDBnTURzZ2RDQThJSE14TG14bGJtZDBhRHNnZENzcktYc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlDUnBLSE14VzNSZEtUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dhVzRnYmlsbFcybGRJRDBnYmx0cFhUc0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQmxPd3A5Q21aMWJtTjBhVzl1SUY5d0tITXhLU0I3Q2lBZ0lDQnNaWFFnWlNBOUlGdGRPd29nSUNBZ1ptOXlLR3hsZENCMElEMGdNRHNnZENBOElITXhMbXhsYm1kMGFEc2dkQ3NyS1dVdWNIVnphQ2h6TVZ0MFhTNWpiRzl1WlNncEtUc0tJQ0FnSUhKbGRIVnliaUJsT3dwOUNtWjFibU4wYVc5dUlHSmtLSE14S1NCN0NpQWdJQ0J5WlhSMWNtNGdjekV1WjJWMFVtVnVaR1Z5VkdGeVoyVjBLQ2tnUFQwOUlHNTFiR3dnUHlCek1TNXZkWFJ3ZFhSRGIyeHZjbE53WVdObElEb2dVV1V1ZDI5eWEybHVaME52Ykc5eVUzQmhZMlU3Q24wS2RtRnlJSGh3SUQwZ2V3b2dJQ0FnWTJ4dmJtVTZJQ1JwTEFvZ0lDQWdiV1Z5WjJVNklFeDBDbjBzSUhad0lEMGdZSFp2YVdRZ2JXRnBiaWdwSUhzS0NXZHNYMUJ2YzJsMGFXOXVJRDBnY0hKdmFtVmpkR2x2YmsxaGRISnBlQ0FxSUcxdlpHVnNWbWxsZDAxaGRISnBlQ0FxSUhabFl6UW9JSEJ2YzJsMGFXOXVMQ0F4TGpBZ0tUc0tmV0FzSUhsd0lEMGdZSFp2YVdRZ2JXRnBiaWdwSUhzS0NXZHNYMFp5WVdkRGIyeHZjaUE5SUhabFl6UW9JREV1TUN3Z01DNHdMQ0F3TGpBc0lERXVNQ0FwT3dwOVlDd2dhblFnUFNCamJHRnpjeUJsZUhSbGJtUnpJR0owSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11YVhOVGFHRmtaWEpOWVhSbGNtbGhiQ0E5SUNFd0xDQjBhR2x6TG5SNWNHVWdQU0FpVTJoaFpHVnlUV0YwWlhKcFlXd2lMQ0IwYUdsekxtUmxabWx1WlhNZ1BTQjdmU3dnZEdocGN5NTFibWxtYjNKdGN5QTlJSHQ5TENCMGFHbHpMblZ1YVdadmNtMXpSM0p2ZFhCeklEMGdXMTBzSUhSb2FYTXVkbVZ5ZEdWNFUyaGhaR1Z5SUQwZ2RuQXNJSFJvYVhNdVpuSmhaMjFsYm5SVGFHRmtaWElnUFNCNWNDd2dkR2hwY3k1c2FXNWxkMmxrZEdnZ1BTQXhMQ0IwYUdsekxuZHBjbVZtY21GdFpTQTlJQ0V4TENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ0E5SURFc0lIUm9hWE11Wm05bklEMGdJVEVzSUhSb2FYTXViR2xuYUhSeklEMGdJVEVzSUhSb2FYTXVZMnhwY0hCcGJtY2dQU0FoTVN3Z2RHaHBjeTVtYjNKalpWTnBibWRzWlZCaGMzTWdQU0FoTUN3Z2RHaHBjeTVsZUhSbGJuTnBiMjV6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JrWlhKcGRtRjBhWFpsY3pvZ0lURXNDaUFnSUNBZ0lDQWdJQ0FnSUdaeVlXZEVaWEIwYURvZ0lURXNDaUFnSUNBZ0lDQWdJQ0FnSUdSeVlYZENkV1ptWlhKek9pQWhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhaR1Z5VkdWNGRIVnlaVXhQUkRvZ0lURUtJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxtUmxabUYxYkhSQmRIUnlhV0oxZEdWV1lXeDFaWE1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9pQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREVLSUNBZ0lDQWdJQ0FnSUNBZ1hTd0tJQ0FnSUNBZ0lDQWdJQ0FnZFhZNklGc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdDaUFnSUNBZ0lDQWdJQ0FnSUYwc0NpQWdJQ0FnSUNBZ0lDQWdJSFYyTVRvZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQUtJQ0FnSUNBZ0lDQWdJQ0FnWFFvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11YVc1a1pYZ3dRWFIwY21saWRYUmxUbUZ0WlNBOUlIWnZhV1FnTUN3Z2RHaHBjeTUxYm1sbWIzSnRjMDVsWldSVmNHUmhkR1VnUFNBaE1Td2dkR2hwY3k1bmJITnNWbVZ5YzJsdmJpQTlJRzUxYkd3c0lHVWdJVDA5SUhadmFXUWdNQ0FtSmlCMGFHbHpMbk5sZEZaaGJIVmxjeWhsS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtWnlZV2R0Wlc1MFUyaGhaR1Z5SUQwZ1pTNW1jbUZuYldWdWRGTm9ZV1JsY2l3Z2RHaHBjeTUyWlhKMFpYaFRhR0ZrWlhJZ1BTQmxMblpsY25SbGVGTm9ZV1JsY2l3Z2RHaHBjeTUxYm1sbWIzSnRjeUE5SUNScEtHVXVkVzVwWm05eWJYTXBMQ0IwYUdsekxuVnVhV1p2Y20xelIzSnZkWEJ6SUQwZ1gzQW9aUzUxYm1sbWIzSnRjMGR5YjNWd2N5a3NJSFJvYVhNdVpHVm1hVzVsY3lBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZTMwc0lHVXVaR1ZtYVc1bGN5a3NJSFJvYVhNdWQybHlaV1p5WVcxbElEMGdaUzUzYVhKbFpuSmhiV1VzSUhSb2FYTXVkMmx5WldaeVlXMWxUR2x1WlhkcFpIUm9JRDBnWlM1M2FYSmxabkpoYldWTWFXNWxkMmxrZEdnc0lIUm9hWE11Wm05bklEMGdaUzVtYjJjc0lIUm9hWE11YkdsbmFIUnpJRDBnWlM1c2FXZG9kSE1zSUhSb2FYTXVZMnhwY0hCcGJtY2dQU0JsTG1Oc2FYQndhVzVuTENCMGFHbHpMbVY0ZEdWdWMybHZibk1nUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCbExtVjRkR1Z1YzJsdmJuTXBMQ0IwYUdsekxtZHNjMnhXWlhKemFXOXVJRDBnWlM1bmJITnNWbVZ5YzJsdmJpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQnpkWEJsY2k1MGIwcFRUMDRvWlNrN0NpQWdJQ0FnSUNBZ2RDNW5iSE5zVm1WeWMybHZiaUE5SUhSb2FYTXVaMnh6YkZabGNuTnBiMjRzSUhRdWRXNXBabTl5YlhNZ1BTQjdmVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2tnYVc0Z2RHaHBjeTUxYm1sbWIzSnRjeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ2RHaHBjeTUxYm1sbWIzSnRjMXRwWFM1MllXeDFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ1lTQW1KaUJoTG1selZHVjRkSFZ5WlNBL0lIUXVkVzVwWm05eWJYTmJhVjBnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFpZENJc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWVM1MGIwcFRUMDRvWlNrdWRYVnBaQW9nSUNBZ0lDQWdJQ0FnSUNCOUlEb2dZU0FtSmlCaExtbHpRMjlzYjNJZ1B5QjBMblZ1YVdadmNtMXpXMmxkSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSW1NaUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdFdVoyVjBTR1Y0S0NrS0lDQWdJQ0FnSUNBZ0lDQWdmU0E2SUdFZ0ppWWdZUzVwYzFabFkzUnZjaklnUHlCMExuVnVhV1p2Y20xelcybGRJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dJbll5SWl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJoTG5SdlFYSnlZWGtvS1FvZ0lDQWdJQ0FnSUNBZ0lDQjlJRG9nWVNBbUppQmhMbWx6Vm1WamRHOXlNeUEvSUhRdWRXNXBabTl5YlhOYmFWMGdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWlkak1pTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR0V1ZEc5QmNuSmhlU2dwQ2lBZ0lDQWdJQ0FnSUNBZ0lIMGdPaUJoSUNZbUlHRXVhWE5XWldOMGIzSTBJRDhnZEM1MWJtbG1iM0p0YzF0cFhTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDSjJOQ0lzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dZUzUwYjBGeWNtRjVLQ2tLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQTZJR0VnSmlZZ1lTNXBjMDFoZEhKcGVETWdQeUIwTG5WdWFXWnZjbTF6VzJsZElEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ltMHpJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmhMblJ2UVhKeVlYa29LUW9nSUNBZ0lDQWdJQ0FnSUNCOUlEb2dZU0FtSmlCaExtbHpUV0YwY21sNE5DQS9JSFF1ZFc1cFptOXliWE5iYVYwZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaWJUUWlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHRXVkRzlCY25KaGVTZ3BDaUFnSUNBZ0lDQWdJQ0FnSUgwZ09pQjBMblZ1YVdadmNtMXpXMmxkSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdFS0lDQWdJQ0FnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnVDJKcVpXTjBMbXRsZVhNb2RHaHBjeTVrWldacGJtVnpLUzVzWlc1bmRHZ2dQaUF3SUNZbUlDaDBMbVJsWm1sdVpYTWdQU0IwYUdsekxtUmxabWx1WlhNcExDQjBMblpsY25SbGVGTm9ZV1JsY2lBOUlIUm9hWE11ZG1WeWRHVjRVMmhoWkdWeUxDQjBMbVp5WVdkdFpXNTBVMmhoWkdWeUlEMGdkR2hwY3k1bWNtRm5iV1Z1ZEZOb1lXUmxjaXdnZEM1c2FXZG9kSE1nUFNCMGFHbHpMbXhwWjJoMGN5d2dkQzVqYkdsd2NHbHVaeUE5SUhSb2FYTXVZMnhwY0hCcGJtYzdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjdmVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2tnYVc0Z2RHaHBjeTVsZUhSbGJuTnBiMjV6S1hSb2FYTXVaWGgwWlc1emFXOXVjMXRwWFNBOVBUMGdJVEFnSmlZZ0tHNWJhVjBnUFNBaE1DazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1clpYbHpLRzRwTG14bGJtZDBhQ0ErSURBZ0ppWWdLSFF1WlhoMFpXNXphVzl1Y3lBOUlHNHBMQ0IwT3dvZ0lDQWdmUXA5TENCRGN5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1NtVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpRMkZ0WlhKaElEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSkRZVzFsY21FaUxDQjBhR2x6TG0xaGRISnBlRmR2Y214a1NXNTJaWEp6WlNBOUlHNWxkeUI2WlN3Z2RHaHBjeTV3Y205cVpXTjBhVzl1VFdGMGNtbDRJRDBnYm1WM0lIcGxMQ0IwYUdsekxuQnliMnBsWTNScGIyNU5ZWFJ5YVhoSmJuWmxjbk5sSUQwZ2JtVjNJSHBsTENCMGFHbHpMbU52YjNKa2FXNWhkR1ZUZVhOMFpXMGdQU0IyYmpzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VzSUhRcExDQjBhR2x6TG0xaGRISnBlRmR2Y214a1NXNTJaWEp6WlM1amIzQjVLR1V1YldGMGNtbDRWMjl5YkdSSmJuWmxjbk5sS1N3Z2RHaHBjeTV3Y205cVpXTjBhVzl1VFdGMGNtbDRMbU52Y0hrb1pTNXdjbTlxWldOMGFXOXVUV0YwY21sNEtTd2dkR2hwY3k1d2NtOXFaV04wYVc5dVRXRjBjbWw0U1c1MlpYSnpaUzVqYjNCNUtHVXVjSEp2YW1WamRHbHZiazFoZEhKcGVFbHVkbVZ5YzJVcExDQjBhR2x6TG1OdmIzSmthVzVoZEdWVGVYTjBaVzBnUFNCbExtTnZiM0prYVc1aGRHVlRlWE4wWlcwc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUlhiM0pzWkVScGNtVmpkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1kbGRGZHZjbXhrUkdseVpXTjBhVzl1S0dVcExtNWxaMkYwWlNncE93b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9aU2tnZXdvZ0lDQWdJQ0FnSUhOMWNHVnlMblZ3WkdGMFpVMWhkSEpwZUZkdmNteGtLR1VwTENCMGFHbHpMbTFoZEhKcGVGZHZjbXhrU1c1MlpYSnpaUzVqYjNCNUtIUm9hWE11YldGMGNtbDRWMjl5YkdRcExtbHVkbVZ5ZENncE93b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbFYyOXliR1JOWVhSeWFYZ29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lITjFjR1Z5TG5Wd1pHRjBaVmR2Y214a1RXRjBjbWw0S0dVc0lIUXBMQ0IwYUdsekxtMWhkSEpwZUZkdmNteGtTVzUyWlhKelpTNWpiM0I1S0hSb2FYTXViV0YwY21sNFYyOXliR1FwTG1sdWRtVnlkQ2dwT3dvZ0lDQWdmUW9nSUNBZ1kyeHZibVVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QjBhR2x6TG1OdmJuTjBjblZqZEc5eUtDa3VZMjl3ZVNoMGFHbHpLVHNLSUNBZ0lIMEtmU3dnZVhRZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0ExTUN3Z2RDQTlJREVzSUc0Z1BTQXVNU3dnYVNBOUlESmxNeWw3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NXBjMUJsY25Od1pXTjBhWFpsUTJGdFpYSmhJRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pRWlhKemNHVmpkR2wyWlVOaGJXVnlZU0lzSUhSb2FYTXVabTkySUQwZ1pTd2dkR2hwY3k1NmIyOXRJRDBnTVN3Z2RHaHBjeTV1WldGeUlEMGdiaXdnZEdocGN5NW1ZWElnUFNCcExDQjBhR2x6TG1adlkzVnpJRDBnTVRBc0lIUm9hWE11WVhOd1pXTjBJRDBnZEN3Z2RHaHBjeTUyYVdWM0lEMGdiblZzYkN3Z2RHaHBjeTVtYVd4dFIyRjFaMlVnUFNBek5Td2dkR2hwY3k1bWFXeHRUMlptYzJWMElEMGdNQ3dnZEdocGN5NTFjR1JoZEdWUWNtOXFaV04wYVc5dVRXRjBjbWw0S0NrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsTENCMEtTd2dkR2hwY3k1bWIzWWdQU0JsTG1admRpd2dkR2hwY3k1NmIyOXRJRDBnWlM1NmIyOXRMQ0IwYUdsekxtNWxZWElnUFNCbExtNWxZWElzSUhSb2FYTXVabUZ5SUQwZ1pTNW1ZWElzSUhSb2FYTXVabTlqZFhNZ1BTQmxMbVp2WTNWekxDQjBhR2x6TG1GemNHVmpkQ0E5SUdVdVlYTndaV04wTENCMGFHbHpMblpwWlhjZ1BTQmxMblpwWlhjZ1BUMDlJRzUxYkd3Z1B5QnVkV3hzSURvZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z1pTNTJhV1YzS1N3Z2RHaHBjeTVtYVd4dFIyRjFaMlVnUFNCbExtWnBiRzFIWVhWblpTd2dkR2hwY3k1bWFXeHRUMlptYzJWMElEMGdaUzVtYVd4dFQyWm1jMlYwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJtOWpZV3hNWlc1bmRHZ29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnTGpVZ0tpQjBhR2x6TG1kbGRFWnBiRzFJWldsbmFIUW9LU0F2SUdVN0NpQWdJQ0FnSUNBZ2RHaHBjeTVtYjNZZ1BTQmFhU0FxSURJZ0tpQk5ZWFJvTG1GMFlXNG9kQ2tzSUhSb2FYTXVkWEJrWVhSbFVISnZhbVZqZEdsdmJrMWhkSEpwZUNncE93b2dJQ0FnZlFvZ0lDQWdaMlYwUm05allXeE1aVzVuZEdnb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQk5ZWFJvTG5SaGJpaGhhU0FxSUM0MUlDb2dkR2hwY3k1bWIzWXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQXVOU0FxSUhSb2FYTXVaMlYwUm1sc2JVaGxhV2RvZENncElDOGdaVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFVm1abVZqZEdsMlpVWlBWaWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnV21rZ0tpQXlJQ29nVFdGMGFDNWhkR0Z1S0UxaGRHZ3VkR0Z1S0dGcElDb2dMalVnS2lCMGFHbHpMbVp2ZGlrZ0x5QjBhR2x6TG5wdmIyMHBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFJtbHNiVmRwWkhSb0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1acGJHMUhZWFZuWlNBcUlFMWhkR2d1YldsdUtIUm9hWE11WVhOd1pXTjBMQ0F4S1RzS0lDQWdJSDBLSUNBZ0lHZGxkRVpwYkcxSVpXbG5hSFFvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVabWxzYlVkaGRXZGxJQzhnVFdGMGFDNXRZWGdvZEdocGN5NWhjM0JsWTNRc0lERXBPd29nSUNBZ2ZRb2dJQ0FnYzJWMFZtbGxkMDltWm5ObGRDaGxMQ0IwTENCdUxDQnBMQ0J5TENCaEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1aGMzQmxZM1FnUFNCbElDOGdkQ3dnZEdocGN5NTJhV1YzSUQwOVBTQnVkV3hzSUNZbUlDaDBhR2x6TG5acFpYY2dQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnVZV0pzWldRNklDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNCbWRXeHNWMmxrZEdnNklERXNDaUFnSUNBZ0lDQWdJQ0FnSUdaMWJHeElaV2xuYUhRNklERXNDaUFnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkRmc2SURBc0NpQWdJQ0FnSUNBZ0lDQWdJRzltWm5ObGRGazZJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lBeExBb2dJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJREVLSUNBZ0lDQWdJQ0I5S1N3Z2RHaHBjeTUyYVdWM0xtVnVZV0pzWldRZ1BTQWhNQ3dnZEdocGN5NTJhV1YzTG1aMWJHeFhhV1IwYUNBOUlHVXNJSFJvYVhNdWRtbGxkeTVtZFd4c1NHVnBaMmgwSUQwZ2RDd2dkR2hwY3k1MmFXVjNMbTltWm5ObGRGZ2dQU0J1TENCMGFHbHpMblpwWlhjdWIyWm1jMlYwV1NBOUlHa3NJSFJvYVhNdWRtbGxkeTUzYVdSMGFDQTlJSElzSUhSb2FYTXVkbWxsZHk1b1pXbG5hSFFnUFNCaExDQjBhR2x6TG5Wd1pHRjBaVkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ29LVHNLSUNBZ0lIMEtJQ0FnSUdOc1pXRnlWbWxsZDA5bVpuTmxkQ2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMblpwWlhjZ0lUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdWRtbGxkeTVsYm1GaWJHVmtJRDBnSVRFcExDQjBhR2x6TG5Wd1pHRjBaVkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ29LVHNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaVkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ29LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxtNWxZWElzSUhRZ1BTQmxJQ29nVFdGMGFDNTBZVzRvWVdrZ0tpQXVOU0FxSUhSb2FYTXVabTkyS1NBdklIUm9hWE11ZW05dmJTd2diaUE5SURJZ0tpQjBMQ0JwSUQwZ2RHaHBjeTVoYzNCbFkzUWdLaUJ1TENCeUlEMGdMUzQxSUNvZ2FTd2dZU0E5SUhSb2FYTXVkbWxsZHpzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1MmFXVjNJQ0U5UFNCdWRXeHNJQ1ltSUhSb2FYTXVkbWxsZHk1bGJtRmliR1ZrS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaklEMGdZUzVtZFd4c1YybGtkR2dzSUd3Z1BTQmhMbVoxYkd4SVpXbG5hSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lISWdLejBnWVM1dlptWnpaWFJZSUNvZ2FTQXZJR01zSUhRZ0xUMGdZUzV2Wm1aelpYUlpJQ29nYmlBdklHd3NJR2tnS2owZ1lTNTNhV1IwYUNBdklHTXNJRzRnS2owZ1lTNW9aV2xuYUhRZ0x5QnNPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJSFJvYVhNdVptbHNiVTltWm5ObGREc0tJQ0FnSUNBZ0lDQnZJQ0U5UFNBd0lDWW1JQ2h5SUNzOUlHVWdLaUJ2SUM4Z2RHaHBjeTVuWlhSR2FXeHRWMmxrZEdnb0tTa3NJSFJvYVhNdWNISnZhbVZqZEdsdmJrMWhkSEpwZUM1dFlXdGxVR1Z5YzNCbFkzUnBkbVVvY2l3Z2NpQXJJR2tzSUhRc0lIUWdMU0J1TENCbExDQjBhR2x6TG1aaGNpd2dkR2hwY3k1amIyOXlaR2x1WVhSbFUzbHpkR1Z0S1N3Z2RHaHBjeTV3Y205cVpXTjBhVzl1VFdGMGNtbDRTVzUyWlhKelpTNWpiM0I1S0hSb2FYTXVjSEp2YW1WamRHbHZiazFoZEhKcGVDa3VhVzUyWlhKMEtDazdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnYzNWd1pYSXVkRzlLVTA5T0tHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBMbTlpYW1WamRDNW1iM1lnUFNCMGFHbHpMbVp2ZGl3Z2RDNXZZbXBsWTNRdWVtOXZiU0E5SUhSb2FYTXVlbTl2YlN3Z2RDNXZZbXBsWTNRdWJtVmhjaUE5SUhSb2FYTXVibVZoY2l3Z2RDNXZZbXBsWTNRdVptRnlJRDBnZEdocGN5NW1ZWElzSUhRdWIySnFaV04wTG1adlkzVnpJRDBnZEdocGN5NW1iMk4xY3l3Z2RDNXZZbXBsWTNRdVlYTndaV04wSUQwZ2RHaHBjeTVoYzNCbFkzUXNJSFJvYVhNdWRtbGxkeUFoUFQwZ2JuVnNiQ0FtSmlBb2RDNXZZbXBsWTNRdWRtbGxkeUE5SUU5aWFtVmpkQzVoYzNOcFoyNG9lMzBzSUhSb2FYTXVkbWxsZHlrcExDQjBMbTlpYW1WamRDNW1hV3h0UjJGMVoyVWdQU0IwYUdsekxtWnBiRzFIWVhWblpTd2dkQzV2WW1wbFkzUXVabWxzYlU5bVpuTmxkQ0E5SUhSb2FYTXVabWxzYlU5bVpuTmxkQ3dnZERzS0lDQWdJSDBLZlN3Z1Eya2dQU0F0T1RBc0lGQnBJRDBnTVN3Z1gyOGdQU0JqYkdGemN5QmxlSFJsYm1SeklFcGxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWRIbHdaU0E5SUNKRGRXSmxRMkZ0WlhKaElpd2dkR2hwY3k1eVpXNWtaWEpVWVhKblpYUWdQU0J1TENCMGFHbHpMbU52YjNKa2FXNWhkR1ZUZVhOMFpXMGdQU0J1ZFd4c0xDQjBhR2x6TG1GamRHbDJaVTFwY0cxaGNFeGxkbVZzSUQwZ01Ec0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHNWxkeUI1ZENoRGFTd2dVR2tzSUdVc0lIUXBPd29nSUNBZ0lDQWdJR2t1YkdGNVpYSnpJRDBnZEdocGN5NXNZWGxsY25Nc0lIUm9hWE11WVdSa0tHa3BPd29nSUNBZ0lDQWdJR3hsZENCeUlEMGdibVYzSUhsMEtFTnBMQ0JRYVN3Z1pTd2dkQ2s3Q2lBZ0lDQWdJQ0FnY2k1c1lYbGxjbk1nUFNCMGFHbHpMbXhoZVdWeWN5d2dkR2hwY3k1aFpHUW9jaWs3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0J1WlhjZ2VYUW9RMmtzSUZCcExDQmxMQ0IwS1RzS0lDQWdJQ0FnSUNCaExteGhlV1Z5Y3lBOUlIUm9hWE11YkdGNVpYSnpMQ0IwYUdsekxtRmtaQ2hoS1RzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUc1bGR5QjVkQ2hEYVN3Z1VHa3NJR1VzSUhRcE93b2dJQ0FnSUNBZ0lHOHViR0Y1WlhKeklEMGdkR2hwY3k1c1lYbGxjbk1zSUhSb2FYTXVZV1JrS0c4cE93b2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ2JtVjNJSGwwS0VOcExDQlFhU3dnWlN3Z2RDazdDaUFnSUNBZ0lDQWdZeTVzWVhsbGNuTWdQU0IwYUdsekxteGhlV1Z5Y3l3Z2RHaHBjeTVoWkdRb1l5azdDaUFnSUNBZ0lDQWdiR1YwSUd3Z1BTQnVaWGNnZVhRb1Eya3NJRkJwTENCbExDQjBLVHNLSUNBZ0lDQWdJQ0JzTG14aGVXVnljeUE5SUhSb2FYTXViR0Y1WlhKekxDQjBhR2x6TG1Ga1pDaHNLVHNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaVU52YjNKa2FXNWhkR1ZUZVhOMFpXMG9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxtTnZiM0prYVc1aGRHVlRlWE4wWlcwc0lIUWdQU0IwYUdsekxtTm9hV3hrY21WdUxtTnZibU5oZENncExDQmJiaXdnYVN3Z2Npd2dZU3dnYnl3Z1kxMGdQU0IwT3dvZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUd3Z2IyWWdkQ2wwYUdsekxuSmxiVzkyWlNoc0tUc0tJQ0FnSUNBZ0lDQnBaaUFvWlNBOVBUMGdkbTRwSUc0dWRYQXVjMlYwS0RBc0lERXNJREFwTENCdUxteHZiMnRCZENneExDQXdMQ0F3S1N3Z2FTNTFjQzV6WlhRb01Dd2dNU3dnTUNrc0lHa3ViRzl2YTBGMEtDMHhMQ0F3TENBd0tTd2djaTUxY0M1elpYUW9NQ3dnTUN3Z0xURXBMQ0J5TG14dmIydEJkQ2d3TENBeExDQXdLU3dnWVM1MWNDNXpaWFFvTUN3Z01Dd2dNU2tzSUdFdWJHOXZhMEYwS0RBc0lDMHhMQ0F3S1N3Z2J5NTFjQzV6WlhRb01Dd2dNU3dnTUNrc0lHOHViRzl2YTBGMEtEQXNJREFzSURFcExDQmpMblZ3TG5ObGRDZ3dMQ0F4TENBd0tTd2dZeTVzYjI5clFYUW9NQ3dnTUN3Z0xURXBPd29nSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR1VnUFQwOUlFZHlLU0J1TG5Wd0xuTmxkQ2d3TENBdE1Td2dNQ2tzSUc0dWJHOXZhMEYwS0MweExDQXdMQ0F3S1N3Z2FTNTFjQzV6WlhRb01Dd2dMVEVzSURBcExDQnBMbXh2YjJ0QmRDZ3hMQ0F3TENBd0tTd2djaTUxY0M1elpYUW9NQ3dnTUN3Z01Ta3NJSEl1Ykc5dmEwRjBLREFzSURFc0lEQXBMQ0JoTG5Wd0xuTmxkQ2d3TENBd0xDQXRNU2tzSUdFdWJHOXZhMEYwS0RBc0lDMHhMQ0F3S1N3Z2J5NTFjQzV6WlhRb01Dd2dMVEVzSURBcExDQnZMbXh2YjJ0QmRDZ3dMQ0F3TENBeEtTd2dZeTUxY0M1elpYUW9NQ3dnTFRFc0lEQXBMQ0JqTG14dmIydEJkQ2d3TENBd0xDQXRNU2s3Q2lBZ0lDQWdJQ0FnWld4elpTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0lsUklVa1ZGTGtOMVltVkRZVzFsY21FdWRYQmtZWFJsUTI5dmNtUnBibUYwWlZONWMzUmxiU2dwT2lCSmJuWmhiR2xrSUdOdmIzSmthVzVoZEdVZ2MzbHpkR1Z0T2lBaUlDc2daU2s3Q2lBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYkNCdlppQjBLWFJvYVhNdVlXUmtLR3dwTENCc0xuVndaR0YwWlUxaGRISnBlRmR2Y214a0tDazdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11Y0dGeVpXNTBJRDA5UFNCdWRXeHNJQ1ltSUhSb2FYTXVkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9LVHNLSUNBZ0lDQWdJQ0JzWlhRZ2V5QnlaVzVrWlhKVVlYSm5aWFE2SUc0Z0xDQmhZM1JwZG1WTmFYQnRZWEJNWlhabGJEb2dhU0FnZlNBOUlIUm9hWE03Q2lBZ0lDQWdJQ0FnZEdocGN5NWpiMjl5WkdsdVlYUmxVM2x6ZEdWdElDRTlQU0JsTG1OdmIzSmthVzVoZEdWVGVYTjBaVzBnSmlZZ0tIUm9hWE11WTI5dmNtUnBibUYwWlZONWMzUmxiU0E5SUdVdVkyOXZjbVJwYm1GMFpWTjVjM1JsYlN3Z2RHaHBjeTUxY0dSaGRHVkRiMjl5WkdsdVlYUmxVM2x6ZEdWdEtDa3BPd29nSUNBZ0lDQWdJR3hsZENCYmNpd2dZU3dnYnl3Z1l5d2diQ3dnYUYwZ1BTQjBhR2x6TG1Ob2FXeGtjbVZ1TENCMUlEMGdaUzVuWlhSU1pXNWtaWEpVWVhKblpYUW9LU3dnWkNBOUlHVXVaMlYwUVdOMGFYWmxRM1ZpWlVaaFkyVW9LU3dnWmlBOUlHVXVaMlYwUVdOMGFYWmxUV2x3YldGd1RHVjJaV3dvS1N3Z2JTQTlJR1V1ZUhJdVpXNWhZbXhsWkRzS0lDQWdJQ0FnSUNCbExuaHlMbVZ1WVdKc1pXUWdQU0FoTVRzS0lDQWdJQ0FnSUNCc1pYUWdYeUE5SUc0dWRHVjRkSFZ5WlM1blpXNWxjbUYwWlUxcGNHMWhjSE03Q2lBZ0lDQWdJQ0FnYmk1MFpYaDBkWEpsTG1kbGJtVnlZWFJsVFdsd2JXRndjeUE5SUNFeExDQmxMbk5sZEZKbGJtUmxjbFJoY21kbGRDaHVMQ0F3TENCcEtTd2daUzV5Wlc1a1pYSW9kQ3dnY2lrc0lHVXVjMlYwVW1WdVpHVnlWR0Z5WjJWMEtHNHNJREVzSUdrcExDQmxMbkpsYm1SbGNpaDBMQ0JoS1N3Z1pTNXpaWFJTWlc1a1pYSlVZWEpuWlhRb2Jpd2dNaXdnYVNrc0lHVXVjbVZ1WkdWeUtIUXNJRzhwTENCbExuTmxkRkpsYm1SbGNsUmhjbWRsZENodUxDQXpMQ0JwS1N3Z1pTNXlaVzVrWlhJb2RDd2dZeWtzSUdVdWMyVjBVbVZ1WkdWeVZHRnlaMlYwS0c0c0lEUXNJR2twTENCbExuSmxibVJsY2loMExDQnNLU3dnYmk1MFpYaDBkWEpsTG1kbGJtVnlZWFJsVFdsd2JXRndjeUE5SUY4c0lHVXVjMlYwVW1WdVpHVnlWR0Z5WjJWMEtHNHNJRFVzSUdrcExDQmxMbkpsYm1SbGNpaDBMQ0JvS1N3Z1pTNXpaWFJTWlc1a1pYSlVZWEpuWlhRb2RTd2daQ3dnWmlrc0lHVXVlSEl1Wlc1aFlteGxaQ0E5SUcwc0lHNHVkR1Y0ZEhWeVpTNXVaV1ZrYzFCTlVrVk5WWEJrWVhSbElEMGdJVEE3Q2lBZ0lDQjlDbjBzSUV0cElEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCVGRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZMQ0JqTENCc0xDQm9LWHNLSUNBZ0lDQWdJQ0JsSUQwZ1pTQWhQVDBnZG05cFpDQXdJRDhnWlNBNklGdGRMQ0IwSUQwZ2RDQWhQVDBnZG05cFpDQXdJRDhnZENBNklIcHVMQ0J6ZFhCbGNpaGxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZMQ0JqTENCc0xDQm9LU3dnZEdocGN5NXBjME4xWW1WVVpYaDBkWEpsSUQwZ0lUQXNJSFJvYVhNdVpteHBjRmtnUFNBaE1Uc0tJQ0FnSUgwS0lDQWdJR2RsZENCcGJXRm5aWE1vS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhVzFoWjJVN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFnYVcxaFoyVnpLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbWx0WVdkbElEMGdaVHNLSUNBZ0lIMEtmU3dnZUc4Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUhGMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F4TENCMElEMGdlMzBwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VzSUdVc0lIUXBMQ0IwYUdsekxtbHpWMlZpUjB4RGRXSmxVbVZ1WkdWeVZHRnlaMlYwSUQwZ0lUQTdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhkcFpIUm9PaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklHVXNDaUFnSUNBZ0lDQWdJQ0FnSUdSbGNIUm9PaUF4Q2lBZ0lDQWdJQ0FnZlN3Z2FTQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdiaXdLSUNBZ0lDQWdJQ0FnSUNBZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdiZ29nSUNBZ0lDQWdJRjA3Q2lBZ0lDQWdJQ0FnZEM1bGJtTnZaR2x1WnlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hOY3lnaVZFaFNSVVV1VjJWaVIweERkV0psVW1WdVpHVnlWR0Z5WjJWME9pQnZjSFJwYjI0dVpXNWpiMlJwYm1jZ2FHRnpJR0psWlc0Z2NtVndiR0ZqWldRZ1lua2diM0IwYVc5dUxtTnZiRzl5VTNCaFkyVXVJaWtzSUhRdVkyOXNiM0pUY0dGalpTQTlJSFF1Wlc1amIyUnBibWNnUFQwOUlISnBJRDhnZG5RZ09pQllkQ2tzSUhSb2FYTXVkR1Y0ZEhWeVpTQTlJRzVsZHlCTGFTaHBMQ0IwTG0xaGNIQnBibWNzSUhRdWQzSmhjRk1zSUhRdWQzSmhjRlFzSUhRdWJXRm5SbWxzZEdWeUxDQjBMbTFwYmtacGJIUmxjaXdnZEM1bWIzSnRZWFFzSUhRdWRIbHdaU3dnZEM1aGJtbHpiM1J5YjNCNUxDQjBMbU52Ykc5eVUzQmhZMlVwTENCMGFHbHpMblJsZUhSMWNtVXVhWE5TWlc1a1pYSlVZWEpuWlhSVVpYaDBkWEpsSUQwZ0lUQXNJSFJvYVhNdWRHVjRkSFZ5WlM1blpXNWxjbUYwWlUxcGNHMWhjSE1nUFNCMExtZGxibVZ5WVhSbFRXbHdiV0Z3Y3lBaFBUMGdkbTlwWkNBd0lEOGdkQzVuWlc1bGNtRjBaVTFwY0cxaGNITWdPaUFoTVN3Z2RHaHBjeTUwWlhoMGRYSmxMbTFwYmtacGJIUmxjaUE5SUhRdWJXbHVSbWxzZEdWeUlDRTlQU0IyYjJsa0lEQWdQeUIwTG0xcGJrWnBiSFJsY2lBNklHMTBPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVVnhkV2x5WldOMFlXNW5kV3hoY2xSbGVIUjFjbVVvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWRHVjRkSFZ5WlM1MGVYQmxJRDBnZEM1MGVYQmxMQ0IwYUdsekxuUmxlSFIxY21VdVkyOXNiM0pUY0dGalpTQTlJSFF1WTI5c2IzSlRjR0ZqWlN3Z2RHaHBjeTUwWlhoMGRYSmxMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJSFF1WjJWdVpYSmhkR1ZOYVhCdFlYQnpMQ0IwYUdsekxuUmxlSFIxY21VdWJXbHVSbWxzZEdWeUlEMGdkQzV0YVc1R2FXeDBaWElzSUhSb2FYTXVkR1Y0ZEhWeVpTNXRZV2RHYVd4MFpYSWdQU0IwTG0xaFowWnBiSFJsY2pzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkVzVwWm05eWJYTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJGY1hWcGNtVmpkRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdWRXeHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ1lBb0tDUWtKQ1haaGNubHBibWNnZG1Wak15QjJWMjl5YkdSRWFYSmxZM1JwYjI0N0Nnb0pDUWtKZG1Wak15QjBjbUZ1YzJadmNtMUVhWEpsWTNScGIyNG9JR2x1SUhabFl6TWdaR2x5TENCcGJpQnRZWFEwSUcxaGRISnBlQ0FwSUhzS0Nna0pDUWtKY21WMGRYSnVJRzV2Y20xaGJHbDZaU2dnS0NCdFlYUnlhWGdnS2lCMlpXTTBLQ0JrYVhJc0lEQXVNQ0FwSUNrdWVIbDZJQ2s3Q2dvSkNRa0pmUW9LQ1FrSkNYWnZhV1FnYldGcGJpZ3BJSHNLQ2drSkNRa0pkbGR2Y214a1JHbHlaV04wYVc5dUlEMGdkSEpoYm5ObWIzSnRSR2x5WldOMGFXOXVLQ0J3YjNOcGRHbHZiaXdnYlc5a1pXeE5ZWFJ5YVhnZ0tUc0tDZ2tKQ1FrSkkybHVZMngxWkdVZ1BHSmxaMmx1WDNabGNuUmxlRDRLQ1FrSkNRa2phVzVqYkhWa1pTQThjSEp2YW1WamRGOTJaWEowWlhnK0Nnb0pDUWtKZlFvSkNRbGdMQW9nSUNBZ0lDQWdJQ0FnSUNCbWNtRm5iV1Z1ZEZOb1lXUmxjam9nWUFvS0NRa0pDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJSFJGY1hWcGNtVmpkRHNLQ2drSkNRbDJZWEo1YVc1bklIWmxZek1nZGxkdmNteGtSR2x5WldOMGFXOXVPd29LQ1FrSkNTTnBibU5zZFdSbElEeGpiMjF0YjI0K0Nnb0pDUWtKZG05cFpDQnRZV2x1S0NrZ2V3b0tDUWtKQ1FsMlpXTXpJR1JwY21WamRHbHZiaUE5SUc1dmNtMWhiR2w2WlNnZ2RsZHZjbXhrUkdseVpXTjBhVzl1SUNrN0Nnb0pDUWtKQ1habFl6SWdjMkZ0Y0d4bFZWWWdQU0JsY1hWcGNtVmpkRlYyS0NCa2FYSmxZM1JwYjI0Z0tUc0tDZ2tKQ1FrSloyeGZSbkpoWjBOdmJHOXlJRDBnZEdWNGRIVnlaVEpFS0NCMFJYRjFhWEpsWTNRc0lITmhiWEJzWlZWV0lDazdDZ29KQ1FrSmZRb0pDUWxnQ2lBZ0lDQWdJQ0FnZlN3Z2FTQTlJRzVsZHlCS2FTZzFMQ0ExTENBMUtTd2djaUE5SUc1bGR5QnFkQ2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUNKRGRXSmxiV0Z3Um5KdmJVVnhkV2x5WldOMElpd0tJQ0FnSUNBZ0lDQWdJQ0FnZFc1cFptOXliWE02SUNScEtHNHVkVzVwWm05eWJYTXBMQW9nSUNBZ0lDQWdJQ0FnSUNCMlpYSjBaWGhUYUdGa1pYSTZJRzR1ZG1WeWRHVjRVMmhoWkdWeUxBb2dJQ0FnSUNBZ0lDQWdJQ0JtY21GbmJXVnVkRk5vWVdSbGNqb2diaTVtY21GbmJXVnVkRk5vWVdSbGNpd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJsa1pUb2dSblFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHSnNaVzVrYVc1bk9pQkViZ29nSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUhJdWRXNXBabTl5YlhNdWRFVnhkV2x5WldOMExuWmhiSFZsSUQwZ2REc0tJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlHNWxkeUJOZENocExDQnlLU3dnYnlBOUlIUXViV2x1Um1sc2RHVnlPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBMbTFwYmtacGJIUmxjaUE5UFQwZ2JHa2dKaVlnS0hRdWJXbHVSbWxzZEdWeUlEMGdiWFFwTENCdVpYY2dYMjhvTVN3Z01UQXNJSFJvYVhNcExuVndaR0YwWlNobExDQmhLU3dnZEM1dGFXNUdhV3gwWlhJZ1BTQnZMQ0JoTG1kbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1N3Z1lTNXRZWFJsY21saGJDNWthWE53YjNObEtDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiR1ZoY2lobExDQjBMQ0J1TENCcEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQmxMbWRsZEZKbGJtUmxjbFJoY21kbGRDZ3BPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdZU0E5SURBN0lHRWdQQ0EyT3lCaEt5c3BaUzV6WlhSU1pXNWtaWEpVWVhKblpYUW9kR2hwY3l3Z1lTa3NJR1V1WTJ4bFlYSW9kQ3dnYml3Z2FTazdDaUFnSUNBZ0lDQWdaUzV6WlhSU1pXNWtaWEpVWVhKblpYUW9jaWs3Q2lBZ0lDQjlDbjBzSUVwaElEMGdibVYzSUVFc0lFMXdJRDBnYm1WM0lFRXNJRk53SUQwZ2JtVjNJRWhsTENCdGJpQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0J1WlhjZ1FTZ3hMQ0F3TENBd0tTd2dkQ0E5SURBcGV3b2dJQ0FnSUNBZ0lIUm9hWE11YVhOUWJHRnVaU0E5SUNFd0xDQjBhR2x6TG01dmNtMWhiQ0E5SUdVc0lIUm9hWE11WTI5dWMzUmhiblFnUFNCME93b2dJQ0FnZlFvZ0lDQWdjMlYwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dWIzSnRZV3d1WTI5d2VTaGxLU3dnZEdocGN5NWpiMjV6ZEdGdWRDQTlJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSRGIyMXdiMjVsYm5SektHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dWIzSnRZV3d1YzJWMEtHVXNJSFFzSUc0cExDQjBhR2x6TG1OdmJuTjBZVzUwSUQwZ2FTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxT2IzSnRZV3hCYm1SRGIzQnNZVzVoY2xCdmFXNTBLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXd3VZMjl3ZVNobEtTd2dkR2hwY3k1amIyNXpkR0Z1ZENBOUlDMTBMbVJ2ZENoMGFHbHpMbTV2Y20xaGJDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFEyOXdiR0Z1WVhKUWIybHVkSE1vWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnU21FdWMzVmlWbVZqZEc5eWN5aHVMQ0IwS1M1amNtOXpjeWhOY0M1emRXSldaV04wYjNKektHVXNJSFFwS1M1dWIzSnRZV3hwZW1Vb0tUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhSR2NtOXRUbTl5YldGc1FXNWtRMjl3YkdGdVlYSlFiMmx1ZENocExDQmxLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmNtMWhiQzVqYjNCNUtHVXVibTl5YldGc0tTd2dkR2hwY3k1amIyNXpkR0Z1ZENBOUlHVXVZMjl1YzNSaGJuUXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnViM0p0WVd4cGVtVW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0F4SUM4Z2RHaHBjeTV1YjNKdFlXd3ViR1Z1WjNSb0tDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNMbTExYkhScGNHeDVVMk5oYkdGeUtHVXBMQ0IwYUdsekxtTnZibk4wWVc1MElDbzlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J1WldkaGRHVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXVjM1JoYm5RZ0tqMGdMVEVzSUhSb2FYTXVibTl5YldGc0xtNWxaMkYwWlNncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pHbHpkR0Z1WTJWVWIxQnZhVzUwS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXd3VaRzkwS0dVcElDc2dkR2hwY3k1amIyNXpkR0Z1ZERzS0lDQWdJSDBLSUNBZ0lHUnBjM1JoYm1ObFZHOVRjR2hsY21Vb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1ScGMzUmhibU5sVkc5UWIybHVkQ2hsTG1ObGJuUmxjaWtnTFNCbExuSmhaR2wxY3pzS0lDQWdJSDBLSUNBZ0lIQnliMnBsWTNSUWIybHVkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUXVZMjl3ZVNobEtTNWhaR1JUWTJGc1pXUldaV04wYjNJb2RHaHBjeTV1YjNKdFlXd3NJQzEwYUdsekxtUnBjM1JoYm1ObFZHOVFiMmx1ZENobEtTazdDaUFnSUNCOUNpQWdJQ0JwYm5SbGNuTmxZM1JNYVc1bEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdVdVpHVnNkR0VvU21FcExDQnBJRDBnZEdocGN5NXViM0p0WVd3dVpHOTBLRzRwT3dvZ0lDQWdJQ0FnSUdsbUlDaHBJRDA5UFNBd0tTQnlaWFIxY200Z2RHaHBjeTVrYVhOMFlXNWpaVlJ2VUc5cGJuUW9aUzV6ZEdGeWRDa2dQVDA5SURBZ1B5QjBMbU52Y0hrb1pTNXpkR0Z5ZENrZ09pQnVkV3hzT3dvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnTFNobExuTjBZWEowTG1SdmRDaDBhR2x6TG01dmNtMWhiQ2tnS3lCMGFHbHpMbU52Ym5OMFlXNTBLU0F2SUdrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhJZ1BDQXdJSHg4SUhJZ1BpQXhJRDhnYm5Wc2JDQTZJSFF1WTI5d2VTaGxMbk4wWVhKMEtTNWhaR1JUWTJGc1pXUldaV04wYjNJb2Jpd2djaWs3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbk5sWTNSelRHbHVaU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbVJwYzNSaGJtTmxWRzlRYjJsdWRDaGxMbk4wWVhKMEtTd2diaUE5SUhSb2FYTXVaR2x6ZEdGdVkyVlViMUJ2YVc1MEtHVXVaVzVrS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZENBOElEQWdKaVlnYmlBK0lEQWdmSHdnYmlBOElEQWdKaVlnZENBK0lEQTdDaUFnSUNCOUNpQWdJQ0JwYm5SbGNuTmxZM1J6UW05NEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVwYm5SbGNuTmxZM1J6VUd4aGJtVW9kR2hwY3lrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpVM0JvWlhKbEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVwYm5SbGNuTmxZM1J6VUd4aGJtVW9kR2hwY3lrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0JzWVc1aGNsQnZhVzUwS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNWpiM0I1S0hSb2FYTXVibTl5YldGc0tTNXRkV3gwYVhCc2VWTmpZV3hoY2lndGRHaHBjeTVqYjI1emRHRnVkQ2s3Q2lBZ0lDQjlDaUFnSUNCaGNIQnNlVTFoZEhKcGVEUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RDQjhmQ0JUY0M1blpYUk9iM0p0WVd4TllYUnlhWGdvWlNrc0lHa2dQU0IwYUdsekxtTnZjR3hoYm1GeVVHOXBiblFvU21FcExtRndjR3g1VFdGMGNtbDROQ2hsS1N3Z2NpQTlJSFJvYVhNdWJtOXliV0ZzTG1Gd2NHeDVUV0YwY21sNE15aHVLUzV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpiMjV6ZEdGdWRDQTlJQzFwTG1SdmRDaHlLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ5WVc1emJHRjBaU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl1YzNSaGJuUWdMVDBnWlM1a2IzUW9kR2hwY3k1dWIzSnRZV3dwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWlhGMVlXeHpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1dWIzSnRZV3d1WlhGMVlXeHpLSFJvYVhNdWJtOXliV0ZzS1NBbUppQmxMbU52Ym5OMFlXNTBJRDA5UFNCMGFHbHpMbU52Ym5OMFlXNTBPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0NrdVkyOXdlU2gwYUdsektUc0tJQ0FnSUgwS2ZTd2dXVzRnUFNCdVpYY2dXWFFzSUc5eUlEMGdibVYzSUVFc0lGQnpJRDBnWTJ4aGMzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUc1bGR5QnRiaXdnZENBOUlHNWxkeUJ0Yml3Z2JpQTlJRzVsZHlCdGJpd2dhU0E5SUc1bGR5QnRiaXdnY2lBOUlHNWxkeUJ0Yml3Z1lTQTlJRzVsZHlCdGJpbDdDaUFnSUNBZ0lDQWdkR2hwY3k1d2JHRnVaWE1nUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUXNDaUFnSUNBZ0lDQWdJQ0FnSUc0c0NpQWdJQ0FnSUNBZ0lDQWdJR2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lISXNDaUFnSUNBZ0lDQWdJQ0FnSUdFS0lDQWdJQ0FnSUNCZE93b2dJQ0FnZlFvZ0lDQWdjMlYwS0dVc0lIUXNJRzRzSUdrc0lISXNJR0VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUhSb2FYTXVjR3hoYm1Wek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdld6QmRMbU52Y0hrb1pTa3NJRzliTVYwdVkyOXdlU2gwS1N3Z2Ixc3lYUzVqYjNCNUtHNHBMQ0J2V3pOZExtTnZjSGtvYVNrc0lHOWJORjB1WTI5d2VTaHlLU3dnYjFzMVhTNWpiM0I1S0dFcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbkJzWVc1bGN6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3T3lCdUlEd2dOanNnYmlzcktYUmJibDB1WTI5d2VTaGxMbkJzWVc1bGMxdHVYU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFVISnZhbVZqZEdsdmJrMWhkSEpwZUNobExDQjBJRDBnZG00cElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11Y0d4aGJtVnpMQ0JwSUQwZ1pTNWxiR1Z0Wlc1MGN5d2djaUE5SUdsYk1GMHNJR0VnUFNCcFd6RmRMQ0J2SUQwZ2FWc3lYU3dnWXlBOUlHbGJNMTBzSUd3Z1BTQnBXelJkTENCb0lEMGdhVnMxWFN3Z2RTQTlJR2xiTmwwc0lHUWdQU0JwV3pkZExDQm1JRDBnYVZzNFhTd2diU0E5SUdsYk9WMHNJRjhnUFNCcFd6RXdYU3dnWnlBOUlHbGJNVEZkTENCd0lEMGdhVnN4TWwwc0lIWWdQU0JwV3pFelhTd2dlQ0E5SUdsYk1UUmRMQ0I1SUQwZ2FWc3hOVjA3Q2lBZ0lDQWdJQ0FnYVdZZ0tHNWJNRjB1YzJWMFEyOXRjRzl1Wlc1MGN5aGpJQzBnY2l3Z1pDQXRJR3dzSUdjZ0xTQm1MQ0I1SUMwZ2NDa3VibTl5YldGc2FYcGxLQ2tzSUc1Yk1WMHVjMlYwUTI5dGNHOXVaVzUwY3loaklDc2djaXdnWkNBcklHd3NJR2NnS3lCbUxDQjVJQ3NnY0NrdWJtOXliV0ZzYVhwbEtDa3NJRzViTWwwdWMyVjBRMjl0Y0c5dVpXNTBjeWhqSUNzZ1lTd2daQ0FySUdnc0lHY2dLeUJ0TENCNUlDc2dkaWt1Ym05eWJXRnNhWHBsS0Nrc0lHNWJNMTB1YzJWMFEyOXRjRzl1Wlc1MGN5aGpJQzBnWVN3Z1pDQXRJR2dzSUdjZ0xTQnRMQ0I1SUMwZ2Rpa3VibTl5YldGc2FYcGxLQ2tzSUc1Yk5GMHVjMlYwUTI5dGNHOXVaVzUwY3loaklDMGdieXdnWkNBdElIVXNJR2NnTFNCZkxDQjVJQzBnZUNrdWJtOXliV0ZzYVhwbEtDa3NJSFFnUFQwOUlIWnVLU0J1V3pWZExuTmxkRU52YlhCdmJtVnVkSE1vWXlBcklHOHNJR1FnS3lCMUxDQm5JQ3NnWHl3Z2VTQXJJSGdwTG01dmNtMWhiR2w2WlNncE93b2dJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIUWdQVDA5SUVkeUtTQnVXelZkTG5ObGRFTnZiWEJ2Ym1WdWRITW9ieXdnZFN3Z1h5d2dlQ2t1Ym05eWJXRnNhWHBsS0NrN0NpQWdJQ0FnSUNBZ1pXeHpaU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9JbFJJVWtWRkxrWnlkWE4wZFcwdWMyVjBSbkp2YlZCeWIycGxZM1JwYjI1TllYUnlhWGdvS1RvZ1NXNTJZV3hwWkNCamIyOXlaR2x1WVhSbElITjVjM1JsYlRvZ0lpQXJJSFFwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdhVzUwWlhKelpXTjBjMDlpYW1WamRDaGxLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tHVXVZbTkxYm1ScGJtZFRjR2hsY21VZ0lUMDlJSFp2YVdRZ01Da2daUzVpYjNWdVpHbHVaMU53YUdWeVpTQTlQVDBnYm5Wc2JDQW1KaUJsTG1OdmJYQjFkR1ZDYjNWdVpHbHVaMU53YUdWeVpTZ3BMQ0JaYmk1amIzQjVLR1V1WW05MWJtUnBibWRUY0dobGNtVXBMbUZ3Y0d4NVRXRjBjbWw0TkNobExtMWhkSEpwZUZkdmNteGtLVHNLSUNBZ0lDQWdJQ0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIUWdQU0JsTG1kbGIyMWxkSEo1T3dvZ0lDQWdJQ0FnSUNBZ0lDQjBMbUp2ZFc1a2FXNW5VM0JvWlhKbElEMDlQU0J1ZFd4c0lDWW1JSFF1WTI5dGNIVjBaVUp2ZFc1a2FXNW5VM0JvWlhKbEtDa3NJRmx1TG1OdmNIa29kQzVpYjNWdVpHbHVaMU53YUdWeVpTa3VZWEJ3YkhsTllYUnlhWGcwS0dVdWJXRjBjbWw0VjI5eWJHUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1cGJuUmxjbk5sWTNSelUzQm9aWEpsS0ZsdUtUc0tJQ0FnSUgwS0lDQWdJR2x1ZEdWeWMyVmpkSE5UY0hKcGRHVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJaYmk1alpXNTBaWEl1YzJWMEtEQXNJREFzSURBcExDQlpiaTV5WVdScGRYTWdQU0F1TnpBM01UQTJOemd4TVRnMk5UUTNOaXdnV1c0dVlYQndiSGxOWVhSeWFYZzBLR1V1YldGMGNtbDRWMjl5YkdRcExDQjBhR2x6TG1sdWRHVnljMlZqZEhOVGNHaGxjbVVvV1c0cE93b2dJQ0FnZlFvZ0lDQWdhVzUwWlhKelpXTjBjMU53YUdWeVpTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuQnNZVzVsY3l3Z2JpQTlJR1V1WTJWdWRHVnlMQ0JwSUQwZ0xXVXVjbUZrYVhWek93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2NpQTlJREE3SUhJZ1BDQTJPeUJ5S3lzcGFXWWdLSFJiY2wwdVpHbHpkR0Z1WTJWVWIxQnZhVzUwS0c0cElEd2dhU2tnY21WMGRYSnVJQ0V4T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUFoTURzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5YzJWamRITkNiM2dvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTV3YkdGdVpYTTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnVJRDBnTURzZ2JpQThJRFk3SUc0ckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEZ0dVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOXlMbmdnUFNCcExtNXZjbTFoYkM1NElENGdNQ0EvSUdVdWJXRjRMbmdnT2lCbExtMXBiaTU0TENCdmNpNTVJRDBnYVM1dWIzSnRZV3d1ZVNBK0lEQWdQeUJsTG0xaGVDNTVJRG9nWlM1dGFXNHVlU3dnYjNJdWVpQTlJR2t1Ym05eWJXRnNMbm9nUGlBd0lEOGdaUzV0WVhndWVpQTZJR1V1YldsdUxub3NJR2t1WkdsemRHRnVZMlZVYjFCdmFXNTBLRzl5S1NBOElEQXBJSEpsZEhWeWJpQWhNVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJQ0V3T3dvZ0lDQWdmUW9nSUNBZ1kyOXVkR0ZwYm5OUWIybHVkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbkJzWVc1bGN6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3T3lCdUlEd2dOanNnYmlzcktXbG1JQ2gwVzI1ZExtUnBjM1JoYm1ObFZHOVFiMmx1ZENobEtTQThJREFwSUhKbGRIVnliaUFoTVRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnSVRBN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9LUzVqYjNCNUtIUm9hWE1wT3dvZ0lDQWdmUXA5T3dwbWRXNWpkR2x2YmlCRlpDZ3BJSHNLSUNBZ0lHeGxkQ0J6TVNBOUlHNTFiR3dzSUdVZ1BTQWhNU3dnZENBOUlHNTFiR3dzSUc0Z1BTQnVkV3hzT3dvZ0lDQWdablZ1WTNScGIyNGdhU2h5TENCaEtTQjdDaUFnSUNBZ0lDQWdkQ2h5TENCaEtTd2diaUE5SUhNeExuSmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaU2hwS1RzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCN0NpQWdJQ0FnSUNBZ2MzUmhjblE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JsSUNFOVBTQWhNQ0FtSmlCMElDRTlQU0J1ZFd4c0lDWW1JQ2h1SUQwZ2N6RXVjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsS0drcExDQmxJRDBnSVRBcE93b2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjM1J2Y0RvZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhNeExtTmhibU5sYkVGdWFXMWhkR2x2YmtaeVlXMWxLRzRwTENCbElEMGdJVEU3Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCelpYUkJibWx0WVhScGIyNU1iMjl3T2lCbWRXNWpkR2x2YmloeUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhRZ1BTQnlPd29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYzJWMFEyOXVkR1Y0ZERvZ1puVnVZM1JwYjI0b2Npa2dld29nSUNBZ0lDQWdJQ0FnSUNCek1TQTlJSEk3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmVHNLZlFwbWRXNWpkR2x2YmlCaWNDaHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0JsTG1selYyVmlSMHd5TENCdUlEMGdibVYzSUZkbFlXdE5ZWEE3Q2lBZ0lDQm1kVzVqZEdsdmJpQnBLR3dzSUdncElIc0tJQ0FnSUNBZ0lDQnNaWFFnZFNBOUlHd3VZWEp5WVhrc0lHUWdQU0JzTG5WellXZGxMQ0JtSUQwZ2N6RXVZM0psWVhSbFFuVm1abVZ5S0NrN0NpQWdJQ0FnSUNBZ2N6RXVZbWx1WkVKMVptWmxjaWhvTENCbUtTd2djekV1WW5WbVptVnlSR0YwWVNob0xDQjFMQ0JrS1N3Z2JDNXZibFZ3Ykc5aFpFTmhiR3hpWVdOcktDazdDaUFnSUNBZ0lDQWdiR1YwSUcwN0NpQWdJQ0FnSUNBZ2FXWWdLSFVnYVc1emRHRnVZMlZ2WmlCR2JHOWhkRE15UVhKeVlYa3BJRzBnUFNCek1TNUdURTlCVkRzS0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoMUlHbHVjM1JoYm1ObGIyWWdWV2x1ZERFMlFYSnlZWGtwSUdsbUlDaHNMbWx6Um14dllYUXhOa0oxWm1abGNrRjBkSEpwWW5WMFpTa2dhV1lnS0hRcElHMGdQU0J6TVM1SVFVeEdYMFpNVDBGVU93b2dJQ0FnSUNBZ0lHVnNjMlVnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ0pVU0ZKRlJTNVhaV0pIVEVGMGRISnBZblYwWlhNNklGVnpZV2RsSUc5bUlFWnNiMkYwTVRaQ2RXWm1aWEpCZEhSeWFXSjFkR1VnY21WeGRXbHlaWE1nVjJWaVIwd3lMaUlwT3dvZ0lDQWdJQ0FnSUdWc2MyVWdiU0E5SUhNeExsVk9VMGxIVGtWRVgxTklUMUpVT3dvZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hVZ2FXNXpkR0Z1WTJWdlppQkpiblF4TmtGeWNtRjVLU0J0SUQwZ2N6RXVVMGhQVWxRN0NpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2RTQnBibk4wWVc1alpXOW1JRlZwYm5Rek1rRnljbUY1S1NCdElEMGdjekV1VlU1VFNVZE9SVVJmU1U1VU93b2dJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIVWdhVzV6ZEdGdVkyVnZaaUJKYm5Rek1rRnljbUY1S1NCdElEMGdjekV1U1U1VU93b2dJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIVWdhVzV6ZEdGdVkyVnZaaUJKYm5RNFFYSnlZWGtwSUcwZ1BTQnpNUzVDV1ZSRk93b2dJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIVWdhVzV6ZEdGdVkyVnZaaUJWYVc1ME9FRnljbUY1S1NCdElEMGdjekV1VlU1VFNVZE9SVVJmUWxsVVJUc0tJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDFJR2x1YzNSaGJtTmxiMllnVldsdWREaERiR0Z0Y0dWa1FYSnlZWGtwSUcwZ1BTQnpNUzVWVGxOSlIwNUZSRjlDV1ZSRk93b2dJQ0FnSUNBZ0lHVnNjMlVnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ0pVU0ZKRlJTNVhaV0pIVEVGMGRISnBZblYwWlhNNklGVnVjM1Z3Y0c5eWRHVmtJR0oxWm1abGNpQmtZWFJoSUdadmNtMWhkRG9nSWlBcklIVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdJQ0FnSUdKMVptWmxjam9nWml3S0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ2JTd0tJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpYTlFaWEpGYkdWdFpXNTBPaUIxTGtKWlZFVlRYMUJGVWw5RlRFVk5SVTVVTEFvZ0lDQWdJQ0FnSUNBZ0lDQjJaWEp6YVc5dU9pQnNMblpsY25OcGIyNEtJQ0FnSUNBZ0lDQjlPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnY2loc0xDQm9MQ0IxS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCb0xtRnljbUY1TENCbUlEMGdhQzUxY0dSaGRHVlNZVzVuWlRzS0lDQWdJQ0FnSUNCek1TNWlhVzVrUW5WbVptVnlLSFVzSUd3cExDQm1MbU52ZFc1MElEMDlQU0F0TVNBL0lITXhMbUoxWm1abGNsTjFZa1JoZEdFb2RTd2dNQ3dnWkNrZ09pQW9kQ0EvSUhNeExtSjFabVpsY2xOMVlrUmhkR0VvZFN3Z1ppNXZabVp6WlhRZ0tpQmtMa0paVkVWVFgxQkZVbDlGVEVWTlJVNVVMQ0JrTENCbUxtOW1abk5sZEN3Z1ppNWpiM1Z1ZENrZ09pQnpNUzVpZFdabVpYSlRkV0pFWVhSaEtIVXNJR1l1YjJabWMyVjBJQ29nWkM1Q1dWUkZVMTlRUlZKZlJVeEZUVVZPVkN3Z1pDNXpkV0poY25KaGVTaG1MbTltWm5ObGRDd2daaTV2Wm1aelpYUWdLeUJtTG1OdmRXNTBLU2tzSUdZdVkyOTFiblFnUFNBdE1Ta3NJR2d1YjI1VmNHeHZZV1JEWVd4c1ltRmpheWdwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1lTaHNLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR3d1YVhOSmJuUmxjbXhsWVhabFpFSjFabVpsY2tGMGRISnBZblYwWlNBbUppQW9iQ0E5SUd3dVpHRjBZU2tzSUc0dVoyVjBLR3dwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2J5aHNLU0I3Q2lBZ0lDQWdJQ0FnYkM1cGMwbHVkR1Z5YkdWaGRtVmtRblZtWm1WeVFYUjBjbWxpZFhSbElDWW1JQ2hzSUQwZ2JDNWtZWFJoS1RzS0lDQWdJQ0FnSUNCc1pYUWdhQ0E5SUc0dVoyVjBLR3dwT3dvZ0lDQWdJQ0FnSUdnZ0ppWWdLSE14TG1SbGJHVjBaVUoxWm1abGNpaG9MbUoxWm1abGNpa3NJRzR1WkdWc1pYUmxLR3dwS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHTW9iQ3dnYUNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hzTG1selIweENkV1ptWlhKQmRIUnlhV0oxZEdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0J1TG1kbGRDaHNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0tDRmtJSHg4SUdRdWRtVnljMmx2YmlBOElHd3VkbVZ5YzJsdmJpa2dKaVlnYmk1elpYUW9iQ3dnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WbVptVnlPaUJzTG1KMVptWmxjaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklHd3VkSGx3WlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKNWRHVnpVR1Z5Uld4bGJXVnVkRG9nYkM1bGJHVnRaVzUwVTJsNlpTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmxjbk5wYjI0NklHd3VkbVZ5YzJsdmJnb2dJQ0FnSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNMbWx6U1c1MFpYSnNaV0YyWldSQ2RXWm1aWEpCZEhSeWFXSjFkR1VnSmlZZ0tHd2dQU0JzTG1SaGRHRXBPd29nSUNBZ0lDQWdJR3hsZENCMUlEMGdiaTVuWlhRb2JDazdDaUFnSUNBZ0lDQWdkU0E5UFQwZ2RtOXBaQ0F3SUQ4Z2JpNXpaWFFvYkN3Z2FTaHNMQ0JvS1NrZ09pQjFMblpsY25OcGIyNGdQQ0JzTG5abGNuTnBiMjRnSmlZZ0tISW9kUzVpZFdabVpYSXNJR3dzSUdncExDQjFMblpsY25OcGIyNGdQU0JzTG5abGNuTnBiMjRwT3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCblpYUTZJR0VzQ2lBZ0lDQWdJQ0FnY21WdGIzWmxPaUJ2TEFvZ0lDQWdJQ0FnSUhWd1pHRjBaVG9nWXdvZ0lDQWdmVHNLZlFwMllYSWdKSElnUFNCamJHRnpjeUJ6TVNCbGVIUmxibVJ6SUVkbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F4TENCMElEMGdNU3dnYmlBOUlERXNJR2tnUFNBeEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG5SNWNHVWdQU0FpVUd4aGJtVkhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c2SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2dkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2hUWldkdFpXNTBjem9nYml3S0lDQWdJQ0FnSUNBZ0lDQWdhR1ZwWjJoMFUyVm5iV1Z1ZEhNNklHa0tJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJR3hsZENCeUlEMGdaU0F2SURJc0lHRWdQU0IwSUM4Z01pd2dieUE5SUUxaGRHZ3VabXh2YjNJb2Jpa3NJR01nUFNCTllYUm9MbVpzYjI5eUtHa3BMQ0JzSUQwZ2J5QXJJREVzSUdnZ1BTQmpJQ3NnTVN3Z2RTQTlJR1VnTHlCdkxDQmtJRDBnZENBdklHTXNJR1lnUFNCYlhTd2diU0E5SUZ0ZExDQmZJRDBnVzEwc0lHY2dQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhBZ1BTQXdPeUJ3SUR3Z2FEc2djQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhZZ1BTQndJQ29nWkNBdElHRTdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZUNBOUlEQTdJSGdnUENCc095QjRLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIa2dQU0I0SUNvZ2RTQXRJSEk3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0TG5CMWMyZ29lU3dnTFhZc0lEQXBMQ0JmTG5CMWMyZ29NQ3dnTUN3Z01Ta3NJR2N1Y0hWemFDaDRJQzhnYnlrc0lHY3VjSFZ6YUNneElDMGdjQ0F2SUdNcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY0NBOUlEQTdJSEFnUENCak95QndLeXNwWm05eUtHeGxkQ0IySUQwZ01Ec2dkaUE4SUc4N0lIWXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0I0SUQwZ2RpQXJJR3dnS2lCd0xDQjVJRDBnZGlBcklHd2dLaUFvY0NBcklERXBMQ0JpSUQwZ2RpQXJJREVnS3lCc0lDb2dLSEFnS3lBeEtTd2dkeUE5SUhZZ0t5QXhJQ3NnYkNBcUlIQTdDaUFnSUNBZ0lDQWdJQ0FnSUdZdWNIVnphQ2g0TENCNUxDQjNLU3dnWmk1d2RYTm9LSGtzSUdJc0lIY3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRWx1WkdWNEtHWXBMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpY0c5emFYUnBiMjRpTENCdVpYY2dkbVVvYlN3Z015a3BMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpYm05eWJXRnNJaXdnYm1WM0lIWmxLRjhzSURNcEtTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JblYySWl3Z2JtVjNJSFpsS0djc0lESXBLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG5CaGNtRnRaWFJsY25NZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQmxMbkJoY21GdFpYUmxjbk1wTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJR1p5YjIxS1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lITXhLR1V1ZDJsa2RHZ3NJR1V1YUdWcFoyaDBMQ0JsTG5kcFpIUm9VMlZuYldWdWRITXNJR1V1YUdWcFoyaDBVMlZuYldWdWRITXBPd29nSUNBZ2ZRcDlMQ0JGY0NBOUlHQWphV1prWldZZ1ZWTkZYMEZNVUVoQlNFRlRTQW9KYVdZZ0tDQmthV1ptZFhObFEyOXNiM0l1WVNBOElHZGxkRUZzY0doaFNHRnphRlJvY21WemFHOXNaQ2dnZGxCdmMybDBhVzl1SUNrZ0tTQmthWE5qWVhKa093b2paVzVrYVdaZ0xDQlVjQ0E5SUdBamFXWmtaV1lnVlZORlgwRk1VRWhCU0VGVFNBb0pZMjl1YzNRZ1pteHZZWFFnUVV4UVNFRmZTRUZUU0Y5VFEwRk1SU0E5SURBdU1EVTdDZ2xtYkc5aGRDQm9ZWE5vTWtRb0lIWmxZeklnZG1Gc2RXVWdLU0I3Q2drSmNtVjBkWEp1SUdaeVlXTjBLQ0F4TGpCbE5DQXFJSE5wYmlnZ01UY3VNQ0FxSUhaaGJIVmxMbmdnS3lBd0xqRWdLaUIyWVd4MVpTNTVJQ2tnS2lBb0lEQXVNU0FySUdGaWN5Z2djMmx1S0NBeE15NHdJQ29nZG1Gc2RXVXVlU0FySUhaaGJIVmxMbmdnS1NBcElDa2dLVHNLQ1gwS0NXWnNiMkYwSUdoaGMyZ3pSQ2dnZG1Wak15QjJZV3gxWlNBcElIc0tDUWx5WlhSMWNtNGdhR0Z6YURKRUtDQjJaV015S0NCb1lYTm9Na1FvSUhaaGJIVmxMbmg1SUNrc0lIWmhiSFZsTG5vZ0tTQXBPd29KZlFvSlpteHZZWFFnWjJWMFFXeHdhR0ZJWVhOb1ZHaHlaWE5vYjJ4a0tDQjJaV016SUhCdmMybDBhVzl1SUNrZ2V3b0pDV1pzYjJGMElHMWhlRVJsY21sMklEMGdiV0Y0S0FvSkNRbHNaVzVuZEdnb0lHUkdaSGdvSUhCdmMybDBhVzl1TG5oNWVpQXBJQ2tzQ2drSkNXeGxibWQwYUNnZ1pFWmtlU2dnY0c5emFYUnBiMjR1ZUhsNklDa2dLUW9KQ1NrN0Nna0pabXh2WVhRZ2NHbDRVMk5oYkdVZ1BTQXhMakFnTHlBb0lFRk1VRWhCWDBoQlUwaGZVME5CVEVVZ0tpQnRZWGhFWlhKcGRpQXBPd29KQ1habFl6SWdjR2w0VTJOaGJHVnpJRDBnZG1Wak1pZ0tDUWtKWlhod01pZ2dabXh2YjNJb0lHeHZaeklvSUhCcGVGTmpZV3hsSUNrZ0tTQXBMQW9KQ1FsbGVIQXlLQ0JqWldsc0tDQnNiMmN5S0NCd2FYaFRZMkZzWlNBcElDa2dLUW9KQ1NrN0Nna0pkbVZqTWlCaGJIQm9ZU0E5SUhabFl6SW9DZ2tKQ1doaGMyZ3pSQ2dnWm14dmIzSW9JSEJwZUZOallXeGxjeTU0SUNvZ2NHOXphWFJwYjI0dWVIbDZJQ2tnS1N3S0NRa0phR0Z6YURORUtDQm1iRzl2Y2lnZ2NHbDRVMk5oYkdWekxua2dLaUJ3YjNOcGRHbHZiaTU0ZVhvZ0tTQXBDZ2tKS1RzS0NRbG1iRzloZENCc1pYSndSbUZqZEc5eUlEMGdabkpoWTNRb0lHeHZaeklvSUhCcGVGTmpZV3hsSUNrZ0tUc0tDUWxtYkc5aGRDQjRJRDBnS0NBeExqQWdMU0JzWlhKd1JtRmpkRzl5SUNrZ0tpQmhiSEJvWVM1NElDc2diR1Z5Y0VaaFkzUnZjaUFxSUdGc2NHaGhMbms3Q2drSlpteHZZWFFnWVNBOUlHMXBiaWdnYkdWeWNFWmhZM1J2Y2l3Z01TNHdJQzBnYkdWeWNFWmhZM1J2Y2lBcE93b0pDWFpsWXpNZ1kyRnpaWE1nUFNCMlpXTXpLQW9KQ1FsNElDb2dlQ0F2SUNnZ01pNHdJQ29nWVNBcUlDZ2dNUzR3SUMwZ1lTQXBJQ2tzQ2drSkNTZ2dlQ0F0SURBdU5TQXFJR0VnS1NBdklDZ2dNUzR3SUMwZ1lTQXBMQW9KQ1FreExqQWdMU0FvSUNnZ01TNHdJQzBnZUNBcElDb2dLQ0F4TGpBZ0xTQjRJQ2tnTHlBb0lESXVNQ0FxSUdFZ0tpQW9JREV1TUNBdElHRWdLU0FwSUNrS0NRa3BPd29KQ1dac2IyRjBJSFJvY21WemFHOXNaQ0E5SUNnZ2VDQThJQ2dnTVM0d0lDMGdZU0FwSUNrS0NRa0pQeUFvSUNnZ2VDQThJR0VnS1NBL0lHTmhjMlZ6TG5nZ09pQmpZWE5sY3k1NUlDa0tDUWtKT2lCallYTmxjeTU2T3dvSkNYSmxkSFZ5YmlCamJHRnRjQ2dnZEdoeVpYTm9iMnhrSUN3Z01TNHdaUzAyTENBeExqQWdLVHNLQ1gwS0kyVnVaR2xtWUN3Z2QzQWdQU0JnSTJsbVpHVm1JRlZUUlY5QlRGQklRVTFCVUFvSlpHbG1ablZ6WlVOdmJHOXlMbUVnS2owZ2RHVjRkSFZ5WlRKRUtDQmhiSEJvWVUxaGNDd2dka0ZzY0doaFRXRndWWFlnS1M1bk93b2paVzVrYVdaZ0xDQkJjQ0E5SUdBamFXWmtaV1lnVlZORlgwRk1VRWhCVFVGUUNnbDFibWxtYjNKdElITmhiWEJzWlhJeVJDQmhiSEJvWVUxaGNEc0tJMlZ1WkdsbVlDd2dVbkFnUFNCZ0kybG1aR1ZtSUZWVFJWOUJURkJJUVZSRlUxUUtDV2xtSUNnZ1pHbG1ablZ6WlVOdmJHOXlMbUVnUENCaGJIQm9ZVlJsYzNRZ0tTQmthWE5qWVhKa093b2paVzVrYVdaZ0xDQkRjQ0E5SUdBamFXWmtaV1lnVlZORlgwRk1VRWhCVkVWVFZBb0pkVzVwWm05eWJTQm1iRzloZENCaGJIQm9ZVlJsYzNRN0NpTmxibVJwWm1Bc0lGQndJRDBnWUNOcFptUmxaaUJWVTBWZlFVOU5RVkFLQ1dac2IyRjBJR0Z0WW1sbGJuUlBZMk5zZFhOcGIyNGdQU0FvSUhSbGVIUjFjbVV5UkNnZ1lXOU5ZWEFzSUhaQmIwMWhjRlYySUNrdWNpQXRJREV1TUNBcElDb2dZVzlOWVhCSmJuUmxibk5wZEhrZ0t5QXhMakE3Q2dseVpXWnNaV04wWldSTWFXZG9kQzVwYm1ScGNtVmpkRVJwWm1aMWMyVWdLajBnWVcxaWFXVnVkRTlqWTJ4MWMybHZianNLQ1NOcFppQmtaV1pwYm1Wa0tDQlZVMFZmUlU1V1RVRlFJQ2tnSmlZZ1pHVm1hVzVsWkNnZ1UxUkJUa1JCVWtRZ0tRb0pDV1pzYjJGMElHUnZkRTVXSUQwZ2MyRjBkWEpoZEdVb0lHUnZkQ2dnWjJWdmJXVjBjbmxPYjNKdFlXd3NJR2RsYjIxbGRISjVWbWxsZDBScGNpQXBJQ2s3Q2drSmNtVm1iR1ZqZEdWa1RHbG5hSFF1YVc1a2FYSmxZM1JUY0dWamRXeGhjaUFxUFNCamIyMXdkWFJsVTNCbFkzVnNZWEpQWTJOc2RYTnBiMjRvSUdSdmRFNVdMQ0JoYldKcFpXNTBUMk5qYkhWemFXOXVMQ0J0WVhSbGNtbGhiQzV5YjNWbmFHNWxjM01nS1RzS0NTTmxibVJwWmdvalpXNWthV1pnTENCTWNDQTlJR0FqYVdaa1pXWWdWVk5GWDBGUFRVRlFDZ2wxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0JoYjAxaGNEc0tDWFZ1YVdadmNtMGdabXh2WVhRZ1lXOU5ZWEJKYm5SbGJuTnBkSGs3Q2lObGJtUnBabUFzSUVsd0lEMGdZSFpsWXpNZ2RISmhibk5tYjNKdFpXUWdQU0IyWldNektDQndiM05wZEdsdmJpQXBPd29qYVdaa1pXWWdWVk5GWDBGTVVFaEJTRUZUU0FvSmRsQnZjMmwwYVc5dUlEMGdkbVZqTXlnZ2NHOXphWFJwYjI0Z0tUc0tJMlZ1WkdsbVlDd2dWWEFnUFNCZ2RtVmpNeUJ2WW1wbFkzUk9iM0p0WVd3Z1BTQjJaV016S0NCdWIzSnRZV3dnS1RzS0kybG1aR1ZtSUZWVFJWOVVRVTVIUlU1VUNnbDJaV016SUc5aWFtVmpkRlJoYm1kbGJuUWdQU0IyWldNektDQjBZVzVuWlc1MExuaDVlaUFwT3dvalpXNWthV1pnTENCRWNDQTlJR0JtYkc5aGRDQkhYMEpzYVc1dVVHaHZibWRmU1cxd2JHbGphWFFvSUNrZ2V3b0pjbVYwZFhKdUlEQXVNalU3Q24wS1pteHZZWFFnUkY5Q2JHbHVibEJvYjI1bktDQmpiMjV6ZENCcGJpQm1iRzloZENCemFHbHVhVzVsYzNNc0lHTnZibk4wSUdsdUlHWnNiMkYwSUdSdmRFNUlJQ2tnZXdvSmNtVjBkWEp1SUZKRlEwbFFVazlEUVV4ZlVFa2dLaUFvSUhOb2FXNXBibVZ6Y3lBcUlEQXVOU0FySURFdU1DQXBJQ29nY0c5M0tDQmtiM1JPU0N3Z2MyaHBibWx1WlhOeklDazdDbjBLZG1Wak15QkNVa1JHWDBKc2FXNXVVR2h2Ym1jb0lHTnZibk4wSUdsdUlIWmxZek1nYkdsbmFIUkVhWElzSUdOdmJuTjBJR2x1SUhabFl6TWdkbWxsZDBScGNpd2dZMjl1YzNRZ2FXNGdkbVZqTXlCdWIzSnRZV3dzSUdOdmJuTjBJR2x1SUhabFl6TWdjM0JsWTNWc1lYSkRiMnh2Y2l3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnYzJocGJtbHVaWE56SUNrZ2V3b0pkbVZqTXlCb1lXeG1SR2x5SUQwZ2JtOXliV0ZzYVhwbEtDQnNhV2RvZEVScGNpQXJJSFpwWlhkRWFYSWdLVHNLQ1dac2IyRjBJR1J2ZEU1SUlEMGdjMkYwZFhKaGRHVW9JR1J2ZENnZ2JtOXliV0ZzTENCb1lXeG1SR2x5SUNrZ0tUc0tDV1pzYjJGMElHUnZkRlpJSUQwZ2MyRjBkWEpoZEdVb0lHUnZkQ2dnZG1sbGQwUnBjaXdnYUdGc1prUnBjaUFwSUNrN0NnbDJaV016SUVZZ1BTQkdYMU5qYUd4cFkyc29JSE53WldOMWJHRnlRMjlzYjNJc0lERXVNQ3dnWkc5MFZrZ2dLVHNLQ1dac2IyRjBJRWNnUFNCSFgwSnNhVzV1VUdodmJtZGZTVzF3YkdsamFYUW9JQ2s3Q2dsbWJHOWhkQ0JFSUQwZ1JGOUNiR2x1YmxCb2IyNW5LQ0J6YUdsdWFXNWxjM01zSUdSdmRFNUlJQ2s3Q2dseVpYUjFjbTRnUmlBcUlDZ2dSeUFxSUVRZ0tUc0tmU0F2THlCMllXeHBaR0YwWldSZ0xDQk9jQ0E5SUdBamFXWmtaV1lnVlZORlgwbFNTVVJGVTBORlRrTkZDZ2xqYjI1emRDQnRZWFF6SUZoWldsOVVUMTlTUlVNM01Ea2dQU0J0WVhRektBb0pDU0F6TGpJME1EUTFORElzSUMwd0xqazJPVEkyTmpBc0lDQXdMakExTlRZME16UXNDZ2tKTFRFdU5UTTNNVE00TlN3Z0lERXVPRGMyTURFd09Dd2dMVEF1TWpBME1ESTFPU3dLQ1FrdE1DNDBPVGcxTXpFMExDQWdNQzR3TkRFMU5UWXdMQ0FnTVM0d05UY3lNalV5Q2drcE93b0pkbVZqTXlCR2NtVnpibVZzTUZSdlNXOXlLQ0IyWldNeklHWnlaWE51Wld3d0lDa2dld29KQ1habFl6TWdjM0Z5ZEVZd0lEMGdjM0Z5ZENnZ1puSmxjMjVsYkRBZ0tUc0tDUWx5WlhSMWNtNGdLQ0IyWldNektDQXhMakFnS1NBcklITnhjblJHTUNBcElDOGdLQ0IyWldNektDQXhMakFnS1NBdElITnhjblJHTUNBcE93b0pmUW9KZG1Wak15QkpiM0pVYjBaeVpYTnVaV3d3S0NCMlpXTXpJSFJ5WVc1emJXbDBkR1ZrU1c5eUxDQm1iRzloZENCcGJtTnBaR1Z1ZEVsdmNpQXBJSHNLQ1FseVpYUjFjbTRnY0c5M01pZ2dLQ0IwY21GdWMyMXBkSFJsWkVsdmNpQXRJSFpsWXpNb0lHbHVZMmxrWlc1MFNXOXlJQ2tnS1NBdklDZ2dkSEpoYm5OdGFYUjBaV1JKYjNJZ0t5QjJaV016S0NCcGJtTnBaR1Z1ZEVsdmNpQXBJQ2tnS1RzS0NYMEtDV1pzYjJGMElFbHZjbFJ2Um5KbGMyNWxiREFvSUdac2IyRjBJSFJ5WVc1emJXbDBkR1ZrU1c5eUxDQm1iRzloZENCcGJtTnBaR1Z1ZEVsdmNpQXBJSHNLQ1FseVpYUjFjbTRnY0c5M01pZ2dLQ0IwY21GdWMyMXBkSFJsWkVsdmNpQXRJR2x1WTJsa1pXNTBTVzl5SUNrZ0x5QW9JSFJ5WVc1emJXbDBkR1ZrU1c5eUlDc2dhVzVqYVdSbGJuUkpiM0lnS1NrN0NnbDlDZ2wyWldNeklHVjJZV3hUWlc1emFYUnBkbWwwZVNnZ1pteHZZWFFnVDFCRUxDQjJaV016SUhOb2FXWjBJQ2tnZXdvSkNXWnNiMkYwSUhCb1lYTmxJRDBnTWk0d0lDb2dVRWtnS2lCUFVFUWdLaUF4TGpCbExUazdDZ2tKZG1Wak15QjJZV3dnUFNCMlpXTXpLQ0ExTGpRNE5UWmxMVEV6TENBMExqUXlNREZsTFRFekxDQTFMakkwT0RGbExURXpJQ2s3Q2drSmRtVmpNeUJ3YjNNZ1BTQjJaV016S0NBeExqWTRNVEJsS3pBMkxDQXhMamM1TlRObEt6QTJMQ0F5TGpJd09EUmxLekEySUNrN0Nna0pkbVZqTXlCMllYSWdQU0IyWldNektDQTBMak15TnpobEt6QTVMQ0E1TGpNd05EWmxLekE1TENBMkxqWXhNakZsS3pBNUlDazdDZ2tKZG1Wak15QjRlWG9nUFNCMllXd2dLaUJ6Y1hKMEtDQXlMakFnS2lCUVNTQXFJSFpoY2lBcElDb2dZMjl6S0NCd2IzTWdLaUJ3YUdGelpTQXJJSE5vYVdaMElDa2dLaUJsZUhBb0lDMGdjRzkzTWlnZ2NHaGhjMlVnS1NBcUlIWmhjaUFwT3dvSkNYaDVlaTU0SUNzOUlEa3VOelEzTUdVdE1UUWdLaUJ6Y1hKMEtDQXlMakFnS2lCUVNTQXFJRFF1TlRJNE1tVXJNRGtnS1NBcUlHTnZjeWdnTWk0eU16azVaU3N3TmlBcUlIQm9ZWE5sSUNzZ2MyaHBablJiSURBZ1hTQXBJQ29nWlhod0tDQXRJRFF1TlRJNE1tVXJNRGtnS2lCd2IzY3lLQ0J3YUdGelpTQXBJQ2s3Q2drSmVIbDZJQzg5SURFdU1EWTROV1V0TnpzS0NRbDJaV016SUhKbllpQTlJRmhaV2w5VVQxOVNSVU0zTURrZ0tpQjRlWG83Q2drSmNtVjBkWEp1SUhKbllqc0tDWDBLQ1habFl6TWdaWFpoYkVseWFXUmxjMk5sYm1ObEtDQm1iRzloZENCdmRYUnphV1JsU1U5U0xDQm1iRzloZENCbGRHRXlMQ0JtYkc5aGRDQmpiM05VYUdWMFlURXNJR1pzYjJGMElIUm9hVzVHYVd4dFZHaHBZMnR1WlhOekxDQjJaV016SUdKaGMyVkdNQ0FwSUhzS0NRbDJaV016SUVrN0Nna0pabXh2WVhRZ2FYSnBaR1Z6WTJWdVkyVkpUMUlnUFNCdGFYZ29JRzkxZEhOcFpHVkpUMUlzSUdWMFlUSXNJSE50YjI5MGFITjBaWEFvSURBdU1Dd2dNQzR3TXl3Z2RHaHBia1pwYkcxVWFHbGphMjVsYzNNZ0tTQXBPd29KQ1dac2IyRjBJSE5wYmxSb1pYUmhNbE54SUQwZ2NHOTNNaWdnYjNWMGMybGtaVWxQVWlBdklHbHlhV1JsYzJObGJtTmxTVTlTSUNrZ0tpQW9JREV1TUNBdElIQnZkeklvSUdOdmMxUm9aWFJoTVNBcElDazdDZ2tKWm14dllYUWdZMjl6VkdobGRHRXlVM0VnUFNBeExqQWdMU0J6YVc1VWFHVjBZVEpUY1RzS0NRbHBaaUFvSUdOdmMxUm9aWFJoTWxOeElEd2dNQzR3SUNrZ2V3b0pDUWx5WlhSMWNtNGdkbVZqTXlnZ01TNHdJQ2s3Q2drSmZRb0pDV1pzYjJGMElHTnZjMVJvWlhSaE1pQTlJSE54Y25Rb0lHTnZjMVJvWlhSaE1sTnhJQ2s3Q2drSlpteHZZWFFnVWpBZ1BTQkpiM0pVYjBaeVpYTnVaV3d3S0NCcGNtbGtaWE5qWlc1alpVbFBVaXdnYjNWMGMybGtaVWxQVWlBcE93b0pDV1pzYjJGMElGSXhNaUE5SUVaZlUyTm9iR2xqYXlnZ1VqQXNJREV1TUN3Z1kyOXpWR2hsZEdFeElDazdDZ2tKWm14dllYUWdWREV5TVNBOUlERXVNQ0F0SUZJeE1qc0tDUWxtYkc5aGRDQndhR2t4TWlBOUlEQXVNRHNLQ1FscFppQW9JR2x5YVdSbGMyTmxibU5sU1U5U0lEd2diM1YwYzJsa1pVbFBVaUFwSUhCb2FURXlJRDBnVUVrN0Nna0pabXh2WVhRZ2NHaHBNakVnUFNCUVNTQXRJSEJvYVRFeU93b0pDWFpsWXpNZ1ltRnpaVWxQVWlBOUlFWnlaWE51Wld3d1ZHOUpiM0lvSUdOc1lXMXdLQ0JpWVhObFJqQXNJREF1TUN3Z01DNDVPVGs1SUNrZ0tUc0pDWFpsWXpNZ1VqRWdQU0JKYjNKVWIwWnlaWE51Wld3d0tDQmlZWE5sU1U5U0xDQnBjbWxrWlhOalpXNWpaVWxQVWlBcE93b0pDWFpsWXpNZ1VqSXpJRDBnUmw5VFkyaHNhV05yS0NCU01Td2dNUzR3TENCamIzTlVhR1YwWVRJZ0tUc0tDUWwyWldNeklIQm9hVEl6SUQwZ2RtVmpNeWdnTUM0d0lDazdDZ2tKYVdZZ0tDQmlZWE5sU1U5U1d5QXdJRjBnUENCcGNtbGtaWE5qWlc1alpVbFBVaUFwSUhCb2FUSXpXeUF3SUYwZ1BTQlFTVHNLQ1FscFppQW9JR0poYzJWSlQxSmJJREVnWFNBOElHbHlhV1JsYzJObGJtTmxTVTlTSUNrZ2NHaHBNak5iSURFZ1hTQTlJRkJKT3dvSkNXbG1JQ2dnWW1GelpVbFBVbHNnTWlCZElEd2dhWEpwWkdWelkyVnVZMlZKVDFJZ0tTQndhR2t5TTFzZ01pQmRJRDBnVUVrN0Nna0pabXh2WVhRZ1QxQkVJRDBnTWk0d0lDb2dhWEpwWkdWelkyVnVZMlZKVDFJZ0tpQjBhR2x1Um1sc2JWUm9hV05yYm1WemN5QXFJR052YzFSb1pYUmhNanNLQ1FsMlpXTXpJSEJvYVNBOUlIWmxZek1vSUhCb2FUSXhJQ2tnS3lCd2FHa3lNenNLQ1FsMlpXTXpJRkl4TWpNZ1BTQmpiR0Z0Y0NnZ1VqRXlJQ29nVWpJekxDQXhaUzAxTENBd0xqazVPVGtnS1RzS0NRbDJaV016SUhJeE1qTWdQU0J6Y1hKMEtDQlNNVEl6SUNrN0Nna0pkbVZqTXlCU2N5QTlJSEJ2ZHpJb0lGUXhNakVnS1NBcUlGSXlNeUF2SUNnZ2RtVmpNeWdnTVM0d0lDa2dMU0JTTVRJeklDazdDZ2tKZG1Wak15QkRNQ0E5SUZJeE1pQXJJRkp6T3dvSkNVa2dQU0JETURzS0NRbDJaV016SUVOdElEMGdVbk1nTFNCVU1USXhPd29KQ1dadmNpQW9JR2x1ZENCdElEMGdNVHNnYlNBOFBTQXlPeUFyS3lCdElDa2dld29KQ1FsRGJTQXFQU0J5TVRJek93b0pDUWwyWldNeklGTnRJRDBnTWk0d0lDb2daWFpoYkZObGJuTnBkR2wyYVhSNUtDQm1iRzloZENnZ2JTQXBJQ29nVDFCRUxDQm1iRzloZENnZ2JTQXBJQ29nY0docElDazdDZ2tKQ1VrZ0t6MGdRMjBnS2lCVGJUc0tDUWw5Q2drSmNtVjBkWEp1SUcxaGVDZ2dTU3dnZG1Wak15Z2dNQzR3SUNrZ0tUc0tDWDBLSTJWdVpHbG1ZQ3dnVDNBZ1BTQmdJMmxtWkdWbUlGVlRSVjlDVlUxUVRVRlFDZ2wxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0JpZFcxd1RXRndPd29KZFc1cFptOXliU0JtYkc5aGRDQmlkVzF3VTJOaGJHVTdDZ2wyWldNeUlHUklaSGg1WDJaM1pDZ3BJSHNLQ1FsMlpXTXlJR1JUVkdSNElEMGdaRVprZUNnZ2RrSjFiWEJOWVhCVmRpQXBPd29KQ1habFl6SWdaRk5VWkhrZ1BTQmtSbVI1S0NCMlFuVnRjRTFoY0ZWMklDazdDZ2tKWm14dllYUWdTR3hzSUQwZ1luVnRjRk5qWVd4bElDb2dkR1Y0ZEhWeVpUSkVLQ0JpZFcxd1RXRndMQ0IyUW5WdGNFMWhjRlYySUNrdWVEc0tDUWxtYkc5aGRDQmtRbmdnUFNCaWRXMXdVMk5oYkdVZ0tpQjBaWGgwZFhKbE1rUW9JR0oxYlhCTllYQXNJSFpDZFcxd1RXRndWWFlnS3lCa1UxUmtlQ0FwTG5nZ0xTQkliR3c3Q2drSlpteHZZWFFnWkVKNUlEMGdZblZ0Y0ZOallXeGxJQ29nZEdWNGRIVnlaVEpFS0NCaWRXMXdUV0Z3TENCMlFuVnRjRTFoY0ZWMklDc2daRk5VWkhrZ0tTNTRJQzBnU0d4c093b0pDWEpsZEhWeWJpQjJaV015S0NCa1FuZ3NJR1JDZVNBcE93b0pmUW9KZG1Wak15QndaWEowZFhKaVRtOXliV0ZzUVhKaUtDQjJaV016SUhOMWNtWmZjRzl6TENCMlpXTXpJSE4xY21aZmJtOXliU3dnZG1Wak1pQmtTR1I0ZVN3Z1pteHZZWFFnWm1GalpVUnBjbVZqZEdsdmJpQXBJSHNLQ1FsMlpXTXpJSFpUYVdkdFlWZ2dQU0JrUm1SNEtDQnpkWEptWDNCdmN5NTRlWG9nS1RzS0NRbDJaV016SUhaVGFXZHRZVmtnUFNCa1JtUjVLQ0J6ZFhKbVgzQnZjeTU0ZVhvZ0tUc0tDUWwyWldNeklIWk9JRDBnYzNWeVpsOXViM0p0T3dvSkNYWmxZek1nVWpFZ1BTQmpjbTl6Y3lnZ2RsTnBaMjFoV1N3Z2RrNGdLVHNLQ1FsMlpXTXpJRkl5SUQwZ1kzSnZjM01vSUhaT0xDQjJVMmxuYldGWUlDazdDZ2tKWm14dllYUWdaa1JsZENBOUlHUnZkQ2dnZGxOcFoyMWhXQ3dnVWpFZ0tTQXFJR1poWTJWRWFYSmxZM1JwYjI0N0Nna0pkbVZqTXlCMlIzSmhaQ0E5SUhOcFoyNG9JR1pFWlhRZ0tTQXFJQ2dnWkVoa2VIa3VlQ0FxSUZJeElDc2daRWhrZUhrdWVTQXFJRkl5SUNrN0Nna0pjbVYwZFhKdUlHNXZjbTFoYkdsNlpTZ2dZV0p6S0NCbVJHVjBJQ2tnS2lCemRYSm1YMjV2Y20wZ0xTQjJSM0poWkNBcE93b0pmUW9qWlc1a2FXWmdMQ0JHY0NBOUlHQWphV1lnVGxWTlgwTk1TVkJRU1U1SFgxQk1RVTVGVXlBK0lEQUtDWFpsWXpRZ2NHeGhibVU3Q2dramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gzTjBZWEowQ2dsbWIzSWdLQ0JwYm5RZ2FTQTlJREE3SUdrZ1BDQlZUa2xQVGw5RFRFbFFVRWxPUjE5UVRFRk9SVk03SUdrZ0t5c2dLU0I3Q2drSmNHeGhibVVnUFNCamJHbHdjR2x1WjFCc1lXNWxjMXNnYVNCZE93b0pDV2xtSUNnZ1pHOTBLQ0IyUTJ4cGNGQnZjMmwwYVc5dUxDQndiR0Z1WlM1NGVYb2dLU0ErSUhCc1lXNWxMbmNnS1NCa2FYTmpZWEprT3dvSmZRb0pJM0J5WVdkdFlTQjFibkp2Ykd4ZmJHOXZjRjlsYm1RS0NTTnBaaUJWVGtsUFRsOURURWxRVUVsT1IxOVFURUZPUlZNZ1BDQk9WVTFmUTB4SlVGQkpUa2RmVUV4QlRrVlRDZ2tKWW05dmJDQmpiR2x3Y0dWa0lEMGdkSEoxWlRzS0NRa2pjSEpoWjIxaElIVnVjbTlzYkY5c2IyOXdYM04wWVhKMENna0pabTl5SUNnZ2FXNTBJR2tnUFNCVlRrbFBUbDlEVEVsUVVFbE9SMTlRVEVGT1JWTTdJR2tnUENCT1ZVMWZRMHhKVUZCSlRrZGZVRXhCVGtWVE95QnBJQ3NySUNrZ2V3b0pDUWx3YkdGdVpTQTlJR05zYVhCd2FXNW5VR3hoYm1Weld5QnBJRjA3Q2drSkNXTnNhWEJ3WldRZ1BTQW9JR1J2ZENnZ2RrTnNhWEJRYjNOcGRHbHZiaXdnY0d4aGJtVXVlSGw2SUNrZ1BpQndiR0Z1WlM1M0lDa2dKaVlnWTJ4cGNIQmxaRHNLQ1FsOUNna0pJM0J5WVdkdFlTQjFibkp2Ykd4ZmJHOXZjRjlsYm1RS0NRbHBaaUFvSUdOc2FYQndaV1FnS1NCa2FYTmpZWEprT3dvSkkyVnVaR2xtQ2lObGJtUnBabUFzSUVKd0lEMGdZQ05wWmlCT1ZVMWZRMHhKVUZCSlRrZGZVRXhCVGtWVElENGdNQW9KZG1GeWVXbHVaeUIyWldNeklIWkRiR2x3VUc5emFYUnBiMjQ3Q2dsMWJtbG1iM0p0SUhabFl6UWdZMnhwY0hCcGJtZFFiR0Z1WlhOYklFNVZUVjlEVEVsUVVFbE9SMTlRVEVGT1JWTWdYVHNLSTJWdVpHbG1ZQ3dnZW5BZ1BTQmdJMmxtSUU1VlRWOURURWxRVUVsT1IxOVFURUZPUlZNZ1BpQXdDZ2wyWVhKNWFXNW5JSFpsWXpNZ2RrTnNhWEJRYjNOcGRHbHZianNLSTJWdVpHbG1ZQ3dnVm5BZ1BTQmdJMmxtSUU1VlRWOURURWxRVUVsT1IxOVFURUZPUlZNZ1BpQXdDZ2wyUTJ4cGNGQnZjMmwwYVc5dUlEMGdMU0J0ZGxCdmMybDBhVzl1TG5oNWVqc0tJMlZ1WkdsbVlDd2dhM0FnUFNCZ0kybG1JR1JsWm1sdVpXUW9JRlZUUlY5RFQweFBVbDlCVEZCSVFTQXBDZ2xrYVdabWRYTmxRMjlzYjNJZ0tqMGdka052Ykc5eU93b2paV3hwWmlCa1pXWnBibVZrS0NCVlUwVmZRMDlNVDFJZ0tRb0paR2xtWm5WelpVTnZiRzl5TG5KbllpQXFQU0IyUTI5c2IzSTdDaU5sYm1ScFptQXNJRWh3SUQwZ1lDTnBaaUJrWldacGJtVmtLQ0JWVTBWZlEwOU1UMUpmUVV4UVNFRWdLUW9KZG1GeWVXbHVaeUIyWldNMElIWkRiMnh2Y2pzS0kyVnNhV1lnWkdWbWFXNWxaQ2dnVlZORlgwTlBURTlTSUNrS0NYWmhjbmxwYm1jZ2RtVmpNeUIyUTI5c2IzSTdDaU5sYm1ScFptQXNJRWR3SUQwZ1lDTnBaaUJrWldacGJtVmtLQ0JWVTBWZlEwOU1UMUpmUVV4UVNFRWdLUW9KZG1GeWVXbHVaeUIyWldNMElIWkRiMnh2Y2pzS0kyVnNhV1lnWkdWbWFXNWxaQ2dnVlZORlgwTlBURTlTSUNrZ2ZId2daR1ZtYVc1bFpDZ2dWVk5GWDBsT1UxUkJUa05KVGtkZlEwOU1UMUlnS1FvSmRtRnllV2x1WnlCMlpXTXpJSFpEYjJ4dmNqc0tJMlZ1WkdsbVlDd2dWM0FnUFNCZ0kybG1JR1JsWm1sdVpXUW9JRlZUUlY5RFQweFBVbDlCVEZCSVFTQXBDZ2wyUTI5c2IzSWdQU0IyWldNMEtDQXhMakFnS1RzS0kyVnNhV1lnWkdWbWFXNWxaQ2dnVlZORlgwTlBURTlTSUNrZ2ZId2daR1ZtYVc1bFpDZ2dWVk5GWDBsT1UxUkJUa05KVGtkZlEwOU1UMUlnS1FvSmRrTnZiRzl5SUQwZ2RtVmpNeWdnTVM0d0lDazdDaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYME5QVEU5U0NnbDJRMjlzYjNJZ0tqMGdZMjlzYjNJN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgwbE9VMVJCVGtOSlRrZGZRMDlNVDFJS0NYWkRiMnh2Y2k1NGVYb2dLajBnYVc1emRHRnVZMlZEYjJ4dmNpNTRlWG83Q2lObGJtUnBabUFzSUZod0lEMGdZQ05rWldacGJtVWdVRWtnTXk0eE5ERTFPVEkyTlRNMU9EazNPVE1LSTJSbFptbHVaU0JRU1RJZ05pNHlPRE14T0RVek1EY3hOemsxT0RZS0kyUmxabWx1WlNCUVNWOUlRVXhHSURFdU5UY3dOemsyTXpJMk56azBPRGsyTmdvalpHVm1hVzVsSUZKRlEwbFFVazlEUVV4ZlVFa2dNQzR6TVRnek1EazRPRFl4T0RNM09UQTNDaU5rWldacGJtVWdVa1ZEU1ZCU1QwTkJURjlRU1RJZ01DNHhOVGt4TlRRNU5ETXdPVEU0T1RVek5Rb2paR1ZtYVc1bElFVlFVMGxNVDA0Z01XVXROZ29qYVdadVpHVm1JSE5oZEhWeVlYUmxDaU5rWldacGJtVWdjMkYwZFhKaGRHVW9JR0VnS1NCamJHRnRjQ2dnWVN3Z01DNHdMQ0F4TGpBZ0tRb2paVzVrYVdZS0kyUmxabWx1WlNCM2FHbDBaVU52YlhCc1pXMWxiblFvSUdFZ0tTQW9JREV1TUNBdElITmhkSFZ5WVhSbEtDQmhJQ2tnS1FwbWJHOWhkQ0J3YjNjeUtDQmpiMjV6ZENCcGJpQm1iRzloZENCNElDa2dleUJ5WlhSMWNtNGdlQ3A0T3lCOUNuWmxZek1nY0c5M01pZ2dZMjl1YzNRZ2FXNGdkbVZqTXlCNElDa2dleUJ5WlhSMWNtNGdlQ3A0T3lCOUNtWnNiMkYwSUhCdmR6TW9JR052Ym5OMElHbHVJR1pzYjJGMElIZ2dLU0I3SUhKbGRIVnliaUI0S25ncWVEc2dmUXBtYkc5aGRDQndiM2MwS0NCamIyNXpkQ0JwYmlCbWJHOWhkQ0I0SUNrZ2V5Qm1iRzloZENCNE1pQTlJSGdxZURzZ2NtVjBkWEp1SUhneUtuZ3lPeUI5Q21ac2IyRjBJRzFoZURNb0lHTnZibk4wSUdsdUlIWmxZek1nZGlBcElIc2djbVYwZFhKdUlHMWhlQ2dnYldGNEtDQjJMbmdzSUhZdWVTQXBMQ0IyTG5vZ0tUc2dmUXBtYkc5aGRDQmhkbVZ5WVdkbEtDQmpiMjV6ZENCcGJpQjJaV016SUhZZ0tTQjdJSEpsZEhWeWJpQmtiM1FvSUhZc0lIWmxZek1vSURBdU16TXpNek16TXlBcElDazdJSDBLYUdsbmFIQWdabXh2WVhRZ2NtRnVaQ2dnWTI5dWMzUWdhVzRnZG1Wak1pQjFkaUFwSUhzS0NXTnZibk4wSUdocFoyaHdJR1pzYjJGMElHRWdQU0F4TWk0NU9EazRMQ0JpSUQwZ056Z3VNak16TENCaklEMGdORE0zTlRndU5UUTFNenNLQ1docFoyaHdJR1pzYjJGMElHUjBJRDBnWkc5MEtDQjFkaTU0ZVN3Z2RtVmpNaWdnWVN4aUlDa2dLU3dnYzI0Z1BTQnRiMlFvSUdSMExDQlFTU0FwT3dvSmNtVjBkWEp1SUdaeVlXTjBLQ0J6YVc0b0lITnVJQ2tnS2lCaklDazdDbjBLSTJsbVpHVm1JRWhKUjBoZlVGSkZRMGxUU1U5T0NnbG1iRzloZENCd2NtVmphWE5wYjI1VFlXWmxUR1Z1WjNSb0tDQjJaV016SUhZZ0tTQjdJSEpsZEhWeWJpQnNaVzVuZEdnb0lIWWdLVHNnZlFvalpXeHpaUW9KWm14dllYUWdjSEpsWTJsemFXOXVVMkZtWlV4bGJtZDBhQ2dnZG1Wak15QjJJQ2tnZXdvSkNXWnNiMkYwSUcxaGVFTnZiWEJ2Ym1WdWRDQTlJRzFoZURNb0lHRmljeWdnZGlBcElDazdDZ2tKY21WMGRYSnVJR3hsYm1kMGFDZ2dkaUF2SUcxaGVFTnZiWEJ2Ym1WdWRDQXBJQ29nYldGNFEyOXRjRzl1Wlc1ME93b0pmUW9qWlc1a2FXWUtjM1J5ZFdOMElFbHVZMmxrWlc1MFRHbG5hSFFnZXdvSmRtVmpNeUJqYjJ4dmNqc0tDWFpsWXpNZ1pHbHlaV04wYVc5dU93b0pZbTl2YkNCMmFYTnBZbXhsT3dwOU93cHpkSEoxWTNRZ1VtVm1iR1ZqZEdWa1RHbG5hSFFnZXdvSmRtVmpNeUJrYVhKbFkzUkVhV1ptZFhObE93b0pkbVZqTXlCa2FYSmxZM1JUY0dWamRXeGhjanNLQ1habFl6TWdhVzVrYVhKbFkzUkVhV1ptZFhObE93b0pkbVZqTXlCcGJtUnBjbVZqZEZOd1pXTjFiR0Z5T3dwOU93b2phV1prWldZZ1ZWTkZYMEZNVUVoQlNFRlRTQW9KZG1GeWVXbHVaeUIyWldNeklIWlFiM05wZEdsdmJqc0tJMlZ1WkdsbUNuWmxZek1nZEhKaGJuTm1iM0p0UkdseVpXTjBhVzl1S0NCcGJpQjJaV016SUdScGNpd2dhVzRnYldGME5DQnRZWFJ5YVhnZ0tTQjdDZ2x5WlhSMWNtNGdibTl5YldGc2FYcGxLQ0FvSUcxaGRISnBlQ0FxSUhabFl6UW9JR1JwY2l3Z01DNHdJQ2tnS1M1NGVYb2dLVHNLZlFwMlpXTXpJR2x1ZG1WeWMyVlVjbUZ1YzJadmNtMUVhWEpsWTNScGIyNG9JR2x1SUhabFl6TWdaR2x5TENCcGJpQnRZWFEwSUcxaGRISnBlQ0FwSUhzS0NYSmxkSFZ5YmlCdWIzSnRZV3hwZW1Vb0lDZ2dkbVZqTkNnZ1pHbHlMQ0F3TGpBZ0tTQXFJRzFoZEhKcGVDQXBMbmg1ZWlBcE93cDlDbTFoZERNZ2RISmhibk53YjNObFRXRjBNeWdnWTI5dWMzUWdhVzRnYldGME15QnRJQ2tnZXdvSmJXRjBNeUIwYlhBN0NnbDBiWEJiSURBZ1hTQTlJSFpsWXpNb0lHMWJJREFnWFM1NExDQnRXeUF4SUYwdWVDd2diVnNnTWlCZExuZ2dLVHNLQ1hSdGNGc2dNU0JkSUQwZ2RtVmpNeWdnYlZzZ01DQmRMbmtzSUcxYklERWdYUzU1TENCdFd5QXlJRjB1ZVNBcE93b0pkRzF3V3lBeUlGMGdQU0IyWldNektDQnRXeUF3SUYwdWVpd2diVnNnTVNCZExub3NJRzFiSURJZ1hTNTZJQ2s3Q2dseVpYUjFjbTRnZEcxd093cDlDbVpzYjJGMElHeDFiV2x1WVc1alpTZ2dZMjl1YzNRZ2FXNGdkbVZqTXlCeVoySWdLU0I3Q2dsamIyNXpkQ0IyWldNeklIZGxhV2RvZEhNZ1BTQjJaV016S0NBd0xqSXhNalkzTWprc0lEQXVOekUxTVRVeU1pd2dNQzR3TnpJeE56VXdJQ2s3Q2dseVpYUjFjbTRnWkc5MEtDQjNaV2xuYUhSekxDQnlaMklnS1RzS2ZRcGliMjlzSUdselVHVnljM0JsWTNScGRtVk5ZWFJ5YVhnb0lHMWhkRFFnYlNBcElIc0tDWEpsZEhWeWJpQnRXeUF5SUYxYklETWdYU0E5UFNBdElERXVNRHNLZlFwMlpXTXlJR1Z4ZFdseVpXTjBWWFlvSUdsdUlIWmxZek1nWkdseUlDa2dld29KWm14dllYUWdkU0E5SUdGMFlXNG9JR1JwY2k1NkxDQmthWEl1ZUNBcElDb2dVa1ZEU1ZCU1QwTkJURjlRU1RJZ0t5QXdMalU3Q2dsbWJHOWhkQ0IySUQwZ1lYTnBiaWdnWTJ4aGJYQW9JR1JwY2k1NUxDQXRJREV1TUN3Z01TNHdJQ2tnS1NBcUlGSkZRMGxRVWs5RFFVeGZVRWtnS3lBd0xqVTdDZ2x5WlhSMWNtNGdkbVZqTWlnZ2RTd2dkaUFwT3dwOUNuWmxZek1nUWxKRVJsOU1ZVzFpWlhKMEtDQmpiMjV6ZENCcGJpQjJaV016SUdScFptWjFjMlZEYjJ4dmNpQXBJSHNLQ1hKbGRIVnliaUJTUlVOSlVGSlBRMEZNWDFCSklDb2daR2xtWm5WelpVTnZiRzl5T3dwOUNuWmxZek1nUmw5VFkyaHNhV05yS0NCamIyNXpkQ0JwYmlCMlpXTXpJR1l3TENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JtT1RBc0lHTnZibk4wSUdsdUlHWnNiMkYwSUdSdmRGWklJQ2tnZXdvSlpteHZZWFFnWm5KbGMyNWxiQ0E5SUdWNGNESW9JQ2dnTFNBMUxqVTFORGN6SUNvZ1pHOTBWa2dnTFNBMkxqazRNekUySUNrZ0tpQmtiM1JXU0NBcE93b0pjbVYwZFhKdUlHWXdJQ29nS0NBeExqQWdMU0JtY21WemJtVnNJQ2tnS3lBb0lHWTVNQ0FxSUdaeVpYTnVaV3dnS1RzS2ZRcG1iRzloZENCR1gxTmphR3hwWTJzb0lHTnZibk4wSUdsdUlHWnNiMkYwSUdZd0xDQmpiMjV6ZENCcGJpQm1iRzloZENCbU9UQXNJR052Ym5OMElHbHVJR1pzYjJGMElHUnZkRlpJSUNrZ2V3b0pabXh2WVhRZ1puSmxjMjVsYkNBOUlHVjRjRElvSUNnZ0xTQTFMalUxTkRjeklDb2daRzkwVmtnZ0xTQTJMams0TXpFMklDa2dLaUJrYjNSV1NDQXBPd29KY21WMGRYSnVJR1l3SUNvZ0tDQXhMakFnTFNCbWNtVnpibVZzSUNrZ0t5QW9JR1k1TUNBcUlHWnlaWE51Wld3Z0tUc0tmU0F2THlCMllXeHBaR0YwWldSZ0xDQnhjQ0E5SUdBamFXWmtaV1lnUlU1V1RVRlFYMVJaVUVWZlExVkNSVjlWVmdvSkkyUmxabWx1WlNCamRXSmxWVlpmYldsdVRXbHdUR1YyWld3Z05DNHdDZ2tqWkdWbWFXNWxJR04xWW1WVlZsOXRhVzVVYVd4bFUybDZaU0F4Tmk0d0NnbG1iRzloZENCblpYUkdZV05sS0NCMlpXTXpJR1JwY21WamRHbHZiaUFwSUhzS0NRbDJaV016SUdGaWMwUnBjbVZqZEdsdmJpQTlJR0ZpY3lnZ1pHbHlaV04wYVc5dUlDazdDZ2tKWm14dllYUWdabUZqWlNBOUlDMGdNUzR3T3dvSkNXbG1JQ2dnWVdKelJHbHlaV04wYVc5dUxuZ2dQaUJoWW5ORWFYSmxZM1JwYjI0dWVpQXBJSHNLQ1FrSmFXWWdLQ0JoWW5ORWFYSmxZM1JwYjI0dWVDQStJR0ZpYzBScGNtVmpkR2x2Ymk1NUlDa0tDUWtKQ1daaFkyVWdQU0JrYVhKbFkzUnBiMjR1ZUNBK0lEQXVNQ0EvSURBdU1DQTZJRE11TURzS0NRa0paV3h6WlFvSkNRa0pabUZqWlNBOUlHUnBjbVZqZEdsdmJpNTVJRDRnTUM0d0lEOGdNUzR3SURvZ05DNHdPd29KQ1gwZ1pXeHpaU0I3Q2drSkNXbG1JQ2dnWVdKelJHbHlaV04wYVc5dUxub2dQaUJoWW5ORWFYSmxZM1JwYjI0dWVTQXBDZ2tKQ1FsbVlXTmxJRDBnWkdseVpXTjBhVzl1TG5vZ1BpQXdMakFnUHlBeUxqQWdPaUExTGpBN0Nna0pDV1ZzYzJVS0NRa0pDV1poWTJVZ1BTQmthWEpsWTNScGIyNHVlU0ErSURBdU1DQS9JREV1TUNBNklEUXVNRHNLQ1FsOUNna0pjbVYwZFhKdUlHWmhZMlU3Q2dsOUNnbDJaV015SUdkbGRGVldLQ0IyWldNeklHUnBjbVZqZEdsdmJpd2dabXh2WVhRZ1ptRmpaU0FwSUhzS0NRbDJaV015SUhWMk93b0pDV2xtSUNnZ1ptRmpaU0E5UFNBd0xqQWdLU0I3Q2drSkNYVjJJRDBnZG1Wak1pZ2daR2x5WldOMGFXOXVMbm9zSUdScGNtVmpkR2x2Ymk1NUlDa2dMeUJoWW5Nb0lHUnBjbVZqZEdsdmJpNTRJQ2s3Q2drSmZTQmxiSE5sSUdsbUlDZ2dabUZqWlNBOVBTQXhMakFnS1NCN0Nna0pDWFYySUQwZ2RtVmpNaWdnTFNCa2FYSmxZM1JwYjI0dWVDd2dMU0JrYVhKbFkzUnBiMjR1ZWlBcElDOGdZV0p6S0NCa2FYSmxZM1JwYjI0dWVTQXBPd29KQ1gwZ1pXeHpaU0JwWmlBb0lHWmhZMlVnUFQwZ01pNHdJQ2tnZXdvSkNRbDFkaUE5SUhabFl6SW9JQzBnWkdseVpXTjBhVzl1TG5nc0lHUnBjbVZqZEdsdmJpNTVJQ2tnTHlCaFluTW9JR1JwY21WamRHbHZiaTU2SUNrN0Nna0pmU0JsYkhObElHbG1JQ2dnWm1GalpTQTlQU0F6TGpBZ0tTQjdDZ2tKQ1hWMklEMGdkbVZqTWlnZ0xTQmthWEpsWTNScGIyNHVlaXdnWkdseVpXTjBhVzl1TG5rZ0tTQXZJR0ZpY3lnZ1pHbHlaV04wYVc5dUxuZ2dLVHNLQ1FsOUlHVnNjMlVnYVdZZ0tDQm1ZV05sSUQwOUlEUXVNQ0FwSUhzS0NRa0pkWFlnUFNCMlpXTXlLQ0F0SUdScGNtVmpkR2x2Ymk1NExDQmthWEpsWTNScGIyNHVlaUFwSUM4Z1lXSnpLQ0JrYVhKbFkzUnBiMjR1ZVNBcE93b0pDWDBnWld4elpTQjdDZ2tKQ1hWMklEMGdkbVZqTWlnZ1pHbHlaV04wYVc5dUxuZ3NJR1JwY21WamRHbHZiaTU1SUNrZ0x5QmhZbk1vSUdScGNtVmpkR2x2Ymk1NklDazdDZ2tKZlFvSkNYSmxkSFZ5YmlBd0xqVWdLaUFvSUhWMklDc2dNUzR3SUNrN0NnbDlDZ2wyWldNeklHSnBiR2x1WldGeVEzVmlaVlZXS0NCellXMXdiR1Z5TWtRZ1pXNTJUV0Z3TENCMlpXTXpJR1JwY21WamRHbHZiaXdnWm14dllYUWdiV2x3U1c1MElDa2dld29KQ1dac2IyRjBJR1poWTJVZ1BTQm5aWFJHWVdObEtDQmthWEpsWTNScGIyNGdLVHNLQ1FsbWJHOWhkQ0JtYVd4MFpYSkpiblFnUFNCdFlYZ29JR04xWW1WVlZsOXRhVzVOYVhCTVpYWmxiQ0F0SUcxcGNFbHVkQ3dnTUM0d0lDazdDZ2tKYldsd1NXNTBJRDBnYldGNEtDQnRhWEJKYm5Rc0lHTjFZbVZWVmw5dGFXNU5hWEJNWlhabGJDQXBPd29KQ1dac2IyRjBJR1poWTJWVGFYcGxJRDBnWlhod01pZ2diV2x3U1c1MElDazdDZ2tKYUdsbmFIQWdkbVZqTWlCMWRpQTlJR2RsZEZWV0tDQmthWEpsWTNScGIyNHNJR1poWTJVZ0tTQXFJQ2dnWm1GalpWTnBlbVVnTFNBeUxqQWdLU0FySURFdU1Ec0tDUWxwWmlBb0lHWmhZMlVnUGlBeUxqQWdLU0I3Q2drSkNYVjJMbmtnS3owZ1ptRmpaVk5wZW1VN0Nna0pDV1poWTJVZ0xUMGdNeTR3T3dvSkNYMEtDUWwxZGk1NElDczlJR1poWTJVZ0tpQm1ZV05sVTJsNlpUc0tDUWwxZGk1NElDczlJR1pwYkhSbGNrbHVkQ0FxSURNdU1DQXFJR04xWW1WVlZsOXRhVzVVYVd4bFUybDZaVHNLQ1FsMWRpNTVJQ3M5SURRdU1DQXFJQ2dnWlhod01pZ2dRMVZDUlZWV1gwMUJXRjlOU1ZBZ0tTQXRJR1poWTJWVGFYcGxJQ2s3Q2drSmRYWXVlQ0FxUFNCRFZVSkZWVlpmVkVWWVJVeGZWMGxFVkVnN0Nna0pkWFl1ZVNBcVBTQkRWVUpGVlZaZlZFVllSVXhmU0VWSlIwaFVPd29KQ1NOcFptUmxaaUIwWlhoMGRYSmxNa1JIY21Ga1JWaFVDZ2tKQ1hKbGRIVnliaUIwWlhoMGRYSmxNa1JIY21Ga1JWaFVLQ0JsYm5aTllYQXNJSFYyTENCMlpXTXlLQ0F3TGpBZ0tTd2dkbVZqTWlnZ01DNHdJQ2tnS1M1eVoySTdDZ2tKSTJWc2MyVUtDUWtKY21WMGRYSnVJSFJsZUhSMWNtVXlSQ2dnWlc1MlRXRndMQ0IxZGlBcExuSm5ZanNLQ1FralpXNWthV1lLQ1gwS0NTTmtaV1pwYm1VZ1kzVmlaVlZXWDNJd0lERXVNQW9KSTJSbFptbHVaU0JqZFdKbFZWWmZkakFnTUM0ek16a0tDU05rWldacGJtVWdZM1ZpWlZWV1gyMHdJQzBnTWk0d0Nna2paR1ZtYVc1bElHTjFZbVZWVmw5eU1TQXdMamdLQ1NOa1pXWnBibVVnWTNWaVpWVldYM1l4SURBdU1qYzJDZ2tqWkdWbWFXNWxJR04xWW1WVlZsOXRNU0F0SURFdU1Bb0pJMlJsWm1sdVpTQmpkV0psVlZaZmNqUWdNQzQwQ2dralpHVm1hVzVsSUdOMVltVlZWbDkyTkNBd0xqQTBOZ29KSTJSbFptbHVaU0JqZFdKbFZWWmZiVFFnTWk0d0Nna2paR1ZtYVc1bElHTjFZbVZWVmw5eU5TQXdMak13TlFvSkkyUmxabWx1WlNCamRXSmxWVlpmZGpVZ01DNHdNVFlLQ1NOa1pXWnBibVVnWTNWaVpWVldYMjAxSURNdU1Bb0pJMlJsWm1sdVpTQmpkV0psVlZaZmNqWWdNQzR5TVFvSkkyUmxabWx1WlNCamRXSmxWVlpmZGpZZ01DNHdNRE00Q2dralpHVm1hVzVsSUdOMVltVlZWbDl0TmlBMExqQUtDV1pzYjJGMElISnZkV2RvYm1WemMxUnZUV2x3S0NCbWJHOWhkQ0J5YjNWbmFHNWxjM01nS1NCN0Nna0pabXh2WVhRZ2JXbHdJRDBnTUM0d093b0pDV2xtSUNnZ2NtOTFaMmh1WlhOeklENDlJR04xWW1WVlZsOXlNU0FwSUhzS0NRa0piV2x3SUQwZ0tDQmpkV0psVlZaZmNqQWdMU0J5YjNWbmFHNWxjM01nS1NBcUlDZ2dZM1ZpWlZWV1gyMHhJQzBnWTNWaVpWVldYMjB3SUNrZ0x5QW9JR04xWW1WVlZsOXlNQ0F0SUdOMVltVlZWbDl5TVNBcElDc2dZM1ZpWlZWV1gyMHdPd29KQ1gwZ1pXeHpaU0JwWmlBb0lISnZkV2RvYm1WemN5QStQU0JqZFdKbFZWWmZjalFnS1NCN0Nna0pDVzFwY0NBOUlDZ2dZM1ZpWlZWV1gzSXhJQzBnY205MVoyaHVaWE56SUNrZ0tpQW9JR04xWW1WVlZsOXROQ0F0SUdOMVltVlZWbDl0TVNBcElDOGdLQ0JqZFdKbFZWWmZjakVnTFNCamRXSmxWVlpmY2pRZ0tTQXJJR04xWW1WVlZsOXRNVHNLQ1FsOUlHVnNjMlVnYVdZZ0tDQnliM1ZuYUc1bGMzTWdQajBnWTNWaVpWVldYM0kxSUNrZ2V3b0pDUWx0YVhBZ1BTQW9JR04xWW1WVlZsOXlOQ0F0SUhKdmRXZG9ibVZ6Y3lBcElDb2dLQ0JqZFdKbFZWWmZiVFVnTFNCamRXSmxWVlpmYlRRZ0tTQXZJQ2dnWTNWaVpWVldYM0kwSUMwZ1kzVmlaVlZXWDNJMUlDa2dLeUJqZFdKbFZWWmZiVFE3Q2drSmZTQmxiSE5sSUdsbUlDZ2djbTkxWjJodVpYTnpJRDQ5SUdOMVltVlZWbDl5TmlBcElIc0tDUWtKYldsd0lEMGdLQ0JqZFdKbFZWWmZjalVnTFNCeWIzVm5hRzVsYzNNZ0tTQXFJQ2dnWTNWaVpWVldYMjAySUMwZ1kzVmlaVlZXWDIwMUlDa2dMeUFvSUdOMVltVlZWbDl5TlNBdElHTjFZbVZWVmw5eU5pQXBJQ3NnWTNWaVpWVldYMjAxT3dvSkNYMGdaV3h6WlNCN0Nna0pDVzFwY0NBOUlDMGdNaTR3SUNvZ2JHOW5NaWdnTVM0eE5pQXFJSEp2ZFdkb2JtVnpjeUFwT3drSmZRb0pDWEpsZEhWeWJpQnRhWEE3Q2dsOUNnbDJaV00wSUhSbGVIUjFjbVZEZFdKbFZWWW9JSE5oYlhCc1pYSXlSQ0JsYm5aTllYQXNJSFpsWXpNZ2MyRnRjR3hsUkdseUxDQm1iRzloZENCeWIzVm5hRzVsYzNNZ0tTQjdDZ2tKWm14dllYUWdiV2x3SUQwZ1kyeGhiWEFvSUhKdmRXZG9ibVZ6YzFSdlRXbHdLQ0J5YjNWbmFHNWxjM01nS1N3Z1kzVmlaVlZXWDIwd0xDQkRWVUpGVlZaZlRVRllYMDFKVUNBcE93b0pDV1pzYjJGMElHMXBjRVlnUFNCbWNtRmpkQ2dnYldsd0lDazdDZ2tKWm14dllYUWdiV2x3U1c1MElEMGdabXh2YjNJb0lHMXBjQ0FwT3dvSkNYWmxZek1nWTI5c2IzSXdJRDBnWW1sc2FXNWxZWEpEZFdKbFZWWW9JR1Z1ZGsxaGNDd2djMkZ0Y0d4bFJHbHlMQ0J0YVhCSmJuUWdLVHNLQ1FscFppQW9JRzFwY0VZZ1BUMGdNQzR3SUNrZ2V3b0pDUWx5WlhSMWNtNGdkbVZqTkNnZ1kyOXNiM0l3TENBeExqQWdLVHNLQ1FsOUlHVnNjMlVnZXdvSkNRbDJaV016SUdOdmJHOXlNU0E5SUdKcGJHbHVaV0Z5UTNWaVpWVldLQ0JsYm5aTllYQXNJSE5oYlhCc1pVUnBjaXdnYldsd1NXNTBJQ3NnTVM0d0lDazdDZ2tKQ1hKbGRIVnliaUIyWldNMEtDQnRhWGdvSUdOdmJHOXlNQ3dnWTI5c2IzSXhMQ0J0YVhCR0lDa3NJREV1TUNBcE93b0pDWDBLQ1gwS0kyVnVaR2xtWUN3Z1dYQWdQU0JnZG1Wak15QjBjbUZ1YzJadmNtMWxaRTV2Y20xaGJDQTlJRzlpYW1WamRFNXZjbTFoYkRzS0kybG1aR1ZtSUZWVFJWOUpUbE5VUVU1RFNVNUhDZ2x0WVhReklHMGdQU0J0WVhRektDQnBibk4wWVc1alpVMWhkSEpwZUNBcE93b0pkSEpoYm5ObWIzSnRaV1JPYjNKdFlXd2dMejBnZG1Wak15Z2daRzkwS0NCdFd5QXdJRjBzSUcxYklEQWdYU0FwTENCa2IzUW9JRzFiSURFZ1hTd2diVnNnTVNCZElDa3NJR1J2ZENnZ2JWc2dNaUJkTENCdFd5QXlJRjBnS1NBcE93b0pkSEpoYm5ObWIzSnRaV1JPYjNKdFlXd2dQU0J0SUNvZ2RISmhibk5tYjNKdFpXUk9iM0p0WVd3N0NpTmxibVJwWmdwMGNtRnVjMlp2Y20xbFpFNXZjbTFoYkNBOUlHNXZjbTFoYkUxaGRISnBlQ0FxSUhSeVlXNXpabTl5YldWa1RtOXliV0ZzT3dvamFXWmtaV1lnUmt4SlVGOVRTVVJGUkFvSmRISmhibk5tYjNKdFpXUk9iM0p0WVd3Z1BTQXRJSFJ5WVc1elptOXliV1ZrVG05eWJXRnNPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlVUVU1SFJVNVVDZ2wyWldNeklIUnlZVzV6Wm05eWJXVmtWR0Z1WjJWdWRDQTlJQ2dnYlc5a1pXeFdhV1YzVFdGMGNtbDRJQ29nZG1Wak5DZ2diMkpxWldOMFZHRnVaMlZ1ZEN3Z01DNHdJQ2tnS1M1NGVYbzdDZ2tqYVdaa1pXWWdSa3hKVUY5VFNVUkZSQW9KQ1hSeVlXNXpabTl5YldWa1ZHRnVaMlZ1ZENBOUlDMGdkSEpoYm5ObWIzSnRaV1JVWVc1blpXNTBPd29KSTJWdVpHbG1DaU5sYm1ScFptQXNJRnB3SUQwZ1lDTnBabVJsWmlCVlUwVmZSRWxUVUV4QlEwVk5SVTVVVFVGUUNnbDFibWxtYjNKdElITmhiWEJzWlhJeVJDQmthWE53YkdGalpXMWxiblJOWVhBN0NnbDFibWxtYjNKdElHWnNiMkYwSUdScGMzQnNZV05sYldWdWRGTmpZV3hsT3dvSmRXNXBabTl5YlNCbWJHOWhkQ0JrYVhOd2JHRmpaVzFsYm5SQ2FXRnpPd29qWlc1a2FXWmdMQ0JLY0NBOUlHQWphV1prWldZZ1ZWTkZYMFJKVTFCTVFVTkZUVVZPVkUxQlVBb0pkSEpoYm5ObWIzSnRaV1FnS3owZ2JtOXliV0ZzYVhwbEtDQnZZbXBsWTNST2IzSnRZV3dnS1NBcUlDZ2dkR1Y0ZEhWeVpUSkVLQ0JrYVhOd2JHRmpaVzFsYm5STllYQXNJSFpFYVhOd2JHRmpaVzFsYm5STllYQlZkaUFwTG5nZ0tpQmthWE53YkdGalpXMWxiblJUWTJGc1pTQXJJR1JwYzNCc1lXTmxiV1Z1ZEVKcFlYTWdLVHNLSTJWdVpHbG1ZQ3dnSkhBZ1BTQmdJMmxtWkdWbUlGVlRSVjlGVFVsVFUwbFdSVTFCVUFvSmRtVmpOQ0JsYldsemMybDJaVU52Ykc5eUlEMGdkR1Y0ZEhWeVpUSkVLQ0JsYldsemMybDJaVTFoY0N3Z2RrVnRhWE56YVhabFRXRndWWFlnS1RzS0NYUnZkR0ZzUlcxcGMzTnBkbVZTWVdScFlXNWpaU0FxUFNCbGJXbHpjMmwyWlVOdmJHOXlMbkpuWWpzS0kyVnVaR2xtWUN3Z1MzQWdQU0JnSTJsbVpHVm1JRlZUUlY5RlRVbFRVMGxXUlUxQlVBb0pkVzVwWm05eWJTQnpZVzF3YkdWeU1rUWdaVzFwYzNOcGRtVk5ZWEE3Q2lObGJtUnBabUFzSUZGd0lEMGdJbWRzWDBaeVlXZERiMnh2Y2lBOUlHeHBibVZoY2xSdlQzVjBjSFYwVkdWNFpXd29JR2RzWDBaeVlXZERiMnh2Y2lBcE95SXNJR3B3SUQwZ1lBcGpiMjV6ZENCdFlYUXpJRXhKVGtWQlVsOVRVa2RDWDFSUFgweEpUa1ZCVWw5RVNWTlFURUZaWDFBeklEMGdiV0YwTXlnS0NYWmxZek1vSURBdU9ESXlORFl5TVN3Z01DNHhOemMxTXpnc0lEQXVNQ0FwTEFvSmRtVmpNeWdnTUM0d016TXhPVFF4TENBd0xqazJOamd3TlRnc0lEQXVNQ0FwTEFvSmRtVmpNeWdnTUM0d01UY3dPREkzTENBd0xqQTNNak01TnpRc0lEQXVPVEV3TlRFNU9TQXBDaWs3Q21OdmJuTjBJRzFoZERNZ1RFbE9SVUZTWDBSSlUxQk1RVmxmVUROZlZFOWZURWxPUlVGU1gxTlNSMElnUFNCdFlYUXpLQW9KZG1Wak15Z2dNUzR5TWpRNU5EQXhMQ0F0SURBdU1qSTBPVFF3TkN3Z01DNHdJQ2tzQ2dsMlpXTXpLQ0F0SURBdU1EUXlNRFUyT1N3Z01TNHdOREl3TlRjeExDQXdMakFnS1N3S0NYWmxZek1vSUMwZ01DNHdNVGsyTXpjMkxDQXRJREF1TURjNE5qTTJNU3dnTVM0d09UZ3lOek0xSUNrS0tUc0tkbVZqTkNCTWFXNWxZWEpUVWtkQ1ZHOU1hVzVsWVhKRWFYTndiR0Y1VURNb0lHbHVJSFpsWXpRZ2RtRnNkV1VnS1NCN0NnbHlaWFIxY200Z2RtVmpOQ2dnZG1Gc2RXVXVjbWRpSUNvZ1RFbE9SVUZTWDFOU1IwSmZWRTlmVEVsT1JVRlNYMFJKVTFCTVFWbGZVRE1zSUhaaGJIVmxMbUVnS1RzS2ZRcDJaV00wSUV4cGJtVmhja1JwYzNCc1lYbFFNMVJ2VEdsdVpXRnlVMUpIUWlnZ2FXNGdkbVZqTkNCMllXeDFaU0FwSUhzS0NYSmxkSFZ5YmlCMlpXTTBLQ0IyWVd4MVpTNXlaMklnS2lCTVNVNUZRVkpmUkVsVFVFeEJXVjlRTTE5VVQxOU1TVTVGUVZKZlUxSkhRaXdnZG1Gc2RXVXVZU0FwT3dwOUNuWmxZelFnVEdsdVpXRnlWSEpoYm5ObVpYSlBSVlJHS0NCcGJpQjJaV00wSUhaaGJIVmxJQ2tnZXdvSmNtVjBkWEp1SUhaaGJIVmxPd3A5Q25abFl6UWdjMUpIUWxSeVlXNXpabVZ5VDBWVVJpZ2dhVzRnZG1Wak5DQjJZV3gxWlNBcElIc0tDWEpsZEhWeWJpQjJaV00wS0NCdGFYZ29JSEJ2ZHlnZ2RtRnNkV1V1Y21kaUxDQjJaV016S0NBd0xqUXhOalkySUNrZ0tTQXFJREV1TURVMUlDMGdkbVZqTXlnZ01DNHdOVFVnS1N3Z2RtRnNkV1V1Y21kaUlDb2dNVEl1T1RJc0lIWmxZek1vSUd4bGMzTlVhR0Z1UlhGMVlXd29JSFpoYkhWbExuSm5ZaXdnZG1Wak15Z2dNQzR3TURNeE16QTRJQ2tnS1NBcElDa3NJSFpoYkhWbExtRWdLVHNLZlFwMlpXTTBJRXhwYm1WaGNsUnZUR2x1WldGeUtDQnBiaUIyWldNMElIWmhiSFZsSUNrZ2V3b0pjbVYwZFhKdUlIWmhiSFZsT3dwOUNuWmxZelFnVEdsdVpXRnlWRzl6VWtkQ0tDQnBiaUIyWldNMElIWmhiSFZsSUNrZ2V3b0pjbVYwZFhKdUlITlNSMEpVY21GdWMyWmxjazlGVkVZb0lIWmhiSFZsSUNrN0NuMWdMQ0JsYlNBOUlHQWphV1prWldZZ1ZWTkZYMFZPVmsxQlVBb0pJMmxtWkdWbUlFVk9WbDlYVDFKTVJGQlBVd29KQ1habFl6TWdZMkZ0WlhKaFZHOUdjbUZuT3dvSkNXbG1JQ2dnYVhOUGNuUm9iMmR5WVhCb2FXTWdLU0I3Q2drSkNXTmhiV1Z5WVZSdlJuSmhaeUE5SUc1dmNtMWhiR2w2WlNnZ2RtVmpNeWdnTFNCMmFXVjNUV0YwY21sNFd5QXdJRjFiSURJZ1hTd2dMU0IyYVdWM1RXRjBjbWw0V3lBeElGMWJJRElnWFN3Z0xTQjJhV1YzVFdGMGNtbDRXeUF5SUYxYklESWdYU0FwSUNrN0Nna0pmU0JsYkhObElIc0tDUWtKWTJGdFpYSmhWRzlHY21GbklEMGdibTl5YldGc2FYcGxLQ0IyVjI5eWJHUlFiM05wZEdsdmJpQXRJR05oYldWeVlWQnZjMmwwYVc5dUlDazdDZ2tKZlFvSkNYWmxZek1nZDI5eWJHUk9iM0p0WVd3Z1BTQnBiblpsY25ObFZISmhibk5tYjNKdFJHbHlaV04wYVc5dUtDQnViM0p0WVd3c0lIWnBaWGROWVhSeWFYZ2dLVHNLQ1FramFXWmtaV1lnUlU1V1RVRlFYMDFQUkVWZlVrVkdURVZEVkVsUFRnb0pDUWwyWldNeklISmxabXhsWTNSV1pXTWdQU0J5Wldac1pXTjBLQ0JqWVcxbGNtRlViMFp5WVdjc0lIZHZjbXhrVG05eWJXRnNJQ2s3Q2drSkkyVnNjMlVLQ1FrSmRtVmpNeUJ5Wldac1pXTjBWbVZqSUQwZ2NtVm1jbUZqZENnZ1kyRnRaWEpoVkc5R2NtRm5MQ0IzYjNKc1pFNXZjbTFoYkN3Z2NtVm1jbUZqZEdsdmJsSmhkR2x2SUNrN0Nna0pJMlZ1WkdsbUNna2paV3h6WlFvSkNYWmxZek1nY21WbWJHVmpkRlpsWXlBOUlIWlNaV1pzWldOME93b0pJMlZ1WkdsbUNna2phV1prWldZZ1JVNVdUVUZRWDFSWlVFVmZRMVZDUlFvSkNYWmxZelFnWlc1MlEyOXNiM0lnUFNCMFpYaDBkWEpsUTNWaVpTZ2daVzUyVFdGd0xDQjJaV016S0NCbWJHbHdSVzUyVFdGd0lDb2djbVZtYkdWamRGWmxZeTU0TENCeVpXWnNaV04wVm1WakxubDZJQ2tnS1RzS0NTTmxiSE5sQ2drSmRtVmpOQ0JsYm5aRGIyeHZjaUE5SUhabFl6UW9JREF1TUNBcE93b0pJMlZ1WkdsbUNna2phV1prWldZZ1JVNVdUVUZRWDBKTVJVNUVTVTVIWDAxVlRGUkpVRXhaQ2drSmIzVjBaMjlwYm1kTWFXZG9kQ0E5SUcxcGVDZ2diM1YwWjI5cGJtZE1hV2RvZEN3Z2IzVjBaMjlwYm1kTWFXZG9kQ0FxSUdWdWRrTnZiRzl5TG5oNWVpd2djM0JsWTNWc1lYSlRkSEpsYm1kMGFDQXFJSEpsWm14bFkzUnBkbWwwZVNBcE93b0pJMlZzYVdZZ1pHVm1hVzVsWkNnZ1JVNVdUVUZRWDBKTVJVNUVTVTVIWDAxSldDQXBDZ2tKYjNWMFoyOXBibWRNYVdkb2RDQTlJRzFwZUNnZ2IzVjBaMjlwYm1kTWFXZG9kQ3dnWlc1MlEyOXNiM0l1ZUhsNkxDQnpjR1ZqZFd4aGNsTjBjbVZ1WjNSb0lDb2djbVZtYkdWamRHbDJhWFI1SUNrN0Nna2paV3hwWmlCa1pXWnBibVZrS0NCRlRsWk5RVkJmUWt4RlRrUkpUa2RmUVVSRUlDa0tDUWx2ZFhSbmIybHVaMHhwWjJoMElDczlJR1Z1ZGtOdmJHOXlMbmg1ZWlBcUlITndaV04xYkdGeVUzUnlaVzVuZEdnZ0tpQnlaV1pzWldOMGFYWnBkSGs3Q2dralpXNWthV1lLSTJWdVpHbG1ZQ3dnZEcwZ1BTQmdJMmxtWkdWbUlGVlRSVjlGVGxaTlFWQUtDWFZ1YVdadmNtMGdabXh2WVhRZ1pXNTJUV0Z3U1c1MFpXNXphWFI1T3dvSmRXNXBabTl5YlNCbWJHOWhkQ0JtYkdsd1JXNTJUV0Z3T3dvSkkybG1aR1ZtSUVWT1ZrMUJVRjlVV1ZCRlgwTlZRa1VLQ1FsMWJtbG1iM0p0SUhOaGJYQnNaWEpEZFdKbElHVnVkazFoY0RzS0NTTmxiSE5sQ2drSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ1pXNTJUV0Z3T3dvSkkyVnVaR2xtQ2drS0kyVnVaR2xtWUN3Z2JtMGdQU0JnSTJsbVpHVm1JRlZUUlY5RlRsWk5RVkFLQ1hWdWFXWnZjbTBnWm14dllYUWdjbVZtYkdWamRHbDJhWFI1T3dvSkkybG1JR1JsWm1sdVpXUW9JRlZUUlY5Q1ZVMVFUVUZRSUNrZ2ZId2daR1ZtYVc1bFpDZ2dWVk5GWDA1UFVrMUJURTFCVUNBcElIeDhJR1JsWm1sdVpXUW9JRkJJVDA1SElDa2dmSHdnWkdWbWFXNWxaQ2dnVEVGTlFrVlNWQ0FwQ2drSkkyUmxabWx1WlNCRlRsWmZWMDlTVEVSUVQxTUtDU05sYm1ScFpnb0pJMmxtWkdWbUlFVk9WbDlYVDFKTVJGQlBVd29KQ1haaGNubHBibWNnZG1Wak15QjJWMjl5YkdSUWIzTnBkR2x2YmpzS0NRbDFibWxtYjNKdElHWnNiMkYwSUhKbFpuSmhZM1JwYjI1U1lYUnBienNLQ1NObGJITmxDZ2tKZG1GeWVXbHVaeUIyWldNeklIWlNaV1pzWldOME93b0pJMlZ1WkdsbUNpTmxibVJwWm1Bc0lHbHRJRDBnWUNOcFptUmxaaUJWVTBWZlJVNVdUVUZRQ2dramFXWWdaR1ZtYVc1bFpDZ2dWVk5GWDBKVlRWQk5RVkFnS1NCOGZDQmtaV1pwYm1Wa0tDQlZVMFZmVGs5U1RVRk1UVUZRSUNrZ2ZId2daR1ZtYVc1bFpDZ2dVRWhQVGtjZ0tTQjhmQ0JrWldacGJtVmtLQ0JNUVUxQ1JWSlVJQ2tLQ1FralpHVm1hVzVsSUVWT1ZsOVhUMUpNUkZCUFV3b0pJMlZ1WkdsbUNna2phV1prWldZZ1JVNVdYMWRQVWt4RVVFOVRDZ2tKQ2drSmRtRnllV2x1WnlCMlpXTXpJSFpYYjNKc1pGQnZjMmwwYVc5dU93b0pJMlZzYzJVS0NRbDJZWEo1YVc1bklIWmxZek1nZGxKbFpteGxZM1E3Q2drSmRXNXBabTl5YlNCbWJHOWhkQ0J5WldaeVlXTjBhVzl1VW1GMGFXODdDZ2tqWlc1a2FXWUtJMlZ1WkdsbVlDd2djMjBnUFNCZ0kybG1aR1ZtSUZWVFJWOUZUbFpOUVZBS0NTTnBabVJsWmlCRlRsWmZWMDlTVEVSUVQxTUtDUWwyVjI5eWJHUlFiM05wZEdsdmJpQTlJSGR2Y214a1VHOXphWFJwYjI0dWVIbDZPd29KSTJWc2MyVUtDUWwyWldNeklHTmhiV1Z5WVZSdlZtVnlkR1Y0T3dvSkNXbG1JQ2dnYVhOUGNuUm9iMmR5WVhCb2FXTWdLU0I3Q2drSkNXTmhiV1Z5WVZSdlZtVnlkR1Y0SUQwZ2JtOXliV0ZzYVhwbEtDQjJaV016S0NBdElIWnBaWGROWVhSeWFYaGJJREFnWFZzZ01pQmRMQ0F0SUhacFpYZE5ZWFJ5YVhoYklERWdYVnNnTWlCZExDQXRJSFpwWlhkTllYUnlhWGhiSURJZ1hWc2dNaUJkSUNrZ0tUc0tDUWw5SUdWc2MyVWdld29KQ1FsallXMWxjbUZVYjFabGNuUmxlQ0E5SUc1dmNtMWhiR2w2WlNnZ2QyOXliR1JRYjNOcGRHbHZiaTU0ZVhvZ0xTQmpZVzFsY21GUWIzTnBkR2x2YmlBcE93b0pDWDBLQ1FsMlpXTXpJSGR2Y214a1RtOXliV0ZzSUQwZ2FXNTJaWEp6WlZSeVlXNXpabTl5YlVScGNtVmpkR2x2YmlnZ2RISmhibk5tYjNKdFpXUk9iM0p0WVd3c0lIWnBaWGROWVhSeWFYZ2dLVHNLQ1FramFXWmtaV1lnUlU1V1RVRlFYMDFQUkVWZlVrVkdURVZEVkVsUFRnb0pDUWwyVW1WbWJHVmpkQ0E5SUhKbFpteGxZM1FvSUdOaGJXVnlZVlJ2Vm1WeWRHVjRMQ0IzYjNKc1pFNXZjbTFoYkNBcE93b0pDU05sYkhObENna0pDWFpTWldac1pXTjBJRDBnY21WbWNtRmpkQ2dnWTJGdFpYSmhWRzlXWlhKMFpYZ3NJSGR2Y214a1RtOXliV0ZzTENCeVpXWnlZV04wYVc5dVVtRjBhVzhnS1RzS0NRa2paVzVrYVdZS0NTTmxibVJwWmdvalpXNWthV1pnTENCeWJTQTlJR0FqYVdaa1pXWWdWVk5GWDBaUFJ3b0pka1p2WjBSbGNIUm9JRDBnTFNCdGRsQnZjMmwwYVc5dUxubzdDaU5sYm1ScFptQXNJR0Z0SUQwZ1lDTnBabVJsWmlCVlUwVmZSazlIQ2dsMllYSjVhVzVuSUdac2IyRjBJSFpHYjJkRVpYQjBhRHNLSTJWdVpHbG1ZQ3dnYjIwZ1BTQmdJMmxtWkdWbUlGVlRSVjlHVDBjS0NTTnBabVJsWmlCR1QwZGZSVmhRTWdvSkNXWnNiMkYwSUdadlowWmhZM1J2Y2lBOUlERXVNQ0F0SUdWNGNDZ2dMU0JtYjJkRVpXNXphWFI1SUNvZ1ptOW5SR1Z1YzJsMGVTQXFJSFpHYjJkRVpYQjBhQ0FxSUhaR2IyZEVaWEIwYUNBcE93b0pJMlZzYzJVS0NRbG1iRzloZENCbWIyZEdZV04wYjNJZ1BTQnpiVzl2ZEdoemRHVndLQ0JtYjJkT1pXRnlMQ0JtYjJkR1lYSXNJSFpHYjJkRVpYQjBhQ0FwT3dvSkkyVnVaR2xtQ2dsbmJGOUdjbUZuUTI5c2IzSXVjbWRpSUQwZ2JXbDRLQ0JuYkY5R2NtRm5RMjlzYjNJdWNtZGlMQ0JtYjJkRGIyeHZjaXdnWm05blJtRmpkRzl5SUNrN0NpTmxibVJwWm1Bc0lHTnRJRDBnWUNOcFptUmxaaUJWVTBWZlJrOUhDZ2wxYm1sbWIzSnRJSFpsWXpNZ1ptOW5RMjlzYjNJN0NnbDJZWEo1YVc1bklHWnNiMkYwSUhaR2IyZEVaWEIwYURzS0NTTnBabVJsWmlCR1QwZGZSVmhRTWdvSkNYVnVhV1p2Y20wZ1pteHZZWFFnWm05blJHVnVjMmwwZVRzS0NTTmxiSE5sQ2drSmRXNXBabTl5YlNCbWJHOWhkQ0JtYjJkT1pXRnlPd29KQ1hWdWFXWnZjbTBnWm14dllYUWdabTluUm1GeU93b0pJMlZ1WkdsbUNpTmxibVJwWm1Bc0lHeHRJRDBnWUNOcFptUmxaaUJWVTBWZlIxSkJSRWxGVGxSTlFWQUtDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJR2R5WVdScFpXNTBUV0Z3T3dvalpXNWthV1lLZG1Wak15Qm5aWFJIY21Ga2FXVnVkRWx5Y21Ga2FXRnVZMlVvSUhabFl6TWdibTl5YldGc0xDQjJaV016SUd4cFoyaDBSR2x5WldOMGFXOXVJQ2tnZXdvSlpteHZZWFFnWkc5MFRrd2dQU0JrYjNRb0lHNXZjbTFoYkN3Z2JHbG5hSFJFYVhKbFkzUnBiMjRnS1RzS0NYWmxZeklnWTI5dmNtUWdQU0IyWldNeUtDQmtiM1JPVENBcUlEQXVOU0FySURBdU5Td2dNQzR3SUNrN0Nna2phV1prWldZZ1ZWTkZYMGRTUVVSSlJVNVVUVUZRQ2drSmNtVjBkWEp1SUhabFl6TW9JSFJsZUhSMWNtVXlSQ2dnWjNKaFpHbGxiblJOWVhBc0lHTnZiM0prSUNrdWNpQXBPd29KSTJWc2MyVUtDUWwyWldNeUlHWjNJRDBnWm5kcFpIUm9LQ0JqYjI5eVpDQXBJQ29nTUM0MU93b0pDWEpsZEhWeWJpQnRhWGdvSUhabFl6TW9JREF1TnlBcExDQjJaV016S0NBeExqQWdLU3dnYzIxdmIzUm9jM1JsY0NnZ01DNDNJQzBnWm5jdWVDd2dNQzQzSUNzZ1puY3VlQ3dnWTI5dmNtUXVlQ0FwSUNrN0Nna2paVzVrYVdZS2ZXQXNJR2h0SUQwZ1lDTnBabVJsWmlCVlUwVmZURWxIU0ZSTlFWQUtDWFpsWXpRZ2JHbG5hSFJOWVhCVVpYaGxiQ0E5SUhSbGVIUjFjbVV5UkNnZ2JHbG5hSFJOWVhBc0lIWk1hV2RvZEUxaGNGVjJJQ2s3Q2dsMlpXTXpJR3hwWjJoMFRXRndTWEp5WVdScFlXNWpaU0E5SUd4cFoyaDBUV0Z3VkdWNFpXd3VjbWRpSUNvZ2JHbG5hSFJOWVhCSmJuUmxibk5wZEhrN0NnbHlaV1pzWldOMFpXUk1hV2RvZEM1cGJtUnBjbVZqZEVScFptWjFjMlVnS3owZ2JHbG5hSFJOWVhCSmNuSmhaR2xoYm1ObE93b2paVzVrYVdaZ0xDQjFiU0E5SUdBamFXWmtaV1lnVlZORlgweEpSMGhVVFVGUUNnbDFibWxtYjNKdElITmhiWEJzWlhJeVJDQnNhV2RvZEUxaGNEc0tDWFZ1YVdadmNtMGdabXh2WVhRZ2JHbG5hSFJOWVhCSmJuUmxibk5wZEhrN0NpTmxibVJwWm1Bc0lHUnRJRDBnWUV4aGJXSmxjblJOWVhSbGNtbGhiQ0J0WVhSbGNtbGhiRHNLYldGMFpYSnBZV3d1WkdsbVpuVnpaVU52Ykc5eUlEMGdaR2xtWm5WelpVTnZiRzl5TG5Kbllqc0tiV0YwWlhKcFlXd3VjM0JsWTNWc1lYSlRkSEpsYm1kMGFDQTlJSE53WldOMWJHRnlVM1J5Wlc1bmRHZzdZQ3dnWm0wZ1BTQmdkbUZ5ZVdsdVp5QjJaV016SUhaV2FXVjNVRzl6YVhScGIyNDdDbk4wY25WamRDQk1ZVzFpWlhKMFRXRjBaWEpwWVd3Z2V3b0pkbVZqTXlCa2FXWm1kWE5sUTI5c2IzSTdDZ2xtYkc5aGRDQnpjR1ZqZFd4aGNsTjBjbVZ1WjNSb093cDlPd3AyYjJsa0lGSkZYMFJwY21WamRGOU1ZVzFpWlhKMEtDQmpiMjV6ZENCcGJpQkpibU5wWkdWdWRFeHBaMmgwSUdScGNtVmpkRXhwWjJoMExDQmpiMjV6ZENCcGJpQjJaV016SUdkbGIyMWxkSEo1VUc5emFYUnBiMjRzSUdOdmJuTjBJR2x1SUhabFl6TWdaMlZ2YldWMGNubE9iM0p0WVd3c0lHTnZibk4wSUdsdUlIWmxZek1nWjJWdmJXVjBjbmxXYVdWM1JHbHlMQ0JqYjI1emRDQnBiaUIyWldNeklHZGxiMjFsZEhKNVEyeGxZWEpqYjJGMFRtOXliV0ZzTENCamIyNXpkQ0JwYmlCTVlXMWlaWEowVFdGMFpYSnBZV3dnYldGMFpYSnBZV3dzSUdsdWIzVjBJRkpsWm14bFkzUmxaRXhwWjJoMElISmxabXhsWTNSbFpFeHBaMmgwSUNrZ2V3b0pabXh2WVhRZ1pHOTBUa3dnUFNCellYUjFjbUYwWlNnZ1pHOTBLQ0JuWlc5dFpYUnllVTV2Y20xaGJDd2daR2x5WldOMFRHbG5hSFF1WkdseVpXTjBhVzl1SUNrZ0tUc0tDWFpsWXpNZ2FYSnlZV1JwWVc1alpTQTlJR1J2ZEU1TUlDb2daR2x5WldOMFRHbG5hSFF1WTI5c2IzSTdDZ2x5Wldac1pXTjBaV1JNYVdkb2RDNWthWEpsWTNSRWFXWm1kWE5sSUNzOUlHbHljbUZrYVdGdVkyVWdLaUJDVWtSR1gweGhiV0psY25Rb0lHMWhkR1Z5YVdGc0xtUnBabVoxYzJWRGIyeHZjaUFwT3dwOUNuWnZhV1FnVWtWZlNXNWthWEpsWTNSRWFXWm1kWE5sWDB4aGJXSmxjblFvSUdOdmJuTjBJR2x1SUhabFl6TWdhWEp5WVdScFlXNWpaU3dnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVWQnZjMmwwYVc5dUxDQmpiMjV6ZENCcGJpQjJaV016SUdkbGIyMWxkSEo1VG05eWJXRnNMQ0JqYjI1emRDQnBiaUIyWldNeklHZGxiMjFsZEhKNVZtbGxkMFJwY2l3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJuWlc5dFpYUnllVU5zWldGeVkyOWhkRTV2Y20xaGJDd2dZMjl1YzNRZ2FXNGdUR0Z0WW1WeWRFMWhkR1Z5YVdGc0lHMWhkR1Z5YVdGc0xDQnBibTkxZENCU1pXWnNaV04wWldSTWFXZG9kQ0J5Wldac1pXTjBaV1JNYVdkb2RDQXBJSHNLQ1hKbFpteGxZM1JsWkV4cFoyaDBMbWx1WkdseVpXTjBSR2xtWm5WelpTQXJQU0JwY25KaFpHbGhibU5sSUNvZ1FsSkVSbDlNWVcxaVpYSjBLQ0J0WVhSbGNtbGhiQzVrYVdabWRYTmxRMjlzYjNJZ0tUc0tmUW9qWkdWbWFXNWxJRkpGWDBScGNtVmpkQWtKQ1FsU1JWOUVhWEpsWTNSZlRHRnRZbVZ5ZEFvalpHVm1hVzVsSUZKRlgwbHVaR2x5WldOMFJHbG1ablZ6WlFrSlVrVmZTVzVrYVhKbFkzUkVhV1ptZFhObFgweGhiV0psY25SZ0xDQndiU0E5SUdCMWJtbG1iM0p0SUdKdmIyd2djbVZqWldsMlpWTm9ZV1J2ZHpzS2RXNXBabTl5YlNCMlpXTXpJR0Z0WW1sbGJuUk1hV2RvZEVOdmJHOXlPd29qYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMHhKUjBoVVgxQlNUMEpGVXlBcENnbDFibWxtYjNKdElIWmxZek1nYkdsbmFIUlFjbTlpWlZzZ09TQmRPd29qWlc1a2FXWUtkbVZqTXlCemFFZGxkRWx5Y21Ga2FXRnVZMlZCZENnZ2FXNGdkbVZqTXlCdWIzSnRZV3dzSUdsdUlIWmxZek1nYzJoRGIyVm1abWxqYVdWdWRITmJJRGtnWFNBcElIc0tDV1pzYjJGMElIZ2dQU0J1YjNKdFlXd3VlQ3dnZVNBOUlHNXZjbTFoYkM1NUxDQjZJRDBnYm05eWJXRnNMbm83Q2dsMlpXTXpJSEpsYzNWc2RDQTlJSE5vUTI5bFptWnBZMmxsYm5Seld5QXdJRjBnS2lBd0xqZzROakl5TnpzS0NYSmxjM1ZzZENBclBTQnphRU52WldabWFXTnBaVzUwYzFzZ01TQmRJQ29nTWk0d0lDb2dNQzQxTVRFMk5qUWdLaUI1T3dvSmNtVnpkV3gwSUNzOUlITm9RMjlsWm1acFkybGxiblJ6V3lBeUlGMGdLaUF5TGpBZ0tpQXdMalV4TVRZMk5DQXFJSG83Q2dseVpYTjFiSFFnS3owZ2MyaERiMlZtWm1samFXVnVkSE5iSURNZ1hTQXFJREl1TUNBcUlEQXVOVEV4TmpZMElDb2dlRHNLQ1hKbGMzVnNkQ0FyUFNCemFFTnZaV1ptYVdOcFpXNTBjMXNnTkNCZElDb2dNaTR3SUNvZ01DNDBNamt3TkRNZ0tpQjRJQ29nZVRzS0NYSmxjM1ZzZENBclBTQnphRU52WldabWFXTnBaVzUwYzFzZ05TQmRJQ29nTWk0d0lDb2dNQzQwTWprd05ETWdLaUI1SUNvZ2Vqc0tDWEpsYzNWc2RDQXJQU0J6YUVOdlpXWm1hV05wWlc1MGMxc2dOaUJkSUNvZ0tDQXdMamMwTXpFeU5TQXFJSG9nS2lCNklDMGdNQzR5TkRjM01EZ2dLVHNLQ1hKbGMzVnNkQ0FyUFNCemFFTnZaV1ptYVdOcFpXNTBjMXNnTnlCZElDb2dNaTR3SUNvZ01DNDBNamt3TkRNZ0tpQjRJQ29nZWpzS0NYSmxjM1ZzZENBclBTQnphRU52WldabWFXTnBaVzUwYzFzZ09DQmRJQ29nTUM0ME1qa3dORE1nS2lBb0lIZ2dLaUI0SUMwZ2VTQXFJSGtnS1RzS0NYSmxkSFZ5YmlCeVpYTjFiSFE3Q24wS2RtVmpNeUJuWlhSTWFXZG9kRkJ5YjJKbFNYSnlZV1JwWVc1alpTZ2dZMjl1YzNRZ2FXNGdkbVZqTXlCc2FXZG9kRkJ5YjJKbFd5QTVJRjBzSUdOdmJuTjBJR2x1SUhabFl6TWdibTl5YldGc0lDa2dld29KZG1Wak15QjNiM0pzWkU1dmNtMWhiQ0E5SUdsdWRtVnljMlZVY21GdWMyWnZjbTFFYVhKbFkzUnBiMjRvSUc1dmNtMWhiQ3dnZG1sbGQwMWhkSEpwZUNBcE93b0pkbVZqTXlCcGNuSmhaR2xoYm1ObElEMGdjMmhIWlhSSmNuSmhaR2xoYm1ObFFYUW9JSGR2Y214a1RtOXliV0ZzTENCc2FXZG9kRkJ5YjJKbElDazdDZ2x5WlhSMWNtNGdhWEp5WVdScFlXNWpaVHNLZlFwMlpXTXpJR2RsZEVGdFltbGxiblJNYVdkb2RFbHljbUZrYVdGdVkyVW9JR052Ym5OMElHbHVJSFpsWXpNZ1lXMWlhV1Z1ZEV4cFoyaDBRMjlzYjNJZ0tTQjdDZ2wyWldNeklHbHljbUZrYVdGdVkyVWdQU0JoYldKcFpXNTBUR2xuYUhSRGIyeHZjanNLQ1hKbGRIVnliaUJwY25KaFpHbGhibU5sT3dwOUNtWnNiMkYwSUdkbGRFUnBjM1JoYm1ObFFYUjBaVzUxWVhScGIyNG9JR052Ym5OMElHbHVJR1pzYjJGMElHeHBaMmgwUkdsemRHRnVZMlVzSUdOdmJuTjBJR2x1SUdac2IyRjBJR04xZEc5bVprUnBjM1JoYm1ObExDQmpiMjV6ZENCcGJpQm1iRzloZENCa1pXTmhlVVY0Y0c5dVpXNTBJQ2tnZXdvSkkybG1JR1JsWm1sdVpXUWdLQ0JNUlVkQlExbGZURWxIU0ZSVElDa0tDUWxwWmlBb0lHTjFkRzltWmtScGMzUmhibU5sSUQ0Z01DNHdJQ1ltSUdSbFkyRjVSWGh3YjI1bGJuUWdQaUF3TGpBZ0tTQjdDZ2tKQ1hKbGRIVnliaUJ3YjNjb0lITmhkSFZ5WVhSbEtDQXRJR3hwWjJoMFJHbHpkR0Z1WTJVZ0x5QmpkWFJ2Wm1aRWFYTjBZVzVqWlNBcklERXVNQ0FwTENCa1pXTmhlVVY0Y0c5dVpXNTBJQ2s3Q2drSmZRb0pDWEpsZEhWeWJpQXhMakE3Q2dralpXeHpaUW9KQ1dac2IyRjBJR1JwYzNSaGJtTmxSbUZzYkc5bVppQTlJREV1TUNBdklHMWhlQ2dnY0c5M0tDQnNhV2RvZEVScGMzUmhibU5sTENCa1pXTmhlVVY0Y0c5dVpXNTBJQ2tzSURBdU1ERWdLVHNLQ1FscFppQW9JR04xZEc5bVprUnBjM1JoYm1ObElENGdNQzR3SUNrZ2V3b0pDUWxrYVhOMFlXNWpaVVpoYkd4dlptWWdLajBnY0c5M01pZ2djMkYwZFhKaGRHVW9JREV1TUNBdElIQnZkelFvSUd4cFoyaDBSR2x6ZEdGdVkyVWdMeUJqZFhSdlptWkVhWE4wWVc1alpTQXBJQ2tnS1RzS0NRbDlDZ2tKY21WMGRYSnVJR1JwYzNSaGJtTmxSbUZzYkc5bVpqc0tDU05sYm1ScFpncDlDbVpzYjJGMElHZGxkRk53YjNSQmRIUmxiblZoZEdsdmJpZ2dZMjl1YzNRZ2FXNGdabXh2WVhRZ1kyOXVaVU52YzJsdVpTd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ2NHVnVkVzFpY21GRGIzTnBibVVzSUdOdmJuTjBJR2x1SUdac2IyRjBJR0Z1WjJ4bFEyOXphVzVsSUNrZ2V3b0pjbVYwZFhKdUlITnRiMjkwYUhOMFpYQW9JR052Ym1WRGIzTnBibVVzSUhCbGJuVnRZbkpoUTI5emFXNWxMQ0JoYm1kc1pVTnZjMmx1WlNBcE93cDlDaU5wWmlCT1ZVMWZSRWxTWDB4SlIwaFVVeUErSURBS0NYTjBjblZqZENCRWFYSmxZM1JwYjI1aGJFeHBaMmgwSUhzS0NRbDJaV016SUdScGNtVmpkR2x2YmpzS0NRbDJaV016SUdOdmJHOXlPd29KZlRzS0NYVnVhV1p2Y20wZ1JHbHlaV04wYVc5dVlXeE1hV2RvZENCa2FYSmxZM1JwYjI1aGJFeHBaMmgwYzFzZ1RsVk5YMFJKVWw5TVNVZElWRk1nWFRzS0NYWnZhV1FnWjJWMFJHbHlaV04wYVc5dVlXeE1hV2RvZEVsdVptOG9JR052Ym5OMElHbHVJRVJwY21WamRHbHZibUZzVEdsbmFIUWdaR2x5WldOMGFXOXVZV3hNYVdkb2RDd2diM1YwSUVsdVkybGtaVzUwVEdsbmFIUWdiR2xuYUhRZ0tTQjdDZ2tKYkdsbmFIUXVZMjlzYjNJZ1BTQmthWEpsWTNScGIyNWhiRXhwWjJoMExtTnZiRzl5T3dvSkNXeHBaMmgwTG1ScGNtVmpkR2x2YmlBOUlHUnBjbVZqZEdsdmJtRnNUR2xuYUhRdVpHbHlaV04wYVc5dU93b0pDV3hwWjJoMExuWnBjMmxpYkdVZ1BTQjBjblZsT3dvSmZRb2paVzVrYVdZS0kybG1JRTVWVFY5UVQwbE9WRjlNU1VkSVZGTWdQaUF3Q2dsemRISjFZM1FnVUc5cGJuUk1hV2RvZENCN0Nna0pkbVZqTXlCd2IzTnBkR2x2YmpzS0NRbDJaV016SUdOdmJHOXlPd29KQ1dac2IyRjBJR1JwYzNSaGJtTmxPd29KQ1dac2IyRjBJR1JsWTJGNU93b0pmVHNLQ1hWdWFXWnZjbTBnVUc5cGJuUk1hV2RvZENCd2IybHVkRXhwWjJoMGMxc2dUbFZOWDFCUFNVNVVYMHhKUjBoVVV5QmRPd29KZG05cFpDQm5aWFJRYjJsdWRFeHBaMmgwU1c1bWJ5Z2dZMjl1YzNRZ2FXNGdVRzlwYm5STWFXZG9kQ0J3YjJsdWRFeHBaMmgwTENCamIyNXpkQ0JwYmlCMlpXTXpJR2RsYjIxbGRISjVVRzl6YVhScGIyNHNJRzkxZENCSmJtTnBaR1Z1ZEV4cFoyaDBJR3hwWjJoMElDa2dld29KQ1habFl6TWdiRlpsWTNSdmNpQTlJSEJ2YVc1MFRHbG5hSFF1Y0c5emFYUnBiMjRnTFNCblpXOXRaWFJ5ZVZCdmMybDBhVzl1T3dvSkNXeHBaMmgwTG1ScGNtVmpkR2x2YmlBOUlHNXZjbTFoYkdsNlpTZ2diRlpsWTNSdmNpQXBPd29KQ1dac2IyRjBJR3hwWjJoMFJHbHpkR0Z1WTJVZ1BTQnNaVzVuZEdnb0lHeFdaV04wYjNJZ0tUc0tDUWxzYVdkb2RDNWpiMnh2Y2lBOUlIQnZhVzUwVEdsbmFIUXVZMjlzYjNJN0Nna0piR2xuYUhRdVkyOXNiM0lnS2owZ1oyVjBSR2x6ZEdGdVkyVkJkSFJsYm5WaGRHbHZiaWdnYkdsbmFIUkVhWE4wWVc1alpTd2djRzlwYm5STWFXZG9kQzVrYVhOMFlXNWpaU3dnY0c5cGJuUk1hV2RvZEM1a1pXTmhlU0FwT3dvSkNXeHBaMmgwTG5acGMybGliR1VnUFNBb0lHeHBaMmgwTG1OdmJHOXlJQ0U5SUhabFl6TW9JREF1TUNBcElDazdDZ2w5Q2lObGJtUnBaZ29qYVdZZ1RsVk5YMU5RVDFSZlRFbEhTRlJUSUQ0Z01Bb0pjM1J5ZFdOMElGTndiM1JNYVdkb2RDQjdDZ2tKZG1Wak15QndiM05wZEdsdmJqc0tDUWwyWldNeklHUnBjbVZqZEdsdmJqc0tDUWwyWldNeklHTnZiRzl5T3dvSkNXWnNiMkYwSUdScGMzUmhibU5sT3dvSkNXWnNiMkYwSUdSbFkyRjVPd29KQ1dac2IyRjBJR052Ym1WRGIzTTdDZ2tKWm14dllYUWdjR1Z1ZFcxaWNtRkRiM003Q2dsOU93b0pkVzVwWm05eWJTQlRjRzkwVEdsbmFIUWdjM0J2ZEV4cFoyaDBjMXNnVGxWTlgxTlFUMVJmVEVsSFNGUlRJRjA3Q2dsMmIybGtJR2RsZEZOd2IzUk1hV2RvZEVsdVptOG9JR052Ym5OMElHbHVJRk53YjNSTWFXZG9kQ0J6Y0c5MFRHbG5hSFFzSUdOdmJuTjBJR2x1SUhabFl6TWdaMlZ2YldWMGNubFFiM05wZEdsdmJpd2diM1YwSUVsdVkybGtaVzUwVEdsbmFIUWdiR2xuYUhRZ0tTQjdDZ2tKZG1Wak15QnNWbVZqZEc5eUlEMGdjM0J2ZEV4cFoyaDBMbkJ2YzJsMGFXOXVJQzBnWjJWdmJXVjBjbmxRYjNOcGRHbHZianNLQ1Fsc2FXZG9kQzVrYVhKbFkzUnBiMjRnUFNCdWIzSnRZV3hwZW1Vb0lHeFdaV04wYjNJZ0tUc0tDUWxtYkc5aGRDQmhibWRzWlVOdmN5QTlJR1J2ZENnZ2JHbG5hSFF1WkdseVpXTjBhVzl1TENCemNHOTBUR2xuYUhRdVpHbHlaV04wYVc5dUlDazdDZ2tKWm14dllYUWdjM0J2ZEVGMGRHVnVkV0YwYVc5dUlEMGdaMlYwVTNCdmRFRjBkR1Z1ZFdGMGFXOXVLQ0J6Y0c5MFRHbG5hSFF1WTI5dVpVTnZjeXdnYzNCdmRFeHBaMmgwTG5CbGJuVnRZbkpoUTI5ekxDQmhibWRzWlVOdmN5QXBPd29KQ1dsbUlDZ2djM0J2ZEVGMGRHVnVkV0YwYVc5dUlENGdNQzR3SUNrZ2V3b0pDUWxtYkc5aGRDQnNhV2RvZEVScGMzUmhibU5sSUQwZ2JHVnVaM1JvS0NCc1ZtVmpkRzl5SUNrN0Nna0pDV3hwWjJoMExtTnZiRzl5SUQwZ2MzQnZkRXhwWjJoMExtTnZiRzl5SUNvZ2MzQnZkRUYwZEdWdWRXRjBhVzl1T3dvSkNRbHNhV2RvZEM1amIyeHZjaUFxUFNCblpYUkVhWE4wWVc1alpVRjBkR1Z1ZFdGMGFXOXVLQ0JzYVdkb2RFUnBjM1JoYm1ObExDQnpjRzkwVEdsbmFIUXVaR2x6ZEdGdVkyVXNJSE53YjNSTWFXZG9kQzVrWldOaGVTQXBPd29KQ1Fsc2FXZG9kQzUyYVhOcFlteGxJRDBnS0NCc2FXZG9kQzVqYjJ4dmNpQWhQU0IyWldNektDQXdMakFnS1NBcE93b0pDWDBnWld4elpTQjdDZ2tKQ1d4cFoyaDBMbU52Ykc5eUlEMGdkbVZqTXlnZ01DNHdJQ2s3Q2drSkNXeHBaMmgwTG5acGMybGliR1VnUFNCbVlXeHpaVHNLQ1FsOUNnbDlDaU5sYm1ScFpnb2phV1lnVGxWTlgxSkZRMVJmUVZKRlFWOU1TVWRJVkZNZ1BpQXdDZ2x6ZEhKMVkzUWdVbVZqZEVGeVpXRk1hV2RvZENCN0Nna0pkbVZqTXlCamIyeHZjanNLQ1FsMlpXTXpJSEJ2YzJsMGFXOXVPd29KQ1habFl6TWdhR0ZzWmxkcFpIUm9Pd29KQ1habFl6TWdhR0ZzWmtobGFXZG9kRHNLQ1gwN0NnbDFibWxtYjNKdElITmhiWEJzWlhJeVJDQnNkR05mTVRzSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ2JIUmpYekk3Q2dsMWJtbG1iM0p0SUZKbFkzUkJjbVZoVEdsbmFIUWdjbVZqZEVGeVpXRk1hV2RvZEhOYklFNVZUVjlTUlVOVVgwRlNSVUZmVEVsSFNGUlRJRjA3Q2lObGJtUnBaZ29qYVdZZ1RsVk5YMGhGVFVsZlRFbEhTRlJUSUQ0Z01Bb0pjM1J5ZFdOMElFaGxiV2x6Y0dobGNtVk1hV2RvZENCN0Nna0pkbVZqTXlCa2FYSmxZM1JwYjI0N0Nna0pkbVZqTXlCemEzbERiMnh2Y2pzS0NRbDJaV016SUdkeWIzVnVaRU52Ykc5eU93b0pmVHNLQ1hWdWFXWnZjbTBnU0dWdGFYTndhR1Z5WlV4cFoyaDBJR2hsYldsemNHaGxjbVZNYVdkb2RITmJJRTVWVFY5SVJVMUpYMHhKUjBoVVV5QmRPd29KZG1Wak15Qm5aWFJJWlcxcGMzQm9aWEpsVEdsbmFIUkpjbkpoWkdsaGJtTmxLQ0JqYjI1emRDQnBiaUJJWlcxcGMzQm9aWEpsVEdsbmFIUWdhR1Z0YVV4cFoyaDBMQ0JqYjI1emRDQnBiaUIyWldNeklHNXZjbTFoYkNBcElIc0tDUWxtYkc5aGRDQmtiM1JPVENBOUlHUnZkQ2dnYm05eWJXRnNMQ0JvWlcxcFRHbG5hSFF1WkdseVpXTjBhVzl1SUNrN0Nna0pabXh2WVhRZ2FHVnRhVVJwWm1aMWMyVlhaV2xuYUhRZ1BTQXdMalVnS2lCa2IzUk9UQ0FySURBdU5Uc0tDUWwyWldNeklHbHljbUZrYVdGdVkyVWdQU0J0YVhnb0lHaGxiV2xNYVdkb2RDNW5jbTkxYm1SRGIyeHZjaXdnYUdWdGFVeHBaMmgwTG5OcmVVTnZiRzl5TENCb1pXMXBSR2xtWm5WelpWZGxhV2RvZENBcE93b0pDWEpsZEhWeWJpQnBjbkpoWkdsaGJtTmxPd29KZlFvalpXNWthV1pnTENCdGJTQTlJR0FqYVdaa1pXWWdWVk5GWDBWT1ZrMUJVQW9KZG1Wak15Qm5aWFJKUWt4SmNuSmhaR2xoYm1ObEtDQmpiMjV6ZENCcGJpQjJaV016SUc1dmNtMWhiQ0FwSUhzS0NRa2phV1prWldZZ1JVNVdUVUZRWDFSWlVFVmZRMVZDUlY5VlZnb0pDUWwyWldNeklIZHZjbXhrVG05eWJXRnNJRDBnYVc1MlpYSnpaVlJ5WVc1elptOXliVVJwY21WamRHbHZiaWdnYm05eWJXRnNMQ0IyYVdWM1RXRjBjbWw0SUNrN0Nna0pDWFpsWXpRZ1pXNTJUV0Z3UTI5c2IzSWdQU0IwWlhoMGRYSmxRM1ZpWlZWV0tDQmxiblpOWVhBc0lIZHZjbXhrVG05eWJXRnNMQ0F4TGpBZ0tUc0tDUWtKY21WMGRYSnVJRkJKSUNvZ1pXNTJUV0Z3UTI5c2IzSXVjbWRpSUNvZ1pXNTJUV0Z3U1c1MFpXNXphWFI1T3dvSkNTTmxiSE5sQ2drSkNYSmxkSFZ5YmlCMlpXTXpLQ0F3TGpBZ0tUc0tDUWtqWlc1a2FXWUtDWDBLQ1habFl6TWdaMlYwU1VKTVVtRmthV0Z1WTJVb0lHTnZibk4wSUdsdUlIWmxZek1nZG1sbGQwUnBjaXdnWTI5dWMzUWdhVzRnZG1Wak15QnViM0p0WVd3c0lHTnZibk4wSUdsdUlHWnNiMkYwSUhKdmRXZG9ibVZ6Y3lBcElIc0tDUWtqYVdaa1pXWWdSVTVXVFVGUVgxUlpVRVZmUTFWQ1JWOVZWZ29KQ1FsMlpXTXpJSEpsWm14bFkzUldaV01nUFNCeVpXWnNaV04wS0NBdElIWnBaWGRFYVhJc0lHNXZjbTFoYkNBcE93b0pDUWx5Wldac1pXTjBWbVZqSUQwZ2JtOXliV0ZzYVhwbEtDQnRhWGdvSUhKbFpteGxZM1JXWldNc0lHNXZjbTFoYkN3Z2NtOTFaMmh1WlhOeklDb2djbTkxWjJodVpYTnpLU0FwT3dvSkNRbHlaV1pzWldOMFZtVmpJRDBnYVc1MlpYSnpaVlJ5WVc1elptOXliVVJwY21WamRHbHZiaWdnY21WbWJHVmpkRlpsWXl3Z2RtbGxkMDFoZEhKcGVDQXBPd29KQ1FsMlpXTTBJR1Z1ZGsxaGNFTnZiRzl5SUQwZ2RHVjRkSFZ5WlVOMVltVlZWaWdnWlc1MlRXRndMQ0J5Wldac1pXTjBWbVZqTENCeWIzVm5hRzVsYzNNZ0tUc0tDUWtKY21WMGRYSnVJR1Z1ZGsxaGNFTnZiRzl5TG5KbllpQXFJR1Z1ZGsxaGNFbHVkR1Z1YzJsMGVUc0tDUWtqWld4elpRb0pDUWx5WlhSMWNtNGdkbVZqTXlnZ01DNHdJQ2s3Q2drSkkyVnVaR2xtQ2dsOUNna2phV1prWldZZ1ZWTkZYMEZPU1ZOUFZGSlBVRmtLQ1FsMlpXTXpJR2RsZEVsQ1RFRnVhWE52ZEhKdmNIbFNZV1JwWVc1alpTZ2dZMjl1YzNRZ2FXNGdkbVZqTXlCMmFXVjNSR2x5TENCamIyNXpkQ0JwYmlCMlpXTXpJRzV2Y20xaGJDd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ2NtOTFaMmh1WlhOekxDQmpiMjV6ZENCcGJpQjJaV016SUdKcGRHRnVaMlZ1ZEN3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnWVc1cGMyOTBjbTl3ZVNBcElIc0tDUWtKSTJsbVpHVm1JRVZPVmsxQlVGOVVXVkJGWDBOVlFrVmZWVllLQ1FrSkNYWmxZek1nWW1WdWRFNXZjbTFoYkNBOUlHTnliM056S0NCaWFYUmhibWRsYm5Rc0lIWnBaWGRFYVhJZ0tUc0tDUWtKQ1dKbGJuUk9iM0p0WVd3Z1BTQnViM0p0WVd4cGVtVW9JR055YjNOektDQmlaVzUwVG05eWJXRnNMQ0JpYVhSaGJtZGxiblFnS1NBcE93b0pDUWtKWW1WdWRFNXZjbTFoYkNBOUlHNXZjbTFoYkdsNlpTZ2diV2w0S0NCaVpXNTBUbTl5YldGc0xDQnViM0p0WVd3c0lIQnZkeklvSUhCdmR6SW9JREV1TUNBdElHRnVhWE52ZEhKdmNIa2dLaUFvSURFdU1DQXRJSEp2ZFdkb2JtVnpjeUFwSUNrZ0tTQXBJQ2s3Q2drSkNRbHlaWFIxY200Z1oyVjBTVUpNVW1Ga2FXRnVZMlVvSUhacFpYZEVhWElzSUdKbGJuUk9iM0p0WVd3c0lISnZkV2RvYm1WemN5QXBPd29KQ1FralpXeHpaUW9KQ1FrSmNtVjBkWEp1SUhabFl6TW9JREF1TUNBcE93b0pDUWtqWlc1a2FXWUtDUWw5Q2dralpXNWthV1lLSTJWdVpHbG1ZQ3dnWjIwZ1BTQmdWRzl2YmsxaGRHVnlhV0ZzSUcxaGRHVnlhV0ZzT3dwdFlYUmxjbWxoYkM1a2FXWm1kWE5sUTI5c2IzSWdQU0JrYVdabWRYTmxRMjlzYjNJdWNtZGlPMkFzSUY5dElEMGdZSFpoY25scGJtY2dkbVZqTXlCMlZtbGxkMUJ2YzJsMGFXOXVPd3B6ZEhKMVkzUWdWRzl2YmsxaGRHVnlhV0ZzSUhzS0NYWmxZek1nWkdsbVpuVnpaVU52Ykc5eU93cDlPd3AyYjJsa0lGSkZYMFJwY21WamRGOVViMjl1S0NCamIyNXpkQ0JwYmlCSmJtTnBaR1Z1ZEV4cFoyaDBJR1JwY21WamRFeHBaMmgwTENCamIyNXpkQ0JwYmlCMlpXTXpJR2RsYjIxbGRISjVVRzl6YVhScGIyNHNJR052Ym5OMElHbHVJSFpsWXpNZ1oyVnZiV1YwY25sT2IzSnRZV3dzSUdOdmJuTjBJR2x1SUhabFl6TWdaMlZ2YldWMGNubFdhV1YzUkdseUxDQmpiMjV6ZENCcGJpQjJaV016SUdkbGIyMWxkSEo1UTJ4bFlYSmpiMkYwVG05eWJXRnNMQ0JqYjI1emRDQnBiaUJVYjI5dVRXRjBaWEpwWVd3Z2JXRjBaWEpwWVd3c0lHbHViM1YwSUZKbFpteGxZM1JsWkV4cFoyaDBJSEpsWm14bFkzUmxaRXhwWjJoMElDa2dld29KZG1Wak15QnBjbkpoWkdsaGJtTmxJRDBnWjJWMFIzSmhaR2xsYm5SSmNuSmhaR2xoYm1ObEtDQm5aVzl0WlhSeWVVNXZjbTFoYkN3Z1pHbHlaV04wVEdsbmFIUXVaR2x5WldOMGFXOXVJQ2tnS2lCa2FYSmxZM1JNYVdkb2RDNWpiMnh2Y2pzS0NYSmxabXhsWTNSbFpFeHBaMmgwTG1ScGNtVmpkRVJwWm1aMWMyVWdLejBnYVhKeVlXUnBZVzVqWlNBcUlFSlNSRVpmVEdGdFltVnlkQ2dnYldGMFpYSnBZV3d1WkdsbVpuVnpaVU52Ykc5eUlDazdDbjBLZG05cFpDQlNSVjlKYm1ScGNtVmpkRVJwWm1aMWMyVmZWRzl2YmlnZ1kyOXVjM1FnYVc0Z2RtVmpNeUJwY25KaFpHbGhibU5sTENCamIyNXpkQ0JwYmlCMlpXTXpJR2RsYjIxbGRISjVVRzl6YVhScGIyNHNJR052Ym5OMElHbHVJSFpsWXpNZ1oyVnZiV1YwY25sT2IzSnRZV3dzSUdOdmJuTjBJR2x1SUhabFl6TWdaMlZ2YldWMGNubFdhV1YzUkdseUxDQmpiMjV6ZENCcGJpQjJaV016SUdkbGIyMWxkSEo1UTJ4bFlYSmpiMkYwVG05eWJXRnNMQ0JqYjI1emRDQnBiaUJVYjI5dVRXRjBaWEpwWVd3Z2JXRjBaWEpwWVd3c0lHbHViM1YwSUZKbFpteGxZM1JsWkV4cFoyaDBJSEpsWm14bFkzUmxaRXhwWjJoMElDa2dld29KY21WbWJHVmpkR1ZrVEdsbmFIUXVhVzVrYVhKbFkzUkVhV1ptZFhObElDczlJR2x5Y21Ga2FXRnVZMlVnS2lCQ1VrUkdYMHhoYldKbGNuUW9JRzFoZEdWeWFXRnNMbVJwWm1aMWMyVkRiMnh2Y2lBcE93cDlDaU5rWldacGJtVWdVa1ZmUkdseVpXTjBDUWtKQ1ZKRlgwUnBjbVZqZEY5VWIyOXVDaU5rWldacGJtVWdVa1ZmU1c1a2FYSmxZM1JFYVdabWRYTmxDUWxTUlY5SmJtUnBjbVZqZEVScFptWjFjMlZmVkc5dmJtQXNJSGh0SUQwZ1lFSnNhVzV1VUdodmJtZE5ZWFJsY21saGJDQnRZWFJsY21saGJEc0tiV0YwWlhKcFlXd3VaR2xtWm5WelpVTnZiRzl5SUQwZ1pHbG1ablZ6WlVOdmJHOXlMbkpuWWpzS2JXRjBaWEpwWVd3dWMzQmxZM1ZzWVhKRGIyeHZjaUE5SUhOd1pXTjFiR0Z5T3dwdFlYUmxjbWxoYkM1emNHVmpkV3hoY2xOb2FXNXBibVZ6Y3lBOUlITm9hVzVwYm1WemN6c0tiV0YwWlhKcFlXd3VjM0JsWTNWc1lYSlRkSEpsYm1kMGFDQTlJSE53WldOMWJHRnlVM1J5Wlc1bmRHZzdZQ3dnZG0wZ1BTQmdkbUZ5ZVdsdVp5QjJaV016SUhaV2FXVjNVRzl6YVhScGIyNDdDbk4wY25WamRDQkNiR2x1YmxCb2IyNW5UV0YwWlhKcFlXd2dld29KZG1Wak15QmthV1ptZFhObFEyOXNiM0k3Q2dsMlpXTXpJSE53WldOMWJHRnlRMjlzYjNJN0NnbG1iRzloZENCemNHVmpkV3hoY2xOb2FXNXBibVZ6Y3pzS0NXWnNiMkYwSUhOd1pXTjFiR0Z5VTNSeVpXNW5kR2c3Q24wN0NuWnZhV1FnVWtWZlJHbHlaV04wWDBKc2FXNXVVR2h2Ym1jb0lHTnZibk4wSUdsdUlFbHVZMmxrWlc1MFRHbG5hSFFnWkdseVpXTjBUR2xuYUhRc0lHTnZibk4wSUdsdUlIWmxZek1nWjJWdmJXVjBjbmxRYjNOcGRHbHZiaXdnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVVNXZjbTFoYkN3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJuWlc5dFpYUnllVlpwWlhkRWFYSXNJR052Ym5OMElHbHVJSFpsWXpNZ1oyVnZiV1YwY25sRGJHVmhjbU52WVhST2IzSnRZV3dzSUdOdmJuTjBJR2x1SUVKc2FXNXVVR2h2Ym1kTllYUmxjbWxoYkNCdFlYUmxjbWxoYkN3Z2FXNXZkWFFnVW1WbWJHVmpkR1ZrVEdsbmFIUWdjbVZtYkdWamRHVmtUR2xuYUhRZ0tTQjdDZ2xtYkc5aGRDQmtiM1JPVENBOUlITmhkSFZ5WVhSbEtDQmtiM1FvSUdkbGIyMWxkSEo1VG05eWJXRnNMQ0JrYVhKbFkzUk1hV2RvZEM1a2FYSmxZM1JwYjI0Z0tTQXBPd29KZG1Wak15QnBjbkpoWkdsaGJtTmxJRDBnWkc5MFRrd2dLaUJrYVhKbFkzUk1hV2RvZEM1amIyeHZjanNLQ1hKbFpteGxZM1JsWkV4cFoyaDBMbVJwY21WamRFUnBabVoxYzJVZ0t6MGdhWEp5WVdScFlXNWpaU0FxSUVKU1JFWmZUR0Z0WW1WeWRDZ2diV0YwWlhKcFlXd3VaR2xtWm5WelpVTnZiRzl5SUNrN0NnbHlaV1pzWldOMFpXUk1hV2RvZEM1a2FYSmxZM1JUY0dWamRXeGhjaUFyUFNCcGNuSmhaR2xoYm1ObElDb2dRbEpFUmw5Q2JHbHVibEJvYjI1bktDQmthWEpsWTNSTWFXZG9kQzVrYVhKbFkzUnBiMjRzSUdkbGIyMWxkSEo1Vm1sbGQwUnBjaXdnWjJWdmJXVjBjbmxPYjNKdFlXd3NJRzFoZEdWeWFXRnNMbk53WldOMWJHRnlRMjlzYjNJc0lHMWhkR1Z5YVdGc0xuTndaV04xYkdGeVUyaHBibWx1WlhOeklDa2dLaUJ0WVhSbGNtbGhiQzV6Y0dWamRXeGhjbE4wY21WdVozUm9Pd3A5Q25admFXUWdVa1ZmU1c1a2FYSmxZM1JFYVdabWRYTmxYMEpzYVc1dVVHaHZibWNvSUdOdmJuTjBJR2x1SUhabFl6TWdhWEp5WVdScFlXNWpaU3dnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVWQnZjMmwwYVc5dUxDQmpiMjV6ZENCcGJpQjJaV016SUdkbGIyMWxkSEo1VG05eWJXRnNMQ0JqYjI1emRDQnBiaUIyWldNeklHZGxiMjFsZEhKNVZtbGxkMFJwY2l3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJuWlc5dFpYUnllVU5zWldGeVkyOWhkRTV2Y20xaGJDd2dZMjl1YzNRZ2FXNGdRbXhwYm01UWFHOXVaMDFoZEdWeWFXRnNJRzFoZEdWeWFXRnNMQ0JwYm05MWRDQlNaV1pzWldOMFpXUk1hV2RvZENCeVpXWnNaV04wWldSTWFXZG9kQ0FwSUhzS0NYSmxabXhsWTNSbFpFeHBaMmgwTG1sdVpHbHlaV04wUkdsbVpuVnpaU0FyUFNCcGNuSmhaR2xoYm1ObElDb2dRbEpFUmw5TVlXMWlaWEowS0NCdFlYUmxjbWxoYkM1a2FXWm1kWE5sUTI5c2IzSWdLVHNLZlFvalpHVm1hVzVsSUZKRlgwUnBjbVZqZEFrSkNRbFNSVjlFYVhKbFkzUmZRbXhwYm01UWFHOXVad29qWkdWbWFXNWxJRkpGWDBsdVpHbHlaV04wUkdsbVpuVnpaUWtKVWtWZlNXNWthWEpsWTNSRWFXWm1kWE5sWDBKc2FXNXVVR2h2Ym1kZ0xDQjViU0E5SUdCUWFIbHphV05oYkUxaGRHVnlhV0ZzSUcxaGRHVnlhV0ZzT3dwdFlYUmxjbWxoYkM1a2FXWm1kWE5sUTI5c2IzSWdQU0JrYVdabWRYTmxRMjlzYjNJdWNtZGlJQ29nS0NBeExqQWdMU0J0WlhSaGJHNWxjM05HWVdOMGIzSWdLVHNLZG1Wak15QmtlSGtnUFNCdFlYZ29JR0ZpY3lnZ1pFWmtlQ2dnYm05dVVHVnlkSFZ5WW1Wa1RtOXliV0ZzSUNrZ0tTd2dZV0p6S0NCa1JtUjVLQ0J1YjI1UVpYSjBkWEppWldST2IzSnRZV3dnS1NBcElDazdDbVpzYjJGMElHZGxiMjFsZEhKNVVtOTFaMmh1WlhOeklEMGdiV0Y0S0NCdFlYZ29JR1I0ZVM1NExDQmtlSGt1ZVNBcExDQmtlSGt1ZWlBcE93cHRZWFJsY21saGJDNXliM1ZuYUc1bGMzTWdQU0J0WVhnb0lISnZkV2RvYm1WemMwWmhZM1J2Y2l3Z01DNHdOVEkxSUNrN2JXRjBaWEpwWVd3dWNtOTFaMmh1WlhOeklDczlJR2RsYjIxbGRISjVVbTkxWjJodVpYTnpPd3B0WVhSbGNtbGhiQzV5YjNWbmFHNWxjM01nUFNCdGFXNG9JRzFoZEdWeWFXRnNMbkp2ZFdkb2JtVnpjeXdnTVM0d0lDazdDaU5wWm1SbFppQkpUMUlLQ1cxaGRHVnlhV0ZzTG1sdmNpQTlJR2x2Y2pzS0NTTnBabVJsWmlCVlUwVmZVMUJGUTFWTVFWSUtDUWxtYkc5aGRDQnpjR1ZqZFd4aGNrbHVkR1Z1YzJsMGVVWmhZM1J2Y2lBOUlITndaV04xYkdGeVNXNTBaVzV6YVhSNU93b0pDWFpsWXpNZ2MzQmxZM1ZzWVhKRGIyeHZja1poWTNSdmNpQTlJSE53WldOMWJHRnlRMjlzYjNJN0Nna0pJMmxtWkdWbUlGVlRSVjlUVUVWRFZVeEJVbDlEVDB4UFVrMUJVQW9KQ1FsemNHVmpkV3hoY2tOdmJHOXlSbUZqZEc5eUlDbzlJSFJsZUhSMWNtVXlSQ2dnYzNCbFkzVnNZWEpEYjJ4dmNrMWhjQ3dnZGxOd1pXTjFiR0Z5UTI5c2IzSk5ZWEJWZGlBcExuSm5ZanNLQ1FralpXNWthV1lLQ1FramFXWmtaV1lnVlZORlgxTlFSVU5WVEVGU1gwbE9WRVZPVTBsVVdVMUJVQW9KQ1FsemNHVmpkV3hoY2tsdWRHVnVjMmwwZVVaaFkzUnZjaUFxUFNCMFpYaDBkWEpsTWtRb0lITndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndMQ0IyVTNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhCVmRpQXBMbUU3Q2drSkkyVnVaR2xtQ2drSmJXRjBaWEpwWVd3dWMzQmxZM1ZzWVhKR09UQWdQU0J0YVhnb0lITndaV04xYkdGeVNXNTBaVzV6YVhSNVJtRmpkRzl5TENBeExqQXNJRzFsZEdGc2JtVnpjMFpoWTNSdmNpQXBPd29KSTJWc2MyVUtDUWxtYkc5aGRDQnpjR1ZqZFd4aGNrbHVkR1Z1YzJsMGVVWmhZM1J2Y2lBOUlERXVNRHNLQ1FsMlpXTXpJSE53WldOMWJHRnlRMjlzYjNKR1lXTjBiM0lnUFNCMlpXTXpLQ0F4TGpBZ0tUc0tDUWx0WVhSbGNtbGhiQzV6Y0dWamRXeGhja1k1TUNBOUlERXVNRHNLQ1NObGJtUnBaZ29KYldGMFpYSnBZV3d1YzNCbFkzVnNZWEpEYjJ4dmNpQTlJRzFwZUNnZ2JXbHVLQ0J3YjNjeUtDQW9JRzFoZEdWeWFXRnNMbWx2Y2lBdElERXVNQ0FwSUM4Z0tDQnRZWFJsY21saGJDNXBiM0lnS3lBeExqQWdLU0FwSUNvZ2MzQmxZM1ZzWVhKRGIyeHZja1poWTNSdmNpd2dkbVZqTXlnZ01TNHdJQ2tnS1NBcUlITndaV04xYkdGeVNXNTBaVzV6YVhSNVJtRmpkRzl5TENCa2FXWm1kWE5sUTI5c2IzSXVjbWRpTENCdFpYUmhiRzVsYzNOR1lXTjBiM0lnS1RzS0kyVnNjMlVLQ1cxaGRHVnlhV0ZzTG5Od1pXTjFiR0Z5UTI5c2IzSWdQU0J0YVhnb0lIWmxZek1vSURBdU1EUWdLU3dnWkdsbVpuVnpaVU52Ykc5eUxuSm5ZaXdnYldWMFlXeHVaWE56Um1GamRHOXlJQ2s3Q2dsdFlYUmxjbWxoYkM1emNHVmpkV3hoY2tZNU1DQTlJREV1TURzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlEweEZRVkpEVDBGVUNnbHRZWFJsY21saGJDNWpiR1ZoY21OdllYUWdQU0JqYkdWaGNtTnZZWFE3Q2dsdFlYUmxjbWxoYkM1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNNZ1BTQmpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTTdDZ2x0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFJHTUNBOUlIWmxZek1vSURBdU1EUWdLVHNLQ1cxaGRHVnlhV0ZzTG1Oc1pXRnlZMjloZEVZNU1DQTlJREV1TURzS0NTTnBabVJsWmlCVlUwVmZRMHhGUVZKRFQwRlVUVUZRQ2drSmJXRjBaWEpwWVd3dVkyeGxZWEpqYjJGMElDbzlJSFJsZUhSMWNtVXlSQ2dnWTJ4bFlYSmpiMkYwVFdGd0xDQjJRMnhsWVhKamIyRjBUV0Z3VlhZZ0tTNTRPd29KSTJWdVpHbG1DZ2tqYVdaa1pXWWdWVk5GWDBOTVJVRlNRMDlCVkY5U1QxVkhTRTVGVTFOTlFWQUtDUWx0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM01nS2owZ2RHVjRkSFZ5WlRKRUtDQmpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTk5ZWEFzSUhaRGJHVmhjbU52WVhSU2IzVm5hRzVsYzNOTllYQlZkaUFwTG5rN0Nna2paVzVrYVdZS0NXMWhkR1Z5YVdGc0xtTnNaV0Z5WTI5aGRDQTlJSE5oZEhWeVlYUmxLQ0J0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFFnS1RzSmJXRjBaWEpwWVd3dVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOeklEMGdiV0Y0S0NCdFlYUmxjbWxoYkM1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNNc0lEQXVNRFV5TlNBcE93b0piV0YwWlhKcFlXd3VZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpJQ3M5SUdkbGIyMWxkSEo1VW05MVoyaHVaWE56T3dvSmJXRjBaWEpwWVd3dVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOeklEMGdiV2x1S0NCdFlYUmxjbWxoYkM1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNNc0lERXVNQ0FwT3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5SlVrbEVSVk5EUlU1RFJRb0piV0YwWlhKcFlXd3VhWEpwWkdWelkyVnVZMlVnUFNCcGNtbGtaWE5qWlc1alpUc0tDVzFoZEdWeWFXRnNMbWx5YVdSbGMyTmxibU5sU1U5U0lEMGdhWEpwWkdWelkyVnVZMlZKVDFJN0Nna2phV1prWldZZ1ZWTkZYMGxTU1VSRlUwTkZUa05GVFVGUUNna0piV0YwWlhKcFlXd3VhWEpwWkdWelkyVnVZMlVnS2owZ2RHVjRkSFZ5WlRKRUtDQnBjbWxrWlhOalpXNWpaVTFoY0N3Z2RrbHlhV1JsYzJObGJtTmxUV0Z3VlhZZ0tTNXlPd29KSTJWdVpHbG1DZ2tqYVdaa1pXWWdWVk5GWDBsU1NVUkZVME5GVGtORlgxUklTVU5MVGtWVFUwMUJVQW9KQ1cxaGRHVnlhV0ZzTG1seWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOeklEMGdLR2x5YVdSbGMyTmxibU5sVkdocFkydHVaWE56VFdGNGFXMTFiU0F0SUdseWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOelRXbHVhVzExYlNrZ0tpQjBaWGgwZFhKbE1rUW9JR2x5YVdSbGMyTmxibU5sVkdocFkydHVaWE56VFdGd0xDQjJTWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhCVmRpQXBMbWNnS3lCcGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMwMXBibWx0ZFcwN0Nna2paV3h6WlFvSkNXMWhkR1Z5YVdGc0xtbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpJRDBnYVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNOTllYaHBiWFZ0T3dvSkkyVnVaR2xtQ2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDFOSVJVVk9DZ2x0WVhSbGNtbGhiQzV6YUdWbGJrTnZiRzl5SUQwZ2MyaGxaVzVEYjJ4dmNqc0tDU05wWm1SbFppQlZVMFZmVTBoRlJVNWZRMDlNVDFKTlFWQUtDUWx0WVhSbGNtbGhiQzV6YUdWbGJrTnZiRzl5SUNvOUlIUmxlSFIxY21VeVJDZ2djMmhsWlc1RGIyeHZjazFoY0N3Z2RsTm9aV1Z1UTI5c2IzSk5ZWEJWZGlBcExuSm5ZanNLQ1NObGJtUnBaZ29KYldGMFpYSnBZV3d1YzJobFpXNVNiM1ZuYUc1bGMzTWdQU0JqYkdGdGNDZ2djMmhsWlc1U2IzVm5hRzVsYzNNc0lEQXVNRGNzSURFdU1DQXBPd29KSTJsbVpHVm1JRlZUUlY5VFNFVkZUbDlTVDFWSFNFNUZVMU5OUVZBS0NRbHRZWFJsY21saGJDNXphR1ZsYmxKdmRXZG9ibVZ6Y3lBcVBTQjBaWGgwZFhKbE1rUW9JSE5vWldWdVVtOTFaMmh1WlhOelRXRndMQ0IyVTJobFpXNVNiM1ZuYUc1bGMzTk5ZWEJWZGlBcExtRTdDZ2tqWlc1a2FXWUtJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZRVTVKVTA5VVVrOVFXUW9KSTJsbVpHVm1JRlZUUlY5QlRrbFRUMVJTVDFCWlRVRlFDZ2tKYldGME1pQmhibWx6YjNSeWIzQjVUV0YwSUQwZ2JXRjBNaWdnWVc1cGMyOTBjbTl3ZVZabFkzUnZjaTU0TENCaGJtbHpiM1J5YjNCNVZtVmpkRzl5TG5rc0lDMGdZVzVwYzI5MGNtOXdlVlpsWTNSdmNpNTVMQ0JoYm1semIzUnliM0I1Vm1WamRHOXlMbmdnS1RzS0NRbDJaV016SUdGdWFYTnZkSEp2Y0hsUWIyeGhjaUE5SUhSbGVIUjFjbVV5UkNnZ1lXNXBjMjkwY205d2VVMWhjQ3dnZGtGdWFYTnZkSEp2Y0hsTllYQlZkaUFwTG5Kbllqc0tDUWwyWldNeUlHRnVhWE52ZEhKdmNIbFdJRDBnWVc1cGMyOTBjbTl3ZVUxaGRDQXFJRzV2Y20xaGJHbDZaU2dnTWk0d0lDb2dZVzVwYzI5MGNtOXdlVkJ2YkdGeUxuSm5JQzBnZG1Wak1pZ2dNUzR3SUNrZ0tTQXFJR0Z1YVhOdmRISnZjSGxRYjJ4aGNpNWlPd29KSTJWc2MyVUtDUWwyWldNeUlHRnVhWE52ZEhKdmNIbFdJRDBnWVc1cGMyOTBjbTl3ZVZabFkzUnZjanNLQ1NObGJtUnBaZ29KYldGMFpYSnBZV3d1WVc1cGMyOTBjbTl3ZVNBOUlHeGxibWQwYUNnZ1lXNXBjMjkwY205d2VWWWdLVHNLQ1dGdWFYTnZkSEp2Y0hsV0lDODlJRzFoZEdWeWFXRnNMbUZ1YVhOdmRISnZjSGs3Q2dsdFlYUmxjbWxoYkM1aGJtbHpiM1J5YjNCNUlEMGdjMkYwZFhKaGRHVW9JRzFoZEdWeWFXRnNMbUZ1YVhOdmRISnZjSGtnS1RzS0NXMWhkR1Z5YVdGc0xtRnNjR2hoVkNBOUlHMXBlQ2dnY0c5M01pZ2diV0YwWlhKcFlXd3VjbTkxWjJodVpYTnpJQ2tzSURFdU1Dd2djRzkzTWlnZ2JXRjBaWEpwWVd3dVlXNXBjMjkwY205d2VTQXBJQ2s3Q2dsdFlYUmxjbWxoYkM1aGJtbHpiM1J5YjNCNVZDQTlJSFJpYmxzZ01DQmRJQ29nWVc1cGMyOTBjbTl3ZVZZdWVDQXRJSFJpYmxzZ01TQmRJQ29nWVc1cGMyOTBjbTl3ZVZZdWVUc0tDVzFoZEdWeWFXRnNMbUZ1YVhOdmRISnZjSGxDSUQwZ2RHSnVXeUF4SUYwZ0tpQmhibWx6YjNSeWIzQjVWaTU0SUNzZ2RHSnVXeUF3SUYwZ0tpQmhibWx6YjNSeWIzQjVWaTU1T3dvalpXNWthV1pnTENCTmJTQTlJR0J6ZEhKMVkzUWdVR2g1YzJsallXeE5ZWFJsY21saGJDQjdDZ2wyWldNeklHUnBabVoxYzJWRGIyeHZjanNLQ1dac2IyRjBJSEp2ZFdkb2JtVnpjenNLQ1habFl6TWdjM0JsWTNWc1lYSkRiMnh2Y2pzS0NXWnNiMkYwSUhOd1pXTjFiR0Z5Umprd093b0pJMmxtWkdWbUlGVlRSVjlEVEVWQlVrTlBRVlFLQ1FsbWJHOWhkQ0JqYkdWaGNtTnZZWFE3Q2drSlpteHZZWFFnWTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56T3dvSkNYWmxZek1nWTJ4bFlYSmpiMkYwUmpBN0Nna0pabXh2WVhRZ1kyeGxZWEpqYjJGMFJqa3dPd29KSTJWdVpHbG1DZ2tqYVdaa1pXWWdWVk5GWDBsU1NVUkZVME5GVGtORkNna0pabXh2WVhRZ2FYSnBaR1Z6WTJWdVkyVTdDZ2tKWm14dllYUWdhWEpwWkdWelkyVnVZMlZKVDFJN0Nna0pabXh2WVhRZ2FYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTTdDZ2tKZG1Wak15QnBjbWxrWlhOalpXNWpaVVp5WlhOdVpXdzdDZ2tKZG1Wak15QnBjbWxrWlhOalpXNWpaVVl3T3dvSkkyVnVaR2xtQ2dramFXWmtaV1lnVlZORlgxTklSVVZPQ2drSmRtVmpNeUJ6YUdWbGJrTnZiRzl5T3dvSkNXWnNiMkYwSUhOb1pXVnVVbTkxWjJodVpYTnpPd29KSTJWdVpHbG1DZ2tqYVdaa1pXWWdTVTlTQ2drSlpteHZZWFFnYVc5eU93b0pJMlZ1WkdsbUNna2phV1prWldZZ1ZWTkZYMVJTUVU1VFRVbFRVMGxQVGdvSkNXWnNiMkYwSUhSeVlXNXpiV2x6YzJsdmJqc0tDUWxtYkc5aGRDQjBjbUZ1YzIxcGMzTnBiMjVCYkhCb1lUc0tDUWxtYkc5aGRDQjBhR2xqYTI1bGMzTTdDZ2tKWm14dllYUWdZWFIwWlc1MVlYUnBiMjVFYVhOMFlXNWpaVHNLQ1FsMlpXTXpJR0YwZEdWdWRXRjBhVzl1UTI5c2IzSTdDZ2tqWlc1a2FXWUtDU05wWm1SbFppQlZVMFZmUVU1SlUwOVVVazlRV1FvSkNXWnNiMkYwSUdGdWFYTnZkSEp2Y0hrN0Nna0pabXh2WVhRZ1lXeHdhR0ZVT3dvSkNYWmxZek1nWVc1cGMyOTBjbTl3ZVZRN0Nna0pkbVZqTXlCaGJtbHpiM1J5YjNCNVFqc0tDU05sYm1ScFpncDlPd3AyWldNeklHTnNaV0Z5WTI5aGRGTndaV04xYkdGeUlEMGdkbVZqTXlnZ01DNHdJQ2s3Q25abFl6TWdjMmhsWlc1VGNHVmpkV3hoY2lBOUlIWmxZek1vSURBdU1DQXBPd3AyWldNeklGTmphR3hwWTJ0ZmRHOWZSakFvSUdOdmJuTjBJR2x1SUhabFl6TWdaaXdnWTI5dWMzUWdhVzRnWm14dllYUWdaamt3TENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JrYjNSV1NDQXBJSHNLSUNBZ0lHWnNiMkYwSUhnZ1BTQmpiR0Z0Y0NnZ01TNHdJQzBnWkc5MFZrZ3NJREF1TUN3Z01TNHdJQ2s3Q2lBZ0lDQm1iRzloZENCNE1pQTlJSGdnS2lCNE93b2dJQ0FnWm14dllYUWdlRFVnUFNCamJHRnRjQ2dnZUNBcUlIZ3lJQ29nZURJc0lEQXVNQ3dnTUM0NU9UazVJQ2s3Q2lBZ0lDQnlaWFIxY200Z0tDQm1JQzBnZG1Wak15Z2daamt3SUNrZ0tpQjROU0FwSUM4Z0tDQXhMakFnTFNCNE5TQXBPd3A5Q21ac2IyRjBJRlpmUjBkWVgxTnRhWFJvUTI5eWNtVnNZWFJsWkNnZ1kyOXVjM1FnYVc0Z1pteHZZWFFnWVd4d2FHRXNJR052Ym5OMElHbHVJR1pzYjJGMElHUnZkRTVNTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JrYjNST1ZpQXBJSHNLQ1dac2IyRjBJR0V5SUQwZ2NHOTNNaWdnWVd4d2FHRWdLVHNLQ1dac2IyRjBJR2QySUQwZ1pHOTBUa3dnS2lCemNYSjBLQ0JoTWlBcklDZ2dNUzR3SUMwZ1lUSWdLU0FxSUhCdmR6SW9JR1J2ZEU1V0lDa2dLVHNLQ1dac2IyRjBJR2RzSUQwZ1pHOTBUbFlnS2lCemNYSjBLQ0JoTWlBcklDZ2dNUzR3SUMwZ1lUSWdLU0FxSUhCdmR6SW9JR1J2ZEU1TUlDa2dLVHNLQ1hKbGRIVnliaUF3TGpVZ0x5QnRZWGdvSUdkMklDc2daMndzSUVWUVUwbE1UMDRnS1RzS2ZRcG1iRzloZENCRVgwZEhXQ2dnWTI5dWMzUWdhVzRnWm14dllYUWdZV3h3YUdFc0lHTnZibk4wSUdsdUlHWnNiMkYwSUdSdmRFNUlJQ2tnZXdvSlpteHZZWFFnWVRJZ1BTQndiM2N5S0NCaGJIQm9ZU0FwT3dvSlpteHZZWFFnWkdWdWIyMGdQU0J3YjNjeUtDQmtiM1JPU0NBcElDb2dLQ0JoTWlBdElERXVNQ0FwSUNzZ01TNHdPd29KY21WMGRYSnVJRkpGUTBsUVVrOURRVXhmVUVrZ0tpQmhNaUF2SUhCdmR6SW9JR1JsYm05dElDazdDbjBLSTJsbVpHVm1JRlZUUlY5QlRrbFRUMVJTVDFCWkNnbG1iRzloZENCV1gwZEhXRjlUYldsMGFFTnZjbkpsYkdGMFpXUmZRVzVwYzI5MGNtOXdhV01vSUdOdmJuTjBJR2x1SUdac2IyRjBJR0ZzY0doaFZDd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ1lXeHdhR0ZDTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JrYjNSVVZpd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ1pHOTBRbFlzSUdOdmJuTjBJR2x1SUdac2IyRjBJR1J2ZEZSTUxDQmpiMjV6ZENCcGJpQm1iRzloZENCa2IzUkNUQ3dnWTI5dWMzUWdhVzRnWm14dllYUWdaRzkwVGxZc0lHTnZibk4wSUdsdUlHWnNiMkYwSUdSdmRFNU1JQ2tnZXdvSkNXWnNiMkYwSUdkMklEMGdaRzkwVGt3Z0tpQnNaVzVuZEdnb0lIWmxZek1vSUdGc2NHaGhWQ0FxSUdSdmRGUldMQ0JoYkhCb1lVSWdLaUJrYjNSQ1Zpd2daRzkwVGxZZ0tTQXBPd29KQ1dac2IyRjBJR2RzSUQwZ1pHOTBUbFlnS2lCc1pXNW5kR2dvSUhabFl6TW9JR0ZzY0doaFZDQXFJR1J2ZEZSTUxDQmhiSEJvWVVJZ0tpQmtiM1JDVEN3Z1pHOTBUa3dnS1NBcE93b0pDV1pzYjJGMElIWWdQU0F3TGpVZ0x5QW9JR2QySUNzZ1oyd2dLVHNLQ1FseVpYUjFjbTRnYzJGMGRYSmhkR1VvZGlrN0NnbDlDZ2xtYkc5aGRDQkVYMGRIV0Y5QmJtbHpiM1J5YjNCcFl5Z2dZMjl1YzNRZ2FXNGdabXh2WVhRZ1lXeHdhR0ZVTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JoYkhCb1lVSXNJR052Ym5OMElHbHVJR1pzYjJGMElHUnZkRTVJTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JrYjNSVVNDd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ1pHOTBRa2dnS1NCN0Nna0pabXh2WVhRZ1lUSWdQU0JoYkhCb1lWUWdLaUJoYkhCb1lVSTdDZ2tKYUdsbmFIQWdkbVZqTXlCMklEMGdkbVZqTXlnZ1lXeHdhR0ZDSUNvZ1pHOTBWRWdzSUdGc2NHaGhWQ0FxSUdSdmRFSklMQ0JoTWlBcUlHUnZkRTVJSUNrN0Nna0phR2xuYUhBZ1pteHZZWFFnZGpJZ1BTQmtiM1FvSUhZc0lIWWdLVHNLQ1FsbWJHOWhkQ0IzTWlBOUlHRXlJQzhnZGpJN0Nna0pjbVYwZFhKdUlGSkZRMGxRVWs5RFFVeGZVRWtnS2lCaE1pQXFJSEJ2ZHpJZ0tDQjNNaUFwT3dvSmZRb2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOURURVZCVWtOUFFWUUtDWFpsWXpNZ1FsSkVSbDlIUjFoZlEyeGxZWEpqYjJGMEtDQmpiMjV6ZENCcGJpQjJaV016SUd4cFoyaDBSR2x5TENCamIyNXpkQ0JwYmlCMlpXTXpJSFpwWlhkRWFYSXNJR052Ym5OMElHbHVJSFpsWXpNZ2JtOXliV0ZzTENCamIyNXpkQ0JwYmlCUWFIbHphV05oYkUxaGRHVnlhV0ZzSUcxaGRHVnlhV0ZzS1NCN0Nna0pkbVZqTXlCbU1DQTlJRzFoZEdWeWFXRnNMbU5zWldGeVkyOWhkRVl3T3dvSkNXWnNiMkYwSUdZNU1DQTlJRzFoZEdWeWFXRnNMbU5zWldGeVkyOWhkRVk1TURzS0NRbG1iRzloZENCeWIzVm5hRzVsYzNNZ1BTQnRZWFJsY21saGJDNWpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTTdDZ2tKWm14dllYUWdZV3h3YUdFZ1BTQndiM2N5S0NCeWIzVm5hRzVsYzNNZ0tUc0tDUWwyWldNeklHaGhiR1pFYVhJZ1BTQnViM0p0WVd4cGVtVW9JR3hwWjJoMFJHbHlJQ3NnZG1sbGQwUnBjaUFwT3dvSkNXWnNiMkYwSUdSdmRFNU1JRDBnYzJGMGRYSmhkR1VvSUdSdmRDZ2dibTl5YldGc0xDQnNhV2RvZEVScGNpQXBJQ2s3Q2drSlpteHZZWFFnWkc5MFRsWWdQU0J6WVhSMWNtRjBaU2dnWkc5MEtDQnViM0p0WVd3c0lIWnBaWGRFYVhJZ0tTQXBPd29KQ1dac2IyRjBJR1J2ZEU1SUlEMGdjMkYwZFhKaGRHVW9JR1J2ZENnZ2JtOXliV0ZzTENCb1lXeG1SR2x5SUNrZ0tUc0tDUWxtYkc5aGRDQmtiM1JXU0NBOUlITmhkSFZ5WVhSbEtDQmtiM1FvSUhacFpYZEVhWElzSUdoaGJHWkVhWElnS1NBcE93b0pDWFpsWXpNZ1JpQTlJRVpmVTJOb2JHbGpheWdnWmpBc0lHWTVNQ3dnWkc5MFZrZ2dLVHNLQ1FsbWJHOWhkQ0JXSUQwZ1ZsOUhSMWhmVTIxcGRHaERiM0p5Wld4aGRHVmtLQ0JoYkhCb1lTd2daRzkwVGt3c0lHUnZkRTVXSUNrN0Nna0pabXh2WVhRZ1JDQTlJRVJmUjBkWUtDQmhiSEJvWVN3Z1pHOTBUa2dnS1RzS0NRbHlaWFIxY200Z1JpQXFJQ2dnVmlBcUlFUWdLVHNLQ1gwS0kyVnVaR2xtQ25abFl6TWdRbEpFUmw5SFIxZ29JR052Ym5OMElHbHVJSFpsWXpNZ2JHbG5hSFJFYVhJc0lHTnZibk4wSUdsdUlIWmxZek1nZG1sbGQwUnBjaXdnWTI5dWMzUWdhVzRnZG1Wak15QnViM0p0WVd3c0lHTnZibk4wSUdsdUlGQm9lWE5wWTJGc1RXRjBaWEpwWVd3Z2JXRjBaWEpwWVd3Z0tTQjdDZ2wyWldNeklHWXdJRDBnYldGMFpYSnBZV3d1YzNCbFkzVnNZWEpEYjJ4dmNqc0tDV1pzYjJGMElHWTVNQ0E5SUcxaGRHVnlhV0ZzTG5Od1pXTjFiR0Z5Umprd093b0pabXh2WVhRZ2NtOTFaMmh1WlhOeklEMGdiV0YwWlhKcFlXd3VjbTkxWjJodVpYTnpPd29KWm14dllYUWdZV3h3YUdFZ1BTQndiM2N5S0NCeWIzVm5hRzVsYzNNZ0tUc0tDWFpsWXpNZ2FHRnNaa1JwY2lBOUlHNXZjbTFoYkdsNlpTZ2diR2xuYUhSRWFYSWdLeUIyYVdWM1JHbHlJQ2s3Q2dsbWJHOWhkQ0JrYjNST1RDQTlJSE5oZEhWeVlYUmxLQ0JrYjNRb0lHNXZjbTFoYkN3Z2JHbG5hSFJFYVhJZ0tTQXBPd29KWm14dllYUWdaRzkwVGxZZ1BTQnpZWFIxY21GMFpTZ2daRzkwS0NCdWIzSnRZV3dzSUhacFpYZEVhWElnS1NBcE93b0pabXh2WVhRZ1pHOTBUa2dnUFNCellYUjFjbUYwWlNnZ1pHOTBLQ0J1YjNKdFlXd3NJR2hoYkdaRWFYSWdLU0FwT3dvSlpteHZZWFFnWkc5MFZrZ2dQU0J6WVhSMWNtRjBaU2dnWkc5MEtDQjJhV1YzUkdseUxDQm9ZV3htUkdseUlDa2dLVHNLQ1habFl6TWdSaUE5SUVaZlUyTm9iR2xqYXlnZ1pqQXNJR1k1TUN3Z1pHOTBWa2dnS1RzS0NTTnBabVJsWmlCVlUwVmZTVkpKUkVWVFEwVk9RMFVLQ1FsR0lEMGdiV2w0S0NCR0xDQnRZWFJsY21saGJDNXBjbWxrWlhOalpXNWpaVVp5WlhOdVpXd3NJRzFoZEdWeWFXRnNMbWx5YVdSbGMyTmxibU5sSUNrN0Nna2paVzVrYVdZS0NTTnBabVJsWmlCVlUwVmZRVTVKVTA5VVVrOVFXUW9KQ1dac2IyRjBJR1J2ZEZSTUlEMGdaRzkwS0NCdFlYUmxjbWxoYkM1aGJtbHpiM1J5YjNCNVZDd2diR2xuYUhSRWFYSWdLVHNLQ1FsbWJHOWhkQ0JrYjNSVVZpQTlJR1J2ZENnZ2JXRjBaWEpwWVd3dVlXNXBjMjkwY205d2VWUXNJSFpwWlhkRWFYSWdLVHNLQ1FsbWJHOWhkQ0JrYjNSVVNDQTlJR1J2ZENnZ2JXRjBaWEpwWVd3dVlXNXBjMjkwY205d2VWUXNJR2hoYkdaRWFYSWdLVHNLQ1FsbWJHOWhkQ0JrYjNSQ1RDQTlJR1J2ZENnZ2JXRjBaWEpwWVd3dVlXNXBjMjkwY205d2VVSXNJR3hwWjJoMFJHbHlJQ2s3Q2drSlpteHZZWFFnWkc5MFFsWWdQU0JrYjNRb0lHMWhkR1Z5YVdGc0xtRnVhWE52ZEhKdmNIbENMQ0IyYVdWM1JHbHlJQ2s3Q2drSlpteHZZWFFnWkc5MFFrZ2dQU0JrYjNRb0lHMWhkR1Z5YVdGc0xtRnVhWE52ZEhKdmNIbENMQ0JvWVd4bVJHbHlJQ2s3Q2drSlpteHZZWFFnVmlBOUlGWmZSMGRZWDFOdGFYUm9RMjl5Y21Wc1lYUmxaRjlCYm1semIzUnliM0JwWXlnZ2JXRjBaWEpwWVd3dVlXeHdhR0ZVTENCaGJIQm9ZU3dnWkc5MFZGWXNJR1J2ZEVKV0xDQmtiM1JVVEN3Z1pHOTBRa3dzSUdSdmRFNVdMQ0JrYjNST1RDQXBPd29KQ1dac2IyRjBJRVFnUFNCRVgwZEhXRjlCYm1semIzUnliM0JwWXlnZ2JXRjBaWEpwWVd3dVlXeHdhR0ZVTENCaGJIQm9ZU3dnWkc5MFRrZ3NJR1J2ZEZSSUxDQmtiM1JDU0NBcE93b0pJMlZzYzJVS0NRbG1iRzloZENCV0lEMGdWbDlIUjFoZlUyMXBkR2hEYjNKeVpXeGhkR1ZrS0NCaGJIQm9ZU3dnWkc5MFRrd3NJR1J2ZEU1V0lDazdDZ2tKWm14dllYUWdSQ0E5SUVSZlIwZFlLQ0JoYkhCb1lTd2daRzkwVGtnZ0tUc0tDU05sYm1ScFpnb0pjbVYwZFhKdUlFWWdLaUFvSUZZZ0tpQkVJQ2s3Q24wS2RtVmpNaUJNVkVOZlZYWW9JR052Ym5OMElHbHVJSFpsWXpNZ1Rpd2dZMjl1YzNRZ2FXNGdkbVZqTXlCV0xDQmpiMjV6ZENCcGJpQm1iRzloZENCeWIzVm5hRzVsYzNNZ0tTQjdDZ2xqYjI1emRDQm1iRzloZENCTVZWUmZVMGxhUlNBOUlEWTBMakE3Q2dsamIyNXpkQ0JtYkc5aGRDQk1WVlJmVTBOQlRFVWdQU0FvSUV4VlZGOVRTVnBGSUMwZ01TNHdJQ2tnTHlCTVZWUmZVMGxhUlRzS0NXTnZibk4wSUdac2IyRjBJRXhWVkY5Q1NVRlRJRDBnTUM0MUlDOGdURlZVWDFOSldrVTdDZ2xtYkc5aGRDQmtiM1JPVmlBOUlITmhkSFZ5WVhSbEtDQmtiM1FvSUU0c0lGWWdLU0FwT3dvSmRtVmpNaUIxZGlBOUlIWmxZeklvSUhKdmRXZG9ibVZ6Y3l3Z2MzRnlkQ2dnTVM0d0lDMGdaRzkwVGxZZ0tTQXBPd29KZFhZZ1BTQjFkaUFxSUV4VlZGOVRRMEZNUlNBcklFeFZWRjlDU1VGVE93b0pjbVYwZFhKdUlIVjJPd3A5Q21ac2IyRjBJRXhVUTE5RGJHbHdjR1ZrVTNCb1pYSmxSbTl5YlVaaFkzUnZjaWdnWTI5dWMzUWdhVzRnZG1Wak15Qm1JQ2tnZXdvSlpteHZZWFFnYkNBOUlHeGxibWQwYUNnZ1ppQXBPd29KY21WMGRYSnVJRzFoZUNnZ0tDQnNJQ29nYkNBcklHWXVlaUFwSUM4Z0tDQnNJQ3NnTVM0d0lDa3NJREF1TUNBcE93cDlDblpsWXpNZ1RGUkRYMFZrWjJWV1pXTjBiM0pHYjNKdFJtRmpkRzl5S0NCamIyNXpkQ0JwYmlCMlpXTXpJSFl4TENCamIyNXpkQ0JwYmlCMlpXTXpJSFl5SUNrZ2V3b0pabXh2WVhRZ2VDQTlJR1J2ZENnZ2RqRXNJSFl5SUNrN0NnbG1iRzloZENCNUlEMGdZV0p6S0NCNElDazdDZ2xtYkc5aGRDQmhJRDBnTUM0NE5UUXpPVGcxSUNzZ0tDQXdMalE1TmpVeE5UVWdLeUF3TGpBeE5EVXlNRFlnS2lCNUlDa2dLaUI1T3dvSlpteHZZWFFnWWlBOUlETXVOREUzTlRrME1DQXJJQ2dnTkM0eE5qRTJOekkwSUNzZ2VTQXBJQ29nZVRzS0NXWnNiMkYwSUhZZ1BTQmhJQzhnWWpzS0NXWnNiMkYwSUhSb1pYUmhYM05wYm5Sb1pYUmhJRDBnS0NCNElENGdNQzR3SUNrZ1B5QjJJRG9nTUM0MUlDb2dhVzUyWlhKelpYTnhjblFvSUcxaGVDZ2dNUzR3SUMwZ2VDQXFJSGdzSURGbExUY2dLU0FwSUMwZ2Rqc0tDWEpsZEhWeWJpQmpjbTl6Y3lnZ2RqRXNJSFl5SUNrZ0tpQjBhR1YwWVY5emFXNTBhR1YwWVRzS2ZRcDJaV016SUV4VVExOUZkbUZzZFdGMFpTZ2dZMjl1YzNRZ2FXNGdkbVZqTXlCT0xDQmpiMjV6ZENCcGJpQjJaV016SUZZc0lHTnZibk4wSUdsdUlIWmxZek1nVUN3Z1kyOXVjM1FnYVc0Z2JXRjBNeUJ0U1c1MkxDQmpiMjV6ZENCcGJpQjJaV016SUhKbFkzUkRiMjl5WkhOYklEUWdYU0FwSUhzS0NYWmxZek1nZGpFZ1BTQnlaV04wUTI5dmNtUnpXeUF4SUYwZ0xTQnlaV04wUTI5dmNtUnpXeUF3SUYwN0NnbDJaV016SUhZeUlEMGdjbVZqZEVOdmIzSmtjMXNnTXlCZElDMGdjbVZqZEVOdmIzSmtjMXNnTUNCZE93b0pkbVZqTXlCc2FXZG9kRTV2Y20xaGJDQTlJR055YjNOektDQjJNU3dnZGpJZ0tUc0tDV2xtS0NCa2IzUW9JR3hwWjJoMFRtOXliV0ZzTENCUUlDMGdjbVZqZEVOdmIzSmtjMXNnTUNCZElDa2dQQ0F3TGpBZ0tTQnlaWFIxY200Z2RtVmpNeWdnTUM0d0lDazdDZ2wyWldNeklGUXhMQ0JVTWpzS0NWUXhJRDBnYm05eWJXRnNhWHBsS0NCV0lDMGdUaUFxSUdSdmRDZ2dWaXdnVGlBcElDazdDZ2xVTWlBOUlDMGdZM0p2YzNNb0lFNHNJRlF4SUNrN0NnbHRZWFF6SUcxaGRDQTlJRzFKYm5ZZ0tpQjBjbUZ1YzNCdmMyVk5ZWFF6S0NCdFlYUXpLQ0JVTVN3Z1ZESXNJRTRnS1NBcE93b0pkbVZqTXlCamIyOXlaSE5iSURRZ1hUc0tDV052YjNKa2Mxc2dNQ0JkSUQwZ2JXRjBJQ29nS0NCeVpXTjBRMjl2Y21Seld5QXdJRjBnTFNCUUlDazdDZ2xqYjI5eVpITmJJREVnWFNBOUlHMWhkQ0FxSUNnZ2NtVmpkRU52YjNKa2Mxc2dNU0JkSUMwZ1VDQXBPd29KWTI5dmNtUnpXeUF5SUYwZ1BTQnRZWFFnS2lBb0lISmxZM1JEYjI5eVpITmJJRElnWFNBdElGQWdLVHNLQ1dOdmIzSmtjMXNnTXlCZElEMGdiV0YwSUNvZ0tDQnlaV04wUTI5dmNtUnpXeUF6SUYwZ0xTQlFJQ2s3Q2dsamIyOXlaSE5iSURBZ1hTQTlJRzV2Y20xaGJHbDZaU2dnWTI5dmNtUnpXeUF3SUYwZ0tUc0tDV052YjNKa2Mxc2dNU0JkSUQwZ2JtOXliV0ZzYVhwbEtDQmpiMjl5WkhOYklERWdYU0FwT3dvSlkyOXZjbVJ6V3lBeUlGMGdQU0J1YjNKdFlXeHBlbVVvSUdOdmIzSmtjMXNnTWlCZElDazdDZ2xqYjI5eVpITmJJRE1nWFNBOUlHNXZjbTFoYkdsNlpTZ2dZMjl2Y21Seld5QXpJRjBnS1RzS0NYWmxZek1nZG1WamRHOXlSbTl5YlVaaFkzUnZjaUE5SUhabFl6TW9JREF1TUNBcE93b0pkbVZqZEc5eVJtOXliVVpoWTNSdmNpQXJQU0JNVkVOZlJXUm5aVlpsWTNSdmNrWnZjbTFHWVdOMGIzSW9JR052YjNKa2Mxc2dNQ0JkTENCamIyOXlaSE5iSURFZ1hTQXBPd29KZG1WamRHOXlSbTl5YlVaaFkzUnZjaUFyUFNCTVZFTmZSV1JuWlZabFkzUnZja1p2Y20xR1lXTjBiM0lvSUdOdmIzSmtjMXNnTVNCZExDQmpiMjl5WkhOYklESWdYU0FwT3dvSmRtVmpkRzl5Um05eWJVWmhZM1J2Y2lBclBTQk1WRU5mUldSblpWWmxZM1J2Y2tadmNtMUdZV04wYjNJb0lHTnZiM0prYzFzZ01pQmRMQ0JqYjI5eVpITmJJRE1nWFNBcE93b0pkbVZqZEc5eVJtOXliVVpoWTNSdmNpQXJQU0JNVkVOZlJXUm5aVlpsWTNSdmNrWnZjbTFHWVdOMGIzSW9JR052YjNKa2Mxc2dNeUJkTENCamIyOXlaSE5iSURBZ1hTQXBPd29KWm14dllYUWdjbVZ6ZFd4MElEMGdURlJEWDBOc2FYQndaV1JUY0dobGNtVkdiM0p0Um1GamRHOXlLQ0IyWldOMGIzSkdiM0p0Um1GamRHOXlJQ2s3Q2dseVpYUjFjbTRnZG1Wak15Z2djbVZ6ZFd4MElDazdDbjBLSTJsbUlHUmxabWx1WldRb0lGVlRSVjlUU0VWRlRpQXBDbVpzYjJGMElFUmZRMmhoY214cFpTZ2dabXh2WVhRZ2NtOTFaMmh1WlhOekxDQm1iRzloZENCa2IzUk9TQ0FwSUhzS0NXWnNiMkYwSUdGc2NHaGhJRDBnY0c5M01pZ2djbTkxWjJodVpYTnpJQ2s3Q2dsbWJHOWhkQ0JwYm5aQmJIQm9ZU0E5SURFdU1DQXZJR0ZzY0doaE93b0pabXh2WVhRZ1kyOXpNbWdnUFNCa2IzUk9TQ0FxSUdSdmRFNUlPd29KWm14dllYUWdjMmx1TW1nZ1BTQnRZWGdvSURFdU1DQXRJR052Y3pKb0xDQXdMakF3TnpneE1qVWdLVHNLQ1hKbGRIVnliaUFvSURJdU1DQXJJR2x1ZGtGc2NHaGhJQ2tnS2lCd2IzY29JSE5wYmpKb0xDQnBiblpCYkhCb1lTQXFJREF1TlNBcElDOGdLQ0F5TGpBZ0tpQlFTU0FwT3dwOUNtWnNiMkYwSUZaZlRtVjFZbVZzZENnZ1pteHZZWFFnWkc5MFRsWXNJR1pzYjJGMElHUnZkRTVNSUNrZ2V3b0pjbVYwZFhKdUlITmhkSFZ5WVhSbEtDQXhMakFnTHlBb0lEUXVNQ0FxSUNnZ1pHOTBUa3dnS3lCa2IzUk9WaUF0SUdSdmRFNU1JQ29nWkc5MFRsWWdLU0FwSUNrN0NuMEtkbVZqTXlCQ1VrUkdYMU5vWldWdUtDQmpiMjV6ZENCcGJpQjJaV016SUd4cFoyaDBSR2x5TENCamIyNXpkQ0JwYmlCMlpXTXpJSFpwWlhkRWFYSXNJR052Ym5OMElHbHVJSFpsWXpNZ2JtOXliV0ZzTENCMlpXTXpJSE5vWldWdVEyOXNiM0lzSUdOdmJuTjBJR2x1SUdac2IyRjBJSE5vWldWdVVtOTFaMmh1WlhOeklDa2dld29KZG1Wak15Qm9ZV3htUkdseUlEMGdibTl5YldGc2FYcGxLQ0JzYVdkb2RFUnBjaUFySUhacFpYZEVhWElnS1RzS0NXWnNiMkYwSUdSdmRFNU1JRDBnYzJGMGRYSmhkR1VvSUdSdmRDZ2dibTl5YldGc0xDQnNhV2RvZEVScGNpQXBJQ2s3Q2dsbWJHOWhkQ0JrYjNST1ZpQTlJSE5oZEhWeVlYUmxLQ0JrYjNRb0lHNXZjbTFoYkN3Z2RtbGxkMFJwY2lBcElDazdDZ2xtYkc5aGRDQmtiM1JPU0NBOUlITmhkSFZ5WVhSbEtDQmtiM1FvSUc1dmNtMWhiQ3dnYUdGc1prUnBjaUFwSUNrN0NnbG1iRzloZENCRUlEMGdSRjlEYUdGeWJHbGxLQ0J6YUdWbGJsSnZkV2RvYm1WemN5d2daRzkwVGtnZ0tUc0tDV1pzYjJGMElGWWdQU0JXWDA1bGRXSmxiSFFvSUdSdmRFNVdMQ0JrYjNST1RDQXBPd29KY21WMGRYSnVJSE5vWldWdVEyOXNiM0lnS2lBb0lFUWdLaUJXSUNrN0NuMEtJMlZ1WkdsbUNtWnNiMkYwSUVsQ1RGTm9aV1Z1UWxKRVJpZ2dZMjl1YzNRZ2FXNGdkbVZqTXlCdWIzSnRZV3dzSUdOdmJuTjBJR2x1SUhabFl6TWdkbWxsZDBScGNpd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ2NtOTFaMmh1WlhOeklDa2dld29KWm14dllYUWdaRzkwVGxZZ1BTQnpZWFIxY21GMFpTZ2daRzkwS0NCdWIzSnRZV3dzSUhacFpYZEVhWElnS1NBcE93b0pabXh2WVhRZ2NqSWdQU0J5YjNWbmFHNWxjM01nS2lCeWIzVm5hRzVsYzNNN0NnbG1iRzloZENCaElEMGdjbTkxWjJodVpYTnpJRHdnTUM0eU5TQS9JQzB6TXprdU1pQXFJSEl5SUNzZ01UWXhMalFnS2lCeWIzVm5hRzVsYzNNZ0xTQXlOUzQ1SURvZ0xUZ3VORGdnS2lCeU1pQXJJREUwTGpNZ0tpQnliM1ZuYUc1bGMzTWdMU0E1TGprMU93b0pabXh2WVhRZ1lpQTlJSEp2ZFdkb2JtVnpjeUE4SURBdU1qVWdQeUEwTkM0d0lDb2djaklnTFNBeU15NDNJQ29nY205MVoyaHVaWE56SUNzZ015NHlOaUE2SURFdU9UY2dLaUJ5TWlBdElETXVNamNnS2lCeWIzVm5hRzVsYzNNZ0t5QXdMamN5T3dvSlpteHZZWFFnUkVjZ1BTQmxlSEFvSUdFZ0tpQmtiM1JPVmlBcklHSWdLU0FySUNnZ2NtOTFaMmh1WlhOeklEd2dNQzR5TlNBL0lEQXVNQ0E2SURBdU1TQXFJQ2dnY205MVoyaHVaWE56SUMwZ01DNHlOU0FwSUNrN0NnbHlaWFIxY200Z2MyRjBkWEpoZEdVb0lFUkhJQ29nVWtWRFNWQlNUME5CVEY5UVNTQXBPd3A5Q25abFl6SWdSRVpIUVhCd2NtOTRLQ0JqYjI1emRDQnBiaUIyWldNeklHNXZjbTFoYkN3Z1kyOXVjM1FnYVc0Z2RtVmpNeUIyYVdWM1JHbHlMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnliM1ZuYUc1bGMzTWdLU0I3Q2dsbWJHOWhkQ0JrYjNST1ZpQTlJSE5oZEhWeVlYUmxLQ0JrYjNRb0lHNXZjbTFoYkN3Z2RtbGxkMFJwY2lBcElDazdDZ2xqYjI1emRDQjJaV00wSUdNd0lEMGdkbVZqTkNnZ0xTQXhMQ0F0SURBdU1ESTNOU3dnTFNBd0xqVTNNaXdnTUM0d01qSWdLVHNLQ1dOdmJuTjBJSFpsWXpRZ1l6RWdQU0IyWldNMEtDQXhMQ0F3TGpBME1qVXNJREV1TURRc0lDMGdNQzR3TkNBcE93b0pkbVZqTkNCeUlEMGdjbTkxWjJodVpYTnpJQ29nWXpBZ0t5QmpNVHNLQ1dac2IyRjBJR0V3TURRZ1BTQnRhVzRvSUhJdWVDQXFJSEl1ZUN3Z1pYaHdNaWdnTFNBNUxqSTRJQ29nWkc5MFRsWWdLU0FwSUNvZ2NpNTRJQ3NnY2k1NU93b0pkbVZqTWlCbVlXSWdQU0IyWldNeUtDQXRJREV1TURRc0lERXVNRFFnS1NBcUlHRXdNRFFnS3lCeUxucDNPd29KY21WMGRYSnVJR1poWWpzS2ZRcDJaV016SUVWdWRtbHliMjV0Wlc1MFFsSkVSaWdnWTI5dWMzUWdhVzRnZG1Wak15QnViM0p0WVd3c0lHTnZibk4wSUdsdUlIWmxZek1nZG1sbGQwUnBjaXdnWTI5dWMzUWdhVzRnZG1Wak15QnpjR1ZqZFd4aGNrTnZiRzl5TENCamIyNXpkQ0JwYmlCbWJHOWhkQ0J6Y0dWamRXeGhja1k1TUN3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnY205MVoyaHVaWE56SUNrZ2V3b0pkbVZqTWlCbVlXSWdQU0JFUmtkQmNIQnliM2dvSUc1dmNtMWhiQ3dnZG1sbGQwUnBjaXdnY205MVoyaHVaWE56SUNrN0NnbHlaWFIxY200Z2MzQmxZM1ZzWVhKRGIyeHZjaUFxSUdaaFlpNTRJQ3NnYzNCbFkzVnNZWEpHT1RBZ0tpQm1ZV0l1ZVRzS2ZRb2phV1prWldZZ1ZWTkZYMGxTU1VSRlUwTkZUa05GQ25admFXUWdZMjl0Y0hWMFpVMTFiSFJwYzJOaGRIUmxjbWx1WjBseWFXUmxjMk5sYm1ObEtDQmpiMjV6ZENCcGJpQjJaV016SUc1dmNtMWhiQ3dnWTI5dWMzUWdhVzRnZG1Wak15QjJhV1YzUkdseUxDQmpiMjV6ZENCcGJpQjJaV016SUhOd1pXTjFiR0Z5UTI5c2IzSXNJR052Ym5OMElHbHVJR1pzYjJGMElITndaV04xYkdGeVJqa3dMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnBjbWxrWlhOalpXNWpaU3dnWTI5dWMzUWdhVzRnZG1Wak15QnBjbWxrWlhOalpXNWpaVVl3TENCamIyNXpkQ0JwYmlCbWJHOWhkQ0J5YjNWbmFHNWxjM01zSUdsdWIzVjBJSFpsWXpNZ2MybHVaMnhsVTJOaGRIUmxjaXdnYVc1dmRYUWdkbVZqTXlCdGRXeDBhVk5qWVhSMFpYSWdLU0I3Q2lObGJITmxDblp2YVdRZ1kyOXRjSFYwWlUxMWJIUnBjMk5oZEhSbGNtbHVaeWdnWTI5dWMzUWdhVzRnZG1Wak15QnViM0p0WVd3c0lHTnZibk4wSUdsdUlIWmxZek1nZG1sbGQwUnBjaXdnWTI5dWMzUWdhVzRnZG1Wak15QnpjR1ZqZFd4aGNrTnZiRzl5TENCamIyNXpkQ0JwYmlCbWJHOWhkQ0J6Y0dWamRXeGhja1k1TUN3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnY205MVoyaHVaWE56TENCcGJtOTFkQ0IyWldNeklITnBibWRzWlZOallYUjBaWElzSUdsdWIzVjBJSFpsWXpNZ2JYVnNkR2xUWTJGMGRHVnlJQ2tnZXdvalpXNWthV1lLQ1habFl6SWdabUZpSUQwZ1JFWkhRWEJ3Y205NEtDQnViM0p0WVd3c0lIWnBaWGRFYVhJc0lISnZkV2RvYm1WemN5QXBPd29KSTJsbVpHVm1JRlZUUlY5SlVrbEVSVk5EUlU1RFJRb0pDWFpsWXpNZ1JuSWdQU0J0YVhnb0lITndaV04xYkdGeVEyOXNiM0lzSUdseWFXUmxjMk5sYm1ObFJqQXNJR2x5YVdSbGMyTmxibU5sSUNrN0Nna2paV3h6WlFvSkNYWmxZek1nUm5JZ1BTQnpjR1ZqZFd4aGNrTnZiRzl5T3dvSkkyVnVaR2xtQ2dsMlpXTXpJRVp6YzBWemN5QTlJRVp5SUNvZ1ptRmlMbmdnS3lCemNHVmpkV3hoY2tZNU1DQXFJR1poWWk1NU93b0pabXh2WVhRZ1JYTnpJRDBnWm1GaUxuZ2dLeUJtWVdJdWVUc0tDV1pzYjJGMElFVnRjeUE5SURFdU1DQXRJRVZ6Y3pzS0NYWmxZek1nUm1GMlp5QTlJRVp5SUNzZ0tDQXhMakFnTFNCR2NpQXBJQ29nTUM0d05EYzJNVGs3Q1habFl6TWdSbTF6SUQwZ1JuTnpSWE56SUNvZ1JtRjJaeUF2SUNnZ01TNHdJQzBnUlcxeklDb2dSbUYyWnlBcE93b0pjMmx1WjJ4bFUyTmhkSFJsY2lBclBTQkdjM05GYzNNN0NnbHRkV3gwYVZOallYUjBaWElnS3owZ1JtMXpJQ29nUlcxek93cDlDaU5wWmlCT1ZVMWZVa1ZEVkY5QlVrVkJYMHhKUjBoVVV5QStJREFLQ1hadmFXUWdVa1ZmUkdseVpXTjBYMUpsWTNSQmNtVmhYMUJvZVhOcFkyRnNLQ0JqYjI1emRDQnBiaUJTWldOMFFYSmxZVXhwWjJoMElISmxZM1JCY21WaFRHbG5hSFFzSUdOdmJuTjBJR2x1SUhabFl6TWdaMlZ2YldWMGNubFFiM05wZEdsdmJpd2dZMjl1YzNRZ2FXNGdkbVZqTXlCblpXOXRaWFJ5ZVU1dmNtMWhiQ3dnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVWWnBaWGRFYVhJc0lHTnZibk4wSUdsdUlIWmxZek1nWjJWdmJXVjBjbmxEYkdWaGNtTnZZWFJPYjNKdFlXd3NJR052Ym5OMElHbHVJRkJvZVhOcFkyRnNUV0YwWlhKcFlXd2diV0YwWlhKcFlXd3NJR2x1YjNWMElGSmxabXhsWTNSbFpFeHBaMmgwSUhKbFpteGxZM1JsWkV4cFoyaDBJQ2tnZXdvSkNYWmxZek1nYm05eWJXRnNJRDBnWjJWdmJXVjBjbmxPYjNKdFlXdzdDZ2tKZG1Wak15QjJhV1YzUkdseUlEMGdaMlZ2YldWMGNubFdhV1YzUkdseU93b0pDWFpsWXpNZ2NHOXphWFJwYjI0Z1BTQm5aVzl0WlhSeWVWQnZjMmwwYVc5dU93b0pDWFpsWXpNZ2JHbG5hSFJRYjNNZ1BTQnlaV04wUVhKbFlVeHBaMmgwTG5CdmMybDBhVzl1T3dvSkNYWmxZek1nYUdGc1psZHBaSFJvSUQwZ2NtVmpkRUZ5WldGTWFXZG9kQzVvWVd4bVYybGtkR2c3Q2drSmRtVmpNeUJvWVd4bVNHVnBaMmgwSUQwZ2NtVmpkRUZ5WldGTWFXZG9kQzVvWVd4bVNHVnBaMmgwT3dvSkNYWmxZek1nYkdsbmFIUkRiMnh2Y2lBOUlISmxZM1JCY21WaFRHbG5hSFF1WTI5c2IzSTdDZ2tKWm14dllYUWdjbTkxWjJodVpYTnpJRDBnYldGMFpYSnBZV3d1Y205MVoyaHVaWE56T3dvSkNYWmxZek1nY21WamRFTnZiM0prYzFzZ05DQmRPd29KQ1hKbFkzUkRiMjl5WkhOYklEQWdYU0E5SUd4cFoyaDBVRzl6SUNzZ2FHRnNabGRwWkhSb0lDMGdhR0ZzWmtobGFXZG9kRHNKQ1hKbFkzUkRiMjl5WkhOYklERWdYU0E5SUd4cFoyaDBVRzl6SUMwZ2FHRnNabGRwWkhSb0lDMGdhR0ZzWmtobGFXZG9kRHNLQ1FseVpXTjBRMjl2Y21Seld5QXlJRjBnUFNCc2FXZG9kRkJ2Y3lBdElHaGhiR1pYYVdSMGFDQXJJR2hoYkdaSVpXbG5hSFE3Q2drSmNtVmpkRU52YjNKa2Mxc2dNeUJkSUQwZ2JHbG5hSFJRYjNNZ0t5Qm9ZV3htVjJsa2RHZ2dLeUJvWVd4bVNHVnBaMmgwT3dvSkNYWmxZeklnZFhZZ1BTQk1WRU5mVlhZb0lHNXZjbTFoYkN3Z2RtbGxkMFJwY2l3Z2NtOTFaMmh1WlhOeklDazdDZ2tKZG1Wak5DQjBNU0E5SUhSbGVIUjFjbVV5UkNnZ2JIUmpYekVzSUhWMklDazdDZ2tKZG1Wak5DQjBNaUE5SUhSbGVIUjFjbVV5UkNnZ2JIUmpYeklzSUhWMklDazdDZ2tKYldGME15QnRTVzUySUQwZ2JXRjBNeWdLQ1FrSmRtVmpNeWdnZERFdWVDd2dNQ3dnZERFdWVTQXBMQW9KQ1FsMlpXTXpLQ0FnSUNBd0xDQXhMQ0FnSUNBd0lDa3NDZ2tKQ1habFl6TW9JSFF4TG5vc0lEQXNJSFF4TG5jZ0tRb0pDU2s3Q2drSmRtVmpNeUJtY21WemJtVnNJRDBnS0NCdFlYUmxjbWxoYkM1emNHVmpkV3hoY2tOdmJHOXlJQ29nZERJdWVDQXJJQ2dnZG1Wak15Z2dNUzR3SUNrZ0xTQnRZWFJsY21saGJDNXpjR1ZqZFd4aGNrTnZiRzl5SUNrZ0tpQjBNaTU1SUNrN0Nna0pjbVZtYkdWamRHVmtUR2xuYUhRdVpHbHlaV04wVTNCbFkzVnNZWElnS3owZ2JHbG5hSFJEYjJ4dmNpQXFJR1p5WlhOdVpXd2dLaUJNVkVOZlJYWmhiSFZoZEdVb0lHNXZjbTFoYkN3Z2RtbGxkMFJwY2l3Z2NHOXphWFJwYjI0c0lHMUpibllzSUhKbFkzUkRiMjl5WkhNZ0tUc0tDUWx5Wldac1pXTjBaV1JNYVdkb2RDNWthWEpsWTNSRWFXWm1kWE5sSUNzOUlHeHBaMmgwUTI5c2IzSWdLaUJ0WVhSbGNtbGhiQzVrYVdabWRYTmxRMjlzYjNJZ0tpQk1WRU5mUlhaaGJIVmhkR1VvSUc1dmNtMWhiQ3dnZG1sbGQwUnBjaXdnY0c5emFYUnBiMjRzSUcxaGRETW9JREV1TUNBcExDQnlaV04wUTI5dmNtUnpJQ2s3Q2dsOUNpTmxibVJwWmdwMmIybGtJRkpGWDBScGNtVmpkRjlRYUhsemFXTmhiQ2dnWTI5dWMzUWdhVzRnU1c1amFXUmxiblJNYVdkb2RDQmthWEpsWTNSTWFXZG9kQ3dnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVWQnZjMmwwYVc5dUxDQmpiMjV6ZENCcGJpQjJaV016SUdkbGIyMWxkSEo1VG05eWJXRnNMQ0JqYjI1emRDQnBiaUIyWldNeklHZGxiMjFsZEhKNVZtbGxkMFJwY2l3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJuWlc5dFpYUnllVU5zWldGeVkyOWhkRTV2Y20xaGJDd2dZMjl1YzNRZ2FXNGdVR2g1YzJsallXeE5ZWFJsY21saGJDQnRZWFJsY21saGJDd2dhVzV2ZFhRZ1VtVm1iR1ZqZEdWa1RHbG5hSFFnY21WbWJHVmpkR1ZrVEdsbmFIUWdLU0I3Q2dsbWJHOWhkQ0JrYjNST1RDQTlJSE5oZEhWeVlYUmxLQ0JrYjNRb0lHZGxiMjFsZEhKNVRtOXliV0ZzTENCa2FYSmxZM1JNYVdkb2RDNWthWEpsWTNScGIyNGdLU0FwT3dvSmRtVmpNeUJwY25KaFpHbGhibU5sSUQwZ1pHOTBUa3dnS2lCa2FYSmxZM1JNYVdkb2RDNWpiMnh2Y2pzS0NTTnBabVJsWmlCVlUwVmZRMHhGUVZKRFQwRlVDZ2tKWm14dllYUWdaRzkwVGt4all5QTlJSE5oZEhWeVlYUmxLQ0JrYjNRb0lHZGxiMjFsZEhKNVEyeGxZWEpqYjJGMFRtOXliV0ZzTENCa2FYSmxZM1JNYVdkb2RDNWthWEpsWTNScGIyNGdLU0FwT3dvSkNYWmxZek1nWTJOSmNuSmhaR2xoYm1ObElEMGdaRzkwVGt4all5QXFJR1JwY21WamRFeHBaMmgwTG1OdmJHOXlPd29KQ1dOc1pXRnlZMjloZEZOd1pXTjFiR0Z5SUNzOUlHTmpTWEp5WVdScFlXNWpaU0FxSUVKU1JFWmZSMGRZWDBOc1pXRnlZMjloZENnZ1pHbHlaV04wVEdsbmFIUXVaR2x5WldOMGFXOXVMQ0JuWlc5dFpYUnllVlpwWlhkRWFYSXNJR2RsYjIxbGRISjVRMnhsWVhKamIyRjBUbTl5YldGc0xDQnRZWFJsY21saGJDQXBPd29KSTJWdVpHbG1DZ2tqYVdaa1pXWWdWVk5GWDFOSVJVVk9DZ2tKYzJobFpXNVRjR1ZqZFd4aGNpQXJQU0JwY25KaFpHbGhibU5sSUNvZ1FsSkVSbDlUYUdWbGJpZ2daR2x5WldOMFRHbG5hSFF1WkdseVpXTjBhVzl1TENCblpXOXRaWFJ5ZVZacFpYZEVhWElzSUdkbGIyMWxkSEo1VG05eWJXRnNMQ0J0WVhSbGNtbGhiQzV6YUdWbGJrTnZiRzl5TENCdFlYUmxjbWxoYkM1emFHVmxibEp2ZFdkb2JtVnpjeUFwT3dvSkkyVnVaR2xtQ2dseVpXWnNaV04wWldSTWFXZG9kQzVrYVhKbFkzUlRjR1ZqZFd4aGNpQXJQU0JwY25KaFpHbGhibU5sSUNvZ1FsSkVSbDlIUjFnb0lHUnBjbVZqZEV4cFoyaDBMbVJwY21WamRHbHZiaXdnWjJWdmJXVjBjbmxXYVdWM1JHbHlMQ0JuWlc5dFpYUnllVTV2Y20xaGJDd2diV0YwWlhKcFlXd2dLVHNLQ1hKbFpteGxZM1JsWkV4cFoyaDBMbVJwY21WamRFUnBabVoxYzJVZ0t6MGdhWEp5WVdScFlXNWpaU0FxSUVKU1JFWmZUR0Z0WW1WeWRDZ2diV0YwWlhKcFlXd3VaR2xtWm5WelpVTnZiRzl5SUNrN0NuMEtkbTlwWkNCU1JWOUpibVJwY21WamRFUnBabVoxYzJWZlVHaDVjMmxqWVd3b0lHTnZibk4wSUdsdUlIWmxZek1nYVhKeVlXUnBZVzVqWlN3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJuWlc5dFpYUnllVkJ2YzJsMGFXOXVMQ0JqYjI1emRDQnBiaUIyWldNeklHZGxiMjFsZEhKNVRtOXliV0ZzTENCamIyNXpkQ0JwYmlCMlpXTXpJR2RsYjIxbGRISjVWbWxsZDBScGNpd2dZMjl1YzNRZ2FXNGdkbVZqTXlCblpXOXRaWFJ5ZVVOc1pXRnlZMjloZEU1dmNtMWhiQ3dnWTI5dWMzUWdhVzRnVUdoNWMybGpZV3hOWVhSbGNtbGhiQ0J0WVhSbGNtbGhiQ3dnYVc1dmRYUWdVbVZtYkdWamRHVmtUR2xuYUhRZ2NtVm1iR1ZqZEdWa1RHbG5hSFFnS1NCN0NnbHlaV1pzWldOMFpXUk1hV2RvZEM1cGJtUnBjbVZqZEVScFptWjFjMlVnS3owZ2FYSnlZV1JwWVc1alpTQXFJRUpTUkVaZlRHRnRZbVZ5ZENnZ2JXRjBaWEpwWVd3dVpHbG1ablZ6WlVOdmJHOXlJQ2s3Q24wS2RtOXBaQ0JTUlY5SmJtUnBjbVZqZEZOd1pXTjFiR0Z5WDFCb2VYTnBZMkZzS0NCamIyNXpkQ0JwYmlCMlpXTXpJSEpoWkdsaGJtTmxMQ0JqYjI1emRDQnBiaUIyWldNeklHbHljbUZrYVdGdVkyVXNJR052Ym5OMElHbHVJSFpsWXpNZ1kyeGxZWEpqYjJGMFVtRmthV0Z1WTJVc0lHTnZibk4wSUdsdUlIWmxZek1nWjJWdmJXVjBjbmxRYjNOcGRHbHZiaXdnWTI5dWMzUWdhVzRnZG1Wak15Qm5aVzl0WlhSeWVVNXZjbTFoYkN3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJuWlc5dFpYUnllVlpwWlhkRWFYSXNJR052Ym5OMElHbHVJSFpsWXpNZ1oyVnZiV1YwY25sRGJHVmhjbU52WVhST2IzSnRZV3dzSUdOdmJuTjBJR2x1SUZCb2VYTnBZMkZzVFdGMFpYSnBZV3dnYldGMFpYSnBZV3dzSUdsdWIzVjBJRkpsWm14bFkzUmxaRXhwWjJoMElISmxabXhsWTNSbFpFeHBaMmgwS1NCN0Nna2phV1prWldZZ1ZWTkZYME5NUlVGU1EwOUJWQW9KQ1dOc1pXRnlZMjloZEZOd1pXTjFiR0Z5SUNzOUlHTnNaV0Z5WTI5aGRGSmhaR2xoYm1ObElDb2dSVzUyYVhKdmJtMWxiblJDVWtSR0tDQm5aVzl0WlhSeWVVTnNaV0Z5WTI5aGRFNXZjbTFoYkN3Z1oyVnZiV1YwY25sV2FXVjNSR2x5TENCdFlYUmxjbWxoYkM1amJHVmhjbU52WVhSR01Dd2diV0YwWlhKcFlXd3VZMnhsWVhKamIyRjBSamt3TENCdFlYUmxjbWxoYkM1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNNZ0tUc0tDU05sYm1ScFpnb0pJMmxtWkdWbUlGVlRSVjlUU0VWRlRnb0pDWE5vWldWdVUzQmxZM1ZzWVhJZ0t6MGdhWEp5WVdScFlXNWpaU0FxSUcxaGRHVnlhV0ZzTG5Ob1pXVnVRMjlzYjNJZ0tpQkpRa3hUYUdWbGJrSlNSRVlvSUdkbGIyMWxkSEo1VG05eWJXRnNMQ0JuWlc5dFpYUnllVlpwWlhkRWFYSXNJRzFoZEdWeWFXRnNMbk5vWldWdVVtOTFaMmh1WlhOeklDazdDZ2tqWlc1a2FXWUtDWFpsWXpNZ2MybHVaMnhsVTJOaGRIUmxjbWx1WnlBOUlIWmxZek1vSURBdU1DQXBPd29KZG1Wak15QnRkV3gwYVZOallYUjBaWEpwYm1jZ1BTQjJaV016S0NBd0xqQWdLVHNLQ1habFl6TWdZMjl6YVc1bFYyVnBaMmgwWldSSmNuSmhaR2xoYm1ObElEMGdhWEp5WVdScFlXNWpaU0FxSUZKRlEwbFFVazlEUVV4ZlVFazdDZ2tqYVdaa1pXWWdWVk5GWDBsU1NVUkZVME5GVGtORkNna0pZMjl0Y0hWMFpVMTFiSFJwYzJOaGRIUmxjbWx1WjBseWFXUmxjMk5sYm1ObEtDQm5aVzl0WlhSeWVVNXZjbTFoYkN3Z1oyVnZiV1YwY25sV2FXVjNSR2x5TENCdFlYUmxjbWxoYkM1emNHVmpkV3hoY2tOdmJHOXlMQ0J0WVhSbGNtbGhiQzV6Y0dWamRXeGhja1k1TUN3Z2JXRjBaWEpwWVd3dWFYSnBaR1Z6WTJWdVkyVXNJRzFoZEdWeWFXRnNMbWx5YVdSbGMyTmxibU5sUm5KbGMyNWxiQ3dnYldGMFpYSnBZV3d1Y205MVoyaHVaWE56TENCemFXNW5iR1ZUWTJGMGRHVnlhVzVuTENCdGRXeDBhVk5qWVhSMFpYSnBibWNnS1RzS0NTTmxiSE5sQ2drSlkyOXRjSFYwWlUxMWJIUnBjMk5oZEhSbGNtbHVaeWdnWjJWdmJXVjBjbmxPYjNKdFlXd3NJR2RsYjIxbGRISjVWbWxsZDBScGNpd2diV0YwWlhKcFlXd3VjM0JsWTNWc1lYSkRiMnh2Y2l3Z2JXRjBaWEpwWVd3dWMzQmxZM1ZzWVhKR09UQXNJRzFoZEdWeWFXRnNMbkp2ZFdkb2JtVnpjeXdnYzJsdVoyeGxVMk5oZEhSbGNtbHVaeXdnYlhWc2RHbFRZMkYwZEdWeWFXNW5JQ2s3Q2dralpXNWthV1lLQ1habFl6TWdkRzkwWVd4VFkyRjBkR1Z5YVc1bklEMGdjMmx1WjJ4bFUyTmhkSFJsY21sdVp5QXJJRzExYkhScFUyTmhkSFJsY21sdVp6c0tDWFpsWXpNZ1pHbG1ablZ6WlNBOUlHMWhkR1Z5YVdGc0xtUnBabVoxYzJWRGIyeHZjaUFxSUNnZ01TNHdJQzBnYldGNEtDQnRZWGdvSUhSdmRHRnNVMk5oZEhSbGNtbHVaeTV5TENCMGIzUmhiRk5qWVhSMFpYSnBibWN1WnlBcExDQjBiM1JoYkZOallYUjBaWEpwYm1jdVlpQXBJQ2s3Q2dseVpXWnNaV04wWldSTWFXZG9kQzVwYm1ScGNtVmpkRk53WldOMWJHRnlJQ3M5SUhKaFpHbGhibU5sSUNvZ2MybHVaMnhsVTJOaGRIUmxjbWx1WnpzS0NYSmxabXhsWTNSbFpFeHBaMmgwTG1sdVpHbHlaV04wVTNCbFkzVnNZWElnS3owZ2JYVnNkR2xUWTJGMGRHVnlhVzVuSUNvZ1kyOXphVzVsVjJWcFoyaDBaV1JKY25KaFpHbGhibU5sT3dvSmNtVm1iR1ZqZEdWa1RHbG5hSFF1YVc1a2FYSmxZM1JFYVdabWRYTmxJQ3M5SUdScFptWjFjMlVnS2lCamIzTnBibVZYWldsbmFIUmxaRWx5Y21Ga2FXRnVZMlU3Q24wS0kyUmxabWx1WlNCU1JWOUVhWEpsWTNRSkNRa0pVa1ZmUkdseVpXTjBYMUJvZVhOcFkyRnNDaU5rWldacGJtVWdVa1ZmUkdseVpXTjBYMUpsWTNSQmNtVmhDUWxTUlY5RWFYSmxZM1JmVW1WamRFRnlaV0ZmVUdoNWMybGpZV3dLSTJSbFptbHVaU0JTUlY5SmJtUnBjbVZqZEVScFptWjFjMlVKQ1ZKRlgwbHVaR2x5WldOMFJHbG1ablZ6WlY5UWFIbHphV05oYkFvalpHVm1hVzVsSUZKRlgwbHVaR2x5WldOMFUzQmxZM1ZzWVhJSkNWSkZYMGx1WkdseVpXTjBVM0JsWTNWc1lYSmZVR2g1YzJsallXd0tabXh2WVhRZ1kyOXRjSFYwWlZOd1pXTjFiR0Z5VDJOamJIVnphVzl1S0NCamIyNXpkQ0JwYmlCbWJHOWhkQ0JrYjNST1Zpd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ1lXMWlhV1Z1ZEU5alkyeDFjMmx2Yml3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnY205MVoyaHVaWE56SUNrZ2V3b0pjbVYwZFhKdUlITmhkSFZ5WVhSbEtDQndiM2NvSUdSdmRFNVdJQ3NnWVcxaWFXVnVkRTlqWTJ4MWMybHZiaXdnWlhod01pZ2dMU0F4Tmk0d0lDb2djbTkxWjJodVpYTnpJQzBnTVM0d0lDa2dLU0F0SURFdU1DQXJJR0Z0WW1sbGJuUlBZMk5zZFhOcGIyNGdLVHNLZldBc0lGTnRJRDBnWUFwMlpXTXpJR2RsYjIxbGRISjVVRzl6YVhScGIyNGdQU0F0SUhaV2FXVjNVRzl6YVhScGIyNDdDblpsWXpNZ1oyVnZiV1YwY25sT2IzSnRZV3dnUFNCdWIzSnRZV3c3Q25abFl6TWdaMlZ2YldWMGNubFdhV1YzUkdseUlEMGdLQ0JwYzA5eWRHaHZaM0poY0docFl5QXBJRDhnZG1Wak15Z2dNQ3dnTUN3Z01TQXBJRG9nYm05eWJXRnNhWHBsS0NCMlZtbGxkMUJ2YzJsMGFXOXVJQ2s3Q25abFl6TWdaMlZ2YldWMGNubERiR1ZoY21OdllYUk9iM0p0WVd3N0NpTnBabVJsWmlCVlUwVmZRMHhGUVZKRFQwRlVDZ2xuWlc5dFpYUnllVU5zWldGeVkyOWhkRTV2Y20xaGJDQTlJR05zWldGeVkyOWhkRTV2Y20xaGJEc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZTVkpKUkVWVFEwVk9RMFVLQ1dac2IyRjBJR1J2ZEU1V2FTQTlJSE5oZEhWeVlYUmxLQ0JrYjNRb0lHNXZjbTFoYkN3Z1oyVnZiV1YwY25sV2FXVjNSR2x5SUNrZ0tUc0tDV2xtSUNnZ2JXRjBaWEpwWVd3dWFYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTWdQVDBnTUM0d0lDa2dld29KQ1cxaGRHVnlhV0ZzTG1seWFXUmxjMk5sYm1ObElEMGdNQzR3T3dvSmZTQmxiSE5sSUhzS0NRbHRZWFJsY21saGJDNXBjbWxrWlhOalpXNWpaU0E5SUhOaGRIVnlZWFJsS0NCdFlYUmxjbWxoYkM1cGNtbGtaWE5qWlc1alpTQXBPd29KZlFvSmFXWWdLQ0J0WVhSbGNtbGhiQzVwY21sa1pYTmpaVzVqWlNBK0lEQXVNQ0FwSUhzS0NRbHRZWFJsY21saGJDNXBjbWxrWlhOalpXNWpaVVp5WlhOdVpXd2dQU0JsZG1Gc1NYSnBaR1Z6WTJWdVkyVW9JREV1TUN3Z2JXRjBaWEpwWVd3dWFYSnBaR1Z6WTJWdVkyVkpUMUlzSUdSdmRFNVdhU3dnYldGMFpYSnBZV3d1YVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNNc0lHMWhkR1Z5YVdGc0xuTndaV04xYkdGeVEyOXNiM0lnS1RzS0NRbHRZWFJsY21saGJDNXBjbWxrWlhOalpXNWpaVVl3SUQwZ1UyTm9iR2xqYTE5MGIxOUdNQ2dnYldGMFpYSnBZV3d1YVhKcFpHVnpZMlZ1WTJWR2NtVnpibVZzTENBeExqQXNJR1J2ZEU1V2FTQXBPd29KZlFvalpXNWthV1lLU1c1amFXUmxiblJNYVdkb2RDQmthWEpsWTNSTWFXZG9kRHNLSTJsbUlDZ2dUbFZOWDFCUFNVNVVYMHhKUjBoVVV5QStJREFnS1NBbUppQmtaV1pwYm1Wa0tDQlNSVjlFYVhKbFkzUWdLUW9KVUc5cGJuUk1hV2RvZENCd2IybHVkRXhwWjJoME93b0pJMmxtSUdSbFptbHVaV1FvSUZWVFJWOVRTRUZFVDFkTlFWQWdLU0FtSmlCT1ZVMWZVRTlKVGxSZlRFbEhTRlJmVTBoQlJFOVhVeUErSURBS0NWQnZhVzUwVEdsbmFIUlRhR0ZrYjNjZ2NHOXBiblJNYVdkb2RGTm9ZV1J2ZHpzS0NTTmxibVJwWmdvSkkzQnlZV2R0WVNCMWJuSnZiR3hmYkc5dmNGOXpkR0Z5ZEFvSlptOXlJQ2dnYVc1MElHa2dQU0F3T3lCcElEd2dUbFZOWDFCUFNVNVVYMHhKUjBoVVV6c2dhU0FyS3lBcElIc0tDUWx3YjJsdWRFeHBaMmgwSUQwZ2NHOXBiblJNYVdkb2RITmJJR2tnWFRzS0NRbG5aWFJRYjJsdWRFeHBaMmgwU1c1bWJ5Z2djRzlwYm5STWFXZG9kQ3dnWjJWdmJXVjBjbmxRYjNOcGRHbHZiaXdnWkdseVpXTjBUR2xuYUhRZ0tUc0tDUWtqYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMU5JUVVSUFYwMUJVQ0FwSUNZbUlDZ2dWVTVTVDB4TVJVUmZURTlQVUY5SlRrUkZXQ0E4SUU1VlRWOVFUMGxPVkY5TVNVZElWRjlUU0VGRVQxZFRJQ2tLQ1Fsd2IybHVkRXhwWjJoMFUyaGhaRzkzSUQwZ2NHOXBiblJNYVdkb2RGTm9ZV1J2ZDNOYklHa2dYVHNLQ1Fsa2FYSmxZM1JNYVdkb2RDNWpiMnh2Y2lBcVBTQW9JR1JwY21WamRFeHBaMmgwTG5acGMybGliR1VnSmlZZ2NtVmpaV2wyWlZOb1lXUnZkeUFwSUQ4Z1oyVjBVRzlwYm5SVGFHRmtiM2NvSUhCdmFXNTBVMmhoWkc5M1RXRndXeUJwSUYwc0lIQnZhVzUwVEdsbmFIUlRhR0ZrYjNjdWMyaGhaRzkzVFdGd1UybDZaU3dnY0c5cGJuUk1hV2RvZEZOb1lXUnZkeTV6YUdGa2IzZENhV0Z6TENCd2IybHVkRXhwWjJoMFUyaGhaRzkzTG5Ob1lXUnZkMUpoWkdsMWN5d2dkbEJ2YVc1MFUyaGhaRzkzUTI5dmNtUmJJR2tnWFN3Z2NHOXBiblJNYVdkb2RGTm9ZV1J2ZHk1emFHRmtiM2REWVcxbGNtRk9aV0Z5TENCd2IybHVkRXhwWjJoMFUyaGhaRzkzTG5Ob1lXUnZkME5oYldWeVlVWmhjaUFwSURvZ01TNHdPd29KQ1NObGJtUnBaZ29KQ1ZKRlgwUnBjbVZqZENnZ1pHbHlaV04wVEdsbmFIUXNJR2RsYjIxbGRISjVVRzl6YVhScGIyNHNJR2RsYjIxbGRISjVUbTl5YldGc0xDQm5aVzl0WlhSeWVWWnBaWGRFYVhJc0lHZGxiMjFsZEhKNVEyeGxZWEpqYjJGMFRtOXliV0ZzTENCdFlYUmxjbWxoYkN3Z2NtVm1iR1ZqZEdWa1RHbG5hSFFnS1RzS0NYMEtDU053Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmWlc1a0NpTmxibVJwWmdvamFXWWdLQ0JPVlUxZlUxQlBWRjlNU1VkSVZGTWdQaUF3SUNrZ0ppWWdaR1ZtYVc1bFpDZ2dVa1ZmUkdseVpXTjBJQ2tLQ1ZOd2IzUk1hV2RvZENCemNHOTBUR2xuYUhRN0NnbDJaV00wSUhOd2IzUkRiMnh2Y2pzS0NYWmxZek1nYzNCdmRFeHBaMmgwUTI5dmNtUTdDZ2xpYjI5c0lHbHVVM0J2ZEV4cFoyaDBUV0Z3T3dvSkkybG1JR1JsWm1sdVpXUW9JRlZUUlY5VFNFRkVUMWROUVZBZ0tTQW1KaUJPVlUxZlUxQlBWRjlNU1VkSVZGOVRTRUZFVDFkVElENGdNQW9KVTNCdmRFeHBaMmgwVTJoaFpHOTNJSE53YjNSTWFXZG9kRk5vWVdSdmR6c0tDU05sYm1ScFpnb0pJM0J5WVdkdFlTQjFibkp2Ykd4ZmJHOXZjRjl6ZEdGeWRBb0pabTl5SUNnZ2FXNTBJR2tnUFNBd095QnBJRHdnVGxWTlgxTlFUMVJmVEVsSFNGUlRPeUJwSUNzcklDa2dld29KQ1hOd2IzUk1hV2RvZENBOUlITndiM1JNYVdkb2RITmJJR2tnWFRzS0NRbG5aWFJUY0c5MFRHbG5hSFJKYm1adktDQnpjRzkwVEdsbmFIUXNJR2RsYjIxbGRISjVVRzl6YVhScGIyNHNJR1JwY21WamRFeHBaMmgwSUNrN0Nna0pJMmxtSUNnZ1ZVNVNUMHhNUlVSZlRFOVBVRjlKVGtSRldDQThJRTVWVFY5VFVFOVVYMHhKUjBoVVgxTklRVVJQVjFOZlYwbFVTRjlOUVZCVElDa0tDUWtqWkdWbWFXNWxJRk5RVDFSZlRFbEhTRlJmVFVGUVgwbE9SRVZZSUZWT1VrOU1URVZFWDB4UFQxQmZTVTVFUlZnS0NRa2paV3hwWmlBb0lGVk9VazlNVEVWRVgweFBUMUJmU1U1RVJWZ2dQQ0JPVlUxZlUxQlBWRjlNU1VkSVZGOVRTRUZFVDFkVElDa0tDUWtqWkdWbWFXNWxJRk5RVDFSZlRFbEhTRlJmVFVGUVgwbE9SRVZZSUU1VlRWOVRVRTlVWDB4SlIwaFVYMDFCVUZNS0NRa2paV3h6WlFvSkNTTmtaV1pwYm1VZ1UxQlBWRjlNU1VkSVZGOU5RVkJmU1U1RVJWZ2dLQ0JWVGxKUFRFeEZSRjlNVDA5UVgwbE9SRVZZSUMwZ1RsVk5YMU5RVDFSZlRFbEhTRlJmVTBoQlJFOVhVeUFySUU1VlRWOVRVRTlVWDB4SlIwaFVYMU5JUVVSUFYxTmZWMGxVU0Y5TlFWQlRJQ2tLQ1FralpXNWthV1lLQ1FramFXWWdLQ0JUVUU5VVgweEpSMGhVWDAxQlVGOUpUa1JGV0NBOElFNVZUVjlUVUU5VVgweEpSMGhVWDAxQlVGTWdLUW9KQ1FsemNHOTBUR2xuYUhSRGIyOXlaQ0E5SUhaVGNHOTBUR2xuYUhSRGIyOXlaRnNnYVNCZExuaDVlaUF2SUhaVGNHOTBUR2xuYUhSRGIyOXlaRnNnYVNCZExuYzdDZ2tKQ1dsdVUzQnZkRXhwWjJoMFRXRndJRDBnWVd4c0tDQnNaWE56VkdoaGJpZ2dZV0p6S0NCemNHOTBUR2xuYUhSRGIyOXlaQ0FxSURJdUlDMGdNUzRnS1N3Z2RtVmpNeWdnTVM0d0lDa2dLU0FwT3dvSkNRbHpjRzkwUTI5c2IzSWdQU0IwWlhoMGRYSmxNa1FvSUhOd2IzUk1hV2RvZEUxaGNGc2dVMUJQVkY5TVNVZElWRjlOUVZCZlNVNUVSVmdnWFN3Z2MzQnZkRXhwWjJoMFEyOXZjbVF1ZUhrZ0tUc0tDUWtKWkdseVpXTjBUR2xuYUhRdVkyOXNiM0lnUFNCcGJsTndiM1JNYVdkb2RFMWhjQ0EvSUdScGNtVmpkRXhwWjJoMExtTnZiRzl5SUNvZ2MzQnZkRU52Ykc5eUxuSm5ZaUE2SUdScGNtVmpkRXhwWjJoMExtTnZiRzl5T3dvSkNTTmxibVJwWmdvSkNTTjFibVJsWmlCVFVFOVVYMHhKUjBoVVgwMUJVRjlKVGtSRldBb0pDU05wWmlCa1pXWnBibVZrS0NCVlUwVmZVMGhCUkU5WFRVRlFJQ2tnSmlZZ0tDQlZUbEpQVEV4RlJGOU1UMDlRWDBsT1JFVllJRHdnVGxWTlgxTlFUMVJmVEVsSFNGUmZVMGhCUkU5WFV5QXBDZ2tKYzNCdmRFeHBaMmgwVTJoaFpHOTNJRDBnYzNCdmRFeHBaMmgwVTJoaFpHOTNjMXNnYVNCZE93b0pDV1JwY21WamRFeHBaMmgwTG1OdmJHOXlJQ285SUNnZ1pHbHlaV04wVEdsbmFIUXVkbWx6YVdKc1pTQW1KaUJ5WldObGFYWmxVMmhoWkc5M0lDa2dQeUJuWlhSVGFHRmtiM2NvSUhOd2IzUlRhR0ZrYjNkTllYQmJJR2tnWFN3Z2MzQnZkRXhwWjJoMFUyaGhaRzkzTG5Ob1lXUnZkMDFoY0ZOcGVtVXNJSE53YjNSTWFXZG9kRk5vWVdSdmR5NXphR0ZrYjNkQ2FXRnpMQ0J6Y0c5MFRHbG5hSFJUYUdGa2IzY3VjMmhoWkc5M1VtRmthWFZ6TENCMlUzQnZkRXhwWjJoMFEyOXZjbVJiSUdrZ1hTQXBJRG9nTVM0d093b0pDU05sYm1ScFpnb0pDVkpGWDBScGNtVmpkQ2dnWkdseVpXTjBUR2xuYUhRc0lHZGxiMjFsZEhKNVVHOXphWFJwYjI0c0lHZGxiMjFsZEhKNVRtOXliV0ZzTENCblpXOXRaWFJ5ZVZacFpYZEVhWElzSUdkbGIyMWxkSEo1UTJ4bFlYSmpiMkYwVG05eWJXRnNMQ0J0WVhSbGNtbGhiQ3dnY21WbWJHVmpkR1ZrVEdsbmFIUWdLVHNLQ1gwS0NTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZaVzVrQ2lObGJtUnBaZ29qYVdZZ0tDQk9WVTFmUkVsU1gweEpSMGhVVXlBK0lEQWdLU0FtSmlCa1pXWnBibVZrS0NCU1JWOUVhWEpsWTNRZ0tRb0pSR2x5WldOMGFXOXVZV3hNYVdkb2RDQmthWEpsWTNScGIyNWhiRXhwWjJoME93b0pJMmxtSUdSbFptbHVaV1FvSUZWVFJWOVRTRUZFVDFkTlFWQWdLU0FtSmlCT1ZVMWZSRWxTWDB4SlIwaFVYMU5JUVVSUFYxTWdQaUF3Q2dsRWFYSmxZM1JwYjI1aGJFeHBaMmgwVTJoaFpHOTNJR1JwY21WamRHbHZibUZzVEdsbmFIUlRhR0ZrYjNjN0Nna2paVzVrYVdZS0NTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZjM1JoY25RS0NXWnZjaUFvSUdsdWRDQnBJRDBnTURzZ2FTQThJRTVWVFY5RVNWSmZURWxIU0ZSVE95QnBJQ3NySUNrZ2V3b0pDV1JwY21WamRHbHZibUZzVEdsbmFIUWdQU0JrYVhKbFkzUnBiMjVoYkV4cFoyaDBjMXNnYVNCZE93b0pDV2RsZEVScGNtVmpkR2x2Ym1Gc1RHbG5hSFJKYm1adktDQmthWEpsWTNScGIyNWhiRXhwWjJoMExDQmthWEpsWTNSTWFXZG9kQ0FwT3dvSkNTTnBaaUJrWldacGJtVmtLQ0JWVTBWZlUwaEJSRTlYVFVGUUlDa2dKaVlnS0NCVlRsSlBURXhGUkY5TVQwOVFYMGxPUkVWWUlEd2dUbFZOWDBSSlVsOU1TVWRJVkY5VFNFRkVUMWRUSUNrS0NRbGthWEpsWTNScGIyNWhiRXhwWjJoMFUyaGhaRzkzSUQwZ1pHbHlaV04wYVc5dVlXeE1hV2RvZEZOb1lXUnZkM05iSUdrZ1hUc0tDUWxrYVhKbFkzUk1hV2RvZEM1amIyeHZjaUFxUFNBb0lHUnBjbVZqZEV4cFoyaDBMblpwYzJsaWJHVWdKaVlnY21WalpXbDJaVk5vWVdSdmR5QXBJRDhnWjJWMFUyaGhaRzkzS0NCa2FYSmxZM1JwYjI1aGJGTm9ZV1J2ZDAxaGNGc2dhU0JkTENCa2FYSmxZM1JwYjI1aGJFeHBaMmgwVTJoaFpHOTNMbk5vWVdSdmQwMWhjRk5wZW1Vc0lHUnBjbVZqZEdsdmJtRnNUR2xuYUhSVGFHRmtiM2N1YzJoaFpHOTNRbWxoY3l3Z1pHbHlaV04wYVc5dVlXeE1hV2RvZEZOb1lXUnZkeTV6YUdGa2IzZFNZV1JwZFhNc0lIWkVhWEpsWTNScGIyNWhiRk5vWVdSdmQwTnZiM0prV3lCcElGMGdLU0E2SURFdU1Ec0tDUWtqWlc1a2FXWUtDUWxTUlY5RWFYSmxZM1FvSUdScGNtVmpkRXhwWjJoMExDQm5aVzl0WlhSeWVWQnZjMmwwYVc5dUxDQm5aVzl0WlhSeWVVNXZjbTFoYkN3Z1oyVnZiV1YwY25sV2FXVjNSR2x5TENCblpXOXRaWFJ5ZVVOc1pXRnlZMjloZEU1dmNtMWhiQ3dnYldGMFpYSnBZV3dzSUhKbFpteGxZM1JsWkV4cFoyaDBJQ2s3Q2dsOUNna2pjSEpoWjIxaElIVnVjbTlzYkY5c2IyOXdYMlZ1WkFvalpXNWthV1lLSTJsbUlDZ2dUbFZOWDFKRlExUmZRVkpGUVY5TVNVZElWRk1nUGlBd0lDa2dKaVlnWkdWbWFXNWxaQ2dnVWtWZlJHbHlaV04wWDFKbFkzUkJjbVZoSUNrS0NWSmxZM1JCY21WaFRHbG5hSFFnY21WamRFRnlaV0ZNYVdkb2REc0tDU053Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmYzNSaGNuUUtDV1p2Y2lBb0lHbHVkQ0JwSUQwZ01Ec2dhU0E4SUU1VlRWOVNSVU5VWDBGU1JVRmZURWxIU0ZSVE95QnBJQ3NySUNrZ2V3b0pDWEpsWTNSQmNtVmhUR2xuYUhRZ1BTQnlaV04wUVhKbFlVeHBaMmgwYzFzZ2FTQmRPd29KQ1ZKRlgwUnBjbVZqZEY5U1pXTjBRWEpsWVNnZ2NtVmpkRUZ5WldGTWFXZG9kQ3dnWjJWdmJXVjBjbmxRYjNOcGRHbHZiaXdnWjJWdmJXVjBjbmxPYjNKdFlXd3NJR2RsYjIxbGRISjVWbWxsZDBScGNpd2daMlZ2YldWMGNubERiR1ZoY21OdllYUk9iM0p0WVd3c0lHMWhkR1Z5YVdGc0xDQnlaV1pzWldOMFpXUk1hV2RvZENBcE93b0pmUW9KSTNCeVlXZHRZU0IxYm5KdmJHeGZiRzl2Y0Y5bGJtUUtJMlZ1WkdsbUNpTnBaaUJrWldacGJtVmtLQ0JTUlY5SmJtUnBjbVZqZEVScFptWjFjMlVnS1FvSmRtVmpNeUJwWW14SmNuSmhaR2xoYm1ObElEMGdkbVZqTXlnZ01DNHdJQ2s3Q2dsMlpXTXpJR2x5Y21Ga2FXRnVZMlVnUFNCblpYUkJiV0pwWlc1MFRHbG5hSFJKY25KaFpHbGhibU5sS0NCaGJXSnBaVzUwVEdsbmFIUkRiMnh2Y2lBcE93b0pJMmxtSUdSbFptbHVaV1FvSUZWVFJWOU1TVWRJVkY5UVVrOUNSVk1nS1FvSkNXbHljbUZrYVdGdVkyVWdLejBnWjJWMFRHbG5hSFJRY205aVpVbHljbUZrYVdGdVkyVW9JR3hwWjJoMFVISnZZbVVzSUdkbGIyMWxkSEo1VG05eWJXRnNJQ2s3Q2dralpXNWthV1lLQ1NOcFppQW9JRTVWVFY5SVJVMUpYMHhKUjBoVVV5QStJREFnS1FvSkNTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZjM1JoY25RS0NRbG1iM0lnS0NCcGJuUWdhU0E5SURBN0lHa2dQQ0JPVlUxZlNFVk5TVjlNU1VkSVZGTTdJR2tnS3lzZ0tTQjdDZ2tKQ1dseWNtRmthV0Z1WTJVZ0t6MGdaMlYwU0dWdGFYTndhR1Z5WlV4cFoyaDBTWEp5WVdScFlXNWpaU2dnYUdWdGFYTndhR1Z5WlV4cFoyaDBjMXNnYVNCZExDQm5aVzl0WlhSeWVVNXZjbTFoYkNBcE93b0pDWDBLQ1FramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gyVnVaQW9KSTJWdVpHbG1DaU5sYm1ScFpnb2phV1lnWkdWbWFXNWxaQ2dnVWtWZlNXNWthWEpsWTNSVGNHVmpkV3hoY2lBcENnbDJaV016SUhKaFpHbGhibU5sSUQwZ2RtVmpNeWdnTUM0d0lDazdDZ2wyWldNeklHTnNaV0Z5WTI5aGRGSmhaR2xoYm1ObElEMGdkbVZqTXlnZ01DNHdJQ2s3Q2lObGJtUnBabUFzSUdKdElEMGdZQ05wWmlCa1pXWnBibVZrS0NCU1JWOUpibVJwY21WamRFUnBabVoxYzJVZ0tRb0pJMmxtWkdWbUlGVlRSVjlNU1VkSVZFMUJVQW9KQ1habFl6UWdiR2xuYUhSTllYQlVaWGhsYkNBOUlIUmxlSFIxY21VeVJDZ2diR2xuYUhSTllYQXNJSFpNYVdkb2RFMWhjRlYySUNrN0Nna0pkbVZqTXlCc2FXZG9kRTFoY0VseWNtRmthV0Z1WTJVZ1BTQnNhV2RvZEUxaGNGUmxlR1ZzTG5KbllpQXFJR3hwWjJoMFRXRndTVzUwWlc1emFYUjVPd29KQ1dseWNtRmthV0Z1WTJVZ0t6MGdiR2xuYUhSTllYQkpjbkpoWkdsaGJtTmxPd29KSTJWdVpHbG1DZ2tqYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMFZPVmsxQlVDQXBJQ1ltSUdSbFptbHVaV1FvSUZOVVFVNUVRVkpFSUNrZ0ppWWdaR1ZtYVc1bFpDZ2dSVTVXVFVGUVgxUlpVRVZmUTFWQ1JWOVZWaUFwQ2drSmFXSnNTWEp5WVdScFlXNWpaU0FyUFNCblpYUkpRa3hKY25KaFpHbGhibU5sS0NCblpXOXRaWFJ5ZVU1dmNtMWhiQ0FwT3dvSkkyVnVaR2xtQ2lObGJtUnBaZ29qYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMFZPVmsxQlVDQXBJQ1ltSUdSbFptbHVaV1FvSUZKRlgwbHVaR2x5WldOMFUzQmxZM1ZzWVhJZ0tRb0pJMmxtWkdWbUlGVlRSVjlCVGtsVFQxUlNUMUJaQ2drSmNtRmthV0Z1WTJVZ0t6MGdaMlYwU1VKTVFXNXBjMjkwY205d2VWSmhaR2xoYm1ObEtDQm5aVzl0WlhSeWVWWnBaWGRFYVhJc0lHZGxiMjFsZEhKNVRtOXliV0ZzTENCdFlYUmxjbWxoYkM1eWIzVm5hRzVsYzNNc0lHMWhkR1Z5YVdGc0xtRnVhWE52ZEhKdmNIbENMQ0J0WVhSbGNtbGhiQzVoYm1semIzUnliM0I1SUNrN0Nna2paV3h6WlFvSkNYSmhaR2xoYm1ObElDczlJR2RsZEVsQ1RGSmhaR2xoYm1ObEtDQm5aVzl0WlhSeWVWWnBaWGRFYVhJc0lHZGxiMjFsZEhKNVRtOXliV0ZzTENCdFlYUmxjbWxoYkM1eWIzVm5hRzVsYzNNZ0tUc0tDU05sYm1ScFpnb0pJMmxtWkdWbUlGVlRSVjlEVEVWQlVrTlBRVlFLQ1FsamJHVmhjbU52WVhSU1lXUnBZVzVqWlNBclBTQm5aWFJKUWt4U1lXUnBZVzVqWlNnZ1oyVnZiV1YwY25sV2FXVjNSR2x5TENCblpXOXRaWFJ5ZVVOc1pXRnlZMjloZEU1dmNtMWhiQ3dnYldGMFpYSnBZV3d1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56SUNrN0Nna2paVzVrYVdZS0kyVnVaR2xtWUN3Z1JXMGdQU0JnSTJsbUlHUmxabWx1WldRb0lGSkZYMGx1WkdseVpXTjBSR2xtWm5WelpTQXBDZ2xTUlY5SmJtUnBjbVZqZEVScFptWjFjMlVvSUdseWNtRmthV0Z1WTJVc0lHZGxiMjFsZEhKNVVHOXphWFJwYjI0c0lHZGxiMjFsZEhKNVRtOXliV0ZzTENCblpXOXRaWFJ5ZVZacFpYZEVhWElzSUdkbGIyMWxkSEo1UTJ4bFlYSmpiMkYwVG05eWJXRnNMQ0J0WVhSbGNtbGhiQ3dnY21WbWJHVmpkR1ZrVEdsbmFIUWdLVHNLSTJWdVpHbG1DaU5wWmlCa1pXWnBibVZrS0NCU1JWOUpibVJwY21WamRGTndaV04xYkdGeUlDa0tDVkpGWDBsdVpHbHlaV04wVTNCbFkzVnNZWElvSUhKaFpHbGhibU5sTENCcFlteEpjbkpoWkdsaGJtTmxMQ0JqYkdWaGNtTnZZWFJTWVdScFlXNWpaU3dnWjJWdmJXVjBjbmxRYjNOcGRHbHZiaXdnWjJWdmJXVjBjbmxPYjNKdFlXd3NJR2RsYjIxbGRISjVWbWxsZDBScGNpd2daMlZ2YldWMGNubERiR1ZoY21OdllYUk9iM0p0WVd3c0lHMWhkR1Z5YVdGc0xDQnlaV1pzWldOMFpXUk1hV2RvZENBcE93b2paVzVrYVdaZ0xDQlViU0E5SUdBamFXWWdaR1ZtYVc1bFpDZ2dWVk5GWDB4UFIwUkZVRlJJUWxWR0lDa2dKaVlnWkdWbWFXNWxaQ2dnVlZORlgweFBSMFJGVUZSSVFsVkdYMFZZVkNBcENnbG5iRjlHY21GblJHVndkR2hGV0ZRZ1BTQjJTWE5RWlhKemNHVmpkR2wyWlNBOVBTQXdMakFnUHlCbmJGOUdjbUZuUTI5dmNtUXVlaUE2SUd4dlp6SW9JSFpHY21GblJHVndkR2dnS1NBcUlHeHZaMFJsY0hSb1FuVm1Sa01nS2lBd0xqVTdDaU5sYm1ScFptQXNJSGR0SUQwZ1lDTnBaaUJrWldacGJtVmtLQ0JWVTBWZlRFOUhSRVZRVkVoQ1ZVWWdLU0FtSmlCa1pXWnBibVZrS0NCVlUwVmZURTlIUkVWUVZFaENWVVpmUlZoVUlDa0tDWFZ1YVdadmNtMGdabXh2WVhRZ2JHOW5SR1Z3ZEdoQ2RXWkdRenNLQ1haaGNubHBibWNnWm14dllYUWdka1p5WVdkRVpYQjBhRHNLQ1haaGNubHBibWNnWm14dllYUWdka2x6VUdWeWMzQmxZM1JwZG1VN0NpTmxibVJwWm1Bc0lFRnRJRDBnWUNOcFptUmxaaUJWVTBWZlRFOUhSRVZRVkVoQ1ZVWUtDU05wWm1SbFppQlZVMFZmVEU5SFJFVlFWRWhDVlVaZlJWaFVDZ2tKZG1GeWVXbHVaeUJtYkc5aGRDQjJSbkpoWjBSbGNIUm9Pd29KQ1haaGNubHBibWNnWm14dllYUWdka2x6VUdWeWMzQmxZM1JwZG1VN0Nna2paV3h6WlFvSkNYVnVhV1p2Y20wZ1pteHZZWFFnYkc5blJHVndkR2hDZFdaR1F6c0tDU05sYm1ScFpnb2paVzVrYVdaZ0xDQlNiU0E5SUdBamFXWmtaV1lnVlZORlgweFBSMFJGVUZSSVFsVkdDZ2tqYVdaa1pXWWdWVk5GWDB4UFIwUkZVRlJJUWxWR1gwVllWQW9KQ1haR2NtRm5SR1Z3ZEdnZ1BTQXhMakFnS3lCbmJGOVFiM05wZEdsdmJpNTNPd29KQ1haSmMxQmxjbk53WldOMGFYWmxJRDBnWm14dllYUW9JR2x6VUdWeWMzQmxZM1JwZG1WTllYUnlhWGdvSUhCeWIycGxZM1JwYjI1TllYUnlhWGdnS1NBcE93b0pJMlZzYzJVS0NRbHBaaUFvSUdselVHVnljM0JsWTNScGRtVk5ZWFJ5YVhnb0lIQnliMnBsWTNScGIyNU5ZWFJ5YVhnZ0tTQXBJSHNLQ1FrSloyeGZVRzl6YVhScGIyNHVlaUE5SUd4dlp6SW9JRzFoZUNnZ1JWQlRTVXhQVGl3Z1oyeGZVRzl6YVhScGIyNHVkeUFySURFdU1DQXBJQ2tnS2lCc2IyZEVaWEIwYUVKMVprWkRJQzBnTVM0d093b0pDUWxuYkY5UWIzTnBkR2x2Ymk1NklDbzlJR2RzWDFCdmMybDBhVzl1TG5jN0Nna0pmUW9KSTJWdVpHbG1DaU5sYm1ScFptQXNJRU50SUQwZ1lDTnBabVJsWmlCVlUwVmZUVUZRQ2dsMlpXTTBJSE5oYlhCc1pXUkVhV1ptZFhObFEyOXNiM0lnUFNCMFpYaDBkWEpsTWtRb0lHMWhjQ3dnZGsxaGNGVjJJQ2s3Q2dramFXWmtaV1lnUkVWRFQwUkZYMVpKUkVWUFgxUkZXRlJWVWtVS0NRbHpZVzF3YkdWa1JHbG1ablZ6WlVOdmJHOXlJRDBnZG1Wak5DZ2diV2w0S0NCd2IzY29JSE5oYlhCc1pXUkVhV1ptZFhObFEyOXNiM0l1Y21kaUlDb2dNQzQ1TkRjNE5qY3lPVGcySUNzZ2RtVmpNeWdnTUM0d05USXhNekkzTURFMElDa3NJSFpsWXpNb0lESXVOQ0FwSUNrc0lITmhiWEJzWldSRWFXWm1kWE5sUTI5c2IzSXVjbWRpSUNvZ01DNHdOemN6T1Rrek9EQTRMQ0IyWldNektDQnNaWE56VkdoaGJrVnhkV0ZzS0NCellXMXdiR1ZrUkdsbVpuVnpaVU52Ykc5eUxuSm5ZaXdnZG1Wak15Z2dNQzR3TkRBME5TQXBJQ2tnS1NBcExDQnpZVzF3YkdWa1JHbG1ablZ6WlVOdmJHOXlMbmNnS1RzS0NRb0pJMlZ1WkdsbUNnbGthV1ptZFhObFEyOXNiM0lnS2owZ2MyRnRjR3hsWkVScFptWjFjMlZEYjJ4dmNqc0tJMlZ1WkdsbVlDd2dVRzBnUFNCZ0kybG1aR1ZtSUZWVFJWOU5RVkFLQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUcxaGNEc0tJMlZ1WkdsbVlDd2dURzBnUFNCZ0kybG1JR1JsWm1sdVpXUW9JRlZUUlY5TlFWQWdLU0I4ZkNCa1pXWnBibVZrS0NCVlUwVmZRVXhRU0VGTlFWQWdLUW9KSTJsbUlHUmxabWx1WldRb0lGVlRSVjlRVDBsT1ZGTmZWVllnS1FvSkNYWmxZeklnZFhZZ1BTQjJWWFk3Q2dralpXeHpaUW9KQ1habFl6SWdkWFlnUFNBb0lIVjJWSEpoYm5ObWIzSnRJQ29nZG1Wak15Z2daMnhmVUc5cGJuUkRiMjl5WkM1NExDQXhMakFnTFNCbmJGOVFiMmx1ZEVOdmIzSmtMbmtzSURFZ0tTQXBMbmg1T3dvSkkyVnVaR2xtQ2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDAxQlVBb0paR2xtWm5WelpVTnZiRzl5SUNvOUlIUmxlSFIxY21VeVJDZ2diV0Z3TENCMWRpQXBPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlCVEZCSVFVMUJVQW9KWkdsbVpuVnpaVU52Ykc5eUxtRWdLajBnZEdWNGRIVnlaVEpFS0NCaGJIQm9ZVTFoY0N3Z2RYWWdLUzVuT3dvalpXNWthV1pnTENCSmJTQTlJR0FqYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMUJQU1U1VVUxOVZWaUFwQ2dsMllYSjVhVzVuSUhabFl6SWdkbFYyT3dvalpXeHpaUW9KSTJsbUlHUmxabWx1WldRb0lGVlRSVjlOUVZBZ0tTQjhmQ0JrWldacGJtVmtLQ0JWVTBWZlFVeFFTRUZOUVZBZ0tRb0pDWFZ1YVdadmNtMGdiV0YwTXlCMWRsUnlZVzV6Wm05eWJUc0tDU05sYm1ScFpnb2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOU5RVkFLQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUcxaGNEc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZRVXhRU0VGTlFWQUtDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJR0ZzY0doaFRXRndPd29qWlc1a2FXWmdMQ0JWYlNBOUlHQm1iRzloZENCdFpYUmhiRzVsYzNOR1lXTjBiM0lnUFNCdFpYUmhiRzVsYzNNN0NpTnBabVJsWmlCVlUwVmZUVVZVUVV4T1JWTlRUVUZRQ2dsMlpXTTBJSFJsZUdWc1RXVjBZV3h1WlhOeklEMGdkR1Y0ZEhWeVpUSkVLQ0J0WlhSaGJHNWxjM05OWVhBc0lIWk5aWFJoYkc1bGMzTk5ZWEJWZGlBcE93b0piV1YwWVd4dVpYTnpSbUZqZEc5eUlDbzlJSFJsZUdWc1RXVjBZV3h1WlhOekxtSTdDaU5sYm1ScFptQXNJRVJ0SUQwZ1lDTnBabVJsWmlCVlUwVmZUVVZVUVV4T1JWTlRUVUZRQ2dsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCdFpYUmhiRzVsYzNOTllYQTdDaU5sYm1ScFptQXNJRTV0SUQwZ1lDTnBaaUJrWldacGJtVmtLQ0JWVTBWZlRVOVNVRWhEVDB4UFVsTWdLU0FtSmlCa1pXWnBibVZrS0NCTlQxSlFTRlJCVWtkRlZGTmZWRVZZVkZWU1JTQXBDZ2wyUTI5c2IzSWdLajBnYlc5eWNHaFVZWEpuWlhSQ1lYTmxTVzVtYkhWbGJtTmxPd29KWm05eUlDZ2dhVzUwSUdrZ1BTQXdPeUJwSUR3Z1RVOVNVRWhVUVZKSFJWUlRYME5QVlU1VU95QnBJQ3NySUNrZ2V3b0pDU05wWmlCa1pXWnBibVZrS0NCVlUwVmZRMDlNVDFKZlFVeFFTRUVnS1FvSkNRbHBaaUFvSUcxdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGMxc2dhU0JkSUNFOUlEQXVNQ0FwSUhaRGIyeHZjaUFyUFNCblpYUk5iM0p3YUNnZ1oyeGZWbVZ5ZEdWNFNVUXNJR2tzSURJZ0tTQXFJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ2FTQmRPd29KQ1NObGJHbG1JR1JsWm1sdVpXUW9JRlZUUlY5RFQweFBVaUFwQ2drSkNXbG1JQ2dnYlc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeld5QnBJRjBnSVQwZ01DNHdJQ2tnZGtOdmJHOXlJQ3M5SUdkbGRFMXZjbkJvS0NCbmJGOVdaWEowWlhoSlJDd2dhU3dnTWlBcExuSm5ZaUFxSUcxdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGMxc2dhU0JkT3dvSkNTTmxibVJwWmdvSmZRb2paVzVrYVdaZ0xDQlBiU0E5SUdBamFXWmtaV1lnVlZORlgwMVBVbEJJVGs5U1RVRk1Vd29KYjJKcVpXTjBUbTl5YldGc0lDbzlJRzF2Y25Cb1ZHRnlaMlYwUW1GelpVbHVabXgxWlc1alpUc0tDU05wWm1SbFppQk5UMUpRU0ZSQlVrZEZWRk5mVkVWWVZGVlNSUW9KQ1dadmNpQW9JR2x1ZENCcElEMGdNRHNnYVNBOElFMVBVbEJJVkVGU1IwVlVVMTlEVDFWT1ZEc2dhU0FyS3lBcElIc0tDUWtKYVdZZ0tDQnRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE5iSUdrZ1hTQWhQU0F3TGpBZ0tTQnZZbXBsWTNST2IzSnRZV3dnS3owZ1oyVjBUVzl5Y0dnb0lHZHNYMVpsY25SbGVFbEVMQ0JwTENBeElDa3VlSGw2SUNvZ2JXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpXeUJwSUYwN0Nna0pmUW9KSTJWc2MyVUtDUWx2WW1wbFkzUk9iM0p0WVd3Z0t6MGdiVzl5Y0doT2IzSnRZV3d3SUNvZ2JXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpXeUF3SUYwN0Nna0piMkpxWldOMFRtOXliV0ZzSUNzOUlHMXZjbkJvVG05eWJXRnNNU0FxSUcxdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGMxc2dNU0JkT3dvSkNXOWlhbVZqZEU1dmNtMWhiQ0FyUFNCdGIzSndhRTV2Y20xaGJESWdLaUJ0YjNKd2FGUmhjbWRsZEVsdVpteDFaVzVqWlhOYklESWdYVHNLQ1FsdlltcGxZM1JPYjNKdFlXd2dLejBnYlc5eWNHaE9iM0p0WVd3eklDb2diVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6V3lBeklGMDdDZ2tqWlc1a2FXWUtJMlZ1WkdsbVlDd2dSbTBnUFNCZ0kybG1aR1ZtSUZWVFJWOU5UMUpRU0ZSQlVrZEZWRk1LQ1hWdWFXWnZjbTBnWm14dllYUWdiVzl5Y0doVVlYSm5aWFJDWVhObFNXNW1iSFZsYm1ObE93b0pJMmxtWkdWbUlFMVBVbEJJVkVGU1IwVlVVMTlVUlZoVVZWSkZDZ2tKZFc1cFptOXliU0JtYkc5aGRDQnRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE5iSUUxUFVsQklWRUZTUjBWVVUxOURUMVZPVkNCZE93b0pDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVRWEp5WVhrZ2JXOXljR2hVWVhKblpYUnpWR1Y0ZEhWeVpUc0tDUWwxYm1sbWIzSnRJR2wyWldNeUlHMXZjbkJvVkdGeVoyVjBjMVJsZUhSMWNtVlRhWHBsT3dvSkNYWmxZelFnWjJWMFRXOXljR2dvSUdOdmJuTjBJR2x1SUdsdWRDQjJaWEowWlhoSmJtUmxlQ3dnWTI5dWMzUWdhVzRnYVc1MElHMXZjbkJvVkdGeVoyVjBTVzVrWlhnc0lHTnZibk4wSUdsdUlHbHVkQ0J2Wm1aelpYUWdLU0I3Q2drSkNXbHVkQ0IwWlhobGJFbHVaR1Y0SUQwZ2RtVnlkR1Y0U1c1a1pYZ2dLaUJOVDFKUVNGUkJVa2RGVkZOZlZFVllWRlZTUlY5VFZGSkpSRVVnS3lCdlptWnpaWFE3Q2drSkNXbHVkQ0I1SUQwZ2RHVjRaV3hKYm1SbGVDQXZJRzF2Y25Cb1ZHRnlaMlYwYzFSbGVIUjFjbVZUYVhwbExuZzdDZ2tKQ1dsdWRDQjRJRDBnZEdWNFpXeEpibVJsZUNBdElIa2dLaUJ0YjNKd2FGUmhjbWRsZEhOVVpYaDBkWEpsVTJsNlpTNTRPd29KQ1FscGRtVmpNeUJ0YjNKd2FGVldJRDBnYVhabFl6TW9JSGdzSUhrc0lHMXZjbkJvVkdGeVoyVjBTVzVrWlhnZ0tUc0tDUWtKY21WMGRYSnVJSFJsZUdWc1JtVjBZMmdvSUcxdmNuQm9WR0Z5WjJWMGMxUmxlSFIxY21Vc0lHMXZjbkJvVlZZc0lEQWdLVHNLQ1FsOUNna2paV3h6WlFvSkNTTnBabTVrWldZZ1ZWTkZYMDFQVWxCSVRrOVNUVUZNVXdvSkNRbDFibWxtYjNKdElHWnNiMkYwSUcxdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGMxc2dPQ0JkT3dvSkNTTmxiSE5sQ2drSkNYVnVhV1p2Y20wZ1pteHZZWFFnYlc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeld5QTBJRjA3Q2drSkkyVnVaR2xtQ2dralpXNWthV1lLSTJWdVpHbG1ZQ3dnUW0wZ1BTQmdJMmxtWkdWbUlGVlRSVjlOVDFKUVNGUkJVa2RGVkZNS0NYUnlZVzV6Wm05eWJXVmtJQ285SUcxdmNuQm9WR0Z5WjJWMFFtRnpaVWx1Wm14MVpXNWpaVHNLQ1NOcFptUmxaaUJOVDFKUVNGUkJVa2RGVkZOZlZFVllWRlZTUlFvSkNXWnZjaUFvSUdsdWRDQnBJRDBnTURzZ2FTQThJRTFQVWxCSVZFRlNSMFZVVTE5RFQxVk9WRHNnYVNBckt5QXBJSHNLQ1FrSmFXWWdLQ0J0YjNKd2FGUmhjbWRsZEVsdVpteDFaVzVqWlhOYklHa2dYU0FoUFNBd0xqQWdLU0IwY21GdWMyWnZjbTFsWkNBclBTQm5aWFJOYjNKd2FDZ2daMnhmVm1WeWRHVjRTVVFzSUdrc0lEQWdLUzU0ZVhvZ0tpQnRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE5iSUdrZ1hUc0tDUWw5Q2dralpXeHpaUW9KQ1hSeVlXNXpabTl5YldWa0lDczlJRzF2Y25Cb1ZHRnlaMlYwTUNBcUlHMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxjMXNnTUNCZE93b0pDWFJ5WVc1elptOXliV1ZrSUNzOUlHMXZjbkJvVkdGeVoyVjBNU0FxSUcxdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGMxc2dNU0JkT3dvSkNYUnlZVzV6Wm05eWJXVmtJQ3M5SUcxdmNuQm9WR0Z5WjJWME1pQXFJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ01pQmRPd29KQ1hSeVlXNXpabTl5YldWa0lDczlJRzF2Y25Cb1ZHRnlaMlYwTXlBcUlHMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxjMXNnTXlCZE93b0pDU05wWm01a1pXWWdWVk5GWDAxUFVsQklUazlTVFVGTVV3b0pDUWwwY21GdWMyWnZjbTFsWkNBclBTQnRiM0p3YUZSaGNtZGxkRFFnS2lCdGIzSndhRlJoY21kbGRFbHVabXgxWlc1alpYTmJJRFFnWFRzS0NRa0pkSEpoYm5ObWIzSnRaV1FnS3owZ2JXOXljR2hVWVhKblpYUTFJQ29nYlc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeld5QTFJRjA3Q2drSkNYUnlZVzV6Wm05eWJXVmtJQ3M5SUcxdmNuQm9WR0Z5WjJWME5pQXFJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ05pQmRPd29KQ1FsMGNtRnVjMlp2Y20xbFpDQXJQU0J0YjNKd2FGUmhjbWRsZERjZ0tpQnRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE5iSURjZ1hUc0tDUWtqWlc1a2FXWUtDU05sYm1ScFpnb2paVzVrYVdaZ0xDQjZiU0E5SUdCbWJHOWhkQ0JtWVdObFJHbHlaV04wYVc5dUlEMGdaMnhmUm5KdmJuUkdZV05wYm1jZ1B5QXhMakFnT2lBdElERXVNRHNLSTJsbVpHVm1JRVpNUVZSZlUwaEJSRVZFQ2dsMlpXTXpJR1prZUNBOUlHUkdaSGdvSUhaV2FXVjNVRzl6YVhScGIyNGdLVHNLQ1habFl6TWdabVI1SUQwZ1pFWmtlU2dnZGxacFpYZFFiM05wZEdsdmJpQXBPd29KZG1Wak15QnViM0p0WVd3Z1BTQnViM0p0WVd4cGVtVW9JR055YjNOektDQm1aSGdzSUdaa2VTQXBJQ2s3Q2lObGJITmxDZ2wyWldNeklHNXZjbTFoYkNBOUlHNXZjbTFoYkdsNlpTZ2dkazV2Y20xaGJDQXBPd29KSTJsbVpHVm1JRVJQVlVKTVJWOVRTVVJGUkFvSkNXNXZjbTFoYkNBcVBTQm1ZV05sUkdseVpXTjBhVzl1T3dvSkkyVnVaR2xtQ2lObGJtUnBaZ29qYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMDVQVWsxQlRFMUJVRjlVUVU1SFJVNVVVMUJCUTBVZ0tTQjhmQ0JrWldacGJtVmtLQ0JWVTBWZlEweEZRVkpEVDBGVVgwNVBVazFCVEUxQlVDQXBJSHg4SUdSbFptbHVaV1FvSUZWVFJWOUJUa2xUVDFSU1QxQlpJQ2tLQ1NOcFptUmxaaUJWVTBWZlZFRk9SMFZPVkFvSkNXMWhkRE1nZEdKdUlEMGdiV0YwTXlnZ2JtOXliV0ZzYVhwbEtDQjJWR0Z1WjJWdWRDQXBMQ0J1YjNKdFlXeHBlbVVvSUhaQ2FYUmhibWRsYm5RZ0tTd2dibTl5YldGc0lDazdDZ2tqWld4elpRb0pDVzFoZERNZ2RHSnVJRDBnWjJWMFZHRnVaMlZ1ZEVaeVlXMWxLQ0F0SUhaV2FXVjNVRzl6YVhScGIyNHNJRzV2Y20xaGJDd0tDUWtqYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMDVQVWsxQlRFMUJVQ0FwQ2drSkNYWk9iM0p0WVd4TllYQlZkZ29KQ1NObGJHbG1JR1JsWm1sdVpXUW9JRlZUUlY5RFRFVkJVa05QUVZSZlRrOVNUVUZNVFVGUUlDa0tDUWtKZGtOc1pXRnlZMjloZEU1dmNtMWhiRTFoY0ZWMkNna0pJMlZzYzJVS0NRa0pkbFYyQ2drSkkyVnVaR2xtQ2drSktUc0tDU05sYm1ScFpnb0pJMmxtSUdSbFptbHVaV1FvSUVSUFZVSk1SVjlUU1VSRlJDQXBJQ1ltSUNFZ1pHVm1hVzVsWkNnZ1JreEJWRjlUU0VGRVJVUWdLUW9KQ1hSaWJsc3dYU0FxUFNCbVlXTmxSR2x5WldOMGFXOXVPd29KQ1hSaWJsc3hYU0FxUFNCbVlXTmxSR2x5WldOMGFXOXVPd29KSTJWdVpHbG1DaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYME5NUlVGU1EwOUJWRjlPVDFKTlFVeE5RVkFLQ1NOcFptUmxaaUJWVTBWZlZFRk9SMFZPVkFvSkNXMWhkRE1nZEdKdU1pQTlJRzFoZERNb0lHNXZjbTFoYkdsNlpTZ2dkbFJoYm1kbGJuUWdLU3dnYm05eWJXRnNhWHBsS0NCMlFtbDBZVzVuWlc1MElDa3NJRzV2Y20xaGJDQXBPd29KSTJWc2MyVUtDUWx0WVhReklIUmliaklnUFNCblpYUlVZVzVuWlc1MFJuSmhiV1VvSUMwZ2RsWnBaWGRRYjNOcGRHbHZiaXdnYm05eWJXRnNMQ0IyUTJ4bFlYSmpiMkYwVG05eWJXRnNUV0Z3VlhZZ0tUc0tDU05sYm1ScFpnb0pJMmxtSUdSbFptbHVaV1FvSUVSUFZVSk1SVjlUU1VSRlJDQXBJQ1ltSUNFZ1pHVm1hVzVsWkNnZ1JreEJWRjlUU0VGRVJVUWdLUW9KQ1hSaWJqSmJNRjBnS2owZ1ptRmpaVVJwY21WamRHbHZianNLQ1FsMFltNHlXekZkSUNvOUlHWmhZMlZFYVhKbFkzUnBiMjQ3Q2dralpXNWthV1lLSTJWdVpHbG1DblpsWXpNZ2JtOXVVR1Z5ZEhWeVltVmtUbTl5YldGc0lEMGdibTl5YldGc08yQXNJRlp0SUQwZ1lDTnBabVJsWmlCVlUwVmZUazlTVFVGTVRVRlFYMDlDU2tWRFZGTlFRVU5GQ2dsdWIzSnRZV3dnUFNCMFpYaDBkWEpsTWtRb0lHNXZjbTFoYkUxaGNDd2dkazV2Y20xaGJFMWhjRlYySUNrdWVIbDZJQ29nTWk0d0lDMGdNUzR3T3dvSkkybG1aR1ZtSUVaTVNWQmZVMGxFUlVRS0NRbHViM0p0WVd3Z1BTQXRJRzV2Y20xaGJEc0tDU05sYm1ScFpnb0pJMmxtWkdWbUlFUlBWVUpNUlY5VFNVUkZSQW9KQ1c1dmNtMWhiQ0E5SUc1dmNtMWhiQ0FxSUdaaFkyVkVhWEpsWTNScGIyNDdDZ2tqWlc1a2FXWUtDVzV2Y20xaGJDQTlJRzV2Y20xaGJHbDZaU2dnYm05eWJXRnNUV0YwY21sNElDb2dibTl5YldGc0lDazdDaU5sYkdsbUlHUmxabWx1WldRb0lGVlRSVjlPVDFKTlFVeE5RVkJmVkVGT1IwVk9WRk5RUVVORklDa0tDWFpsWXpNZ2JXRndUaUE5SUhSbGVIUjFjbVV5UkNnZ2JtOXliV0ZzVFdGd0xDQjJUbTl5YldGc1RXRndWWFlnS1M1NGVYb2dLaUF5TGpBZ0xTQXhMakE3Q2dsdFlYQk9Mbmg1SUNvOUlHNXZjbTFoYkZOallXeGxPd29KYm05eWJXRnNJRDBnYm05eWJXRnNhWHBsS0NCMFltNGdLaUJ0WVhCT0lDazdDaU5sYkdsbUlHUmxabWx1WldRb0lGVlRSVjlDVlUxUVRVRlFJQ2tLQ1c1dmNtMWhiQ0E5SUhCbGNuUjFjbUpPYjNKdFlXeEJjbUlvSUMwZ2RsWnBaWGRRYjNOcGRHbHZiaXdnYm05eWJXRnNMQ0JrU0dSNGVWOW1kMlFvS1N3Z1ptRmpaVVJwY21WamRHbHZiaUFwT3dvalpXNWthV1pnTENCcmJTQTlJR0FqYVdadVpHVm1JRVpNUVZSZlUwaEJSRVZFQ2dsMllYSjVhVzVuSUhabFl6TWdkazV2Y20xaGJEc0tDU05wWm1SbFppQlZVMFZmVkVGT1IwVk9WQW9KQ1haaGNubHBibWNnZG1Wak15QjJWR0Z1WjJWdWREc0tDUWwyWVhKNWFXNW5JSFpsWXpNZ2RrSnBkR0Z1WjJWdWREc0tDU05sYm1ScFpnb2paVzVrYVdaZ0xDQkliU0E5SUdBamFXWnVaR1ZtSUVaTVFWUmZVMGhCUkVWRUNnbDJZWEo1YVc1bklIWmxZek1nZGs1dmNtMWhiRHNLQ1NOcFptUmxaaUJWVTBWZlZFRk9SMFZPVkFvSkNYWmhjbmxwYm1jZ2RtVmpNeUIyVkdGdVoyVnVkRHNLQ1FsMllYSjVhVzVuSUhabFl6TWdka0pwZEdGdVoyVnVkRHNLQ1NObGJtUnBaZ29qWlc1a2FXWmdMQ0JIYlNBOUlHQWphV1p1WkdWbUlFWk1RVlJmVTBoQlJFVkVDZ2wyVG05eWJXRnNJRDBnYm05eWJXRnNhWHBsS0NCMGNtRnVjMlp2Y20xbFpFNXZjbTFoYkNBcE93b0pJMmxtWkdWbUlGVlRSVjlVUVU1SFJVNVVDZ2tKZGxSaGJtZGxiblFnUFNCdWIzSnRZV3hwZW1Vb0lIUnlZVzV6Wm05eWJXVmtWR0Z1WjJWdWRDQXBPd29KQ1haQ2FYUmhibWRsYm5RZ1BTQnViM0p0WVd4cGVtVW9JR055YjNOektDQjJUbTl5YldGc0xDQjJWR0Z1WjJWdWRDQXBJQ29nZEdGdVoyVnVkQzUzSUNrN0Nna2paVzVrYVdZS0kyVnVaR2xtWUN3Z1YyMGdQU0JnSTJsbVpHVm1JRlZUUlY5T1QxSk5RVXhOUVZBS0NYVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRUlHNXZjbTFoYkUxaGNEc0tDWFZ1YVdadmNtMGdkbVZqTWlCdWIzSnRZV3hUWTJGc1pUc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZUazlTVFVGTVRVRlFYMDlDU2tWRFZGTlFRVU5GQ2dsMWJtbG1iM0p0SUcxaGRETWdibTl5YldGc1RXRjBjbWw0T3dvalpXNWthV1lLSTJsbUlDRWdaR1ZtYVc1bFpDQW9JRlZUUlY5VVFVNUhSVTVVSUNrZ0ppWWdLQ0JrWldacGJtVmtJQ2dnVlZORlgwNVBVazFCVEUxQlVGOVVRVTVIUlU1VVUxQkJRMFVnS1NCOGZDQmtaV1pwYm1Wa0lDZ2dWVk5GWDBOTVJVRlNRMDlCVkY5T1QxSk5RVXhOUVZBZ0tTQjhmQ0JrWldacGJtVmtLQ0JWVTBWZlFVNUpVMDlVVWs5UVdTQXBJQ2tLQ1cxaGRETWdaMlYwVkdGdVoyVnVkRVp5WVcxbEtDQjJaV016SUdWNVpWOXdiM01zSUhabFl6TWdjM1Z5Wmw5dWIzSnRMQ0IyWldNeUlIVjJJQ2tnZXdvSkNYWmxZek1nY1RBZ1BTQmtSbVI0S0NCbGVXVmZjRzl6TG5oNWVpQXBPd29KQ1habFl6TWdjVEVnUFNCa1JtUjVLQ0JsZVdWZmNHOXpMbmg1ZWlBcE93b0pDWFpsWXpJZ2MzUXdJRDBnWkVaa2VDZ2dkWFl1YzNRZ0tUc0tDUWwyWldNeUlITjBNU0E5SUdSR1pIa29JSFYyTG5OMElDazdDZ2tKZG1Wak15Qk9JRDBnYzNWeVpsOXViM0p0T3dvSkNYWmxZek1nY1RGd1pYSndJRDBnWTNKdmMzTW9JSEV4TENCT0lDazdDZ2tKZG1Wak15QnhNSEJsY25BZ1BTQmpjbTl6Y3lnZ1Rpd2djVEFnS1RzS0NRbDJaV016SUZRZ1BTQnhNWEJsY25BZ0tpQnpkREF1ZUNBcklIRXdjR1Z5Y0NBcUlITjBNUzU0T3dvSkNYWmxZek1nUWlBOUlIRXhjR1Z5Y0NBcUlITjBNQzU1SUNzZ2NUQndaWEp3SUNvZ2MzUXhMbms3Q2drSlpteHZZWFFnWkdWMElEMGdiV0Y0S0NCa2IzUW9JRlFzSUZRZ0tTd2daRzkwS0NCQ0xDQkNJQ2tnS1RzS0NRbG1iRzloZENCelkyRnNaU0E5SUNnZ1pHVjBJRDA5SURBdU1DQXBJRDhnTUM0d0lEb2dhVzUyWlhKelpYTnhjblFvSUdSbGRDQXBPd29KQ1hKbGRIVnliaUJ0WVhRektDQlVJQ29nYzJOaGJHVXNJRUlnS2lCelkyRnNaU3dnVGlBcE93b0pmUW9qWlc1a2FXWmdMQ0JZYlNBOUlHQWphV1prWldZZ1ZWTkZYME5NUlVGU1EwOUJWQW9KZG1Wak15QmpiR1ZoY21OdllYUk9iM0p0WVd3Z1BTQnViMjVRWlhKMGRYSmlaV1JPYjNKdFlXdzdDaU5sYm1ScFptQXNJSEZ0SUQwZ1lDTnBabVJsWmlCVlUwVmZRMHhGUVZKRFQwRlVYMDVQVWsxQlRFMUJVQW9KZG1Wak15QmpiR1ZoY21OdllYUk5ZWEJPSUQwZ2RHVjRkSFZ5WlRKRUtDQmpiR1ZoY21OdllYUk9iM0p0WVd4TllYQXNJSFpEYkdWaGNtTnZZWFJPYjNKdFlXeE5ZWEJWZGlBcExuaDVlaUFxSURJdU1DQXRJREV1TURzS0NXTnNaV0Z5WTI5aGRFMWhjRTR1ZUhrZ0tqMGdZMnhsWVhKamIyRjBUbTl5YldGc1UyTmhiR1U3Q2dsamJHVmhjbU52WVhST2IzSnRZV3dnUFNCdWIzSnRZV3hwZW1Vb0lIUmliaklnS2lCamJHVmhjbU52WVhSTllYQk9JQ2s3Q2lObGJtUnBabUFzSUZsdElEMGdZQ05wWm1SbFppQlZVMFZmUTB4RlFWSkRUMEZVVFVGUUNnbDFibWxtYjNKdElITmhiWEJzWlhJeVJDQmpiR1ZoY21OdllYUk5ZWEE3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDBOTVJVRlNRMDlCVkY5T1QxSk5RVXhOUVZBS0NYVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRUlHTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNEc0tDWFZ1YVdadmNtMGdkbVZqTWlCamJHVmhjbU52WVhST2IzSnRZV3hUWTJGc1pUc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZRMHhGUVZKRFQwRlVYMUpQVlVkSVRrVlRVMDFCVUFvSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ1kyeGxZWEpqYjJGMFVtOTFaMmh1WlhOelRXRndPd29qWlc1a2FXWmdMQ0JhYlNBOUlHQWphV1prWldZZ1ZWTkZYMGxTU1VSRlUwTkZUa05GVFVGUUNnbDFibWxtYjNKdElITmhiWEJzWlhJeVJDQnBjbWxrWlhOalpXNWpaVTFoY0RzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlNWSkpSRVZUUTBWT1EwVmZWRWhKUTB0T1JWTlRUVUZRQ2dsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCcGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMwMWhjRHNLSTJWdVpHbG1ZQ3dnU20wZ1BTQmdJMmxtWkdWbUlFOVFRVkZWUlFwa2FXWm1kWE5sUTI5c2IzSXVZU0E5SURFdU1Ec0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZWRkpCVGxOTlNWTlRTVTlPQ21ScFptWjFjMlZEYjJ4dmNpNWhJQ285SUcxaGRHVnlhV0ZzTG5SeVlXNXpiV2x6YzJsdmJrRnNjR2hoT3dvalpXNWthV1lLWjJ4ZlJuSmhaME52Ykc5eUlEMGdkbVZqTkNnZ2IzVjBaMjlwYm1kTWFXZG9kQ3dnWkdsbVpuVnpaVU52Ykc5eUxtRWdLVHRnTENBa2JTQTlJR0IyWldNeklIQmhZMnRPYjNKdFlXeFViMUpIUWlnZ1kyOXVjM1FnYVc0Z2RtVmpNeUJ1YjNKdFlXd2dLU0I3Q2dseVpYUjFjbTRnYm05eWJXRnNhWHBsS0NCdWIzSnRZV3dnS1NBcUlEQXVOU0FySURBdU5Uc0tmUXAyWldNeklIVnVjR0ZqYTFKSFFsUnZUbTl5YldGc0tDQmpiMjV6ZENCcGJpQjJaV016SUhKbllpQXBJSHNLQ1hKbGRIVnliaUF5TGpBZ0tpQnlaMkl1ZUhsNklDMGdNUzR3T3dwOUNtTnZibk4wSUdac2IyRjBJRkJoWTJ0VmNITmpZV3hsSUQwZ01qVTJMaUF2SURJMU5TNDdZMjl1YzNRZ1pteHZZWFFnVlc1d1lXTnJSRzkzYm5OallXeGxJRDBnTWpVMUxpQXZJREkxTmk0N0NtTnZibk4wSUhabFl6TWdVR0ZqYTBaaFkzUnZjbk1nUFNCMlpXTXpLQ0F5TlRZdUlDb2dNalUyTGlBcUlESTFOaTRzSURJMU5pNGdLaUF5TlRZdUxDQXlOVFl1SUNrN0NtTnZibk4wSUhabFl6UWdWVzV3WVdOclJtRmpkRzl5Y3lBOUlGVnVjR0ZqYTBSdmQyNXpZMkZzWlNBdklIWmxZelFvSUZCaFkydEdZV04wYjNKekxDQXhMaUFwT3dwamIyNXpkQ0JtYkc5aGRDQlRhR2xtZEZKcFoyaDBPQ0E5SURFdUlDOGdNalUyTGpzS2RtVmpOQ0J3WVdOclJHVndkR2hVYjFKSFFrRW9JR052Ym5OMElHbHVJR1pzYjJGMElIWWdLU0I3Q2dsMlpXTTBJSElnUFNCMlpXTTBLQ0JtY21GamRDZ2dkaUFxSUZCaFkydEdZV04wYjNKeklDa3NJSFlnS1RzS0NYSXVlWHAzSUMwOUlISXVlSGw2SUNvZ1UyaHBablJTYVdkb2REZzdDWEpsZEhWeWJpQnlJQ29nVUdGamExVndjMk5oYkdVN0NuMEtabXh2WVhRZ2RXNXdZV05yVWtkQ1FWUnZSR1Z3ZEdnb0lHTnZibk4wSUdsdUlIWmxZelFnZGlBcElIc0tDWEpsZEhWeWJpQmtiM1FvSUhZc0lGVnVjR0ZqYTBaaFkzUnZjbk1nS1RzS2ZRcDJaV015SUhCaFkydEVaWEIwYUZSdlVrY29JR2x1SUdocFoyaHdJR1pzYjJGMElIWWdLU0I3Q2dseVpYUjFjbTRnY0dGamEwUmxjSFJvVkc5U1IwSkJLQ0IySUNrdWVYZzdDbjBLWm14dllYUWdkVzV3WVdOclVrZFViMFJsY0hSb0tDQmpiMjV6ZENCcGJpQm9hV2RvY0NCMlpXTXlJSFlnS1NCN0NnbHlaWFIxY200Z2RXNXdZV05yVWtkQ1FWUnZSR1Z3ZEdnb0lIWmxZelFvSUhZdWVIa3NJREF1TUN3Z01DNHdJQ2tnS1RzS2ZRcDJaV00wSUhCaFkyc3lTR0ZzWmxSdlVrZENRU2dnZG1Wak1pQjJJQ2tnZXdvSmRtVmpOQ0J5SUQwZ2RtVmpOQ2dnZGk1NExDQm1jbUZqZENnZ2RpNTRJQ29nTWpVMUxqQWdLU3dnZGk1NUxDQm1jbUZqZENnZ2RpNTVJQ29nTWpVMUxqQWdLU0FwT3dvSmNtVjBkWEp1SUhabFl6UW9JSEl1ZUNBdElISXVlU0F2SURJMU5TNHdMQ0J5TG5rc0lISXVlaUF0SUhJdWR5QXZJREkxTlM0d0xDQnlMbmNnS1RzS2ZRcDJaV015SUhWdWNHRmphMUpIUWtGVWJ6SklZV3htS0NCMlpXTTBJSFlnS1NCN0NnbHlaWFIxY200Z2RtVmpNaWdnZGk1NElDc2dLQ0IyTG5rZ0x5QXlOVFV1TUNBcExDQjJMbm9nS3lBb0lIWXVkeUF2SURJMU5TNHdJQ2tnS1RzS2ZRcG1iRzloZENCMmFXVjNXbFJ2VDNKMGFHOW5jbUZ3YUdsalJHVndkR2dvSUdOdmJuTjBJR2x1SUdac2IyRjBJSFpwWlhkYUxDQmpiMjV6ZENCcGJpQm1iRzloZENCdVpXRnlMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQm1ZWElnS1NCN0NnbHlaWFIxY200Z0tDQjJhV1YzV2lBcklHNWxZWElnS1NBdklDZ2dibVZoY2lBdElHWmhjaUFwT3dwOUNtWnNiMkYwSUc5eWRHaHZaM0poY0docFkwUmxjSFJvVkc5V2FXVjNXaWdnWTI5dWMzUWdhVzRnWm14dllYUWdaR1Z3ZEdnc0lHTnZibk4wSUdsdUlHWnNiMkYwSUc1bFlYSXNJR052Ym5OMElHbHVJR1pzYjJGMElHWmhjaUFwSUhzS0NYSmxkSFZ5YmlCa1pYQjBhQ0FxSUNnZ2JtVmhjaUF0SUdaaGNpQXBJQzBnYm1WaGNqc0tmUXBtYkc5aGRDQjJhV1YzV2xSdlVHVnljM0JsWTNScGRtVkVaWEIwYUNnZ1kyOXVjM1FnYVc0Z1pteHZZWFFnZG1sbGQxb3NJR052Ym5OMElHbHVJR1pzYjJGMElHNWxZWElzSUdOdmJuTjBJR2x1SUdac2IyRjBJR1poY2lBcElIc0tDWEpsZEhWeWJpQW9JQ2dnYm1WaGNpQXJJSFpwWlhkYUlDa2dLaUJtWVhJZ0tTQXZJQ2dnS0NCbVlYSWdMU0J1WldGeUlDa2dLaUIyYVdWM1dpQXBPd3A5Q21ac2IyRjBJSEJsY25Od1pXTjBhWFpsUkdWd2RHaFViMVpwWlhkYUtDQmpiMjV6ZENCcGJpQm1iRzloZENCa1pYQjBhQ3dnWTI5dWMzUWdhVzRnWm14dllYUWdibVZoY2l3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnWm1GeUlDa2dld29KY21WMGRYSnVJQ2dnYm1WaGNpQXFJR1poY2lBcElDOGdLQ0FvSUdaaGNpQXRJRzVsWVhJZ0tTQXFJR1JsY0hSb0lDMGdabUZ5SUNrN0NuMWdMQ0JMYlNBOUlHQWphV1prWldZZ1VGSkZUVlZNVkVsUVRFbEZSRjlCVEZCSVFRb0paMnhmUm5KaFowTnZiRzl5TG5KbllpQXFQU0JuYkY5R2NtRm5RMjlzYjNJdVlUc0tJMlZ1WkdsbVlDd2dVVzBnUFNCZ2RtVmpOQ0J0ZGxCdmMybDBhVzl1SUQwZ2RtVmpOQ2dnZEhKaGJuTm1iM0p0WldRc0lERXVNQ0FwT3dvamFXWmtaV1lnVlZORlgwbE9VMVJCVGtOSlRrY0tDVzEyVUc5emFYUnBiMjRnUFNCcGJuTjBZVzVqWlUxaGRISnBlQ0FxSUcxMlVHOXphWFJwYjI0N0NpTmxibVJwWmdwdGRsQnZjMmwwYVc5dUlEMGdiVzlrWld4V2FXVjNUV0YwY21sNElDb2diWFpRYjNOcGRHbHZianNLWjJ4ZlVHOXphWFJwYjI0Z1BTQndjbTlxWldOMGFXOXVUV0YwY21sNElDb2diWFpRYjNOcGRHbHZianRnTENCcWJTQTlJR0FqYVdaa1pXWWdSRWxVU0VWU1NVNUhDZ2xuYkY5R2NtRm5RMjlzYjNJdWNtZGlJRDBnWkdsMGFHVnlhVzVuS0NCbmJGOUdjbUZuUTI5c2IzSXVjbWRpSUNrN0NpTmxibVJwWm1Bc0lHVm5JRDBnWUNOcFptUmxaaUJFU1ZSSVJWSkpUa2NLQ1habFl6TWdaR2wwYUdWeWFXNW5LQ0IyWldNeklHTnZiRzl5SUNrZ2V3b0pDV1pzYjJGMElHZHlhV1JmY0c5emFYUnBiMjRnUFNCeVlXNWtLQ0JuYkY5R2NtRm5RMjl2Y21RdWVIa2dLVHNLQ1FsMlpXTXpJR1JwZEdobGNsOXphR2xtZEY5U1IwSWdQU0IyWldNektDQXdMakkxSUM4Z01qVTFMakFzSUMwd0xqSTFJQzhnTWpVMUxqQXNJREF1TWpVZ0x5QXlOVFV1TUNBcE93b0pDV1JwZEdobGNsOXphR2xtZEY5U1IwSWdQU0J0YVhnb0lESXVNQ0FxSUdScGRHaGxjbDl6YUdsbWRGOVNSMElzSUMweUxqQWdLaUJrYVhSb1pYSmZjMmhwWm5SZlVrZENMQ0JuY21sa1gzQnZjMmwwYVc5dUlDazdDZ2tKY21WMGRYSnVJR052Ykc5eUlDc2daR2wwYUdWeVgzTm9hV1owWDFKSFFqc0tDWDBLSTJWdVpHbG1ZQ3dnZEdjZ1BTQmdabXh2WVhRZ2NtOTFaMmh1WlhOelJtRmpkRzl5SUQwZ2NtOTFaMmh1WlhOek93b2phV1prWldZZ1ZWTkZYMUpQVlVkSVRrVlRVMDFCVUFvSmRtVmpOQ0IwWlhobGJGSnZkV2RvYm1WemN5QTlJSFJsZUhSMWNtVXlSQ2dnY205MVoyaHVaWE56VFdGd0xDQjJVbTkxWjJodVpYTnpUV0Z3VlhZZ0tUc0tDWEp2ZFdkb2JtVnpjMFpoWTNSdmNpQXFQU0IwWlhobGJGSnZkV2RvYm1WemN5NW5Pd29qWlc1a2FXWmdMQ0J1WnlBOUlHQWphV1prWldZZ1ZWTkZYMUpQVlVkSVRrVlRVMDFCVUFvSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ2NtOTFaMmh1WlhOelRXRndPd29qWlc1a2FXWmdMQ0JwWnlBOUlHQWphV1lnVGxWTlgxTlFUMVJmVEVsSFNGUmZRMDlQVWtSVElENGdNQW9KZG1GeWVXbHVaeUIyWldNMElIWlRjRzkwVEdsbmFIUkRiMjl5WkZzZ1RsVk5YMU5RVDFSZlRFbEhTRlJmUTA5UFVrUlRJRjA3Q2lObGJtUnBaZ29qYVdZZ1RsVk5YMU5RVDFSZlRFbEhTRlJmVFVGUVV5QStJREFLQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUhOd2IzUk1hV2RvZEUxaGNGc2dUbFZOWDFOUVQxUmZURWxIU0ZSZlRVRlFVeUJkT3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5VFNFRkVUMWROUVZBS0NTTnBaaUJPVlUxZlJFbFNYMHhKUjBoVVgxTklRVVJQVjFNZ1BpQXdDZ2tKZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnWkdseVpXTjBhVzl1WVd4VGFHRmtiM2ROWVhCYklFNVZUVjlFU1ZKZlRFbEhTRlJmVTBoQlJFOVhVeUJkT3dvSkNYWmhjbmxwYm1jZ2RtVmpOQ0IyUkdseVpXTjBhVzl1WVd4VGFHRmtiM2REYjI5eVpGc2dUbFZOWDBSSlVsOU1TVWRJVkY5VFNFRkVUMWRUSUYwN0Nna0pjM1J5ZFdOMElFUnBjbVZqZEdsdmJtRnNUR2xuYUhSVGFHRmtiM2NnZXdvSkNRbG1iRzloZENCemFHRmtiM2RDYVdGek93b0pDUWxtYkc5aGRDQnphR0ZrYjNkT2IzSnRZV3hDYVdGek93b0pDUWxtYkc5aGRDQnphR0ZrYjNkU1lXUnBkWE03Q2drSkNYWmxZeklnYzJoaFpHOTNUV0Z3VTJsNlpUc0tDUWw5T3dvSkNYVnVhV1p2Y20wZ1JHbHlaV04wYVc5dVlXeE1hV2RvZEZOb1lXUnZkeUJrYVhKbFkzUnBiMjVoYkV4cFoyaDBVMmhoWkc5M2Mxc2dUbFZOWDBSSlVsOU1TVWRJVkY5VFNFRkVUMWRUSUYwN0Nna2paVzVrYVdZS0NTTnBaaUJPVlUxZlUxQlBWRjlNU1VkSVZGOVRTRUZFVDFkVElENGdNQW9KQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUhOd2IzUlRhR0ZrYjNkTllYQmJJRTVWVFY5VFVFOVVYMHhKUjBoVVgxTklRVVJQVjFNZ1hUc0tDUWx6ZEhKMVkzUWdVM0J2ZEV4cFoyaDBVMmhoWkc5M0lIc0tDUWtKWm14dllYUWdjMmhoWkc5M1FtbGhjenNLQ1FrSlpteHZZWFFnYzJoaFpHOTNUbTl5YldGc1FtbGhjenNLQ1FrSlpteHZZWFFnYzJoaFpHOTNVbUZrYVhWek93b0pDUWwyWldNeUlITm9ZV1J2ZDAxaGNGTnBlbVU3Q2drSmZUc0tDUWwxYm1sbWIzSnRJRk53YjNSTWFXZG9kRk5vWVdSdmR5QnpjRzkwVEdsbmFIUlRhR0ZrYjNkeld5Qk9WVTFmVTFCUFZGOU1TVWRJVkY5VFNFRkVUMWRUSUYwN0Nna2paVzVrYVdZS0NTTnBaaUJPVlUxZlVFOUpUbFJmVEVsSFNGUmZVMGhCUkU5WFV5QStJREFLQ1FsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCd2IybHVkRk5vWVdSdmQwMWhjRnNnVGxWTlgxQlBTVTVVWDB4SlIwaFVYMU5JUVVSUFYxTWdYVHNLQ1FsMllYSjVhVzVuSUhabFl6UWdkbEJ2YVc1MFUyaGhaRzkzUTI5dmNtUmJJRTVWVFY5UVQwbE9WRjlNU1VkSVZGOVRTRUZFVDFkVElGMDdDZ2tKYzNSeWRXTjBJRkJ2YVc1MFRHbG5hSFJUYUdGa2IzY2dld29KQ1FsbWJHOWhkQ0J6YUdGa2IzZENhV0Z6T3dvSkNRbG1iRzloZENCemFHRmtiM2RPYjNKdFlXeENhV0Z6T3dvSkNRbG1iRzloZENCemFHRmtiM2RTWVdScGRYTTdDZ2tKQ1habFl6SWdjMmhoWkc5M1RXRndVMmw2WlRzS0NRa0pabXh2WVhRZ2MyaGhaRzkzUTJGdFpYSmhUbVZoY2pzS0NRa0pabXh2WVhRZ2MyaGhaRzkzUTJGdFpYSmhSbUZ5T3dvSkNYMDdDZ2tKZFc1cFptOXliU0JRYjJsdWRFeHBaMmgwVTJoaFpHOTNJSEJ2YVc1MFRHbG5hSFJUYUdGa2IzZHpXeUJPVlUxZlVFOUpUbFJmVEVsSFNGUmZVMGhCUkU5WFV5QmRPd29KSTJWdVpHbG1DZ2xtYkc5aGRDQjBaWGgwZFhKbE1rUkRiMjF3WVhKbEtDQnpZVzF3YkdWeU1rUWdaR1Z3ZEdoekxDQjJaV015SUhWMkxDQm1iRzloZENCamIyMXdZWEpsSUNrZ2V3b0pDWEpsZEhWeWJpQnpkR1Z3S0NCamIyMXdZWEpsTENCMWJuQmhZMnRTUjBKQlZHOUVaWEIwYUNnZ2RHVjRkSFZ5WlRKRUtDQmtaWEIwYUhNc0lIVjJJQ2tnS1NBcE93b0pmUW9KZG1Wak1pQjBaWGgwZFhKbE1rUkVhWE4wY21saWRYUnBiMjRvSUhOaGJYQnNaWEl5UkNCemFHRmtiM2NzSUhabFl6SWdkWFlnS1NCN0Nna0pjbVYwZFhKdUlIVnVjR0ZqYTFKSFFrRlViekpJWVd4bUtDQjBaWGgwZFhKbE1rUW9JSE5vWVdSdmR5d2dkWFlnS1NBcE93b0pmUW9KWm14dllYUWdWbE5OVTJoaFpHOTNJQ2h6WVcxd2JHVnlNa1FnYzJoaFpHOTNMQ0IyWldNeUlIVjJMQ0JtYkc5aGRDQmpiMjF3WVhKbElDbDdDZ2tKWm14dllYUWdiMk5qYkhWemFXOXVJRDBnTVM0d093b0pDWFpsWXpJZ1pHbHpkSEpwWW5WMGFXOXVJRDBnZEdWNGRIVnlaVEpFUkdsemRISnBZblYwYVc5dUtDQnphR0ZrYjNjc0lIVjJJQ2s3Q2drSlpteHZZWFFnYUdGeVpGOXphR0ZrYjNjZ1BTQnpkR1Z3S0NCamIyMXdZWEpsSUN3Z1pHbHpkSEpwWW5WMGFXOXVMbmdnS1RzS0NRbHBaaUFvYUdGeVpGOXphR0ZrYjNjZ0lUMGdNUzR3SUNrZ2V3b0pDUWxtYkc5aGRDQmthWE4wWVc1alpTQTlJR052YlhCaGNtVWdMU0JrYVhOMGNtbGlkWFJwYjI0dWVDQTdDZ2tKQ1dac2IyRjBJSFpoY21saGJtTmxJRDBnYldGNEtDQXdMakF3TURBd0xDQmthWE4wY21saWRYUnBiMjR1ZVNBcUlHUnBjM1J5YVdKMWRHbHZiaTU1SUNrN0Nna0pDV1pzYjJGMElITnZablJ1WlhOelgzQnliMkpoWW1sc2FYUjVJRDBnZG1GeWFXRnVZMlVnTHlBb2RtRnlhV0Z1WTJVZ0t5QmthWE4wWVc1alpTQXFJR1JwYzNSaGJtTmxJQ2s3Q1FrSmMyOW1kRzVsYzNOZmNISnZZbUZpYVd4cGRIa2dQU0JqYkdGdGNDZ2dLQ0J6YjJaMGJtVnpjMTl3Y205aVlXSnBiR2wwZVNBdElEQXVNeUFwSUM4Z0tDQXdMamsxSUMwZ01DNHpJQ2tzSURBdU1Dd2dNUzR3SUNrN0NRa0piMk5qYkhWemFXOXVJRDBnWTJ4aGJYQW9JRzFoZUNnZ2FHRnlaRjl6YUdGa2IzY3NJSE52Wm5SdVpYTnpYM0J5YjJKaFltbHNhWFI1SUNrc0lEQXVNQ3dnTVM0d0lDazdDZ2tKZlFvSkNYSmxkSFZ5YmlCdlkyTnNkWE5wYjI0N0NnbDlDZ2xtYkc5aGRDQm5aWFJUYUdGa2IzY29JSE5oYlhCc1pYSXlSQ0J6YUdGa2IzZE5ZWEFzSUhabFl6SWdjMmhoWkc5M1RXRndVMmw2WlN3Z1pteHZZWFFnYzJoaFpHOTNRbWxoY3l3Z1pteHZZWFFnYzJoaFpHOTNVbUZrYVhWekxDQjJaV00wSUhOb1lXUnZkME52YjNKa0lDa2dld29KQ1dac2IyRjBJSE5vWVdSdmR5QTlJREV1TURzS0NRbHphR0ZrYjNkRGIyOXlaQzU0ZVhvZ0x6MGdjMmhoWkc5M1EyOXZjbVF1ZHpzS0NRbHphR0ZrYjNkRGIyOXlaQzU2SUNzOUlITm9ZV1J2ZDBKcFlYTTdDZ2tKWW05dmJDQnBia1p5ZFhOMGRXMGdQU0J6YUdGa2IzZERiMjl5WkM1NElENDlJREF1TUNBbUppQnphR0ZrYjNkRGIyOXlaQzU0SUR3OUlERXVNQ0FtSmlCemFHRmtiM2REYjI5eVpDNTVJRDQ5SURBdU1DQW1KaUJ6YUdGa2IzZERiMjl5WkM1NUlEdzlJREV1TURzS0NRbGliMjlzSUdaeWRYTjBkVzFVWlhOMElEMGdhVzVHY25WemRIVnRJQ1ltSUhOb1lXUnZkME52YjNKa0xub2dQRDBnTVM0d093b0pDV2xtSUNnZ1puSjFjM1IxYlZSbGMzUWdLU0I3Q2drSkkybG1JR1JsWm1sdVpXUW9JRk5JUVVSUFYwMUJVRjlVV1ZCRlgxQkRSaUFwQ2drSkNYWmxZeklnZEdWNFpXeFRhWHBsSUQwZ2RtVmpNaWdnTVM0d0lDa2dMeUJ6YUdGa2IzZE5ZWEJUYVhwbE93b0pDUWxtYkc5aGRDQmtlREFnUFNBdElIUmxlR1ZzVTJsNlpTNTRJQ29nYzJoaFpHOTNVbUZrYVhWek93b0pDUWxtYkc5aGRDQmtlVEFnUFNBdElIUmxlR1ZzVTJsNlpTNTVJQ29nYzJoaFpHOTNVbUZrYVhWek93b0pDUWxtYkc5aGRDQmtlREVnUFNBcklIUmxlR1ZzVTJsNlpTNTRJQ29nYzJoaFpHOTNVbUZrYVhWek93b0pDUWxtYkc5aGRDQmtlVEVnUFNBcklIUmxlR1ZzVTJsNlpTNTVJQ29nYzJoaFpHOTNVbUZrYVhWek93b0pDUWxtYkc5aGRDQmtlRElnUFNCa2VEQWdMeUF5TGpBN0Nna0pDV1pzYjJGMElHUjVNaUE5SUdSNU1DQXZJREl1TURzS0NRa0pabXh2WVhRZ1pIZ3pJRDBnWkhneElDOGdNaTR3T3dvSkNRbG1iRzloZENCa2VUTWdQU0JrZVRFZ0x5QXlMakE3Q2drSkNYTm9ZV1J2ZHlBOUlDZ0tDUWtKQ1hSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2MyaGhaRzkzUTI5dmNtUXVlSGtnS3lCMlpXTXlLQ0JrZURBc0lHUjVNQ0FwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tnS3dvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0J6YUdGa2IzZERiMjl5WkM1NGVTQXJJSFpsWXpJb0lEQXVNQ3dnWkhrd0lDa3NJSE5vWVdSdmQwTnZiM0prTG5vZ0tTQXJDZ2tKQ1FsMFpYaDBkWEpsTWtSRGIyMXdZWEpsS0NCemFHRmtiM2ROWVhBc0lITm9ZV1J2ZDBOdmIzSmtMbmg1SUNzZ2RtVmpNaWdnWkhneExDQmtlVEFnS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwSUNzS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnYzJoaFpHOTNRMjl2Y21RdWVIa2dLeUIyWldNeUtDQmtlRElzSUdSNU1pQXBMQ0J6YUdGa2IzZERiMjl5WkM1NklDa2dLd29KQ1FrSmRHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQnphR0ZrYjNkRGIyOXlaQzU0ZVNBcklIWmxZeklvSURBdU1Dd2daSGt5SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1NBckNna0pDUWwwWlhoMGRYSmxNa1JEYjIxd1lYSmxLQ0J6YUdGa2IzZE5ZWEFzSUhOb1lXUnZkME52YjNKa0xuaDVJQ3NnZG1Wak1pZ2daSGd6TENCa2VUSWdLU3dnYzJoaFpHOTNRMjl2Y21RdWVpQXBJQ3NLQ1FrSkNYUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2djMmhoWkc5M1EyOXZjbVF1ZUhrZ0t5QjJaV015S0NCa2VEQXNJREF1TUNBcExDQnphR0ZrYjNkRGIyOXlaQzU2SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCemFHRmtiM2REYjI5eVpDNTRlU0FySUhabFl6SW9JR1I0TWl3Z01DNHdJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU0FyQ2drSkNRbDBaWGgwZFhKbE1rUkRiMjF3WVhKbEtDQnphR0ZrYjNkTllYQXNJSE5vWVdSdmQwTnZiM0prTG5oNUxDQnphR0ZrYjNkRGIyOXlaQzU2SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCemFHRmtiM2REYjI5eVpDNTRlU0FySUhabFl6SW9JR1I0TXl3Z01DNHdJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU0FyQ2drSkNRbDBaWGgwZFhKbE1rUkRiMjF3WVhKbEtDQnphR0ZrYjNkTllYQXNJSE5vWVdSdmQwTnZiM0prTG5oNUlDc2dkbVZqTWlnZ1pIZ3hMQ0F3TGpBZ0tTd2djMmhoWkc5M1EyOXZjbVF1ZWlBcElDc0tDUWtKQ1hSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2MyaGhaRzkzUTI5dmNtUXVlSGtnS3lCMlpXTXlLQ0JrZURJc0lHUjVNeUFwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tnS3dvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0J6YUdGa2IzZERiMjl5WkM1NGVTQXJJSFpsWXpJb0lEQXVNQ3dnWkhreklDa3NJSE5vWVdSdmQwTnZiM0prTG5vZ0tTQXJDZ2tKQ1FsMFpYaDBkWEpsTWtSRGIyMXdZWEpsS0NCemFHRmtiM2ROWVhBc0lITm9ZV1J2ZDBOdmIzSmtMbmg1SUNzZ2RtVmpNaWdnWkhnekxDQmtlVE1nS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwSUNzS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnYzJoaFpHOTNRMjl2Y21RdWVIa2dLeUIyWldNeUtDQmtlREFzSUdSNU1TQXBMQ0J6YUdGa2IzZERiMjl5WkM1NklDa2dLd29KQ1FrSmRHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQnphR0ZrYjNkRGIyOXlaQzU0ZVNBcklIWmxZeklvSURBdU1Dd2daSGt4SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1NBckNna0pDUWwwWlhoMGRYSmxNa1JEYjIxd1lYSmxLQ0J6YUdGa2IzZE5ZWEFzSUhOb1lXUnZkME52YjNKa0xuaDVJQ3NnZG1Wak1pZ2daSGd4TENCa2VURWdLU3dnYzJoaFpHOTNRMjl2Y21RdWVpQXBDZ2tKQ1NrZ0tpQW9JREV1TUNBdklERTNMakFnS1RzS0NRa2paV3hwWmlCa1pXWnBibVZrS0NCVFNFRkVUMWROUVZCZlZGbFFSVjlRUTBaZlUwOUdWQ0FwQ2drSkNYWmxZeklnZEdWNFpXeFRhWHBsSUQwZ2RtVmpNaWdnTVM0d0lDa2dMeUJ6YUdGa2IzZE5ZWEJUYVhwbE93b0pDUWxtYkc5aGRDQmtlQ0E5SUhSbGVHVnNVMmw2WlM1NE93b0pDUWxtYkc5aGRDQmtlU0E5SUhSbGVHVnNVMmw2WlM1NU93b0pDUWwyWldNeUlIVjJJRDBnYzJoaFpHOTNRMjl2Y21RdWVIazdDZ2tKQ1habFl6SWdaaUE5SUdaeVlXTjBLQ0IxZGlBcUlITm9ZV1J2ZDAxaGNGTnBlbVVnS3lBd0xqVWdLVHNLQ1FrSmRYWWdMVDBnWmlBcUlIUmxlR1ZzVTJsNlpUc0tDUWtKYzJoaFpHOTNJRDBnS0FvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0IxZGl3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwSUNzS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnZFhZZ0t5QjJaV015S0NCa2VDd2dNQzR3SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1NBckNna0pDUWwwWlhoMGRYSmxNa1JEYjIxd1lYSmxLQ0J6YUdGa2IzZE5ZWEFzSUhWMklDc2dkbVZqTWlnZ01DNHdMQ0JrZVNBcExDQnphR0ZrYjNkRGIyOXlaQzU2SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCMWRpQXJJSFJsZUdWc1UybDZaU3dnYzJoaFpHOTNRMjl2Y21RdWVpQXBJQ3NLQ1FrSkNXMXBlQ2dnZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCMWRpQXJJSFpsWXpJb0lDMWtlQ3dnTUM0d0lDa3NJSE5vWVdSdmQwTnZiM0prTG5vZ0tTd0tDUWtKQ1FrZ2RHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQjFkaUFySUhabFl6SW9JREl1TUNBcUlHUjRMQ0F3TGpBZ0tTd2djMmhoWkc5M1EyOXZjbVF1ZWlBcExBb0pDUWtKQ1NCbUxuZ2dLU0FyQ2drSkNRbHRhWGdvSUhSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2RYWWdLeUIyWldNeUtDQXRaSGdzSUdSNUlDa3NJSE5vWVdSdmQwTnZiM0prTG5vZ0tTd0tDUWtKQ1FrZ2RHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQjFkaUFySUhabFl6SW9JREl1TUNBcUlHUjRMQ0JrZVNBcExDQnphR0ZrYjNkRGIyOXlaQzU2SUNrc0Nna0pDUWtKSUdZdWVDQXBJQ3NLQ1FrSkNXMXBlQ2dnZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCMWRpQXJJSFpsWXpJb0lEQXVNQ3dnTFdSNUlDa3NJSE5vWVdSdmQwTnZiM0prTG5vZ0tTd0tDUWtKQ1FrZ2RHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQjFkaUFySUhabFl6SW9JREF1TUN3Z01pNHdJQ29nWkhrZ0tTd2djMmhoWkc5M1EyOXZjbVF1ZWlBcExBb0pDUWtKQ1NCbUxua2dLU0FyQ2drSkNRbHRhWGdvSUhSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2RYWWdLeUIyWldNeUtDQmtlQ3dnTFdSNUlDa3NJSE5vWVdSdmQwTnZiM0prTG5vZ0tTd0tDUWtKQ1FrZ2RHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQjFkaUFySUhabFl6SW9JR1I0TENBeUxqQWdLaUJrZVNBcExDQnphR0ZrYjNkRGIyOXlaQzU2SUNrc0Nna0pDUWtKSUdZdWVTQXBJQ3NLQ1FrSkNXMXBlQ2dnYldsNEtDQjBaWGgwZFhKbE1rUkRiMjF3WVhKbEtDQnphR0ZrYjNkTllYQXNJSFYySUNzZ2RtVmpNaWdnTFdSNExDQXRaSGtnS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwTEFvSkNRa0pDUWtnSUhSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2RYWWdLeUIyWldNeUtDQXlMakFnS2lCa2VDd2dMV1I1SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1N3S0NRa0pDUWtKSUNCbUxuZ2dLU3dLQ1FrSkNRa2diV2w0S0NCMFpYaDBkWEpsTWtSRGIyMXdZWEpsS0NCemFHRmtiM2ROWVhBc0lIVjJJQ3NnZG1Wak1pZ2dMV1I0TENBeUxqQWdLaUJrZVNBcExDQnphR0ZrYjNkRGIyOXlaQzU2SUNrc0Nna0pDUWtKQ1NBZ2RHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQjFkaUFySUhabFl6SW9JREl1TUNBcUlHUjRMQ0F5TGpBZ0tpQmtlU0FwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tzQ2drSkNRa0pDU0FnWmk1NElDa3NDZ2tKQ1FrSklHWXVlU0FwQ2drSkNTa2dLaUFvSURFdU1DQXZJRGt1TUNBcE93b0pDU05sYkdsbUlHUmxabWx1WldRb0lGTklRVVJQVjAxQlVGOVVXVkJGWDFaVFRTQXBDZ2tKQ1hOb1lXUnZkeUE5SUZaVFRWTm9ZV1J2ZHlnZ2MyaGhaRzkzVFdGd0xDQnphR0ZrYjNkRGIyOXlaQzU0ZVN3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwT3dvSkNTTmxiSE5sQ2drSkNYTm9ZV1J2ZHlBOUlIUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2djMmhoWkc5M1EyOXZjbVF1ZUhrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1RzS0NRa2paVzVrYVdZS0NRbDlDZ2tKY21WMGRYSnVJSE5vWVdSdmR6c0tDWDBLQ1habFl6SWdZM1ZpWlZSdlZWWW9JSFpsWXpNZ2Rpd2dabXh2WVhRZ2RHVjRaV3hUYVhwbFdTQXBJSHNLQ1FsMlpXTXpJR0ZpYzFZZ1BTQmhZbk1vSUhZZ0tUc0tDUWxtYkc5aGRDQnpZMkZzWlZSdlEzVmlaU0E5SURFdU1DQXZJRzFoZUNnZ1lXSnpWaTU0TENCdFlYZ29JR0ZpYzFZdWVTd2dZV0p6Vmk1NklDa2dLVHNLQ1FsaFluTldJQ285SUhOallXeGxWRzlEZFdKbE93b0pDWFlnS2owZ2MyTmhiR1ZVYjBOMVltVWdLaUFvSURFdU1DQXRJREl1TUNBcUlIUmxlR1ZzVTJsNlpWa2dLVHNLQ1FsMlpXTXlJSEJzWVc1aGNpQTlJSFl1ZUhrN0Nna0pabXh2WVhRZ1lXeHRiM04wUVZSbGVHVnNJRDBnTVM0MUlDb2dkR1Y0Wld4VGFYcGxXVHNLQ1FsbWJHOWhkQ0JoYkcxdmMzUlBibVVnUFNBeExqQWdMU0JoYkcxdmMzUkJWR1Y0Wld3N0Nna0phV1lnS0NCaFluTldMbm9nUGowZ1lXeHRiM04wVDI1bElDa2dld29KQ1FscFppQW9JSFl1ZWlBK0lEQXVNQ0FwQ2drSkNRbHdiR0Z1WVhJdWVDQTlJRFF1TUNBdElIWXVlRHNLQ1FsOUlHVnNjMlVnYVdZZ0tDQmhZbk5XTG5nZ1BqMGdZV3h0YjNOMFQyNWxJQ2tnZXdvSkNRbG1iRzloZENCemFXZHVXQ0E5SUhOcFoyNG9JSFl1ZUNBcE93b0pDUWx3YkdGdVlYSXVlQ0E5SUhZdWVpQXFJSE5wWjI1WUlDc2dNaTR3SUNvZ2MybG5ibGc3Q2drSmZTQmxiSE5sSUdsbUlDZ2dZV0p6Vmk1NUlENDlJR0ZzYlc5emRFOXVaU0FwSUhzS0NRa0pabXh2WVhRZ2MybG5ibGtnUFNCemFXZHVLQ0IyTG5rZ0tUc0tDUWtKY0d4aGJtRnlMbmdnUFNCMkxuZ2dLeUF5TGpBZ0tpQnphV2R1V1NBcklESXVNRHNLQ1FrSmNHeGhibUZ5TG5rZ1BTQjJMbm9nS2lCemFXZHVXU0F0SURJdU1Ec0tDUWw5Q2drSmNtVjBkWEp1SUhabFl6SW9JREF1TVRJMUxDQXdMakkxSUNrZ0tpQndiR0Z1WVhJZ0t5QjJaV015S0NBd0xqTTNOU3dnTUM0M05TQXBPd29KZlFvSlpteHZZWFFnWjJWMFVHOXBiblJUYUdGa2IzY29JSE5oYlhCc1pYSXlSQ0J6YUdGa2IzZE5ZWEFzSUhabFl6SWdjMmhoWkc5M1RXRndVMmw2WlN3Z1pteHZZWFFnYzJoaFpHOTNRbWxoY3l3Z1pteHZZWFFnYzJoaFpHOTNVbUZrYVhWekxDQjJaV00wSUhOb1lXUnZkME52YjNKa0xDQm1iRzloZENCemFHRmtiM2REWVcxbGNtRk9aV0Z5TENCbWJHOWhkQ0J6YUdGa2IzZERZVzFsY21GR1lYSWdLU0I3Q2drSmRtVmpNaUIwWlhobGJGTnBlbVVnUFNCMlpXTXlLQ0F4TGpBZ0tTQXZJQ2dnYzJoaFpHOTNUV0Z3VTJsNlpTQXFJSFpsWXpJb0lEUXVNQ3dnTWk0d0lDa2dLVHNLQ1FsMlpXTXpJR3hwWjJoMFZHOVFiM05wZEdsdmJpQTlJSE5vWVdSdmQwTnZiM0prTG5oNWVqc0tDUWxtYkc5aGRDQmtjQ0E5SUNnZ2JHVnVaM1JvS0NCc2FXZG9kRlJ2VUc5emFYUnBiMjRnS1NBdElITm9ZV1J2ZDBOaGJXVnlZVTVsWVhJZ0tTQXZJQ2dnYzJoaFpHOTNRMkZ0WlhKaFJtRnlJQzBnYzJoaFpHOTNRMkZ0WlhKaFRtVmhjaUFwT3drSlpIQWdLejBnYzJoaFpHOTNRbWxoY3pzS0NRbDJaV016SUdKa00wUWdQU0J1YjNKdFlXeHBlbVVvSUd4cFoyaDBWRzlRYjNOcGRHbHZiaUFwT3dvSkNTTnBaaUJrWldacGJtVmtLQ0JUU0VGRVQxZE5RVkJmVkZsUVJWOVFRMFlnS1NCOGZDQmtaV1pwYm1Wa0tDQlRTRUZFVDFkTlFWQmZWRmxRUlY5UVEwWmZVMDlHVkNBcElIeDhJR1JsWm1sdVpXUW9JRk5JUVVSUFYwMUJVRjlVV1ZCRlgxWlRUU0FwQ2drSkNYWmxZeklnYjJabWMyVjBJRDBnZG1Wak1pZ2dMU0F4TENBeElDa2dLaUJ6YUdGa2IzZFNZV1JwZFhNZ0tpQjBaWGhsYkZOcGVtVXVlVHNLQ1FrSmNtVjBkWEp1SUNnS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnWTNWaVpWUnZWVllvSUdKa00wUWdLeUJ2Wm1aelpYUXVlSGw1TENCMFpYaGxiRk5wZW1VdWVTQXBMQ0JrY0NBcElDc0tDUWtKQ1hSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z1kzVmlaVlJ2VlZZb0lHSmtNMFFnS3lCdlptWnpaWFF1ZVhsNUxDQjBaWGhsYkZOcGVtVXVlU0FwTENCa2NDQXBJQ3NLQ1FrSkNYUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2dZM1ZpWlZSdlZWWW9JR0prTTBRZ0t5QnZabVp6WlhRdWVIbDRMQ0IwWlhobGJGTnBlbVV1ZVNBcExDQmtjQ0FwSUNzS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnWTNWaVpWUnZWVllvSUdKa00wUWdLeUJ2Wm1aelpYUXVlWGw0TENCMFpYaGxiRk5wZW1VdWVTQXBMQ0JrY0NBcElDc0tDUWtKQ1hSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z1kzVmlaVlJ2VlZZb0lHSmtNMFFzSUhSbGVHVnNVMmw2WlM1NUlDa3NJR1J3SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCamRXSmxWRzlWVmlnZ1ltUXpSQ0FySUc5bVpuTmxkQzU0ZUhrc0lIUmxlR1ZzVTJsNlpTNTVJQ2tzSUdSd0lDa2dLd29KQ1FrSmRHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQmpkV0psVkc5VlZpZ2dZbVF6UkNBcklHOW1abk5sZEM1NWVIa3NJSFJsZUdWc1UybDZaUzU1SUNrc0lHUndJQ2tnS3dvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0JqZFdKbFZHOVZWaWdnWW1RelJDQXJJRzltWm5ObGRDNTRlSGdzSUhSbGVHVnNVMmw2WlM1NUlDa3NJR1J3SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCamRXSmxWRzlWVmlnZ1ltUXpSQ0FySUc5bVpuTmxkQzU1ZUhnc0lIUmxlR1ZzVTJsNlpTNTVJQ2tzSUdSd0lDa0tDUWtKS1NBcUlDZ2dNUzR3SUM4Z09TNHdJQ2s3Q2drSkkyVnNjMlVLQ1FrSmNtVjBkWEp1SUhSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z1kzVmlaVlJ2VlZZb0lHSmtNMFFzSUhSbGVHVnNVMmw2WlM1NUlDa3NJR1J3SUNrN0Nna0pJMlZ1WkdsbUNnbDlDaU5sYm1ScFptQXNJSE5uSUQwZ1lDTnBaaUJPVlUxZlUxQlBWRjlNU1VkSVZGOURUMDlTUkZNZ1BpQXdDZ2wxYm1sbWIzSnRJRzFoZERRZ2MzQnZkRXhwWjJoMFRXRjBjbWw0V3lCT1ZVMWZVMUJQVkY5TVNVZElWRjlEVDA5U1JGTWdYVHNLQ1haaGNubHBibWNnZG1Wak5DQjJVM0J2ZEV4cFoyaDBRMjl2Y21SYklFNVZUVjlUVUU5VVgweEpSMGhVWDBOUFQxSkVVeUJkT3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5VFNFRkVUMWROUVZBS0NTTnBaaUJPVlUxZlJFbFNYMHhKUjBoVVgxTklRVVJQVjFNZ1BpQXdDZ2tKZFc1cFptOXliU0J0WVhRMElHUnBjbVZqZEdsdmJtRnNVMmhoWkc5M1RXRjBjbWw0V3lCT1ZVMWZSRWxTWDB4SlIwaFVYMU5JUVVSUFYxTWdYVHNLQ1FsMllYSjVhVzVuSUhabFl6UWdka1JwY21WamRHbHZibUZzVTJoaFpHOTNRMjl2Y21SYklFNVZUVjlFU1ZKZlRFbEhTRlJmVTBoQlJFOVhVeUJkT3dvSkNYTjBjblZqZENCRWFYSmxZM1JwYjI1aGJFeHBaMmgwVTJoaFpHOTNJSHNLQ1FrSlpteHZZWFFnYzJoaFpHOTNRbWxoY3pzS0NRa0pabXh2WVhRZ2MyaGhaRzkzVG05eWJXRnNRbWxoY3pzS0NRa0pabXh2WVhRZ2MyaGhaRzkzVW1Ga2FYVnpPd29KQ1FsMlpXTXlJSE5vWVdSdmQwMWhjRk5wZW1VN0Nna0pmVHNLQ1FsMWJtbG1iM0p0SUVScGNtVmpkR2x2Ym1Gc1RHbG5hSFJUYUdGa2IzY2daR2x5WldOMGFXOXVZV3hNYVdkb2RGTm9ZV1J2ZDNOYklFNVZUVjlFU1ZKZlRFbEhTRlJmVTBoQlJFOVhVeUJkT3dvSkkyVnVaR2xtQ2dramFXWWdUbFZOWDFOUVQxUmZURWxIU0ZSZlUwaEJSRTlYVXlBK0lEQUtDUWx6ZEhKMVkzUWdVM0J2ZEV4cFoyaDBVMmhoWkc5M0lIc0tDUWtKWm14dllYUWdjMmhoWkc5M1FtbGhjenNLQ1FrSlpteHZZWFFnYzJoaFpHOTNUbTl5YldGc1FtbGhjenNLQ1FrSlpteHZZWFFnYzJoaFpHOTNVbUZrYVhWek93b0pDUWwyWldNeUlITm9ZV1J2ZDAxaGNGTnBlbVU3Q2drSmZUc0tDUWwxYm1sbWIzSnRJRk53YjNSTWFXZG9kRk5vWVdSdmR5QnpjRzkwVEdsbmFIUlRhR0ZrYjNkeld5Qk9WVTFmVTFCUFZGOU1TVWRJVkY5VFNFRkVUMWRUSUYwN0Nna2paVzVrYVdZS0NTTnBaaUJPVlUxZlVFOUpUbFJmVEVsSFNGUmZVMGhCUkU5WFV5QStJREFLQ1FsMWJtbG1iM0p0SUcxaGREUWdjRzlwYm5SVGFHRmtiM2ROWVhSeWFYaGJJRTVWVFY5UVQwbE9WRjlNU1VkSVZGOVRTRUZFVDFkVElGMDdDZ2tKZG1GeWVXbHVaeUIyWldNMElIWlFiMmx1ZEZOb1lXUnZkME52YjNKa1d5Qk9WVTFmVUU5SlRsUmZURWxIU0ZSZlUwaEJSRTlYVXlCZE93b0pDWE4wY25WamRDQlFiMmx1ZEV4cFoyaDBVMmhoWkc5M0lIc0tDUWtKWm14dllYUWdjMmhoWkc5M1FtbGhjenNLQ1FrSlpteHZZWFFnYzJoaFpHOTNUbTl5YldGc1FtbGhjenNLQ1FrSlpteHZZWFFnYzJoaFpHOTNVbUZrYVhWek93b0pDUWwyWldNeUlITm9ZV1J2ZDAxaGNGTnBlbVU3Q2drSkNXWnNiMkYwSUhOb1lXUnZkME5oYldWeVlVNWxZWEk3Q2drSkNXWnNiMkYwSUhOb1lXUnZkME5oYldWeVlVWmhjanNLQ1FsOU93b0pDWFZ1YVdadmNtMGdVRzlwYm5STWFXZG9kRk5vWVdSdmR5QndiMmx1ZEV4cFoyaDBVMmhoWkc5M2Mxc2dUbFZOWDFCUFNVNVVYMHhKUjBoVVgxTklRVVJQVjFNZ1hUc0tDU05sYm1ScFpnb2paVzVrYVdaZ0xDQnlaeUE5SUdBamFXWWdLQ0JrWldacGJtVmtLQ0JWVTBWZlUwaEJSRTlYVFVGUUlDa2dKaVlnS0NCT1ZVMWZSRWxTWDB4SlIwaFVYMU5JUVVSUFYxTWdQaUF3SUh4OElFNVZUVjlRVDBsT1ZGOU1TVWRJVkY5VFNFRkVUMWRUSUQ0Z01DQXBJQ2tnZkh3Z0tDQk9WVTFmVTFCUFZGOU1TVWRJVkY5RFQwOVNSRk1nUGlBd0lDa0tDWFpsWXpNZ2MyaGhaRzkzVjI5eWJHUk9iM0p0WVd3Z1BTQnBiblpsY25ObFZISmhibk5tYjNKdFJHbHlaV04wYVc5dUtDQjBjbUZ1YzJadmNtMWxaRTV2Y20xaGJDd2dkbWxsZDAxaGRISnBlQ0FwT3dvSmRtVmpOQ0J6YUdGa2IzZFhiM0pzWkZCdmMybDBhVzl1T3dvalpXNWthV1lLSTJsbUlHUmxabWx1WldRb0lGVlRSVjlUU0VGRVQxZE5RVkFnS1FvSkkybG1JRTVWVFY5RVNWSmZURWxIU0ZSZlUwaEJSRTlYVXlBK0lEQUtDUWtqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDNOMFlYSjBDZ2tKWm05eUlDZ2dhVzUwSUdrZ1BTQXdPeUJwSUR3Z1RsVk5YMFJKVWw5TVNVZElWRjlUU0VGRVQxZFRPeUJwSUNzcklDa2dld29KQ1FsemFHRmtiM2RYYjNKc1pGQnZjMmwwYVc5dUlEMGdkMjl5YkdSUWIzTnBkR2x2YmlBcklIWmxZelFvSUhOb1lXUnZkMWR2Y214a1RtOXliV0ZzSUNvZ1pHbHlaV04wYVc5dVlXeE1hV2RvZEZOb1lXUnZkM05iSUdrZ1hTNXphR0ZrYjNkT2IzSnRZV3hDYVdGekxDQXdJQ2s3Q2drSkNYWkVhWEpsWTNScGIyNWhiRk5vWVdSdmQwTnZiM0prV3lCcElGMGdQU0JrYVhKbFkzUnBiMjVoYkZOb1lXUnZkMDFoZEhKcGVGc2dhU0JkSUNvZ2MyaGhaRzkzVjI5eWJHUlFiM05wZEdsdmJqc0tDUWw5Q2drSkkzQnlZV2R0WVNCMWJuSnZiR3hmYkc5dmNGOWxibVFLQ1NObGJtUnBaZ29KSTJsbUlFNVZUVjlRVDBsT1ZGOU1TVWRJVkY5VFNFRkVUMWRUSUQ0Z01Bb0pDU053Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmYzNSaGNuUUtDUWxtYjNJZ0tDQnBiblFnYVNBOUlEQTdJR2tnUENCT1ZVMWZVRTlKVGxSZlRFbEhTRlJmVTBoQlJFOVhVenNnYVNBckt5QXBJSHNLQ1FrSmMyaGhaRzkzVjI5eWJHUlFiM05wZEdsdmJpQTlJSGR2Y214a1VHOXphWFJwYjI0Z0t5QjJaV00wS0NCemFHRmtiM2RYYjNKc1pFNXZjbTFoYkNBcUlIQnZhVzUwVEdsbmFIUlRhR0ZrYjNkeld5QnBJRjB1YzJoaFpHOTNUbTl5YldGc1FtbGhjeXdnTUNBcE93b0pDUWwyVUc5cGJuUlRhR0ZrYjNkRGIyOXlaRnNnYVNCZElEMGdjRzlwYm5SVGFHRmtiM2ROWVhSeWFYaGJJR2tnWFNBcUlITm9ZV1J2ZDFkdmNteGtVRzl6YVhScGIyNDdDZ2tKZlFvSkNTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZaVzVrQ2dralpXNWthV1lLSTJWdVpHbG1DaU5wWmlCT1ZVMWZVMUJQVkY5TVNVZElWRjlEVDA5U1JGTWdQaUF3Q2dramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gzTjBZWEowQ2dsbWIzSWdLQ0JwYm5RZ2FTQTlJREE3SUdrZ1BDQk9WVTFmVTFCUFZGOU1TVWRJVkY5RFQwOVNSRk03SUdrZ0t5c2dLU0I3Q2drSmMyaGhaRzkzVjI5eWJHUlFiM05wZEdsdmJpQTlJSGR2Y214a1VHOXphWFJwYjI0N0Nna0pJMmxtSUNnZ1pHVm1hVzVsWkNnZ1ZWTkZYMU5JUVVSUFYwMUJVQ0FwSUNZbUlGVk9VazlNVEVWRVgweFBUMUJmU1U1RVJWZ2dQQ0JPVlUxZlUxQlBWRjlNU1VkSVZGOVRTRUZFVDFkVElDa0tDUWtKYzJoaFpHOTNWMjl5YkdSUWIzTnBkR2x2Ymk1NGVYb2dLejBnYzJoaFpHOTNWMjl5YkdST2IzSnRZV3dnS2lCemNHOTBUR2xuYUhSVGFHRmtiM2R6V3lCcElGMHVjMmhoWkc5M1RtOXliV0ZzUW1saGN6c0tDUWtqWlc1a2FXWUtDUWwyVTNCdmRFeHBaMmgwUTI5dmNtUmJJR2tnWFNBOUlITndiM1JNYVdkb2RFMWhkSEpwZUZzZ2FTQmRJQ29nYzJoaFpHOTNWMjl5YkdSUWIzTnBkR2x2YmpzS0NYMEtDU053Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmWlc1a0NpTmxibVJwWm1Bc0lHRm5JRDBnWUdac2IyRjBJR2RsZEZOb1lXUnZkMDFoYzJzb0tTQjdDZ2xtYkc5aGRDQnphR0ZrYjNjZ1BTQXhMakE3Q2dramFXWmtaV1lnVlZORlgxTklRVVJQVjAxQlVBb0pJMmxtSUU1VlRWOUVTVkpmVEVsSFNGUmZVMGhCUkU5WFV5QStJREFLQ1VScGNtVmpkR2x2Ym1Gc1RHbG5hSFJUYUdGa2IzY2daR2x5WldOMGFXOXVZV3hNYVdkb2REc0tDU053Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmYzNSaGNuUUtDV1p2Y2lBb0lHbHVkQ0JwSUQwZ01Ec2dhU0E4SUU1VlRWOUVTVkpmVEVsSFNGUmZVMGhCUkU5WFV6c2dhU0FyS3lBcElIc0tDUWxrYVhKbFkzUnBiMjVoYkV4cFoyaDBJRDBnWkdseVpXTjBhVzl1WVd4TWFXZG9kRk5vWVdSdmQzTmJJR2tnWFRzS0NRbHphR0ZrYjNjZ0tqMGdjbVZqWldsMlpWTm9ZV1J2ZHlBL0lHZGxkRk5vWVdSdmR5Z2daR2x5WldOMGFXOXVZV3hUYUdGa2IzZE5ZWEJiSUdrZ1hTd2daR2x5WldOMGFXOXVZV3hNYVdkb2RDNXphR0ZrYjNkTllYQlRhWHBsTENCa2FYSmxZM1JwYjI1aGJFeHBaMmgwTG5Ob1lXUnZkMEpwWVhNc0lHUnBjbVZqZEdsdmJtRnNUR2xuYUhRdWMyaGhaRzkzVW1Ga2FYVnpMQ0IyUkdseVpXTjBhVzl1WVd4VGFHRmtiM2REYjI5eVpGc2dhU0JkSUNrZ09pQXhMakE3Q2dsOUNna2pjSEpoWjIxaElIVnVjbTlzYkY5c2IyOXdYMlZ1WkFvSkkyVnVaR2xtQ2dramFXWWdUbFZOWDFOUVQxUmZURWxIU0ZSZlUwaEJSRTlYVXlBK0lEQUtDVk53YjNSTWFXZG9kRk5vWVdSdmR5QnpjRzkwVEdsbmFIUTdDZ2tqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDNOMFlYSjBDZ2xtYjNJZ0tDQnBiblFnYVNBOUlEQTdJR2tnUENCT1ZVMWZVMUJQVkY5TVNVZElWRjlUU0VGRVQxZFRPeUJwSUNzcklDa2dld29KQ1hOd2IzUk1hV2RvZENBOUlITndiM1JNYVdkb2RGTm9ZV1J2ZDNOYklHa2dYVHNLQ1FsemFHRmtiM2NnS2owZ2NtVmpaV2wyWlZOb1lXUnZkeUEvSUdkbGRGTm9ZV1J2ZHlnZ2MzQnZkRk5vWVdSdmQwMWhjRnNnYVNCZExDQnpjRzkwVEdsbmFIUXVjMmhoWkc5M1RXRndVMmw2WlN3Z2MzQnZkRXhwWjJoMExuTm9ZV1J2ZDBKcFlYTXNJSE53YjNSTWFXZG9kQzV6YUdGa2IzZFNZV1JwZFhNc0lIWlRjRzkwVEdsbmFIUkRiMjl5WkZzZ2FTQmRJQ2tnT2lBeExqQTdDZ2w5Q2dramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gyVnVaQW9KSTJWdVpHbG1DZ2tqYVdZZ1RsVk5YMUJQU1U1VVgweEpSMGhVWDFOSVFVUlBWMU1nUGlBd0NnbFFiMmx1ZEV4cFoyaDBVMmhoWkc5M0lIQnZhVzUwVEdsbmFIUTdDZ2tqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDNOMFlYSjBDZ2xtYjNJZ0tDQnBiblFnYVNBOUlEQTdJR2tnUENCT1ZVMWZVRTlKVGxSZlRFbEhTRlJmVTBoQlJFOVhVenNnYVNBckt5QXBJSHNLQ1Fsd2IybHVkRXhwWjJoMElEMGdjRzlwYm5STWFXZG9kRk5vWVdSdmQzTmJJR2tnWFRzS0NRbHphR0ZrYjNjZ0tqMGdjbVZqWldsMlpWTm9ZV1J2ZHlBL0lHZGxkRkJ2YVc1MFUyaGhaRzkzS0NCd2IybHVkRk5vWVdSdmQwMWhjRnNnYVNCZExDQndiMmx1ZEV4cFoyaDBMbk5vWVdSdmQwMWhjRk5wZW1Vc0lIQnZhVzUwVEdsbmFIUXVjMmhoWkc5M1FtbGhjeXdnY0c5cGJuUk1hV2RvZEM1emFHRmtiM2RTWVdScGRYTXNJSFpRYjJsdWRGTm9ZV1J2ZDBOdmIzSmtXeUJwSUYwc0lIQnZhVzUwVEdsbmFIUXVjMmhoWkc5M1EyRnRaWEpoVG1WaGNpd2djRzlwYm5STWFXZG9kQzV6YUdGa2IzZERZVzFsY21GR1lYSWdLU0E2SURFdU1Ec0tDWDBLQ1NOd2NtRm5iV0VnZFc1eWIyeHNYMnh2YjNCZlpXNWtDZ2tqWlc1a2FXWUtDU05sYm1ScFpnb0pjbVYwZFhKdUlITm9ZV1J2ZHpzS2ZXQXNJRzluSUQwZ1lDTnBabVJsWmlCVlUwVmZVMHRKVGs1SlRrY0tDVzFoZERRZ1ltOXVaVTFoZEZnZ1BTQm5aWFJDYjI1bFRXRjBjbWw0S0NCemEybHVTVzVrWlhndWVDQXBPd29KYldGME5DQmliMjVsVFdGMFdTQTlJR2RsZEVKdmJtVk5ZWFJ5YVhnb0lITnJhVzVKYm1SbGVDNTVJQ2s3Q2dsdFlYUTBJR0p2Ym1WTllYUmFJRDBnWjJWMFFtOXVaVTFoZEhKcGVDZ2djMnRwYmtsdVpHVjRMbm9nS1RzS0NXMWhkRFFnWW05dVpVMWhkRmNnUFNCblpYUkNiMjVsVFdGMGNtbDRLQ0J6YTJsdVNXNWtaWGd1ZHlBcE93b2paVzVrYVdaZ0xDQmpaeUE5SUdBamFXWmtaV1lnVlZORlgxTkxTVTVPU1U1SENnbDFibWxtYjNKdElHMWhkRFFnWW1sdVpFMWhkSEpwZURzS0NYVnVhV1p2Y20wZ2JXRjBOQ0JpYVc1a1RXRjBjbWw0U1c1MlpYSnpaVHNLQ1hWdWFXWnZjbTBnYUdsbmFIQWdjMkZ0Y0d4bGNqSkVJR0p2Ym1WVVpYaDBkWEpsT3dvSmRXNXBabTl5YlNCcGJuUWdZbTl1WlZSbGVIUjFjbVZUYVhwbE93b0piV0YwTkNCblpYUkNiMjVsVFdGMGNtbDRLQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnBJQ2tnZXdvSkNXWnNiMkYwSUdvZ1BTQnBJQ29nTkM0d093b0pDV1pzYjJGMElIZ2dQU0J0YjJRb0lHb3NJR1pzYjJGMEtDQmliMjVsVkdWNGRIVnlaVk5wZW1VZ0tTQXBPd29KQ1dac2IyRjBJSGtnUFNCbWJHOXZjaWdnYWlBdklHWnNiMkYwS0NCaWIyNWxWR1Y0ZEhWeVpWTnBlbVVnS1NBcE93b0pDV1pzYjJGMElHUjRJRDBnTVM0d0lDOGdabXh2WVhRb0lHSnZibVZVWlhoMGRYSmxVMmw2WlNBcE93b0pDV1pzYjJGMElHUjVJRDBnTVM0d0lDOGdabXh2WVhRb0lHSnZibVZVWlhoMGRYSmxVMmw2WlNBcE93b0pDWGtnUFNCa2VTQXFJQ2dnZVNBcklEQXVOU0FwT3dvSkNYWmxZelFnZGpFZ1BTQjBaWGgwZFhKbE1rUW9JR0p2Ym1WVVpYaDBkWEpsTENCMlpXTXlLQ0JrZUNBcUlDZ2dlQ0FySURBdU5TQXBMQ0I1SUNrZ0tUc0tDUWwyWldNMElIWXlJRDBnZEdWNGRIVnlaVEpFS0NCaWIyNWxWR1Y0ZEhWeVpTd2dkbVZqTWlnZ1pIZ2dLaUFvSUhnZ0t5QXhMalVnS1N3Z2VTQXBJQ2s3Q2drSmRtVmpOQ0IyTXlBOUlIUmxlSFIxY21VeVJDZ2dZbTl1WlZSbGVIUjFjbVVzSUhabFl6SW9JR1I0SUNvZ0tDQjRJQ3NnTWk0MUlDa3NJSGtnS1NBcE93b0pDWFpsWXpRZ2RqUWdQU0IwWlhoMGRYSmxNa1FvSUdKdmJtVlVaWGgwZFhKbExDQjJaV015S0NCa2VDQXFJQ2dnZUNBcklETXVOU0FwTENCNUlDa2dLVHNLQ1FsdFlYUTBJR0p2Ym1VZ1BTQnRZWFEwS0NCMk1Td2dkaklzSUhZekxDQjJOQ0FwT3dvSkNYSmxkSFZ5YmlCaWIyNWxPd29KZlFvalpXNWthV1pnTENCc1p5QTlJR0FqYVdaa1pXWWdWVk5GWDFOTFNVNU9TVTVIQ2dsMlpXTTBJSE5yYVc1V1pYSjBaWGdnUFNCaWFXNWtUV0YwY21sNElDb2dkbVZqTkNnZ2RISmhibk5tYjNKdFpXUXNJREV1TUNBcE93b0pkbVZqTkNCemEybHVibVZrSUQwZ2RtVmpOQ2dnTUM0d0lDazdDZ2x6YTJsdWJtVmtJQ3M5SUdKdmJtVk5ZWFJZSUNvZ2MydHBibFpsY25SbGVDQXFJSE5yYVc1WFpXbG5hSFF1ZURzS0NYTnJhVzV1WldRZ0t6MGdZbTl1WlUxaGRGa2dLaUJ6YTJsdVZtVnlkR1Y0SUNvZ2MydHBibGRsYVdkb2RDNTVPd29KYzJ0cGJtNWxaQ0FyUFNCaWIyNWxUV0YwV2lBcUlITnJhVzVXWlhKMFpYZ2dLaUJ6YTJsdVYyVnBaMmgwTG5vN0NnbHphMmx1Ym1Wa0lDczlJR0p2Ym1WTllYUlhJQ29nYzJ0cGJsWmxjblJsZUNBcUlITnJhVzVYWldsbmFIUXVkenNLQ1hSeVlXNXpabTl5YldWa0lEMGdLQ0JpYVc1a1RXRjBjbWw0U1c1MlpYSnpaU0FxSUhOcmFXNXVaV1FnS1M1NGVYbzdDaU5sYm1ScFptQXNJR2huSUQwZ1lDTnBabVJsWmlCVlUwVmZVMHRKVGs1SlRrY0tDVzFoZERRZ2MydHBiazFoZEhKcGVDQTlJRzFoZERRb0lEQXVNQ0FwT3dvSmMydHBiazFoZEhKcGVDQXJQU0J6YTJsdVYyVnBaMmgwTG5nZ0tpQmliMjVsVFdGMFdEc0tDWE5yYVc1TllYUnlhWGdnS3owZ2MydHBibGRsYVdkb2RDNTVJQ29nWW05dVpVMWhkRms3Q2dsemEybHVUV0YwY21sNElDczlJSE5yYVc1WFpXbG5hSFF1ZWlBcUlHSnZibVZOWVhSYU93b0pjMnRwYmsxaGRISnBlQ0FyUFNCemEybHVWMlZwWjJoMExuY2dLaUJpYjI1bFRXRjBWenNLQ1hOcmFXNU5ZWFJ5YVhnZ1BTQmlhVzVrVFdGMGNtbDRTVzUyWlhKelpTQXFJSE5yYVc1TllYUnlhWGdnS2lCaWFXNWtUV0YwY21sNE93b0piMkpxWldOMFRtOXliV0ZzSUQwZ2RtVmpOQ2dnYzJ0cGJrMWhkSEpwZUNBcUlIWmxZelFvSUc5aWFtVmpkRTV2Y20xaGJDd2dNQzR3SUNrZ0tTNTRlWG83Q2dramFXWmtaV1lnVlZORlgxUkJUa2RGVGxRS0NRbHZZbXBsWTNSVVlXNW5aVzUwSUQwZ2RtVmpOQ2dnYzJ0cGJrMWhkSEpwZUNBcUlIWmxZelFvSUc5aWFtVmpkRlJoYm1kbGJuUXNJREF1TUNBcElDa3VlSGw2T3dvSkkyVnVaR2xtQ2lObGJtUnBabUFzSUhWbklEMGdZR1pzYjJGMElITndaV04xYkdGeVUzUnlaVzVuZEdnN0NpTnBabVJsWmlCVlUwVmZVMUJGUTFWTVFWSk5RVkFLQ1habFl6UWdkR1Y0Wld4VGNHVmpkV3hoY2lBOUlIUmxlSFIxY21VeVJDZ2djM0JsWTNWc1lYSk5ZWEFzSUhaVGNHVmpkV3hoY2sxaGNGVjJJQ2s3Q2dsemNHVmpkV3hoY2xOMGNtVnVaM1JvSUQwZ2RHVjRaV3hUY0dWamRXeGhjaTV5T3dvalpXeHpaUW9KYzNCbFkzVnNZWEpUZEhKbGJtZDBhQ0E5SURFdU1Ec0tJMlZ1WkdsbVlDd2daR2NnUFNCZ0kybG1aR1ZtSUZWVFJWOVRVRVZEVlV4QlVrMUJVQW9KZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnYzNCbFkzVnNZWEpOWVhBN0NpTmxibVJwWm1Bc0lHWm5JRDBnWUNOcFppQmtaV1pwYm1Wa0tDQlVUMDVGWDAxQlVGQkpUa2NnS1FvSloyeGZSbkpoWjBOdmJHOXlMbkpuWWlBOUlIUnZibVZOWVhCd2FXNW5LQ0JuYkY5R2NtRm5RMjlzYjNJdWNtZGlJQ2s3Q2lObGJtUnBabUFzSUhCbklEMGdZQ05wWm01a1pXWWdjMkYwZFhKaGRHVUtJMlJsWm1sdVpTQnpZWFIxY21GMFpTZ2dZU0FwSUdOc1lXMXdLQ0JoTENBd0xqQXNJREV1TUNBcENpTmxibVJwWmdwMWJtbG1iM0p0SUdac2IyRjBJSFJ2Ym1WTllYQndhVzVuUlhod2IzTjFjbVU3Q25abFl6TWdUR2x1WldGeVZHOXVaVTFoY0hCcGJtY29JSFpsWXpNZ1kyOXNiM0lnS1NCN0NnbHlaWFIxY200Z2MyRjBkWEpoZEdVb0lIUnZibVZOWVhCd2FXNW5SWGh3YjNOMWNtVWdLaUJqYjJ4dmNpQXBPd3A5Q25abFl6TWdVbVZwYm1oaGNtUlViMjVsVFdGd2NHbHVaeWdnZG1Wak15QmpiMnh2Y2lBcElIc0tDV052Ykc5eUlDbzlJSFJ2Ym1WTllYQndhVzVuUlhod2IzTjFjbVU3Q2dseVpYUjFjbTRnYzJGMGRYSmhkR1VvSUdOdmJHOXlJQzhnS0NCMlpXTXpLQ0F4TGpBZ0tTQXJJR052Ykc5eUlDa2dLVHNLZlFwMlpXTXpJRTl3ZEdsdGFYcGxaRU5wYm1WdmJsUnZibVZOWVhCd2FXNW5LQ0IyWldNeklHTnZiRzl5SUNrZ2V3b0pZMjlzYjNJZ0tqMGdkRzl1WlUxaGNIQnBibWRGZUhCdmMzVnlaVHNLQ1dOdmJHOXlJRDBnYldGNEtDQjJaV016S0NBd0xqQWdLU3dnWTI5c2IzSWdMU0F3TGpBd05DQXBPd29KY21WMGRYSnVJSEJ2ZHlnZ0tDQmpiMnh2Y2lBcUlDZ2dOaTR5SUNvZ1kyOXNiM0lnS3lBd0xqVWdLU0FwSUM4Z0tDQmpiMnh2Y2lBcUlDZ2dOaTR5SUNvZ1kyOXNiM0lnS3lBeExqY2dLU0FySURBdU1EWWdLU3dnZG1Wak15Z2dNaTR5SUNrZ0tUc0tmUXAyWldNeklGSlNWRUZ1WkU5RVZFWnBkQ2dnZG1Wak15QjJJQ2tnZXdvSmRtVmpNeUJoSUQwZ2RpQXFJQ2dnZGlBcklEQXVNREkwTlRjNE5pQXBJQzBnTUM0d01EQXdPVEExTXpjN0NnbDJaV016SUdJZ1BTQjJJQ29nS0NBd0xqazRNemN5T1NBcUlIWWdLeUF3TGpRek1qazFNVEFnS1NBcklEQXVNak00TURneE93b0pjbVYwZFhKdUlHRWdMeUJpT3dwOUNuWmxZek1nUVVORlUwWnBiRzFwWTFSdmJtVk5ZWEJ3YVc1bktDQjJaV016SUdOdmJHOXlJQ2tnZXdvSlkyOXVjM1FnYldGME15QkJRMFZUU1c1d2RYUk5ZWFFnUFNCdFlYUXpLQW9KQ1habFl6TW9JREF1TlRrM01Ua3NJREF1TURjMk1EQXNJREF1TURJNE5EQWdLU3dKQ1habFl6TW9JREF1TXpVME5UZ3NJREF1T1RBNE16UXNJREF1TVRNek9ETWdLU3dLQ1FsMlpXTXpLQ0F3TGpBME9ESXpMQ0F3TGpBeE5UWTJMQ0F3TGpnek56YzNJQ2tLQ1NrN0NnbGpiMjV6ZENCdFlYUXpJRUZEUlZOUGRYUndkWFJOWVhRZ1BTQnRZWFF6S0FvSkNYWmxZek1vSUNBeExqWXdORGMxTENBdE1DNHhNREl3T0N3Z0xUQXVNREF6TWpjZ0tTd0pDWFpsWXpNb0lDMHdMalV6TVRBNExDQWdNUzR4TURneE15d2dMVEF1TURjeU56WWdLU3dLQ1FsMlpXTXpLQ0F0TUM0d056TTJOeXdnTFRBdU1EQTJNRFVzSUNBeExqQTNOakF5SUNrS0NTazdDZ2xqYjJ4dmNpQXFQU0IwYjI1bFRXRndjR2x1WjBWNGNHOXpkWEpsSUM4Z01DNDJPd29KWTI5c2IzSWdQU0JCUTBWVFNXNXdkWFJOWVhRZ0tpQmpiMnh2Y2pzS0NXTnZiRzl5SUQwZ1VsSlVRVzVrVDBSVVJtbDBLQ0JqYjJ4dmNpQXBPd29KWTI5c2IzSWdQU0JCUTBWVFQzVjBjSFYwVFdGMElDb2dZMjlzYjNJN0NnbHlaWFIxY200Z2MyRjBkWEpoZEdVb0lHTnZiRzl5SUNrN0NuMEtkbVZqTXlCRGRYTjBiMjFVYjI1bFRXRndjR2x1WnlnZ2RtVmpNeUJqYjJ4dmNpQXBJSHNnY21WMGRYSnVJR052Ykc5eU95QjlZQ3dnYldjZ1BTQmdJMmxtWkdWbUlGVlRSVjlVVWtGT1UwMUpVMU5KVDA0S0NXMWhkR1Z5YVdGc0xuUnlZVzV6YldsemMybHZiaUE5SUhSeVlXNXpiV2x6YzJsdmJqc0tDVzFoZEdWeWFXRnNMblJ5WVc1emJXbHpjMmx2YmtGc2NHaGhJRDBnTVM0d093b0piV0YwWlhKcFlXd3VkR2hwWTJ0dVpYTnpJRDBnZEdocFkydHVaWE56T3dvSmJXRjBaWEpwWVd3dVlYUjBaVzUxWVhScGIyNUVhWE4wWVc1alpTQTlJR0YwZEdWdWRXRjBhVzl1UkdsemRHRnVZMlU3Q2dsdFlYUmxjbWxoYkM1aGRIUmxiblZoZEdsdmJrTnZiRzl5SUQwZ1lYUjBaVzUxWVhScGIyNURiMnh2Y2pzS0NTTnBabVJsWmlCVlUwVmZWRkpCVGxOTlNWTlRTVTlPVFVGUUNna0piV0YwWlhKcFlXd3VkSEpoYm5OdGFYTnphVzl1SUNvOUlIUmxlSFIxY21VeVJDZ2dkSEpoYm5OdGFYTnphVzl1VFdGd0xDQjJWSEpoYm5OdGFYTnphVzl1VFdGd1ZYWWdLUzV5T3dvSkkyVnVaR2xtQ2dramFXWmtaV1lnVlZORlgxUklTVU5MVGtWVFUwMUJVQW9KQ1cxaGRHVnlhV0ZzTG5Sb2FXTnJibVZ6Y3lBcVBTQjBaWGgwZFhKbE1rUW9JSFJvYVdOcmJtVnpjMDFoY0N3Z2RsUm9hV05yYm1WemMwMWhjRlYySUNrdVp6c0tDU05sYm1ScFpnb0pkbVZqTXlCd2IzTWdQU0IyVjI5eWJHUlFiM05wZEdsdmJqc0tDWFpsWXpNZ2RpQTlJRzV2Y20xaGJHbDZaU2dnWTJGdFpYSmhVRzl6YVhScGIyNGdMU0J3YjNNZ0tUc0tDWFpsWXpNZ2JpQTlJR2x1ZG1WeWMyVlVjbUZ1YzJadmNtMUVhWEpsWTNScGIyNG9JRzV2Y20xaGJDd2dkbWxsZDAxaGRISnBlQ0FwT3dvSmRtVmpOQ0IwY21GdWMyMXBkSFJsWkNBOUlHZGxkRWxDVEZadmJIVnRaVkpsWm5KaFkzUnBiMjRvQ2drSmJpd2dkaXdnYldGMFpYSnBZV3d1Y205MVoyaHVaWE56TENCdFlYUmxjbWxoYkM1a2FXWm1kWE5sUTI5c2IzSXNJRzFoZEdWeWFXRnNMbk53WldOMWJHRnlRMjlzYjNJc0lHMWhkR1Z5YVdGc0xuTndaV04xYkdGeVJqa3dMQW9KQ1hCdmN5d2diVzlrWld4TllYUnlhWGdzSUhacFpYZE5ZWFJ5YVhnc0lIQnliMnBsWTNScGIyNU5ZWFJ5YVhnc0lHMWhkR1Z5YVdGc0xtbHZjaXdnYldGMFpYSnBZV3d1ZEdocFkydHVaWE56TEFvSkNXMWhkR1Z5YVdGc0xtRjBkR1Z1ZFdGMGFXOXVRMjlzYjNJc0lHMWhkR1Z5YVdGc0xtRjBkR1Z1ZFdGMGFXOXVSR2x6ZEdGdVkyVWdLVHNLQ1cxaGRHVnlhV0ZzTG5SeVlXNXpiV2x6YzJsdmJrRnNjR2hoSUQwZ2JXbDRLQ0J0WVhSbGNtbGhiQzUwY21GdWMyMXBjM05wYjI1QmJIQm9ZU3dnZEhKaGJuTnRhWFIwWldRdVlTd2diV0YwWlhKcFlXd3VkSEpoYm5OdGFYTnphVzl1SUNrN0NnbDBiM1JoYkVScFptWjFjMlVnUFNCdGFYZ29JSFJ2ZEdGc1JHbG1ablZ6WlN3Z2RISmhibk50YVhSMFpXUXVjbWRpTENCdFlYUmxjbWxoYkM1MGNtRnVjMjFwYzNOcGIyNGdLVHNLSTJWdVpHbG1ZQ3dnWjJjZ1BTQmdJMmxtWkdWbUlGVlRSVjlVVWtGT1UwMUpVMU5KVDA0S0NYVnVhV1p2Y20wZ1pteHZZWFFnZEhKaGJuTnRhWE56YVc5dU93b0pkVzVwWm05eWJTQm1iRzloZENCMGFHbGphMjVsYzNNN0NnbDFibWxtYjNKdElHWnNiMkYwSUdGMGRHVnVkV0YwYVc5dVJHbHpkR0Z1WTJVN0NnbDFibWxtYjNKdElIWmxZek1nWVhSMFpXNTFZWFJwYjI1RGIyeHZjanNLQ1NOcFptUmxaaUJWVTBWZlZGSkJUbE5OU1ZOVFNVOU9UVUZRQ2drSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ2RISmhibk50YVhOemFXOXVUV0Z3T3dvSkkyVnVaR2xtQ2dramFXWmtaV1lnVlZORlgxUklTVU5MVGtWVFUwMUJVQW9KQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUhSb2FXTnJibVZ6YzAxaGNEc0tDU05sYm1ScFpnb0pkVzVwWm05eWJTQjJaV015SUhSeVlXNXpiV2x6YzJsdmJsTmhiWEJzWlhKVGFYcGxPd29KZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnZEhKaGJuTnRhWE56YVc5dVUyRnRjR3hsY2sxaGNEc0tDWFZ1YVdadmNtMGdiV0YwTkNCdGIyUmxiRTFoZEhKcGVEc0tDWFZ1YVdadmNtMGdiV0YwTkNCd2NtOXFaV04wYVc5dVRXRjBjbWw0T3dvSmRtRnllV2x1WnlCMlpXTXpJSFpYYjNKc1pGQnZjMmwwYVc5dU93b0pabXh2WVhRZ2R6QW9JR1pzYjJGMElHRWdLU0I3Q2drSmNtVjBkWEp1SUNnZ01TNHdJQzhnTmk0d0lDa2dLaUFvSUdFZ0tpQW9JR0VnS2lBb0lDMGdZU0FySURNdU1DQXBJQzBnTXk0d0lDa2dLeUF4TGpBZ0tUc0tDWDBLQ1dac2IyRjBJSGN4S0NCbWJHOWhkQ0JoSUNrZ2V3b0pDWEpsZEhWeWJpQW9JREV1TUNBdklEWXVNQ0FwSUNvZ0tDQmhJQ29nSUdFZ0tpQW9JRE11TUNBcUlHRWdMU0EyTGpBZ0tTQXJJRFF1TUNBcE93b0pmUW9KWm14dllYUWdkeklvSUdac2IyRjBJR0VnS1hzS0NRbHlaWFIxY200Z0tDQXhMakFnTHlBMkxqQWdLU0FxSUNnZ1lTQXFJQ2dnWVNBcUlDZ2dMU0F6TGpBZ0tpQmhJQ3NnTXk0d0lDa2dLeUF6TGpBZ0tTQXJJREV1TUNBcE93b0pmUW9KWm14dllYUWdkek1vSUdac2IyRjBJR0VnS1NCN0Nna0pjbVYwZFhKdUlDZ2dNUzR3SUM4Z05pNHdJQ2tnS2lBb0lHRWdLaUJoSUNvZ1lTQXBPd29KZlFvSlpteHZZWFFnWnpBb0lHWnNiMkYwSUdFZ0tTQjdDZ2tKY21WMGRYSnVJSGN3S0NCaElDa2dLeUIzTVNnZ1lTQXBPd29KZlFvSlpteHZZWFFnWnpFb0lHWnNiMkYwSUdFZ0tTQjdDZ2tKY21WMGRYSnVJSGN5S0NCaElDa2dLeUIzTXlnZ1lTQXBPd29KZlFvSlpteHZZWFFnYURBb0lHWnNiMkYwSUdFZ0tTQjdDZ2tKY21WMGRYSnVJQzBnTVM0d0lDc2dkekVvSUdFZ0tTQXZJQ2dnZHpBb0lHRWdLU0FySUhjeEtDQmhJQ2tnS1RzS0NYMEtDV1pzYjJGMElHZ3hLQ0JtYkc5aGRDQmhJQ2tnZXdvSkNYSmxkSFZ5YmlBeExqQWdLeUIzTXlnZ1lTQXBJQzhnS0NCM01pZ2dZU0FwSUNzZ2R6TW9JR0VnS1NBcE93b0pmUW9KZG1Wak5DQmlhV04xWW1saktDQnpZVzF3YkdWeU1rUWdkR1Y0TENCMlpXTXlJSFYyTENCMlpXTTBJSFJsZUdWc1UybDZaU3dnWm14dllYUWdiRzlrSUNrZ2V3b0pDWFYySUQwZ2RYWWdLaUIwWlhobGJGTnBlbVV1ZW5jZ0t5QXdMalU3Q2drSmRtVmpNaUJwZFhZZ1BTQm1iRzl2Y2lnZ2RYWWdLVHNLQ1FsMlpXTXlJR1oxZGlBOUlHWnlZV04wS0NCMWRpQXBPd29KQ1dac2IyRjBJR2N3ZUNBOUlHY3dLQ0JtZFhZdWVDQXBPd29KQ1dac2IyRjBJR2N4ZUNBOUlHY3hLQ0JtZFhZdWVDQXBPd29KQ1dac2IyRjBJR2d3ZUNBOUlHZ3dLQ0JtZFhZdWVDQXBPd29KQ1dac2IyRjBJR2d4ZUNBOUlHZ3hLQ0JtZFhZdWVDQXBPd29KQ1dac2IyRjBJR2d3ZVNBOUlHZ3dLQ0JtZFhZdWVTQXBPd29KQ1dac2IyRjBJR2d4ZVNBOUlHZ3hLQ0JtZFhZdWVTQXBPd29KQ1habFl6SWdjREFnUFNBb0lIWmxZeklvSUdsMWRpNTRJQ3NnYURCNExDQnBkWFl1ZVNBcklHZ3dlU0FwSUMwZ01DNDFJQ2tnS2lCMFpYaGxiRk5wZW1VdWVIazdDZ2tKZG1Wak1pQndNU0E5SUNnZ2RtVmpNaWdnYVhWMkxuZ2dLeUJvTVhnc0lHbDFkaTU1SUNzZ2FEQjVJQ2tnTFNBd0xqVWdLU0FxSUhSbGVHVnNVMmw2WlM1NGVUc0tDUWwyWldNeUlIQXlJRDBnS0NCMlpXTXlLQ0JwZFhZdWVDQXJJR2d3ZUN3Z2FYVjJMbmtnS3lCb01Ya2dLU0F0SURBdU5TQXBJQ29nZEdWNFpXeFRhWHBsTG5oNU93b0pDWFpsWXpJZ2NETWdQU0FvSUhabFl6SW9JR2wxZGk1NElDc2dhREY0TENCcGRYWXVlU0FySUdneGVTQXBJQzBnTUM0MUlDa2dLaUIwWlhobGJGTnBlbVV1ZUhrN0Nna0pjbVYwZFhKdUlHY3dLQ0JtZFhZdWVTQXBJQ29nS0NCbk1IZ2dLaUIwWlhoMGRYSmxURzlrS0NCMFpYZ3NJSEF3TENCc2IyUWdLU0FySUdjeGVDQXFJSFJsZUhSMWNtVk1iMlFvSUhSbGVDd2djREVzSUd4dlpDQXBJQ2tnS3dvSkNRbG5NU2dnWm5WMkxua2dLU0FxSUNnZ1p6QjRJQ29nZEdWNGRIVnlaVXh2WkNnZ2RHVjRMQ0J3TWl3Z2JHOWtJQ2tnS3lCbk1YZ2dLaUIwWlhoMGRYSmxURzlrS0NCMFpYZ3NJSEF6TENCc2IyUWdLU0FwT3dvSmZRb0pkbVZqTkNCMFpYaDBkWEpsUW1samRXSnBZeWdnYzJGdGNHeGxjakpFSUhOaGJYQnNaWElzSUhabFl6SWdkWFlzSUdac2IyRjBJR3h2WkNBcElIc0tDUWwyWldNeUlHWk1iMlJUYVhwbElEMGdkbVZqTWlnZ2RHVjRkSFZ5WlZOcGVtVW9JSE5oYlhCc1pYSXNJR2x1ZENnZ2JHOWtJQ2tnS1NBcE93b0pDWFpsWXpJZ1kweHZaRk5wZW1VZ1BTQjJaV015S0NCMFpYaDBkWEpsVTJsNlpTZ2djMkZ0Y0d4bGNpd2dhVzUwS0NCc2IyUWdLeUF4TGpBZ0tTQXBJQ2s3Q2drSmRtVmpNaUJtVEc5a1UybDZaVWx1ZGlBOUlERXVNQ0F2SUdaTWIyUlRhWHBsT3dvSkNYWmxZeklnWTB4dlpGTnBlbVZKYm5ZZ1BTQXhMakFnTHlCalRHOWtVMmw2WlRzS0NRbDJaV00wSUdaVFlXMXdiR1VnUFNCaWFXTjFZbWxqS0NCellXMXdiR1Z5TENCMWRpd2dkbVZqTkNnZ1preHZaRk5wZW1WSmJuWXNJR1pNYjJSVGFYcGxJQ2tzSUdac2IyOXlLQ0JzYjJRZ0tTQXBPd29KQ1habFl6UWdZMU5oYlhCc1pTQTlJR0pwWTNWaWFXTW9JSE5oYlhCc1pYSXNJSFYyTENCMlpXTTBLQ0JqVEc5a1UybDZaVWx1ZGl3Z1kweHZaRk5wZW1VZ0tTd2dZMlZwYkNnZ2JHOWtJQ2tnS1RzS0NRbHlaWFIxY200Z2JXbDRLQ0JtVTJGdGNHeGxMQ0JqVTJGdGNHeGxMQ0JtY21GamRDZ2diRzlrSUNrZ0tUc0tDWDBLQ1habFl6TWdaMlYwVm05c2RXMWxWSEpoYm5OdGFYTnphVzl1VW1GNUtDQmpiMjV6ZENCcGJpQjJaV016SUc0c0lHTnZibk4wSUdsdUlIWmxZek1nZGl3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnZEdocFkydHVaWE56TENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JwYjNJc0lHTnZibk4wSUdsdUlHMWhkRFFnYlc5a1pXeE5ZWFJ5YVhnZ0tTQjdDZ2tKZG1Wak15QnlaV1p5WVdOMGFXOXVWbVZqZEc5eUlEMGdjbVZtY21GamRDZ2dMU0IyTENCdWIzSnRZV3hwZW1Vb0lHNGdLU3dnTVM0d0lDOGdhVzl5SUNrN0Nna0pkbVZqTXlCdGIyUmxiRk5qWVd4bE93b0pDVzF2WkdWc1UyTmhiR1V1ZUNBOUlHeGxibWQwYUNnZ2RtVmpNeWdnYlc5a1pXeE5ZWFJ5YVhoYklEQWdYUzU0ZVhvZ0tTQXBPd29KQ1cxdlpHVnNVMk5oYkdVdWVTQTlJR3hsYm1kMGFDZ2dkbVZqTXlnZ2JXOWtaV3hOWVhSeWFYaGJJREVnWFM1NGVYb2dLU0FwT3dvSkNXMXZaR1ZzVTJOaGJHVXVlaUE5SUd4bGJtZDBhQ2dnZG1Wak15Z2diVzlrWld4TllYUnlhWGhiSURJZ1hTNTRlWG9nS1NBcE93b0pDWEpsZEhWeWJpQnViM0p0WVd4cGVtVW9JSEpsWm5KaFkzUnBiMjVXWldOMGIzSWdLU0FxSUhSb2FXTnJibVZ6Y3lBcUlHMXZaR1ZzVTJOaGJHVTdDZ2w5Q2dsbWJHOWhkQ0JoY0hCc2VVbHZjbFJ2VW05MVoyaHVaWE56S0NCamIyNXpkQ0JwYmlCbWJHOWhkQ0J5YjNWbmFHNWxjM01zSUdOdmJuTjBJR2x1SUdac2IyRjBJR2x2Y2lBcElIc0tDUWx5WlhSMWNtNGdjbTkxWjJodVpYTnpJQ29nWTJ4aGJYQW9JR2x2Y2lBcUlESXVNQ0F0SURJdU1Dd2dNQzR3TENBeExqQWdLVHNLQ1gwS0NYWmxZelFnWjJWMFZISmhibk50YVhOemFXOXVVMkZ0Y0d4bEtDQmpiMjV6ZENCcGJpQjJaV015SUdaeVlXZERiMjl5WkN3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnY205MVoyaHVaWE56TENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JwYjNJZ0tTQjdDZ2tKWm14dllYUWdiRzlrSUQwZ2JHOW5NaWdnZEhKaGJuTnRhWE56YVc5dVUyRnRjR3hsY2xOcGVtVXVlQ0FwSUNvZ1lYQndiSGxKYjNKVWIxSnZkV2RvYm1WemN5Z2djbTkxWjJodVpYTnpMQ0JwYjNJZ0tUc0tDUWx5WlhSMWNtNGdkR1Y0ZEhWeVpVSnBZM1ZpYVdNb0lIUnlZVzV6YldsemMybHZibE5oYlhCc1pYSk5ZWEFzSUdaeVlXZERiMjl5WkM1NGVTd2diRzlrSUNrN0NnbDlDZ2wyWldNeklIWnZiSFZ0WlVGMGRHVnVkV0YwYVc5dUtDQmpiMjV6ZENCcGJpQm1iRzloZENCMGNtRnVjMjFwYzNOcGIyNUVhWE4wWVc1alpTd2dZMjl1YzNRZ2FXNGdkbVZqTXlCaGRIUmxiblZoZEdsdmJrTnZiRzl5TENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JoZEhSbGJuVmhkR2x2YmtScGMzUmhibU5sSUNrZ2V3b0pDV2xtSUNnZ2FYTnBibVlvSUdGMGRHVnVkV0YwYVc5dVJHbHpkR0Z1WTJVZ0tTQXBJSHNLQ1FrSmNtVjBkWEp1SUhabFl6TW9JREV1TUNBcE93b0pDWDBnWld4elpTQjdDZ2tKQ1habFl6TWdZWFIwWlc1MVlYUnBiMjVEYjJWbVptbGphV1Z1ZENBOUlDMXNiMmNvSUdGMGRHVnVkV0YwYVc5dVEyOXNiM0lnS1NBdklHRjBkR1Z1ZFdGMGFXOXVSR2x6ZEdGdVkyVTdDZ2tKQ1habFl6TWdkSEpoYm5OdGFYUjBZVzVqWlNBOUlHVjRjQ2dnTFNCaGRIUmxiblZoZEdsdmJrTnZaV1ptYVdOcFpXNTBJQ29nZEhKaGJuTnRhWE56YVc5dVJHbHpkR0Z1WTJVZ0tUc0pDUWx5WlhSMWNtNGdkSEpoYm5OdGFYUjBZVzVqWlRzS0NRbDlDZ2w5Q2dsMlpXTTBJR2RsZEVsQ1RGWnZiSFZ0WlZKbFpuSmhZM1JwYjI0b0lHTnZibk4wSUdsdUlIWmxZek1nYml3Z1kyOXVjM1FnYVc0Z2RtVmpNeUIyTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0J5YjNWbmFHNWxjM01zSUdOdmJuTjBJR2x1SUhabFl6TWdaR2xtWm5WelpVTnZiRzl5TEFvSkNXTnZibk4wSUdsdUlIWmxZek1nYzNCbFkzVnNZWEpEYjJ4dmNpd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ2MzQmxZM1ZzWVhKR09UQXNJR052Ym5OMElHbHVJSFpsWXpNZ2NHOXphWFJwYjI0c0lHTnZibk4wSUdsdUlHMWhkRFFnYlc5a1pXeE5ZWFJ5YVhnc0Nna0pZMjl1YzNRZ2FXNGdiV0YwTkNCMmFXVjNUV0YwY21sNExDQmpiMjV6ZENCcGJpQnRZWFEwSUhCeWIycE5ZWFJ5YVhnc0lHTnZibk4wSUdsdUlHWnNiMkYwSUdsdmNpd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ2RHaHBZMnR1WlhOekxBb0pDV052Ym5OMElHbHVJSFpsWXpNZ1lYUjBaVzUxWVhScGIyNURiMnh2Y2l3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnWVhSMFpXNTFZWFJwYjI1RWFYTjBZVzVqWlNBcElIc0tDUWwyWldNeklIUnlZVzV6YldsemMybHZibEpoZVNBOUlHZGxkRlp2YkhWdFpWUnlZVzV6YldsemMybHZibEpoZVNnZ2Jpd2dkaXdnZEdocFkydHVaWE56TENCcGIzSXNJRzF2WkdWc1RXRjBjbWw0SUNrN0Nna0pkbVZqTXlCeVpXWnlZV04wWldSU1lYbEZlR2wwSUQwZ2NHOXphWFJwYjI0Z0t5QjBjbUZ1YzIxcGMzTnBiMjVTWVhrN0Nna0pkbVZqTkNCdVpHTlFiM01nUFNCd2NtOXFUV0YwY21sNElDb2dkbWxsZDAxaGRISnBlQ0FxSUhabFl6UW9JSEpsWm5KaFkzUmxaRkpoZVVWNGFYUXNJREV1TUNBcE93b0pDWFpsWXpJZ2NtVm1jbUZqZEdsdmJrTnZiM0prY3lBOUlHNWtZMUJ2Y3k1NGVTQXZJRzVrWTFCdmN5NTNPd29KQ1hKbFpuSmhZM1JwYjI1RGIyOXlaSE1nS3owZ01TNHdPd29KQ1hKbFpuSmhZM1JwYjI1RGIyOXlaSE1nTHowZ01pNHdPd29KQ1habFl6UWdkSEpoYm5OdGFYUjBaV1JNYVdkb2RDQTlJR2RsZEZSeVlXNXpiV2x6YzJsdmJsTmhiWEJzWlNnZ2NtVm1jbUZqZEdsdmJrTnZiM0prY3l3Z2NtOTFaMmh1WlhOekxDQnBiM0lnS1RzS0NRbDJaV016SUhSeVlXNXpiV2wwZEdGdVkyVWdQU0JrYVdabWRYTmxRMjlzYjNJZ0tpQjJiMngxYldWQmRIUmxiblZoZEdsdmJpZ2diR1Z1WjNSb0tDQjBjbUZ1YzIxcGMzTnBiMjVTWVhrZ0tTd2dZWFIwWlc1MVlYUnBiMjVEYjJ4dmNpd2dZWFIwWlc1MVlYUnBiMjVFYVhOMFlXNWpaU0FwT3dvSkNYWmxZek1nWVhSMFpXNTFZWFJsWkVOdmJHOXlJRDBnZEhKaGJuTnRhWFIwWVc1alpTQXFJSFJ5WVc1emJXbDBkR1ZrVEdsbmFIUXVjbWRpT3dvSkNYWmxZek1nUmlBOUlFVnVkbWx5YjI1dFpXNTBRbEpFUmlnZ2Jpd2dkaXdnYzNCbFkzVnNZWEpEYjJ4dmNpd2djM0JsWTNWc1lYSkdPVEFzSUhKdmRXZG9ibVZ6Y3lBcE93b0pDV1pzYjJGMElIUnlZVzV6YldsMGRHRnVZMlZHWVdOMGIzSWdQU0FvSUhSeVlXNXpiV2wwZEdGdVkyVXVjaUFySUhSeVlXNXpiV2wwZEdGdVkyVXVaeUFySUhSeVlXNXpiV2wwZEdGdVkyVXVZaUFwSUM4Z015NHdPd29KQ1hKbGRIVnliaUIyWldNMEtDQW9JREV1TUNBdElFWWdLU0FxSUdGMGRHVnVkV0YwWldSRGIyeHZjaXdnTVM0d0lDMGdLQ0F4TGpBZ0xTQjBjbUZ1YzIxcGRIUmxaRXhwWjJoMExtRWdLU0FxSUhSeVlXNXpiV2wwZEdGdVkyVkdZV04wYjNJZ0tUc0tDWDBLSTJWdVpHbG1ZQ3dnWDJjZ1BTQmdJMmxtSUdSbFptbHVaV1FvSUZWVFJWOVZWaUFwSUh4OElHUmxabWx1WldRb0lGVlRSVjlCVGtsVFQxUlNUMUJaSUNrS0NYWmhjbmxwYm1jZ2RtVmpNaUIyVlhZN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgwMUJVQW9KZG1GeWVXbHVaeUIyWldNeUlIWk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFVeFFTRUZOUVZBS0NYWmhjbmxwYm1jZ2RtVmpNaUIyUVd4d2FHRk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlRFbEhTRlJOUVZBS0NYWmhjbmxwYm1jZ2RtVmpNaUIyVEdsbmFIUk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFVOU5RVkFLQ1haaGNubHBibWNnZG1Wak1pQjJRVzlOWVhCVmRqc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZRbFZOVUUxQlVBb0pkbUZ5ZVdsdVp5QjJaV015SUhaQ2RXMXdUV0Z3VlhZN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgwNVBVazFCVEUxQlVBb0pkbUZ5ZVdsdVp5QjJaV015SUhaT2IzSnRZV3hOWVhCVmRqc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZSVTFKVTFOSlZrVk5RVkFLQ1haaGNubHBibWNnZG1Wak1pQjJSVzFwYzNOcGRtVk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlRVVlVRVXhPUlZOVFRVRlFDZ2wyWVhKNWFXNW5JSFpsWXpJZ2RrMWxkR0ZzYm1WemMwMWhjRlYyT3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5U1QxVkhTRTVGVTFOTlFWQUtDWFpoY25scGJtY2dkbVZqTWlCMlVtOTFaMmh1WlhOelRXRndWWFk3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDBGT1NWTlBWRkpQVUZsTlFWQUtDWFpoY25scGJtY2dkbVZqTWlCMlFXNXBjMjkwY205d2VVMWhjRlYyT3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5RFRFVkJVa05QUVZSTlFWQUtDWFpoY25scGJtY2dkbVZqTWlCMlEyeGxZWEpqYjJGMFRXRndWWFk3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDBOTVJVRlNRMDlCVkY5T1QxSk5RVXhOUVZBS0NYWmhjbmxwYm1jZ2RtVmpNaUIyUTJ4bFlYSmpiMkYwVG05eWJXRnNUV0Z3VlhZN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgwTk1SVUZTUTA5QlZGOVNUMVZIU0U1RlUxTk5RVkFLQ1haaGNubHBibWNnZG1Wak1pQjJRMnhsWVhKamIyRjBVbTkxWjJodVpYTnpUV0Z3VlhZN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgwbFNTVVJGVTBORlRrTkZUVUZRQ2dsMllYSjVhVzVuSUhabFl6SWdka2x5YVdSbGMyTmxibU5sVFdGd1ZYWTdDaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYMGxTU1VSRlUwTkZUa05GWDFSSVNVTkxUa1ZUVTAxQlVBb0pkbUZ5ZVdsdVp5QjJaV015SUhaSmNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMwMWhjRlYyT3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5VFNFVkZUbDlEVDB4UFVrMUJVQW9KZG1GeWVXbHVaeUIyWldNeUlIWlRhR1ZsYmtOdmJHOXlUV0Z3VlhZN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgxTklSVVZPWDFKUFZVZElUa1ZUVTAxQlVBb0pkbUZ5ZVdsdVp5QjJaV015SUhaVGFHVmxibEp2ZFdkb2JtVnpjMDFoY0ZWMk93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVRVRVZEVlV4QlVrMUJVQW9KZG1GeWVXbHVaeUIyWldNeUlIWlRjR1ZqZFd4aGNrMWhjRlYyT3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5VFVFVkRWVXhCVWw5RFQweFBVazFCVUFvSmRtRnllV2x1WnlCMlpXTXlJSFpUY0dWamRXeGhja052Ykc5eVRXRndWWFk3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDFOUVJVTlZURUZTWDBsT1ZFVk9VMGxVV1UxQlVBb0pkbUZ5ZVdsdVp5QjJaV015SUhaVGNHVmpkV3hoY2tsdWRHVnVjMmwwZVUxaGNGVjJPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlVVWtGT1UwMUpVMU5KVDA1TlFWQUtDWFZ1YVdadmNtMGdiV0YwTXlCMGNtRnVjMjFwYzNOcGIyNU5ZWEJVY21GdWMyWnZjbTA3Q2dsMllYSjVhVzVuSUhabFl6SWdkbFJ5WVc1emJXbHpjMmx2YmsxaGNGVjJPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlVU0VsRFMwNUZVMU5OUVZBS0NYVnVhV1p2Y20wZ2JXRjBNeUIwYUdsamEyNWxjM05OWVhCVWNtRnVjMlp2Y20wN0NnbDJZWEo1YVc1bklIWmxZeklnZGxSb2FXTnJibVZ6YzAxaGNGVjJPd29qWlc1a2FXWmdMQ0I0WnlBOUlHQWphV1lnWkdWbWFXNWxaQ2dnVlZORlgxVldJQ2tnZkh3Z1pHVm1hVzVsWkNnZ1ZWTkZYMEZPU1ZOUFZGSlBVRmtnS1FvSmRtRnllV2x1WnlCMlpXTXlJSFpWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlRVRlFDZ2wxYm1sbWIzSnRJRzFoZERNZ2JXRndWSEpoYm5ObWIzSnRPd29KZG1GeWVXbHVaeUIyWldNeUlIWk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFVeFFTRUZOUVZBS0NYVnVhV1p2Y20wZ2JXRjBNeUJoYkhCb1lVMWhjRlJ5WVc1elptOXliVHNLQ1haaGNubHBibWNnZG1Wak1pQjJRV3h3YUdGTllYQlZkanNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmVEVsSFNGUk5RVkFLQ1hWdWFXWnZjbTBnYldGME15QnNhV2RvZEUxaGNGUnlZVzV6Wm05eWJUc0tDWFpoY25scGJtY2dkbVZqTWlCMlRHbG5hSFJOWVhCVmRqc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZRVTlOUVZBS0NYVnVhV1p2Y20wZ2JXRjBNeUJoYjAxaGNGUnlZVzV6Wm05eWJUc0tDWFpoY25scGJtY2dkbVZqTWlCMlFXOU5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFsVk5VRTFCVUFvSmRXNXBabTl5YlNCdFlYUXpJR0oxYlhCTllYQlVjbUZ1YzJadmNtMDdDZ2wyWVhKNWFXNW5JSFpsWXpJZ2RrSjFiWEJOWVhCVmRqc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZUazlTVFVGTVRVRlFDZ2wxYm1sbWIzSnRJRzFoZERNZ2JtOXliV0ZzVFdGd1ZISmhibk5tYjNKdE93b0pkbUZ5ZVdsdVp5QjJaV015SUhaT2IzSnRZV3hOWVhCVmRqc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZSRWxUVUV4QlEwVk5SVTVVVFVGUUNnbDFibWxtYjNKdElHMWhkRE1nWkdsemNHeGhZMlZ0Wlc1MFRXRndWSEpoYm5ObWIzSnRPd29KZG1GeWVXbHVaeUIyWldNeUlIWkVhWE53YkdGalpXMWxiblJOWVhCVmRqc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZSVTFKVTFOSlZrVk5RVkFLQ1hWdWFXWnZjbTBnYldGME15QmxiV2x6YzJsMlpVMWhjRlJ5WVc1elptOXliVHNLQ1haaGNubHBibWNnZG1Wak1pQjJSVzFwYzNOcGRtVk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlRVVlVRVXhPUlZOVFRVRlFDZ2wxYm1sbWIzSnRJRzFoZERNZ2JXVjBZV3h1WlhOelRXRndWSEpoYm5ObWIzSnRPd29KZG1GeWVXbHVaeUIyWldNeUlIWk5aWFJoYkc1bGMzTk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlVrOVZSMGhPUlZOVFRVRlFDZ2wxYm1sbWIzSnRJRzFoZERNZ2NtOTFaMmh1WlhOelRXRndWSEpoYm5ObWIzSnRPd29KZG1GeWVXbHVaeUIyWldNeUlIWlNiM1ZuYUc1bGMzTk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFVNUpVMDlVVWs5UVdVMUJVQW9KZFc1cFptOXliU0J0WVhReklHRnVhWE52ZEhKdmNIbE5ZWEJVY21GdWMyWnZjbTA3Q2dsMllYSjVhVzVuSUhabFl6SWdka0Z1YVhOdmRISnZjSGxOWVhCVmRqc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZRMHhGUVZKRFQwRlVUVUZRQ2dsMWJtbG1iM0p0SUcxaGRETWdZMnhsWVhKamIyRjBUV0Z3VkhKaGJuTm1iM0p0T3dvSmRtRnllV2x1WnlCMlpXTXlJSFpEYkdWaGNtTnZZWFJOWVhCVmRqc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZRMHhGUVZKRFQwRlVYMDVQVWsxQlRFMUJVQW9KZFc1cFptOXliU0J0WVhReklHTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNGUnlZVzV6Wm05eWJUc0tDWFpoY25scGJtY2dkbVZqTWlCMlEyeGxZWEpqYjJGMFRtOXliV0ZzVFdGd1ZYWTdDaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYME5NUlVGU1EwOUJWRjlTVDFWSFNFNUZVMU5OUVZBS0NYVnVhV1p2Y20wZ2JXRjBNeUJqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM05OWVhCVWNtRnVjMlp2Y20wN0NnbDJZWEo1YVc1bklIWmxZeklnZGtOc1pXRnlZMjloZEZKdmRXZG9ibVZ6YzAxaGNGVjJPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlUU0VWRlRsOURUMHhQVWsxQlVBb0pkVzVwWm05eWJTQnRZWFF6SUhOb1pXVnVRMjlzYjNKTllYQlVjbUZ1YzJadmNtMDdDZ2wyWVhKNWFXNW5JSFpsWXpJZ2RsTm9aV1Z1UTI5c2IzSk5ZWEJWZGpzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlUwaEZSVTVmVWs5VlIwaE9SVk5UVFVGUUNnbDFibWxtYjNKdElHMWhkRE1nYzJobFpXNVNiM1ZuYUc1bGMzTk5ZWEJVY21GdWMyWnZjbTA3Q2dsMllYSjVhVzVuSUhabFl6SWdkbE5vWldWdVVtOTFaMmh1WlhOelRXRndWWFk3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDBsU1NVUkZVME5GVGtORlRVRlFDZ2wxYm1sbWIzSnRJRzFoZERNZ2FYSnBaR1Z6WTJWdVkyVk5ZWEJVY21GdWMyWnZjbTA3Q2dsMllYSjVhVzVuSUhabFl6SWdka2x5YVdSbGMyTmxibU5sVFdGd1ZYWTdDaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYMGxTU1VSRlUwTkZUa05GWDFSSVNVTkxUa1ZUVTAxQlVBb0pkVzVwWm05eWJTQnRZWFF6SUdseWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOelRXRndWSEpoYm5ObWIzSnRPd29KZG1GeWVXbHVaeUIyWldNeUlIWkpjbWxrWlhOalpXNWpaVlJvYVdOcmJtVnpjMDFoY0ZWMk93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVRVRVZEVlV4QlVrMUJVQW9KZFc1cFptOXliU0J0WVhReklITndaV04xYkdGeVRXRndWSEpoYm5ObWIzSnRPd29KZG1GeWVXbHVaeUIyWldNeUlIWlRjR1ZqZFd4aGNrMWhjRlYyT3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5VFVFVkRWVXhCVWw5RFQweFBVazFCVUFvSmRXNXBabTl5YlNCdFlYUXpJSE53WldOMWJHRnlRMjlzYjNKTllYQlVjbUZ1YzJadmNtMDdDZ2wyWVhKNWFXNW5JSFpsWXpJZ2RsTndaV04xYkdGeVEyOXNiM0pOWVhCVmRqc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZVMUJGUTFWTVFWSmZTVTVVUlU1VFNWUlpUVUZRQ2dsMWJtbG1iM0p0SUcxaGRETWdjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEJVY21GdWMyWnZjbTA3Q2dsMllYSjVhVzVuSUhabFl6SWdkbE53WldOMWJHRnlTVzUwWlc1emFYUjVUV0Z3VlhZN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgxUlNRVTVUVFVsVFUwbFBUazFCVUFvSmRXNXBabTl5YlNCdFlYUXpJSFJ5WVc1emJXbHpjMmx2YmsxaGNGUnlZVzV6Wm05eWJUc0tDWFpoY25scGJtY2dkbVZqTWlCMlZISmhibk50YVhOemFXOXVUV0Z3VlhZN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgxUklTVU5MVGtWVFUwMUJVQW9KZFc1cFptOXliU0J0WVhReklIUm9hV05yYm1WemMwMWhjRlJ5WVc1elptOXliVHNLQ1haaGNubHBibWNnZG1Wak1pQjJWR2hwWTJ0dVpYTnpUV0Z3VlhZN0NpTmxibVJwWm1Bc0lIWm5JRDBnWUNOcFppQmtaV1pwYm1Wa0tDQlZVMFZmVlZZZ0tTQjhmQ0JrWldacGJtVmtLQ0JWVTBWZlFVNUpVMDlVVWs5UVdTQXBDZ2wyVlhZZ1BTQjJaV016S0NCMWRpd2dNU0FwTG5oNU93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOU5RVkFLQ1haTllYQlZkaUE5SUNnZ2JXRndWSEpoYm5ObWIzSnRJQ29nZG1Wak15Z2dUVUZRWDFWV0xDQXhJQ2tnS1M1NGVUc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZRVXhRU0VGTlFWQUtDWFpCYkhCb1lVMWhjRlYySUQwZ0tDQmhiSEJvWVUxaGNGUnlZVzV6Wm05eWJTQXFJSFpsWXpNb0lFRk1VRWhCVFVGUVgxVldMQ0F4SUNrZ0tTNTRlVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmVEVsSFNGUk5RVkFLQ1haTWFXZG9kRTFoY0ZWMklEMGdLQ0JzYVdkb2RFMWhjRlJ5WVc1elptOXliU0FxSUhabFl6TW9JRXhKUjBoVVRVRlFYMVZXTENBeElDa2dLUzU0ZVRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFVOU5RVkFLQ1haQmIwMWhjRlYySUQwZ0tDQmhiMDFoY0ZSeVlXNXpabTl5YlNBcUlIWmxZek1vSUVGUFRVRlFYMVZXTENBeElDa2dLUzU0ZVRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFsVk5VRTFCVUFvSmRrSjFiWEJOWVhCVmRpQTlJQ2dnWW5WdGNFMWhjRlJ5WVc1elptOXliU0FxSUhabFl6TW9JRUpWVFZCTlFWQmZWVllzSURFZ0tTQXBMbmg1T3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5T1QxSk5RVXhOUVZBS0NYWk9iM0p0WVd4TllYQlZkaUE5SUNnZ2JtOXliV0ZzVFdGd1ZISmhibk5tYjNKdElDb2dkbVZqTXlnZ1RrOVNUVUZNVFVGUVgxVldMQ0F4SUNrZ0tTNTRlVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUkVsVFVFeEJRMFZOUlU1VVRVRlFDZ2wyUkdsemNHeGhZMlZ0Wlc1MFRXRndWWFlnUFNBb0lHUnBjM0JzWVdObGJXVnVkRTFoY0ZSeVlXNXpabTl5YlNBcUlIWmxZek1vSUVSSlUxQk1RVU5GVFVWT1ZFMUJVRjlWVml3Z01TQXBJQ2t1ZUhrN0NpTmxibVJwWmdvamFXWmtaV1lnVlZORlgwVk5TVk5UU1ZaRlRVRlFDZ2wyUlcxcGMzTnBkbVZOWVhCVmRpQTlJQ2dnWlcxcGMzTnBkbVZOWVhCVWNtRnVjMlp2Y20wZ0tpQjJaV016S0NCRlRVbFRVMGxXUlUxQlVGOVZWaXdnTVNBcElDa3VlSGs3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDAxRlZFRk1Ua1ZUVTAxQlVBb0pkazFsZEdGc2JtVnpjMDFoY0ZWMklEMGdLQ0J0WlhSaGJHNWxjM05OWVhCVWNtRnVjMlp2Y20wZ0tpQjJaV016S0NCTlJWUkJURTVGVTFOTlFWQmZWVllzSURFZ0tTQXBMbmg1T3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5U1QxVkhTRTVGVTFOTlFWQUtDWFpTYjNWbmFHNWxjM05OWVhCVmRpQTlJQ2dnY205MVoyaHVaWE56VFdGd1ZISmhibk5tYjNKdElDb2dkbVZqTXlnZ1VrOVZSMGhPUlZOVFRVRlFYMVZXTENBeElDa2dLUzU0ZVRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFVNUpVMDlVVWs5UVdVMUJVQW9KZGtGdWFYTnZkSEp2Y0hsTllYQlZkaUE5SUNnZ1lXNXBjMjkwY205d2VVMWhjRlJ5WVc1elptOXliU0FxSUhabFl6TW9JRUZPU1ZOUFZGSlBVRmxOUVZCZlZWWXNJREVnS1NBcExuaDVPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlEVEVWQlVrTlBRVlJOUVZBS0NYWkRiR1ZoY21OdllYUk5ZWEJWZGlBOUlDZ2dZMnhsWVhKamIyRjBUV0Z3VkhKaGJuTm1iM0p0SUNvZ2RtVmpNeWdnUTB4RlFWSkRUMEZVVFVGUVgxVldMQ0F4SUNrZ0tTNTRlVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUTB4RlFWSkRUMEZVWDA1UFVrMUJURTFCVUFvSmRrTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNGVjJJRDBnS0NCamJHVmhjbU52WVhST2IzSnRZV3hOWVhCVWNtRnVjMlp2Y20wZ0tpQjJaV016S0NCRFRFVkJVa05QUVZSZlRrOVNUVUZNVFVGUVgxVldMQ0F4SUNrZ0tTNTRlVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUTB4RlFWSkRUMEZVWDFKUFZVZElUa1ZUVTAxQlVBb0pka05zWldGeVkyOWhkRkp2ZFdkb2JtVnpjMDFoY0ZWMklEMGdLQ0JqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM05OWVhCVWNtRnVjMlp2Y20wZ0tpQjJaV016S0NCRFRFVkJVa05QUVZSZlVrOVZSMGhPUlZOVFRVRlFYMVZXTENBeElDa2dLUzU0ZVRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlNWSkpSRVZUUTBWT1EwVk5RVkFLQ1haSmNtbGtaWE5qWlc1alpVMWhjRlYySUQwZ0tDQnBjbWxrWlhOalpXNWpaVTFoY0ZSeVlXNXpabTl5YlNBcUlIWmxZek1vSUVsU1NVUkZVME5GVGtORlRVRlFYMVZXTENBeElDa2dLUzU0ZVRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlNWSkpSRVZUUTBWT1EwVmZWRWhKUTB0T1JWTlRUVUZRQ2dsMlNYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTk5ZWEJWZGlBOUlDZ2dhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhCVWNtRnVjMlp2Y20wZ0tpQjJaV016S0NCSlVrbEVSVk5EUlU1RFJWOVVTRWxEUzA1RlUxTk5RVkJmVlZZc0lERWdLU0FwTG5oNU93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVRTRVZGVGw5RFQweFBVazFCVUFvSmRsTm9aV1Z1UTI5c2IzSk5ZWEJWZGlBOUlDZ2djMmhsWlc1RGIyeHZjazFoY0ZSeVlXNXpabTl5YlNBcUlIWmxZek1vSUZOSVJVVk9YME5QVEU5U1RVRlFYMVZXTENBeElDa2dLUzU0ZVRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlUwaEZSVTVmVWs5VlIwaE9SVk5UVFVGUUNnbDJVMmhsWlc1U2IzVm5hRzVsYzNOTllYQlZkaUE5SUNnZ2MyaGxaVzVTYjNWbmFHNWxjM05OWVhCVWNtRnVjMlp2Y20wZ0tpQjJaV016S0NCVFNFVkZUbDlTVDFWSFNFNUZVMU5OUVZCZlZWWXNJREVnS1NBcExuaDVPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlUVUVWRFZVeEJVazFCVUFvSmRsTndaV04xYkdGeVRXRndWWFlnUFNBb0lITndaV04xYkdGeVRXRndWSEpoYm5ObWIzSnRJQ29nZG1Wak15Z2dVMUJGUTFWTVFWSk5RVkJmVlZZc0lERWdLU0FwTG5oNU93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVRVRVZEVlV4QlVsOURUMHhQVWsxQlVBb0pkbE53WldOMWJHRnlRMjlzYjNKTllYQlZkaUE5SUNnZ2MzQmxZM1ZzWVhKRGIyeHZjazFoY0ZSeVlXNXpabTl5YlNBcUlIWmxZek1vSUZOUVJVTlZURUZTWDBOUFRFOVNUVUZRWDFWV0xDQXhJQ2tnS1M1NGVUc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZVMUJGUTFWTVFWSmZTVTVVUlU1VFNWUlpUVUZRQ2dsMlUzQmxZM1ZzWVhKSmJuUmxibk5wZEhsTllYQlZkaUE5SUNnZ2MzQmxZM1ZzWVhKSmJuUmxibk5wZEhsTllYQlVjbUZ1YzJadmNtMGdLaUIyWldNektDQlRVRVZEVlV4QlVsOUpUbFJGVGxOSlZGbE5RVkJmVlZZc0lERWdLU0FwTG5oNU93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVVVa0ZPVTAxSlUxTkpUMDVOUVZBS0NYWlVjbUZ1YzIxcGMzTnBiMjVOWVhCVmRpQTlJQ2dnZEhKaGJuTnRhWE56YVc5dVRXRndWSEpoYm5ObWIzSnRJQ29nZG1Wak15Z2dWRkpCVGxOTlNWTlRTVTlPVFVGUVgxVldMQ0F4SUNrZ0tTNTRlVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmVkVoSlEwdE9SVk5UVFVGUUNnbDJWR2hwWTJ0dVpYTnpUV0Z3VlhZZ1BTQW9JSFJvYVdOcmJtVnpjMDFoY0ZSeVlXNXpabTl5YlNBcUlIWmxZek1vSUZSSVNVTkxUa1ZUVTAxQlVGOVZWaXdnTVNBcElDa3VlSGs3Q2lObGJtUnBabUFzSUhsbklEMGdZQ05wWmlCa1pXWnBibVZrS0NCVlUwVmZSVTVXVFVGUUlDa2dmSHdnWkdWbWFXNWxaQ2dnUkVsVFZFRk9RMFVnS1NCOGZDQmtaV1pwYm1Wa0lDZ2dWVk5GWDFOSVFVUlBWMDFCVUNBcElIeDhJR1JsWm1sdVpXUWdLQ0JWVTBWZlZGSkJUbE5OU1ZOVFNVOU9JQ2tnZkh3Z1RsVk5YMU5RVDFSZlRFbEhTRlJmUTA5UFVrUlRJRDRnTUFvSmRtVmpOQ0IzYjNKc1pGQnZjMmwwYVc5dUlEMGdkbVZqTkNnZ2RISmhibk5tYjNKdFpXUXNJREV1TUNBcE93b0pJMmxtWkdWbUlGVlRSVjlKVGxOVVFVNURTVTVIQ2drSmQyOXliR1JRYjNOcGRHbHZiaUE5SUdsdWMzUmhibU5sVFdGMGNtbDRJQ29nZDI5eWJHUlFiM05wZEdsdmJqc0tDU05sYm1ScFpnb0pkMjl5YkdSUWIzTnBkR2x2YmlBOUlHMXZaR1ZzVFdGMGNtbDRJQ29nZDI5eWJHUlFiM05wZEdsdmJqc0tJMlZ1WkdsbVlDd2dUV2NnUFNCZ2RtRnllV2x1WnlCMlpXTXlJSFpWZGpzS2RXNXBabTl5YlNCdFlYUXpJSFYyVkhKaGJuTm1iM0p0T3dwMmIybGtJRzFoYVc0b0tTQjdDZ2wyVlhZZ1BTQW9JSFYyVkhKaGJuTm1iM0p0SUNvZ2RtVmpNeWdnZFhZc0lERWdLU0FwTG5oNU93b0paMnhmVUc5emFYUnBiMjRnUFNCMlpXTTBLQ0J3YjNOcGRHbHZiaTU0ZVN3Z01TNHdMQ0F4TGpBZ0tUc0tmV0FzSUZObklEMGdZSFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJSFF5UkRzS2RXNXBabTl5YlNCbWJHOWhkQ0JpWVdOclozSnZkVzVrU1c1MFpXNXphWFI1T3dwMllYSjVhVzVuSUhabFl6SWdkbFYyT3dwMmIybGtJRzFoYVc0b0tTQjdDZ2wyWldNMElIUmxlRU52Ykc5eUlEMGdkR1Y0ZEhWeVpUSkVLQ0IwTWtRc0lIWlZkaUFwT3dvSkkybG1aR1ZtSUVSRlEwOUVSVjlXU1VSRlQxOVVSVmhVVlZKRkNna0pkR1Y0UTI5c2IzSWdQU0IyWldNMEtDQnRhWGdvSUhCdmR5Z2dkR1Y0UTI5c2IzSXVjbWRpSUNvZ01DNDVORGM0TmpjeU9UZzJJQ3NnZG1Wak15Z2dNQzR3TlRJeE16STNNREUwSUNrc0lIWmxZek1vSURJdU5DQXBJQ2tzSUhSbGVFTnZiRzl5TG5KbllpQXFJREF1TURjM016azVNemd3T0N3Z2RtVmpNeWdnYkdWemMxUm9ZVzVGY1hWaGJDZ2dkR1Y0UTI5c2IzSXVjbWRpTENCMlpXTXpLQ0F3TGpBME1EUTFJQ2tnS1NBcElDa3NJSFJsZUVOdmJHOXlMbmNnS1RzS0NTTmxibVJwWmdvSmRHVjRRMjlzYjNJdWNtZGlJQ285SUdKaFkydG5jbTkxYm1SSmJuUmxibk5wZEhrN0NnbG5iRjlHY21GblEyOXNiM0lnUFNCMFpYaERiMnh2Y2pzS0NTTnBibU5zZFdSbElEeDBiMjVsYldGd2NHbHVaMTltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4amIyeHZjbk53WVdObFgyWnlZV2R0Wlc1MFBncDlZQ3dnWW1jZ1BTQmdkbUZ5ZVdsdVp5QjJaV016SUhaWGIzSnNaRVJwY21WamRHbHZianNLSTJsdVkyeDFaR1VnUEdOdmJXMXZiajRLZG05cFpDQnRZV2x1S0NrZ2V3b0pkbGR2Y214a1JHbHlaV04wYVc5dUlEMGdkSEpoYm5ObWIzSnRSR2x5WldOMGFXOXVLQ0J3YjNOcGRHbHZiaXdnYlc5a1pXeE5ZWFJ5YVhnZ0tUc0tDU05wYm1Oc2RXUmxJRHhpWldkcGJsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjSEp2YW1WamRGOTJaWEowWlhnK0NnbG5iRjlRYjNOcGRHbHZiaTU2SUQwZ1oyeGZVRzl6YVhScGIyNHVkenNLZldBc0lFVm5JRDBnWUNOcFptUmxaaUJGVGxaTlFWQmZWRmxRUlY5RFZVSkZDZ2wxYm1sbWIzSnRJSE5oYlhCc1pYSkRkV0psSUdWdWRrMWhjRHNLSTJWc2FXWWdaR1ZtYVc1bFpDZ2dSVTVXVFVGUVgxUlpVRVZmUTFWQ1JWOVZWaUFwQ2dsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCbGJuWk5ZWEE3Q2lObGJtUnBaZ3AxYm1sbWIzSnRJR1pzYjJGMElHWnNhWEJGYm5aTllYQTdDblZ1YVdadmNtMGdabXh2WVhRZ1ltRmphMmR5YjNWdVpFSnNkWEp5YVc1bGMzTTdDblZ1YVdadmNtMGdabXh2WVhRZ1ltRmphMmR5YjNWdVpFbHVkR1Z1YzJsMGVUc0tkbUZ5ZVdsdVp5QjJaV016SUhaWGIzSnNaRVJwY21WamRHbHZianNLSTJsdVkyeDFaR1VnUEdOMVltVmZkWFpmY21WbWJHVmpkR2x2Ymw5bWNtRm5iV1Z1ZEQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsbVpHVm1JRVZPVmsxQlVGOVVXVkJGWDBOVlFrVUtDUWwyWldNMElIUmxlRU52Ykc5eUlEMGdkR1Y0ZEhWeVpVTjFZbVVvSUdWdWRrMWhjQ3dnZG1Wak15Z2dabXhwY0VWdWRrMWhjQ0FxSUhaWGIzSnNaRVJwY21WamRHbHZiaTU0TENCMlYyOXliR1JFYVhKbFkzUnBiMjR1ZVhvZ0tTQXBPd29KSTJWc2FXWWdaR1ZtYVc1bFpDZ2dSVTVXVFVGUVgxUlpVRVZmUTFWQ1JWOVZWaUFwQ2drSmRtVmpOQ0IwWlhoRGIyeHZjaUE5SUhSbGVIUjFjbVZEZFdKbFZWWW9JR1Z1ZGsxaGNDd2dkbGR2Y214a1JHbHlaV04wYVc5dUxDQmlZV05yWjNKdmRXNWtRbXgxY25KcGJtVnpjeUFwT3dvSkkyVnNjMlVLQ1FsMlpXTTBJSFJsZUVOdmJHOXlJRDBnZG1Wak5DZ2dNQzR3TENBd0xqQXNJREF1TUN3Z01TNHdJQ2s3Q2dralpXNWthV1lLQ1hSbGVFTnZiRzl5TG5KbllpQXFQU0JpWVdOclozSnZkVzVrU1c1MFpXNXphWFI1T3dvSloyeGZSbkpoWjBOdmJHOXlJRDBnZEdWNFEyOXNiM0k3Q2dramFXNWpiSFZrWlNBOGRHOXVaVzFoY0hCcGJtZGZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WTI5c2IzSnpjR0ZqWlY5bWNtRm5iV1Z1ZEQ0S2ZXQXNJRlJuSUQwZ1lIWmhjbmxwYm1jZ2RtVmpNeUIyVjI5eWJHUkVhWEpsWTNScGIyNDdDaU5wYm1Oc2RXUmxJRHhqYjIxdGIyNCtDblp2YVdRZ2JXRnBiaWdwSUhzS0NYWlhiM0pzWkVScGNtVmpkR2x2YmlBOUlIUnlZVzV6Wm05eWJVUnBjbVZqZEdsdmJpZ2djRzl6YVhScGIyNHNJRzF2WkdWc1RXRjBjbWw0SUNrN0Nna2phVzVqYkhWa1pTQThZbVZuYVc1ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BIQnliMnBsWTNSZmRtVnlkR1Y0UGdvSloyeGZVRzl6YVhScGIyNHVlaUE5SUdkc1gxQnZjMmwwYVc5dUxuYzdDbjFnTENCM1p5QTlJR0IxYm1sbWIzSnRJSE5oYlhCc1pYSkRkV0psSUhSRGRXSmxPd3AxYm1sbWIzSnRJR1pzYjJGMElIUkdiR2x3T3dwMWJtbG1iM0p0SUdac2IyRjBJRzl3WVdOcGRIazdDblpoY25scGJtY2dkbVZqTXlCMlYyOXliR1JFYVhKbFkzUnBiMjQ3Q25admFXUWdiV0ZwYmlncElIc0tDWFpsWXpRZ2RHVjRRMjlzYjNJZ1BTQjBaWGgwZFhKbFEzVmlaU2dnZEVOMVltVXNJSFpsWXpNb0lIUkdiR2x3SUNvZ2RsZHZjbXhrUkdseVpXTjBhVzl1TG5nc0lIWlhiM0pzWkVScGNtVmpkR2x2Ymk1NWVpQXBJQ2s3Q2dsbmJGOUdjbUZuUTI5c2IzSWdQU0IwWlhoRGIyeHZjanNLQ1dkc1gwWnlZV2REYjJ4dmNpNWhJQ285SUc5d1lXTnBkSGs3Q2dramFXNWpiSFZrWlNBOGRHOXVaVzFoY0hCcGJtZGZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WTI5c2IzSnpjR0ZqWlY5bWNtRm5iV1Z1ZEQ0S2ZXQXNJRUZuSUQwZ1lDTnBibU5zZFdSbElEeGpiMjF0YjI0K0NpTnBibU5zZFdSbElEeDFkbDl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHUnBjM0JzWVdObGJXVnVkRzFoY0Y5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQRzF2Y25Cb2RHRnlaMlYwWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThjMnRwYm01cGJtZGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTl3WVhKelgzWmxjblJsZUQ0S2RtRnllV2x1WnlCMlpXTXlJSFpJYVdkb1VISmxZMmx6YVc5dVdsYzdDblp2YVdRZ2JXRnBiaWdwSUhzS0NTTnBibU5zZFdSbElEeDFkbDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4YzJ0cGJtSmhjMlZmZG1WeWRHVjRQZ29KSTJsbVpHVm1JRlZUUlY5RVNWTlFURUZEUlUxRlRsUk5RVkFLQ1FramFXNWpiSFZrWlNBOFltVm5hVzV1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pDU05wYm1Oc2RXUmxJRHh0YjNKd2FHNXZjbTFoYkY5MlpYSjBaWGcrQ2drSkkybHVZMngxWkdVZ1BITnJhVzV1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pJMlZ1WkdsbUNna2phVzVqYkhWa1pTQThZbVZuYVc1ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHMXZjbkJvZEdGeVoyVjBYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh6YTJsdWJtbHVaMTkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WkdsemNHeGhZMlZ0Wlc1MGJXRndYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh3Y205cVpXTjBYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNabGNuUmxlRDRLQ1haSWFXZG9VSEpsWTJsemFXOXVXbGNnUFNCbmJGOVFiM05wZEdsdmJpNTZkenNLZldBc0lGSm5JRDBnWUNOcFppQkVSVkJVU0Y5UVFVTkxTVTVISUQwOUlETXlNREFLQ1hWdWFXWnZjbTBnWm14dllYUWdiM0JoWTJsMGVUc0tJMlZ1WkdsbUNpTnBibU5zZFdSbElEeGpiMjF0YjI0K0NpTnBibU5zZFdSbElEeHdZV05yYVc1blBnb2phVzVqYkhWa1pTQThkWFpmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQRzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WVd4d2FHRnRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0ZzY0doaGRHVnpkRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZV3h3YUdGb1lYTm9YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mWm5KaFoyMWxiblErQ25aaGNubHBibWNnZG1Wak1pQjJTR2xuYUZCeVpXTnBjMmx2YmxwWE93cDJiMmxrSUcxaGFXNG9LU0I3Q2dramFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDJaeVlXZHRaVzUwUGdvSmRtVmpOQ0JrYVdabWRYTmxRMjlzYjNJZ1BTQjJaV00wS0NBeExqQWdLVHNLQ1NOcFppQkVSVkJVU0Y5UVFVTkxTVTVISUQwOUlETXlNREFLQ1Fsa2FXWm1kWE5sUTI5c2IzSXVZU0E5SUc5d1lXTnBkSGs3Q2dralpXNWthV1lLQ1NOcGJtTnNkV1JsSUR4dFlYQmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WVd4d2FHRnRZWEJmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFlXeHdhR0YwWlhOMFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR0ZzY0doaGFHRnphRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOW1jbUZuYldWdWRENEtDV1pzYjJGMElHWnlZV2REYjI5eVpGb2dQU0F3TGpVZ0tpQjJTR2xuYUZCeVpXTnBjMmx2YmxwWFd6QmRJQzhnZGtocFoyaFFjbVZqYVhOcGIyNWFWMXN4WFNBcklEQXVOVHNLQ1NOcFppQkVSVkJVU0Y5UVFVTkxTVTVISUQwOUlETXlNREFLQ1FsbmJGOUdjbUZuUTI5c2IzSWdQU0IyWldNMEtDQjJaV016S0NBeExqQWdMU0JtY21GblEyOXZjbVJhSUNrc0lHOXdZV05wZEhrZ0tUc0tDU05sYkdsbUlFUkZVRlJJWDFCQlEwdEpUa2NnUFQwZ016SXdNUW9KQ1dkc1gwWnlZV2REYjJ4dmNpQTlJSEJoWTJ0RVpYQjBhRlJ2VWtkQ1FTZ2dabkpoWjBOdmIzSmtXaUFwT3dvSkkyVnVaR2xtQ24xZ0xDQkRaeUE5SUdBalpHVm1hVzVsSUVSSlUxUkJUa05GQ25aaGNubHBibWNnZG1Wak15QjJWMjl5YkdSUWIzTnBkR2x2YmpzS0kybHVZMngxWkdVZ1BHTnZiVzF2Ymo0S0kybHVZMngxWkdVZ1BIVjJYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOFpHbHpjR3hoWTJWdFpXNTBiV0Z3WDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThiVzl5Y0doMFlYSm5aWFJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHphMmx1Ym1sdVoxOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTl3WVhKelgzWmxjblJsZUQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEhWMlgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphMmx1WW1GelpWOTJaWEowWlhnK0Nna2phV1prWldZZ1ZWTkZYMFJKVTFCTVFVTkZUVVZPVkUxQlVBb0pDU05wYm1Oc2RXUmxJRHhpWldkcGJtNXZjbTFoYkY5MlpYSjBaWGcrQ2drSkkybHVZMngxWkdVZ1BHMXZjbkJvYm05eWJXRnNYM1psY25SbGVENEtDUWtqYVc1amJIVmtaU0E4YzJ0cGJtNXZjbTFoYkY5MlpYSjBaWGcrQ2dralpXNWthV1lLQ1NOcGJtTnNkV1JsSUR4aVpXZHBibDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ylc5eWNHaDBZWEpuWlhSZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BITnJhVzV1YVc1blgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGthWE53YkdGalpXMWxiblJ0WVhCZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BIQnliMnBsWTNSZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BIZHZjbXhrY0c5elgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmRtVnlkR1Y0UGdvSmRsZHZjbXhrVUc5emFYUnBiMjRnUFNCM2IzSnNaRkJ2YzJsMGFXOXVMbmg1ZWpzS2ZXQXNJRkJuSUQwZ1lDTmtaV1pwYm1VZ1JFbFRWRUZPUTBVS2RXNXBabTl5YlNCMlpXTXpJSEpsWm1WeVpXNWpaVkJ2YzJsMGFXOXVPd3AxYm1sbWIzSnRJR1pzYjJGMElHNWxZWEpFYVhOMFlXNWpaVHNLZFc1cFptOXliU0JtYkc5aGRDQm1ZWEpFYVhOMFlXNWpaVHNLZG1GeWVXbHVaeUIyWldNeklIWlhiM0pzWkZCdmMybDBhVzl1T3dvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGNHRmphMmx1Wno0S0kybHVZMngxWkdVZ1BIVjJYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0ZzY0doaGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiSEJvWVhSbGMzUmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnNjR2hoYUdGemFGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNCaGNuTmZabkpoWjIxbGJuUStDblp2YVdRZ2JXRnBiaUFvS1NCN0Nna2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgyWnlZV2R0Wlc1MFBnb0pkbVZqTkNCa2FXWm1kWE5sUTI5c2IzSWdQU0IyWldNMEtDQXhMakFnS1RzS0NTTnBibU5zZFdSbElEeHRZWEJmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFlXeHdhR0Z0WVhCZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThZV3h3YUdGMFpYTjBYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdGc2NHaGhhR0Z6YUY5bWNtRm5iV1Z1ZEQ0S0NXWnNiMkYwSUdScGMzUWdQU0JzWlc1bmRHZ29JSFpYYjNKc1pGQnZjMmwwYVc5dUlDMGdjbVZtWlhKbGJtTmxVRzl6YVhScGIyNGdLVHNLQ1dScGMzUWdQU0FvSUdScGMzUWdMU0J1WldGeVJHbHpkR0Z1WTJVZ0tTQXZJQ2dnWm1GeVJHbHpkR0Z1WTJVZ0xTQnVaV0Z5UkdsemRHRnVZMlVnS1RzS0NXUnBjM1FnUFNCellYUjFjbUYwWlNnZ1pHbHpkQ0FwT3dvSloyeGZSbkpoWjBOdmJHOXlJRDBnY0dGamEwUmxjSFJvVkc5U1IwSkJLQ0JrYVhOMElDazdDbjFnTENCTVp5QTlJR0IyWVhKNWFXNW5JSFpsWXpNZ2RsZHZjbXhrUkdseVpXTjBhVzl1T3dvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdwMmIybGtJRzFoYVc0b0tTQjdDZ2wyVjI5eWJHUkVhWEpsWTNScGIyNGdQU0IwY21GdWMyWnZjbTFFYVhKbFkzUnBiMjRvSUhCdmMybDBhVzl1TENCdGIyUmxiRTFoZEhKcGVDQXBPd29KSTJsdVkyeDFaR1VnUEdKbFoybHVYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh3Y205cVpXTjBYM1psY25SbGVENEtmV0FzSUVsbklEMGdZSFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJSFJGY1hWcGNtVmpkRHNLZG1GeWVXbHVaeUIyWldNeklIWlhiM0pzWkVScGNtVmpkR2x2YmpzS0kybHVZMngxWkdVZ1BHTnZiVzF2Ymo0S2RtOXBaQ0J0WVdsdUtDa2dld29KZG1Wak15QmthWEpsWTNScGIyNGdQU0J1YjNKdFlXeHBlbVVvSUhaWGIzSnNaRVJwY21WamRHbHZiaUFwT3dvSmRtVmpNaUJ6WVcxd2JHVlZWaUE5SUdWeGRXbHlaV04wVlhZb0lHUnBjbVZqZEdsdmJpQXBPd29KWjJ4ZlJuSmhaME52Ykc5eUlEMGdkR1Y0ZEhWeVpUSkVLQ0IwUlhGMWFYSmxZM1FzSUhOaGJYQnNaVlZXSUNrN0Nna2phVzVqYkhWa1pTQThkRzl1WlcxaGNIQnBibWRmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFkyOXNiM0p6Y0dGalpWOW1jbUZuYldWdWRENEtmV0FzSUZWbklEMGdZSFZ1YVdadmNtMGdabXh2WVhRZ2MyTmhiR1U3Q21GMGRISnBZblYwWlNCbWJHOWhkQ0JzYVc1bFJHbHpkR0Z1WTJVN0NuWmhjbmxwYm1jZ1pteHZZWFFnZGt4cGJtVkVhWE4wWVc1alpUc0tJMmx1WTJ4MVpHVWdQR052YlcxdmJqNEtJMmx1WTJ4MVpHVWdQSFYyWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThZMjlzYjNKZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhtYjJkZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHh0YjNKd2FIUmhjbWRsZEY5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mZG1WeWRHVjRQZ3AyYjJsa0lHMWhhVzRvS1NCN0NnbDJUR2x1WlVScGMzUmhibU5sSUQwZ2MyTmhiR1VnS2lCc2FXNWxSR2x6ZEdGdVkyVTdDZ2tqYVc1amJIVmtaU0E4ZFhaZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHTnZiRzl5WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4dGIzSndhR052Ykc5eVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGlaV2RwYmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2gwWVhKblpYUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSEJ5YjJwbFkzUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdadloxOTJaWEowWlhnK0NuMWdMQ0JFWnlBOUlHQjFibWxtYjNKdElIWmxZek1nWkdsbVpuVnpaVHNLZFc1cFptOXliU0JtYkc5aGRDQnZjR0ZqYVhSNU93cDFibWxtYjNKdElHWnNiMkYwSUdSaGMyaFRhWHBsT3dwMWJtbG1iM0p0SUdac2IyRjBJSFJ2ZEdGc1UybDZaVHNLZG1GeWVXbHVaeUJtYkc5aGRDQjJUR2x1WlVScGMzUmhibU5sT3dvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOFkyOXNiM0pmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQSFYyWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHh0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdadloxOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHTnNhWEJ3YVc1blgzQnNZVzVsYzE5d1lYSnpYMlp5WVdkdFpXNTBQZ3AyYjJsa0lHMWhhVzRvS1NCN0Nna2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgyWnlZV2R0Wlc1MFBnb0phV1lnS0NCdGIyUW9JSFpNYVc1bFJHbHpkR0Z1WTJVc0lIUnZkR0ZzVTJsNlpTQXBJRDRnWkdGemFGTnBlbVVnS1NCN0Nna0paR2x6WTJGeVpEc0tDWDBLQ1habFl6TWdiM1YwWjI5cGJtZE1hV2RvZENBOUlIWmxZek1vSURBdU1DQXBPd29KZG1Wak5DQmthV1ptZFhObFEyOXNiM0lnUFNCMlpXTTBLQ0JrYVdabWRYTmxMQ0J2Y0dGamFYUjVJQ2s3Q2dramFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4YldGd1gyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR052Ykc5eVgyWnlZV2R0Wlc1MFBnb0piM1YwWjI5cGJtZE1hV2RvZENBOUlHUnBabVoxYzJWRGIyeHZjaTV5WjJJN0Nna2phVzVqYkhWa1pTQThiM0JoY1hWbFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQSFJ2Ym1WdFlYQndhVzVuWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHTnZiRzl5YzNCaFkyVmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4Wm05blgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQSEJ5WlcxMWJIUnBjR3hwWldSZllXeHdhR0ZmWm5KaFoyMWxiblErQ24xZ0xDQk9aeUE5SUdBamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4bGJuWnRZWEJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGpiMnh2Y2w5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR1p2WjE5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQRzF2Y25Cb2RHRnlaMlYwWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThjMnRwYm01cGJtZGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTl3WVhKelgzWmxjblJsZUQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEhWMlgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y2w5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2hqYjJ4dmNsOTJaWEowWlhnK0Nna2phV1lnWkdWbWFXNWxaQ0FvSUZWVFJWOUZUbFpOUVZBZ0tTQjhmQ0JrWldacGJtVmtJQ2dnVlZORlgxTkxTVTVPU1U1SElDa0tDUWtqYVc1amJIVmtaU0E4WW1WbmFXNXViM0p0WVd4ZmRtVnlkR1Y0UGdvSkNTTnBibU5zZFdSbElEeHRiM0p3YUc1dmNtMWhiRjkyWlhKMFpYZytDZ2tKSTJsdVkyeDFaR1VnUEhOcmFXNWlZWE5sWDNabGNuUmxlRDRLQ1FramFXNWpiSFZrWlNBOGMydHBibTV2Y20xaGJGOTJaWEowWlhnK0Nna0pJMmx1WTJ4MVpHVWdQR1JsWm1GMWJIUnViM0p0WVd4ZmRtVnlkR1Y0UGdvSkkyVnVaR2xtQ2dramFXNWpiSFZrWlNBOFltVm5hVzVmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEcxdmNuQm9kR0Z5WjJWMFgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphMmx1Ym1sdVoxOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjSEp2YW1WamRGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiRzluWkdWd2RHaGlkV1pmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4ZDI5eWJHUndiM05mZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdWdWRtMWhjRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Wm05blgzWmxjblJsZUQ0S2ZXQXNJRTluSUQwZ1lIVnVhV1p2Y20wZ2RtVmpNeUJrYVdabWRYTmxPd3AxYm1sbWIzSnRJR1pzYjJGMElHOXdZV05wZEhrN0NpTnBabTVrWldZZ1JreEJWRjlUU0VGRVJVUUtDWFpoY25scGJtY2dkbVZqTXlCMlRtOXliV0ZzT3dvalpXNWthV1lLSTJsdVkyeDFaR1VnUEdOdmJXMXZiajRLSTJsdVkyeDFaR1VnUEdScGRHaGxjbWx1WjE5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WTI5c2IzSmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BIVjJYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0ZzY0doaGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiSEJvWVhSbGMzUmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnNjR2hoYUdGemFGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFlXOXRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR3hwWjJoMGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGxiblp0WVhCZlkyOXRiVzl1WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhsYm5adFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHWnZaMTl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThjM0JsWTNWc1lYSnRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTltY21GbmJXVnVkRDRLQ1habFl6UWdaR2xtWm5WelpVTnZiRzl5SUQwZ2RtVmpOQ2dnWkdsbVpuVnpaU3dnYjNCaFkybDBlU0FwT3dvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhqYjJ4dmNsOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lXMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZWFJsYzNSZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThZV3h3YUdGb1lYTm9YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEhOd1pXTjFiR0Z5YldGd1gyWnlZV2R0Wlc1MFBnb0pVbVZtYkdWamRHVmtUR2xuYUhRZ2NtVm1iR1ZqZEdWa1RHbG5hSFFnUFNCU1pXWnNaV04wWldSTWFXZG9kQ2dnZG1Wak15Z2dNQzR3SUNrc0lIWmxZek1vSURBdU1DQXBMQ0IyWldNektDQXdMakFnS1N3Z2RtVmpNeWdnTUM0d0lDa2dLVHNLQ1NOcFptUmxaaUJWVTBWZlRFbEhTRlJOUVZBS0NRbDJaV00wSUd4cFoyaDBUV0Z3VkdWNFpXd2dQU0IwWlhoMGRYSmxNa1FvSUd4cFoyaDBUV0Z3TENCMlRHbG5hSFJOWVhCVmRpQXBPd29KQ1hKbFpteGxZM1JsWkV4cFoyaDBMbWx1WkdseVpXTjBSR2xtWm5WelpTQXJQU0JzYVdkb2RFMWhjRlJsZUdWc0xuSm5ZaUFxSUd4cFoyaDBUV0Z3U1c1MFpXNXphWFI1SUNvZ1VrVkRTVkJTVDBOQlRGOVFTVHNLQ1NObGJITmxDZ2tKY21WbWJHVmpkR1ZrVEdsbmFIUXVhVzVrYVhKbFkzUkVhV1ptZFhObElDczlJSFpsWXpNb0lERXVNQ0FwT3dvSkkyVnVaR2xtQ2dramFXNWpiSFZrWlNBOFlXOXRZWEJmWm5KaFoyMWxiblErQ2dseVpXWnNaV04wWldSTWFXZG9kQzVwYm1ScGNtVmpkRVJwWm1aMWMyVWdLajBnWkdsbVpuVnpaVU52Ykc5eUxuSm5ZanNLQ1habFl6TWdiM1YwWjI5cGJtZE1hV2RvZENBOUlISmxabXhsWTNSbFpFeHBaMmgwTG1sdVpHbHlaV04wUkdsbVpuVnpaVHNLQ1NOcGJtTnNkV1JsSUR4bGJuWnRZWEJmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGIzQmhjWFZsWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BIUnZibVZ0WVhCd2FXNW5YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdOdmJHOXljM0JoWTJWZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThabTluWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BIQnlaVzExYkhScGNHeHBaV1JmWVd4d2FHRmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WkdsMGFHVnlhVzVuWDJaeVlXZHRaVzUwUGdwOVlDd2dSbWNnUFNCZ0kyUmxabWx1WlNCTVFVMUNSVkpVQ25aaGNubHBibWNnZG1Wak15QjJWbWxsZDFCdmMybDBhVzl1T3dvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4a2FYTndiR0ZqWlcxbGJuUnRZWEJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGxiblp0WVhCZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhqYjJ4dmNsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdadloxOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEc1dmNtMWhiRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHMXZjbkJvZEdGeVoyVjBYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOGMydHBibTVwYm1kZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHh6YUdGa2IzZHRZWEJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHTnNhWEJ3YVc1blgzQnNZVzVsYzE5d1lYSnpYM1psY25SbGVENEtkbTlwWkNCdFlXbHVLQ2tnZXdvSkkybHVZMngxWkdVZ1BIVjJYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhqYjJ4dmNsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiVzl5Y0doamIyeHZjbDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WW1WbmFXNXViM0p0WVd4ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHMXZjbkJvYm05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh6YTJsdVltRnpaVjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4YzJ0cGJtNXZjbTFoYkY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFpHVm1ZWFZzZEc1dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ym05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhpWldkcGJsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiVzl5Y0doMFlYSm5aWFJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhOcmFXNXVhVzVuWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4a2FYTndiR0ZqWlcxbGJuUnRZWEJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhCeWIycGxZM1JmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmRtVnlkR1Y0UGdvSmRsWnBaWGRRYjNOcGRHbHZiaUE5SUMwZ2JYWlFiM05wZEdsdmJpNTRlWG83Q2dramFXNWpiSFZrWlNBOGQyOXliR1J3YjNOZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHVnVkbTFoY0Y5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGMyaGhaRzkzYldGd1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeG1iMmRmZG1WeWRHVjRQZ3A5WUN3Z1FtY2dQU0JnSTJSbFptbHVaU0JNUVUxQ1JWSlVDblZ1YVdadmNtMGdkbVZqTXlCa2FXWm1kWE5sT3dwMWJtbG1iM0p0SUhabFl6TWdaVzFwYzNOcGRtVTdDblZ1YVdadmNtMGdabXh2WVhRZ2IzQmhZMmwwZVRzS0kybHVZMngxWkdVZ1BHTnZiVzF2Ymo0S0kybHVZMngxWkdVZ1BIQmhZMnRwYm1jK0NpTnBibU5zZFdSbElEeGthWFJvWlhKcGJtZGZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHTnZiRzl5WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHgxZGw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGJIQm9ZVzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WVd4d2FHRjBaWE4wWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhoYkhCb1lXaGhjMmhmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0Z2YldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4c2FXZG9kRzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WlcxcGMzTnBkbVZ0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdWdWRtMWhjRjlqYjIxdGIyNWZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHVnVkbTFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4Wm05blgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aWMyUm1jejRLSTJsdVkyeDFaR1VnUEd4cFoyaDBjMTl3WVhKelgySmxaMmx1UGdvamFXNWpiSFZrWlNBOGJtOXliV0ZzWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhzYVdkb2RITmZiR0Z0WW1WeWRGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGMyaGhaRzkzYldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aWRXMXdiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHh1YjNKdFlXeHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQSE53WldOMWJHRnliV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM0JoY25OZlpuSmhaMjFsYm5RK0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mWm5KaFoyMWxiblErQ2dsMlpXTTBJR1JwWm1aMWMyVkRiMnh2Y2lBOUlIWmxZelFvSUdScFptWjFjMlVzSUc5d1lXTnBkSGtnS1RzS0NWSmxabXhsWTNSbFpFeHBaMmgwSUhKbFpteGxZM1JsWkV4cFoyaDBJRDBnVW1WbWJHVmpkR1ZrVEdsbmFIUW9JSFpsWXpNb0lEQXVNQ0FwTENCMlpXTXpLQ0F3TGpBZ0tTd2dkbVZqTXlnZ01DNHdJQ2tzSUhabFl6TW9JREF1TUNBcElDazdDZ2wyWldNeklIUnZkR0ZzUlcxcGMzTnBkbVZTWVdScFlXNWpaU0E5SUdWdGFYTnphWFpsT3dvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhqYjJ4dmNsOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lXMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZWFJsYzNSZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThZV3h3YUdGb1lYTm9YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEhOd1pXTjFiR0Z5YldGd1gyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOW1jbUZuYldWdWRGOWlaV2RwYmo0S0NTTnBibU5zZFdSbElEeHViM0p0WVd4ZlpuSmhaMjFsYm5SZmJXRndjejRLQ1NOcGJtTnNkV1JsSUR4bGJXbHpjMmwyWlcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhzYVdkb2RITmZiR0Z0WW1WeWRGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhzYVdkb2RITmZabkpoWjIxbGJuUmZZbVZuYVc0K0Nna2phVzVqYkhWa1pTQThiR2xuYUhSelgyWnlZV2R0Wlc1MFgyMWhjSE0rQ2dramFXNWpiSFZrWlNBOGJHbG5hSFJ6WDJaeVlXZHRaVzUwWDJWdVpENEtDU05wYm1Oc2RXUmxJRHhoYjIxaGNGOW1jbUZuYldWdWRENEtDWFpsWXpNZ2IzVjBaMjlwYm1kTWFXZG9kQ0E5SUhKbFpteGxZM1JsWkV4cFoyaDBMbVJwY21WamRFUnBabVoxYzJVZ0t5QnlaV1pzWldOMFpXUk1hV2RvZEM1cGJtUnBjbVZqZEVScFptWjFjMlVnS3lCMGIzUmhiRVZ0YVhOemFYWmxVbUZrYVdGdVkyVTdDZ2tqYVc1amJIVmtaU0E4Wlc1MmJXRndYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEc5d1lYRjFaVjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4MGIyNWxiV0Z3Y0dsdVoxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhqYjJ4dmNuTndZV05sWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHWnZaMTltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4d2NtVnRkV3gwYVhCc2FXVmtYMkZzY0doaFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR1JwZEdobGNtbHVaMTltY21GbmJXVnVkRDRLZldBc0lIcG5JRDBnWUNOa1pXWnBibVVnVFVGVVEwRlFDblpoY25scGJtY2dkbVZqTXlCMlZtbGxkMUJ2YzJsMGFXOXVPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4ZFhaZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhqYjJ4dmNsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdScGMzQnNZV05sYldWdWRHMWhjRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHWnZaMTl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHNXZjbTFoYkY5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQRzF2Y25Cb2RHRnlaMlYwWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThjMnRwYm01cGJtZGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTl3WVhKelgzWmxjblJsZUQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEhWMlgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y2w5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2hqYjJ4dmNsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThZbVZuYVc1dWIzSnRZV3hmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEcxdmNuQm9ibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphMmx1WW1GelpWOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjMnRwYm01dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WkdWbVlYVnNkRzV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGlaV2RwYmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2gwWVhKblpYUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1dWFXNW5YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhrYVhOd2JHRmpaVzFsYm5SdFlYQmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSEJ5YjJwbFkzUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdadloxOTJaWEowWlhnK0NnbDJWbWxsZDFCdmMybDBhVzl1SUQwZ0xTQnRkbEJ2YzJsMGFXOXVMbmg1ZWpzS2ZXQXNJRlpuSUQwZ1lDTmtaV1pwYm1VZ1RVRlVRMEZRQ25WdWFXWnZjbTBnZG1Wak15QmthV1ptZFhObE93cDFibWxtYjNKdElHWnNiMkYwSUc5d1lXTnBkSGs3Q25WdWFXWnZjbTBnYzJGdGNHeGxjakpFSUcxaGRHTmhjRHNLZG1GeWVXbHVaeUIyWldNeklIWldhV1YzVUc5emFYUnBiMjQ3Q2lOcGJtTnNkV1JsSUR4amIyMXRiMjQrQ2lOcGJtTnNkV1JsSUR4a2FYUm9aWEpwYm1kZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdOdmJHOXlYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeDFkbDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhoYkhCb1lXMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZV3h3YUdGMFpYTjBYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiSEJvWVdoaGMyaGZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHWnZaMTl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThibTl5YldGc1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aWRXMXdiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHh1YjNKdFlXeHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTltY21GbmJXVnVkRDRLQ1habFl6UWdaR2xtWm5WelpVTnZiRzl5SUQwZ2RtVmpOQ2dnWkdsbVpuVnpaU3dnYjNCaFkybDBlU0FwT3dvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhqYjJ4dmNsOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lXMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZWFJsYzNSZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThZV3h3YUdGb1lYTm9YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEc1dmNtMWhiRjltY21GbmJXVnVkRjlpWldkcGJqNEtDU05wYm1Oc2RXUmxJRHh1YjNKdFlXeGZabkpoWjIxbGJuUmZiV0Z3Y3o0S0NYWmxZek1nZG1sbGQwUnBjaUE5SUc1dmNtMWhiR2w2WlNnZ2RsWnBaWGRRYjNOcGRHbHZiaUFwT3dvSmRtVmpNeUI0SUQwZ2JtOXliV0ZzYVhwbEtDQjJaV016S0NCMmFXVjNSR2x5TG5vc0lEQXVNQ3dnTFNCMmFXVjNSR2x5TG5nZ0tTQXBPd29KZG1Wak15QjVJRDBnWTNKdmMzTW9JSFpwWlhkRWFYSXNJSGdnS1RzS0NYWmxZeklnZFhZZ1BTQjJaV015S0NCa2IzUW9JSGdzSUc1dmNtMWhiQ0FwTENCa2IzUW9JSGtzSUc1dmNtMWhiQ0FwSUNrZ0tpQXdMalE1TlNBcklEQXVOVHNLQ1NOcFptUmxaaUJWVTBWZlRVRlVRMEZRQ2drSmRtVmpOQ0J0WVhSallYQkRiMnh2Y2lBOUlIUmxlSFIxY21VeVJDZ2diV0YwWTJGd0xDQjFkaUFwT3dvSkkyVnNjMlVLQ1FsMlpXTTBJRzFoZEdOaGNFTnZiRzl5SUQwZ2RtVmpOQ2dnZG1Wak15Z2diV2w0S0NBd0xqSXNJREF1T0N3Z2RYWXVlU0FwSUNrc0lERXVNQ0FwT3dvSkkyVnVaR2xtQ2dsMlpXTXpJRzkxZEdkdmFXNW5UR2xuYUhRZ1BTQmthV1ptZFhObFEyOXNiM0l1Y21kaUlDb2diV0YwWTJGd1EyOXNiM0l1Y21kaU93b0pJMmx1WTJ4MVpHVWdQRzl3WVhGMVpWOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHgwYjI1bGJXRndjR2x1WjE5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y25Od1lXTmxYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdadloxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHh3Y21WdGRXeDBhWEJzYVdWa1gyRnNjR2hoWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHUnBkR2hsY21sdVoxOW1jbUZuYldWdWRENEtmV0FzSUd0bklEMGdZQ05rWldacGJtVWdUazlTVFVGTUNpTnBaaUJrWldacGJtVmtLQ0JHVEVGVVgxTklRVVJGUkNBcElIeDhJR1JsWm1sdVpXUW9JRlZUUlY5Q1ZVMVFUVUZRSUNrZ2ZId2daR1ZtYVc1bFpDZ2dWVk5GWDA1UFVrMUJURTFCVUY5VVFVNUhSVTVVVTFCQlEwVWdLUW9KZG1GeWVXbHVaeUIyWldNeklIWldhV1YzVUc5emFYUnBiMjQ3Q2lObGJtUnBaZ29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4ZFhaZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhrYVhOd2JHRmpaVzFsYm5SdFlYQmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4dWIzSnRZV3hmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHRiM0p3YUhSaGNtZGxkRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BITnJhVzV1YVc1blgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4Ykc5blpHVndkR2hpZFdaZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZjR0Z5YzE5MlpYSjBaWGcrQ25admFXUWdiV0ZwYmlncElIc0tDU05wYm1Oc2RXUmxJRHgxZGw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFltVm5hVzV1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQRzF2Y25Cb2JtOXliV0ZzWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4emEybHVZbUZ6WlY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGMydHBibTV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThaR1ZtWVhWc2RHNXZjbTFoYkY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJtOXliV0ZzWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4aVpXZHBibDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ylc5eWNHaDBZWEpuWlhSZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BITnJhVzV1YVc1blgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGthWE53YkdGalpXMWxiblJ0WVhCZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BIQnliMnBsWTNSZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZkbVZ5ZEdWNFBnb2phV1lnWkdWbWFXNWxaQ2dnUmt4QlZGOVRTRUZFUlVRZ0tTQjhmQ0JrWldacGJtVmtLQ0JWVTBWZlFsVk5VRTFCVUNBcElIeDhJR1JsWm1sdVpXUW9JRlZUUlY5T1QxSk5RVXhOUVZCZlZFRk9SMFZPVkZOUVFVTkZJQ2tLQ1haV2FXVjNVRzl6YVhScGIyNGdQU0F0SUcxMlVHOXphWFJwYjI0dWVIbDZPd29qWlc1a2FXWUtmV0FzSUVobklEMGdZQ05rWldacGJtVWdUazlTVFVGTUNuVnVhV1p2Y20wZ1pteHZZWFFnYjNCaFkybDBlVHNLSTJsbUlHUmxabWx1WldRb0lFWk1RVlJmVTBoQlJFVkVJQ2tnZkh3Z1pHVm1hVzVsWkNnZ1ZWTkZYMEpWVFZCTlFWQWdLU0I4ZkNCa1pXWnBibVZrS0NCVlUwVmZUazlTVFVGTVRVRlFYMVJCVGtkRlRsUlRVRUZEUlNBcENnbDJZWEo1YVc1bklIWmxZek1nZGxacFpYZFFiM05wZEdsdmJqc0tJMlZ1WkdsbUNpTnBibU5zZFdSbElEeHdZV05yYVc1blBnb2phVzVqYkhWa1pTQThkWFpmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFluVnRjRzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4Ym05eWJXRnNiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM0JoY25OZlpuSmhaMjFsYm5RK0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4Ym05eWJXRnNYMlp5WVdkdFpXNTBYMkpsWjJsdVBnb0pJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOW1jbUZuYldWdWRGOXRZWEJ6UGdvSloyeGZSbkpoWjBOdmJHOXlJRDBnZG1Wak5DZ2djR0ZqYTA1dmNtMWhiRlJ2VWtkQ0tDQnViM0p0WVd3Z0tTd2diM0JoWTJsMGVTQXBPd29KSTJsbVpHVm1JRTlRUVZGVlJRb0pDV2RzWDBaeVlXZERiMnh2Y2k1aElEMGdNUzR3T3dvSkkyVnVaR2xtQ24xZ0xDQkhaeUE5SUdBalpHVm1hVzVsSUZCSVQwNUhDblpoY25scGJtY2dkbVZqTXlCMlZtbGxkMUJ2YzJsMGFXOXVPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4ZFhaZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhrYVhOd2JHRmpaVzFsYm5SdFlYQmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4bGJuWnRZWEJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGpiMnh2Y2w5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR1p2WjE5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEcxdmNuQm9kR0Z5WjJWMFgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4YzJ0cGJtNXBibWRmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHphR0ZrYjNkdFlYQmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTl3WVhKelgzWmxjblJsZUQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEhWMlgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y2w5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2hqYjJ4dmNsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThZbVZuYVc1dWIzSnRZV3hmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEcxdmNuQm9ibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphMmx1WW1GelpWOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjMnRwYm01dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WkdWbVlYVnNkRzV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGlaV2RwYmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2gwWVhKblpYUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1dWFXNW5YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhrYVhOd2JHRmpaVzFsYm5SdFlYQmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSEJ5YjJwbFkzUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mZG1WeWRHVjRQZ29KZGxacFpYZFFiM05wZEdsdmJpQTlJQzBnYlhaUWIzTnBkR2x2Ymk1NGVYbzdDZ2tqYVc1amJIVmtaU0E4ZDI5eWJHUndiM05mZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdWdWRtMWhjRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4YzJoaFpHOTNiV0Z3WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4bWIyZGZkbVZ5ZEdWNFBncDlZQ3dnVjJjZ1BTQmdJMlJsWm1sdVpTQlFTRTlPUndwMWJtbG1iM0p0SUhabFl6TWdaR2xtWm5WelpUc0tkVzVwWm05eWJTQjJaV016SUdWdGFYTnphWFpsT3dwMWJtbG1iM0p0SUhabFl6TWdjM0JsWTNWc1lYSTdDblZ1YVdadmNtMGdabXh2WVhRZ2MyaHBibWx1WlhOek93cDFibWxtYjNKdElHWnNiMkYwSUc5d1lXTnBkSGs3Q2lOcGJtTnNkV1JsSUR4amIyMXRiMjQrQ2lOcGJtTnNkV1JsSUR4d1lXTnJhVzVuUGdvamFXNWpiSFZrWlNBOFpHbDBhR1Z5YVc1blgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4amIyeHZjbDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThkWFpmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQRzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WVd4d2FHRnRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0ZzY0doaGRHVnpkRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZV3h3YUdGb1lYTm9YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiMjFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YkdsbmFIUnRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR1Z0YVhOemFYWmxiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhsYm5adFlYQmZZMjl0Ylc5dVgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4bGJuWnRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR1p2WjE5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WW5Oa1puTStDaU5wYm1Oc2RXUmxJRHhzYVdkb2RITmZjR0Z5YzE5aVpXZHBiajRLSTJsdVkyeDFaR1VnUEc1dmNtMWhiRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThiR2xuYUhSelgzQm9iMjVuWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHh6YUdGa2IzZHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0oxYlhCdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHNXZjbTFoYkcxaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGMzQmxZM1ZzWVhKdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmNHRnljMTltY21GbmJXVnVkRDRLZG05cFpDQnRZV2x1S0NrZ2V3b0pJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOW1jbUZuYldWdWRENEtDWFpsWXpRZ1pHbG1ablZ6WlVOdmJHOXlJRDBnZG1Wak5DZ2daR2xtWm5WelpTd2diM0JoWTJsMGVTQXBPd29KVW1WbWJHVmpkR1ZrVEdsbmFIUWdjbVZtYkdWamRHVmtUR2xuYUhRZ1BTQlNaV1pzWldOMFpXUk1hV2RvZENnZ2RtVmpNeWdnTUM0d0lDa3NJSFpsWXpNb0lEQXVNQ0FwTENCMlpXTXpLQ0F3TGpBZ0tTd2dkbVZqTXlnZ01DNHdJQ2tnS1RzS0NYWmxZek1nZEc5MFlXeEZiV2x6YzJsMlpWSmhaR2xoYm1ObElEMGdaVzFwYzNOcGRtVTdDZ2tqYVc1amJIVmtaU0E4Ykc5blpHVndkR2hpZFdaZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThiV0Z3WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHTnZiRzl5WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHRnNjR2hoYldGd1gyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR0ZzY0doaGRHVnpkRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZV2hoYzJoZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThjM0JsWTNWc1lYSnRZWEJmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGJtOXliV0ZzWDJaeVlXZHRaVzUwWDJKbFoybHVQZ29KSTJsdVkyeDFaR1VnUEc1dmNtMWhiRjltY21GbmJXVnVkRjl0WVhCelBnb0pJMmx1WTJ4MVpHVWdQR1Z0YVhOemFYWmxiV0Z3WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHeHBaMmgwYzE5d2FHOXVaMTltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4c2FXZG9kSE5mWm5KaFoyMWxiblJmWW1WbmFXNCtDZ2tqYVc1amJIVmtaU0E4YkdsbmFIUnpYMlp5WVdkdFpXNTBYMjFoY0hNK0Nna2phVzVqYkhWa1pTQThiR2xuYUhSelgyWnlZV2R0Wlc1MFgyVnVaRDRLQ1NOcGJtTnNkV1JsSUR4aGIyMWhjRjltY21GbmJXVnVkRDRLQ1habFl6TWdiM1YwWjI5cGJtZE1hV2RvZENBOUlISmxabXhsWTNSbFpFeHBaMmgwTG1ScGNtVmpkRVJwWm1aMWMyVWdLeUJ5Wldac1pXTjBaV1JNYVdkb2RDNXBibVJwY21WamRFUnBabVoxYzJVZ0t5QnlaV1pzWldOMFpXUk1hV2RvZEM1a2FYSmxZM1JUY0dWamRXeGhjaUFySUhKbFpteGxZM1JsWkV4cFoyaDBMbWx1WkdseVpXTjBVM0JsWTNWc1lYSWdLeUIwYjNSaGJFVnRhWE56YVhabFVtRmthV0Z1WTJVN0Nna2phVzVqYkhWa1pTQThaVzUyYldGd1gyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzl3WVhGMVpWOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHgwYjI1bGJXRndjR2x1WjE5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y25Od1lXTmxYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdadloxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHh3Y21WdGRXeDBhWEJzYVdWa1gyRnNjR2hoWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHUnBkR2hsY21sdVoxOW1jbUZuYldWdWRENEtmV0FzSUZobklEMGdZQ05rWldacGJtVWdVMVJCVGtSQlVrUUtkbUZ5ZVdsdVp5QjJaV016SUhaV2FXVjNVRzl6YVhScGIyNDdDaU5wWm1SbFppQlZVMFZmVkZKQlRsTk5TVk5UU1U5T0NnbDJZWEo1YVc1bklIWmxZek1nZGxkdmNteGtVRzl6YVhScGIyNDdDaU5sYm1ScFpnb2phVzVqYkhWa1pTQThZMjl0Ylc5dVBnb2phVzVqYkhWa1pTQThkWFpmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGthWE53YkdGalpXMWxiblJ0WVhCZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhqYjJ4dmNsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdadloxOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEc1dmNtMWhiRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHMXZjbkJvZEdGeVoyVjBYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOGMydHBibTVwYm1kZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHh6YUdGa2IzZHRZWEJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHTnNhWEJ3YVc1blgzQnNZVzVsYzE5d1lYSnpYM1psY25SbGVENEtkbTlwWkNCdFlXbHVLQ2tnZXdvSkkybHVZMngxWkdVZ1BIVjJYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhqYjJ4dmNsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiVzl5Y0doamIyeHZjbDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WW1WbmFXNXViM0p0WVd4ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHMXZjbkJvYm05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh6YTJsdVltRnpaVjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4YzJ0cGJtNXZjbTFoYkY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFpHVm1ZWFZzZEc1dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ym05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhpWldkcGJsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiVzl5Y0doMFlYSm5aWFJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhOcmFXNXVhVzVuWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4a2FYTndiR0ZqWlcxbGJuUnRZWEJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhCeWIycGxZM1JmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmRtVnlkR1Y0UGdvSmRsWnBaWGRRYjNOcGRHbHZiaUE5SUMwZ2JYWlFiM05wZEdsdmJpNTRlWG83Q2dramFXNWpiSFZrWlNBOGQyOXliR1J3YjNOZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BITm9ZV1J2ZDIxaGNGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThabTluWDNabGNuUmxlRDRLSTJsbVpHVm1JRlZUUlY5VVVrRk9VMDFKVTFOSlQwNEtDWFpYYjNKc1pGQnZjMmwwYVc5dUlEMGdkMjl5YkdSUWIzTnBkR2x2Ymk1NGVYbzdDaU5sYm1ScFpncDlZQ3dnY1djZ1BTQmdJMlJsWm1sdVpTQlRWRUZPUkVGU1JBb2phV1prWldZZ1VFaFpVMGxEUVV3S0NTTmtaV1pwYm1VZ1NVOVNDZ2tqWkdWbWFXNWxJRlZUUlY5VFVFVkRWVXhCVWdvalpXNWthV1lLZFc1cFptOXliU0IyWldNeklHUnBabVoxYzJVN0NuVnVhV1p2Y20wZ2RtVmpNeUJsYldsemMybDJaVHNLZFc1cFptOXliU0JtYkc5aGRDQnliM1ZuYUc1bGMzTTdDblZ1YVdadmNtMGdabXh2WVhRZ2JXVjBZV3h1WlhOek93cDFibWxtYjNKdElHWnNiMkYwSUc5d1lXTnBkSGs3Q2lOcFptUmxaaUJKVDFJS0NYVnVhV1p2Y20wZ1pteHZZWFFnYVc5eU93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOVRVRVZEVlV4QlVnb0pkVzVwWm05eWJTQm1iRzloZENCemNHVmpkV3hoY2tsdWRHVnVjMmwwZVRzS0NYVnVhV1p2Y20wZ2RtVmpNeUJ6Y0dWamRXeGhja052Ykc5eU93b0pJMmxtWkdWbUlGVlRSVjlUVUVWRFZVeEJVbDlEVDB4UFVrMUJVQW9KQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUhOd1pXTjFiR0Z5UTI5c2IzSk5ZWEE3Q2dralpXNWthV1lLQ1NOcFptUmxaaUJWVTBWZlUxQkZRMVZNUVZKZlNVNVVSVTVUU1ZSWlRVRlFDZ2tKZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnYzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhBN0Nna2paVzVrYVdZS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlEweEZRVkpEVDBGVUNnbDFibWxtYjNKdElHWnNiMkYwSUdOc1pXRnlZMjloZERzS0NYVnVhV1p2Y20wZ1pteHZZWFFnWTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56T3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5SlVrbEVSVk5EUlU1RFJRb0pkVzVwWm05eWJTQm1iRzloZENCcGNtbGtaWE5qWlc1alpUc0tDWFZ1YVdadmNtMGdabXh2WVhRZ2FYSnBaR1Z6WTJWdVkyVkpUMUk3Q2dsMWJtbG1iM0p0SUdac2IyRjBJR2x5YVdSbGMyTmxibU5sVkdocFkydHVaWE56VFdsdWFXMTFiVHNLQ1hWdWFXWnZjbTBnWm14dllYUWdhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhocGJYVnRPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlUU0VWRlRnb0pkVzVwWm05eWJTQjJaV016SUhOb1pXVnVRMjlzYjNJN0NnbDFibWxtYjNKdElHWnNiMkYwSUhOb1pXVnVVbTkxWjJodVpYTnpPd29KSTJsbVpHVm1JRlZUUlY5VFNFVkZUbDlEVDB4UFVrMUJVQW9KQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUhOb1pXVnVRMjlzYjNKTllYQTdDZ2tqWlc1a2FXWUtDU05wWm1SbFppQlZVMFZmVTBoRlJVNWZVazlWUjBoT1JWTlRUVUZRQ2drSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ2MyaGxaVzVTYjNWbmFHNWxjM05OWVhBN0Nna2paVzVrYVdZS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlFVNUpVMDlVVWs5UVdRb0pkVzVwWm05eWJTQjJaV015SUdGdWFYTnZkSEp2Y0hsV1pXTjBiM0k3Q2dramFXWmtaV1lnVlZORlgwRk9TVk5QVkZKUFVGbE5RVkFLQ1FsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCaGJtbHpiM1J5YjNCNVRXRndPd29KSTJWdVpHbG1DaU5sYm1ScFpncDJZWEo1YVc1bklIWmxZek1nZGxacFpYZFFiM05wZEdsdmJqc0tJMmx1WTJ4MVpHVWdQR052YlcxdmJqNEtJMmx1WTJ4MVpHVWdQSEJoWTJ0cGJtYytDaU5wYm1Oc2RXUmxJRHhrYVhSb1pYSnBibWRmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR052Ykc5eVgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4MWRsOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiSEJvWVcxaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFlXeHdhR0YwWlhOMFgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGJIQm9ZV2hoYzJoZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdGdmJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHNhV2RvZEcxaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFpXMXBjM05wZG1WdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHbHlhV1JsYzJObGJtTmxYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WTNWaVpWOTFkbDl5Wldac1pXTjBhVzl1WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFpXNTJiV0Z3WDJOdmJXMXZibDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThaVzUyYldGd1gzQm9lWE5wWTJGc1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4bWIyZGZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHeHBaMmgwYzE5d1lYSnpYMkpsWjJsdVBnb2phVzVqYkhWa1pTQThibTl5YldGc1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4c2FXZG9kSE5mY0doNWMybGpZV3hmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQSFJ5WVc1emJXbHpjMmx2Ymw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YzJoaFpHOTNiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhpZFcxd2JXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHViM0p0WVd4dFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHTnNaV0Z5WTI5aGRGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGFYSnBaR1Z6WTJWdVkyVmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BISnZkV2RvYm1WemMyMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThiV1YwWVd4dVpYTnpiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM0JoY25OZlpuSmhaMjFsYm5RK0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mWm5KaFoyMWxiblErQ2dsMlpXTTBJR1JwWm1aMWMyVkRiMnh2Y2lBOUlIWmxZelFvSUdScFptWjFjMlVzSUc5d1lXTnBkSGtnS1RzS0NWSmxabXhsWTNSbFpFeHBaMmgwSUhKbFpteGxZM1JsWkV4cFoyaDBJRDBnVW1WbWJHVmpkR1ZrVEdsbmFIUW9JSFpsWXpNb0lEQXVNQ0FwTENCMlpXTXpLQ0F3TGpBZ0tTd2dkbVZqTXlnZ01DNHdJQ2tzSUhabFl6TW9JREF1TUNBcElDazdDZ2wyWldNeklIUnZkR0ZzUlcxcGMzTnBkbVZTWVdScFlXNWpaU0E5SUdWdGFYTnphWFpsT3dvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhqYjJ4dmNsOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lXMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZWFJsYzNSZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThZV3h3YUdGb1lYTm9YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEhKdmRXZG9ibVZ6YzIxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHh0WlhSaGJHNWxjM050WVhCZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThibTl5YldGc1gyWnlZV2R0Wlc1MFgySmxaMmx1UGdvSkkybHVZMngxWkdVZ1BHNXZjbTFoYkY5bWNtRm5iV1Z1ZEY5dFlYQnpQZ29KSTJsdVkyeDFaR1VnUEdOc1pXRnlZMjloZEY5dWIzSnRZV3hmWm5KaFoyMWxiblJmWW1WbmFXNCtDZ2tqYVc1amJIVmtaU0E4WTJ4bFlYSmpiMkYwWDI1dmNtMWhiRjltY21GbmJXVnVkRjl0WVhCelBnb0pJMmx1WTJ4MVpHVWdQR1Z0YVhOemFYWmxiV0Z3WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHeHBaMmgwYzE5d2FIbHphV05oYkY5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHNhV2RvZEhOZlpuSmhaMjFsYm5SZlltVm5hVzQrQ2dramFXNWpiSFZrWlNBOGJHbG5hSFJ6WDJaeVlXZHRaVzUwWDIxaGNITStDZ2tqYVc1amJIVmtaU0E4YkdsbmFIUnpYMlp5WVdkdFpXNTBYMlZ1WkQ0S0NTTnBibU5zZFdSbElEeGhiMjFoY0Y5bWNtRm5iV1Z1ZEQ0S0NYWmxZek1nZEc5MFlXeEVhV1ptZFhObElEMGdjbVZtYkdWamRHVmtUR2xuYUhRdVpHbHlaV04wUkdsbVpuVnpaU0FySUhKbFpteGxZM1JsWkV4cFoyaDBMbWx1WkdseVpXTjBSR2xtWm5WelpUc0tDWFpsWXpNZ2RHOTBZV3hUY0dWamRXeGhjaUE5SUhKbFpteGxZM1JsWkV4cFoyaDBMbVJwY21WamRGTndaV04xYkdGeUlDc2djbVZtYkdWamRHVmtUR2xuYUhRdWFXNWthWEpsWTNSVGNHVmpkV3hoY2pzS0NTTnBibU5zZFdSbElEeDBjbUZ1YzIxcGMzTnBiMjVmWm5KaFoyMWxiblErQ2dsMlpXTXpJRzkxZEdkdmFXNW5UR2xuYUhRZ1BTQjBiM1JoYkVScFptWjFjMlVnS3lCMGIzUmhiRk53WldOMWJHRnlJQ3NnZEc5MFlXeEZiV2x6YzJsMlpWSmhaR2xoYm1ObE93b0pJMmxtWkdWbUlGVlRSVjlUU0VWRlRnb0pDV1pzYjJGMElITm9aV1Z1Ulc1bGNtZDVRMjl0Y0NBOUlERXVNQ0F0SURBdU1UVTNJQ29nYldGNE15Z2diV0YwWlhKcFlXd3VjMmhsWlc1RGIyeHZjaUFwT3dvSkNXOTFkR2R2YVc1blRHbG5hSFFnUFNCdmRYUm5iMmx1WjB4cFoyaDBJQ29nYzJobFpXNUZibVZ5WjNsRGIyMXdJQ3NnYzJobFpXNVRjR1ZqZFd4aGNqc0tDU05sYm1ScFpnb0pJMmxtWkdWbUlGVlRSVjlEVEVWQlVrTlBRVlFLQ1FsbWJHOWhkQ0JrYjNST1ZtTmpJRDBnYzJGMGRYSmhkR1VvSUdSdmRDZ2daMlZ2YldWMGNubERiR1ZoY21OdllYUk9iM0p0WVd3c0lHZGxiMjFsZEhKNVZtbGxkMFJwY2lBcElDazdDZ2tKZG1Wak15QkdZMk1nUFNCR1gxTmphR3hwWTJzb0lHMWhkR1Z5YVdGc0xtTnNaV0Z5WTI5aGRFWXdMQ0J0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFJHT1RBc0lHUnZkRTVXWTJNZ0tUc0tDUWx2ZFhSbmIybHVaMHhwWjJoMElEMGdiM1YwWjI5cGJtZE1hV2RvZENBcUlDZ2dNUzR3SUMwZ2JXRjBaWEpwWVd3dVkyeGxZWEpqYjJGMElDb2dSbU5qSUNrZ0t5QmpiR1ZoY21OdllYUlRjR1ZqZFd4aGNpQXFJRzFoZEdWeWFXRnNMbU5zWldGeVkyOWhkRHNLQ1NObGJtUnBaZ29KSTJsdVkyeDFaR1VnUEc5d1lYRjFaVjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4MGIyNWxiV0Z3Y0dsdVoxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhqYjJ4dmNuTndZV05sWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHWnZaMTltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4d2NtVnRkV3gwYVhCc2FXVmtYMkZzY0doaFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR1JwZEdobGNtbHVaMTltY21GbmJXVnVkRDRLZldBc0lGbG5JRDBnWUNOa1pXWnBibVVnVkU5UFRncDJZWEo1YVc1bklIWmxZek1nZGxacFpYZFFiM05wZEdsdmJqc0tJMmx1WTJ4MVpHVWdQR052YlcxdmJqNEtJMmx1WTJ4MVpHVWdQSFYyWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThaR2x6Y0d4aFkyVnRaVzUwYldGd1gzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4WTI5c2IzSmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4bWIyZGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4dWIzSnRZV3hmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHRiM0p3YUhSaGNtZGxkRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BITnJhVzV1YVc1blgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4YzJoaFpHOTNiV0Z3WDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThiRzluWkdWd2RHaGlkV1pmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmNHRnljMTkyWlhKMFpYZytDblp2YVdRZ2JXRnBiaWdwSUhzS0NTTnBibU5zZFdSbElEeDFkbDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WTI5c2IzSmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQRzF2Y25Cb1kyOXNiM0pmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdKbFoybHVibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHRiM0p3YUc1dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4YzJ0cGJtSmhjMlZmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhOcmFXNXViM0p0WVd4ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHUmxabUYxYkhSdWIzSnRZV3hmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEc1dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WW1WbmFXNWZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQRzF2Y25Cb2RHRnlaMlYwWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4emEybHVibWx1WjE5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFpHbHpjR3hoWTJWdFpXNTBiV0Z3WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4d2NtOXFaV04wWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzWmxjblJsZUQ0S0NYWldhV1YzVUc5emFYUnBiMjRnUFNBdElHMTJVRzl6YVhScGIyNHVlSGw2T3dvSkkybHVZMngxWkdVZ1BIZHZjbXhrY0c5elgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphR0ZrYjNkdFlYQmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR1p2WjE5MlpYSjBaWGcrQ24xZ0xDQmFaeUE5SUdBalpHVm1hVzVsSUZSUFQwNEtkVzVwWm05eWJTQjJaV016SUdScFptWjFjMlU3Q25WdWFXWnZjbTBnZG1Wak15QmxiV2x6YzJsMlpUc0tkVzVwWm05eWJTQm1iRzloZENCdmNHRmphWFI1T3dvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGNHRmphMmx1Wno0S0kybHVZMngxWkdVZ1BHUnBkR2hsY21sdVoxOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFkyOXNiM0pmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQSFYyWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHh0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdGc2NHaGhiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhoYkhCb1lYUmxjM1JmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0ZzY0doaGFHRnphRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZVzl0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEd4cFoyaDBiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhsYldsemMybDJaVzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WjNKaFpHbGxiblJ0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdadloxOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFluTmtabk0rQ2lOcGJtTnNkV1JsSUR4c2FXZG9kSE5mY0dGeWMxOWlaV2RwYmo0S0kybHVZMngxWkdVZ1BHNXZjbTFoYkY5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YkdsbmFIUnpYM1J2YjI1ZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEhOb1lXUnZkMjFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WW5WdGNHMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThibTl5YldGc2JXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mWm5KaFoyMWxiblErQ25admFXUWdiV0ZwYmlncElIc0tDU05wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZabkpoWjIxbGJuUStDZ2wyWldNMElHUnBabVoxYzJWRGIyeHZjaUE5SUhabFl6UW9JR1JwWm1aMWMyVXNJRzl3WVdOcGRIa2dLVHNLQ1ZKbFpteGxZM1JsWkV4cFoyaDBJSEpsWm14bFkzUmxaRXhwWjJoMElEMGdVbVZtYkdWamRHVmtUR2xuYUhRb0lIWmxZek1vSURBdU1DQXBMQ0IyWldNektDQXdMakFnS1N3Z2RtVmpNeWdnTUM0d0lDa3NJSFpsWXpNb0lEQXVNQ0FwSUNrN0NnbDJaV016SUhSdmRHRnNSVzFwYzNOcGRtVlNZV1JwWVc1alpTQTlJR1Z0YVhOemFYWmxPd29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGpiMnh2Y2w5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGhiSEJvWVcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lYUmxjM1JmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFlXeHdhR0ZvWVhOb1gyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOW1jbUZuYldWdWRGOWlaV2RwYmo0S0NTTnBibU5zZFdSbElEeHViM0p0WVd4ZlpuSmhaMjFsYm5SZmJXRndjejRLQ1NOcGJtTnNkV1JsSUR4bGJXbHpjMmwyWlcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhzYVdkb2RITmZkRzl2Ymw5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHNhV2RvZEhOZlpuSmhaMjFsYm5SZlltVm5hVzQrQ2dramFXNWpiSFZrWlNBOGJHbG5hSFJ6WDJaeVlXZHRaVzUwWDIxaGNITStDZ2tqYVc1amJIVmtaU0E4YkdsbmFIUnpYMlp5WVdkdFpXNTBYMlZ1WkQ0S0NTTnBibU5zZFdSbElEeGhiMjFoY0Y5bWNtRm5iV1Z1ZEQ0S0NYWmxZek1nYjNWMFoyOXBibWRNYVdkb2RDQTlJSEpsWm14bFkzUmxaRXhwWjJoMExtUnBjbVZqZEVScFptWjFjMlVnS3lCeVpXWnNaV04wWldSTWFXZG9kQzVwYm1ScGNtVmpkRVJwWm1aMWMyVWdLeUIwYjNSaGJFVnRhWE56YVhabFVtRmthV0Z1WTJVN0Nna2phVzVqYkhWa1pTQThiM0JoY1hWbFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQSFJ2Ym1WdFlYQndhVzVuWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHTnZiRzl5YzNCaFkyVmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4Wm05blgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQSEJ5WlcxMWJIUnBjR3hwWldSZllXeHdhR0ZmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFpHbDBhR1Z5YVc1blgyWnlZV2R0Wlc1MFBncDlZQ3dnU21jZ1BTQmdkVzVwWm05eWJTQm1iRzloZENCemFYcGxPd3AxYm1sbWIzSnRJR1pzYjJGMElITmpZV3hsT3dvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOFkyOXNiM0pmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeG1iMmRmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHRiM0p3YUhSaGNtZGxkRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNCaGNuTmZkbVZ5ZEdWNFBnb2phV1prWldZZ1ZWTkZYMUJQU1U1VVUxOVZWZ29KZG1GeWVXbHVaeUIyWldNeUlIWlZkanNLQ1hWdWFXWnZjbTBnYldGME15QjFkbFJ5WVc1elptOXliVHNLSTJWdVpHbG1Dblp2YVdRZ2JXRnBiaWdwSUhzS0NTTnBabVJsWmlCVlUwVmZVRTlKVGxSVFgxVldDZ2tKZGxWMklEMGdLQ0IxZGxSeVlXNXpabTl5YlNBcUlIWmxZek1vSUhWMkxDQXhJQ2tnS1M1NGVUc0tDU05sYm1ScFpnb0pJMmx1WTJ4MVpHVWdQR052Ykc5eVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHRiM0p3YUdOdmJHOXlYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhpWldkcGJsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiVzl5Y0doMFlYSm5aWFJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhCeWIycGxZM1JmZG1WeWRHVjRQZ29KWjJ4ZlVHOXBiblJUYVhwbElEMGdjMmw2WlRzS0NTTnBabVJsWmlCVlUwVmZVMGxhUlVGVVZFVk9WVUZVU1U5T0Nna0pZbTl2YkNCcGMxQmxjbk53WldOMGFYWmxJRDBnYVhOUVpYSnpjR1ZqZEdsMlpVMWhkSEpwZUNnZ2NISnZhbVZqZEdsdmJrMWhkSEpwZUNBcE93b0pDV2xtSUNnZ2FYTlFaWEp6Y0dWamRHbDJaU0FwSUdkc1gxQnZhVzUwVTJsNlpTQXFQU0FvSUhOallXeGxJQzhnTFNCdGRsQnZjMmwwYVc5dUxub2dLVHNLQ1NObGJtUnBaZ29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BIZHZjbXhrY0c5elgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeG1iMmRmZG1WeWRHVjRQZ3A5WUN3Z0pHY2dQU0JnZFc1cFptOXliU0IyWldNeklHUnBabVoxYzJVN0NuVnVhV1p2Y20wZ1pteHZZWFFnYjNCaFkybDBlVHNLSTJsdVkyeDFaR1VnUEdOdmJXMXZiajRLSTJsdVkyeDFaR1VnUEdOdmJHOXlYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHRZWEJmY0dGeWRHbGpiR1ZmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0ZzY0doaGRHVnpkRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZV3h3YUdGb1lYTm9YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeG1iMmRmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTltY21GbmJXVnVkRDRLQ1habFl6TWdiM1YwWjI5cGJtZE1hV2RvZENBOUlIWmxZek1vSURBdU1DQXBPd29KZG1Wak5DQmthV1ptZFhObFEyOXNiM0lnUFNCMlpXTTBLQ0JrYVdabWRYTmxMQ0J2Y0dGamFYUjVJQ2s3Q2dramFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4YldGd1gzQmhjblJwWTJ4bFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR052Ykc5eVgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR0ZzY0doaGRHVnpkRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZV2hoYzJoZlpuSmhaMjFsYm5RK0NnbHZkWFJuYjJsdVoweHBaMmgwSUQwZ1pHbG1ablZ6WlVOdmJHOXlMbkpuWWpzS0NTTnBibU5zZFdSbElEeHZjR0Z4ZFdWZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThkRzl1WlcxaGNIQnBibWRmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFkyOXNiM0p6Y0dGalpWOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhtYjJkZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThjSEpsYlhWc2RHbHdiR2xsWkY5aGJIQm9ZVjltY21GbmJXVnVkRDRLZldBc0lFdG5JRDBnWUNOcGJtTnNkV1JsSUR4amIyMXRiMjQrQ2lOcGJtTnNkV1JsSUR4bWIyZGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4dGIzSndhSFJoY21kbGRGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEhOcmFXNXVhVzVuWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThiRzluWkdWd2RHaGlkV1pmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHphR0ZrYjNkdFlYQmZjR0Z5YzE5MlpYSjBaWGcrQ25admFXUWdiV0ZwYmlncElIc0tDU05wYm1Oc2RXUmxJRHhpWldkcGJtNXZjbTFoYkY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2h1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1aVlYTmxYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh6YTJsdWJtOXliV0ZzWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4a1pXWmhkV3gwYm05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhpWldkcGJsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiVzl5Y0doMFlYSm5aWFJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhOcmFXNXVhVzVuWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4d2NtOXFaV04wWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThkMjl5YkdSd2IzTmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5vWVdSdmQyMWhjRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Wm05blgzWmxjblJsZUQ0S2ZXQXNJRkZuSUQwZ1lIVnVhV1p2Y20wZ2RtVmpNeUJqYjJ4dmNqc0tkVzVwWm05eWJTQm1iRzloZENCdmNHRmphWFI1T3dvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGNHRmphMmx1Wno0S0kybHVZMngxWkdVZ1BHWnZaMTl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZbk5rWm5NK0NpTnBibU5zZFdSbElEeHNhV2RvZEhOZmNHRnljMTlpWldkcGJqNEtJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHh6YUdGa2IzZHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQSE5vWVdSdmQyMWhjMnRmY0dGeWMxOW1jbUZuYldWdWRENEtkbTlwWkNCdFlXbHVLQ2tnZXdvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YMlp5WVdkdFpXNTBQZ29KWjJ4ZlJuSmhaME52Ykc5eUlEMGdkbVZqTkNnZ1kyOXNiM0lzSUc5d1lXTnBkSGtnS2lBb0lERXVNQ0F0SUdkbGRGTm9ZV1J2ZDAxaGMyc29LU0FwSUNrN0Nna2phVzVqYkhWa1pTQThkRzl1WlcxaGNIQnBibWRmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFkyOXNiM0p6Y0dGalpWOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhtYjJkZlpuSmhaMjFsYm5RK0NuMWdMQ0JxWnlBOUlHQjFibWxtYjNKdElHWnNiMkYwSUhKdmRHRjBhVzl1T3dwMWJtbG1iM0p0SUhabFl6SWdZMlZ1ZEdWeU93b2phVzVqYkhWa1pTQThZMjl0Ylc5dVBnb2phVzVqYkhWa1pTQThkWFpmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeG1iMmRmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHTnNhWEJ3YVc1blgzQnNZVzVsYzE5d1lYSnpYM1psY25SbGVENEtkbTlwWkNCdFlXbHVLQ2tnZXdvSkkybHVZMngxWkdVZ1BIVjJYM1psY25SbGVENEtDWFpsWXpRZ2JYWlFiM05wZEdsdmJpQTlJRzF2WkdWc1ZtbGxkMDFoZEhKcGVDQXFJSFpsWXpRb0lEQXVNQ3dnTUM0d0xDQXdMakFzSURFdU1DQXBPd29KZG1Wak1pQnpZMkZzWlRzS0NYTmpZV3hsTG5nZ1BTQnNaVzVuZEdnb0lIWmxZek1vSUcxdlpHVnNUV0YwY21sNFd5QXdJRjB1ZUN3Z2JXOWtaV3hOWVhSeWFYaGJJREFnWFM1NUxDQnRiMlJsYkUxaGRISnBlRnNnTUNCZExub2dLU0FwT3dvSmMyTmhiR1V1ZVNBOUlHeGxibWQwYUNnZ2RtVmpNeWdnYlc5a1pXeE5ZWFJ5YVhoYklERWdYUzU0TENCdGIyUmxiRTFoZEhKcGVGc2dNU0JkTG5rc0lHMXZaR1ZzVFdGMGNtbDRXeUF4SUYwdWVpQXBJQ2s3Q2dramFXWnVaR1ZtSUZWVFJWOVRTVnBGUVZSVVJVNVZRVlJKVDA0S0NRbGliMjlzSUdselVHVnljM0JsWTNScGRtVWdQU0JwYzFCbGNuTndaV04wYVhabFRXRjBjbWw0S0NCd2NtOXFaV04wYVc5dVRXRjBjbWw0SUNrN0Nna0phV1lnS0NCcGMxQmxjbk53WldOMGFYWmxJQ2tnYzJOaGJHVWdLajBnTFNCdGRsQnZjMmwwYVc5dUxubzdDZ2tqWlc1a2FXWUtDWFpsWXpJZ1lXeHBaMjVsWkZCdmMybDBhVzl1SUQwZ0tDQndiM05wZEdsdmJpNTRlU0F0SUNnZ1kyVnVkR1Z5SUMwZ2RtVmpNaWdnTUM0MUlDa2dLU0FwSUNvZ2MyTmhiR1U3Q2dsMlpXTXlJSEp2ZEdGMFpXUlFiM05wZEdsdmJqc0tDWEp2ZEdGMFpXUlFiM05wZEdsdmJpNTRJRDBnWTI5ektDQnliM1JoZEdsdmJpQXBJQ29nWVd4cFoyNWxaRkJ2YzJsMGFXOXVMbmdnTFNCemFXNG9JSEp2ZEdGMGFXOXVJQ2tnS2lCaGJHbG5ibVZrVUc5emFYUnBiMjR1ZVRzS0NYSnZkR0YwWldSUWIzTnBkR2x2Ymk1NUlEMGdjMmx1S0NCeWIzUmhkR2x2YmlBcElDb2dZV3hwWjI1bFpGQnZjMmwwYVc5dUxuZ2dLeUJqYjNNb0lISnZkR0YwYVc5dUlDa2dLaUJoYkdsbmJtVmtVRzl6YVhScGIyNHVlVHNLQ1cxMlVHOXphWFJwYjI0dWVIa2dLejBnY205MFlYUmxaRkJ2YzJsMGFXOXVPd29KWjJ4ZlVHOXphWFJwYjI0Z1BTQndjbTlxWldOMGFXOXVUV0YwY21sNElDb2diWFpRYjNOcGRHbHZianNLQ1NOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeG1iMmRmZG1WeWRHVjRQZ3A5WUN3Z1pWOGdQU0JnZFc1cFptOXliU0IyWldNeklHUnBabVoxYzJVN0NuVnVhV1p2Y20wZ1pteHZZWFFnYjNCaFkybDBlVHNLSTJsdVkyeDFaR1VnUEdOdmJXMXZiajRLSTJsdVkyeDFaR1VnUEhWMlgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4dFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnNjR2hoYldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGJIQm9ZWFJsYzNSZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdGc2NHaGhhR0Z6YUY5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4Wm05blgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNCaGNuTmZabkpoWjIxbGJuUStDblp2YVdRZ2JXRnBiaWdwSUhzS0NTTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZlpuSmhaMjFsYm5RK0NnbDJaV016SUc5MWRHZHZhVzVuVEdsbmFIUWdQU0IyWldNektDQXdMakFnS1RzS0NYWmxZelFnWkdsbVpuVnpaVU52Ykc5eUlEMGdkbVZqTkNnZ1pHbG1ablZ6WlN3Z2IzQmhZMmwwZVNBcE93b0pJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZVzFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGhiSEJvWVhSbGMzUmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WVd4d2FHRm9ZWE5vWDJaeVlXZHRaVzUwUGdvSmIzVjBaMjlwYm1kTWFXZG9kQ0E5SUdScFptWjFjMlZEYjJ4dmNpNXlaMkk3Q2dramFXNWpiSFZrWlNBOGIzQmhjWFZsWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BIUnZibVZ0WVhCd2FXNW5YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdOdmJHOXljM0JoWTJWZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThabTluWDJaeVlXZHRaVzUwUGdwOVlDd2dhMlVnUFNCN0NpQWdJQ0JoYkhCb1lXaGhjMmhmWm5KaFoyMWxiblE2SUVWd0xBb2dJQ0FnWVd4d2FHRm9ZWE5vWDNCaGNuTmZabkpoWjIxbGJuUTZJRlJ3TEFvZ0lDQWdZV3h3YUdGdFlYQmZabkpoWjIxbGJuUTZJSGR3TEFvZ0lDQWdZV3h3YUdGdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ1FYQXNDaUFnSUNCaGJIQm9ZWFJsYzNSZlpuSmhaMjFsYm5RNklGSndMQW9nSUNBZ1lXeHdhR0YwWlhOMFgzQmhjbk5mWm5KaFoyMWxiblE2SUVOd0xBb2dJQ0FnWVc5dFlYQmZabkpoWjIxbGJuUTZJRkJ3TEFvZ0lDQWdZVzl0WVhCZmNHRnljMTltY21GbmJXVnVkRG9nVEhBc0NpQWdJQ0JpWldkcGJsOTJaWEowWlhnNklFbHdMQW9nSUNBZ1ltVm5hVzV1YjNKdFlXeGZkbVZ5ZEdWNE9pQlZjQ3dLSUNBZ0lHSnpaR1p6T2lCRWNDd0tJQ0FnSUdseWFXUmxjMk5sYm1ObFgyWnlZV2R0Wlc1ME9pQk9jQ3dLSUNBZ0lHSjFiWEJ0WVhCZmNHRnljMTltY21GbmJXVnVkRG9nVDNBc0NpQWdJQ0JqYkdsd2NHbHVaMTl3YkdGdVpYTmZabkpoWjIxbGJuUTZJRVp3TEFvZ0lDQWdZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mWm5KaFoyMWxiblE2SUVKd0xBb2dJQ0FnWTJ4cGNIQnBibWRmY0d4aGJtVnpYM0JoY25OZmRtVnlkR1Y0T2lCNmNDd0tJQ0FnSUdOc2FYQndhVzVuWDNCc1lXNWxjMTkyWlhKMFpYZzZJRlp3TEFvZ0lDQWdZMjlzYjNKZlpuSmhaMjFsYm5RNklHdHdMQW9nSUNBZ1kyOXNiM0pmY0dGeWMxOW1jbUZuYldWdWREb2dTSEFzQ2lBZ0lDQmpiMnh2Y2w5d1lYSnpYM1psY25SbGVEb2dSM0FzQ2lBZ0lDQmpiMnh2Y2w5MlpYSjBaWGc2SUZkd0xBb2dJQ0FnWTI5dGJXOXVPaUJZY0N3S0lDQWdJR04xWW1WZmRYWmZjbVZtYkdWamRHbHZibDltY21GbmJXVnVkRG9nY1hBc0NpQWdJQ0JrWldaaGRXeDBibTl5YldGc1gzWmxjblJsZURvZ1dYQXNDaUFnSUNCa2FYTndiR0ZqWlcxbGJuUnRZWEJmY0dGeWMxOTJaWEowWlhnNklGcHdMQW9nSUNBZ1pHbHpjR3hoWTJWdFpXNTBiV0Z3WDNabGNuUmxlRG9nU25Bc0NpQWdJQ0JsYldsemMybDJaVzFoY0Y5bWNtRm5iV1Z1ZERvZ0pIQXNDaUFnSUNCbGJXbHpjMmwyWlcxaGNGOXdZWEp6WDJaeVlXZHRaVzUwT2lCTGNDd0tJQ0FnSUdOdmJHOXljM0JoWTJWZlpuSmhaMjFsYm5RNklGRndMQW9nSUNBZ1kyOXNiM0p6Y0dGalpWOXdZWEp6WDJaeVlXZHRaVzUwT2lCcWNDd0tJQ0FnSUdWdWRtMWhjRjltY21GbmJXVnVkRG9nWlcwc0NpQWdJQ0JsYm5adFlYQmZZMjl0Ylc5dVgzQmhjbk5mWm5KaFoyMWxiblE2SUhSdExBb2dJQ0FnWlc1MmJXRndYM0JoY25OZlpuSmhaMjFsYm5RNklHNXRMQW9nSUNBZ1pXNTJiV0Z3WDNCaGNuTmZkbVZ5ZEdWNE9pQnBiU3dLSUNBZ0lHVnVkbTFoY0Y5d2FIbHphV05oYkY5d1lYSnpYMlp5WVdkdFpXNTBPaUJ0YlN3S0lDQWdJR1Z1ZG0xaGNGOTJaWEowWlhnNklITnRMQW9nSUNBZ1ptOW5YM1psY25SbGVEb2djbTBzQ2lBZ0lDQm1iMmRmY0dGeWMxOTJaWEowWlhnNklHRnRMQW9nSUNBZ1ptOW5YMlp5WVdkdFpXNTBPaUJ2YlN3S0lDQWdJR1p2WjE5d1lYSnpYMlp5WVdkdFpXNTBPaUJqYlN3S0lDQWdJR2R5WVdScFpXNTBiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUTZJR3h0TEFvZ0lDQWdiR2xuYUhSdFlYQmZabkpoWjIxbGJuUTZJR2h0TEFvZ0lDQWdiR2xuYUhSdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ2RXMHNDaUFnSUNCc2FXZG9kSE5mYkdGdFltVnlkRjltY21GbmJXVnVkRG9nWkcwc0NpQWdJQ0JzYVdkb2RITmZiR0Z0WW1WeWRGOXdZWEp6WDJaeVlXZHRaVzUwT2lCbWJTd0tJQ0FnSUd4cFoyaDBjMTl3WVhKelgySmxaMmx1T2lCd2JTd0tJQ0FnSUd4cFoyaDBjMTkwYjI5dVgyWnlZV2R0Wlc1ME9pQm5iU3dLSUNBZ0lHeHBaMmgwYzE5MGIyOXVYM0JoY25OZlpuSmhaMjFsYm5RNklGOXRMQW9nSUNBZ2JHbG5hSFJ6WDNCb2IyNW5YMlp5WVdkdFpXNTBPaUI0YlN3S0lDQWdJR3hwWjJoMGMxOXdhRzl1WjE5d1lYSnpYMlp5WVdkdFpXNTBPaUIyYlN3S0lDQWdJR3hwWjJoMGMxOXdhSGx6YVdOaGJGOW1jbUZuYldWdWREb2dlVzBzQ2lBZ0lDQnNhV2RvZEhOZmNHaDVjMmxqWVd4ZmNHRnljMTltY21GbmJXVnVkRG9nVFcwc0NpQWdJQ0JzYVdkb2RITmZabkpoWjIxbGJuUmZZbVZuYVc0NklGTnRMQW9nSUNBZ2JHbG5hSFJ6WDJaeVlXZHRaVzUwWDIxaGNITTZJR0p0TEFvZ0lDQWdiR2xuYUhSelgyWnlZV2R0Wlc1MFgyVnVaRG9nUlcwc0NpQWdJQ0JzYjJka1pYQjBhR0oxWmw5bWNtRm5iV1Z1ZERvZ1ZHMHNDaUFnSUNCc2IyZGtaWEIwYUdKMVpsOXdZWEp6WDJaeVlXZHRaVzUwT2lCM2JTd0tJQ0FnSUd4dloyUmxjSFJvWW5WbVgzQmhjbk5mZG1WeWRHVjRPaUJCYlN3S0lDQWdJR3h2WjJSbGNIUm9ZblZtWDNabGNuUmxlRG9nVW0wc0NpQWdJQ0J0WVhCZlpuSmhaMjFsYm5RNklFTnRMQW9nSUNBZ2JXRndYM0JoY25OZlpuSmhaMjFsYm5RNklGQnRMQW9nSUNBZ2JXRndYM0JoY25ScFkyeGxYMlp5WVdkdFpXNTBPaUJNYlN3S0lDQWdJRzFoY0Y5d1lYSjBhV05zWlY5d1lYSnpYMlp5WVdkdFpXNTBPaUJKYlN3S0lDQWdJRzFsZEdGc2JtVnpjMjFoY0Y5bWNtRm5iV1Z1ZERvZ1ZXMHNDaUFnSUNCdFpYUmhiRzVsYzNOdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ1JHMHNDaUFnSUNCdGIzSndhR052Ykc5eVgzWmxjblJsZURvZ1RtMHNDaUFnSUNCdGIzSndhRzV2Y20xaGJGOTJaWEowWlhnNklFOXRMQW9nSUNBZ2JXOXljR2gwWVhKblpYUmZjR0Z5YzE5MlpYSjBaWGc2SUVadExBb2dJQ0FnYlc5eWNHaDBZWEpuWlhSZmRtVnlkR1Y0T2lCQ2JTd0tJQ0FnSUc1dmNtMWhiRjltY21GbmJXVnVkRjlpWldkcGJqb2dlbTBzQ2lBZ0lDQnViM0p0WVd4ZlpuSmhaMjFsYm5SZmJXRndjem9nVm0wc0NpQWdJQ0J1YjNKdFlXeGZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ2EyMHNDaUFnSUNCdWIzSnRZV3hmY0dGeWMxOTJaWEowWlhnNklFaHRMQW9nSUNBZ2JtOXliV0ZzWDNabGNuUmxlRG9nUjIwc0NpQWdJQ0J1YjNKdFlXeHRZWEJmY0dGeWMxOW1jbUZuYldWdWREb2dWMjBzQ2lBZ0lDQmpiR1ZoY21OdllYUmZibTl5YldGc1gyWnlZV2R0Wlc1MFgySmxaMmx1T2lCWWJTd0tJQ0FnSUdOc1pXRnlZMjloZEY5dWIzSnRZV3hmWm5KaFoyMWxiblJmYldGd2N6b2djVzBzQ2lBZ0lDQmpiR1ZoY21OdllYUmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ1dXMHNDaUFnSUNCcGNtbGtaWE5qWlc1alpWOXdZWEp6WDJaeVlXZHRaVzUwT2lCYWJTd0tJQ0FnSUc5d1lYRjFaVjltY21GbmJXVnVkRG9nU20wc0NpQWdJQ0J3WVdOcmFXNW5PaUFrYlN3S0lDQWdJSEJ5WlcxMWJIUnBjR3hwWldSZllXeHdhR0ZmWm5KaFoyMWxiblE2SUV0dExBb2dJQ0FnY0hKdmFtVmpkRjkyWlhKMFpYZzZJRkZ0TEFvZ0lDQWdaR2wwYUdWeWFXNW5YMlp5WVdkdFpXNTBPaUJxYlN3S0lDQWdJR1JwZEdobGNtbHVaMTl3WVhKelgyWnlZV2R0Wlc1ME9pQmxaeXdLSUNBZ0lISnZkV2RvYm1WemMyMWhjRjltY21GbmJXVnVkRG9nZEdjc0NpQWdJQ0J5YjNWbmFHNWxjM050WVhCZmNHRnljMTltY21GbmJXVnVkRG9nYm1jc0NpQWdJQ0J6YUdGa2IzZHRZWEJmY0dGeWMxOW1jbUZuYldWdWREb2dhV2NzQ2lBZ0lDQnphR0ZrYjNkdFlYQmZjR0Z5YzE5MlpYSjBaWGc2SUhObkxBb2dJQ0FnYzJoaFpHOTNiV0Z3WDNabGNuUmxlRG9nY21jc0NpQWdJQ0J6YUdGa2IzZHRZWE5yWDNCaGNuTmZabkpoWjIxbGJuUTZJR0ZuTEFvZ0lDQWdjMnRwYm1KaGMyVmZkbVZ5ZEdWNE9pQnZaeXdLSUNBZ0lITnJhVzV1YVc1blgzQmhjbk5mZG1WeWRHVjRPaUJqWnl3S0lDQWdJSE5yYVc1dWFXNW5YM1psY25SbGVEb2diR2NzQ2lBZ0lDQnphMmx1Ym05eWJXRnNYM1psY25SbGVEb2dhR2NzQ2lBZ0lDQnpjR1ZqZFd4aGNtMWhjRjltY21GbmJXVnVkRG9nZFdjc0NpQWdJQ0J6Y0dWamRXeGhjbTFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBPaUJrWnl3S0lDQWdJSFJ2Ym1WdFlYQndhVzVuWDJaeVlXZHRaVzUwT2lCbVp5d0tJQ0FnSUhSdmJtVnRZWEJ3YVc1blgzQmhjbk5mWm5KaFoyMWxiblE2SUhCbkxBb2dJQ0FnZEhKaGJuTnRhWE56YVc5dVgyWnlZV2R0Wlc1ME9pQnRaeXdLSUNBZ0lIUnlZVzV6YldsemMybHZibDl3WVhKelgyWnlZV2R0Wlc1ME9pQm5aeXdLSUNBZ0lIVjJYM0JoY25OZlpuSmhaMjFsYm5RNklGOW5MQW9nSUNBZ2RYWmZjR0Z5YzE5MlpYSjBaWGc2SUhobkxBb2dJQ0FnZFhaZmRtVnlkR1Y0T2lCMlp5d0tJQ0FnSUhkdmNteGtjRzl6WDNabGNuUmxlRG9nZVdjc0NpQWdJQ0JpWVdOclozSnZkVzVrWDNabGNuUTZJRTFuTEFvZ0lDQWdZbUZqYTJkeWIzVnVaRjltY21Gbk9pQlRaeXdLSUNBZ0lHSmhZMnRuY205MWJtUkRkV0psWDNabGNuUTZJR0puTEFvZ0lDQWdZbUZqYTJkeWIzVnVaRU4xWW1WZlpuSmhaem9nUldjc0NpQWdJQ0JqZFdKbFgzWmxjblE2SUZSbkxBb2dJQ0FnWTNWaVpWOW1jbUZuT2lCM1p5d0tJQ0FnSUdSbGNIUm9YM1psY25RNklFRm5MQW9nSUNBZ1pHVndkR2hmWm5KaFp6b2dVbWNzQ2lBZ0lDQmthWE4wWVc1alpWSkhRa0ZmZG1WeWREb2dRMmNzQ2lBZ0lDQmthWE4wWVc1alpWSkhRa0ZmWm5KaFp6b2dVR2NzQ2lBZ0lDQmxjWFZwY21WamRGOTJaWEowT2lCTVp5d0tJQ0FnSUdWeGRXbHlaV04wWDJaeVlXYzZJRWxuTEFvZ0lDQWdiR2x1WldSaGMyaGxaRjkyWlhKME9pQlZaeXdLSUNBZ0lHeHBibVZrWVhOb1pXUmZabkpoWnpvZ1JHY3NDaUFnSUNCdFpYTm9ZbUZ6YVdOZmRtVnlkRG9nVG1jc0NpQWdJQ0J0WlhOb1ltRnphV05mWm5KaFp6b2dUMmNzQ2lBZ0lDQnRaWE5vYkdGdFltVnlkRjkyWlhKME9pQkdaeXdLSUNBZ0lHMWxjMmhzWVcxaVpYSjBYMlp5WVdjNklFSm5MQW9nSUNBZ2JXVnphRzFoZEdOaGNGOTJaWEowT2lCNlp5d0tJQ0FnSUcxbGMyaHRZWFJqWVhCZlpuSmhaem9nVm1jc0NpQWdJQ0J0WlhOb2JtOXliV0ZzWDNabGNuUTZJR3RuTEFvZ0lDQWdiV1Z6YUc1dmNtMWhiRjltY21Gbk9pQklaeXdLSUNBZ0lHMWxjMmh3YUc5dVoxOTJaWEowT2lCSFp5d0tJQ0FnSUcxbGMyaHdhRzl1WjE5bWNtRm5PaUJYWnl3S0lDQWdJRzFsYzJod2FIbHphV05oYkY5MlpYSjBPaUJZWnl3S0lDQWdJRzFsYzJod2FIbHphV05oYkY5bWNtRm5PaUJ4Wnl3S0lDQWdJRzFsYzJoMGIyOXVYM1psY25RNklGbG5MQW9nSUNBZ2JXVnphSFJ2YjI1ZlpuSmhaem9nV21jc0NpQWdJQ0J3YjJsdWRITmZkbVZ5ZERvZ1NtY3NDaUFnSUNCd2IybHVkSE5mWm5KaFp6b2dKR2NzQ2lBZ0lDQnphR0ZrYjNkZmRtVnlkRG9nUzJjc0NpQWdJQ0J6YUdGa2IzZGZabkpoWnpvZ1VXY3NDaUFnSUNCemNISnBkR1ZmZG1WeWREb2dhbWNzQ2lBZ0lDQnpjSEpwZEdWZlpuSmhaem9nWlY4S2ZTd2diR1VnUFNCN0NpQWdJQ0JqYjIxdGIyNDZJSHNLSUNBZ0lDQWdJQ0JrYVdabWRYTmxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2djR1VvTVRZM056Y3lNVFVwQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCdmNHRmphWFI1T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXhDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J0WVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHMWhjRlJ5WVc1elptOXliVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNJRWhsQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCaGJIQm9ZVTFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ1lXeHdhR0ZOWVhCVWNtRnVjMlp2Y20wNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzVsZHlCSVpRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdZV3h3YUdGVVpYTjBPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBd0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJSE53WldOMWJHRnliV0Z3T2lCN0NpQWdJQ0FnSUNBZ2MzQmxZM1ZzWVhKTllYQTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSE53WldOMWJHRnlUV0Z3VkhKaGJuTm1iM0p0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnU0dVS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5TEFvZ0lDQWdaVzUyYldGd09pQjdDaUFnSUNBZ0lDQWdaVzUyVFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQm1iR2x3Ulc1MlRXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBdE1Rb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjbVZtYkdWamRHbDJhWFI1T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXhDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JwYjNJNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREV1TlFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2NtVm1jbUZqZEdsdmJsSmhkR2x2T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXVPVGdLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ1lXOXRZWEE2SUhzS0lDQWdJQ0FnSUNCaGIwMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnWVc5TllYQkpiblJsYm5OcGRIazZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHRnZUV0Z3VkhKaGJuTm1iM0p0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnU0dVS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5TEFvZ0lDQWdiR2xuYUhSdFlYQTZJSHNLSUNBZ0lDQWdJQ0JzYVdkb2RFMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGs2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklERUtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJR3hwWjJoMFRXRndWSEpoYm5ObWIzSnRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dTR1VLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ1luVnRjRzFoY0RvZ2V3b2dJQ0FnSUNBZ0lHSjFiWEJOWVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHSjFiWEJOWVhCVWNtRnVjMlp2Y20wNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzVsZHlCSVpRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdZblZ0Y0ZOallXeGxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBeENpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJRzV2Y20xaGJHMWhjRG9nZXdvZ0lDQWdJQ0FnSUc1dmNtMWhiRTFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2JtOXliV0ZzVFdGd1ZISmhibk5tYjNKdE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1NHVUtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJRzV2Y20xaGJGTmpZV3hsT2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnV2lneExDQXhLUW9nSUNBZ0lDQWdJSDBLSUNBZ0lIMHNDaUFnSUNCa2FYTndiR0ZqWlcxbGJuUnRZWEE2SUhzS0lDQWdJQ0FnSUNCa2FYTndiR0ZqWlcxbGJuUk5ZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiR3dLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUdScGMzQnNZV05sYldWdWRFMWhjRlJ5WVc1elptOXliVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNJRWhsQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCa2FYTndiR0ZqWlcxbGJuUlRZMkZzWlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNUW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnWkdsemNHeGhZMlZ0Wlc1MFFtbGhjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01Bb2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwc0NpQWdJQ0JsYldsemMybDJaVzFoY0RvZ2V3b2dJQ0FnSUNBZ0lHVnRhWE56YVhabFRXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdWRXeHNDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JsYldsemMybDJaVTFoY0ZSeVlXNXpabTl5YlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dibVYzSUVobENpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJRzFsZEdGc2JtVnpjMjFoY0RvZ2V3b2dJQ0FnSUNBZ0lHMWxkR0ZzYm1WemMwMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYldWMFlXeHVaWE56VFdGd1ZISmhibk5tYjNKdE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1NHVUtJQ0FnSUNBZ0lDQjlDaUFnSUNCOUxBb2dJQ0FnY205MVoyaHVaWE56YldGd09pQjdDaUFnSUNBZ0lDQWdjbTkxWjJodVpYTnpUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCeWIzVm5hRzVsYzNOTllYQlVjbUZ1YzJadmNtMDZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1bGR5QklaUW9nSUNBZ0lDQWdJSDBLSUNBZ0lIMHNDaUFnSUNCbmNtRmthV1Z1ZEcxaGNEb2dld29nSUNBZ0lDQWdJR2R5WVdScFpXNTBUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dLSUNBZ0lHWnZaem9nZXdvZ0lDQWdJQ0FnSUdadlowUmxibk5wZEhrNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREkxWlMwMUNpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQm1iMmRPWldGeU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCbWIyZEdZWEk2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklESmxNd29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnWm05blEyOXNiM0k2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJ3WlNneE5qYzNOekl4TlNrS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5TEFvZ0lDQWdiR2xuYUhSek9pQjdDaUFnSUNBZ0lDQWdZVzFpYVdWdWRFeHBaMmgwUTI5c2IzSTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUZ0ZENpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnNhV2RvZEZCeWIySmxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCYlhRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdaR2x5WldOMGFXOXVZV3hNYVdkb2RITTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUZ0ZExBb2dJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYSmxZM1JwYjI0NklIdDlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJNklIdDlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHUnBjbVZqZEdsdmJtRnNUR2xuYUhSVGFHRmtiM2R6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmJYU3dLSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1FtbGhjem9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2RPYjNKdFlXeENhV0Z6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDFKaFpHbDFjem9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2ROWVhCVGFYcGxPaUI3ZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JrYVhKbFkzUnBiMjVoYkZOb1lXUnZkMDFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dXMTBLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUdScGNtVmpkR2x2Ym1Gc1UyaGhaRzkzVFdGMGNtbDRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCYlhRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjM0J2ZEV4cFoyaDBjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1cxMHNDaUFnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dU9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwY21WamRHbHZiam9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTjBZVzVqWlRvZ2UzMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjVsUTI5ek9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJsYm5WdFluSmhRMjl6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxZMkY1T2lCN2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCemNHOTBUR2xuYUhSVGFHRmtiM2R6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmJYU3dLSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1FtbGhjem9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2RPYjNKdFlXeENhV0Z6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDFKaFpHbDFjem9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2ROWVhCVGFYcGxPaUI3ZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6Y0c5MFRHbG5hSFJOWVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRnRkQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCemNHOTBVMmhoWkc5M1RXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCYlhRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjM0J2ZEV4cFoyaDBUV0YwY21sNE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJiWFFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2NHOXBiblJNYVdkb2RITTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUZ0ZExBb2dJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjam9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IzTnBkR2x2YmpvZ2UzMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV05oZVRvZ2UzMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE4wWVc1alpUb2dlMzBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjRzlwYm5STWFXZG9kRk5vWVdSdmQzTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUZ0ZExBb2dJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2RDYVdGek9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5vWVdSdmQwNXZjbTFoYkVKcFlYTTZJSHQ5TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJoaFpHOTNVbUZrYVhWek9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5vWVdSdmQwMWhjRk5wZW1VNklIdDlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1EyRnRaWEpoVG1WaGNqb2dlMzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZERZVzFsY21GR1lYSTZJSHQ5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSEJ2YVc1MFUyaGhaRzkzVFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJiWFFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2NHOXBiblJUYUdGa2IzZE5ZWFJ5YVhnNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRnRkQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCb1pXMXBjM0JvWlhKbFRHbG5hSFJ6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmJYU3dLSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x5WldOMGFXOXVPaUI3ZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOcmVVTnZiRzl5T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZHliM1Z1WkVOdmJHOXlPaUI3ZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J5WldOMFFYSmxZVXhwWjJoMGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nVzEwc0NpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUnBaWE02SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUI3ZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmMybDBhVzl1T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2UzMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2JIUmpYekU2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiR3dLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUd4MFkxOHlPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdWRXeHNDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZTd0tJQ0FnSUhCdmFXNTBjem9nZXdvZ0lDQWdJQ0FnSUdScFptWjFjMlU2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJ3WlNneE5qYzNOekl4TlNrS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHOXdZV05wZEhrNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREVLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUhOcGVtVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lITmpZV3hsT2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXhDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J0WVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHRnNjR2hoVFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQmhiSEJvWVUxaGNGUnlZVzV6Wm05eWJUb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lFaGxDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JoYkhCb1lWUmxjM1E2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklEQUtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSFYyVkhKaGJuTm1iM0p0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnU0dVS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5TEFvZ0lDQWdjM0J5YVhSbE9pQjdDaUFnSUNBZ0lDQWdaR2xtWm5WelpUb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lIQmxLREUyTnpjM01qRTFLUW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYjNCaFkybDBlVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01Rb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdZMlZ1ZEdWeU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1dpZ3VOU3dnTGpVcENpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnliM1JoZEdsdmJqb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTUFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2JXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdWRXeHNDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J0WVhCVWNtRnVjMlp2Y20wNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzVsZHlCSVpRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdZV3h3YUdGTllYQTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJR0ZzY0doaFRXRndWSEpoYm5ObWIzSnRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dTR1VLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUdGc2NHaGhWR1Z6ZERvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNQW9nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtmU3dnYm00Z1BTQjdDaUFnSUNCaVlYTnBZem9nZXdvZ0lDQWdJQ0FnSUhWdWFXWnZjbTF6T2lCTWRDaGJDaUFnSUNBZ0lDQWdJQ0FnSUd4bExtTnZiVzF2Yml3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1YzNCbFkzVnNZWEp0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG1WdWRtMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVZVzl0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG14cFoyaDBiV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnNaUzVtYjJjS0lDQWdJQ0FnSUNCZEtTd0tJQ0FnSUNBZ0lDQjJaWEowWlhoVGFHRmtaWEk2SUd0bExtMWxjMmhpWVhOcFkxOTJaWEowTEFvZ0lDQWdJQ0FnSUdaeVlXZHRaVzUwVTJoaFpHVnlPaUJyWlM1dFpYTm9ZbUZ6YVdOZlpuSmhad29nSUNBZ2ZTd0tJQ0FnSUd4aGJXSmxjblE2SUhzS0lDQWdJQ0FnSUNCMWJtbG1iM0p0Y3pvZ1RIUW9Xd29nSUNBZ0lDQWdJQ0FnSUNCc1pTNWpiMjF0YjI0c0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG5Od1pXTjFiR0Z5YldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1bGJuWnRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbUZ2YldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1c2FXZG9kRzFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1WlcxcGMzTnBkbVZ0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG1KMWJYQnRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbTV2Y20xaGJHMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVaR2x6Y0d4aFkyVnRaVzUwYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1bWIyY3NDaUFnSUNBZ0lDQWdJQ0FnSUd4bExteHBaMmgwY3l3S0lDQWdJQ0FnSUNBZ0lDQWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzFwYzNOcGRtVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lIQmxLREFwQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQmRLU3dLSUNBZ0lDQWdJQ0IyWlhKMFpYaFRhR0ZrWlhJNklHdGxMbTFsYzJoc1lXMWlaWEowWDNabGNuUXNDaUFnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJNklHdGxMbTFsYzJoc1lXMWlaWEowWDJaeVlXY0tJQ0FnSUgwc0NpQWdJQ0J3YUc5dVp6b2dld29nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUJNZENoYkNpQWdJQ0FnSUNBZ0lDQWdJR3hsTG1OdmJXMXZiaXdLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVjM0JsWTNWc1lYSnRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbVZ1ZG0xaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdVlXOXRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbXhwWjJoMGJXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCc1pTNWxiV2x6YzJsMlpXMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVZblZ0Y0cxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdWJtOXliV0ZzYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1a2FYTndiR0ZqWlcxbGJuUnRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbVp2Wnl3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1YkdsbmFIUnpMQW9nSUNBZ0lDQWdJQ0FnSUNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJXbHpjMmwyWlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnY0dVb01Da0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjR1ZqZFd4aGNqb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ2NHVW9NVEV4T0RRNE1Ta0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR2x1YVc1bGMzTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTXpBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJRjBwTEFvZ0lDQWdJQ0FnSUhabGNuUmxlRk5vWVdSbGNqb2dhMlV1YldWemFIQm9iMjVuWDNabGNuUXNDaUFnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJNklHdGxMbTFsYzJod2FHOXVaMTltY21GbkNpQWdJQ0I5TEFvZ0lDQWdjM1JoYm1SaGNtUTZJSHNLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nVEhRb1d3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1amIyMXRiMjRzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbVZ1ZG0xaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdVlXOXRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbXhwWjJoMGJXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCc1pTNWxiV2x6YzJsMlpXMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVZblZ0Y0cxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdWJtOXliV0ZzYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1a2FYTndiR0ZqWlcxbGJuUnRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbkp2ZFdkb2JtVnpjMjFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1YldWMFlXeHVaWE56YldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1bWIyY3NDaUFnSUNBZ0lDQWdJQ0FnSUd4bExteHBaMmgwY3l3S0lDQWdJQ0FnSUNBZ0lDQWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzFwYzNOcGRtVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lIQmxLREFwQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205MVoyaHVaWE56T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklERUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWFJoYkc1bGMzTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdWRrMWhjRWx1ZEdWdWMybDBlVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBeENpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JkS1N3S0lDQWdJQ0FnSUNCMlpYSjBaWGhUYUdGa1pYSTZJR3RsTG0xbGMyaHdhSGx6YVdOaGJGOTJaWEowTEFvZ0lDQWdJQ0FnSUdaeVlXZHRaVzUwVTJoaFpHVnlPaUJyWlM1dFpYTm9jR2g1YzJsallXeGZabkpoWndvZ0lDQWdmU3dLSUNBZ0lIUnZiMjQ2SUhzS0lDQWdJQ0FnSUNCMWJtbG1iM0p0Y3pvZ1RIUW9Xd29nSUNBZ0lDQWdJQ0FnSUNCc1pTNWpiMjF0YjI0c0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG1GdmJXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCc1pTNXNhV2RvZEcxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdVdVpXMXBjM05wZG1WdFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUd4bExtSjFiWEJ0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG01dmNtMWhiRzFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1WkdsemNHeGhZMlZ0Wlc1MGJXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCc1pTNW5jbUZrYVdWdWRHMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVabTluTEFvZ0lDQWdJQ0FnSUNBZ0lDQnNaUzVzYVdkb2RITXNDaUFnSUNBZ0lDQWdJQ0FnSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdGFYTnphWFpsT2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJ3WlNnd0tRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWFNrc0NpQWdJQ0FnSUNBZ2RtVnlkR1Y0VTJoaFpHVnlPaUJyWlM1dFpYTm9kRzl2Ymw5MlpYSjBMQW9nSUNBZ0lDQWdJR1p5WVdkdFpXNTBVMmhoWkdWeU9pQnJaUzV0WlhOb2RHOXZibDltY21GbkNpQWdJQ0I5TEFvZ0lDQWdiV0YwWTJGd09pQjdDaUFnSUNBZ0lDQWdkVzVwWm05eWJYTTZJRXgwS0ZzS0lDQWdJQ0FnSUNBZ0lDQWdiR1V1WTI5dGJXOXVMQW9nSUNBZ0lDQWdJQ0FnSUNCc1pTNWlkVzF3YldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1dWIzSnRZV3h0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG1ScGMzQnNZV05sYldWdWRHMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVabTluTEFvZ0lDQWdJQ0FnSUNBZ0lDQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJqWVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdYU2tzQ2lBZ0lDQWdJQ0FnZG1WeWRHVjRVMmhoWkdWeU9pQnJaUzV0WlhOb2JXRjBZMkZ3WDNabGNuUXNDaUFnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJNklHdGxMbTFsYzJodFlYUmpZWEJmWm5KaFp3b2dJQ0FnZlN3S0lDQWdJSEJ2YVc1MGN6b2dld29nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUJNZENoYkNpQWdJQ0FnSUNBZ0lDQWdJR3hsTG5CdmFXNTBjeXdLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVabTluQ2lBZ0lDQWdJQ0FnWFNrc0NpQWdJQ0FnSUNBZ2RtVnlkR1Y0VTJoaFpHVnlPaUJyWlM1d2IybHVkSE5mZG1WeWRDd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ2EyVXVjRzlwYm5SelgyWnlZV2NLSUNBZ0lIMHNDaUFnSUNCa1lYTm9aV1E2SUhzS0lDQWdJQ0FnSUNCMWJtbG1iM0p0Y3pvZ1RIUW9Xd29nSUNBZ0lDQWdJQ0FnSUNCc1pTNWpiMjF0YjI0c0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG1adlp5d0tJQ0FnSUNBZ0lDQWdJQ0FnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOaGJHVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTVFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGMyaFRhWHBsT2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklERUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiM1JoYkZOcGVtVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTWdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdYU2tzQ2lBZ0lDQWdJQ0FnZG1WeWRHVjRVMmhoWkdWeU9pQnJaUzVzYVc1bFpHRnphR1ZrWDNabGNuUXNDaUFnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJNklHdGxMbXhwYm1Wa1lYTm9aV1JmWm5KaFp3b2dJQ0FnZlN3S0lDQWdJR1JsY0hSb09pQjdDaUFnSUNBZ0lDQWdkVzVwWm05eWJYTTZJRXgwS0ZzS0lDQWdJQ0FnSUNBZ0lDQWdiR1V1WTI5dGJXOXVMQW9nSUNBZ0lDQWdJQ0FnSUNCc1pTNWthWE53YkdGalpXMWxiblJ0WVhBS0lDQWdJQ0FnSUNCZEtTd0tJQ0FnSUNBZ0lDQjJaWEowWlhoVGFHRmtaWEk2SUd0bExtUmxjSFJvWDNabGNuUXNDaUFnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJNklHdGxMbVJsY0hSb1gyWnlZV2NLSUNBZ0lIMHNDaUFnSUNCdWIzSnRZV3c2SUhzS0lDQWdJQ0FnSUNCMWJtbG1iM0p0Y3pvZ1RIUW9Xd29nSUNBZ0lDQWdJQ0FnSUNCc1pTNWpiMjF0YjI0c0NpQWdJQ0FnSUNBZ0lDQWdJR3hsTG1KMWJYQnRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbTV2Y20xaGJHMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHVXVaR2x6Y0d4aFkyVnRaVzUwYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Y0dGamFYUjVPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJRjBwTEFvZ0lDQWdJQ0FnSUhabGNuUmxlRk5vWVdSbGNqb2dhMlV1YldWemFHNXZjbTFoYkY5MlpYSjBMQW9nSUNBZ0lDQWdJR1p5WVdkdFpXNTBVMmhoWkdWeU9pQnJaUzV0WlhOb2JtOXliV0ZzWDJaeVlXY0tJQ0FnSUgwc0NpQWdJQ0J6Y0hKcGRHVTZJSHNLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nVEhRb1d3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlM1emNISnBkR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeGxMbVp2WndvZ0lDQWdJQ0FnSUYwcExBb2dJQ0FnSUNBZ0lIWmxjblJsZUZOb1lXUmxjam9nYTJVdWMzQnlhWFJsWDNabGNuUXNDaUFnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJNklHdGxMbk53Y21sMFpWOW1jbUZuQ2lBZ0lDQjlMQW9nSUNBZ1ltRmphMmR5YjNWdVpEb2dld29nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIVjJWSEpoYm5ObWIzSnRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dibVYzSUVobENpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUXlSRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1ltRmphMmR5YjNWdVpFbHVkR1Z1YzJsMGVUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklERUtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2RtVnlkR1Y0VTJoaFpHVnlPaUJyWlM1aVlXTnJaM0p2ZFc1a1gzWmxjblFzQ2lBZ0lDQWdJQ0FnWm5KaFoyMWxiblJUYUdGa1pYSTZJR3RsTG1KaFkydG5jbTkxYm1SZlpuSmhad29nSUNBZ2ZTd0tJQ0FnSUdKaFkydG5jbTkxYm1SRGRXSmxPaUI3Q2lBZ0lDQWdJQ0FnZFc1cFptOXliWE02SUhzS0lDQWdJQ0FnSUNBZ0lDQWdaVzUyVFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0JtYkdsd1JXNTJUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTFRFS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1ltRmphMmR5YjNWdVpFSnNkWEp5YVc1bGMzTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJR0poWTJ0bmNtOTFibVJKYm5SbGJuTnBkSGs2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ2EyVXVZbUZqYTJkeWIzVnVaRU4xWW1WZmRtVnlkQ3dLSUNBZ0lDQWdJQ0JtY21GbmJXVnVkRk5vWVdSbGNqb2dhMlV1WW1GamEyZHliM1Z1WkVOMVltVmZabkpoWndvZ0lDQWdmU3dLSUNBZ0lHTjFZbVU2SUhzS0lDQWdJQ0FnSUNCMWJtbG1iM0p0Y3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwUTNWaVpUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiR3dLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnZEVac2FYQTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXRNUW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0J2Y0dGamFYUjVPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQjJaWEowWlhoVGFHRmtaWEk2SUd0bExtTjFZbVZmZG1WeWRDd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ2EyVXVZM1ZpWlY5bWNtRm5DaUFnSUNCOUxBb2dJQ0FnWlhGMWFYSmxZM1E2SUhzS0lDQWdJQ0FnSUNCMWJtbG1iM0p0Y3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwUlhGMWFYSmxZM1E2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUhabGNuUmxlRk5vWVdSbGNqb2dhMlV1WlhGMWFYSmxZM1JmZG1WeWRDd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ2EyVXVaWEYxYVhKbFkzUmZabkpoWndvZ0lDQWdmU3dLSUNBZ0lHUnBjM1JoYm1ObFVrZENRVG9nZXdvZ0lDQWdJQ0FnSUhWdWFXWnZjbTF6T2lCTWRDaGJDaUFnSUNBZ0lDQWdJQ0FnSUd4bExtTnZiVzF2Yml3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1WkdsemNHeGhZMlZ0Wlc1MGJXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXWmxjbVZ1WTJWUWIzTnBkR2x2YmpvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnUVFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bFlYSkVhWE4wWVc1alpUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1GeVJHbHpkR0Z1WTJVNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNV1V6Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQmRLU3dLSUNBZ0lDQWdJQ0IyWlhKMFpYaFRhR0ZrWlhJNklHdGxMbVJwYzNSaGJtTmxVa2RDUVY5MlpYSjBMQW9nSUNBZ0lDQWdJR1p5WVdkdFpXNTBVMmhoWkdWeU9pQnJaUzVrYVhOMFlXNWpaVkpIUWtGZlpuSmhad29nSUNBZ2ZTd0tJQ0FnSUhOb1lXUnZkem9nZXdvZ0lDQWdJQ0FnSUhWdWFXWnZjbTF6T2lCTWRDaGJDaUFnSUNBZ0lDQWdJQ0FnSUd4bExteHBaMmgwY3l3S0lDQWdJQ0FnSUNBZ0lDQWdiR1V1Wm05bkxBb2dJQ0FnSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ2NHVW9NQ2tLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Y0dGamFYUjVPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJRjBwTEFvZ0lDQWdJQ0FnSUhabGNuUmxlRk5vWVdSbGNqb2dhMlV1YzJoaFpHOTNYM1psY25Rc0NpQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUd0bExuTm9ZV1J2ZDE5bWNtRm5DaUFnSUNCOUNuMDdDbTV1TG5Cb2VYTnBZMkZzSUQwZ2V3b2dJQ0FnZFc1cFptOXliWE02SUV4MEtGc0tJQ0FnSUNBZ0lDQnViaTV6ZEdGdVpHRnlaQzUxYm1sbWIzSnRjeXdLSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z5WTI5aGREb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklEQUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdZMnhsWVhKamIyRjBUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY21OdllYUk5ZWEJVY21GdWMyWnZjbTA2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1NHVUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdZMnhsWVhKamIyRjBUbTl5YldGc1RXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCamJHVmhjbU52WVhST2IzSnRZV3hOWVhCVWNtRnVjMlp2Y20wNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dTR1VLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSmpiMkYwVG05eWJXRnNVMk5oYkdVNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dXaWd4TENBeEtRb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVkyOWhkRkp2ZFdkb2JtVnpjMDFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpUV0Z3VkhKaGJuTm1iM0p0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lFaGxDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJR2x5YVdSbGMyTmxibU5sT2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTUFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCcGNtbGtaWE5qWlc1alpVMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FYSnBaR1Z6WTJWdVkyVk5ZWEJVY21GdWMyWnZjbTA2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1NHVUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdhWEpwWkdWelkyVnVZMlZKVDFJNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBeExqTUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OYVc1cGJYVnRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNVEF3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUdseWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOelRXRjRhVzExYlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURRd01Bb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnBjbWxrWlhOalpXNWpaVlJvYVdOcmJtVnpjMDFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhCVWNtRnVjMlp2Y20wNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dTR1VLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJobFpXNDZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSE5vWldWdVEyOXNiM0k2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ2NHVW9NQ2tLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJobFpXNURiMnh2Y2sxaGNEb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiR3dLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJobFpXNURiMnh2Y2sxaGNGUnlZVzV6Wm05eWJUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJJWlFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCemFHVmxibEp2ZFdkb2JtVnpjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREVLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJobFpXNVNiM1ZuYUc1bGMzTk5ZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9aV1Z1VW05MVoyaHVaWE56VFdGd1ZISmhibk5tYjNKdE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNJRWhsQ2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpiV2x6YzJsdmJqb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklEQUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5OdGFYTnphVzl1VFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyMXBjM05wYjI1TllYQlVjbUZ1YzJadmNtMDZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnU0dVS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk50YVhOemFXOXVVMkZ0Y0d4bGNsTnBlbVU2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1dnb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzIxcGMzTnBiMjVUWVcxd2JHVnlUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2xqYTI1bGMzTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVdOcmJtVnpjMDFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdkR2hwWTJ0dVpYTnpUV0Z3VkhKaGJuTm1iM0p0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lFaGxDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJR0YwZEdWdWRXRjBhVzl1UkdsemRHRnVZMlU2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUdGMGRHVnVkV0YwYVc5dVEyOXNiM0k2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ2NHVW9NQ2tLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzNCbFkzVnNZWEpEYjJ4dmNqb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJ3WlNneExDQXhMQ0F4S1FvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCemNHVmpkV3hoY2tOdmJHOXlUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnpjR1ZqZFd4aGNrTnZiRzl5VFdGd1ZISmhibk5tYjNKdE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNJRWhsQ2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhOd1pXTjFiR0Z5U1c1MFpXNXphWFI1T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTVFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCemNHVmpkV3hoY2tsdWRHVnVjMmwwZVUxaGNEb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiR3dLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhCVWNtRnVjMlp2Y20wNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dTR1VLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnWVc1cGMyOTBjbTl3ZVZabFkzUnZjam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzVsZHlCYUNpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRnVhWE52ZEhKdmNIbE5ZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRnVhWE52ZEhKdmNIbE5ZWEJVY21GdWMyWnZjbTA2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1NHVUtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJRjBwTEFvZ0lDQWdkbVZ5ZEdWNFUyaGhaR1Z5T2lCclpTNXRaWE5vY0doNWMybGpZV3hmZG1WeWRDd0tJQ0FnSUdaeVlXZHRaVzUwVTJoaFpHVnlPaUJyWlM1dFpYTm9jR2g1YzJsallXeGZabkpoWndwOU93cDJZWElnWTNJZ1BTQjdDaUFnSUNCeU9pQXdMQW9nSUNBZ1lqb2dNQ3dLSUNBZ0lHYzZJREFLZlRzS1puVnVZM1JwYjI0Z2RGOG9jekVzSUdVc0lIUXNJRzRzSUdrc0lISXNJR0VwSUhzS0lDQWdJR3hsZENCdklEMGdibVYzSUhCbEtEQXBMQ0JqSUQwZ2NpQTlQVDBnSVRBZ1B5QXdJRG9nTVN3Z2JDd2dhQ3dnZFNBOUlHNTFiR3dzSUdRZ1BTQXdMQ0JtSUQwZ2JuVnNiRHNLSUNBZ0lHWjFibU4wYVc5dUlHMG9aeXdnY0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IySUQwZ0lURXNJSGdnUFNCd0xtbHpVMk5sYm1VZ1BUMDlJQ0V3SUQ4Z2NDNWlZV05yWjNKdmRXNWtJRG9nYm5Wc2JEc0tJQ0FnSUNBZ0lDQjRJQ1ltSUhndWFYTlVaWGgwZFhKbElDWW1JQ2g0SUQwZ0tIQXVZbUZqYTJkeWIzVnVaRUpzZFhKeWFXNWxjM01nUGlBd0lEOGdkQ0E2SUdVcExtZGxkQ2g0S1Nrc0lIZ2dQVDA5SUc1MWJHd2dQeUJmS0c4c0lHTXBJRG9nZUNBbUppQjRMbWx6UTI5c2IzSWdKaVlnS0Y4b2VDd2dNU2tzSUhZZ1BTQWhNQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElIa2dQU0J6TVM1NGNpNW5aWFJGYm5acGNtOXViV1Z1ZEVKc1pXNWtUVzlrWlNncE93b2dJQ0FnSUNBZ0lIa2dQVDA5SUNKaFpHUnBkR2wyWlNJZ1B5QnVMbUoxWm1abGNuTXVZMjlzYjNJdWMyVjBRMnhsWVhJb01Dd2dNQ3dnTUN3Z01Td2dZU2tnT2lCNUlEMDlQU0FpWVd4d2FHRXRZbXhsYm1RaUlDWW1JRzR1WW5WbVptVnljeTVqYjJ4dmNpNXpaWFJEYkdWaGNpZ3dMQ0F3TENBd0xDQXdMQ0JoS1N3Z0tITXhMbUYxZEc5RGJHVmhjaUI4ZkNCMktTQW1KaUJ6TVM1amJHVmhjaWh6TVM1aGRYUnZRMnhsWVhKRGIyeHZjaXdnY3pFdVlYVjBiME5zWldGeVJHVndkR2dzSUhNeExtRjFkRzlEYkdWaGNsTjBaVzVqYVd3cExDQjRJQ1ltSUNoNExtbHpRM1ZpWlZSbGVIUjFjbVVnZkh3Z2VDNXRZWEJ3YVc1bklEMDlQU0JXY3lrZ1B5QW9hQ0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaG9JRDBnYm1WM0lFMTBLRzVsZHlCS2FTZ3hMQ0F4TENBeEtTd2dibVYzSUdwMEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dJa0poWTJ0bmNtOTFibVJEZFdKbFRXRjBaWEpwWVd3aUxBb2dJQ0FnSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nSkdrb2JtNHVZbUZqYTJkeWIzVnVaRU4xWW1VdWRXNXBabTl5YlhNcExBb2dJQ0FnSUNBZ0lDQWdJQ0IyWlhKMFpYaFRhR0ZrWlhJNklHNXVMbUpoWTJ0bmNtOTFibVJEZFdKbExuWmxjblJsZUZOb1lXUmxjaXdLSUNBZ0lDQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUc1dUxtSmhZMnRuY205MWJtUkRkV0psTG1aeVlXZHRaVzUwVTJoaFpHVnlMQW9nSUNBZ0lDQWdJQ0FnSUNCemFXUmxPaUJHZEN3S0lDQWdJQ0FnSUNBZ0lDQWdaR1Z3ZEdoVVpYTjBPaUFoTVN3S0lDQWdJQ0FnSUNBZ0lDQWdaR1Z3ZEdoWGNtbDBaVG9nSVRFc0NpQWdJQ0FnSUNBZ0lDQWdJR1p2WnpvZ0lURUtJQ0FnSUNBZ0lDQjlLU2tzSUdndVoyVnZiV1YwY25rdVpHVnNaWFJsUVhSMGNtbGlkWFJsS0NKdWIzSnRZV3dpS1N3Z2FDNW5aVzl0WlhSeWVTNWtaV3hsZEdWQmRIUnlhV0oxZEdVb0luVjJJaWtzSUdndWIyNUNaV1p2Y21WU1pXNWtaWElnUFNCbWRXNWpkR2x2YmloaUxDQjNMQ0JTS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXVZMjl3ZVZCdmMybDBhVzl1S0ZJdWJXRjBjbWw0VjI5eWJHUXBPd29nSUNBZ0lDQWdJSDBzSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaG9MbTFoZEdWeWFXRnNMQ0FpWlc1MlRXRndJaXdnZXdvZ0lDQWdJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkVzVwWm05eWJYTXVaVzUyVFdGd0xuWmhiSFZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU2tzSUdrdWRYQmtZWFJsS0dncEtTd2dhQzV0WVhSbGNtbGhiQzUxYm1sbWIzSnRjeTVsYm5aTllYQXVkbUZzZFdVZ1BTQjRMQ0JvTG0xaGRHVnlhV0ZzTG5WdWFXWnZjbTF6TG1ac2FYQkZiblpOWVhBdWRtRnNkV1VnUFNCNExtbHpRM1ZpWlZSbGVIUjFjbVVnSmlZZ2VDNXBjMUpsYm1SbGNsUmhjbWRsZEZSbGVIUjFjbVVnUFQwOUlDRXhJRDhnTFRFZ09pQXhMQ0JvTG0xaGRHVnlhV0ZzTG5WdWFXWnZjbTF6TG1KaFkydG5jbTkxYm1SQ2JIVnljbWx1WlhOekxuWmhiSFZsSUQwZ2NDNWlZV05yWjNKdmRXNWtRbXgxY25KcGJtVnpjeXdnYUM1dFlYUmxjbWxoYkM1MWJtbG1iM0p0Y3k1aVlXTnJaM0p2ZFc1a1NXNTBaVzV6YVhSNUxuWmhiSFZsSUQwZ2NDNWlZV05yWjNKdmRXNWtTVzUwWlc1emFYUjVMQ0JvTG0xaGRHVnlhV0ZzTG5SdmJtVk5ZWEJ3WldRZ1BTQlJaUzVuWlhSVWNtRnVjMlpsY2loNExtTnZiRzl5VTNCaFkyVXBJQ0U5UFNCdWRDd2dLSFVnSVQwOUlIZ2dmSHdnWkNBaFBUMGdlQzUyWlhKemFXOXVJSHg4SUdZZ0lUMDlJSE14TG5SdmJtVk5ZWEJ3YVc1bktTQW1KaUFvYUM1dFlYUmxjbWxoYkM1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCMUlEMGdlQ3dnWkNBOUlIZ3VkbVZ5YzJsdmJpd2daaUE5SUhNeExuUnZibVZOWVhCd2FXNW5LU3dnYUM1c1lYbGxjbk11Wlc1aFlteGxRV3hzS0Nrc0lHY3VkVzV6YUdsbWRDaG9MQ0JvTG1kbGIyMWxkSEo1TENCb0xtMWhkR1Z5YVdGc0xDQXdMQ0F3TENCdWRXeHNLU2tnT2lCNElDWW1JSGd1YVhOVVpYaDBkWEpsSUNZbUlDaHNJRDA5UFNCMmIybGtJREFnSmlZZ0tHd2dQU0J1WlhjZ1RYUW9ibVYzSUNSeUtESXNJRElwTENCdVpYY2dhblFvZXdvZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBaVFtRmphMmR5YjNWdVpFMWhkR1Z5YVdGc0lpd0tJQ0FnSUNBZ0lDQWdJQ0FnZFc1cFptOXliWE02SUNScEtHNXVMbUpoWTJ0bmNtOTFibVF1ZFc1cFptOXliWE1wTEFvZ0lDQWdJQ0FnSUNBZ0lDQjJaWEowWlhoVGFHRmtaWEk2SUc1dUxtSmhZMnRuY205MWJtUXVkbVZ5ZEdWNFUyaGhaR1Z5TEFvZ0lDQWdJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ2JtNHVZbUZqYTJkeWIzVnVaQzVtY21GbmJXVnVkRk5vWVdSbGNpd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJsa1pUb2dRbTRzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmxjSFJvVkdWemREb2dJVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmxjSFJvVjNKcGRHVTZJQ0V4TEFvZ0lDQWdJQ0FnSUNBZ0lDQm1iMmM2SUNFeENpQWdJQ0FnSUNBZ2ZTa3BMQ0JzTG1kbGIyMWxkSEo1TG1SbGJHVjBaVUYwZEhKcFluVjBaU2dpYm05eWJXRnNJaWtzSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHNMbTFoZEdWeWFXRnNMQ0FpYldGd0lpd2dld29nSUNBZ0lDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRXNXBabTl5YlhNdWRESkVMblpoYkhWbE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlNrc0lHa3VkWEJrWVhSbEtHd3BLU3dnYkM1dFlYUmxjbWxoYkM1MWJtbG1iM0p0Y3k1ME1rUXVkbUZzZFdVZ1BTQjRMQ0JzTG0xaGRHVnlhV0ZzTG5WdWFXWnZjbTF6TG1KaFkydG5jbTkxYm1SSmJuUmxibk5wZEhrdWRtRnNkV1VnUFNCd0xtSmhZMnRuY205MWJtUkpiblJsYm5OcGRIa3NJR3d1YldGMFpYSnBZV3d1ZEc5dVpVMWhjSEJsWkNBOUlGRmxMbWRsZEZSeVlXNXpabVZ5S0hndVkyOXNiM0pUY0dGalpTa2dJVDA5SUc1MExDQjRMbTFoZEhKcGVFRjFkRzlWY0dSaGRHVWdQVDA5SUNFd0lDWW1JSGd1ZFhCa1lYUmxUV0YwY21sNEtDa3NJR3d1YldGMFpYSnBZV3d1ZFc1cFptOXliWE11ZFhaVWNtRnVjMlp2Y20wdWRtRnNkV1V1WTI5d2VTaDRMbTFoZEhKcGVDa3NJQ2gxSUNFOVBTQjRJSHg4SUdRZ0lUMDlJSGd1ZG1WeWMybHZiaUI4ZkNCbUlDRTlQU0J6TVM1MGIyNWxUV0Z3Y0dsdVp5a2dKaVlnS0d3dWJXRjBaWEpwWVd3dWJtVmxaSE5WY0dSaGRHVWdQU0FoTUN3Z2RTQTlJSGdzSUdRZ1BTQjRMblpsY25OcGIyNHNJR1lnUFNCek1TNTBiMjVsVFdGd2NHbHVaeWtzSUd3dWJHRjVaWEp6TG1WdVlXSnNaVUZzYkNncExDQm5MblZ1YzJocFpuUW9iQ3dnYkM1blpXOXRaWFJ5ZVN3Z2JDNXRZWFJsY21saGJDd2dNQ3dnTUN3Z2JuVnNiQ2twT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1h5aG5MQ0J3S1NCN0NpQWdJQ0FnSUNBZ1p5NW5aWFJTUjBJb1kzSXNJR0prS0hNeEtTa3NJRzR1WW5WbVptVnljeTVqYjJ4dmNpNXpaWFJEYkdWaGNpaGpjaTV5TENCamNpNW5MQ0JqY2k1aUxDQndMQ0JoS1RzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCN0NpQWdJQ0FnSUNBZ1oyVjBRMnhsWVhKRGIyeHZjam9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnZPd29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYzJWMFEyeGxZWEpEYjJ4dmNqb2dablZ1WTNScGIyNG9aeXdnY0NBOUlERXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2J5NXpaWFFvWnlrc0lHTWdQU0J3TENCZktHOHNJR01wT3dvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ1oyVjBRMnhsWVhKQmJIQm9ZVG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpPd29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYzJWMFEyeGxZWEpCYkhCb1lUb2dablZ1WTNScGIyNG9aeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpJRDBnWnl3Z1h5aHZMQ0JqS1RzS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lISmxibVJsY2pvZ2JRb2dJQ0FnZlRzS2ZRcG1kVzVqZEdsdmJpQnVYeWh6TVN3Z1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnYkdWMElHa2dQU0J6TVM1blpYUlFZWEpoYldWMFpYSW9jekV1VFVGWVgxWkZVbFJGV0Y5QlZGUlNTVUpUS1N3Z2NpQTlJRzR1YVhOWFpXSkhURElnUHlCdWRXeHNJRG9nWlM1blpYUW9JazlGVTE5MlpYSjBaWGhmWVhKeVlYbGZiMkpxWldOMElpa3NJR0VnUFNCdUxtbHpWMlZpUjB3eUlIeDhJSElnSVQwOUlHNTFiR3dzSUc4Z1BTQjdmU3dnWXlBOUlHY29iblZzYkNrc0lHd2dQU0JqTENCb0lEMGdJVEU3Q2lBZ0lDQm1kVzVqZEdsdmJpQjFLRlVzSUhvc0lIRXNJRWdzSUc1bEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUZjZ1BTQWhNVHNLSUNBZ0lDQWdJQ0JwWmlBb1lTa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdTeUE5SUY4b1NDd2djU3dnZWlrN0NpQWdJQ0FnSUNBZ0lDQWdJR3dnSVQwOUlFc2dKaVlnS0d3Z1BTQkxMQ0JtS0d3dWIySnFaV04wS1Nrc0lGY2dQU0J3S0ZVc0lFZ3NJSEVzSUc1bEtTd2dWeUFtSmlCMktGVXNJRWdzSUhFc0lHNWxLVHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdTeUE5SUhvdWQybHlaV1p5WVcxbElEMDlQU0FoTURzS0lDQWdJQ0FnSUNBZ0lDQWdLR3d1WjJWdmJXVjBjbmtnSVQwOUlFZ3VhV1FnZkh3Z2JDNXdjbTluY21GdElDRTlQU0J4TG1sa0lIeDhJR3d1ZDJseVpXWnlZVzFsSUNFOVBTQkxLU0FtSmlBb2JDNW5aVzl0WlhSeWVTQTlJRWd1YVdRc0lHd3VjSEp2WjNKaGJTQTlJSEV1YVdRc0lHd3VkMmx5WldaeVlXMWxJRDBnU3l3Z1Z5QTlJQ0V3S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JtVWdJVDA5SUc1MWJHd2dKaVlnZEM1MWNHUmhkR1VvYm1Vc0lITXhMa1ZNUlUxRlRsUmZRVkpTUVZsZlFsVkdSa1ZTS1N3Z0tGY2dmSHdnYUNrZ0ppWWdLR2dnUFNBaE1Td2dTU2hWTENCNkxDQnhMQ0JJS1N3Z2JtVWdJVDA5SUc1MWJHd2dKaVlnY3pFdVltbHVaRUoxWm1abGNpaHpNUzVGVEVWTlJVNVVYMEZTVWtGWlgwSlZSa1pGVWl3Z2RDNW5aWFFvYm1VcExtSjFabVpsY2lrcE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdaQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmk1cGMxZGxZa2RNTWlBL0lITXhMbU55WldGMFpWWmxjblJsZUVGeWNtRjVLQ2tnT2lCeUxtTnlaV0YwWlZabGNuUmxlRUZ5Y21GNVQwVlRLQ2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCbUtGVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaTVwYzFkbFlrZE1NaUEvSUhNeExtSnBibVJXWlhKMFpYaEJjbkpoZVNoVktTQTZJSEl1WW1sdVpGWmxjblJsZUVGeWNtRjVUMFZUS0ZVcE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdiU2hWS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0dWFYTlhaV0pIVERJZ1B5QnpNUzVrWld4bGRHVldaWEowWlhoQmNuSmhlU2hWS1NBNklISXVaR1ZzWlhSbFZtVnlkR1Y0UVhKeVlYbFBSVk1vVlNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQmZLRlVzSUhvc0lIRXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1NDQTlJSEV1ZDJseVpXWnlZVzFsSUQwOVBTQWhNQ3dnYm1VZ1BTQnZXMVV1YVdSZE93b2dJQ0FnSUNBZ0lHNWxJRDA5UFNCMmIybGtJREFnSmlZZ0tHNWxJRDBnZTMwc0lHOWJWUzVwWkYwZ1BTQnVaU2s3Q2lBZ0lDQWdJQ0FnYkdWMElGY2dQU0J1WlZ0NkxtbGtYVHNLSUNBZ0lDQWdJQ0JYSUQwOVBTQjJiMmxrSURBZ0ppWWdLRmNnUFNCN2ZTd2dibVZiZWk1cFpGMGdQU0JYS1RzS0lDQWdJQ0FnSUNCc1pYUWdTeUE5SUZkYlNGMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFc2dQVDA5SUhadmFXUWdNQ0FtSmlBb1N5QTlJR2NvWkNncEtTd2dWMXRJWFNBOUlFc3BMQ0JMT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1p5aFZLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIb2dQU0JiWFN3Z2NTQTlJRnRkTENCSUlEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1WlNBOUlEQTdJRzVsSUR3Z2FUc2dibVVyS3lsNlcyNWxYU0E5SURBc0lIRmJibVZkSUQwZ01Dd2dTRnR1WlYwZ1BTQXdPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdJQ0FnSUdkbGIyMWxkSEo1T2lCdWRXeHNMQW9nSUNBZ0lDQWdJQ0FnSUNCd2NtOW5jbUZ0T2lCdWRXeHNMQW9nSUNBZ0lDQWdJQ0FnSUNCM2FYSmxabkpoYldVNklDRXhMQW9nSUNBZ0lDQWdJQ0FnSUNCdVpYZEJkSFJ5YVdKMWRHVnpPaUI2TEFvZ0lDQWdJQ0FnSUNBZ0lDQmxibUZpYkdWa1FYUjBjbWxpZFhSbGN6b2djU3dLSUNBZ0lDQWdJQ0FnSUNBZ1lYUjBjbWxpZFhSbFJHbDJhWE52Y25NNklFZ3NDaUFnSUNBZ0lDQWdJQ0FnSUc5aWFtVmpkRG9nVlN3S0lDQWdJQ0FnSUNBZ0lDQWdZWFIwY21saWRYUmxjem9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnZlRzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlIQW9WU3dnZWl3Z2NTd2dTQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVaU0E5SUd3dVlYUjBjbWxpZFhSbGN5d2dWeUE5SUhvdVlYUjBjbWxpZFhSbGN5d2dTeUE5SURBc0lFUWdQU0J4TG1kbGRFRjBkSEpwWW5WMFpYTW9LVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRWNnYVc0Z1JDbHBaaUFvUkZ0SFhTNXNiMk5oZEdsdmJpQStQU0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbVpTQTlJRzVsVzBkZExDQmZaU0E5SUZkYlIxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZaU0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaEhJRDA5UFNBaWFXNXpkR0Z1WTJWTllYUnlhWGdpSUNZbUlGVXVhVzV6ZEdGdVkyVk5ZWFJ5YVhnZ0ppWWdLRjlsSUQwZ1ZTNXBibk4wWVc1alpVMWhkSEpwZUNrc0lFY2dQVDA5SUNKcGJuTjBZVzVqWlVOdmJHOXlJaUFtSmlCVkxtbHVjM1JoYm1ObFEyOXNiM0lnSmlZZ0tGOWxJRDBnVlM1cGJuTjBZVzVqWlVOdmJHOXlLU2tzSUdabElEMDlQU0IyYjJsa0lEQWdmSHdnWm1VdVlYUjBjbWxpZFhSbElDRTlQU0JmWlNCOGZDQmZaU0FtSmlCbVpTNWtZWFJoSUNFOVBTQmZaUzVrWVhSaEtTQnlaWFIxY200Z0lUQTdDaUFnSUNBZ0lDQWdJQ0FnSUVzckt6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHd3VZWFIwY21saWRYUmxjMDUxYlNBaFBUMGdTeUI4ZkNCc0xtbHVaR1Y0SUNFOVBTQklPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnZGloVkxDQjZMQ0J4TENCSUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc1bElEMGdlMzBzSUZjZ1BTQjZMbUYwZEhKcFluVjBaWE1zSUVzZ1BTQXdMQ0JFSUQwZ2NTNW5aWFJCZEhSeWFXSjFkR1Z6S0NrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCSElHbHVJRVFwYVdZZ0tFUmJSMTB1Ykc5allYUnBiMjRnUGowZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdabVVnUFNCWFcwZGRPd29nSUNBZ0lDQWdJQ0FnSUNCbVpTQTlQVDBnZG05cFpDQXdJQ1ltSUNoSElEMDlQU0FpYVc1emRHRnVZMlZOWVhSeWFYZ2lJQ1ltSUZVdWFXNXpkR0Z1WTJWTllYUnlhWGdnSmlZZ0tHWmxJRDBnVlM1cGJuTjBZVzVqWlUxaGRISnBlQ2tzSUVjZ1BUMDlJQ0pwYm5OMFlXNWpaVU52Ykc5eUlpQW1KaUJWTG1sdWMzUmhibU5sUTI5c2IzSWdKaVlnS0dabElEMGdWUzVwYm5OMFlXNWpaVU52Ykc5eUtTazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmZaU0E5SUh0OU93b2dJQ0FnSUNBZ0lDQWdJQ0JmWlM1aGRIUnlhV0oxZEdVZ1BTQm1aU3dnWm1VZ0ppWWdabVV1WkdGMFlTQW1KaUFvWDJVdVpHRjBZU0E5SUdabExtUmhkR0VwTENCdVpWdEhYU0E5SUY5bExDQkxLeXM3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd3dVlYUjBjbWxpZFhSbGN5QTlJRzVsTENCc0xtRjBkSEpwWW5WMFpYTk9kVzBnUFNCTExDQnNMbWx1WkdWNElEMGdTRHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUhnb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUZVZ1BTQnNMbTVsZDBGMGRISnBZblYwWlhNN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCNklEMGdNQ3dnY1NBOUlGVXViR1Z1WjNSb095QjZJRHdnY1RzZ2Vpc3JLVlZiZWwwZ1BTQXdPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnZVNoVktTQjdDaUFnSUNBZ0lDQWdZaWhWTENBd0tUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR0lvVlN3Z2Vpa2dld29nSUNBZ0lDQWdJR3hsZENCeElEMGdiQzV1WlhkQmRIUnlhV0oxZEdWekxDQklJRDBnYkM1bGJtRmliR1ZrUVhSMGNtbGlkWFJsY3l3Z2JtVWdQU0JzTG1GMGRISnBZblYwWlVScGRtbHpiM0p6T3dvZ0lDQWdJQ0FnSUhGYlZWMGdQU0F4TENCSVcxVmRJRDA5UFNBd0lDWW1JQ2h6TVM1bGJtRmliR1ZXWlhKMFpYaEJkSFJ5YVdKQmNuSmhlU2hWS1N3Z1NGdFZYU0E5SURFcExDQnVaVnRWWFNBaFBUMGdlaUFtSmlBb0tHNHVhWE5YWldKSFRESWdQeUJ6TVNBNklHVXVaMlYwS0NKQlRrZE1SVjlwYm5OMFlXNWpaV1JmWVhKeVlYbHpJaWtwVzI0dWFYTlhaV0pIVERJZ1B5QWlkbVZ5ZEdWNFFYUjBjbWxpUkdsMmFYTnZjaUlnT2lBaWRtVnlkR1Y0UVhSMGNtbGlSR2wyYVhOdmNrRk9SMHhGSWwwb1ZTd2dlaWtzSUc1bFcxVmRJRDBnZWlrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQjNLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQlZJRDBnYkM1dVpYZEJkSFJ5YVdKMWRHVnpMQ0I2SUQwZ2JDNWxibUZpYkdWa1FYUjBjbWxpZFhSbGN6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIRWdQU0F3TENCSUlEMGdlaTVzWlc1bmRHZzdJSEVnUENCSU95QnhLeXNwZWx0eFhTQWhQVDBnVlZ0eFhTQW1KaUFvY3pFdVpHbHpZV0pzWlZabGNuUmxlRUYwZEhKcFlrRnljbUY1S0hFcExDQjZXM0ZkSUQwZ01DazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJTS0ZVc0lIb3NJSEVzSUVnc0lHNWxMQ0JYTENCTEtTQjdDaUFnSUNBZ0lDQWdTeUE5UFQwZ0lUQWdQeUJ6TVM1MlpYSjBaWGhCZEhSeWFXSkpVRzlwYm5SbGNpaFZMQ0I2TENCeExDQnVaU3dnVnlrZ09pQnpNUzUyWlhKMFpYaEJkSFJ5YVdKUWIybHVkR1Z5S0ZVc0lIb3NJSEVzSUVnc0lHNWxMQ0JYS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlFa29WU3dnZWl3Z2NTd2dTQ2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaHVMbWx6VjJWaVIwd3lJRDA5UFNBaE1TQW1KaUFvVlM1cGMwbHVjM1JoYm1ObFpFMWxjMmdnZkh3Z1NDNXBjMGx1YzNSaGJtTmxaRUoxWm1abGNrZGxiMjFsZEhKNUtTQW1KaUJsTG1kbGRDZ2lRVTVIVEVWZmFXNXpkR0Z1WTJWa1gyRnljbUY1Y3lJcElEMDlQU0J1ZFd4c0tTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2VDZ3BPd29nSUNBZ0lDQWdJR3hsZENCdVpTQTlJRWd1WVhSMGNtbGlkWFJsY3l3Z1Z5QTlJSEV1WjJWMFFYUjBjbWxpZFhSbGN5Z3BMQ0JMSUQwZ2VpNWtaV1poZFd4MFFYUjBjbWxpZFhSbFZtRnNkV1Z6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnUkNCcGJpQlhLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRWNnUFNCWFcwUmRPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9SeTVzYjJOaGRHbHZiaUErUFNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYUdVZ1BTQnVaVnRFWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9aU0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaEVJRDA5UFNBaWFXNXpkR0Z1WTJWTllYUnlhWGdpSUNZbUlGVXVhVzV6ZEdGdVkyVk5ZWFJ5YVhnZ0ppWWdLR2hsSUQwZ1ZTNXBibk4wWVc1alpVMWhkSEpwZUNrc0lFUWdQVDA5SUNKcGJuTjBZVzVqWlVOdmJHOXlJaUFtSmlCVkxtbHVjM1JoYm1ObFEyOXNiM0lnSmlZZ0tHaGxJRDBnVlM1cGJuTjBZVzVqWlVOdmJHOXlLU2tzSUdobElDRTlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdabVVnUFNCb1pTNXViM0p0WVd4cGVtVmtMQ0JmWlNBOUlHaGxMbWwwWlcxVGFYcGxMQ0IzWlNBOUlIUXVaMlYwS0dobEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2QyVWdQVDA5SUhadmFXUWdNQ2tnWTI5dWRHbHVkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVZsSUQwZ2QyVXVZblZtWm1WeUxDQlVaU0E5SUhkbExuUjVjR1VzSUZsbElEMGdkMlV1WW5sMFpYTlFaWEpGYkdWdFpXNTBMQ0JwZENBOUlHNHVhWE5YWldKSFRESWdQVDA5SUNFd0lDWW1JQ2hVWlNBOVBUMGdjekV1U1U1VUlIeDhJRlJsSUQwOVBTQnpNUzVWVGxOSlIwNUZSRjlKVGxRZ2ZId2dhR1V1WjNCMVZIbHdaU0E5UFQwZ1pHUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9aUzVwYzBsdWRHVnliR1ZoZG1Wa1FuVm1abVZ5UVhSMGNtbGlkWFJsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkRaU0E5SUdobExtUmhkR0VzSUV3Z1BTQkRaUzV6ZEhKcFpHVXNJRzlsSUQwZ2FHVXViMlptYzJWME93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RMlV1YVhOSmJuTjBZVzVqWldSSmJuUmxjbXhsWVhabFpFSjFabVpsY2lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQllJRDBnTURzZ1dDQThJRWN1Ykc5allYUnBiMjVUYVhwbE95QllLeXNwWWloSExteHZZMkYwYVc5dUlDc2dXQ3dnUTJVdWJXVnphRkJsY2tGMGRISnBZblYwWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlZMbWx6U1c1emRHRnVZMlZrVFdWemFDQWhQVDBnSVRBZ0ppWWdTQzVmYldGNFNXNXpkR0Z1WTJWRGIzVnVkQ0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaElMbDl0WVhoSmJuTjBZVzVqWlVOdmRXNTBJRDBnUTJVdWJXVnphRkJsY2tGMGRISnBZblYwWlNBcUlFTmxMbU52ZFc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdadmNpaHNaWFFnV0NBOUlEQTdJRmdnUENCSExteHZZMkYwYVc5dVUybDZaVHNnV0NzcktYa29SeTVzYjJOaGRHbHZiaUFySUZncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek1TNWlhVzVrUW5WbVptVnlLSE14TGtGU1VrRlpYMEpWUmtaRlVpd2dSV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRmdnUFNBd095QllJRHdnUnk1c2IyTmhkR2x2YmxOcGVtVTdJRmdyS3lsU0tFY3ViRzlqWVhScGIyNGdLeUJZTENCZlpTQXZJRWN1Ykc5allYUnBiMjVUYVhwbExDQlVaU3dnWm1Vc0lFd2dLaUJaWlN3Z0tHOWxJQ3NnWDJVZ0x5QkhMbXh2WTJGMGFXOXVVMmw2WlNBcUlGZ3BJQ29nV1dVc0lHbDBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FHVXVhWE5KYm5OMFlXNWpaV1JDZFdabVpYSkJkSFJ5YVdKMWRHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnUTJVZ1BTQXdPeUJEWlNBOElFY3ViRzlqWVhScGIyNVRhWHBsT3lCRFpTc3JLV0lvUnk1c2IyTmhkR2x2YmlBcklFTmxMQ0JvWlM1dFpYTm9VR1Z5UVhSMGNtbGlkWFJsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGVXVhWE5KYm5OMFlXNWpaV1JOWlhOb0lDRTlQU0FoTUNBbUppQklMbDl0WVhoSmJuTjBZVzVqWlVOdmRXNTBJRDA5UFNCMmIybGtJREFnSmlZZ0tFZ3VYMjFoZUVsdWMzUmhibU5sUTI5MWJuUWdQU0JvWlM1dFpYTm9VR1Z5UVhSMGNtbGlkWFJsSUNvZ2FHVXVZMjkxYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnWm05eUtHeGxkQ0JEWlNBOUlEQTdJRU5sSUR3Z1J5NXNiMk5oZEdsdmJsTnBlbVU3SUVObEt5c3BlU2hITG14dlkyRjBhVzl1SUNzZ1EyVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpNUzVpYVc1a1FuVm1abVZ5S0hNeExrRlNVa0ZaWDBKVlJrWkZVaXdnUldVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUVObElEMGdNRHNnUTJVZ1BDQkhMbXh2WTJGMGFXOXVVMmw2WlRzZ1EyVXJLeWxTS0VjdWJHOWpZWFJwYjI0Z0t5QkRaU3dnWDJVZ0x5QkhMbXh2WTJGMGFXOXVVMmw2WlN3Z1ZHVXNJR1psTENCZlpTQXFJRmxsTENCZlpTQXZJRWN1Ykc5allYUnBiMjVUYVhwbElDb2dRMlVnS2lCWlpTd2dhWFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9TeUFoUFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdabElEMGdTMXRFWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm1VZ0lUMDlJSFp2YVdRZ01Da2djM2RwZEdOb0tHWmxMbXhsYm1kMGFDbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITXhMblpsY25SbGVFRjBkSEpwWWpKbWRpaEhMbXh2WTJGMGFXOXVMQ0JtWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXpPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3pFdWRtVnlkR1Y0UVhSMGNtbGlNMloyS0VjdWJHOWpZWFJwYjI0c0lHWmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpNUzUyWlhKMFpYaEJkSFJ5YVdJMFpuWW9SeTVzYjJOaGRHbHZiaXdnWm1VcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek1TNTJaWEowWlhoQmRIUnlhV0l4Wm5Zb1J5NXNiMk5oZEdsdmJpd2dabVVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCM0tDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJOS0NrZ2V3b2dJQ0FnSUNBZ0lGa29LVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRlVnYVc0Z2J5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjZJRDBnYjF0VlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J4SUdsdUlIb3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVnZ1BTQjZXM0ZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1WlNCcGJpQklLVzBvU0Z0dVpWMHViMkpxWldOMEtTd2daR1ZzWlhSbElFaGJibVZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSHBiY1YwN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUc5YlZWMDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnVkNoVktTQjdDaUFnSUNBZ0lDQWdhV1lnS0c5YlZTNXBaRjBnUFQwOUlIWnZhV1FnTUNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUd4bGRDQjZJRDBnYjF0VkxtbGtYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSEVnYVc0Z2VpbDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQklJRDBnZWx0eFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1WlNCcGJpQklLVzBvU0Z0dVpWMHViMkpxWldOMEtTd2daR1ZzWlhSbElFaGJibVZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2VsdHhYVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWkdWc1pYUmxJRzliVlM1cFpGMDdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJQS0ZVcElIc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIb2dhVzRnYnlsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeElEMGdiMXQ2WFRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hGYlZTNXBaRjBnUFQwOUlIWnZhV1FnTUNrZ1kyOXVkR2x1ZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCSUlEMGdjVnRWTG1sa1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1WlNCcGJpQklLVzBvU0Z0dVpWMHViMkpxWldOMEtTd2daR1ZzWlhSbElFaGJibVZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2NWdFZMbWxrWFRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQlpLQ2tnZXdvZ0lDQWdJQ0FnSUNRb0tTd2dhQ0E5SUNFd0xDQnNJQ0U5UFNCaklDWW1JQ2hzSUQwZ1l5d2daaWhzTG05aWFtVmpkQ2twT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z0pDZ3BJSHNLSUNBZ0lDQWdJQ0JqTG1kbGIyMWxkSEo1SUQwZ2JuVnNiQ3dnWXk1d2NtOW5jbUZ0SUQwZ2JuVnNiQ3dnWXk1M2FYSmxabkpoYldVZ1BTQWhNVHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnYzJWMGRYQTZJSFVzQ2lBZ0lDQWdJQ0FnY21WelpYUTZJRmtzQ2lBZ0lDQWdJQ0FnY21WelpYUkVaV1poZFd4MFUzUmhkR1U2SUNRc0NpQWdJQ0FnSUNBZ1pHbHpjRzl6WlRvZ1RTd0tJQ0FnSUNBZ0lDQnlaV3hsWVhObFUzUmhkR1Z6VDJaSFpXOXRaWFJ5ZVRvZ1ZDd0tJQ0FnSUNBZ0lDQnlaV3hsWVhObFUzUmhkR1Z6VDJaUWNtOW5jbUZ0T2lCUExBb2dJQ0FnSUNBZ0lHbHVhWFJCZEhSeWFXSjFkR1Z6T2lCNExBb2dJQ0FnSUNBZ0lHVnVZV0pzWlVGMGRISnBZblYwWlRvZ2VTd0tJQ0FnSUNBZ0lDQmthWE5oWW14bFZXNTFjMlZrUVhSMGNtbGlkWFJsY3pvZ2R3b2dJQ0FnZlRzS2ZRcG1kVzVqZEdsdmJpQnBYeWh6TVN3Z1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnYkdWMElHa2dQU0J1TG1selYyVmlSMHd5TENCeU93b2dJQ0FnWm5WdVkzUnBiMjRnWVNoc0tTQjdDaUFnSUNBZ0lDQWdjaUE5SUd3N0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnZLR3dzSUdncElIc0tJQ0FnSUNBZ0lDQnpNUzVrY21GM1FYSnlZWGx6S0hJc0lHd3NJR2dwTENCMExuVndaR0YwWlNob0xDQnlMQ0F4S1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHTW9iQ3dnYUN3Z2RTa2dld29nSUNBZ0lDQWdJR2xtSUNoMUlEMDlQU0F3S1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnYkdWMElHUXNJR1k3Q2lBZ0lDQWdJQ0FnYVdZZ0tHa3BJR1FnUFNCek1Td2daaUE5SUNKa2NtRjNRWEp5WVhselNXNXpkR0Z1WTJWa0lqc0tJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaGtJRDBnWlM1blpYUW9Ja0ZPUjB4RlgybHVjM1JoYm1ObFpGOWhjbkpoZVhNaUtTd2daaUE5SUNKa2NtRjNRWEp5WVhselNXNXpkR0Z1WTJWa1FVNUhURVVpTENCa0lEMDlQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxsZGxZa2RNUW5WbVptVnlVbVZ1WkdWeVpYSTZJSFZ6YVc1bklGUklVa1ZGTGtsdWMzUmhibU5sWkVKMVptWmxja2RsYjIxbGRISjVJR0oxZENCb1lYSmtkMkZ5WlNCa2IyVnpJRzV2ZENCemRYQndiM0owSUdWNGRHVnVjMmx2YmlCQlRrZE1SVjlwYm5OMFlXNWpaV1JmWVhKeVlYbHpMaUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHUmJabDBvY2l3Z2JDd2dhQ3dnZFNrc0lIUXVkWEJrWVhSbEtHZ3NJSElzSUhVcE93b2dJQ0FnZlFvZ0lDQWdkR2hwY3k1elpYUk5iMlJsSUQwZ1lTd2dkR2hwY3k1eVpXNWtaWElnUFNCdkxDQjBhR2x6TG5KbGJtUmxja2x1YzNSaGJtTmxjeUE5SUdNN0NuMEtablZ1WTNScGIyNGdjMThvY3pFc0lHVXNJSFFwSUhzS0lDQWdJR3hsZENCdU93b2dJQ0FnWm5WdVkzUnBiMjRnYVNncElIc0tJQ0FnSUNBZ0lDQnBaaUFvYmlBaFBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2Jqc0tJQ0FnSUNBZ0lDQnBaaUFvWlM1b1lYTW9Ja1ZZVkY5MFpYaDBkWEpsWDJacGJIUmxjbDloYm1semIzUnliM0JwWXlJcElEMDlQU0FoTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1VpQTlJR1V1WjJWMEtDSkZXRlJmZEdWNGRIVnlaVjltYVd4MFpYSmZZVzVwYzI5MGNtOXdhV01pS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiaUE5SUhNeExtZGxkRkJoY21GdFpYUmxjaWhTTGsxQldGOVVSVmhVVlZKRlgwMUJXRjlCVGtsVFQxUlNUMUJaWDBWWVZDazdDaUFnSUNBZ0lDQWdmU0JsYkhObElHNGdQU0F3T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1T3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2NpaFNLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tGSWdQVDA5SUNKb2FXZG9jQ0lwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hNeExtZGxkRk5vWVdSbGNsQnlaV05wYzJsdmJrWnZjbTFoZENoek1TNVdSVkpVUlZoZlUwaEJSRVZTTENCek1TNUlTVWRJWDBaTVQwRlVLUzV3Y21WamFYTnBiMjRnUGlBd0lDWW1JSE14TG1kbGRGTm9ZV1JsY2xCeVpXTnBjMmx2YmtadmNtMWhkQ2h6TVM1R1VrRkhUVVZPVkY5VFNFRkVSVklzSUhNeExraEpSMGhmUmt4UFFWUXBMbkJ5WldOcGMybHZiaUErSURBcElISmxkSFZ5YmlBaWFHbG5hSEFpT3dvZ0lDQWdJQ0FnSUNBZ0lDQlNJRDBnSW0xbFpHbDFiWEFpT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVWlBOVBUMGdJbTFsWkdsMWJYQWlJQ1ltSUhNeExtZGxkRk5vWVdSbGNsQnlaV05wYzJsdmJrWnZjbTFoZENoek1TNVdSVkpVUlZoZlUwaEJSRVZTTENCek1TNU5SVVJKVlUxZlJreFBRVlFwTG5CeVpXTnBjMmx2YmlBK0lEQWdKaVlnY3pFdVoyVjBVMmhoWkdWeVVISmxZMmx6YVc5dVJtOXliV0YwS0hNeExrWlNRVWROUlU1VVgxTklRVVJGVWl3Z2N6RXVUVVZFU1ZWTlgwWk1UMEZVS1M1d2NtVmphWE5wYjI0Z1BpQXdJRDhnSW0xbFpHbDFiWEFpSURvZ0lteHZkM0FpT3dvZ0lDQWdmUW9nSUNBZ2JHVjBJR0VnUFNCMGVYQmxiMllnVjJWaVIwd3lVbVZ1WkdWeWFXNW5RMjl1ZEdWNGRDQThJQ0oxSWlBbUppQnpNUzVqYjI1emRISjFZM1J2Y2k1dVlXMWxJRDA5UFNBaVYyVmlSMHd5VW1WdVpHVnlhVzVuUTI5dWRHVjRkQ0lzSUc4Z1BTQjBMbkJ5WldOcGMybHZiaUFoUFQwZ2RtOXBaQ0F3SUQ4Z2RDNXdjbVZqYVhOcGIyNGdPaUFpYUdsbmFIQWlMQ0JqSUQwZ2NpaHZLVHNLSUNBZ0lHTWdJVDA5SUc4Z0ppWWdLR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2lMQ0J2TENBaWJtOTBJSE4xY0hCdmNuUmxaQ3dnZFhOcGJtY2lMQ0JqTENBaWFXNXpkR1ZoWkM0aUtTd2dieUE5SUdNcE93b2dJQ0FnYkdWMElHd2dQU0JoSUh4OElHVXVhR0Z6S0NKWFJVSkhURjlrY21GM1gySjFabVpsY25NaUtTd2dhQ0E5SUhRdWJHOW5ZWEpwZEdodGFXTkVaWEIwYUVKMVptWmxjaUE5UFQwZ0lUQXNJSFVnUFNCek1TNW5aWFJRWVhKaGJXVjBaWElvY3pFdVRVRllYMVJGV0ZSVlVrVmZTVTFCUjBWZlZVNUpWRk1wTENCa0lEMGdjekV1WjJWMFVHRnlZVzFsZEdWeUtITXhMazFCV0Y5V1JWSlVSVmhmVkVWWVZGVlNSVjlKVFVGSFJWOVZUa2xVVXlrc0lHWWdQU0J6TVM1blpYUlFZWEpoYldWMFpYSW9jekV1VFVGWVgxUkZXRlJWVWtWZlUwbGFSU2tzSUcwZ1BTQnpNUzVuWlhSUVlYSmhiV1YwWlhJb2N6RXVUVUZZWDBOVlFrVmZUVUZRWDFSRldGUlZVa1ZmVTBsYVJTa3NJRjhnUFNCek1TNW5aWFJRWVhKaGJXVjBaWElvY3pFdVRVRllYMVpGVWxSRldGOUJWRlJTU1VKVEtTd2daeUE5SUhNeExtZGxkRkJoY21GdFpYUmxjaWh6TVM1TlFWaGZWa1ZTVkVWWVgxVk9TVVpQVWsxZlZrVkRWRTlTVXlrc0lIQWdQU0J6TVM1blpYUlFZWEpoYldWMFpYSW9jekV1VFVGWVgxWkJVbGxKVGtkZlZrVkRWRTlTVXlrc0lIWWdQU0J6TVM1blpYUlFZWEpoYldWMFpYSW9jekV1VFVGWVgwWlNRVWROUlU1VVgxVk9TVVpQVWsxZlZrVkRWRTlTVXlrc0lIZ2dQU0JrSUQ0Z01Dd2dlU0E5SUdFZ2ZId2daUzVvWVhNb0lrOUZVMTkwWlhoMGRYSmxYMlpzYjJGMElpa3NJR0lnUFNCNElDWW1JSGtzSUhjZ1BTQmhJRDhnY3pFdVoyVjBVR0Z5WVcxbGRHVnlLSE14TGsxQldGOVRRVTFRVEVWVEtTQTZJREE3Q2lBZ0lDQnlaWFIxY200Z2V3b2dJQ0FnSUNBZ0lHbHpWMlZpUjB3eU9pQmhMQW9nSUNBZ0lDQWdJR1J5WVhkQ2RXWm1aWEp6T2lCc0xBb2dJQ0FnSUNBZ0lHZGxkRTFoZUVGdWFYTnZkSEp2Y0hrNklHa3NDaUFnSUNBZ0lDQWdaMlYwVFdGNFVISmxZMmx6YVc5dU9pQnlMQW9nSUNBZ0lDQWdJSEJ5WldOcGMybHZiam9nYnl3S0lDQWdJQ0FnSUNCc2IyZGhjbWwwYUcxcFkwUmxjSFJvUW5WbVptVnlPaUJvTEFvZ0lDQWdJQ0FnSUcxaGVGUmxlSFIxY21Wek9pQjFMQW9nSUNBZ0lDQWdJRzFoZUZabGNuUmxlRlJsZUhSMWNtVnpPaUJrTEFvZ0lDQWdJQ0FnSUcxaGVGUmxlSFIxY21WVGFYcGxPaUJtTEFvZ0lDQWdJQ0FnSUcxaGVFTjFZbVZ0WVhCVGFYcGxPaUJ0TEFvZ0lDQWdJQ0FnSUcxaGVFRjBkSEpwWW5WMFpYTTZJRjhzQ2lBZ0lDQWdJQ0FnYldGNFZtVnlkR1Y0Vlc1cFptOXliWE02SUdjc0NpQWdJQ0FnSUNBZ2JXRjRWbUZ5ZVdsdVozTTZJSEFzQ2lBZ0lDQWdJQ0FnYldGNFJuSmhaMjFsYm5SVmJtbG1iM0p0Y3pvZ2Rpd0tJQ0FnSUNBZ0lDQjJaWEowWlhoVVpYaDBkWEpsY3pvZ2VDd0tJQ0FnSUNBZ0lDQm1iRzloZEVaeVlXZHRaVzUwVkdWNGRIVnlaWE02SUhrc0NpQWdJQ0FnSUNBZ1pteHZZWFJXWlhKMFpYaFVaWGgwZFhKbGN6b2dZaXdLSUNBZ0lDQWdJQ0J0WVhoVFlXMXdiR1Z6T2lCM0NpQWdJQ0I5T3dwOUNtWjFibU4wYVc5dUlISmZLSE14S1NCN0NpQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNc0lIUWdQU0J1ZFd4c0xDQnVJRDBnTUN3Z2FTQTlJQ0V4TENCeUlEMGdJVEVzSUdFZ1BTQnVaWGNnYlc0c0lHOGdQU0J1WlhjZ1NHVXNJR01nUFNCN0NpQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd3NDaUFnSUNBZ0lDQWdibVZsWkhOVmNHUmhkR1U2SUNFeENpQWdJQ0I5T3dvZ0lDQWdkR2hwY3k1MWJtbG1iM0p0SUQwZ1l5d2dkR2hwY3k1dWRXMVFiR0Z1WlhNZ1BTQXdMQ0IwYUdsekxtNTFiVWx1ZEdWeWMyVmpkR2x2YmlBOUlEQXNJSFJvYVhNdWFXNXBkQ0E5SUdaMWJtTjBhVzl1S0hVc0lHUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJSFV1YkdWdVozUm9JQ0U5UFNBd0lIeDhJR1FnZkh3Z2JpQWhQVDBnTUNCOGZDQnBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnBJRDBnWkN3Z2JpQTlJSFV1YkdWdVozUm9MQ0JtT3dvZ0lDQWdmU3dnZEdocGN5NWlaV2RwYmxOb1lXUnZkM01nUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQnlJRDBnSVRBc0lHZ29iblZzYkNrN0NpQWdJQ0I5TENCMGFHbHpMbVZ1WkZOb1lXUnZkM01nUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQnlJRDBnSVRFN0NpQWdJQ0I5TENCMGFHbHpMbk5sZEVkc2IySmhiRk4wWVhSbElEMGdablZ1WTNScGIyNG9kU3dnWkNrZ2V3b2dJQ0FnSUNBZ0lIUWdQU0JvS0hVc0lHUXNJREFwT3dvZ0lDQWdmU3dnZEdocGN5NXpaWFJUZEdGMFpTQTlJR1oxYm1OMGFXOXVLSFVzSUdRc0lHWXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JTQTlJSFV1WTJ4cGNIQnBibWRRYkdGdVpYTXNJRjhnUFNCMUxtTnNhWEJKYm5SbGNuTmxZM1JwYjI0c0lHY2dQU0IxTG1Oc2FYQlRhR0ZrYjNkekxDQndJRDBnY3pFdVoyVjBLSFVwT3dvZ0lDQWdJQ0FnSUdsbUlDZ2hhU0I4ZkNCdElEMDlQU0J1ZFd4c0lIeDhJRzB1YkdWdVozUm9JRDA5UFNBd0lIeDhJSElnSmlZZ0lXY3BJSElnUHlCb0tHNTFiR3dwSURvZ2JDZ3BPd29nSUNBZ0lDQWdJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RpQTlJSElnUHlBd0lEb2diaXdnZUNBOUlIWWdLaUEwTENCNUlEMGdjQzVqYkdsd2NHbHVaMU4wWVhSbElIeDhJRzUxYkd3N0NpQWdJQ0FnSUNBZ0lDQWdJR011ZG1Gc2RXVWdQU0I1TENCNUlEMGdhQ2h0TENCa0xDQjRMQ0JtS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmlJRDBnTURzZ1lpQWhQVDBnZURzZ0t5dGlLWGxiWWwwZ1BTQjBXMkpkT3dvZ0lDQWdJQ0FnSUNBZ0lDQndMbU5zYVhCd2FXNW5VM1JoZEdVZ1BTQjVMQ0IwYUdsekxtNTFiVWx1ZEdWeWMyVmpkR2x2YmlBOUlGOGdQeUIwYUdsekxtNTFiVkJzWVc1bGN5QTZJREFzSUhSb2FYTXViblZ0VUd4aGJtVnpJQ3M5SUhZN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlRzS0lDQWdJR1oxYm1OMGFXOXVJR3dvS1NCN0NpQWdJQ0FnSUNBZ1l5NTJZV3gxWlNBaFBUMGdkQ0FtSmlBb1l5NTJZV3gxWlNBOUlIUXNJR011Ym1WbFpITlZjR1JoZEdVZ1BTQnVJRDRnTUNrc0lHVXViblZ0VUd4aGJtVnpJRDBnYml3Z1pTNXVkVzFKYm5SbGNuTmxZM1JwYjI0Z1BTQXdPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYUNoMUxDQmtMQ0JtTENCdEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUY4Z1BTQjFJQ0U5UFNCdWRXeHNJRDhnZFM1c1pXNW5kR2dnT2lBd0xDQm5JRDBnYm5Wc2JEc0tJQ0FnSUNBZ0lDQnBaaUFvWHlBaFBUMGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWnlBOUlHTXVkbUZzZFdVc0lHMGdJVDA5SUNFd0lIeDhJR2NnUFQwOUlHNTFiR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQndJRDBnWmlBcklGOGdLaUEwTENCMklEMGdaQzV0WVhSeWFYaFhiM0pzWkVsdWRtVnljMlU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2TG1kbGRFNXZjbTFoYkUxaGRISnBlQ2gyS1N3Z0tHY2dQVDA5SUc1MWJHd2dmSHdnWnk1c1pXNW5kR2dnUENCd0tTQW1KaUFvWnlBOUlHNWxkeUJHYkc5aGRETXlRWEp5WVhrb2NDa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQjRJRDBnTUN3Z2VTQTlJR1k3SUhnZ0lUMDlJRjg3SUNzcmVDd2dlU0FyUFNBMEtXRXVZMjl3ZVNoMVczaGRLUzVoY0hCc2VVMWhkSEpwZURRb2Rpd2dieWtzSUdFdWJtOXliV0ZzTG5SdlFYSnlZWGtvWnl3Z2VTa3NJR2RiZVNBcklETmRJRDBnWVM1amIyNXpkR0Z1ZERzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCakxuWmhiSFZsSUQwZ1p5d2dZeTV1WldWa2MxVndaR0YwWlNBOUlDRXdPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzV1ZFcxUWJHRnVaWE1nUFNCZkxDQmxMbTUxYlVsdWRHVnljMlZqZEdsdmJpQTlJREFzSUdjN0NpQWdJQ0I5Q24wS1puVnVZM1JwYjI0Z1lWOG9jekVwSUhzS0lDQWdJR3hsZENCbElEMGdibVYzSUZkbFlXdE5ZWEE3Q2lBZ0lDQm1kVzVqZEdsdmJpQjBLR0VzSUc4cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2J5QTlQVDBnU1hJZ1B5QmhMbTFoY0hCcGJtY2dQU0I2YmlBNklHOGdQVDA5SUZWeUlDWW1JQ2hoTG0xaGNIQnBibWNnUFNCamFTa3NJR0U3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCdUtHRXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb1lTQW1KaUJoTG1selZHVjRkSFZ5WlNBbUppQmhMbWx6VW1WdVpHVnlWR0Z5WjJWMFZHVjRkSFZ5WlNBOVBUMGdJVEVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc4Z1BTQmhMbTFoY0hCcGJtYzdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZJRDA5UFNCSmNpQjhmQ0J2SUQwOVBTQlZjaWtnYVdZZ0tHVXVhR0Z6S0dFcEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlHVXVaMlYwS0dFcExuUmxlSFIxY21VN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZENoakxDQmhMbTFoY0hCcGJtY3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTWdQU0JoTG1sdFlXZGxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dNZ0ppWWdZeTVvWldsbmFIUWdQaUF3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd3Z1BTQnVaWGNnZUc4b1l5NW9aV2xuYUhRZ0x5QXlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYkM1bWNtOXRSWEYxYVhKbFkzUmhibWQxYkdGeVZHVjRkSFZ5WlNoek1Td2dZU2tzSUdVdWMyVjBLR0VzSUd3cExDQmhMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JbVJwYzNCdmMyVWlMQ0JwS1N3Z2RDaHNMblJsZUhSMWNtVXNJR0V1YldGd2NHbHVaeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdjbVYwZFhKdUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJwS0dFcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlHRXVkR0Z5WjJWME93b2dJQ0FnSUNBZ0lHOHVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWdpWkdsemNHOXpaU0lzSUdrcE93b2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ1pTNW5aWFFvYnlrN0NpQWdJQ0FnSUNBZ1l5QWhQVDBnZG05cFpDQXdJQ1ltSUNobExtUmxiR1YwWlNodktTd2dZeTVrYVhOd2IzTmxLQ2twT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2NpZ3BJSHNLSUNBZ0lDQWdJQ0JsSUQwZ2JtVjNJRmRsWVd0TllYQTdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJR2RsZERvZ2Jpd0tJQ0FnSUNBZ0lDQmthWE53YjNObE9pQnlDaUFnSUNCOU93cDlDblpoY2lCTWN5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1EzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUMweExDQjBJRDBnTVN3Z2JpQTlJREVzSUdrZ1BTQXRNU3dnY2lBOUlDNHhMQ0JoSUQwZ01tVXpLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpUM0owYUc5bmNtRndhR2xqUTJGdFpYSmhJRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pQY25Sb2IyZHlZWEJvYVdORFlXMWxjbUVpTENCMGFHbHpMbnB2YjIwZ1BTQXhMQ0IwYUdsekxuWnBaWGNnUFNCdWRXeHNMQ0IwYUdsekxteGxablFnUFNCbExDQjBhR2x6TG5KcFoyaDBJRDBnZEN3Z2RHaHBjeTUwYjNBZ1BTQnVMQ0IwYUdsekxtSnZkSFJ2YlNBOUlHa3NJSFJvYVhNdWJtVmhjaUE5SUhJc0lIUm9hWE11Wm1GeUlEMGdZU3dnZEdocGN5NTFjR1JoZEdWUWNtOXFaV04wYVc5dVRXRjBjbWw0S0NrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsTENCMEtTd2dkR2hwY3k1c1pXWjBJRDBnWlM1c1pXWjBMQ0IwYUdsekxuSnBaMmgwSUQwZ1pTNXlhV2RvZEN3Z2RHaHBjeTUwYjNBZ1BTQmxMblJ2Y0N3Z2RHaHBjeTVpYjNSMGIyMGdQU0JsTG1KdmRIUnZiU3dnZEdocGN5NXVaV0Z5SUQwZ1pTNXVaV0Z5TENCMGFHbHpMbVpoY2lBOUlHVXVabUZ5TENCMGFHbHpMbnB2YjIwZ1BTQmxMbnB2YjIwc0lIUm9hWE11ZG1sbGR5QTlJR1V1ZG1sbGR5QTlQVDBnYm5Wc2JDQS9JRzUxYkd3Z09pQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQmxMblpwWlhjcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBWbWxsZDA5bVpuTmxkQ2hsTENCMExDQnVMQ0JwTENCeUxDQmhLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NTJhV1YzSUQwOVBTQnVkV3hzSUNZbUlDaDBhR2x6TG5acFpYY2dQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnVZV0pzWldRNklDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNCbWRXeHNWMmxrZEdnNklERXNDaUFnSUNBZ0lDQWdJQ0FnSUdaMWJHeElaV2xuYUhRNklERXNDaUFnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkRmc2SURBc0NpQWdJQ0FnSUNBZ0lDQWdJRzltWm5ObGRGazZJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lBeExBb2dJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJREVLSUNBZ0lDQWdJQ0I5S1N3Z2RHaHBjeTUyYVdWM0xtVnVZV0pzWldRZ1BTQWhNQ3dnZEdocGN5NTJhV1YzTG1aMWJHeFhhV1IwYUNBOUlHVXNJSFJvYVhNdWRtbGxkeTVtZFd4c1NHVnBaMmgwSUQwZ2RDd2dkR2hwY3k1MmFXVjNMbTltWm5ObGRGZ2dQU0J1TENCMGFHbHpMblpwWlhjdWIyWm1jMlYwV1NBOUlHa3NJSFJvYVhNdWRtbGxkeTUzYVdSMGFDQTlJSElzSUhSb2FYTXVkbWxsZHk1b1pXbG5hSFFnUFNCaExDQjBhR2x6TG5Wd1pHRjBaVkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ29LVHNLSUNBZ0lIMEtJQ0FnSUdOc1pXRnlWbWxsZDA5bVpuTmxkQ2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMblpwWlhjZ0lUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdWRtbGxkeTVsYm1GaWJHVmtJRDBnSVRFcExDQjBhR2x6TG5Wd1pHRjBaVkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ29LVHNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaVkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ29LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0FvZEdocGN5NXlhV2RvZENBdElIUm9hWE11YkdWbWRDa2dMeUFvTWlBcUlIUm9hWE11ZW05dmJTa3NJSFFnUFNBb2RHaHBjeTUwYjNBZ0xTQjBhR2x6TG1KdmRIUnZiU2tnTHlBb01pQXFJSFJvYVhNdWVtOXZiU2tzSUc0Z1BTQW9kR2hwY3k1eWFXZG9kQ0FySUhSb2FYTXViR1ZtZENrZ0x5QXlMQ0JwSUQwZ0tIUm9hWE11ZEc5d0lDc2dkR2hwY3k1aWIzUjBiMjBwSUM4Z01pd2djaUE5SUc0Z0xTQmxMQ0JoSUQwZ2JpQXJJR1VzSUc4Z1BTQnBJQ3NnZEN3Z1l5QTlJR2tnTFNCME93b2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuWnBaWGNnSVQwOUlHNTFiR3dnSmlZZ2RHaHBjeTUyYVdWM0xtVnVZV0pzWldRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHd2dQU0FvZEdocGN5NXlhV2RvZENBdElIUm9hWE11YkdWbWRDa2dMeUIwYUdsekxuWnBaWGN1Wm5Wc2JGZHBaSFJvSUM4Z2RHaHBjeTU2YjI5dExDQm9JRDBnS0hSb2FYTXVkRzl3SUMwZ2RHaHBjeTVpYjNSMGIyMHBJQzhnZEdocGN5NTJhV1YzTG1aMWJHeElaV2xuYUhRZ0x5QjBhR2x6TG5wdmIyMDdDaUFnSUNBZ0lDQWdJQ0FnSUhJZ0t6MGdiQ0FxSUhSb2FYTXVkbWxsZHk1dlptWnpaWFJZTENCaElEMGdjaUFySUd3Z0tpQjBhR2x6TG5acFpYY3VkMmxrZEdnc0lHOGdMVDBnYUNBcUlIUm9hWE11ZG1sbGR5NXZabVp6WlhSWkxDQmpJRDBnYnlBdElHZ2dLaUIwYUdsekxuWnBaWGN1YUdWcFoyaDBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwYUdsekxuQnliMnBsWTNScGIyNU5ZWFJ5YVhndWJXRnJaVTl5ZEdodlozSmhjR2hwWXloeUxDQmhMQ0J2TENCakxDQjBhR2x6TG01bFlYSXNJSFJvYVhNdVptRnlMQ0IwYUdsekxtTnZiM0prYVc1aGRHVlRlWE4wWlcwcExDQjBhR2x6TG5CeWIycGxZM1JwYjI1TllYUnlhWGhKYm5abGNuTmxMbU52Y0hrb2RHaHBjeTV3Y205cVpXTjBhVzl1VFdGMGNtbDRLUzVwYm5abGNuUW9LVHNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCemRYQmxjaTUwYjBwVFQwNG9aU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFF1YjJKcVpXTjBMbnB2YjIwZ1BTQjBhR2x6TG5wdmIyMHNJSFF1YjJKcVpXTjBMbXhsWm5RZ1BTQjBhR2x6TG14bFpuUXNJSFF1YjJKcVpXTjBMbkpwWjJoMElEMGdkR2hwY3k1eWFXZG9kQ3dnZEM1dlltcGxZM1F1ZEc5d0lEMGdkR2hwY3k1MGIzQXNJSFF1YjJKcVpXTjBMbUp2ZEhSdmJTQTlJSFJvYVhNdVltOTBkRzl0TENCMExtOWlhbVZqZEM1dVpXRnlJRDBnZEdocGN5NXVaV0Z5TENCMExtOWlhbVZqZEM1bVlYSWdQU0IwYUdsekxtWmhjaXdnZEdocGN5NTJhV1YzSUNFOVBTQnVkV3hzSUNZbUlDaDBMbTlpYW1WamRDNTJhV1YzSUQwZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z2RHaHBjeTUyYVdWM0tTa3NJSFE3Q2lBZ0lDQjlDbjBzSUVocElEMGdOQ3dnYUdnZ1BTQmJDaUFnSUNBdU1USTFMQW9nSUNBZ0xqSXhOU3dLSUNBZ0lDNHpOU3dLSUNBZ0lDNDBORFlzQ2lBZ0lDQXVOVEkyTEFvZ0lDQWdMalU0TWdwZExDQmxhU0E5SURJd0xDQWtZU0E5SUc1bGR5Qk1jeXdnZFdnZ1BTQnVaWGNnY0dVc0lFdGhJRDBnYm5Wc2JDd2dhbTRnUFNBb01TQXJJRTFoZEdndWMzRnlkQ2cxS1NrZ0x5QXlMQ0JNYVNBOUlERWdMeUJxYml3Z1pHZ2dQU0JiQ2lBZ0lDQnVaWGNnUVNneExDQXhMQ0F4S1N3S0lDQWdJRzVsZHlCQktDMHhMQ0F4TENBeEtTd0tJQ0FnSUc1bGR5QkJLREVzSURFc0lDMHhLU3dLSUNBZ0lHNWxkeUJCS0MweExDQXhMQ0F0TVNrc0NpQWdJQ0J1WlhjZ1FTZ3dMQ0JxYml3Z1RHa3BMQW9nSUNBZ2JtVjNJRUVvTUN3Z2FtNHNJQzFNYVNrc0NpQWdJQ0J1WlhjZ1FTaE1hU3dnTUN3Z2FtNHBMQW9nSUNBZ2JtVjNJRUVvTFV4cExDQXdMQ0JxYmlrc0NpQWdJQ0J1WlhjZ1FTaHFiaXdnVEdrc0lEQXBMQW9nSUNBZ2JtVjNJRUVvTFdwdUxDQk1hU3dnTUNrS1hTd2dTM0lnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCMGFHbHpMbDl5Wlc1a1pYSmxjaUE5SUdVc0lIUm9hWE11WDNCcGJtZFFiMjVuVW1WdVpHVnlWR0Z5WjJWMElEMGdiblZzYkN3Z2RHaHBjeTVmYkc5a1RXRjRJRDBnTUN3Z2RHaHBjeTVmWTNWaVpWTnBlbVVnUFNBd0xDQjBhR2x6TGw5c2IyUlFiR0Z1WlhNZ1BTQmJYU3dnZEdocGN5NWZjMmw2WlV4dlpITWdQU0JiWFN3Z2RHaHBjeTVmYzJsbmJXRnpJRDBnVzEwc0lIUm9hWE11WDJKc2RYSk5ZWFJsY21saGJDQTlJRzUxYkd3c0lIUm9hWE11WDJOMVltVnRZWEJOWVhSbGNtbGhiQ0E5SUc1MWJHd3NJSFJvYVhNdVgyVnhkV2x5WldOMFRXRjBaWEpwWVd3Z1BTQnVkV3hzTENCMGFHbHpMbDlqYjIxd2FXeGxUV0YwWlhKcFlXd29kR2hwY3k1ZllteDFjazFoZEdWeWFXRnNLVHNLSUNBZ0lIMEtJQ0FnSUdaeWIyMVRZMlZ1WlNobExDQjBJRDBnTUN3Z2JpQTlJQzR4TENCcElEMGdNVEF3S1NCN0NpQWdJQ0FnSUNBZ1MyRWdQU0IwYUdsekxsOXlaVzVrWlhKbGNpNW5aWFJTWlc1a1pYSlVZWEpuWlhRb0tTd2dkR2hwY3k1ZmMyVjBVMmw2WlNneU5UWXBPd29nSUNBZ0lDQWdJR3hsZENCeUlEMGdkR2hwY3k1ZllXeHNiMk5oZEdWVVlYSm5aWFJ6S0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhJdVpHVndkR2hDZFdabVpYSWdQU0FoTUN3Z2RHaHBjeTVmYzJObGJtVlViME4xWW1WVlZpaGxMQ0J1TENCcExDQnlLU3dnZENBK0lEQWdKaVlnZEdocGN5NWZZbXgxY2loeUxDQXdMQ0F3TENCMEtTd2dkR2hwY3k1ZllYQndiSGxRVFZKRlRTaHlLU3dnZEdocGN5NWZZMnhsWVc1MWNDaHlLU3dnY2pzS0lDQWdJSDBLSUNBZ0lHWnliMjFGY1hWcGNtVmpkR0Z1WjNWc1lYSW9aU3dnZENBOUlHNTFiR3dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZabkp2YlZSbGVIUjFjbVVvWlN3Z2RDazdDaUFnSUNCOUNpQWdJQ0JtY205dFEzVmlaVzFoY0NobExDQjBJRDBnYm5Wc2JDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5bWNtOXRWR1Y0ZEhWeVpTaGxMQ0IwS1RzS0lDQWdJSDBLSUNBZ0lHTnZiWEJwYkdWRGRXSmxiV0Z3VTJoaFpHVnlLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVYMk4xWW1WdFlYQk5ZWFJsY21saGJDQTlQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWZZM1ZpWlcxaGNFMWhkR1Z5YVdGc0lEMGdiV2dvS1N3Z2RHaHBjeTVmWTI5dGNHbHNaVTFoZEdWeWFXRnNLSFJvYVhNdVgyTjFZbVZ0WVhCTllYUmxjbWxoYkNrcE93b2dJQ0FnZlFvZ0lDQWdZMjl0Y0dsc1pVVnhkV2x5WldOMFlXNW5kV3hoY2xOb1lXUmxjaWdwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbDlsY1hWcGNtVmpkRTFoZEdWeWFXRnNJRDA5UFNCdWRXeHNJQ1ltSUNoMGFHbHpMbDlsY1hWcGNtVmpkRTFoZEdWeWFXRnNJRDBnY0dnb0tTd2dkR2hwY3k1ZlkyOXRjR2xzWlUxaGRHVnlhV0ZzS0hSb2FYTXVYMlZ4ZFdseVpXTjBUV0YwWlhKcFlXd3BLVHNLSUNBZ0lIMEtJQ0FnSUdScGMzQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdsemNHOXpaU2dwTENCMGFHbHpMbDlqZFdKbGJXRndUV0YwWlhKcFlXd2dJVDA5SUc1MWJHd2dKaVlnZEdocGN5NWZZM1ZpWlcxaGNFMWhkR1Z5YVdGc0xtUnBjM0J2YzJVb0tTd2dkR2hwY3k1ZlpYRjFhWEpsWTNSTllYUmxjbWxoYkNBaFBUMGdiblZzYkNBbUppQjBhR2x6TGw5bGNYVnBjbVZqZEUxaGRHVnlhV0ZzTG1ScGMzQnZjMlVvS1RzS0lDQWdJSDBLSUNBZ0lGOXpaWFJUYVhwbEtHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMlJOWVhnZ1BTQk5ZWFJvTG1ac2IyOXlLRTFoZEdndWJHOW5NaWhsS1Nrc0lIUm9hWE11WDJOMVltVlRhWHBsSUQwZ1RXRjBhQzV3YjNjb01pd2dkR2hwY3k1ZmJHOWtUV0Y0S1RzS0lDQWdJSDBLSUNBZ0lGOWthWE53YjNObEtDa2dld29nSUNBZ0lDQWdJSFJvYVhNdVgySnNkWEpOWVhSbGNtbGhiQ0FoUFQwZ2JuVnNiQ0FtSmlCMGFHbHpMbDlpYkhWeVRXRjBaWEpwWVd3dVpHbHpjRzl6WlNncExDQjBhR2x6TGw5d2FXNW5VRzl1WjFKbGJtUmxjbFJoY21kbGRDQWhQVDBnYm5Wc2JDQW1KaUIwYUdsekxsOXdhVzVuVUc5dVoxSmxibVJsY2xSaGNtZGxkQzVrYVhOd2IzTmxLQ2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JsSUQwZ01Ec2daU0E4SUhSb2FYTXVYMnh2WkZCc1lXNWxjeTVzWlc1bmRHZzdJR1VyS3lsMGFHbHpMbDlzYjJSUWJHRnVaWE5iWlYwdVpHbHpjRzl6WlNncE93b2dJQ0FnZlFvZ0lDQWdYMk5zWldGdWRYQW9aU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVYM0psYm1SbGNtVnlMbk5sZEZKbGJtUmxjbFJoY21kbGRDaExZU2tzSUdVdWMyTnBjM052Y2xSbGMzUWdQU0FoTVN3Z2JISW9aU3dnTUN3Z01Dd2daUzUzYVdSMGFDd2daUzVvWldsbmFIUXBPd29nSUNBZ2ZRb2dJQ0FnWDJaeWIyMVVaWGgwZFhKbEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCbExtMWhjSEJwYm1jZ1BUMDlJSHB1SUh4OElHVXViV0Z3Y0dsdVp5QTlQVDBnWTJrZ1B5QjBhR2x6TGw5elpYUlRhWHBsS0dVdWFXMWhaMlV1YkdWdVozUm9JRDA5UFNBd0lEOGdNVFlnT2lCbExtbHRZV2RsV3pCZExuZHBaSFJvSUh4OElHVXVhVzFoWjJWYk1GMHVhVzFoWjJVdWQybGtkR2dwSURvZ2RHaHBjeTVmYzJWMFUybDZaU2hsTG1sdFlXZGxMbmRwWkhSb0lDOGdOQ2tzSUV0aElEMGdkR2hwY3k1ZmNtVnVaR1Z5WlhJdVoyVjBVbVZ1WkdWeVZHRnlaMlYwS0NrN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMElIeDhJSFJvYVhNdVgyRnNiRzlqWVhSbFZHRnlaMlYwY3lncE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkwWlhoMGRYSmxWRzlEZFdKbFZWWW9aU3dnYmlrc0lIUm9hWE11WDJGd2NHeDVVRTFTUlUwb2Jpa3NJSFJvYVhNdVgyTnNaV0Z1ZFhBb2Jpa3NJRzQ3Q2lBZ0lDQjlDaUFnSUNCZllXeHNiMk5oZEdWVVlYSm5aWFJ6S0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ015QXFJRTFoZEdndWJXRjRLSFJvYVhNdVgyTjFZbVZUYVhwbExDQXhNVElwTENCMElEMGdOQ0FxSUhSb2FYTXVYMk4xWW1WVGFYcGxMQ0J1SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J0WVdkR2FXeDBaWEk2SUcxMExBb2dJQ0FnSUNBZ0lDQWdJQ0J0YVc1R2FXeDBaWEk2SUcxMExBb2dJQ0FnSUNBZ0lDQWdJQ0JuWlc1bGNtRjBaVTFwY0cxaGNITTZJQ0V4TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCVWN5d0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eWJXRjBPaUJYZEN3S0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNKVGNHRmpaVG9nVFc0c0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb1FuVm1abVZ5T2lBaE1Rb2dJQ0FnSUNBZ0lIMHNJR2tnUFNCbWFDaGxMQ0IwTENCdUtUc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZjR2x1WjFCdmJtZFNaVzVrWlhKVVlYSm5aWFFnUFQwOUlHNTFiR3dnZkh3Z2RHaHBjeTVmY0dsdVoxQnZibWRTWlc1a1pYSlVZWEpuWlhRdWQybGtkR2dnSVQwOUlHVWdmSHdnZEdocGN5NWZjR2x1WjFCdmJtZFNaVzVrWlhKVVlYSm5aWFF1YUdWcFoyaDBJQ0U5UFNCMEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0JwYm1kUWIyNW5VbVZ1WkdWeVZHRnlaMlYwSUNFOVBTQnVkV3hzSUNZbUlIUm9hWE11WDJScGMzQnZjMlVvS1N3Z2RHaHBjeTVmY0dsdVoxQnZibWRTWlc1a1pYSlVZWEpuWlhRZ1BTQm1hQ2hsTENCMExDQnVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSHNnWDJ4dlpFMWhlRG9nY2lBZ2ZTQTlJSFJvYVhNN0NpQWdJQ0FnSUNBZ0lDQWdJQ2g3SUhOcGVtVk1iMlJ6T2lCMGFHbHpMbDl6YVhwbFRHOWtjeUFzSUd4dlpGQnNZVzVsY3pvZ2RHaHBjeTVmYkc5a1VHeGhibVZ6SUN3Z2MybG5iV0Z6T2lCMGFHbHpMbDl6YVdkdFlYTWdJSDBnUFNCdlh5aHlLU2tzSUhSb2FYTXVYMkpzZFhKTllYUmxjbWxoYkNBOUlHTmZLSElzSUdVc0lIUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVHNLSUNBZ0lIMEtJQ0FnSUY5amIyMXdhV3hsVFdGMFpYSnBZV3dvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2JtVjNJRTEwS0hSb2FYTXVYMnh2WkZCc1lXNWxjMXN3WFN3Z1pTazdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVnVaR1Z5WlhJdVkyOXRjR2xzWlNoMExDQWtZU2s3Q2lBZ0lDQjlDaUFnSUNCZmMyTmxibVZVYjBOMVltVlZWaWhsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCdVpYY2dlWFFvT1RBc0lERXNJSFFzSUc0cExDQmpJRDBnV3dvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVFvZ0lDQWdJQ0FnSUYwc0lHd2dQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFS0lDQWdJQ0FnSUNCZExDQm9JRDBnZEdocGN5NWZjbVZ1WkdWeVpYSXNJSFVnUFNCb0xtRjFkRzlEYkdWaGNpd2daQ0E5SUdndWRHOXVaVTFoY0hCcGJtYzdDaUFnSUNBZ0lDQWdhQzVuWlhSRGJHVmhja052Ykc5eUtIVm9LU3dnYUM1MGIyNWxUV0Z3Y0dsdVp5QTlJRTV1TENCb0xtRjFkRzlEYkdWaGNpQTlJQ0V4T3dvZ0lDQWdJQ0FnSUd4bGRDQm1JRDBnYm1WM0lGTnVLSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVG9nSWxCTlVrVk5Ma0poWTJ0bmNtOTFibVFpTEFvZ0lDQWdJQ0FnSUNBZ0lDQnphV1JsT2lCR2RDd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWd2RHaFhjbWwwWlRvZ0lURXNDaUFnSUNBZ0lDQWdJQ0FnSUdSbGNIUm9WR1Z6ZERvZ0lURUtJQ0FnSUNBZ0lDQjlLU3dnYlNBOUlHNWxkeUJOZENodVpYY2dTbWtzSUdZcExDQmZJRDBnSVRFc0lHY2dQU0JsTG1KaFkydG5jbTkxYm1RN0NpQWdJQ0FnSUNBZ1p5QS9JR2N1YVhORGIyeHZjaUFtSmlBb1ppNWpiMnh2Y2k1amIzQjVLR2NwTENCbExtSmhZMnRuY205MWJtUWdQU0J1ZFd4c0xDQmZJRDBnSVRBcElEb2dLR1l1WTI5c2IzSXVZMjl3ZVNoMWFDa3NJRjhnUFNBaE1DazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQndJRDBnTURzZ2NDQThJRFk3SUhBckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjJJRDBnY0NBbElETTdDaUFnSUNBZ0lDQWdJQ0FnSUhZZ1BUMDlJREFnUHlBb2J5NTFjQzV6WlhRb01Dd2dZMXR3WFN3Z01Da3NJRzh1Ykc5dmEwRjBLR3hiY0Ywc0lEQXNJREFwS1NBNklIWWdQVDA5SURFZ1B5QW9ieTUxY0M1elpYUW9NQ3dnTUN3Z1kxdHdYU2tzSUc4dWJHOXZhMEYwS0RBc0lHeGJjRjBzSURBcEtTQTZJQ2h2TG5Wd0xuTmxkQ2d3TENCalczQmRMQ0F3S1N3Z2J5NXNiMjlyUVhRb01Dd2dNQ3dnYkZ0d1hTa3BPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdlQ0E5SUhSb2FYTXVYMk4xWW1WVGFYcGxPd29nSUNBZ0lDQWdJQ0FnSUNCc2NpaHBMQ0IySUNvZ2VDd2djQ0ErSURJZ1B5QjRJRG9nTUN3Z2VDd2dlQ2tzSUdndWMyVjBVbVZ1WkdWeVZHRnlaMlYwS0drcExDQmZJQ1ltSUdndWNtVnVaR1Z5S0cwc0lHOHBMQ0JvTG5KbGJtUmxjaWhsTENCdktUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdiUzVuWlc5dFpYUnllUzVrYVhOd2IzTmxLQ2tzSUcwdWJXRjBaWEpwWVd3dVpHbHpjRzl6WlNncExDQm9MblJ2Ym1WTllYQndhVzVuSUQwZ1pDd2dhQzVoZFhSdlEyeGxZWElnUFNCMUxDQmxMbUpoWTJ0bmNtOTFibVFnUFNCbk93b2dJQ0FnZlFvZ0lDQWdYM1JsZUhSMWNtVlViME4xWW1WVlZpaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbDl5Wlc1a1pYSmxjaXdnYVNBOUlHVXViV0Z3Y0dsdVp5QTlQVDBnZW00Z2ZId2daUzV0WVhCd2FXNW5JRDA5UFNCamFUc0tJQ0FnSUNBZ0lDQnBJRDhnS0hSb2FYTXVYMk4xWW1WdFlYQk5ZWFJsY21saGJDQTlQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWZZM1ZpWlcxaGNFMWhkR1Z5YVdGc0lEMGdiV2dvS1Nrc0lIUm9hWE11WDJOMVltVnRZWEJOWVhSbGNtbGhiQzUxYm1sbWIzSnRjeTVtYkdsd1JXNTJUV0Z3TG5aaGJIVmxJRDBnWlM1cGMxSmxibVJsY2xSaGNtZGxkRlJsZUhSMWNtVWdQVDA5SUNFeElEOGdMVEVnT2lBeEtTQTZJSFJvYVhNdVgyVnhkV2x5WldOMFRXRjBaWEpwWVd3Z1BUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdVgyVnhkV2x5WldOMFRXRjBaWEpwWVd3Z1BTQndhQ2dwS1RzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUdrZ1B5QjBhR2x6TGw5amRXSmxiV0Z3VFdGMFpYSnBZV3dnT2lCMGFHbHpMbDlsY1hWcGNtVmpkRTFoZEdWeWFXRnNMQ0JoSUQwZ2JtVjNJRTEwS0hSb2FYTXVYMnh2WkZCc1lXNWxjMXN3WFN3Z2Npa3NJRzhnUFNCeUxuVnVhV1p2Y20xek93b2dJQ0FnSUNBZ0lHOHVaVzUyVFdGd0xuWmhiSFZsSUQwZ1pUc0tJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlIUm9hWE11WDJOMVltVlRhWHBsT3dvZ0lDQWdJQ0FnSUd4eUtIUXNJREFzSURBc0lETWdLaUJqTENBeUlDb2dZeWtzSUc0dWMyVjBVbVZ1WkdWeVZHRnlaMlYwS0hRcExDQnVMbkpsYm1SbGNpaGhMQ0FrWVNrN0NpQWdJQ0I5Q2lBZ0lDQmZZWEJ3YkhsUVRWSkZUU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbDl5Wlc1a1pYSmxjaXdnYmlBOUlIUXVZWFYwYjBOc1pXRnlPd29nSUNBZ0lDQWdJSFF1WVhWMGIwTnNaV0Z5SUQwZ0lURTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnBJRDBnTVRzZ2FTQThJSFJvYVhNdVgyeHZaRkJzWVc1bGN5NXNaVzVuZEdnN0lHa3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ1RXRjBhQzV6Y1hKMEtIUm9hWE11WDNOcFoyMWhjMXRwWFNBcUlIUm9hWE11WDNOcFoyMWhjMXRwWFNBdElIUm9hWE11WDNOcFoyMWhjMXRwSUMwZ01WMGdLaUIwYUdsekxsOXphV2R0WVhOYmFTQXRJREZkS1N3Z1lTQTlJR1JvV3locElDMGdNU2tnSlNCa2FDNXNaVzVuZEdoZE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWliSFZ5S0dVc0lHa2dMU0F4TENCcExDQnlMQ0JoS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RDNWhkWFJ2UTJ4bFlYSWdQU0J1T3dvZ0lDQWdmUW9nSUNBZ1gySnNkWElvWlN3Z2RDd2diaXdnYVN3Z2Npa2dld29nSUNBZ0lDQWdJR3hsZENCaElEMGdkR2hwY3k1ZmNHbHVaMUJ2Ym1kU1pXNWtaWEpVWVhKblpYUTdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmFHRnNaa0pzZFhJb1pTd2dZU3dnZEN3Z2Jpd2dhU3dnSW14aGRHbDBkV1JwYm1Gc0lpd2djaWtzSUhSb2FYTXVYMmhoYkdaQ2JIVnlLR0VzSUdVc0lHNHNJRzRzSUdrc0lDSnNiMjVuYVhSMVpHbHVZV3dpTENCeUtUc0tJQ0FnSUgwS0lDQWdJRjlvWVd4bVFteDFjaWhsTENCMExDQnVMQ0JwTENCeUxDQmhMQ0J2S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR01nUFNCMGFHbHpMbDl5Wlc1a1pYSmxjaXdnYkNBOUlIUm9hWE11WDJKc2RYSk5ZWFJsY21saGJEc0tJQ0FnSUNBZ0lDQmhJQ0U5UFNBaWJHRjBhWFIxWkdsdVlXd2lJQ1ltSUdFZ0lUMDlJQ0pzYjI1bmFYUjFaR2x1WVd3aUlDWW1JR052Ym5OdmJHVXVaWEp5YjNJb0ltSnNkWElnWkdseVpXTjBhVzl1SUcxMWMzUWdZbVVnWldsMGFHVnlJR3hoZEdsMGRXUnBibUZzSUc5eUlHeHZibWRwZEhWa2FXNWhiQ0VpS1RzS0lDQWdJQ0FnSUNCc1pYUWdhQ0E5SURNc0lIVWdQU0J1WlhjZ1RYUW9kR2hwY3k1ZmJHOWtVR3hoYm1WelcybGRMQ0JzS1N3Z1pDQTlJR3d1ZFc1cFptOXliWE1zSUdZZ1BTQjBhR2x6TGw5emFYcGxURzlrYzF0dVhTQXRJREVzSUcwZ1BTQnBjMFpwYm1sMFpTaHlLU0EvSUUxaGRHZ3VVRWtnTHlBb01pQXFJR1lwSURvZ01pQXFJRTFoZEdndVVFa2dMeUFvTWlBcUlHVnBJQzBnTVNrc0lGOGdQU0J5SUM4Z2JTd2daeUE5SUdselJtbHVhWFJsS0hJcElEOGdNU0FySUUxaGRHZ3VabXh2YjNJb2FDQXFJRjhwSURvZ1pXazdDaUFnSUNBZ0lDQWdaeUErSUdWcElDWW1JR052Ym5OdmJHVXVkMkZ5YmloZ2MybG5iV0ZTWVdScFlXNXpMQ0FrZTNKOUxDQnBjeUIwYjI4Z2JHRnlaMlVnWVc1a0lIZHBiR3dnWTJ4cGNDd2dZWE1nYVhRZ2NtVnhkV1Z6ZEdWa0lDUjdaMzBnYzJGdGNHeGxjeUIzYUdWdUlIUm9aU0J0WVhocGJYVnRJR2x6SUhObGRDQjBieUFrZTJWcGZXQXBPd29nSUNBZ0lDQWdJR3hsZENCd0lEMGdXMTBzSUhZZ1BTQXdPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdVaUE5SURBN0lGSWdQQ0JsYVRzZ0t5dFNLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRWtnUFNCU0lDOGdYeXdnVFNBOUlFMWhkR2d1Wlhod0tDMUpJQ29nU1NBdklESXBPd29nSUNBZ0lDQWdJQ0FnSUNCd0xuQjFjMmdvVFNrc0lGSWdQVDA5SURBZ1B5QjJJQ3M5SUUwZ09pQlNJRHdnWnlBbUppQW9kaUFyUFNBeUlDb2dUU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnVWlBOUlEQTdJRklnUENCd0xteGxibWQwYURzZ1Vpc3JLWEJiVWwwZ1BTQndXMUpkSUM4Z2Rqc0tJQ0FnSUNBZ0lDQmtMbVZ1ZGsxaGNDNTJZV3gxWlNBOUlHVXVkR1Y0ZEhWeVpTd2daQzV6WVcxd2JHVnpMblpoYkhWbElEMGdaeXdnWkM1M1pXbG5hSFJ6TG5aaGJIVmxJRDBnY0N3Z1pDNXNZWFJwZEhWa2FXNWhiQzUyWVd4MVpTQTlJR0VnUFQwOUlDSnNZWFJwZEhWa2FXNWhiQ0lzSUc4Z0ppWWdLR1F1Y0c5c1pVRjRhWE11ZG1Gc2RXVWdQU0J2S1RzS0lDQWdJQ0FnSUNCc1pYUWdleUJmYkc5a1RXRjRPaUI0SUNCOUlEMGdkR2hwY3pzS0lDQWdJQ0FnSUNCa0xtUlVhR1YwWVM1MllXeDFaU0E5SUcwc0lHUXViV2x3U1c1MExuWmhiSFZsSUQwZ2VDQXRJRzQ3Q2lBZ0lDQWdJQ0FnYkdWMElIa2dQU0IwYUdsekxsOXphWHBsVEc5a2MxdHBYU3dnWWlBOUlETWdLaUI1SUNvZ0tHa2dQaUI0SUMwZ1NHa2dQeUJwSUMwZ2VDQXJJRWhwSURvZ01Da3NJSGNnUFNBMElDb2dLSFJvYVhNdVgyTjFZbVZUYVhwbElDMGdlU2s3Q2lBZ0lDQWdJQ0FnYkhJb2RDd2dZaXdnZHl3Z015QXFJSGtzSURJZ0tpQjVLU3dnWXk1elpYUlNaVzVrWlhKVVlYSm5aWFFvZENrc0lHTXVjbVZ1WkdWeUtIVXNJQ1JoS1RzS0lDQWdJSDBLZlRzS1puVnVZM1JwYjI0Z2IxOG9jekVwSUhzS0lDQWdJR3hsZENCbElEMGdXMTBzSUhRZ1BTQmJYU3dnYmlBOUlGdGRMQ0JwSUQwZ2N6RXNJSElnUFNCek1TQXRJRWhwSUNzZ01TQXJJR2hvTG14bGJtZDBhRHNLSUNBZ0lHWnZjaWhzWlhRZ1lTQTlJREE3SUdFZ1BDQnlPeUJoS3lzcGV3b2dJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ1RXRjBhQzV3YjNjb01pd2dhU2s3Q2lBZ0lDQWdJQ0FnZEM1d2RYTm9LRzhwT3dvZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnTVNBdklHODdDaUFnSUNBZ0lDQWdZU0ErSUhNeElDMGdTR2tnUHlCaklEMGdhR2hiWVNBdElITXhJQ3NnU0drZ0xTQXhYU0E2SUdFZ1BUMDlJREFnSmlZZ0tHTWdQU0F3S1N3Z2JpNXdkWE5vS0dNcE93b2dJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ01TQXZJQ2h2SUMwZ01pa3NJR2dnUFNBdGJDd2dkU0E5SURFZ0t5QnNMQ0JrSUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0JvTEFvZ0lDQWdJQ0FnSUNBZ0lDQm9MQW9nSUNBZ0lDQWdJQ0FnSUNCMUxBb2dJQ0FnSUNBZ0lDQWdJQ0JvTEFvZ0lDQWdJQ0FnSUNBZ0lDQjFMQW9nSUNBZ0lDQWdJQ0FnSUNCMUxBb2dJQ0FnSUNBZ0lDQWdJQ0JvTEFvZ0lDQWdJQ0FnSUNBZ0lDQm9MQW9nSUNBZ0lDQWdJQ0FnSUNCMUxBb2dJQ0FnSUNBZ0lDQWdJQ0IxTEFvZ0lDQWdJQ0FnSUNBZ0lDQm9MQW9nSUNBZ0lDQWdJQ0FnSUNCMUNpQWdJQ0FnSUNBZ1hTd2daaUE5SURZc0lHMGdQU0EyTENCZklEMGdNeXdnWnlBOUlESXNJSEFnUFNBeExDQjJJRDBnYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2hmSUNvZ2JTQXFJR1lwTENCNElEMGdibVYzSUVac2IyRjBNekpCY25KaGVTaG5JQ29nYlNBcUlHWXBMQ0I1SUQwZ2JtVjNJRVpzYjJGME16SkJjbkpoZVNod0lDb2diU0FxSUdZcE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2R5QTlJREE3SUhjZ1BDQm1PeUIzS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1VpQTlJSGNnSlNBeklDb2dNaUF2SURNZ0xTQXhMQ0JKSUQwZ2R5QStJRElnUHlBd0lEb2dMVEVzSUUwZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlNMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdTU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JTSUNzZ01pQXZJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JKTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZJZ0t5QXlJQzhnTXl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVrZ0t5QXhMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRklzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JKTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZJZ0t5QXlJQzhnTXl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVrZ0t5QXhMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRklzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JKSUNzZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQUtJQ0FnSUNBZ0lDQWdJQ0FnWFRzS0lDQWdJQ0FnSUNBZ0lDQWdkaTV6WlhRb1RTd2dYeUFxSUcwZ0tpQjNLU3dnZUM1elpYUW9aQ3dnWnlBcUlHMGdLaUIzS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZRZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkeXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGNzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZHl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhjS0lDQWdJQ0FnSUNBZ0lDQWdYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2VTNXpaWFFvVkN3Z2NDQXFJRzBnS2lCM0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdiR1YwSUdJZ1BTQnVaWGNnUjJVN0NpQWdJQ0FnSUNBZ1lpNXpaWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWl3Z2JtVjNJR1YwS0hZc0lGOHBLU3dnWWk1elpYUkJkSFJ5YVdKMWRHVW9JblYySWl3Z2JtVjNJR1YwS0hnc0lHY3BLU3dnWWk1elpYUkJkSFJ5YVdKMWRHVW9JbVpoWTJWSmJtUmxlQ0lzSUc1bGR5QmxkQ2g1TENCd0tTa3NJR1V1Y0hWemFDaGlLU3dnYVNBK0lFaHBJQ1ltSUdrdExUc0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdiRzlrVUd4aGJtVnpPaUJsTEFvZ0lDQWdJQ0FnSUhOcGVtVk1iMlJ6T2lCMExBb2dJQ0FnSUNBZ0lITnBaMjFoY3pvZ2Jnb2dJQ0FnZlRzS2ZRcG1kVzVqZEdsdmJpQm1hQ2h6TVN3Z1pTd2dkQ2tnZXdvZ0lDQWdiR1YwSUc0Z1BTQnVaWGNnY1hRb2N6RXNJR1VzSUhRcE93b2dJQ0FnY21WMGRYSnVJRzR1ZEdWNGRIVnlaUzV0WVhCd2FXNW5JRDBnVm5Nc0lHNHVkR1Y0ZEhWeVpTNXVZVzFsSUQwZ0lsQk5Va1ZOTG1OMVltVlZkaUlzSUc0dWMyTnBjM052Y2xSbGMzUWdQU0FoTUN3Z2Jqc0tmUXBtZFc1amRHbHZiaUJzY2loek1Td2daU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdjekV1ZG1sbGQzQnZjblF1YzJWMEtHVXNJSFFzSUc0c0lHa3BMQ0J6TVM1elkybHpjMjl5TG5ObGRDaGxMQ0IwTENCdUxDQnBLVHNLZlFwbWRXNWpkR2x2YmlCalh5aHpNU3dnWlN3Z2RDa2dld29nSUNBZ2JHVjBJRzRnUFNCdVpYY2dSbXh2WVhRek1rRnljbUY1S0dWcEtTd2dhU0E5SUc1bGR5QkJLREFzSURFc0lEQXBPd29nSUNBZ2NtVjBkWEp1SUc1bGR5QnFkQ2g3Q2lBZ0lDQWdJQ0FnYm1GdFpUb2dJbE53YUdWeWFXTmhiRWRoZFhOemFXRnVRbXgxY2lJc0NpQWdJQ0FnSUNBZ1pHVm1hVzVsY3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J1T2lCbGFTd0tJQ0FnSUNBZ0lDQWdJQ0FnUTFWQ1JWVldYMVJGV0VWTVgxZEpSRlJJT2lBeElDOGdaU3dLSUNBZ0lDQWdJQ0FnSUNBZ1ExVkNSVlZXWDFSRldFVk1YMGhGU1VkSVZEb2dNU0F2SUhRc0NpQWdJQ0FnSUNBZ0lDQWdJRU5WUWtWVlZsOU5RVmhmVFVsUU9pQmdKSHR6TVgwdU1HQUtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnVkazFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjMkZ0Y0d4bGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklERUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdkMlZwWjJoMGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNEtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdiR0YwYVhSMVpHbHVZV3c2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUFoTVFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCa1ZHaGxkR0U2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUcxcGNFbHVkRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREFLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnY0c5c1pVRjRhWE02SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJwQ2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ1dtTW9LU3dLSUNBZ0lDQWdJQ0JtY21GbmJXVnVkRk5vWVdSbGNqb2dZQW9LQ1FrSmNISmxZMmx6YVc5dUlHMWxaR2wxYlhBZ1pteHZZWFE3Q2drSkNYQnlaV05wYzJsdmJpQnRaV1JwZFcxd0lHbHVkRHNLQ2drSkNYWmhjbmxwYm1jZ2RtVmpNeUIyVDNWMGNIVjBSR2x5WldOMGFXOXVPd29LQ1FrSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ1pXNTJUV0Z3T3dvSkNRbDFibWxtYjNKdElHbHVkQ0J6WVcxd2JHVnpPd29KQ1FsMWJtbG1iM0p0SUdac2IyRjBJSGRsYVdkb2RITmJJRzRnWFRzS0NRa0pkVzVwWm05eWJTQmliMjlzSUd4aGRHbDBkV1JwYm1Gc093b0pDUWwxYm1sbWIzSnRJR1pzYjJGMElHUlVhR1YwWVRzS0NRa0pkVzVwWm05eWJTQm1iRzloZENCdGFYQkpiblE3Q2drSkNYVnVhV1p2Y20wZ2RtVmpNeUJ3YjJ4bFFYaHBjenNLQ2drSkNTTmtaV1pwYm1VZ1JVNVdUVUZRWDFSWlVFVmZRMVZDUlY5VlZnb0pDUWtqYVc1amJIVmtaU0E4WTNWaVpWOTFkbDl5Wldac1pXTjBhVzl1WDJaeVlXZHRaVzUwUGdvS0NRa0pkbVZqTXlCblpYUlRZVzF3YkdVb0lHWnNiMkYwSUhSb1pYUmhMQ0IyWldNeklHRjRhWE1nS1NCN0Nnb0pDUWtKWm14dllYUWdZMjl6VkdobGRHRWdQU0JqYjNNb0lIUm9aWFJoSUNrN0Nna0pDUWt2THlCU2IyUnlhV2QxWlhNbklHRjRhWE10WVc1bmJHVWdjbTkwWVhScGIyNEtDUWtKQ1habFl6TWdjMkZ0Y0d4bFJHbHlaV04wYVc5dUlEMGdkazkxZEhCMWRFUnBjbVZqZEdsdmJpQXFJR052YzFSb1pYUmhDZ2tKQ1FrSkt5QmpjbTl6Y3lnZ1lYaHBjeXdnZGs5MWRIQjFkRVJwY21WamRHbHZiaUFwSUNvZ2MybHVLQ0IwYUdWMFlTQXBDZ2tKQ1FrSkt5QmhlR2x6SUNvZ1pHOTBLQ0JoZUdsekxDQjJUM1YwY0hWMFJHbHlaV04wYVc5dUlDa2dLaUFvSURFdU1DQXRJR052YzFSb1pYUmhJQ2s3Q2dvSkNRa0pjbVYwZFhKdUlHSnBiR2x1WldGeVEzVmlaVlZXS0NCbGJuWk5ZWEFzSUhOaGJYQnNaVVJwY21WamRHbHZiaXdnYldsd1NXNTBJQ2s3Q2dvSkNRbDlDZ29KQ1FsMmIybGtJRzFoYVc0b0tTQjdDZ29KQ1FrSmRtVmpNeUJoZUdseklEMGdiR0YwYVhSMVpHbHVZV3dnUHlCd2IyeGxRWGhwY3lBNklHTnliM056S0NCd2IyeGxRWGhwY3l3Z2RrOTFkSEIxZEVScGNtVmpkR2x2YmlBcE93b0tDUWtKQ1dsbUlDZ2dZV3hzS0NCbGNYVmhiQ2dnWVhocGN5d2dkbVZqTXlnZ01DNHdJQ2tnS1NBcElDa2dld29LQ1FrSkNRbGhlR2x6SUQwZ2RtVmpNeWdnZGs5MWRIQjFkRVJwY21WamRHbHZiaTU2TENBd0xqQXNJQzBnZGs5MWRIQjFkRVJwY21WamRHbHZiaTU0SUNrN0Nnb0pDUWtKZlFvS0NRa0pDV0Y0YVhNZ1BTQnViM0p0WVd4cGVtVW9JR0Y0YVhNZ0tUc0tDZ2tKQ1FsbmJGOUdjbUZuUTI5c2IzSWdQU0IyWldNMEtDQXdMakFzSURBdU1Dd2dNQzR3TENBeExqQWdLVHNLQ1FrSkNXZHNYMFp5WVdkRGIyeHZjaTV5WjJJZ0t6MGdkMlZwWjJoMGMxc2dNQ0JkSUNvZ1oyVjBVMkZ0Y0d4bEtDQXdMakFzSUdGNGFYTWdLVHNLQ2drSkNRbG1iM0lnS0NCcGJuUWdhU0E5SURFN0lHa2dQQ0J1T3lCcEt5c2dLU0I3Q2dvSkNRa0pDV2xtSUNnZ2FTQStQU0J6WVcxd2JHVnpJQ2tnZXdvS0NRa0pDUWtKWW5KbFlXczdDZ29KQ1FrSkNYMEtDZ2tKQ1FrSlpteHZZWFFnZEdobGRHRWdQU0JrVkdobGRHRWdLaUJtYkc5aGRDZ2dhU0FwT3dvSkNRa0pDV2RzWDBaeVlXZERiMnh2Y2k1eVoySWdLejBnZDJWcFoyaDBjMXNnYVNCZElDb2daMlYwVTJGdGNHeGxLQ0F0TVM0d0lDb2dkR2hsZEdFc0lHRjRhWE1nS1RzS0NRa0pDUWxuYkY5R2NtRm5RMjlzYjNJdWNtZGlJQ3M5SUhkbGFXZG9kSE5iSUdrZ1hTQXFJR2RsZEZOaGJYQnNaU2dnZEdobGRHRXNJR0Y0YVhNZ0tUc0tDZ2tKQ1FsOUNnb0pDUWw5Q2drSllDd0tJQ0FnSUNBZ0lDQmliR1Z1WkdsdVp6b2dSRzRzQ2lBZ0lDQWdJQ0FnWkdWd2RHaFVaWE4wT2lBaE1Td0tJQ0FnSUNBZ0lDQmtaWEIwYUZkeWFYUmxPaUFoTVFvZ0lDQWdmU2s3Q24wS1puVnVZM1JwYjI0Z2NHZ29LU0I3Q2lBZ0lDQnlaWFIxY200Z2JtVjNJR3AwS0hzS0lDQWdJQ0FnSUNCdVlXMWxPaUFpUlhGMWFYSmxZM1JoYm1kMWJHRnlWRzlEZFdKbFZWWWlMQW9nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnVkazFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2RtVnlkR1Y0VTJoaFpHVnlPaUJhWXlncExBb2dJQ0FnSUNBZ0lHWnlZV2R0Wlc1MFUyaGhaR1Z5T2lCZ0Nnb0pDUWx3Y21WamFYTnBiMjRnYldWa2FYVnRjQ0JtYkc5aGREc0tDUWtKY0hKbFkybHphVzl1SUcxbFpHbDFiWEFnYVc1ME93b0tDUWtKZG1GeWVXbHVaeUIyWldNeklIWlBkWFJ3ZFhSRWFYSmxZM1JwYjI0N0Nnb0pDUWwxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0JsYm5aTllYQTdDZ29KQ1FramFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvS0NRa0pkbTlwWkNCdFlXbHVLQ2tnZXdvS0NRa0pDWFpsWXpNZ2IzVjBjSFYwUkdseVpXTjBhVzl1SUQwZ2JtOXliV0ZzYVhwbEtDQjJUM1YwY0hWMFJHbHlaV04wYVc5dUlDazdDZ2tKQ1FsMlpXTXlJSFYySUQwZ1pYRjFhWEpsWTNSVmRpZ2diM1YwY0hWMFJHbHlaV04wYVc5dUlDazdDZ29KQ1FrSloyeGZSbkpoWjBOdmJHOXlJRDBnZG1Wak5DZ2dkR1Y0ZEhWeVpUSkVJQ2dnWlc1MlRXRndMQ0IxZGlBcExuSm5ZaXdnTVM0d0lDazdDZ29KQ1FsOUNna0pZQ3dLSUNBZ0lDQWdJQ0JpYkdWdVpHbHVaem9nUkc0c0NpQWdJQ0FnSUNBZ1pHVndkR2hVWlhOME9pQWhNU3dLSUNBZ0lDQWdJQ0JrWlhCMGFGZHlhWFJsT2lBaE1Rb2dJQ0FnZlNrN0NuMEtablZ1WTNScGIyNGdiV2dvS1NCN0NpQWdJQ0J5WlhSMWNtNGdibVYzSUdwMEtIc0tJQ0FnSUNBZ0lDQnVZVzFsT2lBaVEzVmlaVzFoY0ZSdlEzVmlaVlZXSWl3S0lDQWdJQ0FnSUNCMWJtbG1iM0p0Y3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JsYm5aTllYQTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUdac2FYQkZiblpOWVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBdE1Rb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCMlpYSjBaWGhUYUdGa1pYSTZJRnBqS0Nrc0NpQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUdBS0Nna0pDWEJ5WldOcGMybHZiaUJ0WldScGRXMXdJR1pzYjJGME93b0pDUWx3Y21WamFYTnBiMjRnYldWa2FYVnRjQ0JwYm5RN0Nnb0pDUWwxYm1sbWIzSnRJR1pzYjJGMElHWnNhWEJGYm5aTllYQTdDZ29KQ1FsMllYSjVhVzVuSUhabFl6TWdkazkxZEhCMWRFUnBjbVZqZEdsdmJqc0tDZ2tKQ1hWdWFXWnZjbTBnYzJGdGNHeGxja04xWW1VZ1pXNTJUV0Z3T3dvS0NRa0pkbTlwWkNCdFlXbHVLQ2tnZXdvS0NRa0pDV2RzWDBaeVlXZERiMnh2Y2lBOUlIUmxlSFIxY21WRGRXSmxLQ0JsYm5aTllYQXNJSFpsWXpNb0lHWnNhWEJGYm5aTllYQWdLaUIyVDNWMGNIVjBSR2x5WldOMGFXOXVMbmdzSUhaUGRYUndkWFJFYVhKbFkzUnBiMjR1ZVhvZ0tTQXBPd29LQ1FrSmZRb0pDV0FzQ2lBZ0lDQWdJQ0FnWW14bGJtUnBibWM2SUVSdUxBb2dJQ0FnSUNBZ0lHUmxjSFJvVkdWemREb2dJVEVzQ2lBZ0lDQWdJQ0FnWkdWd2RHaFhjbWwwWlRvZ0lURUtJQ0FnSUgwcE93cDlDbVoxYm1OMGFXOXVJRnBqS0NrZ2V3b2dJQ0FnY21WMGRYSnVJR0FLQ2drSmNISmxZMmx6YVc5dUlHMWxaR2wxYlhBZ1pteHZZWFE3Q2drSmNISmxZMmx6YVc5dUlHMWxaR2wxYlhBZ2FXNTBPd29LQ1FsaGRIUnlhV0oxZEdVZ1pteHZZWFFnWm1GalpVbHVaR1Y0T3dvS0NRbDJZWEo1YVc1bklIWmxZek1nZGs5MWRIQjFkRVJwY21WamRHbHZianNLQ2drSkx5OGdVa2dnWTI5dmNtUnBibUYwWlNCemVYTjBaVzA3SUZCTlVrVk5JR1poWTJVdGFXNWtaWGhwYm1jZ1kyOXVkbVZ1ZEdsdmJnb0pDWFpsWXpNZ1oyVjBSR2x5WldOMGFXOXVLQ0IyWldNeUlIVjJMQ0JtYkc5aGRDQm1ZV05sSUNrZ2V3b0tDUWtKZFhZZ1BTQXlMakFnS2lCMWRpQXRJREV1TURzS0Nna0pDWFpsWXpNZ1pHbHlaV04wYVc5dUlEMGdkbVZqTXlnZ2RYWXNJREV1TUNBcE93b0tDUWtKYVdZZ0tDQm1ZV05sSUQwOUlEQXVNQ0FwSUhzS0Nna0pDUWxrYVhKbFkzUnBiMjRnUFNCa2FYSmxZM1JwYjI0dWVubDRPeUF2THlBb0lERXNJSFlzSUhVZ0tTQndiM01nZUFvS0NRa0pmU0JsYkhObElHbG1JQ2dnWm1GalpTQTlQU0F4TGpBZ0tTQjdDZ29KQ1FrSlpHbHlaV04wYVc5dUlEMGdaR2x5WldOMGFXOXVMbmg2ZVRzS0NRa0pDV1JwY21WamRHbHZiaTU0ZWlBcVBTQXRNUzR3T3lBdkx5QW9JQzExTENBeExDQXRkaUFwSUhCdmN5QjVDZ29KQ1FsOUlHVnNjMlVnYVdZZ0tDQm1ZV05sSUQwOUlESXVNQ0FwSUhzS0Nna0pDUWxrYVhKbFkzUnBiMjR1ZUNBcVBTQXRNUzR3T3lBdkx5QW9JQzExTENCMkxDQXhJQ2tnY0c5eklIb0tDZ2tKQ1gwZ1pXeHpaU0JwWmlBb0lHWmhZMlVnUFQwZ015NHdJQ2tnZXdvS0NRa0pDV1JwY21WamRHbHZiaUE5SUdScGNtVmpkR2x2Ymk1NmVYZzdDZ2tKQ1Fsa2FYSmxZM1JwYjI0dWVIb2dLajBnTFRFdU1Ec2dMeThnS0NBdE1Td2dkaXdnTFhVZ0tTQnVaV2NnZUFvS0NRa0pmU0JsYkhObElHbG1JQ2dnWm1GalpTQTlQU0EwTGpBZ0tTQjdDZ29KQ1FrSlpHbHlaV04wYVc5dUlEMGdaR2x5WldOMGFXOXVMbmg2ZVRzS0NRa0pDV1JwY21WamRHbHZiaTU0ZVNBcVBTQXRNUzR3T3lBdkx5QW9JQzExTENBdE1Td2dkaUFwSUc1bFp5QjVDZ29KQ1FsOUlHVnNjMlVnYVdZZ0tDQm1ZV05sSUQwOUlEVXVNQ0FwSUhzS0Nna0pDUWxrYVhKbFkzUnBiMjR1ZWlBcVBTQXRNUzR3T3lBdkx5QW9JSFVzSUhZc0lDMHhJQ2tnYm1WbklIb0tDZ2tKQ1gwS0Nna0pDWEpsZEhWeWJpQmthWEpsWTNScGIyNDdDZ29KQ1gwS0Nna0pkbTlwWkNCdFlXbHVLQ2tnZXdvS0NRa0pkazkxZEhCMWRFUnBjbVZqZEdsdmJpQTlJR2RsZEVScGNtVmpkR2x2YmlnZ2RYWXNJR1poWTJWSmJtUmxlQ0FwT3dvSkNRbG5iRjlRYjNOcGRHbHZiaUE5SUhabFl6UW9JSEJ2YzJsMGFXOXVMQ0F4TGpBZ0tUc0tDZ2tKZlFvSllEc0tmUXBtZFc1amRHbHZiaUJzWHloek1Ta2dld29nSUNBZ2JHVjBJR1VnUFNCdVpYY2dWMlZoYTAxaGNDd2dkQ0E5SUc1MWJHdzdDaUFnSUNCbWRXNWpkR2x2YmlCdUtHOHBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2J5QW1KaUJ2TG1selZHVjRkSFZ5WlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJRzh1YldGd2NHbHVaeXdnYkNBOUlHTWdQVDA5SUVseUlIeDhJR01nUFQwOUlGVnlMQ0JvSUQwZ1l5QTlQVDBnZW00Z2ZId2dZeUE5UFQwZ1kyazdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNJSHg4SUdncElHbG1JQ2h2TG1selVtVnVaR1Z5VkdGeVoyVjBWR1Y0ZEhWeVpTQW1KaUJ2TG01bFpXUnpVRTFTUlUxVmNHUmhkR1VnUFQwOUlDRXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2TG01bFpXUnpVRTFTUlUxVmNHUmhkR1VnUFNBaE1Uc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IxSUQwZ1pTNW5aWFFvYnlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZENBOVBUMGdiblZzYkNBbUppQW9kQ0E5SUc1bGR5QkxjaWh6TVNrcExDQjFJRDBnYkNBL0lIUXVabkp2YlVWeGRXbHlaV04wWVc1bmRXeGhjaWh2TENCMUtTQTZJSFF1Wm5KdmJVTjFZbVZ0WVhBb2J5d2dkU2tzSUdVdWMyVjBLRzhzSUhVcExDQjFMblJsZUhSMWNtVTdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pTNW9ZWE1vYnlrcElISmxkSFZ5YmlCbExtZGxkQ2h2S1M1MFpYaDBkWEpsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IxSUQwZ2J5NXBiV0ZuWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkNBbUppQjFJQ1ltSUhVdWFHVnBaMmgwSUQ0Z01DQjhmQ0JvSUNZbUlIVWdKaVlnYVNoMUtTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBJRDA5UFNCdWRXeHNJQ1ltSUNoMElEMGdibVYzSUV0eUtITXhLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdiQ0EvSUhRdVpuSnZiVVZ4ZFdseVpXTjBZVzVuZFd4aGNpaHZLU0E2SUhRdVpuSnZiVU4xWW1WdFlYQW9ieWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbk5sZENodkxDQmtLU3dnYnk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKa2FYTndiM05sSWl3Z2Npa3NJR1F1ZEdWNGRIVnlaVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnY21WMGRYSnVJRzUxYkd3N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzg3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCcEtHOHBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJREFzSUd3Z1BTQTJPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhQ0E5SURBN0lHZ2dQQ0JzT3lCb0t5c3BiMXRvWFNBaFBUMGdkbTlwWkNBd0lDWW1JR01yS3pzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWXlBOVBUMGdiRHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUhJb2J5a2dld29nSUNBZ0lDQWdJR3hsZENCaklEMGdieTUwWVhKblpYUTdDaUFnSUNBZ0lDQWdZeTV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NKa2FYTndiM05sSWl3Z2NpazdDaUFnSUNBZ0lDQWdiR1YwSUd3Z1BTQmxMbWRsZENoaktUc0tJQ0FnSUNBZ0lDQnNJQ0U5UFNCMmIybGtJREFnSmlZZ0tHVXVaR1ZzWlhSbEtHTXBMQ0JzTG1ScGMzQnZjMlVvS1NrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQmhLQ2tnZXdvZ0lDQWdJQ0FnSUdVZ1BTQnVaWGNnVjJWaGEwMWhjQ3dnZENBaFBUMGdiblZzYkNBbUppQW9kQzVrYVhOd2IzTmxLQ2tzSUhRZ1BTQnVkV3hzS1RzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCN0NpQWdJQ0FnSUNBZ1oyVjBPaUJ1TEFvZ0lDQWdJQ0FnSUdScGMzQnZjMlU2SUdFS0lDQWdJSDA3Q24wS1puVnVZM1JwYjI0Z2FGOG9jekVwSUhzS0lDQWdJR3hsZENCbElEMGdlMzA3Q2lBZ0lDQm1kVzVqZEdsdmJpQjBLRzRwSUhzS0lDQWdJQ0FnSUNCcFppQW9aVnR1WFNBaFBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z1pWdHVYVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FUc0tJQ0FnSUNBZ0lDQnpkMmwwWTJnb2JpbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbGRGUWtkTVgyUmxjSFJvWDNSbGVIUjFjbVVpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVNBOUlITXhMbWRsZEVWNGRHVnVjMmx2YmlnaVYwVkNSMHhmWkdWd2RHaGZkR1Y0ZEhWeVpTSXBJSHg4SUhNeExtZGxkRVY0ZEdWdWMybHZiaWdpVFU5YVgxZEZRa2RNWDJSbGNIUm9YM1JsZUhSMWNtVWlLU0I4ZkNCek1TNW5aWFJGZUhSbGJuTnBiMjRvSWxkRlFrdEpWRjlYUlVKSFRGOWtaWEIwYUY5MFpYaDBkWEpsSWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpUlZoVVgzUmxlSFIxY21WZlptbHNkR1Z5WDJGdWFYTnZkSEp2Y0dsaklqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQU0J6TVM1blpYUkZlSFJsYm5OcGIyNG9Ja1ZZVkY5MFpYaDBkWEpsWDJacGJIUmxjbDloYm1semIzUnliM0JwWXlJcElIeDhJSE14TG1kbGRFVjRkR1Z1YzJsdmJpZ2lUVTlhWDBWWVZGOTBaWGgwZFhKbFgyWnBiSFJsY2w5aGJtbHpiM1J5YjNCcFl5SXBJSHg4SUhNeExtZGxkRVY0ZEdWdWMybHZiaWdpVjBWQ1MwbFVYMFZZVkY5MFpYaDBkWEpsWDJacGJIUmxjbDloYm1semIzUnliM0JwWXlJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWxkRlFrZE1YMk52YlhCeVpYTnpaV1JmZEdWNGRIVnlaVjl6TTNSaklqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQU0J6TVM1blpYUkZlSFJsYm5OcGIyNG9JbGRGUWtkTVgyTnZiWEJ5WlhOelpXUmZkR1Y0ZEhWeVpWOXpNM1JqSWlrZ2ZId2djekV1WjJWMFJYaDBaVzV6YVc5dUtDSk5UMXBmVjBWQ1IweGZZMjl0Y0hKbGMzTmxaRjkwWlhoMGRYSmxYM016ZEdNaUtTQjhmQ0J6TVM1blpYUkZlSFJsYm5OcGIyNG9JbGRGUWt0SlZGOVhSVUpIVEY5amIyMXdjbVZ6YzJWa1gzUmxlSFIxY21WZmN6TjBZeUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbGRGUWtkTVgyTnZiWEJ5WlhOelpXUmZkR1Y0ZEhWeVpWOXdkbkowWXlJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcElEMGdjekV1WjJWMFJYaDBaVzV6YVc5dUtDSlhSVUpIVEY5amIyMXdjbVZ6YzJWa1gzUmxlSFIxY21WZmNIWnlkR01pS1NCOGZDQnpNUzVuWlhSRmVIUmxibk5wYjI0b0lsZEZRa3RKVkY5WFJVSkhURjlqYjIxd2NtVnpjMlZrWDNSbGVIUjFjbVZmY0haeWRHTWlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhU0E5SUhNeExtZGxkRVY0ZEdWdWMybHZiaWh1S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWYmJsMGdQU0JwTENCcE93b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQm9ZWE02SUdaMWJtTjBhVzl1S0c0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFFvYmlrZ0lUMDlJRzUxYkd3N0NpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnBibWwwT2lCbWRXNWpkR2x2YmlodUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUc0dWFYTlhaV0pIVERJZ1B5QjBLQ0pGV0ZSZlkyOXNiM0pmWW5WbVptVnlYMlpzYjJGMElpa2dPaUFvZENnaVYwVkNSMHhmWkdWd2RHaGZkR1Y0ZEhWeVpTSXBMQ0IwS0NKUFJWTmZkR1Y0ZEhWeVpWOW1iRzloZENJcExDQjBLQ0pQUlZOZmRHVjRkSFZ5WlY5b1lXeG1YMlpzYjJGMElpa3NJSFFvSWs5RlUxOTBaWGgwZFhKbFgyaGhiR1pmWm14dllYUmZiR2x1WldGeUlpa3NJSFFvSWs5RlUxOXpkR0Z1WkdGeVpGOWtaWEpwZG1GMGFYWmxjeUlwTENCMEtDSlBSVk5mWld4bGJXVnVkRjlwYm1SbGVGOTFhVzUwSWlrc0lIUW9JazlGVTE5MlpYSjBaWGhmWVhKeVlYbGZiMkpxWldOMElpa3NJSFFvSWtGT1IweEZYMmx1YzNSaGJtTmxaRjloY25KaGVYTWlLU2tzSUhRb0lrOUZVMTkwWlhoMGRYSmxYMlpzYjJGMFgyeHBibVZoY2lJcExDQjBLQ0pGV0ZSZlkyOXNiM0pmWW5WbVptVnlYMmhoYkdaZlpteHZZWFFpS1N3Z2RDZ2lWMFZDUjB4ZmJYVnNkR2x6WVcxd2JHVmtYM0psYm1SbGNsOTBiMTkwWlhoMGRYSmxJaWs3Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVLRzRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQjBLRzRwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FTQTlQVDBnYm5Wc2JDQW1KaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJQ0lnS3lCdUlDc2dJaUJsZUhSbGJuTnBiMjRnYm05MElITjFjSEJ2Y25SbFpDNGlLU3dnYVRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5T3dwOUNtWjFibU4wYVc5dUlIVmZLSE14TENCbExDQjBMQ0J1S1NCN0NpQWdJQ0JzWlhRZ2FTQTlJSHQ5TENCeUlEMGdibVYzSUZkbFlXdE5ZWEE3Q2lBZ0lDQm1kVzVqZEdsdmJpQmhLSFVwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaQ0E5SUhVdWRHRnlaMlYwT3dvZ0lDQWdJQ0FnSUdRdWFXNWtaWGdnSVQwOUlHNTFiR3dnSmlZZ1pTNXlaVzF2ZG1Vb1pDNXBibVJsZUNrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdElHbHVJR1F1WVhSMGNtbGlkWFJsY3lsbExuSmxiVzkyWlNoa0xtRjBkSEpwWW5WMFpYTmJiVjBwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYlNCcGJpQmtMbTF2Y25Cb1FYUjBjbWxpZFhSbGN5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmZJRDBnWkM1dGIzSndhRUYwZEhKcFluVjBaWE5iYlYwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaeUE5SURBc0lIQWdQU0JmTG14bGJtZDBhRHNnWnlBOElIQTdJR2NyS3lsbExuSmxiVzkyWlNoZlcyZGRLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWkM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDSmthWE53YjNObElpd2dZU2tzSUdSbGJHVjBaU0JwVzJRdWFXUmRPd29nSUNBZ0lDQWdJR3hsZENCbUlEMGdjaTVuWlhRb1pDazdDaUFnSUNBZ0lDQWdaaUFtSmlBb1pTNXlaVzF2ZG1Vb1ppa3NJSEl1WkdWc1pYUmxLR1FwS1N3Z2JpNXlaV3hsWVhObFUzUmhkR1Z6VDJaSFpXOXRaWFJ5ZVNoa0tTd2daQzVwYzBsdWMzUmhibU5sWkVKMVptWmxja2RsYjIxbGRISjVJRDA5UFNBaE1DQW1KaUJrWld4bGRHVWdaQzVmYldGNFNXNXpkR0Z1WTJWRGIzVnVkQ3dnZEM1dFpXMXZjbmt1WjJWdmJXVjBjbWxsY3kwdE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdieWgxTENCa0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbGJaQzVwWkYwZ1BUMDlJQ0V3SUh4OElDaGtMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JbVJwYzNCdmMyVWlMQ0JoS1N3Z2FWdGtMbWxrWFNBOUlDRXdMQ0IwTG0xbGJXOXllUzVuWlc5dFpYUnlhV1Z6S3lzcExDQmtPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWXloMUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdRZ1BTQjFMbUYwZEhKcFluVjBaWE03Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J0SUdsdUlHUXBaUzUxY0dSaGRHVW9aRnR0WFN3Z2N6RXVRVkpTUVZsZlFsVkdSa1ZTS1RzS0lDQWdJQ0FnSUNCc1pYUWdaaUE5SUhVdWJXOXljR2hCZEhSeWFXSjFkR1Z6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYlNCcGJpQm1LWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRjhnUFNCbVcyMWRPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdjZ1BTQXdMQ0J3SUQwZ1h5NXNaVzVuZEdnN0lHY2dQQ0J3T3lCbkt5c3BaUzUxY0dSaGRHVW9YMXRuWFN3Z2N6RXVRVkpTUVZsZlFsVkdSa1ZTS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnNLSFVwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaQ0E5SUZ0ZExDQm1JRDBnZFM1cGJtUmxlQ3dnYlNBOUlIVXVZWFIwY21saWRYUmxjeTV3YjNOcGRHbHZiaXdnWHlBOUlEQTdDaUFnSUNBZ0lDQWdhV1lnS0dZZ0lUMDlJRzUxYkd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIWWdQU0JtTG1GeWNtRjVPd29nSUNBZ0lDQWdJQ0FnSUNCZklEMGdaaTUyWlhKemFXOXVPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhnZ1BTQXdMQ0I1SUQwZ2RpNXNaVzVuZEdnN0lIZ2dQQ0I1T3lCNElDczlJRE1wZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHSWdQU0IyVzNnZ0t5QXdYU3dnZHlBOUlIWmJlQ0FySURGZExDQlNJRDBnZGx0NElDc2dNbDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrTG5CMWMyZ29ZaXdnZHl3Z2R5d2dVaXdnVWl3Z1lpazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHMGdJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZGlBOUlHMHVZWEp5WVhrN0NpQWdJQ0FnSUNBZ0lDQWdJRjhnUFNCdExuWmxjbk5wYjI0N0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlQ0E5SURBc0lIa2dQU0IyTG14bGJtZDBhQ0F2SURNZ0xTQXhPeUI0SUR3Z2VUc2dlQ0FyUFNBektYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JpSUQwZ2VDQXJJREFzSUhjZ1BTQjRJQ3NnTVN3Z1VpQTlJSGdnS3lBeU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pDNXdkWE5vS0dJc0lIY3NJSGNzSUZJc0lGSXNJR0lwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU0JsYkhObElISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCc1pYUWdaeUE5SUc1bGR5QW9UV1FvWkNrZ1B5QktjaUE2SUZweUtTaGtMQ0F4S1RzS0lDQWdJQ0FnSUNCbkxuWmxjbk5wYjI0Z1BTQmZPd29nSUNBZ0lDQWdJR3hsZENCd0lEMGdjaTVuWlhRb2RTazdDaUFnSUNBZ0lDQWdjQ0FtSmlCbExuSmxiVzkyWlNod0tTd2djaTV6WlhRb2RTd2daeWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCb0tIVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pDQTlJSEl1WjJWMEtIVXBPd29nSUNBZ0lDQWdJR2xtSUNoa0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1JRDBnZFM1cGJtUmxlRHNLSUNBZ0lDQWdJQ0FnSUNBZ1ppQWhQVDBnYm5Wc2JDQW1KaUJrTG5abGNuTnBiMjRnUENCbUxuWmxjbk5wYjI0Z0ppWWdiQ2gxS1RzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYkNoMUtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2NpNW5aWFFvZFNrN0NpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2V3b2dJQ0FnSUNBZ0lHZGxkRG9nYnl3S0lDQWdJQ0FnSUNCMWNHUmhkR1U2SUdNc0NpQWdJQ0FnSUNBZ1oyVjBWMmx5WldaeVlXMWxRWFIwY21saWRYUmxPaUJvQ2lBZ0lDQjlPd3A5Q21aMWJtTjBhVzl1SUdSZktITXhMQ0JsTENCMExDQnVLU0I3Q2lBZ0lDQnNaWFFnYVNBOUlHNHVhWE5YWldKSFRESXNJSEk3Q2lBZ0lDQm1kVzVqZEdsdmJpQmhLR1FwSUhzS0lDQWdJQ0FnSUNCeUlEMGdaRHNLSUNBZ0lIMEtJQ0FnSUd4bGRDQnZMQ0JqT3dvZ0lDQWdablZ1WTNScGIyNGdiQ2hrS1NCN0NpQWdJQ0FnSUNBZ2J5QTlJR1F1ZEhsd1pTd2dZeUE5SUdRdVlubDBaWE5RWlhKRmJHVnRaVzUwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2FDaGtMQ0JtS1NCN0NpQWdJQ0FnSUNBZ2N6RXVaSEpoZDBWc1pXMWxiblJ6S0hJc0lHWXNJRzhzSUdRZ0tpQmpLU3dnZEM1MWNHUmhkR1VvWml3Z2Npd2dNU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCMUtHUXNJR1lzSUcwcElIc0tJQ0FnSUNBZ0lDQnBaaUFvYlNBOVBUMGdNQ2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJR3hsZENCZkxDQm5Pd29nSUNBZ0lDQWdJR2xtSUNocEtTQmZJRDBnY3pFc0lHY2dQU0FpWkhKaGQwVnNaVzFsYm5SelNXNXpkR0Z1WTJWa0lqc0tJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaGZJRDBnWlM1blpYUW9Ja0ZPUjB4RlgybHVjM1JoYm1ObFpGOWhjbkpoZVhNaUtTd2daeUE5SUNKa2NtRjNSV3hsYldWdWRITkpibk4wWVc1alpXUkJUa2RNUlNJc0lGOGdQVDA5SUc1MWJHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4SmJtUmxlR1ZrUW5WbVptVnlVbVZ1WkdWeVpYSTZJSFZ6YVc1bklGUklVa1ZGTGtsdWMzUmhibU5sWkVKMVptWmxja2RsYjIxbGRISjVJR0oxZENCb1lYSmtkMkZ5WlNCa2IyVnpJRzV2ZENCemRYQndiM0owSUdWNGRHVnVjMmx2YmlCQlRrZE1SVjlwYm5OMFlXNWpaV1JmWVhKeVlYbHpMaUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lGOWJaMTBvY2l3Z1ppd2dieXdnWkNBcUlHTXNJRzBwTENCMExuVndaR0YwWlNobUxDQnlMQ0J0S1RzS0lDQWdJSDBLSUNBZ0lIUm9hWE11YzJWMFRXOWtaU0E5SUdFc0lIUm9hWE11YzJWMFNXNWtaWGdnUFNCc0xDQjBhR2x6TG5KbGJtUmxjaUE5SUdnc0lIUm9hWE11Y21WdVpHVnlTVzV6ZEdGdVkyVnpJRDBnZFRzS2ZRcG1kVzVqZEdsdmJpQm1YeWh6TVNrZ2V3b2dJQ0FnYkdWMElHVWdQU0I3Q2lBZ0lDQWdJQ0FnWjJWdmJXVjBjbWxsY3pvZ01Dd0tJQ0FnSUNBZ0lDQjBaWGgwZFhKbGN6b2dNQW9nSUNBZ2ZTd2dkQ0E5SUhzS0lDQWdJQ0FnSUNCbWNtRnRaVG9nTUN3S0lDQWdJQ0FnSUNCallXeHNjem9nTUN3S0lDQWdJQ0FnSUNCMGNtbGhibWRzWlhNNklEQXNDaUFnSUNBZ0lDQWdjRzlwYm5Sek9pQXdMQW9nSUNBZ0lDQWdJR3hwYm1Wek9pQXdDaUFnSUNCOU93b2dJQ0FnWm5WdVkzUnBiMjRnYmloeUxDQmhMQ0J2S1NCN0NpQWdJQ0FnSUNBZ2MzZHBkR05vS0hRdVkyRnNiSE1yS3l3Z1lTbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdjekV1VkZKSlFVNUhURVZUT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEM1MGNtbGhibWRzWlhNZ0t6MGdieUFxSUNoeUlDOGdNeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQnpNUzVNU1U1RlV6b0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUXViR2x1WlhNZ0t6MGdieUFxSUNoeUlDOGdNaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQnpNUzVNU1U1RlgxTlVVa2xRT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEM1c2FXNWxjeUFyUFNCdklDb2dLSElnTFNBeEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUhNeExreEpUa1ZmVEU5UFVEb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUXViR2x1WlhNZ0t6MGdieUFxSUhJN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0J6TVM1UVQwbE9WRk02Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwTG5CdmFXNTBjeUFyUFNCdklDb2djanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VjJWaVIweEpibVp2T2lCVmJtdHViM2R1SUdSeVlYY2diVzlrWlRvaUxDQmhLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR2tvS1NCN0NpQWdJQ0FnSUNBZ2RDNWpZV3hzY3lBOUlEQXNJSFF1ZEhKcFlXNW5iR1Z6SUQwZ01Dd2dkQzV3YjJsdWRITWdQU0F3TENCMExteHBibVZ6SUQwZ01Ec0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdiV1Z0YjNKNU9pQmxMQW9nSUNBZ0lDQWdJSEpsYm1SbGNqb2dkQ3dLSUNBZ0lDQWdJQ0J3Y205bmNtRnRjem9nYm5Wc2JDd0tJQ0FnSUNBZ0lDQmhkWFJ2VW1WelpYUTZJQ0V3TEFvZ0lDQWdJQ0FnSUhKbGMyVjBPaUJwTEFvZ0lDQWdJQ0FnSUhWd1pHRjBaVG9nYmdvZ0lDQWdmVHNLZlFwbWRXNWpkR2x2YmlCd1h5aHpNU3dnWlNrZ2V3b2dJQ0FnY21WMGRYSnVJSE14V3pCZElDMGdaVnN3WFRzS2ZRcG1kVzVqZEdsdmJpQnRYeWh6TVN3Z1pTa2dld29nSUNBZ2NtVjBkWEp1SUUxaGRHZ3VZV0p6S0dWYk1WMHBJQzBnVFdGMGFDNWhZbk1vY3pGYk1WMHBPd3A5Q21aMWJtTjBhVzl1SUdkZktITXhMQ0JsTENCMEtTQjdDaUFnSUNCc1pYUWdiaUE5SUh0OUxDQnBJRDBnYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2c0S1N3Z2NpQTlJRzVsZHlCWFpXRnJUV0Z3TENCaElEMGdibVYzSUdwbExDQnZJRDBnVzEwN0NpQWdJQ0JtYjNJb2JHVjBJR3dnUFNBd095QnNJRHdnT0RzZ2JDc3JLVzliYkYwZ1BTQmJDaUFnSUNBZ0lDQWdiQ3dLSUNBZ0lDQWdJQ0F3Q2lBZ0lDQmRPd29nSUNBZ1puVnVZM1JwYjI0Z1l5aHNMQ0JvTENCMUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdRZ1BTQnNMbTF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sY3pzS0lDQWdJQ0FnSUNCcFppQW9aUzVwYzFkbFlrZE1NaUE5UFQwZ0lUQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1lnUFNCb0xtMXZjbkJvUVhSMGNtbGlkWFJsY3k1d2IzTnBkR2x2YmlCOGZDQm9MbTF2Y25Cb1FYUjBjbWxpZFhSbGN5NXViM0p0WVd3Z2ZId2dhQzV0YjNKd2FFRjBkSEpwWW5WMFpYTXVZMjlzYjNJc0lHMGdQU0JtSUNFOVBTQjJiMmxrSURBZ1B5Qm1MbXhsYm1kMGFDQTZJREFzSUY4Z1BTQnlMbWRsZENob0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGOGdQVDA5SUhadmFXUWdNQ0I4ZkNCZkxtTnZkVzUwSUNFOVBTQnRLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ZTQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGa3VaR2x6Y0c5elpTZ3BMQ0J5TG1SbGJHVjBaU2hvS1N3Z2FDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ0prYVhOd2IzTmxJaXdnVlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1h5QWhQVDBnZG05cFpDQXdJQ1ltSUY4dWRHVjRkSFZ5WlM1a2FYTndiM05sS0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkaUE5SUdndWJXOXljR2hCZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1SUNFOVBTQjJiMmxrSURBc0lIZ2dQU0JvTG0xdmNuQm9RWFIwY21saWRYUmxjeTV1YjNKdFlXd2dJVDA5SUhadmFXUWdNQ3dnZVNBOUlHZ3ViVzl5Y0doQmRIUnlhV0oxZEdWekxtTnZiRzl5SUNFOVBTQjJiMmxrSURBc0lHSWdQU0JvTG0xdmNuQm9RWFIwY21saWRYUmxjeTV3YjNOcGRHbHZiaUI4ZkNCYlhTd2dkeUE5SUdndWJXOXljR2hCZEhSeWFXSjFkR1Z6TG01dmNtMWhiQ0I4ZkNCYlhTd2dVaUE5SUdndWJXOXljR2hCZEhSeWFXSjFkR1Z6TG1OdmJHOXlJSHg4SUZ0ZExDQkpJRDBnTURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZZ1BUMDlJQ0V3SUNZbUlDaEpJRDBnTVNrc0lIZ2dQVDA5SUNFd0lDWW1JQ2hKSUQwZ01pa3NJSGtnUFQwOUlDRXdJQ1ltSUNoSklEMGdNeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1RTQTlJR2d1WVhSMGNtbGlkWFJsY3k1d2IzTnBkR2x2Ymk1amIzVnVkQ0FxSUVrc0lGUWdQU0F4T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVFNBK0lHVXViV0Y0VkdWNGRIVnlaVk5wZW1VZ0ppWWdLRlFnUFNCTllYUm9MbU5sYVd3b1RTQXZJR1V1YldGNFZHVjRkSFZ5WlZOcGVtVXBMQ0JOSUQwZ1pTNXRZWGhVWlhoMGRYSmxVMmw2WlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdUeUE5SUc1bGR5QkdiRzloZERNeVFYSnlZWGtvVFNBcUlGUWdLaUEwSUNvZ2JTa3NJRmtnUFNCdVpYY2dRWE1vVHl3Z1RTd2dWQ3dnYlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCWkxuUjVjR1VnUFNCNGJpd2dXUzV1WldWa2MxVndaR0YwWlNBOUlDRXdPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUNRZ1BTQkpJQ29nTkRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZWlBOUlEQTdJSG9nUENCdE95QjZLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J4SUQwZ1lsdDZYU3dnU0NBOUlIZGJlbDBzSUc1bElEMGdVbHQ2WFN3Z1Z5QTlJRTBnS2lCVUlDb2dOQ0FxSUhvN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQkxJRDBnTURzZ1N5QThJSEV1WTI5MWJuUTdJRXNyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkVJRDBnU3lBcUlDUTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWWdQVDA5SUNFd0lDWW1JQ2hoTG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb2NTd2dTeWtzSUU5YlZ5QXJJRVFnS3lBd1hTQTlJR0V1ZUN3Z1QxdFhJQ3NnUkNBcklERmRJRDBnWVM1NUxDQlBXMWNnS3lCRUlDc2dNbDBnUFNCaExub3NJRTliVnlBcklFUWdLeUF6WFNBOUlEQXBMQ0I0SUQwOVBTQWhNQ0FtSmlBb1lTNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLRWdzSUVzcExDQlBXMWNnS3lCRUlDc2dORjBnUFNCaExuZ3NJRTliVnlBcklFUWdLeUExWFNBOUlHRXVlU3dnVDF0WElDc2dSQ0FySURaZElEMGdZUzU2TENCUFcxY2dLeUJFSUNzZ04xMGdQU0F3S1N3Z2VTQTlQVDBnSVRBZ0ppWWdLR0V1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNodVpTd2dTeWtzSUU5YlZ5QXJJRVFnS3lBNFhTQTlJR0V1ZUN3Z1QxdFhJQ3NnUkNBcklEbGRJRDBnWVM1NUxDQlBXMWNnS3lCRUlDc2dNVEJkSUQwZ1lTNTZMQ0JQVzFjZ0t5QkVJQ3NnTVRGZElEMGdibVV1YVhSbGJWTnBlbVVnUFQwOUlEUWdQeUJoTG5jZ09pQXhLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZklEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmRXNTBPaUJ0TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFIxY21VNklGa3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJsNlpUb2dibVYzSUZvb1RTd2dWQ2tLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzSUhJdWMyVjBLR2dzSUY4cExDQm9MbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JbVJwYzNCdmMyVWlMQ0JWS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaeUE5SURBN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdkaUE5SURBN0lIWWdQQ0JrTG14bGJtZDBhRHNnZGlzcktXY2dLejBnWkZ0MlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQWdQU0JvTG0xdmNuQm9WR0Z5WjJWMGMxSmxiR0YwYVhabElEOGdNU0E2SURFZ0xTQm5Pd29nSUNBZ0lDQWdJQ0FnSUNCMUxtZGxkRlZ1YVdadmNtMXpLQ2t1YzJWMFZtRnNkV1VvY3pFc0lDSnRiM0p3YUZSaGNtZGxkRUpoYzJWSmJtWnNkV1Z1WTJVaUxDQndLU3dnZFM1blpYUlZibWxtYjNKdGN5Z3BMbk5sZEZaaGJIVmxLSE14TENBaWJXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpJaXdnWkNrc0lIVXVaMlYwVlc1cFptOXliWE1vS1M1elpYUldZV3gxWlNoek1Td2dJbTF2Y25Cb1ZHRnlaMlYwYzFSbGVIUjFjbVVpTENCZkxuUmxlSFIxY21Vc0lIUXBMQ0IxTG1kbGRGVnVhV1p2Y20xektDa3VjMlYwVm1Gc2RXVW9jekVzSUNKdGIzSndhRlJoY21kbGRITlVaWGgwZFhKbFUybDZaU0lzSUY4dWMybDZaU2s3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1lnUFNCa0lEMDlQU0IyYjJsa0lEQWdQeUF3SURvZ1pDNXNaVzVuZEdnc0lHMGdQU0J1VzJndWFXUmRPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9iU0E5UFQwZ2RtOXBaQ0F3SUh4OElHMHViR1Z1WjNSb0lDRTlQU0JtS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdElEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGdnUFNBd095QjRJRHdnWmpzZ2VDc3JLVzFiZUYwZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibHRvTG1sa1hTQTlJRzA3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0I0SUQwZ01Ec2dlQ0E4SUdZN0lIZ3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VTQTlJRzFiZUYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNVd6QmRJRDBnZUN3Z2VWc3hYU0E5SUdSYmVGMDdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdiUzV6YjNKMEtHMWZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCNElEMGdNRHNnZUNBOElEZzdJSGdyS3lsNElEd2daaUFtSmlCdFczaGRXekZkSUQ4Z0tHOWJlRjFiTUYwZ1BTQnRXM2hkV3pCZExDQnZXM2hkV3pGZElEMGdiVnQ0WFZzeFhTa2dPaUFvYjF0NFhWc3dYU0E5SUU1MWJXSmxjaTVOUVZoZlUwRkdSVjlKVGxSRlIwVlNMQ0J2VzNoZFd6RmRJRDBnTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJRzh1YzI5eWRDaHdYeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JmSUQwZ2FDNXRiM0p3YUVGMGRISnBZblYwWlhNdWNHOXphWFJwYjI0c0lHY2dQU0JvTG0xdmNuQm9RWFIwY21saWRYUmxjeTV1YjNKdFlXd3NJSEFnUFNBd093b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGdnUFNBd095QjRJRHdnT0RzZ2VDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNUlEMGdiMXQ0WFN3Z1lpQTlJSGxiTUYwc0lIY2dQU0I1V3pGZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lpQWhQVDBnVG5WdFltVnlMazFCV0Y5VFFVWkZYMGxPVkVWSFJWSWdKaVlnZHlBL0lDaGZJQ1ltSUdndVoyVjBRWFIwY21saWRYUmxLQ0p0YjNKd2FGUmhjbWRsZENJZ0t5QjRLU0FoUFQwZ1gxdGlYU0FtSmlCb0xuTmxkRUYwZEhKcFluVjBaU2dpYlc5eWNHaFVZWEpuWlhRaUlDc2dlQ3dnWDF0aVhTa3NJR2NnSmlZZ2FDNW5aWFJCZEhSeWFXSjFkR1VvSW0xdmNuQm9UbTl5YldGc0lpQXJJSGdwSUNFOVBTQm5XMkpkSUNZbUlHZ3VjMlYwUVhSMGNtbGlkWFJsS0NKdGIzSndhRTV2Y20xaGJDSWdLeUI0TENCblcySmRLU3dnYVZ0NFhTQTlJSGNzSUhBZ0t6MGdkeWtnT2lBb1h5QW1KaUJvTG1oaGMwRjBkSEpwWW5WMFpTZ2liVzl5Y0doVVlYSm5aWFFpSUNzZ2VDa2dQVDA5SUNFd0lDWW1JR2d1WkdWc1pYUmxRWFIwY21saWRYUmxLQ0p0YjNKd2FGUmhjbWRsZENJZ0t5QjRLU3dnWnlBbUppQm9MbWhoYzBGMGRISnBZblYwWlNnaWJXOXljR2hPYjNKdFlXd2lJQ3NnZUNrZ1BUMDlJQ0V3SUNZbUlHZ3VaR1ZzWlhSbFFYUjBjbWxpZFhSbEtDSnRiM0p3YUU1dmNtMWhiQ0lnS3lCNEtTd2dhVnQ0WFNBOUlEQXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMklEMGdhQzV0YjNKd2FGUmhjbWRsZEhOU1pXeGhkR2wyWlNBL0lERWdPaUF4SUMwZ2NEc0tJQ0FnSUNBZ0lDQWdJQ0FnZFM1blpYUlZibWxtYjNKdGN5Z3BMbk5sZEZaaGJIVmxLSE14TENBaWJXOXljR2hVWVhKblpYUkNZWE5sU1c1bWJIVmxibU5sSWl3Z2Rpa3NJSFV1WjJWMFZXNXBabTl5YlhNb0tTNXpaWFJXWVd4MVpTaHpNU3dnSW0xdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGN5SXNJR2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCN0NpQWdJQ0FnSUNBZ2RYQmtZWFJsT2lCakNpQWdJQ0I5T3dwOUNtWjFibU4wYVc5dUlGOWZLSE14TENCbExDQjBMQ0J1S1NCN0NpQWdJQ0JzWlhRZ2FTQTlJRzVsZHlCWFpXRnJUV0Z3T3dvZ0lDQWdablZ1WTNScGIyNGdjaWhqS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCdUxuSmxibVJsY2k1bWNtRnRaU3dnYUNBOUlHTXVaMlZ2YldWMGNua3NJSFVnUFNCbExtZGxkQ2hqTENCb0tUc0tJQ0FnSUNBZ0lDQnBaaUFvYVM1blpYUW9kU2tnSVQwOUlHd2dKaVlnS0dVdWRYQmtZWFJsS0hVcExDQnBMbk5sZENoMUxDQnNLU2tzSUdNdWFYTkpibk4wWVc1alpXUk5aWE5vSUNZbUlDaGpMbWhoYzBWMlpXNTBUR2x6ZEdWdVpYSW9JbVJwYzNCdmMyVWlMQ0J2S1NBOVBUMGdJVEVnSmlZZ1l5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSmthWE53YjNObElpd2dieWtzSUdrdVoyVjBLR01wSUNFOVBTQnNJQ1ltSUNoMExuVndaR0YwWlNoakxtbHVjM1JoYm1ObFRXRjBjbWw0TENCek1TNUJVbEpCV1Y5Q1ZVWkdSVklwTENCakxtbHVjM1JoYm1ObFEyOXNiM0lnSVQwOUlHNTFiR3dnSmlZZ2RDNTFjR1JoZEdVb1l5NXBibk4wWVc1alpVTnZiRzl5TENCek1TNUJVbEpCV1Y5Q1ZVWkdSVklwTENCcExuTmxkQ2hqTENCc0tTa3BMQ0JqTG1selUydHBibTVsWkUxbGMyZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCakxuTnJaV3hsZEc5dU93b2dJQ0FnSUNBZ0lDQWdJQ0JwTG1kbGRDaGtLU0FoUFQwZ2JDQW1KaUFvWkM1MWNHUmhkR1VvS1N3Z2FTNXpaWFFvWkN3Z2JDa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdFb0tTQjdDaUFnSUNBZ0lDQWdhU0E5SUc1bGR5QlhaV0ZyVFdGd093b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdieWhqS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCakxuUmhjbWRsZERzS0lDQWdJQ0FnSUNCc0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9JbVJwYzNCdmMyVWlMQ0J2S1N3Z2RDNXlaVzF2ZG1Vb2JDNXBibk4wWVc1alpVMWhkSEpwZUNrc0lHd3VhVzV6ZEdGdVkyVkRiMnh2Y2lBaFBUMGdiblZzYkNBbUppQjBMbkpsYlc5MlpTaHNMbWx1YzNSaGJtTmxRMjlzYjNJcE93b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQjFjR1JoZEdVNklISXNDaUFnSUNBZ0lDQWdaR2x6Y0c5elpUb2dZUW9nSUNBZ2ZUc0tmUXAyWVhJZ1ZHUWdQU0J1WlhjZ1UzUXNJSGRrSUQwZ2JtVjNJRUZ6TENCQlpDQTlJRzVsZHlCeGNpd2dVbVFnUFNCdVpYY2dTMmtzSUdkb0lEMGdXMTBzSUY5b0lEMGdXMTBzSUhob0lEMGdibVYzSUVac2IyRjBNekpCY25KaGVTZ3hOaWtzSUhab0lEMGdibVYzSUVac2IyRjBNekpCY25KaGVTZzVLU3dnZVdnZ1BTQnVaWGNnUm14dllYUXpNa0Z5Y21GNUtEUXBPd3BtZFc1amRHbHZiaUJoY3loek1Td2daU3dnZENrZ2V3b2dJQ0FnYkdWMElHNGdQU0J6TVZzd1hUc0tJQ0FnSUdsbUlDaHVJRHc5SURBZ2ZId2diaUErSURBcElISmxkSFZ5YmlCek1Uc0tJQ0FnSUd4bGRDQnBJRDBnWlNBcUlIUXNJSElnUFNCbmFGdHBYVHNLSUNBZ0lHbG1JQ2h5SUQwOVBTQjJiMmxrSURBZ0ppWWdLSElnUFNCdVpYY2dSbXh2WVhRek1rRnljbUY1S0drcExDQm5hRnRwWFNBOUlISXBMQ0JsSUNFOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnYmk1MGIwRnljbUY1S0hJc0lEQXBPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdZU0E5SURFc0lHOGdQU0F3T3lCaElDRTlQU0JsT3lBcksyRXBieUFyUFNCMExDQnpNVnRoWFM1MGIwRnljbUY1S0hJc0lHOHBPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSEk3Q24wS1puVnVZM1JwYjI0Z1ozUW9jekVzSUdVcElIc0tJQ0FnSUdsbUlDaHpNUzVzWlc1bmRHZ2dJVDA5SUdVdWJHVnVaM1JvS1NCeVpYUjFjbTRnSVRFN0NpQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnY3pFdWJHVnVaM1JvT3lCMElEd2dianNnZENzcktXbG1JQ2h6TVZ0MFhTQWhQVDBnWlZ0MFhTa2djbVYwZFhKdUlDRXhPd29nSUNBZ2NtVjBkWEp1SUNFd093cDlDbVoxYm1OMGFXOXVJRjkwS0hNeExDQmxLU0I3Q2lBZ0lDQm1iM0lvYkdWMElIUWdQU0F3TENCdUlEMGdaUzVzWlc1bmRHZzdJSFFnUENCdU95QjBLeXNwY3pGYmRGMGdQU0JsVzNSZE93cDlDbVoxYm1OMGFXOXVJSGxoS0hNeExDQmxLU0I3Q2lBZ0lDQnNaWFFnZENBOUlGOW9XMlZkT3dvZ0lDQWdkQ0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaDBJRDBnYm1WM0lFbHVkRE15UVhKeVlYa29aU2tzSUY5b1cyVmRJRDBnZENrN0NpQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd095QnVJQ0U5UFNCbE95QXJLMjRwZEZ0dVhTQTlJSE14TG1Gc2JHOWpZWFJsVkdWNGRIVnlaVlZ1YVhRb0tUc0tJQ0FnSUhKbGRIVnliaUIwT3dwOUNtWjFibU4wYVc5dUlIaGZLSE14TENCbEtTQjdDaUFnSUNCc1pYUWdkQ0E5SUhSb2FYTXVZMkZqYUdVN0NpQWdJQ0IwV3pCZElDRTlQU0JsSUNZbUlDaHpNUzUxYm1sbWIzSnRNV1lvZEdocGN5NWhaR1J5TENCbEtTd2dkRnN3WFNBOUlHVXBPd3A5Q21aMWJtTjBhVzl1SUhaZktITXhMQ0JsS1NCN0NpQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVkyRmphR1U3Q2lBZ0lDQnBaaUFvWlM1NElDRTlQU0IyYjJsa0lEQXBJQ2gwV3pCZElDRTlQU0JsTG5nZ2ZId2dkRnN4WFNBaFBUMGdaUzU1S1NBbUppQW9jekV1ZFc1cFptOXliVEptS0hSb2FYTXVZV1JrY2l3Z1pTNTRMQ0JsTG5rcExDQjBXekJkSUQwZ1pTNTRMQ0IwV3pGZElEMGdaUzU1S1RzS0lDQWdJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2huZENoMExDQmxLU2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJSE14TG5WdWFXWnZjbTB5Wm5Zb2RHaHBjeTVoWkdSeUxDQmxLU3dnWDNRb2RDd2daU2s3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnZVY4b2N6RXNJR1VwSUhzS0lDQWdJR3hsZENCMElEMGdkR2hwY3k1allXTm9aVHNLSUNBZ0lHbG1JQ2hsTG5nZ0lUMDlJSFp2YVdRZ01Da2dLSFJiTUYwZ0lUMDlJR1V1ZUNCOGZDQjBXekZkSUNFOVBTQmxMbmtnZkh3Z2RGc3lYU0FoUFQwZ1pTNTZLU0FtSmlBb2N6RXVkVzVwWm05eWJUTm1LSFJvYVhNdVlXUmtjaXdnWlM1NExDQmxMbmtzSUdVdWVpa3NJSFJiTUYwZ1BTQmxMbmdzSUhSYk1WMGdQU0JsTG5rc0lIUmJNbDBnUFNCbExub3BPd29nSUNBZ1pXeHpaU0JwWmlBb1pTNXlJQ0U5UFNCMmIybGtJREFwSUNoMFd6QmRJQ0U5UFNCbExuSWdmSHdnZEZzeFhTQWhQVDBnWlM1bklIeDhJSFJiTWwwZ0lUMDlJR1V1WWlrZ0ppWWdLSE14TG5WdWFXWnZjbTB6WmloMGFHbHpMbUZrWkhJc0lHVXVjaXdnWlM1bkxDQmxMbUlwTENCMFd6QmRJRDBnWlM1eUxDQjBXekZkSUQwZ1pTNW5MQ0IwV3pKZElEMGdaUzVpS1RzS0lDQWdJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2huZENoMExDQmxLU2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJSE14TG5WdWFXWnZjbTB6Wm5Zb2RHaHBjeTVoWkdSeUxDQmxLU3dnWDNRb2RDd2daU2s3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnVFY4b2N6RXNJR1VwSUhzS0lDQWdJR3hsZENCMElEMGdkR2hwY3k1allXTm9aVHNLSUNBZ0lHbG1JQ2hsTG5nZ0lUMDlJSFp2YVdRZ01Da2dLSFJiTUYwZ0lUMDlJR1V1ZUNCOGZDQjBXekZkSUNFOVBTQmxMbmtnZkh3Z2RGc3lYU0FoUFQwZ1pTNTZJSHg4SUhSYk0xMGdJVDA5SUdVdWR5a2dKaVlnS0hNeExuVnVhV1p2Y20wMFppaDBhR2x6TG1Ga1pISXNJR1V1ZUN3Z1pTNTVMQ0JsTG5vc0lHVXVkeWtzSUhSYk1GMGdQU0JsTG5nc0lIUmJNVjBnUFNCbExua3NJSFJiTWwwZ1BTQmxMbm9zSUhSYk0xMGdQU0JsTG5jcE93b2dJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdhV1lnS0dkMEtIUXNJR1VwS1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnY3pFdWRXNXBabTl5YlRSbWRpaDBhR2x6TG1Ga1pISXNJR1VwTENCZmRDaDBMQ0JsS1RzS0lDQWdJSDBLZlFwbWRXNWpkR2x2YmlCVFh5aHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0IwYUdsekxtTmhZMmhsTENCdUlEMGdaUzVsYkdWdFpXNTBjenNLSUNBZ0lHbG1JQ2h1SUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQnBaaUFvWjNRb2RDd2daU2twSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0J6TVM1MWJtbG1iM0p0VFdGMGNtbDRNbVoyS0hSb2FYTXVZV1JrY2l3Z0lURXNJR1VwTENCZmRDaDBMQ0JsS1RzS0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdhV1lnS0dkMEtIUXNJRzRwS1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZVdndWMyVjBLRzRwTENCek1TNTFibWxtYjNKdFRXRjBjbWw0TW1aMktIUm9hWE11WVdSa2Npd2dJVEVzSUhsb0tTd2dYM1FvZEN3Z2JpazdDaUFnSUNCOUNuMEtablZ1WTNScGIyNGdZbDhvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVqWVdOb1pTd2diaUE5SUdVdVpXeGxiV1Z1ZEhNN0NpQWdJQ0JwWmlBb2JpQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tHZDBLSFFzSUdVcEtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2N6RXVkVzVwWm05eWJVMWhkSEpwZURObWRpaDBhR2x6TG1Ga1pISXNJQ0V4TENCbEtTd2dYM1FvZEN3Z1pTazdDaUFnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUdsbUlDaG5kQ2gwTENCdUtTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lIWm9Mbk5sZENodUtTd2djekV1ZFc1cFptOXliVTFoZEhKcGVETm1kaWgwYUdsekxtRmtaSElzSUNFeExDQjJhQ2tzSUY5MEtIUXNJRzRwT3dvZ0lDQWdmUXA5Q21aMWJtTjBhVzl1SUVWZktITXhMQ0JsS1NCN0NpQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVkyRmphR1VzSUc0Z1BTQmxMbVZzWlcxbGJuUnpPd29nSUNBZ2FXWWdLRzRnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2huZENoMExDQmxLU2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJSE14TG5WdWFXWnZjbTFOWVhSeWFYZzBabllvZEdocGN5NWhaR1J5TENBaE1Td2daU2tzSUY5MEtIUXNJR1VwT3dvZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQnBaaUFvWjNRb2RDd2diaWtwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0I0YUM1elpYUW9iaWtzSUhNeExuVnVhV1p2Y20xTllYUnlhWGcwWm5Zb2RHaHBjeTVoWkdSeUxDQWhNU3dnZUdncExDQmZkQ2gwTENCdUtUc0tJQ0FnSUgwS2ZRcG1kVzVqZEdsdmJpQlVYeWh6TVN3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbU5oWTJobE93b2dJQ0FnZEZzd1hTQWhQVDBnWlNBbUppQW9jekV1ZFc1cFptOXliVEZwS0hSb2FYTXVZV1JrY2l3Z1pTa3NJSFJiTUYwZ1BTQmxLVHNLZlFwbWRXNWpkR2x2YmlCM1h5aHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0IwYUdsekxtTmhZMmhsT3dvZ0lDQWdhV1lnS0dVdWVDQWhQVDBnZG05cFpDQXdLU0FvZEZzd1hTQWhQVDBnWlM1NElIeDhJSFJiTVYwZ0lUMDlJR1V1ZVNrZ0ppWWdLSE14TG5WdWFXWnZjbTB5YVNoMGFHbHpMbUZrWkhJc0lHVXVlQ3dnWlM1NUtTd2dkRnN3WFNBOUlHVXVlQ3dnZEZzeFhTQTlJR1V1ZVNrN0NpQWdJQ0JsYkhObElIc0tJQ0FnSUNBZ0lDQnBaaUFvWjNRb2RDd2daU2twSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0J6TVM1MWJtbG1iM0p0TW1sMktIUm9hWE11WVdSa2Npd2daU2tzSUY5MEtIUXNJR1VwT3dvZ0lDQWdmUXA5Q21aMWJtTjBhVzl1SUVGZktITXhMQ0JsS1NCN0NpQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVkyRmphR1U3Q2lBZ0lDQnBaaUFvWlM1NElDRTlQU0IyYjJsa0lEQXBJQ2gwV3pCZElDRTlQU0JsTG5nZ2ZId2dkRnN4WFNBaFBUMGdaUzU1SUh4OElIUmJNbDBnSVQwOUlHVXVlaWtnSmlZZ0tITXhMblZ1YVdadmNtMHphU2gwYUdsekxtRmtaSElzSUdVdWVDd2daUzU1TENCbExub3BMQ0IwV3pCZElEMGdaUzU0TENCMFd6RmRJRDBnWlM1NUxDQjBXekpkSUQwZ1pTNTZLVHNLSUNBZ0lHVnNjMlVnZXdvZ0lDQWdJQ0FnSUdsbUlDaG5kQ2gwTENCbEtTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lITXhMblZ1YVdadmNtMHphWFlvZEdocGN5NWhaR1J5TENCbEtTd2dYM1FvZEN3Z1pTazdDaUFnSUNCOUNuMEtablZ1WTNScGIyNGdVbDhvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVqWVdOb1pUc0tJQ0FnSUdsbUlDaGxMbmdnSVQwOUlIWnZhV1FnTUNrZ0tIUmJNRjBnSVQwOUlHVXVlQ0I4ZkNCMFd6RmRJQ0U5UFNCbExua2dmSHdnZEZzeVhTQWhQVDBnWlM1NklIeDhJSFJiTTEwZ0lUMDlJR1V1ZHlrZ0ppWWdLSE14TG5WdWFXWnZjbTAwYVNoMGFHbHpMbUZrWkhJc0lHVXVlQ3dnWlM1NUxDQmxMbm9zSUdVdWR5a3NJSFJiTUYwZ1BTQmxMbmdzSUhSYk1WMGdQU0JsTG5rc0lIUmJNbDBnUFNCbExub3NJSFJiTTEwZ1BTQmxMbmNwT3dvZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ2FXWWdLR2QwS0hRc0lHVXBLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdjekV1ZFc1cFptOXliVFJwZGloMGFHbHpMbUZrWkhJc0lHVXBMQ0JmZENoMExDQmxLVHNLSUNBZ0lIMEtmUXBtZFc1amRHbHZiaUJEWHloek1Td2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1OaFkyaGxPd29nSUNBZ2RGc3dYU0FoUFQwZ1pTQW1KaUFvY3pFdWRXNXBabTl5YlRGMWFTaDBhR2x6TG1Ga1pISXNJR1VwTENCMFd6QmRJRDBnWlNrN0NuMEtablZ1WTNScGIyNGdVRjhvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVqWVdOb1pUc0tJQ0FnSUdsbUlDaGxMbmdnSVQwOUlIWnZhV1FnTUNrZ0tIUmJNRjBnSVQwOUlHVXVlQ0I4ZkNCMFd6RmRJQ0U5UFNCbExua3BJQ1ltSUNoek1TNTFibWxtYjNKdE1uVnBLSFJvYVhNdVlXUmtjaXdnWlM1NExDQmxMbmtwTENCMFd6QmRJRDBnWlM1NExDQjBXekZkSUQwZ1pTNTVLVHNLSUNBZ0lHVnNjMlVnZXdvZ0lDQWdJQ0FnSUdsbUlDaG5kQ2gwTENCbEtTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lITXhMblZ1YVdadmNtMHlkV2wyS0hSb2FYTXVZV1JrY2l3Z1pTa3NJRjkwS0hRc0lHVXBPd29nSUNBZ2ZRcDlDbVoxYm1OMGFXOXVJRXhmS0hNeExDQmxLU0I3Q2lBZ0lDQnNaWFFnZENBOUlIUm9hWE11WTJGamFHVTdDaUFnSUNCcFppQW9aUzU0SUNFOVBTQjJiMmxrSURBcElDaDBXekJkSUNFOVBTQmxMbmdnZkh3Z2RGc3hYU0FoUFQwZ1pTNTVJSHg4SUhSYk1sMGdJVDA5SUdVdWVpa2dKaVlnS0hNeExuVnVhV1p2Y20wemRXa29kR2hwY3k1aFpHUnlMQ0JsTG5nc0lHVXVlU3dnWlM1NktTd2dkRnN3WFNBOUlHVXVlQ3dnZEZzeFhTQTlJR1V1ZVN3Z2RGc3lYU0E5SUdVdWVpazdDaUFnSUNCbGJITmxJSHNLSUNBZ0lDQWdJQ0JwWmlBb1ozUW9kQ3dnWlNrcElISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCek1TNTFibWxtYjNKdE0zVnBkaWgwYUdsekxtRmtaSElzSUdVcExDQmZkQ2gwTENCbEtUc0tJQ0FnSUgwS2ZRcG1kVzVqZEdsdmJpQkpYeWh6TVN3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbU5oWTJobE93b2dJQ0FnYVdZZ0tHVXVlQ0FoUFQwZ2RtOXBaQ0F3S1NBb2RGc3dYU0FoUFQwZ1pTNTRJSHg4SUhSYk1WMGdJVDA5SUdVdWVTQjhmQ0IwV3pKZElDRTlQU0JsTG5vZ2ZId2dkRnN6WFNBaFBUMGdaUzUzS1NBbUppQW9jekV1ZFc1cFptOXliVFIxYVNoMGFHbHpMbUZrWkhJc0lHVXVlQ3dnWlM1NUxDQmxMbm9zSUdVdWR5a3NJSFJiTUYwZ1BTQmxMbmdzSUhSYk1WMGdQU0JsTG5rc0lIUmJNbDBnUFNCbExub3NJSFJiTTEwZ1BTQmxMbmNwT3dvZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ2FXWWdLR2QwS0hRc0lHVXBLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdjekV1ZFc1cFptOXliVFIxYVhZb2RHaHBjeTVoWkdSeUxDQmxLU3dnWDNRb2RDd2daU2s3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnVlY4b2N6RXNJR1VzSUhRcElIc0tJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NWpZV05vWlN3Z2FTQTlJSFF1WVd4c2IyTmhkR1ZVWlhoMGRYSmxWVzVwZENncE93b2dJQ0FnYmxzd1hTQWhQVDBnYVNBbUppQW9jekV1ZFc1cFptOXliVEZwS0hSb2FYTXVZV1JrY2l3Z2FTa3NJRzViTUYwZ1BTQnBLU3dnZEM1elpYUlVaWGgwZFhKbE1rUW9aU0I4ZkNCVVpDd2dhU2s3Q24wS1puVnVZM1JwYjI0Z1JGOG9jekVzSUdVc0lIUXBJSHNLSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVqWVdOb1pTd2dhU0E5SUhRdVlXeHNiMk5oZEdWVVpYaDBkWEpsVlc1cGRDZ3BPd29nSUNBZ2Jsc3dYU0FoUFQwZ2FTQW1KaUFvY3pFdWRXNXBabTl5YlRGcEtIUm9hWE11WVdSa2Npd2dhU2tzSUc1Yk1GMGdQU0JwS1N3Z2RDNXpaWFJVWlhoMGRYSmxNMFFvWlNCOGZDQkJaQ3dnYVNrN0NuMEtablZ1WTNScGIyNGdUbDhvY3pFc0lHVXNJSFFwSUhzS0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1allXTm9aU3dnYVNBOUlIUXVZV3hzYjJOaGRHVlVaWGgwZFhKbFZXNXBkQ2dwT3dvZ0lDQWdibHN3WFNBaFBUMGdhU0FtSmlBb2N6RXVkVzVwWm05eWJURnBLSFJvYVhNdVlXUmtjaXdnYVNrc0lHNWJNRjBnUFNCcEtTd2dkQzV6WlhSVVpYaDBkWEpsUTNWaVpTaGxJSHg4SUZKa0xDQnBLVHNLZlFwbWRXNWpkR2x2YmlCUFh5aHpNU3dnWlN3Z2RDa2dld29nSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbU5oWTJobExDQnBJRDBnZEM1aGJHeHZZMkYwWlZSbGVIUjFjbVZWYm1sMEtDazdDaUFnSUNCdVd6QmRJQ0U5UFNCcElDWW1JQ2h6TVM1MWJtbG1iM0p0TVdrb2RHaHBjeTVoWkdSeUxDQnBLU3dnYmxzd1hTQTlJR2twTENCMExuTmxkRlJsZUhSMWNtVXlSRUZ5Y21GNUtHVWdmSHdnZDJRc0lHa3BPd3A5Q21aMWJtTjBhVzl1SUVaZktITXhLU0I3Q2lBZ0lDQnpkMmwwWTJnb2N6RXBld29nSUNBZ0lDQWdJR05oYzJVZ05URXlOam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhoZk93b2dJQ0FnSUNBZ0lHTmhjMlVnTXpVMk5qUTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWHpzS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpZMU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlVjg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyTmpvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFMWZPd29nSUNBZ0lDQWdJR05oYzJVZ016VTJOelE2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCVFh6c0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qYzFPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWWw4N0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TlRZM05qb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRVZmT3dvZ0lDQWdJQ0FnSUdOaGMyVWdOVEV5TkRvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjd09nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdWRjg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyTnpvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjeE9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkMTg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyT0RvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjeU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdRVjg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyT1RvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjek9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVbDg3Q2lBZ0lDQWdJQ0FnWTJGelpTQTFNVEkxT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ExODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5qSTVORG9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCZk93b2dJQ0FnSUNBZ0lHTmhjMlVnTXpZeU9UVTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJNWHpzS0lDQWdJQ0FnSUNCallYTmxJRE0yTWprMk9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdTVjg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkzT0RvS0lDQWdJQ0FnSUNCallYTmxJRE0yTVRrNE9nb2dJQ0FnSUNBZ0lHTmhjMlVnTXpZeU9UZzZDaUFnSUNBZ0lDQWdZMkZ6WlNBek5qTXdOam9LSUNBZ0lDQWdJQ0JqWVhObElETTFOamd5T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ZWODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTNPVG9LSUNBZ0lDQWdJQ0JqWVhObElETTJNams1T2dvZ0lDQWdJQ0FnSUdOaGMyVWdNell6TURjNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkVYenNLSUNBZ0lDQWdJQ0JqWVhObElETTFOamd3T2dvZ0lDQWdJQ0FnSUdOaGMyVWdNell6TURBNkNpQWdJQ0FnSUNBZ1kyRnpaU0F6TmpNd09Eb0tJQ0FnSUNBZ0lDQmpZWE5sSURNMk1qa3pPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVGw4N0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TmpJNE9Ub0tJQ0FnSUNBZ0lDQmpZWE5sSURNMk16QXpPZ29nSUNBZ0lDQWdJR05oYzJVZ016WXpNVEU2Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOakk1TWpvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFOWZPd29nSUNBZ2ZRcDlDbVoxYm1OMGFXOXVJRUpmS0hNeExDQmxLU0I3Q2lBZ0lDQnpNUzUxYm1sbWIzSnRNV1oyS0hSb2FYTXVZV1JrY2l3Z1pTazdDbjBLWm5WdVkzUnBiMjRnZWw4b2N6RXNJR1VwSUhzS0lDQWdJR3hsZENCMElEMGdZWE1vWlN3Z2RHaHBjeTV6YVhwbExDQXlLVHNLSUNBZ0lITXhMblZ1YVdadmNtMHlabllvZEdocGN5NWhaR1J5TENCMEtUc0tmUXBtZFc1amRHbHZiaUJXWHloek1Td2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQmhjeWhsTENCMGFHbHpMbk5wZW1Vc0lETXBPd29nSUNBZ2N6RXVkVzVwWm05eWJUTm1kaWgwYUdsekxtRmtaSElzSUhRcE93cDlDbVoxYm1OMGFXOXVJR3RmS0hNeExDQmxLU0I3Q2lBZ0lDQnNaWFFnZENBOUlHRnpLR1VzSUhSb2FYTXVjMmw2WlN3Z05DazdDaUFnSUNCek1TNTFibWxtYjNKdE5HWjJLSFJvYVhNdVlXUmtjaXdnZENrN0NuMEtablZ1WTNScGIyNGdTRjhvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ1lYTW9aU3dnZEdocGN5NXphWHBsTENBMEtUc0tJQ0FnSUhNeExuVnVhV1p2Y20xTllYUnlhWGd5Wm5Zb2RHaHBjeTVoWkdSeUxDQWhNU3dnZENrN0NuMEtablZ1WTNScGIyNGdSMThvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ1lYTW9aU3dnZEdocGN5NXphWHBsTENBNUtUc0tJQ0FnSUhNeExuVnVhV1p2Y20xTllYUnlhWGd6Wm5Zb2RHaHBjeTVoWkdSeUxDQWhNU3dnZENrN0NuMEtablZ1WTNScGIyNGdWMThvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ1lYTW9aU3dnZEdocGN5NXphWHBsTENBeE5pazdDaUFnSUNCek1TNTFibWxtYjNKdFRXRjBjbWw0TkdaMktIUm9hWE11WVdSa2Npd2dJVEVzSUhRcE93cDlDbVoxYm1OMGFXOXVJRmhmS0hNeExDQmxLU0I3Q2lBZ0lDQnpNUzUxYm1sbWIzSnRNV2wyS0hSb2FYTXVZV1JrY2l3Z1pTazdDbjBLWm5WdVkzUnBiMjRnY1Y4b2N6RXNJR1VwSUhzS0lDQWdJSE14TG5WdWFXWnZjbTB5YVhZb2RHaHBjeTVoWkdSeUxDQmxLVHNLZlFwbWRXNWpkR2x2YmlCWlh5aHpNU3dnWlNrZ2V3b2dJQ0FnY3pFdWRXNXBabTl5YlROcGRpaDBhR2x6TG1Ga1pISXNJR1VwT3dwOUNtWjFibU4wYVc5dUlGcGZLSE14TENCbEtTQjdDaUFnSUNCek1TNTFibWxtYjNKdE5HbDJLSFJvYVhNdVlXUmtjaXdnWlNrN0NuMEtablZ1WTNScGIyNGdTbDhvY3pFc0lHVXBJSHNLSUNBZ0lITXhMblZ1YVdadmNtMHhkV2wyS0hSb2FYTXVZV1JrY2l3Z1pTazdDbjBLWm5WdVkzUnBiMjRnSkY4b2N6RXNJR1VwSUhzS0lDQWdJSE14TG5WdWFXWnZjbTB5ZFdsMktIUm9hWE11WVdSa2Npd2daU2s3Q24wS1puVnVZM1JwYjI0Z1MxOG9jekVzSUdVcElIc0tJQ0FnSUhNeExuVnVhV1p2Y20wemRXbDJLSFJvYVhNdVlXUmtjaXdnWlNrN0NuMEtablZ1WTNScGIyNGdVVjhvY3pFc0lHVXBJSHNLSUNBZ0lITXhMblZ1YVdadmNtMDBkV2wyS0hSb2FYTXVZV1JrY2l3Z1pTazdDbjBLWm5WdVkzUnBiMjRnYWw4b2N6RXNJR1VzSUhRcElIc0tJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NWpZV05vWlN3Z2FTQTlJR1V1YkdWdVozUm9MQ0J5SUQwZ2VXRW9kQ3dnYVNrN0NpQWdJQ0JuZENodUxDQnlLU0I4ZkNBb2N6RXVkVzVwWm05eWJURnBkaWgwYUdsekxtRmtaSElzSUhJcExDQmZkQ2h1TENCeUtTazdDaUFnSUNCbWIzSW9iR1YwSUdFZ1BTQXdPeUJoSUNFOVBTQnBPeUFySzJFcGRDNXpaWFJVWlhoMGRYSmxNa1FvWlZ0aFhTQjhmQ0JVWkN3Z2NsdGhYU2s3Q24wS1puVnVZM1JwYjI0Z1pUQW9jekVzSUdVc0lIUXBJSHNLSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVqWVdOb1pTd2dhU0E5SUdVdWJHVnVaM1JvTENCeUlEMGdlV0VvZEN3Z2FTazdDaUFnSUNCbmRDaHVMQ0J5S1NCOGZDQW9jekV1ZFc1cFptOXliVEZwZGloMGFHbHpMbUZrWkhJc0lISXBMQ0JmZENodUxDQnlLU2s3Q2lBZ0lDQm1iM0lvYkdWMElHRWdQU0F3T3lCaElDRTlQU0JwT3lBcksyRXBkQzV6WlhSVVpYaDBkWEpsTTBRb1pWdGhYU0I4ZkNCQlpDd2djbHRoWFNrN0NuMEtablZ1WTNScGIyNGdkREFvY3pFc0lHVXNJSFFwSUhzS0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1allXTm9aU3dnYVNBOUlHVXViR1Z1WjNSb0xDQnlJRDBnZVdFb2RDd2dhU2s3Q2lBZ0lDQm5kQ2h1TENCeUtTQjhmQ0FvY3pFdWRXNXBabTl5YlRGcGRpaDBhR2x6TG1Ga1pISXNJSElwTENCZmRDaHVMQ0J5S1NrN0NpQWdJQ0JtYjNJb2JHVjBJR0VnUFNBd095QmhJQ0U5UFNCcE95QXJLMkVwZEM1elpYUlVaWGgwZFhKbFEzVmlaU2hsVzJGZElIeDhJRkprTENCeVcyRmRLVHNLZlFwbWRXNWpkR2x2YmlCdU1DaHpNU3dnWlN3Z2RDa2dld29nSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbU5oWTJobExDQnBJRDBnWlM1c1pXNW5kR2dzSUhJZ1BTQjVZU2gwTENCcEtUc0tJQ0FnSUdkMEtHNHNJSElwSUh4OElDaHpNUzUxYm1sbWIzSnRNV2wyS0hSb2FYTXVZV1JrY2l3Z2Npa3NJRjkwS0c0c0lISXBLVHNLSUNBZ0lHWnZjaWhzWlhRZ1lTQTlJREE3SUdFZ0lUMDlJR2s3SUNzcllTbDBMbk5sZEZSbGVIUjFjbVV5UkVGeWNtRjVLR1ZiWVYwZ2ZId2dkMlFzSUhKYllWMHBPd3A5Q21aMWJtTjBhVzl1SUdrd0tITXhLU0I3Q2lBZ0lDQnpkMmwwWTJnb2N6RXBld29nSUNBZ0lDQWdJR05oYzJVZ05URXlOam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUVKZk93b2dJQ0FnSUNBZ0lHTmhjMlVnTXpVMk5qUTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI2WHpzS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpZMU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdWbDg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyTmpvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHdGZPd29nSUNBZ0lDQWdJR05oYzJVZ016VTJOelE2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCSVh6c0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qYzFPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUjE4N0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TlRZM05qb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRmRmT3dvZ0lDQWdJQ0FnSUdOaGMyVWdOVEV5TkRvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjd09nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXRjg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyTnpvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjeE9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjVjg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyT0RvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjeU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXVjg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyT1RvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjek9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXbDg3Q2lBZ0lDQWdJQ0FnWTJGelpTQTFNVEkxT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1NsODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5qSTVORG9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNSZk93b2dJQ0FnSUNBZ0lHTmhjMlVnTXpZeU9UVTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJMWHpzS0lDQWdJQ0FnSUNCallYTmxJRE0yTWprMk9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVVjg3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkzT0RvS0lDQWdJQ0FnSUNCallYTmxJRE0yTVRrNE9nb2dJQ0FnSUNBZ0lHTmhjMlVnTXpZeU9UZzZDaUFnSUNBZ0lDQWdZMkZ6WlNBek5qTXdOam9LSUNBZ0lDQWdJQ0JqWVhObElETTFOamd5T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FsODdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTNPVG9LSUNBZ0lDQWdJQ0JqWVhObElETTJNams1T2dvZ0lDQWdJQ0FnSUdOaGMyVWdNell6TURjNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxNRHNLSUNBZ0lDQWdJQ0JqWVhObElETTFOamd3T2dvZ0lDQWdJQ0FnSUdOaGMyVWdNell6TURBNkNpQWdJQ0FnSUNBZ1kyRnpaU0F6TmpNd09Eb0tJQ0FnSUNBZ0lDQmpZWE5sSURNMk1qa3pPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZERBN0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TmpJNE9Ub0tJQ0FnSUNBZ0lDQmpZWE5sSURNMk16QXpPZ29nSUNBZ0lDQWdJR05oYzJVZ016WXpNVEU2Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOakk1TWpvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNHdPd29nSUNBZ2ZRcDlDblpoY2lCMmJ5QTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0cGV3b2dJQ0FnSUNBZ0lIUm9hWE11YVdRZ1BTQmxMQ0IwYUdsekxtRmtaSElnUFNCdUxDQjBhR2x6TG1OaFkyaGxJRDBnVzEwc0lIUm9hWE11YzJWMFZtRnNkV1VnUFNCR1h5aDBMblI1Y0dVcE93b2dJQ0FnZlFwOUxDQjVieUE5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHBld29nSUNBZ0lDQWdJSFJvYVhNdWFXUWdQU0JsTENCMGFHbHpMbUZrWkhJZ1BTQnVMQ0IwYUdsekxtTmhZMmhsSUQwZ1cxMHNJSFJvYVhNdWMybDZaU0E5SUhRdWMybDZaU3dnZEdocGN5NXpaWFJXWVd4MVpTQTlJR2t3S0hRdWRIbHdaU2s3Q2lBZ0lDQjlDbjBzSUUxdklEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdkR2hwY3k1cFpDQTlJR1VzSUhSb2FYTXVjMlZ4SUQwZ1cxMHNJSFJvYVhNdWJXRndJRDBnZTMwN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJXWVd4MVpTaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQjBhR2x6TG5ObGNUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElISWdQU0F3TENCaElEMGdhUzVzWlc1bmRHZzdJSElnSVQwOUlHRTdJQ3NyY2lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdklEMGdhVnR5WFRzS0lDQWdJQ0FnSUNBZ0lDQWdieTV6WlhSV1lXeDFaU2hsTENCMFcyOHVhV1JkTENCdUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNuMHNJRkZoSUQwZ0x5aGNkeXNwS0Z4ZEtUOG9YRnQ4WEM0cFB5OW5Pd3BtZFc1amRHbHZiaUJOYUNoek1Td2daU2tnZXdvZ0lDQWdjekV1YzJWeExuQjFjMmdvWlNrc0lITXhMbTFoY0Z0bExtbGtYU0E5SUdVN0NuMEtablZ1WTNScGIyNGdjekFvY3pFc0lHVXNJSFFwSUhzS0lDQWdJR3hsZENCdUlEMGdjekV1Ym1GdFpTd2dhU0E5SUc0dWJHVnVaM1JvT3dvZ0lDQWdabTl5S0ZGaExteGhjM1JKYm1SbGVDQTlJREE3T3lsN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCUllTNWxlR1ZqS0c0cExDQmhJRDBnVVdFdWJHRnpkRWx1WkdWNExDQnZJRDBnY2xzeFhTd2dZeUE5SUhKYk1sMGdQVDA5SUNKZElpd2diQ0E5SUhKYk0xMDdDaUFnSUNBZ0lDQWdhV1lnS0dNZ0ppWWdLRzhnUFNCdklId2dNQ2tzSUd3Z1BUMDlJSFp2YVdRZ01DQjhmQ0JzSUQwOVBTQWlXeUlnSmlZZ1lTQXJJRElnUFQwOUlHa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1RXZ29kQ3dnYkNBOVBUMGdkbTlwWkNBd0lEOGdibVYzSUhadktHOHNJSE14TENCbEtTQTZJRzVsZHlCNWJ5aHZMQ0J6TVN3Z1pTa3BPd29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkU0E5SUhRdWJXRndXMjlkT3dvZ0lDQWdJQ0FnSUNBZ0lDQjFJRDA5UFNCMmIybGtJREFnSmlZZ0tIVWdQU0J1WlhjZ1RXOG9ieWtzSUUxb0tIUXNJSFVwS1N3Z2RDQTlJSFU3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUXA5Q25aaGNpQnhhU0E5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRcGV3b2dJQ0FnSUNBZ0lIUm9hWE11YzJWeElEMGdXMTBzSUhSb2FYTXViV0Z3SUQwZ2UzMDdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQmxMbWRsZEZCeWIyZHlZVzFRWVhKaGJXVjBaWElvZEN3Z1pTNUJRMVJKVmtWZlZVNUpSazlTVFZNcE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FTQTlJREE3SUdrZ1BDQnVPeUFySzJrcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJR1V1WjJWMFFXTjBhWFpsVlc1cFptOXliU2gwTENCcEtTd2dZU0E5SUdVdVoyVjBWVzVwWm05eWJVeHZZMkYwYVc5dUtIUXNJSEl1Ym1GdFpTazdDaUFnSUNBZ0lDQWdJQ0FnSUhNd0tISXNJR0VzSUhSb2FYTXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUhObGRGWmhiSFZsS0dVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUm9hWE11YldGd1czUmRPd29nSUNBZ0lDQWdJSElnSVQwOUlIWnZhV1FnTUNBbUppQnlMbk5sZEZaaGJIVmxLR1VzSUc0c0lHa3BPd29nSUNBZ2ZRb2dJQ0FnYzJWMFQzQjBhVzl1WVd3b1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ2RGdHVYVHNLSUNBZ0lDQWdJQ0JwSUNFOVBTQjJiMmxrSURBZ0ppWWdkR2hwY3k1elpYUldZV3gxWlNobExDQnVMQ0JwS1RzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCMWNHeHZZV1FvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2NpQTlJREFzSUdFZ1BTQjBMbXhsYm1kMGFEc2djaUFoUFQwZ1lUc2dLeXR5S1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc4Z1BTQjBXM0pkTENCaklEMGdibHR2TG1sa1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnWXk1dVpXVmtjMVZ3WkdGMFpTQWhQVDBnSVRFZ0ppWWdieTV6WlhSV1lXeDFaU2hsTENCakxuWmhiSFZsTENCcEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdjMlZ4VjJsMGFGWmhiSFZsS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJRnRkT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQXNJSElnUFNCbExteGxibWQwYURzZ2FTQWhQVDBnY2pzZ0t5dHBLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCbFcybGRPd29nSUNBZ0lDQWdJQ0FnSUNCaExtbGtJR2x1SUhRZ0ppWWdiaTV3ZFhOb0tHRXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdianNLSUNBZ0lIMEtmVHNLWm5WdVkzUnBiMjRnVTJnb2N6RXNJR1VzSUhRcElIc0tJQ0FnSUd4bGRDQnVJRDBnY3pFdVkzSmxZWFJsVTJoaFpHVnlLR1VwT3dvZ0lDQWdjbVYwZFhKdUlITXhMbk5vWVdSbGNsTnZkWEpqWlNodUxDQjBLU3dnY3pFdVkyOXRjR2xzWlZOb1lXUmxjaWh1S1N3Z2Jqc0tmUXAyWVhJZ2NqQWdQU0F3T3dwbWRXNWpkR2x2YmlCaE1DaHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0J6TVM1emNHeHBkQ2hnQ21BcExDQnVJRDBnVzEwc0lHa2dQU0JOWVhSb0xtMWhlQ2hsSUMwZ05pd2dNQ2tzSUhJZ1BTQk5ZWFJvTG0xcGJpaGxJQ3NnTml3Z2RDNXNaVzVuZEdncE93b2dJQ0FnWm05eUtHeGxkQ0JoSUQwZ2FUc2dZU0E4SUhJN0lHRXJLeWw3Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0JoSUNzZ01Uc0tJQ0FnSUNBZ0lDQnVMbkIxYzJnb1lDUjdieUE5UFQwZ1pTQS9JQ0krSWlBNklDSWdJbjBnSkh0dmZUb2dKSHQwVzJGZGZXQXBPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJRzR1YW05cGJpaGdDbUFwT3dwOUNtWjFibU4wYVc5dUlHOHdLSE14S1NCN0NpQWdJQ0JzWlhRZ1pTQTlJRkZsTG1kbGRGQnlhVzFoY21sbGN5aFJaUzUzYjNKcmFXNW5RMjlzYjNKVGNHRmpaU2tzSUhRZ1BTQlJaUzVuWlhSUWNtbHRZWEpwWlhNb2N6RXBMQ0J1T3dvZ0lDQWdjM2RwZEdOb0tHVWdQVDA5SUhRZ1B5QnVJRDBnSWlJZ09pQmxJRDA5UFNCcmNpQW1KaUIwSUQwOVBTQldjaUEvSUc0Z1BTQWlUR2x1WldGeVJHbHpjR3hoZVZBelZHOU1hVzVsWVhKVFVrZENJaUE2SUdVZ1BUMDlJRlp5SUNZbUlIUWdQVDA5SUd0eUlDWW1JQ2h1SUQwZ0lreHBibVZoY2xOU1IwSlViMHhwYm1WaGNrUnBjM0JzWVhsUU15SXBMQ0J6TVNsN0NpQWdJQ0FnSUNBZ1kyRnpaU0JOYmpvS0lDQWdJQ0FnSUNCallYTmxJSFpoT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDSk1hVzVsWVhKVWNtRnVjMlpsY2s5RlZFWWlDaUFnSUNBZ0lDQWdJQ0FnSUYwN0NpQWdJQ0FnSUNBZ1kyRnpaU0IyZERvS0lDQWdJQ0FnSUNCallYTmxJSEZqT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDSnpVa2RDVkhKaGJuTm1aWEpQUlZSR0lnb2dJQ0FnSUNBZ0lDQWdJQ0JkT3dvZ0lDQWdJQ0FnSUdSbFptRjFiSFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVUhKdlozSmhiVG9nVlc1emRYQndiM0owWldRZ1kyOXNiM0lnYzNCaFkyVTZJaXdnY3pFcExDQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJa3hwYm1WaGNsUnlZVzV6Wm1WeVQwVlVSaUlLSUNBZ0lDQWdJQ0FnSUNBZ1hUc0tJQ0FnSUgwS2ZRcG1kVzVqZEdsdmJpQmlhQ2h6TVN3Z1pTd2dkQ2tnZXdvZ0lDQWdiR1YwSUc0Z1BTQnpNUzVuWlhSVGFHRmtaWEpRWVhKaGJXVjBaWElvWlN3Z2N6RXVRMDlOVUVsTVJWOVRWRUZVVlZNcExDQnBJRDBnY3pFdVoyVjBVMmhoWkdWeVNXNW1iMHh2WnlobEtTNTBjbWx0S0NrN0NpQWdJQ0JwWmlBb2JpQW1KaUJwSUQwOVBTQWlJaWtnY21WMGRYSnVJQ0lpT3dvZ0lDQWdiR1YwSUhJZ1BTQXZSVkpTVDFJNklEQTZLRnhrS3lrdkxtVjRaV01vYVNrN0NpQWdJQ0JwWmlBb2Npa2dld29nSUNBZ0lDQWdJR3hsZENCaElEMGdjR0Z5YzJWSmJuUW9jbHN4WFNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRdWRHOVZjSEJsY2tOaGMyVW9LU0FySUdBS0NtQWdLeUJwSUNzZ1lBb0tZQ0FySUdFd0tITXhMbWRsZEZOb1lXUmxjbE52ZFhKalpTaGxLU3dnWVNrN0NpQWdJQ0I5SUdWc2MyVWdjbVYwZFhKdUlHazdDbjBLWm5WdVkzUnBiMjRnWXpBb2N6RXNJR1VwSUhzS0lDQWdJR3hsZENCMElEMGdiekFvWlNrN0NpQWdJQ0J5WlhSMWNtNGdZSFpsWXpRZ0pIdHpNWDBvSUhabFl6UWdkbUZzZFdVZ0tTQjdJSEpsZEhWeWJpQWtlM1JiTUYxOUtDQWtlM1JiTVYxOUtDQjJZV3gxWlNBcElDazdJSDFnT3dwOUNtWjFibU4wYVc5dUlHd3dLSE14TENCbEtTQjdDaUFnSUNCc1pYUWdkRHNLSUNBZ0lITjNhWFJqYUNobEtYc0tJQ0FnSUNBZ0lDQmpZWE5sSUdSbU9nb2dJQ0FnSUNBZ0lDQWdJQ0IwSUQwZ0lreHBibVZoY2lJN0NpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lHTmhjMlVnWm1ZNkNpQWdJQ0FnSUNBZ0lDQWdJSFFnUFNBaVVtVnBibWhoY21RaU93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQmpZWE5sSUhCbU9nb2dJQ0FnSUNBZ0lDQWdJQ0IwSUQwZ0lrOXdkR2x0YVhwbFpFTnBibVZ2YmlJN0NpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lHTmhjMlVnYldZNkNpQWdJQ0FnSUNBZ0lDQWdJSFFnUFNBaVFVTkZVMFpwYkcxcFl5STdDaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJR05oYzJVZ1oyWTZDaUFnSUNBZ0lDQWdJQ0FnSUhRZ1BTQWlRM1Z6ZEc5dElqc0tJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkJ5YjJkeVlXMDZJRlZ1YzNWd2NHOXlkR1ZrSUhSdmJtVk5ZWEJ3YVc1bk9pSXNJR1VwTENCMElEMGdJa3hwYm1WaGNpSTdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdJblpsWXpNZ0lpQXJJSE14SUNzZ0lpZ2dkbVZqTXlCamIyeHZjaUFwSUhzZ2NtVjBkWEp1SUNJZ0t5QjBJQ3NnSWxSdmJtVk5ZWEJ3YVc1bktDQmpiMnh2Y2lBcE95QjlJanNLZlFwbWRXNWpkR2x2YmlCb01DaHpNU2tnZXdvZ0lDQWdjbVYwZFhKdUlGc0tJQ0FnSUNBZ0lDQnpNUzVsZUhSbGJuTnBiMjVFWlhKcGRtRjBhWFpsY3lCOGZDQnpNUzVsYm5aTllYQkRkV0psVlZaSVpXbG5hSFFnZkh3Z2N6RXVZblZ0Y0UxaGNDQjhmQ0J6TVM1dWIzSnRZV3hOWVhCVVlXNW5aVzUwVTNCaFkyVWdmSHdnY3pFdVkyeGxZWEpqYjJGMFRtOXliV0ZzVFdGd0lIeDhJSE14TG1ac1lYUlRhR0ZrYVc1bklIeDhJSE14TG5Ob1lXUmxja2xFSUQwOVBTQWljR2g1YzJsallXd2lJRDhnSWlObGVIUmxibk5wYjI0Z1IweGZUMFZUWDNOMFlXNWtZWEprWDJSbGNtbDJZWFJwZG1WeklEb2daVzVoWW14bElpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUNoek1TNWxlSFJsYm5OcGIyNUdjbUZuUkdWd2RHZ2dmSHdnY3pFdWJHOW5ZWEpwZEdodGFXTkVaWEIwYUVKMVptWmxjaWtnSmlZZ2N6RXVjbVZ1WkdWeVpYSkZlSFJsYm5OcGIyNUdjbUZuUkdWd2RHZ2dQeUFpSTJWNGRHVnVjMmx2YmlCSFRGOUZXRlJmWm5KaFoxOWtaWEIwYUNBNklHVnVZV0pzWlNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0J6TVM1bGVIUmxibk5wYjI1RWNtRjNRblZtWm1WeWN5QW1KaUJ6TVM1eVpXNWtaWEpsY2tWNGRHVnVjMmx2YmtSeVlYZENkV1ptWlhKeklEOGdJaU5sZUhSbGJuTnBiMjRnUjB4ZlJWaFVYMlJ5WVhkZlluVm1abVZ5Y3lBNklISmxjWFZwY21VaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnS0hNeExtVjRkR1Z1YzJsdmJsTm9ZV1JsY2xSbGVIUjFjbVZNVDBRZ2ZId2djekV1Wlc1MlRXRndJSHg4SUhNeExuUnlZVzV6YldsemMybHZiaWtnSmlZZ2N6RXVjbVZ1WkdWeVpYSkZlSFJsYm5OcGIyNVRhR0ZrWlhKVVpYaDBkWEpsVEc5a0lEOGdJaU5sZUhSbGJuTnBiMjRnUjB4ZlJWaFVYM05vWVdSbGNsOTBaWGgwZFhKbFgyeHZaQ0E2SUdWdVlXSnNaU0lnT2lBaUlnb2dJQ0FnWFM1bWFXeDBaWElvZG5NcExtcHZhVzRvWUFwZ0tUc0tmUXBtZFc1amRHbHZiaUIxTUNoek1Ta2dld29nSUNBZ2JHVjBJR1VnUFNCYlhUc0tJQ0FnSUdadmNpaHNaWFFnZENCcGJpQnpNU2w3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0J6TVZ0MFhUc0tJQ0FnSUNBZ0lDQnVJQ0U5UFNBaE1TQW1KaUJsTG5CMWMyZ29JaU5rWldacGJtVWdJaUFySUhRZ0t5QWlJQ0lnS3lCdUtUc0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQmxMbXB2YVc0b1lBcGdLVHNLZlFwbWRXNWpkR2x2YmlCa01DaHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0I3ZlN3Z2JpQTlJSE14TG1kbGRGQnliMmR5WVcxUVlYSmhiV1YwWlhJb1pTd2djekV1UVVOVVNWWkZYMEZVVkZKSlFsVlVSVk1wT3dvZ0lDQWdabTl5S0d4bGRDQnBJRDBnTURzZ2FTQThJRzQ3SUdrckt5bDdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQnpNUzVuWlhSQlkzUnBkbVZCZEhSeWFXSW9aU3dnYVNrc0lHRWdQU0J5TG01aGJXVXNJRzhnUFNBeE93b2dJQ0FnSUNBZ0lISXVkSGx3WlNBOVBUMGdjekV1Umt4UFFWUmZUVUZVTWlBbUppQW9ieUE5SURJcExDQnlMblI1Y0dVZ1BUMDlJSE14TGtaTVQwRlVYMDFCVkRNZ0ppWWdLRzhnUFNBektTd2djaTUwZVhCbElEMDlQU0J6TVM1R1RFOUJWRjlOUVZRMElDWW1JQ2h2SUQwZ05Da3NJSFJiWVYwZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJSEl1ZEhsd1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnYkc5allYUnBiMjQ2SUhNeExtZGxkRUYwZEhKcFlreHZZMkYwYVc5dUtHVXNJR0VwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnNiMk5oZEdsdmJsTnBlbVU2SUc4S0lDQWdJQ0FnSUNCOU93b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlIUTdDbjBLWm5WdVkzUnBiMjRnZG5Nb2N6RXBJSHNLSUNBZ0lISmxkSFZ5YmlCek1TQWhQVDBnSWlJN0NuMEtablZ1WTNScGIyNGdSV2dvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ1pTNXVkVzFUY0c5MFRHbG5hSFJUYUdGa2IzZHpJQ3NnWlM1dWRXMVRjRzkwVEdsbmFIUk5ZWEJ6SUMwZ1pTNXVkVzFUY0c5MFRHbG5hSFJUYUdGa2IzZHpWMmwwYUUxaGNITTdDaUFnSUNCeVpYUjFjbTRnY3pFdWNtVndiR0ZqWlNndlRsVk5YMFJKVWw5TVNVZElWRk12Wnl3Z1pTNXVkVzFFYVhKTWFXZG9kSE1wTG5KbGNHeGhZMlVvTDA1VlRWOVRVRTlVWDB4SlIwaFVVeTluTENCbExtNTFiVk53YjNSTWFXZG9kSE1wTG5KbGNHeGhZMlVvTDA1VlRWOVRVRTlVWDB4SlIwaFVYMDFCVUZNdlp5d2daUzV1ZFcxVGNHOTBUR2xuYUhSTllYQnpLUzV5WlhCc1lXTmxLQzlPVlUxZlUxQlBWRjlNU1VkSVZGOURUMDlTUkZNdlp5d2dkQ2t1Y21Wd2JHRmpaU2d2VGxWTlgxSkZRMVJmUVZKRlFWOU1TVWRJVkZNdlp5d2daUzV1ZFcxU1pXTjBRWEpsWVV4cFoyaDBjeWt1Y21Wd2JHRmpaU2d2VGxWTlgxQlBTVTVVWDB4SlIwaFVVeTluTENCbExtNTFiVkJ2YVc1MFRHbG5hSFJ6S1M1eVpYQnNZV05sS0M5T1ZVMWZTRVZOU1Y5TVNVZElWRk12Wnl3Z1pTNXVkVzFJWlcxcFRHbG5hSFJ6S1M1eVpYQnNZV05sS0M5T1ZVMWZSRWxTWDB4SlIwaFVYMU5JUVVSUFYxTXZaeXdnWlM1dWRXMUVhWEpNYVdkb2RGTm9ZV1J2ZDNNcExuSmxjR3hoWTJVb0wwNVZUVjlUVUU5VVgweEpSMGhVWDFOSVFVUlBWMU5mVjBsVVNGOU5RVkJUTDJjc0lHVXViblZ0VTNCdmRFeHBaMmgwVTJoaFpHOTNjMWRwZEdoTllYQnpLUzV5WlhCc1lXTmxLQzlPVlUxZlUxQlBWRjlNU1VkSVZGOVRTRUZFVDFkVEwyY3NJR1V1Ym5WdFUzQnZkRXhwWjJoMFUyaGhaRzkzY3lrdWNtVndiR0ZqWlNndlRsVk5YMUJQU1U1VVgweEpSMGhVWDFOSVFVUlBWMU12Wnl3Z1pTNXVkVzFRYjJsdWRFeHBaMmgwVTJoaFpHOTNjeWs3Q24wS1puVnVZM1JwYjI0Z1ZHZ29jekVzSUdVcElIc0tJQ0FnSUhKbGRIVnliaUJ6TVM1eVpYQnNZV05sS0M5T1ZVMWZRMHhKVUZCSlRrZGZVRXhCVGtWVEwyY3NJR1V1Ym5WdFEyeHBjSEJwYm1kUWJHRnVaWE1wTG5KbGNHeGhZMlVvTDFWT1NVOU9YME5NU1ZCUVNVNUhYMUJNUVU1RlV5OW5MQ0JsTG01MWJVTnNhWEJ3YVc1blVHeGhibVZ6SUMwZ1pTNXVkVzFEYkdsd1NXNTBaWEp6WldOMGFXOXVLVHNLZlFwMllYSWdaakFnUFNBdlhsc2dYSFJkS2lOcGJtTnNkV1JsSUNzOEtGdGNkMXhrTGk5ZEt5aytMMmR0T3dwbWRXNWpkR2x2YmlCVGJ5aHpNU2tnZXdvZ0lDQWdjbVYwZFhKdUlITXhMbkpsY0d4aFkyVW9aakFzSUcwd0tUc0tmUXAyWVhJZ2NEQWdQU0J1WlhjZ1RXRndLRnNLSUNBZ0lGc0tJQ0FnSUNBZ0lDQWlaVzVqYjJScGJtZHpYMlp5WVdkdFpXNTBJaXdLSUNBZ0lDQWdJQ0FpWTI5c2IzSnpjR0ZqWlY5bWNtRm5iV1Z1ZENJS0lDQWdJRjBzQ2lBZ0lDQmJDaUFnSUNBZ0lDQWdJbVZ1WTI5a2FXNW5jMTl3WVhKelgyWnlZV2R0Wlc1MElpd0tJQ0FnSUNBZ0lDQWlZMjlzYjNKemNHRmpaVjl3WVhKelgyWnlZV2R0Wlc1MElnb2dJQ0FnWFN3S0lDQWdJRnNLSUNBZ0lDQWdJQ0FpYjNWMGNIVjBYMlp5WVdkdFpXNTBJaXdLSUNBZ0lDQWdJQ0FpYjNCaGNYVmxYMlp5WVdkdFpXNTBJZ29nSUNBZ1hRcGRLVHNLWm5WdVkzUnBiMjRnYlRBb2N6RXNJR1VwSUhzS0lDQWdJR3hsZENCMElEMGdhMlZiWlYwN0NpQWdJQ0JwWmlBb2RDQTlQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0J3TUM1blpYUW9aU2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tHNGdJVDA5SUhadmFXUWdNQ2tnZENBOUlHdGxXMjVkTENCamIyNXpiMnhsTG5kaGNtNG9KMVJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUZOb1lXUmxjaUJqYUhWdWF5QWlKWE1pSUdoaGN5QmlaV1Z1SUdSbGNISmxZMkYwWldRdUlGVnpaU0FpSlhNaUlHbHVjM1JsWVdRdUp5d2daU3dnYmlrN0NpQWdJQ0FnSUNBZ1pXeHpaU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9Ja05oYmlCdWIzUWdjbVZ6YjJ4MlpTQWphVzVqYkhWa1pTQThJaUFySUdVZ0t5QWlQaUlwT3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUZOdktIUXBPd3A5Q25aaGNpQm5NQ0E5SUM4amNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gzTjBZWEowWEhNclptOXlYSE1xWENoY2N5cHBiblJjY3l0cFhITXFQVnh6S2loY1pDc3BYSE1xTzF4ekttbGNjeW84WEhNcUtGeGtLeWxjY3lvN1hITXFhVnh6S2x3clhDdGNjeXBjS1Z4ektuc29XMXh6WEZOZEt6OHBmVnh6S3lOd2NtRm5iV0VnZFc1eWIyeHNYMnh2YjNCZlpXNWtMMmM3Q21aMWJtTjBhVzl1SUhkb0tITXhLU0I3Q2lBZ0lDQnlaWFIxY200Z2N6RXVjbVZ3YkdGalpTaG5NQ3dnWHpBcE93cDlDbVoxYm1OMGFXOXVJRjh3S0hNeExDQmxMQ0IwTENCdUtTQjdDaUFnSUNCc1pYUWdhU0E5SUNJaU93b2dJQ0FnWm05eUtHeGxkQ0J5SUQwZ2NHRnljMlZKYm5Rb1pTazdJSElnUENCd1lYSnpaVWx1ZENoMEtUc2djaXNyS1drZ0t6MGdiaTV5WlhCc1lXTmxLQzljVzF4ekttbGNjeXBjWFM5bkxDQWlXeUFpSUNzZ2NpQXJJQ0lnWFNJcExuSmxjR3hoWTJVb0wxVk9VazlNVEVWRVgweFBUMUJmU1U1RVJWZ3ZaeXdnY2lrN0NpQWdJQ0J5WlhSMWNtNGdhVHNLZlFwbWRXNWpkR2x2YmlCQmFDaHpNU2tnZXdvZ0lDQWdiR1YwSUdVZ1BTQWljSEpsWTJsemFXOXVJQ0lnS3lCek1TNXdjbVZqYVhOcGIyNGdLeUJnSUdac2IyRjBPd3B3Y21WamFYTnBiMjRnWUNBcklITXhMbkJ5WldOcGMybHZiaUFySUNJZ2FXNTBPeUk3Q2lBZ0lDQnlaWFIxY200Z2N6RXVjSEpsWTJsemFXOXVJRDA5UFNBaWFHbG5hSEFpSUQ4Z1pTQXJQU0JnQ2lOa1pXWnBibVVnU0VsSFNGOVFVa1ZEU1ZOSlQwNWdJRG9nY3pFdWNISmxZMmx6YVc5dUlEMDlQU0FpYldWa2FYVnRjQ0lnUHlCbElDczlJR0FLSTJSbFptbHVaU0JOUlVSSlZVMWZVRkpGUTBsVFNVOU9ZQ0E2SUhNeExuQnlaV05wYzJsdmJpQTlQVDBnSW14dmQzQWlJQ1ltSUNobElDczlJR0FLSTJSbFptbHVaU0JNVDFkZlVGSkZRMGxUU1U5T1lDa3NJR1U3Q24wS1puVnVZM1JwYjI0Z2VEQW9jekVwSUhzS0lDQWdJR3hsZENCbElEMGdJbE5JUVVSUFYwMUJVRjlVV1ZCRlgwSkJVMGxESWpzS0lDQWdJSEpsZEhWeWJpQnpNUzV6YUdGa2IzZE5ZWEJVZVhCbElEMDlQU0JqWkNBL0lHVWdQU0FpVTBoQlJFOVhUVUZRWDFSWlVFVmZVRU5HSWlBNklITXhMbk5vWVdSdmQwMWhjRlI1Y0dVZ1BUMDlJRWRrSUQ4Z1pTQTlJQ0pUU0VGRVQxZE5RVkJmVkZsUVJWOVFRMFpmVTA5R1ZDSWdPaUJ6TVM1emFHRmtiM2ROWVhCVWVYQmxJRDA5UFNCd2JpQW1KaUFvWlNBOUlDSlRTRUZFVDFkTlFWQmZWRmxRUlY5V1UwMGlLU3dnWlRzS2ZRcG1kVzVqZEdsdmJpQjJNQ2h6TVNrZ2V3b2dJQ0FnYkdWMElHVWdQU0FpUlU1V1RVRlFYMVJaVUVWZlExVkNSU0k3Q2lBZ0lDQnBaaUFvY3pFdVpXNTJUV0Z3S1NCemQybDBZMmdvY3pFdVpXNTJUV0Z3VFc5a1pTbDdDaUFnSUNBZ0lDQWdZMkZ6WlNCNmJqb0tJQ0FnSUNBZ0lDQmpZWE5sSUdOcE9nb2dJQ0FnSUNBZ0lDQWdJQ0JsSUQwZ0lrVk9WazFCVUY5VVdWQkZYME5WUWtVaU93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQmpZWE5sSUZaek9nb2dJQ0FnSUNBZ0lDQWdJQ0JsSUQwZ0lrVk9WazFCVUY5VVdWQkZYME5WUWtWZlZWWWlPd29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUJsT3dwOUNtWjFibU4wYVc5dUlIa3dLSE14S1NCN0NpQWdJQ0JzWlhRZ1pTQTlJQ0pGVGxaTlFWQmZUVTlFUlY5U1JVWk1SVU5VU1U5T0lqc0tJQ0FnSUdsbUlDaHpNUzVsYm5aTllYQXBJSE4zYVhSamFDaHpNUzVsYm5aTllYQk5iMlJsS1hzS0lDQWdJQ0FnSUNCallYTmxJR05wT2dvZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnSWtWT1ZrMUJVRjlOVDBSRlgxSkZSbEpCUTFSSlQwNGlPd29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUJsT3dwOUNtWjFibU4wYVc5dUlFMHdLSE14S1NCN0NpQWdJQ0JzWlhRZ1pTQTlJQ0pGVGxaTlFWQmZRa3hGVGtSSlRrZGZUazlPUlNJN0NpQWdJQ0JwWmlBb2N6RXVaVzUyVFdGd0tTQnpkMmwwWTJnb2N6RXVZMjl0WW1sdVpTbDdDaUFnSUNBZ0lDQWdZMkZ6WlNCNFlUb0tJQ0FnSUNBZ0lDQWdJQ0FnWlNBOUlDSkZUbFpOUVZCZlFreEZUa1JKVGtkZlRWVk1WRWxRVEZraU93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQmpZWE5sSUdobU9nb2dJQ0FnSUNBZ0lDQWdJQ0JsSUQwZ0lrVk9WazFCVUY5Q1RFVk9SRWxPUjE5TlNWZ2lPd29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0JqWVhObElIVm1PZ29nSUNBZ0lDQWdJQ0FnSUNCbElEMGdJa1ZPVmsxQlVGOUNURVZPUkVsT1IxOUJSRVFpT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCbE93cDlDbVoxYm1OMGFXOXVJRk13S0hNeEtTQjdDaUFnSUNCc1pYUWdaU0E5SUhNeExtVnVkazFoY0VOMVltVlZWa2hsYVdkb2REc0tJQ0FnSUdsbUlDaGxJRDA5UFNCdWRXeHNLU0J5WlhSMWNtNGdiblZzYkRzS0lDQWdJR3hsZENCMElEMGdUV0YwYUM1c2IyY3lLR1VwSUMwZ01pd2diaUE5SURFZ0x5QmxPd29nSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCMFpYaGxiRmRwWkhSb09pQXhJQzhnS0RNZ0tpQk5ZWFJvTG0xaGVDaE5ZWFJvTG5CdmR5Z3lMQ0IwS1N3Z055QXFJREUyS1Nrc0NpQWdJQ0FnSUNBZ2RHVjRaV3hJWldsbmFIUTZJRzRzQ2lBZ0lDQWdJQ0FnYldGNFRXbHdPaUIwQ2lBZ0lDQjlPd3A5Q21aMWJtTjBhVzl1SUdJd0tITXhMQ0JsTENCMExDQnVLU0I3Q2lBZ0lDQnNaWFFnYVNBOUlITXhMbWRsZEVOdmJuUmxlSFFvS1N3Z2NpQTlJSFF1WkdWbWFXNWxjeXdnWVNBOUlIUXVkbVZ5ZEdWNFUyaGhaR1Z5TENCdklEMGdkQzVtY21GbmJXVnVkRk5vWVdSbGNpd2dZeUE5SUhnd0tIUXBMQ0JzSUQwZ2RqQW9kQ2tzSUdnZ1BTQjVNQ2gwS1N3Z2RTQTlJRTB3S0hRcExDQmtJRDBnVXpBb2RDa3NJR1lnUFNCMExtbHpWMlZpUjB3eUlEOGdJaUlnT2lCb01DaDBLU3dnYlNBOUlIVXdLSElwTENCZklEMGdhUzVqY21WaGRHVlFjbTluY21GdEtDa3NJR2NzSUhBc0lIWWdQU0IwTG1kc2MyeFdaWEp6YVc5dUlEOGdJaU4yWlhKemFXOXVJQ0lnS3lCMExtZHNjMnhXWlhKemFXOXVJQ3NnWUFwZ0lEb2dJaUk3Q2lBZ0lDQjBMbWx6VW1GM1UyaGhaR1Z5VFdGMFpYSnBZV3dnUHlBb1p5QTlJRnNLSUNBZ0lDQWdJQ0FpSTJSbFptbHVaU0JUU0VGRVJWSmZWRmxRUlNBaUlDc2dkQzV6YUdGa1pYSlVlWEJsTEFvZ0lDQWdJQ0FnSUNJalpHVm1hVzVsSUZOSVFVUkZVbDlPUVUxRklDSWdLeUIwTG5Ob1lXUmxjazVoYldVc0NpQWdJQ0FnSUNBZ2JRb2dJQ0FnWFM1bWFXeDBaWElvZG5NcExtcHZhVzRvWUFwZ0tTd2daeTVzWlc1bmRHZ2dQaUF3SUNZbUlDaG5JQ3M5SUdBS1lDa3NJSEFnUFNCYkNpQWdJQ0FnSUNBZ1ppd0tJQ0FnSUNBZ0lDQWlJMlJsWm1sdVpTQlRTRUZFUlZKZlZGbFFSU0FpSUNzZ2RDNXphR0ZrWlhKVWVYQmxMQW9nSUNBZ0lDQWdJQ0lqWkdWbWFXNWxJRk5JUVVSRlVsOU9RVTFGSUNJZ0t5QjBMbk5vWVdSbGNrNWhiV1VzQ2lBZ0lDQWdJQ0FnYlFvZ0lDQWdYUzVtYVd4MFpYSW9kbk1wTG1wdmFXNG9ZQXBnS1N3Z2NDNXNaVzVuZEdnZ1BpQXdJQ1ltSUNod0lDczlJR0FLWUNrcElEb2dLR2NnUFNCYkNpQWdJQ0FnSUNBZ1FXZ29kQ2tzQ2lBZ0lDQWdJQ0FnSWlOa1pXWnBibVVnVTBoQlJFVlNYMVJaVUVVZ0lpQXJJSFF1YzJoaFpHVnlWSGx3WlN3S0lDQWdJQ0FnSUNBaUkyUmxabWx1WlNCVFNFRkVSVkpmVGtGTlJTQWlJQ3NnZEM1emFHRmtaWEpPWVcxbExBb2dJQ0FnSUNBZ0lHMHNDaUFnSUNBZ0lDQWdkQzVwYm5OMFlXNWphVzVuSUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMGxPVTFSQlRrTkpUa2NpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVwYm5OMFlXNWphVzVuUTI5c2IzSWdQeUFpSTJSbFptbHVaU0JWVTBWZlNVNVRWRUZPUTBsT1IxOURUMHhQVWlJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5WelpVWnZaeUFtSmlCMExtWnZaeUEvSUNJalpHVm1hVzVsSUZWVFJWOUdUMGNpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzUxYzJWR2IyY2dKaVlnZEM1bWIyZEZlSEF5SUQ4Z0lpTmtaV1pwYm1VZ1JrOUhYMFZZVURJaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1dFlYQWdQeUFpSTJSbFptbHVaU0JWVTBWZlRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVaVzUyVFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDBWT1ZrMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbVZ1ZGsxaGNDQS9JQ0lqWkdWbWFXNWxJQ0lnS3lCb0lEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1c2FXZG9kRTFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlNU1VkSVZFMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbUZ2VFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDBGUFRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVZblZ0Y0UxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5Q1ZVMVFUVUZRSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Ym05eWJXRnNUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMDVQVWsxQlRFMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbTV2Y20xaGJFMWhjRTlpYW1WamRGTndZV05sSUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMDVQVWsxQlRFMUJVRjlQUWtwRlExUlRVRUZEUlNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG01dmNtMWhiRTFoY0ZSaGJtZGxiblJUY0dGalpTQS9JQ0lqWkdWbWFXNWxJRlZUUlY5T1QxSk5RVXhOUVZCZlZFRk9SMFZPVkZOUVFVTkZJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDBSSlUxQk1RVU5GVFVWT1ZFMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbVZ0YVhOemFYWmxUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMFZOU1ZOVFNWWkZUVUZRSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1WVc1cGMyOTBjbTl3ZVNBL0lDSWpaR1ZtYVc1bElGVlRSVjlCVGtsVFQxUlNUMUJaSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1WVc1cGMyOTBjbTl3ZVUxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5QlRrbFRUMVJTVDFCWlRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVZMnhsWVhKamIyRjBUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYME5NUlVGU1EwOUJWRTFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6YzAxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5RFRFVkJVa05QUVZSZlVrOVZSMGhPUlZOVFRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVZMnhsWVhKamIyRjBUbTl5YldGc1RXRndJRDhnSWlOa1pXWnBibVVnVlZORlgwTk1SVUZTUTA5QlZGOU9UMUpOUVV4TlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXBjbWxrWlhOalpXNWpaVTFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlKVWtsRVJWTkRSVTVEUlUxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMGxTU1VSRlUwTkZUa05GWDFSSVNVTkxUa1ZUVTAxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuTndaV04xYkdGeVRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgxTlFSVU5WVEVGU1RVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVjM0JsWTNWc1lYSkRiMnh2Y2sxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5VFVFVkRWVXhCVWw5RFQweFBVazFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5Od1pXTjFiR0Z5U1c1MFpXNXphWFI1VFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDFOUVJVTlZURUZTWDBsT1ZFVk9VMGxVV1UxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuSnZkV2RvYm1WemMwMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOVNUMVZIU0U1RlUxTk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV0WlhSaGJHNWxjM05OWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVFVWVVFVeE9SVk5UVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVlXeHdhR0ZOWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmUVV4UVNFRk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVoYkhCb1lVaGhjMmdnUHlBaUkyUmxabWx1WlNCVlUwVmZRVXhRU0VGSVFWTklJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVkSEpoYm5OdGFYTnphVzl1SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMVJTUVU1VFRVbFRVMGxQVGlJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5SeVlXNXpiV2x6YzJsdmJrMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOVVVa0ZPVTAxSlUxTkpUMDVOUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1MGFHbGphMjVsYzNOTllYQWdQeUFpSTJSbFptbHVaU0JWVTBWZlZFaEpRMHRPUlZOVFRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVjMmhsWlc1RGIyeHZjazFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlUU0VWRlRsOURUMHhQVWsxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuTm9aV1Z1VW05MVoyaHVaWE56VFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDFOSVJVVk9YMUpQVlVkSVRrVlRVMDFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG0xaGNGVjJJRDhnSWlOa1pXWnBibVVnVFVGUVgxVldJQ0lnS3lCMExtMWhjRlYySURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVoYkhCb1lVMWhjRlYySUQ4Z0lpTmtaV1pwYm1VZ1FVeFFTRUZOUVZCZlZWWWdJaUFySUhRdVlXeHdhR0ZOWVhCVmRpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJHbG5hSFJOWVhCVmRpQS9JQ0lqWkdWbWFXNWxJRXhKUjBoVVRVRlFYMVZXSUNJZ0t5QjBMbXhwWjJoMFRXRndWWFlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbUZ2VFdGd1ZYWWdQeUFpSTJSbFptbHVaU0JCVDAxQlVGOVZWaUFpSUNzZ2RDNWhiMDFoY0ZWMklEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1bGJXbHpjMmwyWlUxaGNGVjJJRDhnSWlOa1pXWnBibVVnUlUxSlUxTkpWa1ZOUVZCZlZWWWdJaUFySUhRdVpXMXBjM05wZG1WTllYQlZkaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVZblZ0Y0UxaGNGVjJJRDhnSWlOa1pXWnBibVVnUWxWTlVFMUJVRjlWVmlBaUlDc2dkQzVpZFcxd1RXRndWWFlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbTV2Y20xaGJFMWhjRlYySUQ4Z0lpTmtaV1pwYm1VZ1RrOVNUVUZNVFVGUVgxVldJQ0lnS3lCMExtNXZjbTFoYkUxaGNGVjJJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWthWE53YkdGalpXMWxiblJOWVhCVmRpQS9JQ0lqWkdWbWFXNWxJRVJKVTFCTVFVTkZUVVZPVkUxQlVGOVZWaUFpSUNzZ2RDNWthWE53YkdGalpXMWxiblJOWVhCVmRpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJXVjBZV3h1WlhOelRXRndWWFlnUHlBaUkyUmxabWx1WlNCTlJWUkJURTVGVTFOTlFWQmZWVllnSWlBcklIUXViV1YwWVd4dVpYTnpUV0Z3VlhZZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5KdmRXZG9ibVZ6YzAxaGNGVjJJRDhnSWlOa1pXWnBibVVnVWs5VlIwaE9SVk5UVFVGUVgxVldJQ0lnS3lCMExuSnZkV2RvYm1WemMwMWhjRlYySURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVoYm1semIzUnliM0I1VFdGd1ZYWWdQeUFpSTJSbFptbHVaU0JCVGtsVFQxUlNUMUJaVFVGUVgxVldJQ0lnS3lCMExtRnVhWE52ZEhKdmNIbE5ZWEJWZGlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1WTJ4bFlYSmpiMkYwVFdGd1ZYWWdQeUFpSTJSbFptbHVaU0JEVEVWQlVrTlBRVlJOUVZCZlZWWWdJaUFySUhRdVkyeGxZWEpqYjJGMFRXRndWWFlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbU5zWldGeVkyOWhkRTV2Y20xaGJFMWhjRlYySUQ4Z0lpTmtaV1pwYm1VZ1EweEZRVkpEVDBGVVgwNVBVazFCVEUxQlVGOVZWaUFpSUNzZ2RDNWpiR1ZoY21OdllYUk9iM0p0WVd4TllYQlZkaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpUV0Z3VlhZZ1B5QWlJMlJsWm1sdVpTQkRURVZCVWtOUFFWUmZVazlWUjBoT1JWTlRUVUZRWDFWV0lDSWdLeUIwTG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6YzAxaGNGVjJJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXBjbWxrWlhOalpXNWpaVTFoY0ZWMklEOGdJaU5rWldacGJtVWdTVkpKUkVWVFEwVk9RMFZOUVZCZlZWWWdJaUFySUhRdWFYSnBaR1Z6WTJWdVkyVk5ZWEJWZGlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNOTllYQlZkaUEvSUNJalpHVm1hVzVsSUVsU1NVUkZVME5GVGtORlgxUklTVU5MVGtWVFUwMUJVRjlWVmlBaUlDc2dkQzVwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzAxaGNGVjJJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXphR1ZsYmtOdmJHOXlUV0Z3VlhZZ1B5QWlJMlJsWm1sdVpTQlRTRVZGVGw5RFQweFBVazFCVUY5VlZpQWlJQ3NnZEM1emFHVmxia052Ykc5eVRXRndWWFlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbk5vWldWdVVtOTFaMmh1WlhOelRXRndWWFlnUHlBaUkyUmxabWx1WlNCVFNFVkZUbDlTVDFWSFNFNUZVMU5OUVZCZlZWWWdJaUFySUhRdWMyaGxaVzVTYjNWbmFHNWxjM05OWVhCVmRpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWMzQmxZM1ZzWVhKTllYQlZkaUEvSUNJalpHVm1hVzVsSUZOUVJVTlZURUZTVFVGUVgxVldJQ0lnS3lCMExuTndaV04xYkdGeVRXRndWWFlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbk53WldOMWJHRnlRMjlzYjNKTllYQlZkaUEvSUNJalpHVm1hVzVsSUZOUVJVTlZURUZTWDBOUFRFOVNUVUZRWDFWV0lDSWdLeUIwTG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEJWZGlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhCVmRpQS9JQ0lqWkdWbWFXNWxJRk5RUlVOVlRFRlNYMGxPVkVWT1UwbFVXVTFCVUY5VlZpQWlJQ3NnZEM1emNHVmpkV3hoY2tsdWRHVnVjMmwwZVUxaGNGVjJJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNTBjbUZ1YzIxcGMzTnBiMjVOWVhCVmRpQS9JQ0lqWkdWbWFXNWxJRlJTUVU1VFRVbFRVMGxQVGsxQlVGOVZWaUFpSUNzZ2RDNTBjbUZ1YzIxcGMzTnBiMjVOWVhCVmRpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWRHaHBZMnR1WlhOelRXRndWWFlnUHlBaUkyUmxabWx1WlNCVVNFbERTMDVGVTFOTlFWQmZWVllnSWlBcklIUXVkR2hwWTJ0dVpYTnpUV0Z3VlhZZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5abGNuUmxlRlJoYm1kbGJuUnpJQ1ltSUhRdVpteGhkRk5vWVdScGJtY2dQVDA5SUNFeElEOGdJaU5rWldacGJtVWdWVk5GWDFSQlRrZEZUbFFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzUyWlhKMFpYaERiMnh2Y25NZ1B5QWlJMlJsWm1sdVpTQlZVMFZmUTA5TVQxSWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNTJaWEowWlhoQmJIQm9ZWE1nUHlBaUkyUmxabWx1WlNCVlUwVmZRMDlNVDFKZlFVeFFTRUVpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzUyWlhKMFpYaFZkakZ6SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMVZXTVNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5abGNuUmxlRlYyTW5NZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVlZZeUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWRtVnlkR1Y0VlhZemN5QS9JQ0lqWkdWbWFXNWxJRlZUUlY5VlZqTWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXdiMmx1ZEhOVmRuTWdQeUFpSTJSbFptbHVaU0JWVTBWZlVFOUpUbFJUWDFWV0lpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVpteGhkRk5vWVdScGJtY2dQeUFpSTJSbFptbHVaU0JHVEVGVVgxTklRVVJGUkNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5OcmFXNXVhVzVuSUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMU5MU1U1T1NVNUhJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXViVzl5Y0doVVlYSm5aWFJ6SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMDFQVWxCSVZFRlNSMFZVVXlJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG0xdmNuQm9UbTl5YldGc2N5QW1KaUIwTG1ac1lYUlRhR0ZrYVc1bklEMDlQU0FoTVNBL0lDSWpaR1ZtYVc1bElGVlRSVjlOVDFKUVNFNVBVazFCVEZNaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1dGIzSndhRU52Ykc5eWN5QW1KaUIwTG1selYyVmlSMHd5SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMDFQVWxCSVEwOU1UMUpUSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Ylc5eWNHaFVZWEpuWlhSelEyOTFiblFnUGlBd0lDWW1JSFF1YVhOWFpXSkhURElnUHlBaUkyUmxabWx1WlNCTlQxSlFTRlJCVWtkRlZGTmZWRVZZVkZWU1JTSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtMXZjbkJvVkdGeVoyVjBjME52ZFc1MElENGdNQ0FtSmlCMExtbHpWMlZpUjB3eUlEOGdJaU5rWldacGJtVWdUVTlTVUVoVVFWSkhSVlJUWDFSRldGUlZVa1ZmVTFSU1NVUkZJQ0lnS3lCMExtMXZjbkJvVkdWNGRIVnlaVk4wY21sa1pTQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJXOXljR2hVWVhKblpYUnpRMjkxYm5RZ1BpQXdJQ1ltSUhRdWFYTlhaV0pIVERJZ1B5QWlJMlJsWm1sdVpTQk5UMUpRU0ZSQlVrZEZWRk5mUTA5VlRsUWdJaUFySUhRdWJXOXljR2hVWVhKblpYUnpRMjkxYm5RZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG1SdmRXSnNaVk5wWkdWa0lEOGdJaU5rWldacGJtVWdSRTlWUWt4RlgxTkpSRVZFSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Wm14cGNGTnBaR1ZrSUQ4Z0lpTmtaV1pwYm1VZ1JreEpVRjlUU1VSRlJDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuTm9ZV1J2ZDAxaGNFVnVZV0pzWldRZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVTBoQlJFOVhUVUZRSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YzJoaFpHOTNUV0Z3Ulc1aFlteGxaQ0EvSUNJalpHVm1hVzVsSUNJZ0t5QmpJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXphWHBsUVhSMFpXNTFZWFJwYjI0Z1B5QWlJMlJsWm1sdVpTQlZVMFZmVTBsYVJVRlVWRVZPVlVGVVNVOU9JaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXViblZ0VEdsbmFIUlFjbTlpWlhNZ1BpQXdJRDhnSWlOa1pXWnBibVVnVlZORlgweEpSMGhVWDFCU1QwSkZVeUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblZ6WlV4bFoyRmplVXhwWjJoMGN5QS9JQ0lqWkdWbWFXNWxJRXhGUjBGRFdWOU1TVWRJVkZNaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1c2IyZGhjbWwwYUcxcFkwUmxjSFJvUW5WbVptVnlJRDhnSWlOa1pXWnBibVVnVlZORlgweFBSMFJGVUZSSVFsVkdJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXViRzluWVhKcGRHaHRhV05FWlhCMGFFSjFabVpsY2lBbUppQjBMbkpsYm1SbGNtVnlSWGgwWlc1emFXOXVSbkpoWjBSbGNIUm9JRDhnSWlOa1pXWnBibVVnVlZORlgweFBSMFJGVUZSSVFsVkdYMFZZVkNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0FpZFc1cFptOXliU0J0WVhRMElHMXZaR1ZzVFdGMGNtbDRPeUlzQ2lBZ0lDQWdJQ0FnSW5WdWFXWnZjbTBnYldGME5DQnRiMlJsYkZacFpYZE5ZWFJ5YVhnN0lpd0tJQ0FnSUNBZ0lDQWlkVzVwWm05eWJTQnRZWFEwSUhCeWIycGxZM1JwYjI1TllYUnlhWGc3SWl3S0lDQWdJQ0FnSUNBaWRXNXBabTl5YlNCdFlYUTBJSFpwWlhkTllYUnlhWGc3SWl3S0lDQWdJQ0FnSUNBaWRXNXBabTl5YlNCdFlYUXpJRzV2Y20xaGJFMWhkSEpwZURzaUxBb2dJQ0FnSUNBZ0lDSjFibWxtYjNKdElIWmxZek1nWTJGdFpYSmhVRzl6YVhScGIyNDdJaXdLSUNBZ0lDQWdJQ0FpZFc1cFptOXliU0JpYjI5c0lHbHpUM0owYUc5bmNtRndhR2xqT3lJc0NpQWdJQ0FnSUNBZ0lpTnBabVJsWmlCVlUwVmZTVTVUVkVGT1EwbE9SeUlzQ2lBZ0lDQWdJQ0FnSWdsaGRIUnlhV0oxZEdVZ2JXRjBOQ0JwYm5OMFlXNWpaVTFoZEhKcGVEc2lMQW9nSUNBZ0lDQWdJQ0lqWlc1a2FXWWlMQW9nSUNBZ0lDQWdJQ0lqYVdaa1pXWWdWVk5GWDBsT1UxUkJUa05KVGtkZlEwOU1UMUlpTEFvZ0lDQWdJQ0FnSUNJSllYUjBjbWxpZFhSbElIWmxZek1nYVc1emRHRnVZMlZEYjJ4dmNqc2lMQW9nSUNBZ0lDQWdJQ0lqWlc1a2FXWWlMQW9nSUNBZ0lDQWdJQ0poZEhSeWFXSjFkR1VnZG1Wak15QndiM05wZEdsdmJqc2lMQW9nSUNBZ0lDQWdJQ0poZEhSeWFXSjFkR1VnZG1Wak15QnViM0p0WVd3N0lpd0tJQ0FnSUNBZ0lDQWlZWFIwY21saWRYUmxJSFpsWXpJZ2RYWTdJaXdLSUNBZ0lDQWdJQ0FpSTJsbVpHVm1JRlZUUlY5VlZqRWlMQW9nSUNBZ0lDQWdJQ0lKWVhSMGNtbGlkWFJsSUhabFl6SWdkWFl4T3lJc0NpQWdJQ0FnSUNBZ0lpTmxibVJwWmlJc0NpQWdJQ0FnSUNBZ0lpTnBabVJsWmlCVlUwVmZWVll5SWl3S0lDQWdJQ0FnSUNBaUNXRjBkSEpwWW5WMFpTQjJaV015SUhWMk1qc2lMQW9nSUNBZ0lDQWdJQ0lqWlc1a2FXWWlMQW9nSUNBZ0lDQWdJQ0lqYVdaa1pXWWdWVk5GWDFWV015SXNDaUFnSUNBZ0lDQWdJZ2xoZEhSeWFXSjFkR1VnZG1Wak1pQjFkak03SWl3S0lDQWdJQ0FnSUNBaUkyVnVaR2xtSWl3S0lDQWdJQ0FnSUNBaUkybG1aR1ZtSUZWVFJWOVVRVTVIUlU1VUlpd0tJQ0FnSUNBZ0lDQWlDV0YwZEhKcFluVjBaU0IyWldNMElIUmhibWRsYm5RN0lpd0tJQ0FnSUNBZ0lDQWlJMlZ1WkdsbUlpd0tJQ0FnSUNBZ0lDQWlJMmxtSUdSbFptbHVaV1FvSUZWVFJWOURUMHhQVWw5QlRGQklRU0FwSWl3S0lDQWdJQ0FnSUNBaUNXRjBkSEpwWW5WMFpTQjJaV00wSUdOdmJHOXlPeUlzQ2lBZ0lDQWdJQ0FnSWlObGJHbG1JR1JsWm1sdVpXUW9JRlZUUlY5RFQweFBVaUFwSWl3S0lDQWdJQ0FnSUNBaUNXRjBkSEpwWW5WMFpTQjJaV016SUdOdmJHOXlPeUlzQ2lBZ0lDQWdJQ0FnSWlObGJtUnBaaUlzQ2lBZ0lDQWdJQ0FnSWlOcFppQW9JR1JsWm1sdVpXUW9JRlZUUlY5TlQxSlFTRlJCVWtkRlZGTWdLU0FtSmlBaElHUmxabWx1WldRb0lFMVBVbEJJVkVGU1IwVlVVMTlVUlZoVVZWSkZJQ2tnS1NJc0NpQWdJQ0FnSUNBZ0lnbGhkSFJ5YVdKMWRHVWdkbVZqTXlCdGIzSndhRlJoY21kbGREQTdJaXdLSUNBZ0lDQWdJQ0FpQ1dGMGRISnBZblYwWlNCMlpXTXpJRzF2Y25Cb1ZHRnlaMlYwTVRzaUxBb2dJQ0FnSUNBZ0lDSUpZWFIwY21saWRYUmxJSFpsWXpNZ2JXOXljR2hVWVhKblpYUXlPeUlzQ2lBZ0lDQWdJQ0FnSWdsaGRIUnlhV0oxZEdVZ2RtVmpNeUJ0YjNKd2FGUmhjbWRsZERNN0lpd0tJQ0FnSUNBZ0lDQWlDU05wWm1SbFppQlZVMFZmVFU5U1VFaE9UMUpOUVV4VElpd0tJQ0FnSUNBZ0lDQWlDUWxoZEhSeWFXSjFkR1VnZG1Wak15QnRiM0p3YUU1dmNtMWhiREE3SWl3S0lDQWdJQ0FnSUNBaUNRbGhkSFJ5YVdKMWRHVWdkbVZqTXlCdGIzSndhRTV2Y20xaGJERTdJaXdLSUNBZ0lDQWdJQ0FpQ1FsaGRIUnlhV0oxZEdVZ2RtVmpNeUJ0YjNKd2FFNXZjbTFoYkRJN0lpd0tJQ0FnSUNBZ0lDQWlDUWxoZEhSeWFXSjFkR1VnZG1Wak15QnRiM0p3YUU1dmNtMWhiRE03SWl3S0lDQWdJQ0FnSUNBaUNTTmxiSE5sSWl3S0lDQWdJQ0FnSUNBaUNRbGhkSFJ5YVdKMWRHVWdkbVZqTXlCdGIzSndhRlJoY21kbGREUTdJaXdLSUNBZ0lDQWdJQ0FpQ1FsaGRIUnlhV0oxZEdVZ2RtVmpNeUJ0YjNKd2FGUmhjbWRsZERVN0lpd0tJQ0FnSUNBZ0lDQWlDUWxoZEhSeWFXSjFkR1VnZG1Wak15QnRiM0p3YUZSaGNtZGxkRFk3SWl3S0lDQWdJQ0FnSUNBaUNRbGhkSFJ5YVdKMWRHVWdkbVZqTXlCdGIzSndhRlJoY21kbGREYzdJaXdLSUNBZ0lDQWdJQ0FpQ1NObGJtUnBaaUlzQ2lBZ0lDQWdJQ0FnSWlObGJtUnBaaUlzQ2lBZ0lDQWdJQ0FnSWlOcFptUmxaaUJWVTBWZlUwdEpUazVKVGtjaUxBb2dJQ0FnSUNBZ0lDSUpZWFIwY21saWRYUmxJSFpsWXpRZ2MydHBia2x1WkdWNE95SXNDaUFnSUNBZ0lDQWdJZ2xoZEhSeWFXSjFkR1VnZG1Wak5DQnphMmx1VjJWcFoyaDBPeUlzQ2lBZ0lDQWdJQ0FnSWlObGJtUnBaaUlzQ2lBZ0lDQWdJQ0FnWUFwZ0NpQWdJQ0JkTG1acGJIUmxjaWgyY3lrdWFtOXBiaWhnQ21BcExDQndJRDBnV3dvZ0lDQWdJQ0FnSUdZc0NpQWdJQ0FnSUNBZ1FXZ29kQ2tzQ2lBZ0lDQWdJQ0FnSWlOa1pXWnBibVVnVTBoQlJFVlNYMVJaVUVVZ0lpQXJJSFF1YzJoaFpHVnlWSGx3WlN3S0lDQWdJQ0FnSUNBaUkyUmxabWx1WlNCVFNFRkVSVkpmVGtGTlJTQWlJQ3NnZEM1emFHRmtaWEpPWVcxbExBb2dJQ0FnSUNBZ0lHMHNDaUFnSUNBZ0lDQWdkQzUxYzJWR2IyY2dKaVlnZEM1bWIyY2dQeUFpSTJSbFptbHVaU0JWVTBWZlJrOUhJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVkWE5sUm05bklDWW1JSFF1Wm05blJYaHdNaUEvSUNJalpHVm1hVzVsSUVaUFIxOUZXRkF5SWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YldGd0lEOGdJaU5rWldacGJtVWdWVk5GWDAxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtMWhkR05oY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlOUVZSRFFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWxiblpOWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmUlU1V1RVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVaVzUyVFdGd0lEOGdJaU5rWldacGJtVWdJaUFySUd3Z09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG1WdWRrMWhjQ0EvSUNJalpHVm1hVzVsSUNJZ0t5Qm9JRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWxiblpOWVhBZ1B5QWlJMlJsWm1sdVpTQWlJQ3NnZFNBNklDSWlMQW9nSUNBZ0lDQWdJR1FnUHlBaUkyUmxabWx1WlNCRFZVSkZWVlpmVkVWWVJVeGZWMGxFVkVnZ0lpQXJJR1F1ZEdWNFpXeFhhV1IwYUNBNklDSWlMQW9nSUNBZ0lDQWdJR1FnUHlBaUkyUmxabWx1WlNCRFZVSkZWVlpmVkVWWVJVeGZTRVZKUjBoVUlDSWdLeUJrTG5SbGVHVnNTR1ZwWjJoMElEb2dJaUlzQ2lBZ0lDQWdJQ0FnWkNBL0lDSWpaR1ZtYVc1bElFTlZRa1ZWVmw5TlFWaGZUVWxRSUNJZ0t5QmtMbTFoZUUxcGNDQXJJQ0l1TUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG14cFoyaDBUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMHhKUjBoVVRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVZVzlOWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmUVU5TlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWlkVzF3VFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDBKVlRWQk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV1YjNKdFlXeE5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZUazlTVFVGTVRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVibTl5YldGc1RXRndUMkpxWldOMFUzQmhZMlVnUHlBaUkyUmxabWx1WlNCVlUwVmZUazlTVFVGTVRVRlFYMDlDU2tWRFZGTlFRVU5GSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Ym05eWJXRnNUV0Z3VkdGdVoyVnVkRk53WVdObElEOGdJaU5rWldacGJtVWdWVk5GWDA1UFVrMUJURTFCVUY5VVFVNUhSVTVVVTFCQlEwVWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWxiV2x6YzJsMlpVMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOUZUVWxUVTBsV1JVMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbUZ1YVhOdmRISnZjSGtnUHlBaUkyUmxabWx1WlNCVlUwVmZRVTVKVTA5VVVrOVFXU0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbUZ1YVhOdmRISnZjSGxOWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmUVU1SlUwOVVVazlRV1UxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtTnNaV0Z5WTI5aGRDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5RFRFVkJVa05QUVZRaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1amJHVmhjbU52WVhSTllYQWdQeUFpSTJSbFptbHVaU0JWVTBWZlEweEZRVkpEVDBGVVRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYME5NUlVGU1EwOUJWRjlTVDFWSFNFNUZVMU5OUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1amJHVmhjbU52WVhST2IzSnRZV3hOWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmUTB4RlFWSkRUMEZVWDA1UFVrMUJURTFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG1seWFXUmxjMk5sYm1ObElEOGdJaU5rWldacGJtVWdWVk5GWDBsU1NVUkZVME5GVGtORklpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWFYSnBaR1Z6WTJWdVkyVk5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZTVkpKUkVWVFEwVk9RMFZOUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1cGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMwMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOUpVa2xFUlZORFJVNURSVjlVU0VsRFMwNUZVMU5OUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1emNHVmpkV3hoY2sxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5VFVFVkRWVXhCVWsxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuTndaV04xYkdGeVEyOXNiM0pOWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVTFCRlExVk1RVkpmUTA5TVQxSk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlUVUVWRFZVeEJVbDlKVGxSRlRsTkpWRmxOUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1eWIzVm5hRzVsYzNOTllYQWdQeUFpSTJSbFptbHVaU0JWVTBWZlVrOVZSMGhPUlZOVFRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXViV1YwWVd4dVpYTnpUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMDFGVkVGTVRrVlRVMDFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG1Gc2NHaGhUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMEZNVUVoQlRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVZV3h3YUdGVVpYTjBJRDhnSWlOa1pXWnBibVVnVlZORlgwRk1VRWhCVkVWVFZDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtRnNjR2hoU0dGemFDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5QlRGQklRVWhCVTBnaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1emFHVmxiaUEvSUNJalpHVm1hVzVsSUZWVFJWOVRTRVZGVGlJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5Ob1pXVnVRMjlzYjNKTllYQWdQeUFpSTJSbFptbHVaU0JWVTBWZlUwaEZSVTVmUTA5TVQxSk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV6YUdWbGJsSnZkV2RvYm1WemMwMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOVRTRVZGVGw5U1QxVkhTRTVGVTFOTlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNTBjbUZ1YzIxcGMzTnBiMjRnUHlBaUkyUmxabWx1WlNCVlUwVmZWRkpCVGxOTlNWTlRTVTlPSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1ZEhKaGJuTnRhWE56YVc5dVRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgxUlNRVTVUVFVsVFUwbFBUazFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5Sb2FXTnJibVZ6YzAxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5VVNFbERTMDVGVTFOTlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNTJaWEowWlhoVVlXNW5aVzUwY3lBbUppQjBMbVpzWVhSVGFHRmthVzVuSUQwOVBTQWhNU0EvSUNJalpHVm1hVzVsSUZWVFJWOVVRVTVIUlU1VUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWRtVnlkR1Y0UTI5c2IzSnpJSHg4SUhRdWFXNXpkR0Z1WTJsdVowTnZiRzl5SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYME5QVEU5U0lpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWRtVnlkR1Y0UVd4d2FHRnpJRDhnSWlOa1pXWnBibVVnVlZORlgwTlBURTlTWDBGTVVFaEJJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVkbVZ5ZEdWNFZYWXhjeUEvSUNJalpHVm1hVzVsSUZWVFJWOVZWakVpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzUyWlhKMFpYaFZkakp6SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMVZXTWlJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5abGNuUmxlRlYyTTNNZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVlZZeklpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWNHOXBiblJ6VlhaeklEOGdJaU5rWldacGJtVWdWVk5GWDFCUFNVNVVVMTlWVmlJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG1keVlXUnBaVzUwVFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDBkU1FVUkpSVTVVVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVpteGhkRk5vWVdScGJtY2dQeUFpSTJSbFptbHVaU0JHVEVGVVgxTklRVVJGUkNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG1SdmRXSnNaVk5wWkdWa0lEOGdJaU5rWldacGJtVWdSRTlWUWt4RlgxTkpSRVZFSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Wm14cGNGTnBaR1ZrSUQ4Z0lpTmtaV1pwYm1VZ1JreEpVRjlUU1VSRlJDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuTm9ZV1J2ZDAxaGNFVnVZV0pzWldRZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVTBoQlJFOVhUVUZRSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YzJoaFpHOTNUV0Z3Ulc1aFlteGxaQ0EvSUNJalpHVm1hVzVsSUNJZ0t5QmpJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXdjbVZ0ZFd4MGFYQnNhV1ZrUVd4d2FHRWdQeUFpSTJSbFptbHVaU0JRVWtWTlZVeFVTVkJNU1VWRVgwRk1VRWhCSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Ym5WdFRHbG5hSFJRY205aVpYTWdQaUF3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMHhKUjBoVVgxQlNUMEpGVXlJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5WelpVeGxaMkZqZVV4cFoyaDBjeUEvSUNJalpHVm1hVzVsSUV4RlIwRkRXVjlNU1VkSVZGTWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWtaV052WkdWV2FXUmxiMVJsZUhSMWNtVWdQeUFpSTJSbFptbHVaU0JFUlVOUFJFVmZWa2xFUlU5ZlZFVllWRlZTUlNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG14dloyRnlhWFJvYldsalJHVndkR2hDZFdabVpYSWdQeUFpSTJSbFptbHVaU0JWVTBWZlRFOUhSRVZRVkVoQ1ZVWWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXNiMmRoY21sMGFHMXBZMFJsY0hSb1FuVm1abVZ5SUNZbUlIUXVjbVZ1WkdWeVpYSkZlSFJsYm5OcGIyNUdjbUZuUkdWd2RHZ2dQeUFpSTJSbFptbHVaU0JWVTBWZlRFOUhSRVZRVkVoQ1ZVWmZSVmhVSWlBNklDSWlMQW9nSUNBZ0lDQWdJQ0oxYm1sbWIzSnRJRzFoZERRZ2RtbGxkMDFoZEhKcGVEc2lMQW9nSUNBZ0lDQWdJQ0oxYm1sbWIzSnRJSFpsWXpNZ1kyRnRaWEpoVUc5emFYUnBiMjQ3SWl3S0lDQWdJQ0FnSUNBaWRXNXBabTl5YlNCaWIyOXNJR2x6VDNKMGFHOW5jbUZ3YUdsak95SXNDaUFnSUNBZ0lDQWdkQzUwYjI1bFRXRndjR2x1WnlBaFBUMGdUbTRnUHlBaUkyUmxabWx1WlNCVVQwNUZYMDFCVUZCSlRrY2lJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNTBiMjVsVFdGd2NHbHVaeUFoUFQwZ1RtNGdQeUJyWlM1MGIyNWxiV0Z3Y0dsdVoxOXdZWEp6WDJaeVlXZHRaVzUwSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzUwYjI1bFRXRndjR2x1WnlBaFBUMGdUbTRnUHlCc01DZ2lkRzl1WlUxaGNIQnBibWNpTENCMExuUnZibVZOWVhCd2FXNW5LU0E2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVaR2wwYUdWeWFXNW5JRDhnSWlOa1pXWnBibVVnUkVsVVNFVlNTVTVISWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YjNCaGNYVmxJRDhnSWlOa1pXWnBibVVnVDFCQlVWVkZJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lHdGxMbU52Ykc5eWMzQmhZMlZmY0dGeWMxOW1jbUZuYldWdWRDd0tJQ0FnSUNBZ0lDQmpNQ2dpYkdsdVpXRnlWRzlQZFhSd2RYUlVaWGhsYkNJc0lIUXViM1YwY0hWMFEyOXNiM0pUY0dGalpTa3NDaUFnSUNBZ0lDQWdkQzUxYzJWRVpYQjBhRkJoWTJ0cGJtY2dQeUFpSTJSbFptbHVaU0JFUlZCVVNGOVFRVU5MU1U1SElDSWdLeUIwTG1SbGNIUm9VR0ZqYTJsdVp5QTZJQ0lpTEFvZ0lDQWdJQ0FnSUdBS1lBb2dJQ0FnWFM1bWFXeDBaWElvZG5NcExtcHZhVzRvWUFwZ0tTa3NJR0VnUFNCVGJ5aGhLU3dnWVNBOUlFVm9LR0VzSUhRcExDQmhJRDBnVkdnb1lTd2dkQ2tzSUc4Z1BTQlRieWh2S1N3Z2J5QTlJRVZvS0c4c0lIUXBMQ0J2SUQwZ1ZHZ29ieXdnZENrc0lHRWdQU0IzYUNoaEtTd2dieUE5SUhkb0tHOHBMQ0IwTG1selYyVmlSMHd5SUNZbUlIUXVhWE5TWVhkVGFHRmtaWEpOWVhSbGNtbGhiQ0FoUFQwZ0lUQWdKaVlnS0hZZ1BTQmdJM1psY25OcGIyNGdNekF3SUdWekNtQXNJR2NnUFNCYkNpQWdJQ0FnSUNBZ0luQnlaV05wYzJsdmJpQnRaV1JwZFcxd0lITmhiWEJzWlhJeVJFRnljbUY1T3lJc0NpQWdJQ0FnSUNBZ0lpTmtaV1pwYm1VZ1lYUjBjbWxpZFhSbElHbHVJaXdLSUNBZ0lDQWdJQ0FpSTJSbFptbHVaU0IyWVhKNWFXNW5JRzkxZENJc0NpQWdJQ0FnSUNBZ0lpTmtaV1pwYm1VZ2RHVjRkSFZ5WlRKRUlIUmxlSFIxY21VaUNpQWdJQ0JkTG1wdmFXNG9ZQXBnS1NBcklHQUtZQ0FySUdjc0lIQWdQU0JiQ2lBZ0lDQWdJQ0FnSWlOa1pXWnBibVVnZG1GeWVXbHVaeUJwYmlJc0NpQWdJQ0FnSUNBZ2RDNW5iSE5zVm1WeWMybHZiaUE5UFQwZ1Qyd2dQeUFpSWlBNklDSnNZWGx2ZFhRb2JHOWpZWFJwYjI0Z1BTQXdLU0J2ZFhRZ2FHbG5hSEFnZG1Wak5DQndZMTltY21GblEyOXNiM0k3SWl3S0lDQWdJQ0FnSUNCMExtZHNjMnhXWlhKemFXOXVJRDA5UFNCUGJDQS9JQ0lpSURvZ0lpTmtaV1pwYm1VZ1oyeGZSbkpoWjBOdmJHOXlJSEJqWDJaeVlXZERiMnh2Y2lJc0NpQWdJQ0FnSUNBZ0lpTmtaV1pwYm1VZ1oyeGZSbkpoWjBSbGNIUm9SVmhVSUdkc1gwWnlZV2RFWlhCMGFDSXNDaUFnSUNBZ0lDQWdJaU5rWldacGJtVWdkR1Y0ZEhWeVpUSkVJSFJsZUhSMWNtVWlMQW9nSUNBZ0lDQWdJQ0lqWkdWbWFXNWxJSFJsZUhSMWNtVkRkV0psSUhSbGVIUjFjbVVpTEFvZ0lDQWdJQ0FnSUNJalpHVm1hVzVsSUhSbGVIUjFjbVV5UkZCeWIyb2dkR1Y0ZEhWeVpWQnliMm9pTEFvZ0lDQWdJQ0FnSUNJalpHVm1hVzVsSUhSbGVIUjFjbVV5UkV4dlpFVllWQ0IwWlhoMGRYSmxURzlrSWl3S0lDQWdJQ0FnSUNBaUkyUmxabWx1WlNCMFpYaDBkWEpsTWtSUWNtOXFURzlrUlZoVUlIUmxlSFIxY21WUWNtOXFURzlrSWl3S0lDQWdJQ0FnSUNBaUkyUmxabWx1WlNCMFpYaDBkWEpsUTNWaVpVeHZaRVZZVkNCMFpYaDBkWEpsVEc5a0lpd0tJQ0FnSUNBZ0lDQWlJMlJsWm1sdVpTQjBaWGgwZFhKbE1rUkhjbUZrUlZoVUlIUmxlSFIxY21WSGNtRmtJaXdLSUNBZ0lDQWdJQ0FpSTJSbFptbHVaU0IwWlhoMGRYSmxNa1JRY205cVIzSmhaRVZZVkNCMFpYaDBkWEpsVUhKdmFrZHlZV1FpTEFvZ0lDQWdJQ0FnSUNJalpHVm1hVzVsSUhSbGVIUjFjbVZEZFdKbFIzSmhaRVZZVkNCMFpYaDBkWEpsUjNKaFpDSUtJQ0FnSUYwdWFtOXBiaWhnQ21BcElDc2dZQXBnSUNzZ2NDazdDaUFnSUNCc1pYUWdlQ0E5SUhZZ0t5Qm5JQ3NnWVN3Z2VTQTlJSFlnS3lCd0lDc2dieXdnWWlBOUlGTm9LR2tzSUdrdVZrVlNWRVZZWDFOSVFVUkZVaXdnZUNrc0lIY2dQU0JUYUNocExDQnBMa1pTUVVkTlJVNVVYMU5JUVVSRlVpd2dlU2s3Q2lBZ0lDQnBaaUFvYVM1aGRIUmhZMmhUYUdGa1pYSW9YeXdnWWlrc0lHa3VZWFIwWVdOb1UyaGhaR1Z5S0Y4c0lIY3BMQ0IwTG1sdVpHVjRNRUYwZEhKcFluVjBaVTVoYldVZ0lUMDlJSFp2YVdRZ01DQS9JR2t1WW1sdVpFRjBkSEpwWWt4dlkyRjBhVzl1S0Y4c0lEQXNJSFF1YVc1a1pYZ3dRWFIwY21saWRYUmxUbUZ0WlNrZ09pQjBMbTF2Y25Cb1ZHRnlaMlYwY3lBOVBUMGdJVEFnSmlZZ2FTNWlhVzVrUVhSMGNtbGlURzlqWVhScGIyNG9YeXdnTUN3Z0luQnZjMmwwYVc5dUlpa3NJR2t1YkdsdWExQnliMmR5WVcwb1h5a3NJSE14TG1SbFluVm5MbU5vWldOclUyaGhaR1Z5UlhKeWIzSnpLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElFMGdQU0JwTG1kbGRGQnliMmR5WVcxSmJtWnZURzluS0Y4cExuUnlhVzBvS1N3Z1ZDQTlJR2t1WjJWMFUyaGhaR1Z5U1c1bWIweHZaeWhpS1M1MGNtbHRLQ2tzSUU4Z1BTQnBMbWRsZEZOb1lXUmxja2x1Wm05TWIyY29keWt1ZEhKcGJTZ3BMQ0JaSUQwZ0lUQXNJQ1FnUFNBaE1Ec0tJQ0FnSUNBZ0lDQnBaaUFvYVM1blpYUlFjbTluY21GdFVHRnlZVzFsZEdWeUtGOHNJR2t1VEVsT1MxOVRWRUZVVlZNcElEMDlQU0FoTVNrZ2FXWWdLRmtnUFNBaE1Td2dkSGx3Wlc5bUlITXhMbVJsWW5WbkxtOXVVMmhoWkdWeVJYSnliM0lnUFQwZ0ltWjFibU4wYVc5dUlpa2djekV1WkdWaWRXY3ViMjVUYUdGa1pYSkZjbkp2Y2locExDQmZMQ0JpTENCM0tUc0tJQ0FnSUNBZ0lDQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZVZ1BTQmlhQ2hwTENCaUxDQWlkbVZ5ZEdWNElpa3NJSG9nUFNCaWFDaHBMQ0IzTENBaVpuSmhaMjFsYm5RaUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVYyVmlSMHhRY205bmNtRnRPaUJUYUdGa1pYSWdSWEp5YjNJZ0lpQXJJR2t1WjJWMFJYSnliM0lvS1NBcklDSWdMU0JXUVV4SlJFRlVSVjlUVkVGVVZWTWdJaUFySUdrdVoyVjBVSEp2WjNKaGJWQmhjbUZ0WlhSbGNpaGZMQ0JwTGxaQlRFbEVRVlJGWDFOVVFWUlZVeWtnS3lCZ0NncFFjbTluY21GdElFbHVabThnVEc5bk9pQmdJQ3NnVFNBcklHQUtZQ0FySUZVZ0t5QmdDbUFnS3lCNktUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdaV3h6WlNCTklDRTlQU0FpSWlBL0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4UWNtOW5jbUZ0T2lCUWNtOW5jbUZ0SUVsdVptOGdURzluT2lJc0lFMHBJRG9nS0ZRZ1BUMDlJQ0lpSUh4OElFOGdQVDA5SUNJaUtTQW1KaUFvSkNBOUlDRXhLVHNLSUNBZ0lDQWdJQ0FrSUNZbUlDaDBhR2x6TG1ScFlXZHViM04wYVdOeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCeWRXNXVZV0pzWlRvZ1dTd0tJQ0FnSUNBZ0lDQWdJQ0FnY0hKdlozSmhiVXh2WnpvZ1RTd0tJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWRHVjRVMmhoWkdWeU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNiMmM2SUZRc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtVm1hWGc2SUdjS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4dlp6b2dUeXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WldacGVEb2djQW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNCOUNpQWdJQ0JwTG1SbGJHVjBaVk5vWVdSbGNpaGlLU3dnYVM1a1pXeGxkR1ZUYUdGa1pYSW9keWs3Q2lBZ0lDQnNaWFFnVWpzS0lDQWdJSFJvYVhNdVoyVjBWVzVwWm05eWJYTWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVWlBOVBUMGdkbTlwWkNBd0lDWW1JQ2hTSUQwZ2JtVjNJSEZwS0drc0lGOHBLU3dnVWpzS0lDQWdJSDA3Q2lBZ0lDQnNaWFFnU1RzS0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRFRjBkSEpwWW5WMFpYTWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnU1NBOVBUMGdkbTlwWkNBd0lDWW1JQ2hKSUQwZ1pEQW9hU3dnWHlrcExDQkpPd29nSUNBZ2ZTd2dkR2hwY3k1a1pYTjBjbTk1SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdiaTV5Wld4bFlYTmxVM1JoZEdWelQyWlFjbTluY21GdEtIUm9hWE1wTENCcExtUmxiR1YwWlZCeWIyZHlZVzBvWHlrc0lIUm9hWE11Y0hKdlozSmhiU0E5SUhadmFXUWdNRHNLSUNBZ0lIMHNJSFJvYVhNdWRIbHdaU0E5SUhRdWMyaGhaR1Z5Vkhsd1pTd2dkR2hwY3k1dVlXMWxJRDBnZEM1emFHRmtaWEpPWVcxbExDQjBhR2x6TG1sa0lEMGdjakFyS3l3Z2RHaHBjeTVqWVdOb1pVdGxlU0E5SUdVc0lIUm9hWE11ZFhObFpGUnBiV1Z6SUQwZ01Td2dkR2hwY3k1d2NtOW5jbUZ0SUQwZ1h5d2dkR2hwY3k1MlpYSjBaWGhUYUdGa1pYSWdQU0JpTENCMGFHbHpMbVp5WVdkdFpXNTBVMmhoWkdWeUlEMGdkeXdnZEdocGN6c0tmUXAyWVhJZ1JUQWdQU0F3TENCaWJ5QTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdDaUFnSUNBZ0lDQWdkR2hwY3k1emFHRmtaWEpEWVdOb1pTQTlJRzVsZHlCTllYQXNJSFJvYVhNdWJXRjBaWEpwWVd4RFlXTm9aU0E5SUc1bGR5Qk5ZWEE3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTNTJaWEowWlhoVGFHRmtaWElzSUc0Z1BTQmxMbVp5WVdkdFpXNTBVMmhoWkdWeUxDQnBJRDBnZEdocGN5NWZaMlYwVTJoaFpHVnlVM1JoWjJVb2RDa3NJSElnUFNCMGFHbHpMbDluWlhSVGFHRmtaWEpUZEdGblpTaHVLU3dnWVNBOUlIUm9hWE11WDJkbGRGTm9ZV1JsY2tOaFkyaGxSbTl5VFdGMFpYSnBZV3dvWlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdFdWFHRnpLR2twSUQwOVBTQWhNU0FtSmlBb1lTNWhaR1FvYVNrc0lHa3VkWE5sWkZScGJXVnpLeXNwTENCaExtaGhjeWh5S1NBOVBUMGdJVEVnSmlZZ0tHRXVZV1JrS0hJcExDQnlMblZ6WldSVWFXMWxjeXNyS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhKbGJXOTJaU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbTFoZEdWeWFXRnNRMkZqYUdVdVoyVjBLR1VwT3dvZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUc0Z2IyWWdkQ2x1TG5WelpXUlVhVzFsY3kwdExDQnVMblZ6WldSVWFXMWxjeUE5UFQwZ01DQW1KaUIwYUdsekxuTm9ZV1JsY2tOaFkyaGxMbVJsYkdWMFpTaHVMbU52WkdVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTFoZEdWeWFXRnNRMkZqYUdVdVpHVnNaWFJsS0dVcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1oyVjBWbVZ5ZEdWNFUyaGhaR1Z5U1VRb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5blpYUlRhR0ZrWlhKVGRHRm5aU2hsTG5abGNuUmxlRk5vWVdSbGNpa3VhV1E3Q2lBZ0lDQjlDaUFnSUNCblpYUkdjbUZuYldWdWRGTm9ZV1JsY2tsRUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZloyVjBVMmhoWkdWeVUzUmhaMlVvWlM1bWNtRm5iV1Z1ZEZOb1lXUmxjaWt1YVdRN0NpQWdJQ0I5Q2lBZ0lDQmthWE53YjNObEtDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWMyaGhaR1Z5UTJGamFHVXVZMnhsWVhJb0tTd2dkR2hwY3k1dFlYUmxjbWxoYkVOaFkyaGxMbU5zWldGeUtDazdDaUFnSUNCOUNpQWdJQ0JmWjJWMFUyaGhaR1Z5UTJGamFHVkdiM0pOWVhSbGNtbGhiQ2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbTFoZEdWeWFXRnNRMkZqYUdVc0lHNGdQU0IwTG1kbGRDaGxLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaUE5UFQwZ2RtOXBaQ0F3SUNZbUlDaHVJRDBnYm1WM0lGTmxkQ3dnZEM1elpYUW9aU3dnYmlrcExDQnVPd29nSUNBZ2ZRb2dJQ0FnWDJkbGRGTm9ZV1JsY2xOMFlXZGxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVjMmhoWkdWeVEyRmphR1VzSUc0Z1BTQjBMbWRsZENobEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JpQTlQVDBnZG05cFpDQXdJQ1ltSUNodUlEMGdibVYzSUVWdktHVXBMQ0IwTG5ObGRDaGxMQ0J1S1Nrc0lHNDdDaUFnSUNCOUNuMHNJRVZ2SUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2RHaHBjeTVwWkNBOUlFVXdLeXNzSUhSb2FYTXVZMjlrWlNBOUlHVXNJSFJvYVhNdWRYTmxaRlJwYldWeklEMGdNRHNLSUNBZ0lIMEtmVHNLWm5WdVkzUnBiMjRnVkRBb2N6RXNJR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXBJSHNLSUNBZ0lHeGxkQ0J2SUQwZ2JtVjNJRkp6TENCaklEMGdibVYzSUdKdkxDQnNJRDBnVzEwc0lHZ2dQU0JwTG1selYyVmlSMHd5TENCMUlEMGdhUzVzYjJkaGNtbDBhRzFwWTBSbGNIUm9RblZtWm1WeUxDQmtJRDBnYVM1MlpYSjBaWGhVWlhoMGRYSmxjeXdnWmlBOUlHa3VjSEpsWTJsemFXOXVMQ0J0SUQwZ2V3b2dJQ0FnSUNBZ0lFMWxjMmhFWlhCMGFFMWhkR1Z5YVdGc09pQWlaR1Z3ZEdnaUxBb2dJQ0FnSUNBZ0lFMWxjMmhFYVhOMFlXNWpaVTFoZEdWeWFXRnNPaUFpWkdsemRHRnVZMlZTUjBKQklpd0tJQ0FnSUNBZ0lDQk5aWE5vVG05eWJXRnNUV0YwWlhKcFlXdzZJQ0p1YjNKdFlXd2lMQW9nSUNBZ0lDQWdJRTFsYzJoQ1lYTnBZMDFoZEdWeWFXRnNPaUFpWW1GemFXTWlMQW9nSUNBZ0lDQWdJRTFsYzJoTVlXMWlaWEowVFdGMFpYSnBZV3c2SUNKc1lXMWlaWEowSWl3S0lDQWdJQ0FnSUNCTlpYTm9VR2h2Ym1kTllYUmxjbWxoYkRvZ0luQm9iMjVuSWl3S0lDQWdJQ0FnSUNCTlpYTm9WRzl2YmsxaGRHVnlhV0ZzT2lBaWRHOXZiaUlzQ2lBZ0lDQWdJQ0FnVFdWemFGTjBZVzVrWVhKa1RXRjBaWEpwWVd3NklDSndhSGx6YVdOaGJDSXNDaUFnSUNBZ0lDQWdUV1Z6YUZCb2VYTnBZMkZzVFdGMFpYSnBZV3c2SUNKd2FIbHphV05oYkNJc0NpQWdJQ0FnSUNBZ1RXVnphRTFoZEdOaGNFMWhkR1Z5YVdGc09pQWliV0YwWTJGd0lpd0tJQ0FnSUNBZ0lDQk1hVzVsUW1GemFXTk5ZWFJsY21saGJEb2dJbUpoYzJsaklpd0tJQ0FnSUNBZ0lDQk1hVzVsUkdGemFHVmtUV0YwWlhKcFlXdzZJQ0prWVhOb1pXUWlMQW9nSUNBZ0lDQWdJRkJ2YVc1MGMwMWhkR1Z5YVdGc09pQWljRzlwYm5Seklpd0tJQ0FnSUNBZ0lDQlRhR0ZrYjNkTllYUmxjbWxoYkRvZ0luTm9ZV1J2ZHlJc0NpQWdJQ0FnSUNBZ1UzQnlhWFJsVFdGMFpYSnBZV3c2SUNKemNISnBkR1VpQ2lBZ0lDQjlPd29nSUNBZ1puVnVZM1JwYjI0Z1h5aE5LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRTBnUFQwOUlEQWdQeUFpZFhZaUlEb2dZSFYySkh0TmZXQTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJuS0Uwc0lGUXNJRThzSUZrc0lDUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1ZTQTlJRmt1Wm05bkxDQjZJRDBnSkM1blpXOXRaWFJ5ZVN3Z2NTQTlJRTB1YVhOTlpYTm9VM1JoYm1SaGNtUk5ZWFJsY21saGJDQS9JRmt1Wlc1MmFYSnZibTFsYm5RZ09pQnVkV3hzTENCSUlEMGdLRTB1YVhOTlpYTm9VM1JoYm1SaGNtUk5ZWFJsY21saGJDQS9JSFFnT2lCbEtTNW5aWFFvVFM1bGJuWk5ZWEFnZkh3Z2NTa3NJRzVsSUQwZ1NDQW1KaUJJTG0xaGNIQnBibWNnUFQwOUlGWnpJRDhnU0M1cGJXRm5aUzVvWldsbmFIUWdPaUJ1ZFd4c0xDQlhJRDBnYlZ0TkxuUjVjR1ZkT3dvZ0lDQWdJQ0FnSUUwdWNISmxZMmx6YVc5dUlDRTlQU0J1ZFd4c0lDWW1JQ2htSUQwZ2FTNW5aWFJOWVhoUWNtVmphWE5wYjI0b1RTNXdjbVZqYVhOcGIyNHBMQ0JtSUNFOVBTQk5MbkJ5WldOcGMybHZiaUFtSmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVUhKdlozSmhiUzVuWlhSUVlYSmhiV1YwWlhKek9pSXNJRTB1Y0hKbFkybHphVzl1TENBaWJtOTBJSE4xY0hCdmNuUmxaQ3dnZFhOcGJtY2lMQ0JtTENBaWFXNXpkR1ZoWkM0aUtTazdDaUFnSUNBZ0lDQWdiR1YwSUVzZ1BTQjZMbTF2Y25Cb1FYUjBjbWxpZFhSbGN5NXdiM05wZEdsdmJpQjhmQ0I2TG0xdmNuQm9RWFIwY21saWRYUmxjeTV1YjNKdFlXd2dmSHdnZWk1dGIzSndhRUYwZEhKcFluVjBaWE11WTI5c2IzSXNJRVFnUFNCTElDRTlQU0IyYjJsa0lEQWdQeUJMTG14bGJtZDBhQ0E2SURBc0lFY2dQU0F3T3dvZ0lDQWdJQ0FnSUhvdWJXOXljR2hCZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1SUNFOVBTQjJiMmxrSURBZ0ppWWdLRWNnUFNBeEtTd2dlaTV0YjNKd2FFRjBkSEpwWW5WMFpYTXVibTl5YldGc0lDRTlQU0IyYjJsa0lEQWdKaVlnS0VjZ1BTQXlLU3dnZWk1dGIzSndhRUYwZEhKcFluVjBaWE11WTI5c2IzSWdJVDA5SUhadmFXUWdNQ0FtSmlBb1J5QTlJRE1wT3dvZ0lDQWdJQ0FnSUd4bGRDQm9aU3dnWm1Vc0lGOWxMQ0IzWlRzS0lDQWdJQ0FnSUNCcFppQW9WeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZEhRZ1BTQnVibHRYWFRzS0lDQWdJQ0FnSUNBZ0lDQWdhR1VnUFNCMGRDNTJaWEowWlhoVGFHRmtaWElzSUdabElEMGdkSFF1Wm5KaFoyMWxiblJUYUdGa1pYSTdDaUFnSUNBZ0lDQWdmU0JsYkhObElHaGxJRDBnVFM1MlpYSjBaWGhUYUdGa1pYSXNJR1psSUQwZ1RTNW1jbUZuYldWdWRGTm9ZV1JsY2l3Z1l5NTFjR1JoZEdVb1RTa3NJRjlsSUQwZ1l5NW5aWFJXWlhKMFpYaFRhR0ZrWlhKSlJDaE5LU3dnZDJVZ1BTQmpMbWRsZEVaeVlXZHRaVzUwVTJoaFpHVnlTVVFvVFNrN0NpQWdJQ0FnSUNBZ2JHVjBJRVZsSUQwZ2N6RXVaMlYwVW1WdVpHVnlWR0Z5WjJWMEtDa3NJRlJsSUQwZ0pDNXBjMGx1YzNSaGJtTmxaRTFsYzJnZ1BUMDlJQ0V3TENCWlpTQTlJQ0VoVFM1dFlYQXNJR2wwSUQwZ0lTRk5MbTFoZEdOaGNDd2dRMlVnUFNBaElVZ3NJRXdnUFNBaElVMHVZVzlOWVhBc0lHOWxJRDBnSVNGTkxteHBaMmgwVFdGd0xDQllJRDBnSVNGTkxtSjFiWEJOWVhBc0lHbGxJRDBnSVNGTkxtNXZjbTFoYkUxaGNDd2dTaUE5SUNFaFRTNWthWE53YkdGalpXMWxiblJOWVhBc0lGTmxJRDBnSVNGTkxtVnRhWE56YVhabFRXRndMQ0J0WlNBOUlDRWhUUzV0WlhSaGJHNWxjM05OWVhBc0lIbGxJRDBnSVNGTkxuSnZkV2RvYm1WemMwMWhjQ3dnVG1VZ1BTQk5MbUZ1YVhOdmRISnZjSGtnUGlBd0xDQnhaU0E5SUUwdVkyeGxZWEpqYjJGMElENGdNQ3dnY25RZ1BTQk5MbWx5YVdSbGMyTmxibU5sSUQ0Z01Dd2dReUE5SUUwdWMyaGxaVzRnUGlBd0xDQlRJRDBnVFM1MGNtRnVjMjFwYzNOcGIyNGdQaUF3TENCQ0lEMGdUbVVnSmlZZ0lTRk5MbUZ1YVhOdmRISnZjSGxOWVhBc0lHVmxJRDBnY1dVZ0ppWWdJU0ZOTG1Oc1pXRnlZMjloZEUxaGNDd2dhaUE5SUhGbElDWW1JQ0VoVFM1amJHVmhjbU52WVhST2IzSnRZV3hOWVhBc0lIUmxJRDBnY1dVZ0ppWWdJU0ZOTG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6YzAxaGNDd2dUV1VnUFNCeWRDQW1KaUFoSVUwdWFYSnBaR1Z6WTJWdVkyVk5ZWEFzSUhKbElEMGdjblFnSmlZZ0lTRk5MbWx5YVdSbGMyTmxibU5sVkdocFkydHVaWE56VFdGd0xDQmtaU0E5SUVNZ0ppWWdJU0ZOTG5Ob1pXVnVRMjlzYjNKTllYQXNJRXhsSUQwZ1F5QW1KaUFoSVUwdWMyaGxaVzVTYjNWbmFHNWxjM05OWVhBc0lGcGxJRDBnSVNGTkxuTndaV04xYkdGeVRXRndMQ0J6WlNBOUlDRWhUUzV6Y0dWamRXeGhja052Ykc5eVRXRndMQ0FrWlNBOUlDRWhUUzV6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0N3Z1QyVWdQU0JUSUNZbUlDRWhUUzUwY21GdWMyMXBjM05wYjI1TllYQXNJRWxsSUQwZ1V5QW1KaUFoSVUwdWRHaHBZMnR1WlhOelRXRndMQ0JTWlNBOUlDRWhUUzVuY21Ga2FXVnVkRTFoY0N3Z1VDQTlJQ0VoVFM1aGJIQm9ZVTFoY0N3Z1kyVWdQU0JOTG1Gc2NHaGhWR1Z6ZENBK0lEQXNJR0ZsSUQwZ0lTRk5MbUZzY0doaFNHRnphQ3dnWjJVZ1BTQWhJVTB1WlhoMFpXNXphVzl1Y3l3Z2RXVWdQU0FoSVhvdVlYUjBjbWxpZFhSbGN5NTFkakVzSUZFZ1BTQWhJWG91WVhSMGNtbGlkWFJsY3k1MWRqSXNJR0psSUQwZ0lTRjZMbUYwZEhKcFluVjBaWE11ZFhZekxDQkdaU0E5SUU1dU93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCTkxuUnZibVZOWVhCd1pXUWdKaVlnS0VWbElEMDlQU0J1ZFd4c0lIeDhJRVZsTG1seldGSlNaVzVrWlhKVVlYSm5aWFFnUFQwOUlDRXdLU0FtSmlBb1JtVWdQU0J6TVM1MGIyNWxUV0Z3Y0dsdVp5a3NJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FYTlhaV0pIVERJNklHZ3NDaUFnSUNBZ0lDQWdJQ0FnSUhOb1lXUmxja2xFT2lCWExBb2dJQ0FnSUNBZ0lDQWdJQ0J6YUdGa1pYSlVlWEJsT2lCTkxuUjVjR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1JsY2s1aGJXVTZJRTB1Ym1GdFpTd0tJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWRHVjRVMmhoWkdWeU9pQm9aU3dLSUNBZ0lDQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUdabExBb2dJQ0FnSUNBZ0lDQWdJQ0JrWldacGJtVnpPaUJOTG1SbFptbHVaWE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lHTjFjM1J2YlZabGNuUmxlRk5vWVdSbGNrbEVPaUJmWlN3S0lDQWdJQ0FnSUNBZ0lDQWdZM1Z6ZEc5dFJuSmhaMjFsYm5SVGFHRmtaWEpKUkRvZ2QyVXNDaUFnSUNBZ0lDQWdJQ0FnSUdselVtRjNVMmhoWkdWeVRXRjBaWEpwWVd3NklFMHVhWE5TWVhkVGFHRmtaWEpOWVhSbGNtbGhiQ0E5UFQwZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUdkc2MyeFdaWEp6YVc5dU9pQk5MbWRzYzJ4V1pYSnphVzl1TEFvZ0lDQWdJQ0FnSUNBZ0lDQndjbVZqYVhOcGIyNDZJR1lzQ2lBZ0lDQWdJQ0FnSUNBZ0lHbHVjM1JoYm1OcGJtYzZJRlJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQnBibk4wWVc1amFXNW5RMjlzYjNJNklGUmxJQ1ltSUNRdWFXNXpkR0Z1WTJWRGIyeHZjaUFoUFQwZ2JuVnNiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2MzVndjRzl5ZEhOV1pYSjBaWGhVWlhoMGRYSmxjem9nWkN3S0lDQWdJQ0FnSUNBZ0lDQWdiM1YwY0hWMFEyOXNiM0pUY0dGalpUb2dSV1VnUFQwOUlHNTFiR3dnUHlCek1TNXZkWFJ3ZFhSRGIyeHZjbE53WVdObElEb2dSV1V1YVhOWVVsSmxibVJsY2xSaGNtZGxkQ0E5UFQwZ0lUQWdQeUJGWlM1MFpYaDBkWEpsTG1OdmJHOXlVM0JoWTJVZ09pQk5iaXdLSUNBZ0lDQWdJQ0FnSUNBZ2JXRndPaUJaWlN3S0lDQWdJQ0FnSUNBZ0lDQWdiV0YwWTJGd09pQnBkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1pXNTJUV0Z3T2lCRFpTd0tJQ0FnSUNBZ0lDQWdJQ0FnWlc1MlRXRndUVzlrWlRvZ1EyVWdKaVlnU0M1dFlYQndhVzVuTEFvZ0lDQWdJQ0FnSUNBZ0lDQmxiblpOWVhCRGRXSmxWVlpJWldsbmFIUTZJRzVsTEFvZ0lDQWdJQ0FnSUNBZ0lDQmhiMDFoY0RvZ1RDd0tJQ0FnSUNBZ0lDQWdJQ0FnYkdsbmFIUk5ZWEE2SUc5bExBb2dJQ0FnSUNBZ0lDQWdJQ0JpZFcxd1RXRndPaUJZTEFvZ0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd4TllYQTZJR2xsTEFvZ0lDQWdJQ0FnSUNBZ0lDQmthWE53YkdGalpXMWxiblJOWVhBNklHUWdKaVlnU2l3S0lDQWdJQ0FnSUNBZ0lDQWdaVzFwYzNOcGRtVk5ZWEE2SUZObExBb2dJQ0FnSUNBZ0lDQWdJQ0J1YjNKdFlXeE5ZWEJQWW1wbFkzUlRjR0ZqWlRvZ2FXVWdKaVlnVFM1dWIzSnRZV3hOWVhCVWVYQmxJRDA5UFNCTVppd0tJQ0FnSUNBZ0lDQWdJQ0FnYm05eWJXRnNUV0Z3VkdGdVoyVnVkRk53WVdObE9pQnBaU0FtSmlCTkxtNXZjbTFoYkUxaGNGUjVjR1VnUFQwOUlHMXBMQW9nSUNBZ0lDQWdJQ0FnSUNCdFpYUmhiRzVsYzNOTllYQTZJRzFsTEFvZ0lDQWdJQ0FnSUNBZ0lDQnliM1ZuYUc1bGMzTk5ZWEE2SUhsbExBb2dJQ0FnSUNBZ0lDQWdJQ0JoYm1semIzUnliM0I1T2lCT1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnWVc1cGMyOTBjbTl3ZVUxaGNEb2dRaXdLSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpqYjJGME9pQnhaU3dLSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpqYjJGMFRXRndPaUJsWlN3S0lDQWdJQ0FnSUNBZ0lDQWdZMnhsWVhKamIyRjBUbTl5YldGc1RXRndPaUJxTEFvZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTk5ZWEE2SUhSbExBb2dJQ0FnSUNBZ0lDQWdJQ0JwY21sa1pYTmpaVzVqWlRvZ2NuUXNDaUFnSUNBZ0lDQWdJQ0FnSUdseWFXUmxjMk5sYm1ObFRXRndPaUJOWlN3S0lDQWdJQ0FnSUNBZ0lDQWdhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhBNklISmxMQW9nSUNBZ0lDQWdJQ0FnSUNCemFHVmxiam9nUXl3S0lDQWdJQ0FnSUNBZ0lDQWdjMmhsWlc1RGIyeHZjazFoY0RvZ1pHVXNDaUFnSUNBZ0lDQWdJQ0FnSUhOb1pXVnVVbTkxWjJodVpYTnpUV0Z3T2lCTVpTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzNCbFkzVnNZWEpOWVhBNklGcGxMQW9nSUNBZ0lDQWdJQ0FnSUNCemNHVmpkV3hoY2tOdmJHOXlUV0Z3T2lCelpTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhBNklDUmxMQW9nSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMjFwYzNOcGIyNDZJRk1zQ2lBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6YldsemMybHZiazFoY0RvZ1QyVXNDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FXTnJibVZ6YzAxaGNEb2dTV1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHZHlZV1JwWlc1MFRXRndPaUJTWlN3S0lDQWdJQ0FnSUNBZ0lDQWdiM0JoY1hWbE9pQk5MblJ5WVc1emNHRnlaVzUwSUQwOVBTQWhNU0FtSmlCTkxtSnNaVzVrYVc1bklEMDlQU0JYYVN3S0lDQWdJQ0FnSUNBZ0lDQWdZV3h3YUdGTllYQTZJRkFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRnNjR2hoVkdWemREb2dZMlVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRnNjR2hoU0dGemFEb2dZV1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiV0pwYm1VNklFMHVZMjl0WW1sdVpTd0tJQ0FnSUNBZ0lDQWdJQ0FnYldGd1ZYWTZJRmxsSUNZbUlGOG9UUzV0WVhBdVkyaGhibTVsYkNrc0NpQWdJQ0FnSUNBZ0lDQWdJR0Z2VFdGd1ZYWTZJRXdnSmlZZ1h5aE5MbUZ2VFdGd0xtTm9ZVzV1Wld3cExBb2dJQ0FnSUNBZ0lDQWdJQ0JzYVdkb2RFMWhjRlYyT2lCdlpTQW1KaUJmS0UwdWJHbG5hSFJOWVhBdVkyaGhibTVsYkNrc0NpQWdJQ0FnSUNBZ0lDQWdJR0oxYlhCTllYQlZkam9nV0NBbUppQmZLRTB1WW5WdGNFMWhjQzVqYUdGdWJtVnNLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtOXliV0ZzVFdGd1ZYWTZJR2xsSUNZbUlGOG9UUzV1YjNKdFlXeE5ZWEF1WTJoaGJtNWxiQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUnBjM0JzWVdObGJXVnVkRTFoY0ZWMk9pQktJQ1ltSUY4b1RTNWthWE53YkdGalpXMWxiblJOWVhBdVkyaGhibTVsYkNrc0NpQWdJQ0FnSUNBZ0lDQWdJR1Z0YVhOemFYWmxUV0Z3VlhZNklGTmxJQ1ltSUY4b1RTNWxiV2x6YzJsMlpVMWhjQzVqYUdGdWJtVnNLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JXVjBZV3h1WlhOelRXRndWWFk2SUcxbElDWW1JRjhvVFM1dFpYUmhiRzVsYzNOTllYQXVZMmhoYm01bGJDa3NDaUFnSUNBZ0lDQWdJQ0FnSUhKdmRXZG9ibVZ6YzAxaGNGVjJPaUI1WlNBbUppQmZLRTB1Y205MVoyaHVaWE56VFdGd0xtTm9ZVzV1Wld3cExBb2dJQ0FnSUNBZ0lDQWdJQ0JoYm1semIzUnliM0I1VFdGd1ZYWTZJRUlnSmlZZ1h5aE5MbUZ1YVhOdmRISnZjSGxOWVhBdVkyaGhibTVsYkNrc0NpQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVkyOWhkRTFoY0ZWMk9pQmxaU0FtSmlCZktFMHVZMnhsWVhKamIyRjBUV0Z3TG1Ob1lXNXVaV3dwTEFvZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY21OdllYUk9iM0p0WVd4TllYQlZkam9nYWlBbUppQmZLRTB1WTJ4bFlYSmpiMkYwVG05eWJXRnNUV0Z3TG1Ob1lXNXVaV3dwTEFvZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTk5ZWEJWZGpvZ2RHVWdKaVlnWHloTkxtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjQzVqYUdGdWJtVnNLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FYSnBaR1Z6WTJWdVkyVk5ZWEJWZGpvZ1RXVWdKaVlnWHloTkxtbHlhV1JsYzJObGJtTmxUV0Z3TG1Ob1lXNXVaV3dwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnBjbWxrWlhOalpXNWpaVlJvYVdOcmJtVnpjMDFoY0ZWMk9pQnlaU0FtSmlCZktFMHVhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhBdVkyaGhibTVsYkNrc0NpQWdJQ0FnSUNBZ0lDQWdJSE5vWldWdVEyOXNiM0pOWVhCVmRqb2daR1VnSmlZZ1h5aE5Mbk5vWldWdVEyOXNiM0pOWVhBdVkyaGhibTVsYkNrc0NpQWdJQ0FnSUNBZ0lDQWdJSE5vWldWdVVtOTFaMmh1WlhOelRXRndWWFk2SUV4bElDWW1JRjhvVFM1emFHVmxibEp2ZFdkb2JtVnpjMDFoY0M1amFHRnVibVZzS1N3S0lDQWdJQ0FnSUNBZ0lDQWdjM0JsWTNWc1lYSk5ZWEJWZGpvZ1dtVWdKaVlnWHloTkxuTndaV04xYkdGeVRXRndMbU5vWVc1dVpXd3BMQW9nSUNBZ0lDQWdJQ0FnSUNCemNHVmpkV3hoY2tOdmJHOXlUV0Z3VlhZNklITmxJQ1ltSUY4b1RTNXpjR1ZqZFd4aGNrTnZiRzl5VFdGd0xtTm9ZVzV1Wld3cExBb2dJQ0FnSUNBZ0lDQWdJQ0J6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0ZWMk9pQWtaU0FtSmlCZktFMHVjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEF1WTJoaGJtNWxiQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6YldsemMybHZiazFoY0ZWMk9pQlBaU0FtSmlCZktFMHVkSEpoYm5OdGFYTnphVzl1VFdGd0xtTm9ZVzV1Wld3cExBb2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsamEyNWxjM05OWVhCVmRqb2dTV1VnSmlZZ1h5aE5MblJvYVdOcmJtVnpjMDFoY0M1amFHRnVibVZzS1N3S0lDQWdJQ0FnSUNBZ0lDQWdZV3h3YUdGTllYQlZkam9nVUNBbUppQmZLRTB1WVd4d2FHRk5ZWEF1WTJoaGJtNWxiQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJsZUZSaGJtZGxiblJ6T2lBaElYb3VZWFIwY21saWRYUmxjeTUwWVc1blpXNTBJQ1ltSUNocFpTQjhmQ0JPWlNrc0NpQWdJQ0FnSUNBZ0lDQWdJSFpsY25SbGVFTnZiRzl5Y3pvZ1RTNTJaWEowWlhoRGIyeHZjbk1zQ2lBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJsZUVGc2NHaGhjem9nVFM1MlpYSjBaWGhEYjJ4dmNuTWdQVDA5SUNFd0lDWW1JQ0VoZWk1aGRIUnlhV0oxZEdWekxtTnZiRzl5SUNZbUlIb3VZWFIwY21saWRYUmxjeTVqYjJ4dmNpNXBkR1Z0VTJsNlpTQTlQVDBnTkN3S0lDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEdWNFZYWXhjem9nZFdVc0NpQWdJQ0FnSUNBZ0lDQWdJSFpsY25SbGVGVjJNbk02SUZFc0NpQWdJQ0FnSUNBZ0lDQWdJSFpsY25SbGVGVjJNM002SUdKbExBb2dJQ0FnSUNBZ0lDQWdJQ0J3YjJsdWRITlZkbk02SUNRdWFYTlFiMmx1ZEhNZ1BUMDlJQ0V3SUNZbUlDRWhlaTVoZEhSeWFXSjFkR1Z6TG5WMklDWW1JQ2haWlNCOGZDQlFLU3dLSUNBZ0lDQWdJQ0FnSUNBZ1ptOW5PaUFoSVZVc0NpQWdJQ0FnSUNBZ0lDQWdJSFZ6WlVadlp6b2dUUzVtYjJjZ1BUMDlJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQm1iMmRGZUhBeU9pQlZJQ1ltSUZVdWFYTkdiMmRGZUhBeUxBb2dJQ0FnSUNBZ0lDQWdJQ0JtYkdGMFUyaGhaR2x1WnpvZ1RTNW1iR0YwVTJoaFpHbHVaeUE5UFQwZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUhOcGVtVkJkSFJsYm5WaGRHbHZiam9nVFM1emFYcGxRWFIwWlc1MVlYUnBiMjRnUFQwOUlDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNCc2IyZGhjbWwwYUcxcFkwUmxjSFJvUW5WbVptVnlPaUIxTEFvZ0lDQWdJQ0FnSUNBZ0lDQnphMmx1Ym1sdVp6b2dKQzVwYzFOcmFXNXVaV1JOWlhOb0lEMDlQU0FoTUN3S0lDQWdJQ0FnSUNBZ0lDQWdiVzl5Y0doVVlYSm5aWFJ6T2lCNkxtMXZjbkJvUVhSMGNtbGlkWFJsY3k1d2IzTnBkR2x2YmlBaFBUMGdkbTlwWkNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0J0YjNKd2FFNXZjbTFoYkhNNklIb3ViVzl5Y0doQmRIUnlhV0oxZEdWekxtNXZjbTFoYkNBaFBUMGdkbTlwWkNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0J0YjNKd2FFTnZiRzl5Y3pvZ2VpNXRiM0p3YUVGMGRISnBZblYwWlhNdVkyOXNiM0lnSVQwOUlIWnZhV1FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdiVzl5Y0doVVlYSm5aWFJ6UTI5MWJuUTZJRVFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHMXZjbkJvVkdWNGRIVnlaVk4wY21sa1pUb2dSeXdLSUNBZ0lDQWdJQ0FnSUNBZ2JuVnRSR2x5VEdsbmFIUnpPaUJVTG1ScGNtVmpkR2x2Ym1Gc0xteGxibWQwYUN3S0lDQWdJQ0FnSUNBZ0lDQWdiblZ0VUc5cGJuUk1hV2RvZEhNNklGUXVjRzlwYm5RdWJHVnVaM1JvTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVkVzFUY0c5MFRHbG5hSFJ6T2lCVUxuTndiM1F1YkdWdVozUm9MQW9nSUNBZ0lDQWdJQ0FnSUNCdWRXMVRjRzkwVEdsbmFIUk5ZWEJ6T2lCVUxuTndiM1JNYVdkb2RFMWhjQzVzWlc1bmRHZ3NDaUFnSUNBZ0lDQWdJQ0FnSUc1MWJWSmxZM1JCY21WaFRHbG5hSFJ6T2lCVUxuSmxZM1JCY21WaExteGxibWQwYUN3S0lDQWdJQ0FnSUNBZ0lDQWdiblZ0U0dWdGFVeHBaMmgwY3pvZ1ZDNW9aVzFwTG14bGJtZDBhQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JuVnRSR2x5VEdsbmFIUlRhR0ZrYjNkek9pQlVMbVJwY21WamRHbHZibUZzVTJoaFpHOTNUV0Z3TG14bGJtZDBhQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JuVnRVRzlwYm5STWFXZG9kRk5vWVdSdmQzTTZJRlF1Y0c5cGJuUlRhR0ZrYjNkTllYQXViR1Z1WjNSb0xBb2dJQ0FnSUNBZ0lDQWdJQ0J1ZFcxVGNHOTBUR2xuYUhSVGFHRmtiM2R6T2lCVUxuTndiM1JUYUdGa2IzZE5ZWEF1YkdWdVozUm9MQW9nSUNBZ0lDQWdJQ0FnSUNCdWRXMVRjRzkwVEdsbmFIUlRhR0ZrYjNkelYybDBhRTFoY0hNNklGUXViblZ0VTNCdmRFeHBaMmgwVTJoaFpHOTNjMWRwZEdoTllYQnpMQW9nSUNBZ0lDQWdJQ0FnSUNCdWRXMU1hV2RvZEZCeWIySmxjem9nVkM1dWRXMU1hV2RvZEZCeWIySmxjeXdLSUNBZ0lDQWdJQ0FnSUNBZ2JuVnRRMnhwY0hCcGJtZFFiR0Z1WlhNNklHRXViblZ0VUd4aGJtVnpMQW9nSUNBZ0lDQWdJQ0FnSUNCdWRXMURiR2x3U1c1MFpYSnpaV04wYVc5dU9pQmhMbTUxYlVsdWRHVnljMlZqZEdsdmJpd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdsMGFHVnlhVzVuT2lCTkxtUnBkR2hsY21sdVp5d0tJQ0FnSUNBZ0lDQWdJQ0FnYzJoaFpHOTNUV0Z3Ulc1aFlteGxaRG9nY3pFdWMyaGhaRzkzVFdGd0xtVnVZV0pzWldRZ0ppWWdUeTVzWlc1bmRHZ2dQaUF3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkTllYQlVlWEJsT2lCek1TNXphR0ZrYjNkTllYQXVkSGx3WlN3S0lDQWdJQ0FnSUNBZ0lDQWdkRzl1WlUxaGNIQnBibWM2SUVabExBb2dJQ0FnSUNBZ0lDQWdJQ0IxYzJWTVpXZGhZM2xNYVdkb2RITTZJSE14TGw5MWMyVk1aV2RoWTNsTWFXZG9kSE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmxZMjlrWlZacFpHVnZWR1Y0ZEhWeVpUb2dXV1VnSmlZZ1RTNXRZWEF1YVhOV2FXUmxiMVJsZUhSMWNtVWdQVDA5SUNFd0lDWW1JRkZsTG1kbGRGUnlZVzV6Wm1WeUtFMHViV0Z3TG1OdmJHOXlVM0JoWTJVcElEMDlQU0J1ZEN3S0lDQWdJQ0FnSUNBZ0lDQWdjSEpsYlhWc2RHbHdiR2xsWkVGc2NHaGhPaUJOTG5CeVpXMTFiSFJwY0d4cFpXUkJiSEJvWVN3S0lDQWdJQ0FnSUNBZ0lDQWdaRzkxWW14bFUybGtaV1E2SUUwdWMybGtaU0E5UFQwZ1oyNHNDaUFnSUNBZ0lDQWdJQ0FnSUdac2FYQlRhV1JsWkRvZ1RTNXphV1JsSUQwOVBTQkdkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2RYTmxSR1Z3ZEdoUVlXTnJhVzVuT2lCTkxtUmxjSFJvVUdGamEybHVaeUErUFNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JrWlhCMGFGQmhZMnRwYm1jNklFMHVaR1Z3ZEdoUVlXTnJhVzVuSUh4OElEQXNDaUFnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRNRUYwZEhKcFluVjBaVTVoYldVNklFMHVhVzVrWlhnd1FYUjBjbWxpZFhSbFRtRnRaU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pYaDBaVzV6YVc5dVJHVnlhWFpoZEdsMlpYTTZJR2RsSUNZbUlFMHVaWGgwWlc1emFXOXVjeTVrWlhKcGRtRjBhWFpsY3lBOVBUMGdJVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHVjRkR1Z1YzJsdmJrWnlZV2RFWlhCMGFEb2daMlVnSmlZZ1RTNWxlSFJsYm5OcGIyNXpMbVp5WVdkRVpYQjBhQ0E5UFQwZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUdWNGRHVnVjMmx2YmtSeVlYZENkV1ptWlhKek9pQm5aU0FtSmlCTkxtVjRkR1Z1YzJsdmJuTXVaSEpoZDBKMVptWmxjbk1nUFQwOUlDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNCbGVIUmxibk5wYjI1VGFHRmtaWEpVWlhoMGRYSmxURTlFT2lCblpTQW1KaUJOTG1WNGRHVnVjMmx2Ym5NdWMyaGhaR1Z5VkdWNGRIVnlaVXhQUkNBOVBUMGdJVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lISmxibVJsY21WeVJYaDBaVzV6YVc5dVJuSmhaMFJsY0hSb09pQm9JSHg4SUc0dWFHRnpLQ0pGV0ZSZlpuSmhaMTlrWlhCMGFDSXBMQW9nSUNBZ0lDQWdJQ0FnSUNCeVpXNWtaWEpsY2tWNGRHVnVjMmx2YmtSeVlYZENkV1ptWlhKek9pQm9JSHg4SUc0dWFHRnpLQ0pYUlVKSFRGOWtjbUYzWDJKMVptWmxjbk1pS1N3S0lDQWdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVpYSkZlSFJsYm5OcGIyNVRhR0ZrWlhKVVpYaDBkWEpsVEc5a09pQm9JSHg4SUc0dWFHRnpLQ0pGV0ZSZmMyaGhaR1Z5WDNSbGVIUjFjbVZmYkc5a0lpa3NDaUFnSUNBZ0lDQWdJQ0FnSUdOMWMzUnZiVkJ5YjJkeVlXMURZV05vWlV0bGVUb2dUUzVqZFhOMGIyMVFjbTluY21GdFEyRmphR1ZMWlhrb0tRb2dJQ0FnSUNBZ0lIMDdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJ3S0UwcElIc0tJQ0FnSUNBZ0lDQnNaWFFnVkNBOUlGdGRPd29nSUNBZ0lDQWdJR2xtSUNoTkxuTm9ZV1JsY2tsRUlEOGdWQzV3ZFhOb0tFMHVjMmhoWkdWeVNVUXBJRG9nS0ZRdWNIVnphQ2hOTG1OMWMzUnZiVlpsY25SbGVGTm9ZV1JsY2tsRUtTd2dWQzV3ZFhOb0tFMHVZM1Z6ZEc5dFJuSmhaMjFsYm5SVGFHRmtaWEpKUkNrcExDQk5MbVJsWm1sdVpYTWdJVDA5SUhadmFXUWdNQ2tnWm05eUtHeGxkQ0JQSUdsdUlFMHVaR1ZtYVc1bGN5bFVMbkIxYzJnb1R5a3NJRlF1Y0hWemFDaE5MbVJsWm1sdVpYTmJUMTBwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJOTG1selVtRjNVMmhoWkdWeVRXRjBaWEpwWVd3Z1BUMDlJQ0V4SUNZbUlDaDJLRlFzSUUwcExDQjRLRlFzSUUwcExDQlVMbkIxYzJnb2N6RXViM1YwY0hWMFEyOXNiM0pUY0dGalpTa3BMQ0JVTG5CMWMyZ29UUzVqZFhOMGIyMVFjbTluY21GdFEyRmphR1ZMWlhrcExDQlVMbXB2YVc0b0tUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJSFlvVFN3Z1ZDa2dld29nSUNBZ0lDQWdJRTB1Y0hWemFDaFVMbkJ5WldOcGMybHZiaWtzSUUwdWNIVnphQ2hVTG05MWRIQjFkRU52Ykc5eVUzQmhZMlVwTENCTkxuQjFjMmdvVkM1bGJuWk5ZWEJOYjJSbEtTd2dUUzV3ZFhOb0tGUXVaVzUyVFdGd1EzVmlaVlZXU0dWcFoyaDBLU3dnVFM1d2RYTm9LRlF1YldGd1ZYWXBMQ0JOTG5CMWMyZ29WQzVoYkhCb1lVMWhjRlYyS1N3Z1RTNXdkWE5vS0ZRdWJHbG5hSFJOWVhCVmRpa3NJRTB1Y0hWemFDaFVMbUZ2VFdGd1ZYWXBMQ0JOTG5CMWMyZ29WQzVpZFcxd1RXRndWWFlwTENCTkxuQjFjMmdvVkM1dWIzSnRZV3hOWVhCVmRpa3NJRTB1Y0hWemFDaFVMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNGVjJLU3dnVFM1d2RYTm9LRlF1WlcxcGMzTnBkbVZOWVhCVmRpa3NJRTB1Y0hWemFDaFVMbTFsZEdGc2JtVnpjMDFoY0ZWMktTd2dUUzV3ZFhOb0tGUXVjbTkxWjJodVpYTnpUV0Z3VlhZcExDQk5MbkIxYzJnb1ZDNWhibWx6YjNSeWIzQjVUV0Z3VlhZcExDQk5MbkIxYzJnb1ZDNWpiR1ZoY21OdllYUk5ZWEJWZGlrc0lFMHVjSFZ6YUNoVUxtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNGVjJLU3dnVFM1d2RYTm9LRlF1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56VFdGd1ZYWXBMQ0JOTG5CMWMyZ29WQzVwY21sa1pYTmpaVzVqWlUxaGNGVjJLU3dnVFM1d2RYTm9LRlF1YVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNOTllYQlZkaWtzSUUwdWNIVnphQ2hVTG5Ob1pXVnVRMjlzYjNKTllYQlZkaWtzSUUwdWNIVnphQ2hVTG5Ob1pXVnVVbTkxWjJodVpYTnpUV0Z3VlhZcExDQk5MbkIxYzJnb1ZDNXpjR1ZqZFd4aGNrMWhjRlYyS1N3Z1RTNXdkWE5vS0ZRdWMzQmxZM1ZzWVhKRGIyeHZjazFoY0ZWMktTd2dUUzV3ZFhOb0tGUXVjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEJWZGlrc0lFMHVjSFZ6YUNoVUxuUnlZVzV6YldsemMybHZiazFoY0ZWMktTd2dUUzV3ZFhOb0tGUXVkR2hwWTJ0dVpYTnpUV0Z3VlhZcExDQk5MbkIxYzJnb1ZDNWpiMjFpYVc1bEtTd2dUUzV3ZFhOb0tGUXVabTluUlhod01pa3NJRTB1Y0hWemFDaFVMbk5wZW1WQmRIUmxiblZoZEdsdmJpa3NJRTB1Y0hWemFDaFVMbTF2Y25Cb1ZHRnlaMlYwYzBOdmRXNTBLU3dnVFM1d2RYTm9LRlF1Ylc5eWNHaEJkSFJ5YVdKMWRHVkRiM1Z1ZENrc0lFMHVjSFZ6YUNoVUxtNTFiVVJwY2t4cFoyaDBjeWtzSUUwdWNIVnphQ2hVTG01MWJWQnZhVzUwVEdsbmFIUnpLU3dnVFM1d2RYTm9LRlF1Ym5WdFUzQnZkRXhwWjJoMGN5a3NJRTB1Y0hWemFDaFVMbTUxYlZOd2IzUk1hV2RvZEUxaGNITXBMQ0JOTG5CMWMyZ29WQzV1ZFcxSVpXMXBUR2xuYUhSektTd2dUUzV3ZFhOb0tGUXViblZ0VW1WamRFRnlaV0ZNYVdkb2RITXBMQ0JOTG5CMWMyZ29WQzV1ZFcxRWFYSk1hV2RvZEZOb1lXUnZkM01wTENCTkxuQjFjMmdvVkM1dWRXMVFiMmx1ZEV4cFoyaDBVMmhoWkc5M2N5a3NJRTB1Y0hWemFDaFVMbTUxYlZOd2IzUk1hV2RvZEZOb1lXUnZkM01wTENCTkxuQjFjMmdvVkM1dWRXMVRjRzkwVEdsbmFIUlRhR0ZrYjNkelYybDBhRTFoY0hNcExDQk5MbkIxYzJnb1ZDNXVkVzFNYVdkb2RGQnliMkpsY3lrc0lFMHVjSFZ6YUNoVUxuTm9ZV1J2ZDAxaGNGUjVjR1VwTENCTkxuQjFjMmdvVkM1MGIyNWxUV0Z3Y0dsdVp5a3NJRTB1Y0hWemFDaFVMbTUxYlVOc2FYQndhVzVuVUd4aGJtVnpLU3dnVFM1d2RYTm9LRlF1Ym5WdFEyeHBjRWx1ZEdWeWMyVmpkR2x2Ymlrc0lFMHVjSFZ6YUNoVUxtUmxjSFJvVUdGamEybHVaeWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCNEtFMHNJRlFwSUhzS0lDQWdJQ0FnSUNCdkxtUnBjMkZpYkdWQmJHd29LU3dnVkM1cGMxZGxZa2RNTWlBbUppQnZMbVZ1WVdKc1pTZ3dLU3dnVkM1emRYQndiM0owYzFabGNuUmxlRlJsZUhSMWNtVnpJQ1ltSUc4dVpXNWhZbXhsS0RFcExDQlVMbWx1YzNSaGJtTnBibWNnSmlZZ2J5NWxibUZpYkdVb01pa3NJRlF1YVc1emRHRnVZMmx1WjBOdmJHOXlJQ1ltSUc4dVpXNWhZbXhsS0RNcExDQlVMbTFoZEdOaGNDQW1KaUJ2TG1WdVlXSnNaU2cwS1N3Z1ZDNWxiblpOWVhBZ0ppWWdieTVsYm1GaWJHVW9OU2tzSUZRdWJtOXliV0ZzVFdGd1QySnFaV04wVTNCaFkyVWdKaVlnYnk1bGJtRmliR1VvTmlrc0lGUXVibTl5YldGc1RXRndWR0Z1WjJWdWRGTndZV05sSUNZbUlHOHVaVzVoWW14bEtEY3BMQ0JVTG1Oc1pXRnlZMjloZENBbUppQnZMbVZ1WVdKc1pTZzRLU3dnVkM1cGNtbGtaWE5qWlc1alpTQW1KaUJ2TG1WdVlXSnNaU2c1S1N3Z1ZDNWhiSEJvWVZSbGMzUWdKaVlnYnk1bGJtRmliR1VvTVRBcExDQlVMblpsY25SbGVFTnZiRzl5Y3lBbUppQnZMbVZ1WVdKc1pTZ3hNU2tzSUZRdWRtVnlkR1Y0UVd4d2FHRnpJQ1ltSUc4dVpXNWhZbXhsS0RFeUtTd2dWQzUyWlhKMFpYaFZkakZ6SUNZbUlHOHVaVzVoWW14bEtERXpLU3dnVkM1MlpYSjBaWGhWZGpKeklDWW1JRzh1Wlc1aFlteGxLREUwS1N3Z1ZDNTJaWEowWlhoVmRqTnpJQ1ltSUc4dVpXNWhZbXhsS0RFMUtTd2dWQzUyWlhKMFpYaFVZVzVuWlc1MGN5QW1KaUJ2TG1WdVlXSnNaU2d4Tmlrc0lGUXVZVzVwYzI5MGNtOXdlU0FtSmlCdkxtVnVZV0pzWlNneE55a3NJRTB1Y0hWemFDaHZMbTFoYzJzcExDQnZMbVJwYzJGaWJHVkJiR3dvS1N3Z1ZDNW1iMmNnSmlZZ2J5NWxibUZpYkdVb01Da3NJRlF1ZFhObFJtOW5JQ1ltSUc4dVpXNWhZbXhsS0RFcExDQlVMbVpzWVhSVGFHRmthVzVuSUNZbUlHOHVaVzVoWW14bEtESXBMQ0JVTG14dloyRnlhWFJvYldsalJHVndkR2hDZFdabVpYSWdKaVlnYnk1bGJtRmliR1VvTXlrc0lGUXVjMnRwYm01cGJtY2dKaVlnYnk1bGJtRmliR1VvTkNrc0lGUXViVzl5Y0doVVlYSm5aWFJ6SUNZbUlHOHVaVzVoWW14bEtEVXBMQ0JVTG0xdmNuQm9UbTl5YldGc2N5QW1KaUJ2TG1WdVlXSnNaU2cyS1N3Z1ZDNXRiM0p3YUVOdmJHOXljeUFtSmlCdkxtVnVZV0pzWlNnM0tTd2dWQzV3Y21WdGRXeDBhWEJzYVdWa1FXeHdhR0VnSmlZZ2J5NWxibUZpYkdVb09Da3NJRlF1YzJoaFpHOTNUV0Z3Ulc1aFlteGxaQ0FtSmlCdkxtVnVZV0pzWlNnNUtTd2dWQzUxYzJWTVpXZGhZM2xNYVdkb2RITWdKaVlnYnk1bGJtRmliR1VvTVRBcExDQlVMbVJ2ZFdKc1pWTnBaR1ZrSUNZbUlHOHVaVzVoWW14bEtERXhLU3dnVkM1bWJHbHdVMmxrWldRZ0ppWWdieTVsYm1GaWJHVW9NVElwTENCVUxuVnpaVVJsY0hSb1VHRmphMmx1WnlBbUppQnZMbVZ1WVdKc1pTZ3hNeWtzSUZRdVpHbDBhR1Z5YVc1bklDWW1JRzh1Wlc1aFlteGxLREUwS1N3Z1ZDNTBjbUZ1YzIxcGMzTnBiMjRnSmlZZ2J5NWxibUZpYkdVb01UVXBMQ0JVTG5Ob1pXVnVJQ1ltSUc4dVpXNWhZbXhsS0RFMktTd2dWQzV2Y0dGeGRXVWdKaVlnYnk1bGJtRmliR1VvTVRjcExDQlVMbkJ2YVc1MGMxVjJjeUFtSmlCdkxtVnVZV0pzWlNneE9Da3NJRlF1WkdWamIyUmxWbWxrWlc5VVpYaDBkWEpsSUNZbUlHOHVaVzVoWW14bEtERTVLU3dnVFM1d2RYTm9LRzh1YldGemF5azdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUI1S0UwcElIc0tJQ0FnSUNBZ0lDQnNaWFFnVkNBOUlHMWJUUzUwZVhCbFhTd2dUenNLSUNBZ0lDQWdJQ0JwWmlBb1ZDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdXU0E5SUc1dVcxUmRPd29nSUNBZ0lDQWdJQ0FnSUNCUElEMGdlSEF1WTJ4dmJtVW9XUzUxYm1sbWIzSnRjeWs3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJRThnUFNCTkxuVnVhV1p2Y20xek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCUE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdZaWhOTENCVUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUU4N0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCWklEMGdNQ3dnSkNBOUlHd3ViR1Z1WjNSb095QlpJRHdnSkRzZ1dTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRlVnUFNCc1cxbGRPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9WUzVqWVdOb1pVdGxlU0E5UFQwZ1ZDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUeUE5SUZVc0lDc3JUeTUxYzJWa1ZHbHRaWE03Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVHlBOVBUMGdkbTlwWkNBd0lDWW1JQ2hQSUQwZ2JtVjNJR0l3S0hNeExDQlVMQ0JOTENCeUtTd2diQzV3ZFhOb0tFOHBLU3dnVHpzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlIY29UU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDZ3RMVTB1ZFhObFpGUnBiV1Z6SUQwOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JVSUQwZ2JDNXBibVJsZUU5bUtFMHBPd29nSUNBZ0lDQWdJQ0FnSUNCc1cxUmRJRDBnYkZ0c0xteGxibWQwYUNBdElERmRMQ0JzTG5CdmNDZ3BMQ0JOTG1SbGMzUnliM2tvS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQlNLRTBwSUhzS0lDQWdJQ0FnSUNCakxuSmxiVzkyWlNoTktUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRWtvS1NCN0NpQWdJQ0FnSUNBZ1l5NWthWE53YjNObEtDazdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJR2RsZEZCaGNtRnRaWFJsY25NNklHY3NDaUFnSUNBZ0lDQWdaMlYwVUhKdlozSmhiVU5oWTJobFMyVjVPaUJ3TEFvZ0lDQWdJQ0FnSUdkbGRGVnVhV1p2Y20xek9pQjVMQW9nSUNBZ0lDQWdJR0ZqY1hWcGNtVlFjbTluY21GdE9pQmlMQW9nSUNBZ0lDQWdJSEpsYkdWaGMyVlFjbTluY21GdE9pQjNMQW9nSUNBZ0lDQWdJSEpsYkdWaGMyVlRhR0ZrWlhKRFlXTm9aVG9nVWl3S0lDQWdJQ0FnSUNCd2NtOW5jbUZ0Y3pvZ2JDd0tJQ0FnSUNBZ0lDQmthWE53YjNObE9pQkpDaUFnSUNCOU93cDlDbVoxYm1OMGFXOXVJSGN3S0NrZ2V3b2dJQ0FnYkdWMElITXhJRDBnYm1WM0lGZGxZV3ROWVhBN0NpQWdJQ0JtZFc1amRHbHZiaUJsS0hJcElIc0tJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlITXhMbWRsZENoeUtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1lTQTlQVDBnZG05cFpDQXdJQ1ltSUNoaElEMGdlMzBzSUhNeExuTmxkQ2h5TENCaEtTa3NJR0U3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCMEtISXBJSHNLSUNBZ0lDQWdJQ0J6TVM1a1pXeGxkR1VvY2lrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnVLSElzSUdFc0lHOHBJSHNLSUNBZ0lDQWdJQ0J6TVM1blpYUW9jaWxiWVYwZ1BTQnZPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYVNncElIc0tJQ0FnSUNBZ0lDQnpNU0E5SUc1bGR5QlhaV0ZyVFdGd093b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQm5aWFE2SUdVc0NpQWdJQ0FnSUNBZ2NtVnRiM1psT2lCMExBb2dJQ0FnSUNBZ0lIVndaR0YwWlRvZ2Jpd0tJQ0FnSUNBZ0lDQmthWE53YjNObE9pQnBDaUFnSUNCOU93cDlDbVoxYm1OMGFXOXVJRUV3S0hNeExDQmxLU0I3Q2lBZ0lDQnlaWFIxY200Z2N6RXVaM0p2ZFhCUGNtUmxjaUFoUFQwZ1pTNW5jbTkxY0U5eVpHVnlJRDhnY3pFdVozSnZkWEJQY21SbGNpQXRJR1V1WjNKdmRYQlBjbVJsY2lBNklITXhMbkpsYm1SbGNrOXlaR1Z5SUNFOVBTQmxMbkpsYm1SbGNrOXlaR1Z5SUQ4Z2N6RXVjbVZ1WkdWeVQzSmtaWElnTFNCbExuSmxibVJsY2s5eVpHVnlJRG9nY3pFdWJXRjBaWEpwWVd3dWFXUWdJVDA5SUdVdWJXRjBaWEpwWVd3dWFXUWdQeUJ6TVM1dFlYUmxjbWxoYkM1cFpDQXRJR1V1YldGMFpYSnBZV3d1YVdRZ09pQnpNUzU2SUNFOVBTQmxMbm9nUHlCek1TNTZJQzBnWlM1NklEb2djekV1YVdRZ0xTQmxMbWxrT3dwOUNtWjFibU4wYVc5dUlGSm9LSE14TENCbEtTQjdDaUFnSUNCeVpYUjFjbTRnY3pFdVozSnZkWEJQY21SbGNpQWhQVDBnWlM1bmNtOTFjRTl5WkdWeUlEOGdjekV1WjNKdmRYQlBjbVJsY2lBdElHVXVaM0p2ZFhCUGNtUmxjaUE2SUhNeExuSmxibVJsY2s5eVpHVnlJQ0U5UFNCbExuSmxibVJsY2s5eVpHVnlJRDhnY3pFdWNtVnVaR1Z5VDNKa1pYSWdMU0JsTG5KbGJtUmxjazl5WkdWeUlEb2djekV1ZWlBaFBUMGdaUzU2SUQ4Z1pTNTZJQzBnY3pFdWVpQTZJSE14TG1sa0lDMGdaUzVwWkRzS2ZRcG1kVzVqZEdsdmJpQkRhQ2dwSUhzS0lDQWdJR3hsZENCek1TQTlJRnRkTENCbElEMGdNQ3dnZENBOUlGdGRMQ0J1SUQwZ1cxMHNJR2tnUFNCYlhUc0tJQ0FnSUdaMWJtTjBhVzl1SUhJb0tTQjdDaUFnSUNBZ0lDQWdaU0E5SURBc0lIUXViR1Z1WjNSb0lEMGdNQ3dnYmk1c1pXNW5kR2dnUFNBd0xDQnBMbXhsYm1kMGFDQTlJREE3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCaEtIVXNJR1FzSUdZc0lHMHNJRjhzSUdjcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY0NBOUlITXhXMlZkT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3SUQwOVBTQjJiMmxrSURBZ1B5QW9jQ0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1E2SUhVdWFXUXNDaUFnSUNBZ0lDQWdJQ0FnSUc5aWFtVmpkRG9nZFN3S0lDQWdJQ0FnSUNBZ0lDQWdaMlZ2YldWMGNuazZJR1FzQ2lBZ0lDQWdJQ0FnSUNBZ0lHMWhkR1Z5YVdGc09pQm1MQW9nSUNBZ0lDQWdJQ0FnSUNCbmNtOTFjRTl5WkdWeU9pQnRMQW9nSUNBZ0lDQWdJQ0FnSUNCeVpXNWtaWEpQY21SbGNqb2dkUzV5Wlc1a1pYSlBjbVJsY2l3S0lDQWdJQ0FnSUNBZ0lDQWdlam9nWHl3S0lDQWdJQ0FnSUNBZ0lDQWdaM0p2ZFhBNklHY0tJQ0FnSUNBZ0lDQjlMQ0J6TVZ0bFhTQTlJSEFwSURvZ0tIQXVhV1FnUFNCMUxtbGtMQ0J3TG05aWFtVmpkQ0E5SUhVc0lIQXVaMlZ2YldWMGNua2dQU0JrTENCd0xtMWhkR1Z5YVdGc0lEMGdaaXdnY0M1bmNtOTFjRTl5WkdWeUlEMGdiU3dnY0M1eVpXNWtaWEpQY21SbGNpQTlJSFV1Y21WdVpHVnlUM0prWlhJc0lIQXVlaUE5SUY4c0lIQXVaM0p2ZFhBZ1BTQm5LU3dnWlNzckxDQndPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYnloMUxDQmtMQ0JtTENCdExDQmZMQ0JuS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSEFnUFNCaEtIVXNJR1FzSUdZc0lHMHNJRjhzSUdjcE93b2dJQ0FnSUNBZ0lHWXVkSEpoYm5OdGFYTnphVzl1SUQ0Z01DQS9JRzR1Y0hWemFDaHdLU0E2SUdZdWRISmhibk53WVhKbGJuUWdQVDA5SUNFd0lEOGdhUzV3ZFhOb0tIQXBJRG9nZEM1d2RYTm9LSEFwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1l5aDFMQ0JrTENCbUxDQnRMQ0JmTENCbktTQjdDaUFnSUNBZ0lDQWdiR1YwSUhBZ1BTQmhLSFVzSUdRc0lHWXNJRzBzSUY4c0lHY3BPd29nSUNBZ0lDQWdJR1l1ZEhKaGJuTnRhWE56YVc5dUlENGdNQ0EvSUc0dWRXNXphR2xtZENod0tTQTZJR1l1ZEhKaGJuTndZWEpsYm5RZ1BUMDlJQ0V3SUQ4Z2FTNTFibk5vYVdaMEtIQXBJRG9nZEM1MWJuTm9hV1owS0hBcE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdiQ2gxTENCa0tTQjdDaUFnSUNBZ0lDQWdkQzVzWlc1bmRHZ2dQaUF4SUNZbUlIUXVjMjl5ZENoMUlIeDhJRUV3S1N3Z2JpNXNaVzVuZEdnZ1BpQXhJQ1ltSUc0dWMyOXlkQ2hrSUh4OElGSm9LU3dnYVM1c1pXNW5kR2dnUGlBeElDWW1JR2t1YzI5eWRDaGtJSHg4SUZKb0tUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR2dvS1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMUlEMGdaU3dnWkNBOUlITXhMbXhsYm1kMGFEc2dkU0E4SUdRN0lIVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JtSUQwZ2N6RmJkVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htTG1sa0lEMDlQU0J1ZFd4c0tTQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdaaTVwWkNBOUlHNTFiR3dzSUdZdWIySnFaV04wSUQwZ2JuVnNiQ3dnWmk1blpXOXRaWFJ5ZVNBOUlHNTFiR3dzSUdZdWJXRjBaWEpwWVd3Z1BTQnVkV3hzTENCbUxtZHliM1Z3SUQwZ2JuVnNiRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnZXdvZ0lDQWdJQ0FnSUc5d1lYRjFaVG9nZEN3S0lDQWdJQ0FnSUNCMGNtRnVjMjFwYzNOcGRtVTZJRzRzQ2lBZ0lDQWdJQ0FnZEhKaGJuTndZWEpsYm5RNklHa3NDaUFnSUNBZ0lDQWdhVzVwZERvZ2Npd0tJQ0FnSUNBZ0lDQndkWE5vT2lCdkxBb2dJQ0FnSUNBZ0lIVnVjMmhwWm5RNklHTXNDaUFnSUNBZ0lDQWdabWx1YVhOb09pQm9MQW9nSUNBZ0lDQWdJSE52Y25RNklHd0tJQ0FnSUgwN0NuMEtablZ1WTNScGIyNGdVakFvS1NCN0NpQWdJQ0JzWlhRZ2N6RWdQU0J1WlhjZ1YyVmhhMDFoY0RzS0lDQWdJR1oxYm1OMGFXOXVJR1VvYml3Z2FTa2dld29nSUNBZ0lDQWdJR3hsZENCeUlEMGdjekV1WjJWMEtHNHBMQ0JoT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5SUQwOVBTQjJiMmxrSURBZ1B5QW9ZU0E5SUc1bGR5QkRhQ3dnY3pFdWMyVjBLRzRzSUZzS0lDQWdJQ0FnSUNBZ0lDQWdZUW9nSUNBZ0lDQWdJRjBwS1NBNklHa2dQajBnY2k1c1pXNW5kR2dnUHlBb1lTQTlJRzVsZHlCRGFDd2djaTV3ZFhOb0tHRXBLU0E2SUdFZ1BTQnlXMmxkTENCaE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdkQ2dwSUhzS0lDQWdJQ0FnSUNCek1TQTlJRzVsZHlCWFpXRnJUV0Z3T3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCblpYUTZJR1VzQ2lBZ0lDQWdJQ0FnWkdsemNHOXpaVG9nZEFvZ0lDQWdmVHNLZlFwbWRXNWpkR2x2YmlCRE1DZ3BJSHNLSUNBZ0lHeGxkQ0J6TVNBOUlIdDlPd29nSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hNeFcyVXVhV1JkSUNFOVBTQjJiMmxrSURBcElISmxkSFZ5YmlCek1WdGxMbWxrWFRzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhRN0NpQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDaGxMblI1Y0dVcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpUkdseVpXTjBhVzl1WVd4TWFXZG9kQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x5WldOMGFXOXVPaUJ1WlhjZ1FTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k2SUc1bGR5QndaUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pUY0c5MFRHbG5hSFFpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ2YzJsMGFXOXVPaUJ1WlhjZ1FTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHlaV04wYVc5dU9pQnVaWGNnUVN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTZJRzVsZHlCd1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpkR0Z1WTJVNklEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVZEYjNNNklEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmxiblZ0WW5KaFEyOXpPaUF3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldOaGVUb2dNQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pRYjJsdWRFeHBaMmgwSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOcGRHbHZiam9nYm1WM0lFRXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lCdVpYY2djR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNSaGJtTmxPaUF3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldOaGVUb2dNQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pJWlcxcGMzQm9aWEpsVEdsbmFIUWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjbVZqZEdsdmJqb2dibVYzSUVFc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOcmVVTnZiRzl5T2lCdVpYY2djR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2R5YjNWdVpFTnZiRzl5T2lCdVpYY2djR1VLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpVW1WamRFRnlaV0ZNYVdkb2RDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k2SUc1bGR5QndaU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRzl6YVhScGIyNDZJRzVsZHlCQkxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXeG1WMmxrZEdnNklHNWxkeUJCTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVd4bVNHVnBaMmgwT2lCdVpYY2dRUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhNeFcyVXVhV1JkSUQwZ2RDd2dkRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlPd3A5Q21aMWJtTjBhVzl1SUZBd0tDa2dld29nSUNBZ2JHVjBJSE14SUQwZ2UzMDdDaUFnSUNCeVpYUjFjbTRnZXdvZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9aU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY3pGYlpTNXBaRjBnSVQwOUlIWnZhV1FnTUNrZ2NtVjBkWEp1SUhNeFcyVXVhV1JkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZERzS0lDQWdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0tHVXVkSGx3WlNsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pFYVhKbFkzUnBiMjVoYkV4cFoyaDBJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMElEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkQ2FXRnpPaUF3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZE9iM0p0WVd4Q2FXRnpPaUF3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZFNZV1JwZFhNNklERXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDAxaGNGTnBlbVU2SUc1bGR5QmFDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbE53YjNSTWFXZG9kQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1FtbGhjem9nTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJoaFpHOTNUbTl5YldGc1FtbGhjem9nTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJoaFpHOTNVbUZrYVhWek9pQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkTllYQlRhWHBsT2lCdVpYY2dXZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pRYjJsdWRFeHBaMmgwSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZENhV0Z6T2lBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2RPYjNKdFlXeENhV0Z6T2lBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2RTWVdScGRYTTZJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5vWVdSdmQwMWhjRk5wZW1VNklHNWxkeUJhTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZERZVzFsY21GT1pXRnlPaUF4TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa2IzZERZVzFsY21GR1lYSTZJREZsTXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITXhXMlV1YVdSZElEMGdkQ3dnZERzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5T3dwOUNuWmhjaUJNTUNBOUlEQTdDbVoxYm1OMGFXOXVJRWt3S0hNeExDQmxLU0I3Q2lBZ0lDQnlaWFIxY200Z0tHVXVZMkZ6ZEZOb1lXUnZkeUEvSURJZ09pQXdLU0F0SUNoek1TNWpZWE4wVTJoaFpHOTNJRDhnTWlBNklEQXBJQ3NnS0dVdWJXRndJRDhnTVNBNklEQXBJQzBnS0hNeExtMWhjQ0EvSURFZ09pQXdLVHNLZlFwbWRXNWpkR2x2YmlCVk1DaHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0J1WlhjZ1F6QXNJRzRnUFNCUU1DZ3BMQ0JwSUQwZ2V3b2dJQ0FnSUNBZ0lIWmxjbk5wYjI0NklEQXNDaUFnSUNBZ0lDQWdhR0Z6YURvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JrYVhKbFkzUnBiMjVoYkV4bGJtZDBhRG9nTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJSEJ2YVc1MFRHVnVaM1JvT2lBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnYzNCdmRFeGxibWQwYURvZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUhKbFkzUkJjbVZoVEdWdVozUm9PaUF0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdhR1Z0YVV4bGJtZDBhRG9nTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJRzUxYlVScGNtVmpkR2x2Ym1Gc1UyaGhaRzkzY3pvZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUc1MWJWQnZhVzUwVTJoaFpHOTNjem9nTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJRzUxYlZOd2IzUlRhR0ZrYjNkek9pQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JuVnRVM0J2ZEUxaGNITTZJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQnVkVzFNYVdkb2RGQnliMkpsY3pvZ0xURUtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJR0Z0WW1sbGJuUTZJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQW9nSUNBZ0lDQWdJRjBzQ2lBZ0lDQWdJQ0FnY0hKdlltVTZJRnRkTEFvZ0lDQWdJQ0FnSUdScGNtVmpkR2x2Ym1Gc09pQmJYU3dLSUNBZ0lDQWdJQ0JrYVhKbFkzUnBiMjVoYkZOb1lXUnZkem9nVzEwc0NpQWdJQ0FnSUNBZ1pHbHlaV04wYVc5dVlXeFRhR0ZrYjNkTllYQTZJRnRkTEFvZ0lDQWdJQ0FnSUdScGNtVmpkR2x2Ym1Gc1UyaGhaRzkzVFdGMGNtbDRPaUJiWFN3S0lDQWdJQ0FnSUNCemNHOTBPaUJiWFN3S0lDQWdJQ0FnSUNCemNHOTBUR2xuYUhSTllYQTZJRnRkTEFvZ0lDQWdJQ0FnSUhOd2IzUlRhR0ZrYjNjNklGdGRMQW9nSUNBZ0lDQWdJSE53YjNSVGFHRmtiM2ROWVhBNklGdGRMQW9nSUNBZ0lDQWdJSE53YjNSTWFXZG9kRTFoZEhKcGVEb2dXMTBzQ2lBZ0lDQWdJQ0FnY21WamRFRnlaV0U2SUZ0ZExBb2dJQ0FnSUNBZ0lISmxZM1JCY21WaFRGUkRNVG9nYm5Wc2JDd0tJQ0FnSUNBZ0lDQnlaV04wUVhKbFlVeFVRekk2SUc1MWJHd3NDaUFnSUNBZ0lDQWdjRzlwYm5RNklGdGRMQW9nSUNBZ0lDQWdJSEJ2YVc1MFUyaGhaRzkzT2lCYlhTd0tJQ0FnSUNBZ0lDQndiMmx1ZEZOb1lXUnZkMDFoY0RvZ1cxMHNDaUFnSUNBZ0lDQWdjRzlwYm5SVGFHRmtiM2ROWVhSeWFYZzZJRnRkTEFvZ0lDQWdJQ0FnSUdobGJXazZJRnRkTEFvZ0lDQWdJQ0FnSUc1MWJWTndiM1JNYVdkb2RGTm9ZV1J2ZDNOWGFYUm9UV0Z3Y3pvZ01Dd0tJQ0FnSUNBZ0lDQnVkVzFNYVdkb2RGQnliMkpsY3pvZ01Bb2dJQ0FnZlRzS0lDQWdJR1p2Y2loc1pYUWdhQ0E5SURBN0lHZ2dQQ0E1T3lCb0t5c3BhUzV3Y205aVpTNXdkWE5vS0c1bGR5QkJLVHNLSUNBZ0lHeGxkQ0J5SUQwZ2JtVjNJRUVzSUdFZ1BTQnVaWGNnZW1Vc0lHOGdQU0J1WlhjZ2VtVTdDaUFnSUNCbWRXNWpkR2x2YmlCaktHZ3NJSFVwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaQ0E5SURBc0lHWWdQU0F3TENCdElEMGdNRHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRmtnUFNBd095QlpJRHdnT1RzZ1dTc3JLV2t1Y0hKdlltVmJXVjB1YzJWMEtEQXNJREFzSURBcE93b2dJQ0FnSUNBZ0lHeGxkQ0JmSUQwZ01Dd2daeUE5SURBc0lIQWdQU0F3TENCMklEMGdNQ3dnZUNBOUlEQXNJSGtnUFNBd0xDQmlJRDBnTUN3Z2R5QTlJREFzSUZJZ1BTQXdMQ0JKSUQwZ01Dd2dUU0E5SURBN0NpQWdJQ0FnSUNBZ2FDNXpiM0owS0Vrd0tUc0tJQ0FnSUNBZ0lDQnNaWFFnVkNBOUlIVWdQVDA5SUNFd0lEOGdUV0YwYUM1UVNTQTZJREU3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JaSUQwZ01Dd2dKQ0E5SUdndWJHVnVaM1JvT3lCWklEd2dKRHNnV1NzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGVWdQU0JvVzFsZExDQjZJRDBnVlM1amIyeHZjaXdnY1NBOUlGVXVhVzUwWlc1emFYUjVMQ0JJSUQwZ1ZTNWthWE4wWVc1alpTd2dibVVnUFNCVkxuTm9ZV1J2ZHlBbUppQlZMbk5vWVdSdmR5NXRZWEFnUHlCVkxuTm9ZV1J2ZHk1dFlYQXVkR1Y0ZEhWeVpTQTZJRzUxYkd3N0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoVkxtbHpRVzFpYVdWdWRFeHBaMmgwS1NCa0lDczlJSG91Y2lBcUlIRWdLaUJVTENCbUlDczlJSG91WnlBcUlIRWdLaUJVTENCdElDczlJSG91WWlBcUlIRWdLaUJVT3dvZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaFZMbWx6VEdsbmFIUlFjbTlpWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCWElEMGdNRHNnVnlBOElEazdJRmNyS3lscExuQnliMkpsVzFkZExtRmtaRk5qWVd4bFpGWmxZM1J2Y2loVkxuTm9MbU52WldabWFXTnBaVzUwYzF0WFhTd2djU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JOS3lzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvVlM1cGMwUnBjbVZqZEdsdmJtRnNUR2xuYUhRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JYSUQwZ2RDNW5aWFFvVlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9WeTVqYjJ4dmNpNWpiM0I1S0ZVdVkyOXNiM0lwTG0xMWJIUnBjR3g1VTJOaGJHRnlLRlV1YVc1MFpXNXphWFI1SUNvZ1ZDa3NJRlV1WTJGemRGTm9ZV1J2ZHlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCTElEMGdWUzV6YUdGa2IzY3NJRVFnUFNCdUxtZGxkQ2hWS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkVMbk5vWVdSdmQwSnBZWE1nUFNCTExtSnBZWE1zSUVRdWMyaGhaRzkzVG05eWJXRnNRbWxoY3lBOUlFc3VibTl5YldGc1FtbGhjeXdnUkM1emFHRmtiM2RTWVdScGRYTWdQU0JMTG5KaFpHbDFjeXdnUkM1emFHRmtiM2ROWVhCVGFYcGxJRDBnU3k1dFlYQlRhWHBsTENCcExtUnBjbVZqZEdsdmJtRnNVMmhoWkc5M1cxOWRJRDBnUkN3Z2FTNWthWEpsWTNScGIyNWhiRk5vWVdSdmQwMWhjRnRmWFNBOUlHNWxMQ0JwTG1ScGNtVmpkR2x2Ym1Gc1UyaGhaRzkzVFdGMGNtbDRXMTlkSUQwZ1ZTNXphR0ZrYjNjdWJXRjBjbWw0TENCNUt5czdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBMbVJwY21WamRHbHZibUZzVzE5ZElEMGdWeXdnWHlzck93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0ZVdWFYTlRjRzkwVEdsbmFIUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCWElEMGdkQzVuWlhRb1ZTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlhMbkJ2YzJsMGFXOXVMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloVkxtMWhkSEpwZUZkdmNteGtLU3dnVnk1amIyeHZjaTVqYjNCNUtIb3BMbTExYkhScGNHeDVVMk5oYkdGeUtIRWdLaUJVS1N3Z1Z5NWthWE4wWVc1alpTQTlJRWdzSUZjdVkyOXVaVU52Y3lBOUlFMWhkR2d1WTI5ektGVXVZVzVuYkdVcExDQlhMbkJsYm5WdFluSmhRMjl6SUQwZ1RXRjBhQzVqYjNNb1ZTNWhibWRzWlNBcUlDZ3hJQzBnVlM1d1pXNTFiV0p5WVNrcExDQlhMbVJsWTJGNUlEMGdWUzVrWldOaGVTd2dhUzV6Y0c5MFczQmRJRDBnVnpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkxJRDBnVlM1emFHRmtiM2M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ZTNXRZWEFnSmlZZ0tHa3VjM0J2ZEV4cFoyaDBUV0Z3VzFKZElEMGdWUzV0WVhBc0lGSXJLeXdnU3k1MWNHUmhkR1ZOWVhSeWFXTmxjeWhWS1N3Z1ZTNWpZWE4wVTJoaFpHOTNJQ1ltSUVrckt5a3NJR2t1YzNCdmRFeHBaMmgwVFdGMGNtbDRXM0JkSUQwZ1N5NXRZWFJ5YVhnc0lGVXVZMkZ6ZEZOb1lXUnZkeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JFSUQwZ2JpNW5aWFFvVlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSQzV6YUdGa2IzZENhV0Z6SUQwZ1N5NWlhV0Z6TENCRUxuTm9ZV1J2ZDA1dmNtMWhiRUpwWVhNZ1BTQkxMbTV2Y20xaGJFSnBZWE1zSUVRdWMyaGhaRzkzVW1Ga2FYVnpJRDBnU3k1eVlXUnBkWE1zSUVRdWMyaGhaRzkzVFdGd1UybDZaU0E5SUVzdWJXRndVMmw2WlN3Z2FTNXpjRzkwVTJoaFpHOTNXM0JkSUQwZ1JDd2dhUzV6Y0c5MFUyaGhaRzkzVFdGd1czQmRJRDBnYm1Vc0lIY3JLenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEFyS3pzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hWTG1selVtVmpkRUZ5WldGTWFXZG9kQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGY2dQU0IwTG1kbGRDaFZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRmN1WTI5c2IzSXVZMjl3ZVNoNktTNXRkV3gwYVhCc2VWTmpZV3hoY2loeEtTd2dWeTVvWVd4bVYybGtkR2d1YzJWMEtGVXVkMmxrZEdnZ0tpQXVOU3dnTUN3Z01Da3NJRmN1YUdGc1praGxhV2RvZEM1elpYUW9NQ3dnVlM1b1pXbG5hSFFnS2lBdU5Td2dNQ2tzSUdrdWNtVmpkRUZ5WldGYmRsMGdQU0JYTENCMkt5czdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1ZTNXBjMUJ2YVc1MFRHbG5hSFFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlhJRDBnZEM1blpYUW9WU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1Z5NWpiMnh2Y2k1amIzQjVLRlV1WTI5c2IzSXBMbTExYkhScGNHeDVVMk5oYkdGeUtGVXVhVzUwWlc1emFYUjVJQ29nVkNrc0lGY3VaR2x6ZEdGdVkyVWdQU0JWTG1ScGMzUmhibU5sTENCWExtUmxZMkY1SUQwZ1ZTNWtaV05oZVN3Z1ZTNWpZWE4wVTJoaFpHOTNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRXNnUFNCVkxuTm9ZV1J2ZHl3Z1JDQTlJRzR1WjJWMEtGVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVRdWMyaGhaRzkzUW1saGN5QTlJRXN1WW1saGN5d2dSQzV6YUdGa2IzZE9iM0p0WVd4Q2FXRnpJRDBnU3k1dWIzSnRZV3hDYVdGekxDQkVMbk5vWVdSdmQxSmhaR2wxY3lBOUlFc3VjbUZrYVhWekxDQkVMbk5vWVdSdmQwMWhjRk5wZW1VZ1BTQkxMbTFoY0ZOcGVtVXNJRVF1YzJoaFpHOTNRMkZ0WlhKaFRtVmhjaUE5SUVzdVkyRnRaWEpoTG01bFlYSXNJRVF1YzJoaFpHOTNRMkZ0WlhKaFJtRnlJRDBnU3k1allXMWxjbUV1Wm1GeUxDQnBMbkJ2YVc1MFUyaGhaRzkzVzJkZElEMGdSQ3dnYVM1d2IybHVkRk5vWVdSdmQwMWhjRnRuWFNBOUlHNWxMQ0JwTG5CdmFXNTBVMmhoWkc5M1RXRjBjbWw0VzJkZElEMGdWUzV6YUdGa2IzY3ViV0YwY21sNExDQmlLeXM3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwTG5CdmFXNTBXMmRkSUQwZ1Z5d2daeXNyT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRlV1YVhOSVpXMXBjM0JvWlhKbFRHbG5hSFFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlhJRDBnZEM1blpYUW9WU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JYTG5OcmVVTnZiRzl5TG1OdmNIa29WUzVqYjJ4dmNpa3ViWFZzZEdsd2JIbFRZMkZzWVhJb2NTQXFJRlFwTENCWExtZHliM1Z1WkVOdmJHOXlMbU52Y0hrb1ZTNW5jbTkxYm1SRGIyeHZjaWt1YlhWc2RHbHdiSGxUWTJGc1lYSW9jU0FxSUZRcExDQnBMbWhsYldsYmVGMGdQU0JYTENCNEt5czdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RpQStJREFnSmlZZ0tHVXVhWE5YWldKSFRESWdmSHdnY3pFdWFHRnpLQ0pQUlZOZmRHVjRkSFZ5WlY5bWJHOWhkRjlzYVc1bFlYSWlLU0E5UFQwZ0lUQWdQeUFvYVM1eVpXTjBRWEpsWVV4VVF6RWdQU0JzWlM1TVZFTmZSa3hQUVZSZk1Td2dhUzV5WldOMFFYSmxZVXhVUXpJZ1BTQnNaUzVNVkVOZlJreFBRVlJmTWlrZ09pQnpNUzVvWVhNb0lrOUZVMTkwWlhoMGRYSmxYMmhoYkdaZlpteHZZWFJmYkdsdVpXRnlJaWtnUFQwOUlDRXdJRDhnS0drdWNtVmpkRUZ5WldGTVZFTXhJRDBnYkdVdVRGUkRYMGhCVEVaZk1Td2dhUzV5WldOMFFYSmxZVXhVUXpJZ1BTQnNaUzVNVkVOZlNFRk1SbDh5S1NBNklHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklGVnVZV0pzWlNCMGJ5QjFjMlVnVW1WamRFRnlaV0ZNYVdkb2RDNGdUV2x6YzJsdVp5QlhaV0pIVENCbGVIUmxibk5wYjI1ekxpSXBLU3dnYVM1aGJXSnBaVzUwV3pCZElEMGdaQ3dnYVM1aGJXSnBaVzUwV3pGZElEMGdaaXdnYVM1aGJXSnBaVzUwV3pKZElEMGdiVHNLSUNBZ0lDQWdJQ0JzWlhRZ1R5QTlJR2t1YUdGemFEc0tJQ0FnSUNBZ0lDQW9UeTVrYVhKbFkzUnBiMjVoYkV4bGJtZDBhQ0FoUFQwZ1h5QjhmQ0JQTG5CdmFXNTBUR1Z1WjNSb0lDRTlQU0JuSUh4OElFOHVjM0J2ZEV4bGJtZDBhQ0FoUFQwZ2NDQjhmQ0JQTG5KbFkzUkJjbVZoVEdWdVozUm9JQ0U5UFNCMklIeDhJRTh1YUdWdGFVeGxibWQwYUNBaFBUMGdlQ0I4ZkNCUExtNTFiVVJwY21WamRHbHZibUZzVTJoaFpHOTNjeUFoUFQwZ2VTQjhmQ0JQTG01MWJWQnZhVzUwVTJoaFpHOTNjeUFoUFQwZ1lpQjhmQ0JQTG01MWJWTndiM1JUYUdGa2IzZHpJQ0U5UFNCM0lIeDhJRTh1Ym5WdFUzQnZkRTFoY0hNZ0lUMDlJRklnZkh3Z1R5NXVkVzFNYVdkb2RGQnliMkpsY3lBaFBUMGdUU2tnSmlZZ0tHa3VaR2x5WldOMGFXOXVZV3d1YkdWdVozUm9JRDBnWHl3Z2FTNXpjRzkwTG14bGJtZDBhQ0E5SUhBc0lHa3VjbVZqZEVGeVpXRXViR1Z1WjNSb0lEMGdkaXdnYVM1d2IybHVkQzVzWlc1bmRHZ2dQU0JuTENCcExtaGxiV2t1YkdWdVozUm9JRDBnZUN3Z2FTNWthWEpsWTNScGIyNWhiRk5vWVdSdmR5NXNaVzVuZEdnZ1BTQjVMQ0JwTG1ScGNtVmpkR2x2Ym1Gc1UyaGhaRzkzVFdGd0xteGxibWQwYUNBOUlIa3NJR2t1Y0c5cGJuUlRhR0ZrYjNjdWJHVnVaM1JvSUQwZ1lpd2dhUzV3YjJsdWRGTm9ZV1J2ZDAxaGNDNXNaVzVuZEdnZ1BTQmlMQ0JwTG5Od2IzUlRhR0ZrYjNjdWJHVnVaM1JvSUQwZ2R5d2dhUzV6Y0c5MFUyaGhaRzkzVFdGd0xteGxibWQwYUNBOUlIY3NJR2t1WkdseVpXTjBhVzl1WVd4VGFHRmtiM2ROWVhSeWFYZ3ViR1Z1WjNSb0lEMGdlU3dnYVM1d2IybHVkRk5vWVdSdmQwMWhkSEpwZUM1c1pXNW5kR2dnUFNCaUxDQnBMbk53YjNSTWFXZG9kRTFoZEhKcGVDNXNaVzVuZEdnZ1BTQjNJQ3NnVWlBdElFa3NJR2t1YzNCdmRFeHBaMmgwVFdGd0xteGxibWQwYUNBOUlGSXNJR2t1Ym5WdFUzQnZkRXhwWjJoMFUyaGhaRzkzYzFkcGRHaE5ZWEJ6SUQwZ1NTd2dhUzV1ZFcxTWFXZG9kRkJ5YjJKbGN5QTlJRTBzSUU4dVpHbHlaV04wYVc5dVlXeE1aVzVuZEdnZ1BTQmZMQ0JQTG5CdmFXNTBUR1Z1WjNSb0lEMGdaeXdnVHk1emNHOTBUR1Z1WjNSb0lEMGdjQ3dnVHk1eVpXTjBRWEpsWVV4bGJtZDBhQ0E5SUhZc0lFOHVhR1Z0YVV4bGJtZDBhQ0E5SUhnc0lFOHViblZ0UkdseVpXTjBhVzl1WVd4VGFHRmtiM2R6SUQwZ2VTd2dUeTV1ZFcxUWIybHVkRk5vWVdSdmQzTWdQU0JpTENCUExtNTFiVk53YjNSVGFHRmtiM2R6SUQwZ2R5d2dUeTV1ZFcxVGNHOTBUV0Z3Y3lBOUlGSXNJRTh1Ym5WdFRHbG5hSFJRY205aVpYTWdQU0JOTENCcExuWmxjbk5wYjI0Z1BTQk1NQ3NyS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHd29hQ3dnZFNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ01Dd2daaUE5SURBc0lHMGdQU0F3TENCZklEMGdNQ3dnWnlBOUlEQXNJSEFnUFNCMUxtMWhkSEpwZUZkdmNteGtTVzUyWlhKelpUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIWWdQU0F3TENCNElEMGdhQzVzWlc1bmRHZzdJSFlnUENCNE95QjJLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZVNBOUlHaGJkbDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2g1TG1selJHbHlaV04wYVc5dVlXeE1hV2RvZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0lnUFNCcExtUnBjbVZqZEdsdmJtRnNXMlJkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWWk1a2FYSmxZM1JwYjI0dWMyVjBSbkp2YlUxaGRISnBlRkJ2YzJsMGFXOXVLSGt1YldGMGNtbDRWMjl5YkdRcExDQnlMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloNUxuUmhjbWRsZEM1dFlYUnlhWGhYYjNKc1pDa3NJR0l1WkdseVpXTjBhVzl1TG5OMVlpaHlLU3dnWWk1a2FYSmxZM1JwYjI0dWRISmhibk5tYjNKdFJHbHlaV04wYVc5dUtIQXBMQ0JrS3lzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZVM1cGMxTndiM1JNYVdkb2RDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdJZ1BTQnBMbk53YjNSYmJWMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlMbkJ2YzJsMGFXOXVMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloNUxtMWhkSEpwZUZkdmNteGtLU3dnWWk1d2IzTnBkR2x2Ymk1aGNIQnNlVTFoZEhKcGVEUW9jQ2tzSUdJdVpHbHlaV04wYVc5dUxuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWg1TG0xaGRISnBlRmR2Y214a0tTd2djaTV6WlhSR2NtOXRUV0YwY21sNFVHOXphWFJwYjI0b2VTNTBZWEpuWlhRdWJXRjBjbWw0VjI5eWJHUXBMQ0JpTG1ScGNtVmpkR2x2Ymk1emRXSW9jaWtzSUdJdVpHbHlaV04wYVc5dUxuUnlZVzV6Wm05eWJVUnBjbVZqZEdsdmJpaHdLU3dnYlNzck93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hrdWFYTlNaV04wUVhKbFlVeHBaMmgwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZaUE5SUdrdWNtVmpkRUZ5WldGYlgxMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlMbkJ2YzJsMGFXOXVMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloNUxtMWhkSEpwZUZkdmNteGtLU3dnWWk1d2IzTnBkR2x2Ymk1aGNIQnNlVTFoZEhKcGVEUW9jQ2tzSUc4dWFXUmxiblJwZEhrb0tTd2dZUzVqYjNCNUtIa3ViV0YwY21sNFYyOXliR1FwTENCaExuQnlaVzExYkhScGNHeDVLSEFwTENCdkxtVjRkSEpoWTNSU2IzUmhkR2x2YmloaEtTd2dZaTVvWVd4bVYybGtkR2d1YzJWMEtIa3VkMmxrZEdnZ0tpQXVOU3dnTUN3Z01Da3NJR0l1YUdGc1praGxhV2RvZEM1elpYUW9NQ3dnZVM1b1pXbG5hSFFnS2lBdU5Td2dNQ2tzSUdJdWFHRnNabGRwWkhSb0xtRndjR3g1VFdGMGNtbDROQ2h2S1N3Z1lpNW9ZV3htU0dWcFoyaDBMbUZ3Y0d4NVRXRjBjbWw0TkNodktTd2dYeXNyT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSGt1YVhOUWIybHVkRXhwWjJoMEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWWlBOUlHa3VjRzlwYm5SYlpsMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlMbkJ2YzJsMGFXOXVMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloNUxtMWhkSEpwZUZkdmNteGtLU3dnWWk1d2IzTnBkR2x2Ymk1aGNIQnNlVTFoZEhKcGVEUW9jQ2tzSUdZckt6c0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoNUxtbHpTR1Z0YVhOd2FHVnlaVXhwWjJoMEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWWlBOUlHa3VhR1Z0YVZ0blhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSXVaR2x5WldOMGFXOXVMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloNUxtMWhkSEpwZUZkdmNteGtLU3dnWWk1a2FYSmxZM1JwYjI0dWRISmhibk5tYjNKdFJHbHlaV04wYVc5dUtIQXBMQ0JuS3lzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnZXdvZ0lDQWdJQ0FnSUhObGRIVndPaUJqTEFvZ0lDQWdJQ0FnSUhObGRIVndWbWxsZHpvZ2JDd0tJQ0FnSUNBZ0lDQnpkR0YwWlRvZ2FRb2dJQ0FnZlRzS2ZRcG1kVzVqZEdsdmJpQlFhQ2h6TVN3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCdVpYY2dWVEFvY3pFc0lHVXBMQ0J1SUQwZ1cxMHNJR2tnUFNCYlhUc0tJQ0FnSUdaMWJtTjBhVzl1SUhJb0tTQjdDaUFnSUNBZ0lDQWdiaTVzWlc1bmRHZ2dQU0F3TENCcExteGxibWQwYUNBOUlEQTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJoS0hVcElIc0tJQ0FnSUNBZ0lDQnVMbkIxYzJnb2RTazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJ2S0hVcElIc0tJQ0FnSUNBZ0lDQnBMbkIxYzJnb2RTazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJqS0hVcElIc0tJQ0FnSUNBZ0lDQjBMbk5sZEhWd0tHNHNJSFVwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2JDaDFLU0I3Q2lBZ0lDQWdJQ0FnZEM1elpYUjFjRlpwWlhjb2Jpd2dkU2s3Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnZXdvZ0lDQWdJQ0FnSUdsdWFYUTZJSElzQ2lBZ0lDQWdJQ0FnYzNSaGRHVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHbG5hSFJ6UVhKeVlYazZJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDNOQmNuSmhlVG9nYVN3S0lDQWdJQ0FnSUNBZ0lDQWdiR2xuYUhSek9pQjBDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6WlhSMWNFeHBaMmgwY3pvZ1l5d0tJQ0FnSUNBZ0lDQnpaWFIxY0V4cFoyaDBjMVpwWlhjNklHd3NDaUFnSUNBZ0lDQWdjSFZ6YUV4cFoyaDBPaUJoTEFvZ0lDQWdJQ0FnSUhCMWMyaFRhR0ZrYjNjNklHOEtJQ0FnSUgwN0NuMEtablZ1WTNScGIyNGdSREFvY3pFc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ2JtVjNJRmRsWVd0TllYQTdDaUFnSUNCbWRXNWpkR2x2YmlCdUtISXNJR0VnUFNBd0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUc4Z1BTQjBMbWRsZENoeUtTd2dZenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdieUE5UFQwZ2RtOXBaQ0F3SUQ4Z0tHTWdQU0J1WlhjZ1VHZ29jekVzSUdVcExDQjBMbk5sZENoeUxDQmJDaUFnSUNBZ0lDQWdJQ0FnSUdNS0lDQWdJQ0FnSUNCZEtTa2dPaUJoSUQ0OUlHOHViR1Z1WjNSb0lEOGdLR01nUFNCdVpYY2dVR2dvY3pFc0lHVXBMQ0J2TG5CMWMyZ29ZeWtwSURvZ1l5QTlJRzliWVYwc0lHTTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJwS0NrZ2V3b2dJQ0FnSUNBZ0lIUWdQU0J1WlhjZ1YyVmhhMDFoY0RzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCN0NpQWdJQ0FnSUNBZ1oyVjBPaUJ1TEFvZ0lDQWdJQ0FnSUdScGMzQnZjMlU2SUdrS0lDQWdJSDA3Q24wS2RtRnlJRkZ5SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJpZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selRXVnphRVJsY0hSb1RXRjBaWEpwWVd3Z1BTQWhNQ3dnZEdocGN5NTBlWEJsSUQwZ0lrMWxjMmhFWlhCMGFFMWhkR1Z5YVdGc0lpd2dkR2hwY3k1a1pYQjBhRkJoWTJ0cGJtY2dQU0JEWml3Z2RHaHBjeTV0WVhBZ1BTQnVkV3hzTENCMGFHbHpMbUZzY0doaFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRk5qWVd4bElEMGdNU3dnZEdocGN5NWthWE53YkdGalpXMWxiblJDYVdGeklEMGdNQ3dnZEdocGN5NTNhWEpsWm5KaGJXVWdQU0FoTVN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dnUFNBeExDQjBhR2x6TG5ObGRGWmhiSFZsY3lobEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbVJsY0hSb1VHRmphMmx1WnlBOUlHVXVaR1Z3ZEdoUVlXTnJhVzVuTENCMGFHbHpMbTFoY0NBOUlHVXViV0Z3TENCMGFHbHpMbUZzY0doaFRXRndJRDBnWlM1aGJIQm9ZVTFoY0N3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5STllYQWdQU0JsTG1ScGMzQnNZV05sYldWdWRFMWhjQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJUWTJGc1pTQTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeXdnZEdocGN5NTNhWEpsWm5KaGJXVWdQU0JsTG5kcGNtVm1jbUZ0WlN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dnUFNCbExuZHBjbVZtY21GdFpVeHBibVYzYVdSMGFDd2dkR2hwY3pzS0lDQWdJSDBLZlN3Z2FuSWdQU0JqYkdGemN5QmxlSFJsYm1SeklHSjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVhWE5OWlhOb1JHbHpkR0Z1WTJWTllYUmxjbWxoYkNBOUlDRXdMQ0IwYUdsekxuUjVjR1VnUFNBaVRXVnphRVJwYzNSaGJtTmxUV0YwWlhKcFlXd2lMQ0IwYUdsekxtMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVlXeHdhR0ZOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDQTlJRzUxYkd3c0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VnUFNBeExDQjBhR2x6TG1ScGMzQnNZV05sYldWdWRFSnBZWE1nUFNBd0xDQjBhR2x6TG5ObGRGWmhiSFZsY3lobEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbTFoY0NBOUlHVXViV0Z3TENCMGFHbHpMbUZzY0doaFRXRndJRDBnWlM1aGJIQm9ZVTFoY0N3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5STllYQWdQU0JsTG1ScGMzQnNZV05sYldWdWRFMWhjQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJUWTJGc1pTQTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeXdnZEdocGN6c0tJQ0FnSUgwS2ZTd2dUakFnUFNCZ2RtOXBaQ0J0WVdsdUtDa2dld29KWjJ4ZlVHOXphWFJwYjI0Z1BTQjJaV00wS0NCd2IzTnBkR2x2Yml3Z01TNHdJQ2s3Q24xZ0xDQlBNQ0E5SUdCMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCemFHRmtiM2RmY0dGemN6c0tkVzVwWm05eWJTQjJaV015SUhKbGMyOXNkWFJwYjI0N0NuVnVhV1p2Y20wZ1pteHZZWFFnY21Ga2FYVnpPd29qYVc1amJIVmtaU0E4Y0dGamEybHVaejRLZG05cFpDQnRZV2x1S0NrZ2V3b0pZMjl1YzNRZ1pteHZZWFFnYzJGdGNHeGxjeUE5SUdac2IyRjBLQ0JXVTAxZlUwRk5VRXhGVXlBcE93b0pabXh2WVhRZ2JXVmhiaUE5SURBdU1Ec0tDV1pzYjJGMElITnhkV0Z5WldSZmJXVmhiaUE5SURBdU1Ec0tDV1pzYjJGMElIVjJVM1J5YVdSbElEMGdjMkZ0Y0d4bGN5QThQU0F4TGpBZ1B5QXdMakFnT2lBeUxqQWdMeUFvSUhOaGJYQnNaWE1nTFNBeExqQWdLVHNLQ1dac2IyRjBJSFYyVTNSaGNuUWdQU0J6WVcxd2JHVnpJRHc5SURFdU1DQS9JREF1TUNBNklDMGdNUzR3T3dvSlptOXlJQ2dnWm14dllYUWdhU0E5SURBdU1Ec2dhU0E4SUhOaGJYQnNaWE03SUdrZ0t5c2dLU0I3Q2drSlpteHZZWFFnZFhaUFptWnpaWFFnUFNCMWRsTjBZWEowSUNzZ2FTQXFJSFYyVTNSeWFXUmxPd29KQ1NOcFptUmxaaUJJVDFKSldrOU9WRUZNWDFCQlUxTUtDUWtKZG1Wak1pQmthWE4wY21saWRYUnBiMjRnUFNCMWJuQmhZMnRTUjBKQlZHOHlTR0ZzWmlnZ2RHVjRkSFZ5WlRKRUtDQnphR0ZrYjNkZmNHRnpjeXdnS0NCbmJGOUdjbUZuUTI5dmNtUXVlSGtnS3lCMlpXTXlLQ0IxZGs5bVpuTmxkQ3dnTUM0d0lDa2dLaUJ5WVdScGRYTWdLU0F2SUhKbGMyOXNkWFJwYjI0Z0tTQXBPd29KQ1FsdFpXRnVJQ3M5SUdScGMzUnlhV0oxZEdsdmJpNTRPd29KQ1FsemNYVmhjbVZrWDIxbFlXNGdLejBnWkdsemRISnBZblYwYVc5dUxua2dLaUJrYVhOMGNtbGlkWFJwYjI0dWVTQXJJR1JwYzNSeWFXSjFkR2x2Ymk1NElDb2daR2x6ZEhKcFluVjBhVzl1TG5nN0Nna0pJMlZzYzJVS0NRa0pabXh2WVhRZ1pHVndkR2dnUFNCMWJuQmhZMnRTUjBKQlZHOUVaWEIwYUNnZ2RHVjRkSFZ5WlRKRUtDQnphR0ZrYjNkZmNHRnpjeXdnS0NCbmJGOUdjbUZuUTI5dmNtUXVlSGtnS3lCMlpXTXlLQ0F3TGpBc0lIVjJUMlptYzJWMElDa2dLaUJ5WVdScGRYTWdLU0F2SUhKbGMyOXNkWFJwYjI0Z0tTQXBPd29KQ1FsdFpXRnVJQ3M5SUdSbGNIUm9Pd29KQ1FsemNYVmhjbVZrWDIxbFlXNGdLejBnWkdWd2RHZ2dLaUJrWlhCMGFEc0tDUWtqWlc1a2FXWUtDWDBLQ1cxbFlXNGdQU0J0WldGdUlDOGdjMkZ0Y0d4bGN6c0tDWE54ZFdGeVpXUmZiV1ZoYmlBOUlITnhkV0Z5WldSZmJXVmhiaUF2SUhOaGJYQnNaWE03Q2dsbWJHOWhkQ0J6ZEdSZlpHVjJJRDBnYzNGeWRDZ2djM0YxWVhKbFpGOXRaV0Z1SUMwZ2JXVmhiaUFxSUcxbFlXNGdLVHNLQ1dkc1gwWnlZV2REYjJ4dmNpQTlJSEJoWTJzeVNHRnNabFJ2VWtkQ1FTZ2dkbVZqTWlnZ2JXVmhiaXdnYzNSa1gyUmxkaUFwSUNrN0NuMWdPd3BtZFc1amRHbHZiaUJHTUNoek1Td2daU3dnZENrZ2V3b2dJQ0FnYkdWMElHNGdQU0J1WlhjZ1VITXNJR2tnUFNCdVpYY2dXaXdnY2lBOUlHNWxkeUJhTENCaElEMGdibVYzSUdwbExDQnZJRDBnYm1WM0lGRnlLSHNLSUNBZ0lDQWdJQ0JrWlhCMGFGQmhZMnRwYm1jNklGQm1DaUFnSUNCOUtTd2dZeUE5SUc1bGR5QnFjaXdnYkNBOUlIdDlMQ0JvSUQwZ2RDNXRZWGhVWlhoMGRYSmxVMmw2WlN3Z2RTQTlJSHNLSUNBZ0lDQWdJQ0JiUW01ZE9pQkdkQ3dLSUNBZ0lDQWdJQ0JiUm5SZE9pQkNiaXdLSUNBZ0lDQWdJQ0JiWjI1ZE9pQm5iZ29nSUNBZ2ZTd2daQ0E5SUc1bGR5QnFkQ2g3Q2lBZ0lDQWdJQ0FnWkdWbWFXNWxjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQldVMDFmVTBGTlVFeEZVem9nT0FvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2RXNXBabTl5YlhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnYzJoaFpHOTNYM0JoYzNNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdWRXeHNDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RYUnBiMjQ2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1dnb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnlZV1JwZFhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBMENpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUhabGNuUmxlRk5vWVdSbGNqb2dUakFzQ2lBZ0lDQWdJQ0FnWm5KaFoyMWxiblJUYUdGa1pYSTZJRTh3Q2lBZ0lDQjlLU3dnWmlBOUlHUXVZMnh2Ym1Vb0tUc0tJQ0FnSUdZdVpHVm1hVzVsY3k1SVQxSkpXazlPVkVGTVgxQkJVMU1nUFNBeE93b2dJQ0FnYkdWMElHMGdQU0J1WlhjZ1IyVTdDaUFnSUNCdExuTmxkRUYwZEhKcFluVjBaU2dpY0c5emFYUnBiMjRpTENCdVpYY2daWFFvYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2hiQ2lBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdMalVzQ2lBZ0lDQWdJQ0FnTXl3S0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQXVOU3dLSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBekxBb2dJQ0FnSUNBZ0lDNDFDaUFnSUNCZEtTd2dNeWtwT3dvZ0lDQWdiR1YwSUY4Z1BTQnVaWGNnVFhRb2JTd2daQ2tzSUdjZ1BTQjBhR2x6T3dvZ0lDQWdkR2hwY3k1bGJtRmliR1ZrSUQwZ0lURXNJSFJvYVhNdVlYVjBiMVZ3WkdGMFpTQTlJQ0V3TENCMGFHbHpMbTVsWldSelZYQmtZWFJsSUQwZ0lURXNJSFJvYVhNdWRIbHdaU0E5SUdOa093b2dJQ0FnYkdWMElIQWdQU0IwYUdsekxuUjVjR1U3Q2lBZ0lDQjBhR2x6TG5KbGJtUmxjaUE5SUdaMWJtTjBhVzl1S0dJc0lIY3NJRklwSUhzS0lDQWdJQ0FnSUNCcFppQW9aeTVsYm1GaWJHVmtJRDA5UFNBaE1TQjhmQ0JuTG1GMWRHOVZjR1JoZEdVZ1BUMDlJQ0V4SUNZbUlHY3VibVZsWkhOVmNHUmhkR1VnUFQwOUlDRXhJSHg4SUdJdWJHVnVaM1JvSUQwOVBTQXdLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdiR1YwSUVrZ1BTQnpNUzVuWlhSU1pXNWtaWEpVWVhKblpYUW9LU3dnVFNBOUlITXhMbWRsZEVGamRHbDJaVU4xWW1WR1lXTmxLQ2tzSUZRZ1BTQnpNUzVuWlhSQlkzUnBkbVZOYVhCdFlYQk1aWFpsYkNncExDQlBJRDBnY3pFdWMzUmhkR1U3Q2lBZ0lDQWdJQ0FnVHk1elpYUkNiR1Z1WkdsdVp5aEViaWtzSUU4dVluVm1abVZ5Y3k1amIyeHZjaTV6WlhSRGJHVmhjaWd4TENBeExDQXhMQ0F4S1N3Z1R5NWlkV1ptWlhKekxtUmxjSFJvTG5ObGRGUmxjM1FvSVRBcExDQlBMbk5sZEZOamFYTnpiM0pVWlhOMEtDRXhLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1dTQTlJSEFnSVQwOUlIQnVJQ1ltSUhSb2FYTXVkSGx3WlNBOVBUMGdjRzRzSUNRZ1BTQndJRDA5UFNCd2JpQW1KaUIwYUdsekxuUjVjR1VnSVQwOUlIQnVPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdWU0E5SURBc0lIb2dQU0JpTG14bGJtZDBhRHNnVlNBOElIbzdJRlVyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeElEMGdZbHRWWFN3Z1NDQTlJSEV1YzJoaFpHOTNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9TQ0E5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVTJoaFpHOTNUV0Z3T2lJc0lIRXNJQ0pvWVhNZ2JtOGdjMmhoWkc5M0xpSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VndVlYVjBiMVZ3WkdGMFpTQTlQVDBnSVRFZ0ppWWdTQzV1WldWa2MxVndaR0YwWlNBOVBUMGdJVEVwSUdOdmJuUnBiblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBMbU52Y0hrb1NDNXRZWEJUYVhwbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNWxJRDBnU0M1blpYUkdjbUZ0WlVWNGRHVnVkSE1vS1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0drdWJYVnNkR2x3Ykhrb2JtVXBMQ0J5TG1OdmNIa29TQzV0WVhCVGFYcGxLU3dnS0drdWVDQStJR2dnZkh3Z2FTNTVJRDRnYUNrZ0ppWWdLR2t1ZUNBK0lHZ2dKaVlnS0hJdWVDQTlJRTFoZEdndVpteHZiM0lvYUNBdklHNWxMbmdwTENCcExuZ2dQU0J5TG5nZ0tpQnVaUzU0TENCSUxtMWhjRk5wZW1VdWVDQTlJSEl1ZUNrc0lHa3VlU0ErSUdnZ0ppWWdLSEl1ZVNBOUlFMWhkR2d1Wm14dmIzSW9hQ0F2SUc1bExua3BMQ0JwTG5rZ1BTQnlMbmtnS2lCdVpTNTVMQ0JJTG0xaGNGTnBlbVV1ZVNBOUlISXVlU2twTENCSUxtMWhjQ0E5UFQwZ2JuVnNiQ0I4ZkNCWklEMDlQU0FoTUNCOGZDQWtJRDA5UFNBaE1Da2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVzZ1BTQjBhR2x6TG5SNWNHVWdJVDA5SUhCdUlEOGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxcGJrWnBiSFJsY2pvZ2NIUXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGblJtbHNkR1Z5T2lCd2RBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQTZJSHQ5T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnU0M1dFlYQWdJVDA5SUc1MWJHd2dKaVlnU0M1dFlYQXVaR2x6Y0c5elpTZ3BMQ0JJTG0xaGNDQTlJRzVsZHlCeGRDaHBMbmdzSUdrdWVTd2dTeWtzSUVndWJXRndMblJsZUhSMWNtVXVibUZ0WlNBOUlIRXVibUZ0WlNBcklDSXVjMmhoWkc5M1RXRndJaXdnU0M1allXMWxjbUV1ZFhCa1lYUmxVSEp2YW1WamRHbHZiazFoZEhKcGVDZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSE14TG5ObGRGSmxibVJsY2xSaGNtZGxkQ2hJTG0xaGNDa3NJSE14TG1Oc1pXRnlLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JYSUQwZ1NDNW5aWFJXYVdWM2NHOXlkRU52ZFc1MEtDazdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnU3lBOUlEQTdJRXNnUENCWE95QkxLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFUWdQU0JJTG1kbGRGWnBaWGR3YjNKMEtFc3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZUzV6WlhRb2NpNTRJQ29nUkM1NExDQnlMbmtnS2lCRUxua3NJSEl1ZUNBcUlFUXVlaXdnY2k1NUlDb2dSQzUzS1N3Z1R5NTJhV1YzY0c5eWRDaGhLU3dnU0M1MWNHUmhkR1ZOWVhSeWFXTmxjeWh4TENCTEtTd2diaUE5SUVndVoyVjBSbkoxYzNSMWJTZ3BMQ0I1S0hjc0lGSXNJRWd1WTJGdFpYSmhMQ0J4TENCMGFHbHpMblI1Y0dVcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lFZ3VhWE5RYjJsdWRFeHBaMmgwVTJoaFpHOTNJQ0U5UFNBaE1DQW1KaUIwYUdsekxuUjVjR1VnUFQwOUlIQnVJQ1ltSUhZb1NDd2dVaWtzSUVndWJtVmxaSE5WY0dSaGRHVWdQU0FoTVRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NDQTlJSFJvYVhNdWRIbHdaU3dnWnk1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V4TENCek1TNXpaWFJTWlc1a1pYSlVZWEpuWlhRb1NTd2dUU3dnVkNrN0NpQWdJQ0I5T3dvZ0lDQWdablZ1WTNScGIyNGdkaWhpTENCM0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUZJZ1BTQmxMblZ3WkdGMFpTaGZLVHNLSUNBZ0lDQWdJQ0JrTG1SbFptbHVaWE11VmxOTlgxTkJUVkJNUlZNZ0lUMDlJR0l1WW14MWNsTmhiWEJzWlhNZ0ppWWdLR1F1WkdWbWFXNWxjeTVXVTAxZlUwRk5VRXhGVXlBOUlHSXVZbXgxY2xOaGJYQnNaWE1zSUdZdVpHVm1hVzVsY3k1V1UwMWZVMEZOVUV4RlV5QTlJR0l1WW14MWNsTmhiWEJzWlhNc0lHUXVibVZsWkhOVmNHUmhkR1VnUFNBaE1Dd2daaTV1WldWa2MxVndaR0YwWlNBOUlDRXdLU3dnWWk1dFlYQlFZWE56SUQwOVBTQnVkV3hzSUNZbUlDaGlMbTFoY0ZCaGMzTWdQU0J1WlhjZ2NYUW9hUzU0TENCcExua3BLU3dnWkM1MWJtbG1iM0p0Y3k1emFHRmtiM2RmY0dGemN5NTJZV3gxWlNBOUlHSXViV0Z3TG5SbGVIUjFjbVVzSUdRdWRXNXBabTl5YlhNdWNtVnpiMngxZEdsdmJpNTJZV3gxWlNBOUlHSXViV0Z3VTJsNlpTd2daQzUxYm1sbWIzSnRjeTV5WVdScGRYTXVkbUZzZFdVZ1BTQmlMbkpoWkdsMWN5d2djekV1YzJWMFVtVnVaR1Z5VkdGeVoyVjBLR0l1YldGd1VHRnpjeWtzSUhNeExtTnNaV0Z5S0Nrc0lITXhMbkpsYm1SbGNrSjFabVpsY2tScGNtVmpkQ2gzTENCdWRXeHNMQ0JTTENCa0xDQmZMQ0J1ZFd4c0tTd2daaTUxYm1sbWIzSnRjeTV6YUdGa2IzZGZjR0Z6Y3k1MllXeDFaU0E5SUdJdWJXRndVR0Z6Y3k1MFpYaDBkWEpsTENCbUxuVnVhV1p2Y20xekxuSmxjMjlzZFhScGIyNHVkbUZzZFdVZ1BTQmlMbTFoY0ZOcGVtVXNJR1l1ZFc1cFptOXliWE11Y21Ga2FYVnpMblpoYkhWbElEMGdZaTV5WVdScGRYTXNJSE14TG5ObGRGSmxibVJsY2xSaGNtZGxkQ2hpTG0xaGNDa3NJSE14TG1Oc1pXRnlLQ2tzSUhNeExuSmxibVJsY2tKMVptWmxja1JwY21WamRDaDNMQ0J1ZFd4c0xDQlNMQ0JtTENCZkxDQnVkV3hzS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlIZ29ZaXdnZHl3Z1Vpd2dTU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQk5JRDBnYm5Wc2JDd2dWQ0E5SUZJdWFYTlFiMmx1ZEV4cFoyaDBJRDA5UFNBaE1DQS9JR0l1WTNWemRHOXRSR2x6ZEdGdVkyVk5ZWFJsY21saGJDQTZJR0l1WTNWemRHOXRSR1Z3ZEdoTllYUmxjbWxoYkRzS0lDQWdJQ0FnSUNCcFppQW9WQ0FoUFQwZ2RtOXBaQ0F3S1NCTklEMGdWRHNLSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hOSUQwZ1VpNXBjMUJ2YVc1MFRHbG5hSFFnUFQwOUlDRXdJRDhnWXlBNklHOHNJSE14TG14dlkyRnNRMnhwY0hCcGJtZEZibUZpYkdWa0lDWW1JSGN1WTJ4cGNGTm9ZV1J2ZDNNZ1BUMDlJQ0V3SUNZbUlFRnljbUY1TG1selFYSnlZWGtvZHk1amJHbHdjR2x1WjFCc1lXNWxjeWtnSmlZZ2R5NWpiR2x3Y0dsdVoxQnNZVzVsY3k1c1pXNW5kR2dnSVQwOUlEQWdmSHdnZHk1a2FYTndiR0ZqWlcxbGJuUk5ZWEFnSmlZZ2R5NWthWE53YkdGalpXMWxiblJUWTJGc1pTQWhQVDBnTUNCOGZDQjNMbUZzY0doaFRXRndJQ1ltSUhjdVlXeHdhR0ZVWlhOMElENGdNQ0I4ZkNCM0xtMWhjQ0FtSmlCM0xtRnNjR2hoVkdWemRDQStJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUU4Z1BTQk5MblYxYVdRc0lGa2dQU0IzTG5WMWFXUXNJQ1FnUFNCc1cwOWRPd29nSUNBZ0lDQWdJQ0FnSUNBa0lEMDlQU0IyYjJsa0lEQWdKaVlnS0NRZ1BTQjdmU3dnYkZ0UFhTQTlJQ1FwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVlNBOUlDUmJXVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lGVWdQVDA5SUhadmFXUWdNQ0FtSmlBb1ZTQTlJRTB1WTJ4dmJtVW9LU3dnSkZ0WlhTQTlJRlVwTENCTklEMGdWVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYVdZZ0tFMHVkbWx6YVdKc1pTQTlJSGN1ZG1semFXSnNaU3dnVFM1M2FYSmxabkpoYldVZ1BTQjNMbmRwY21WbWNtRnRaU3dnU1NBOVBUMGdjRzRnUHlCTkxuTnBaR1VnUFNCM0xuTm9ZV1J2ZDFOcFpHVWdJVDA5SUc1MWJHd2dQeUIzTG5Ob1lXUnZkMU5wWkdVZ09pQjNMbk5wWkdVZ09pQk5Mbk5wWkdVZ1BTQjNMbk5vWVdSdmQxTnBaR1VnSVQwOUlHNTFiR3dnUHlCM0xuTm9ZV1J2ZDFOcFpHVWdPaUIxVzNjdWMybGtaVjBzSUUwdVlXeHdhR0ZOWVhBZ1BTQjNMbUZzY0doaFRXRndMQ0JOTG1Gc2NHaGhWR1Z6ZENBOUlIY3VZV3h3YUdGVVpYTjBMQ0JOTG0xaGNDQTlJSGN1YldGd0xDQk5MbU5zYVhCVGFHRmtiM2R6SUQwZ2R5NWpiR2x3VTJoaFpHOTNjeXdnVFM1amJHbHdjR2x1WjFCc1lXNWxjeUE5SUhjdVkyeHBjSEJwYm1kUWJHRnVaWE1zSUUwdVkyeHBjRWx1ZEdWeWMyVmpkR2x2YmlBOUlIY3VZMnhwY0VsdWRHVnljMlZqZEdsdmJpd2dUUzVrYVhOd2JHRmpaVzFsYm5STllYQWdQU0IzTG1ScGMzQnNZV05sYldWdWRFMWhjQ3dnVFM1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBOUlIY3VaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVXNJRTB1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeUE5SUhjdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3l3Z1RTNTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ2dQU0IzTG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUN3Z1RTNXNhVzVsZDJsa2RHZ2dQU0IzTG14cGJtVjNhV1IwYUN3Z1VpNXBjMUJ2YVc1MFRHbG5hSFFnUFQwOUlDRXdJQ1ltSUUwdWFYTk5aWE5vUkdsemRHRnVZMlZOWVhSbGNtbGhiQ0E5UFQwZ0lUQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRThnUFNCek1TNXdjbTl3WlhKMGFXVnpMbWRsZENoTktUc0tJQ0FnSUNBZ0lDQWdJQ0FnVHk1c2FXZG9kQ0E5SUZJN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCTk93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdlU2hpTENCM0xDQlNMQ0JKTENCTktTQjdDaUFnSUNBZ0lDQWdhV1lnS0dJdWRtbHphV0pzWlNBOVBUMGdJVEVwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0JwWmlBb1lpNXNZWGxsY25NdWRHVnpkQ2gzTG14aGVXVnljeWtnSmlZZ0tHSXVhWE5OWlhOb0lIeDhJR0l1YVhOTWFXNWxJSHg4SUdJdWFYTlFiMmx1ZEhNcElDWW1JQ2hpTG1OaGMzUlRhR0ZrYjNjZ2ZId2dZaTV5WldObGFYWmxVMmhoWkc5M0lDWW1JRTBnUFQwOUlIQnVLU0FtSmlBb0lXSXVabkoxYzNSMWJVTjFiR3hsWkNCOGZDQnVMbWx1ZEdWeWMyVmpkSE5QWW1wbFkzUW9ZaWtwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR0l1Ylc5a1pXeFdhV1YzVFdGMGNtbDRMbTExYkhScGNHeDVUV0YwY21salpYTW9VaTV0WVhSeWFYaFhiM0pzWkVsdWRtVnljMlVzSUdJdWJXRjBjbWw0VjI5eWJHUXBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdXU0E5SUdVdWRYQmtZWFJsS0dJcExDQWtJRDBnWWk1dFlYUmxjbWxoYkRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29KQ2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlZJRDBnV1M1bmNtOTFjSE03Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSG9nUFNBd0xDQnhJRDBnVlM1c1pXNW5kR2c3SUhvZ1BDQnhPeUI2S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCSUlEMGdWVnQ2WFN3Z2JtVWdQU0FrVzBndWJXRjBaWEpwWVd4SmJtUmxlRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzVsSUNZbUlHNWxMblpwYzJsaWJHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZjZ1BTQjRLR0lzSUc1bExDQkpMQ0JOS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3pFdWNtVnVaR1Z5UW5WbVptVnlSR2x5WldOMEtGSXNJRzUxYkd3c0lGa3NJRmNzSUdJc0lFZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2drTG5acGMybGliR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlZJRDBnZUNoaUxDQWtMQ0JKTENCTktUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITXhMbkpsYm1SbGNrSjFabVpsY2tScGNtVmpkQ2hTTENCdWRXeHNMQ0JaTENCVkxDQmlMQ0J1ZFd4c0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdUeUE5SUdJdVkyaHBiR1J5Wlc0N0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCWklEMGdNQ3dnSkNBOUlFOHViR1Z1WjNSb095QlpJRHdnSkRzZ1dTc3JLWGtvVDF0WlhTd2dkeXdnVWl3Z1NTd2dUU2s3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnUWpBb2N6RXNJR1VzSUhRcElIc0tJQ0FnSUd4bGRDQnVJRDBnZEM1cGMxZGxZa2RNTWpzS0lDQWdJR1oxYm1OMGFXOXVJR2tvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRkFnUFNBaE1Td2dZMlVnUFNCdVpYY2dhbVVzSUdGbElEMGdiblZzYkN3Z1oyVWdQU0J1WlhjZ2FtVW9NQ3dnTUN3Z01Dd2dNQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBUV0Z6YXpvZ1puVnVZM1JwYjI0b2RXVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZsSUNFOVBTQjFaU0FtSmlBaFVDQW1KaUFvY3pFdVkyOXNiM0pOWVhOcktIVmxMQ0IxWlN3Z2RXVXNJSFZsS1N3Z1lXVWdQU0IxWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITmxkRXh2WTJ0bFpEb2dablZ1WTNScGIyNG9kV1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZBZ1BTQjFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFEyeGxZWEk2SUdaMWJtTjBhVzl1S0hWbExDQlJMQ0JpWlN3Z1JtVXNJRUYwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCQmRDQTlQVDBnSVRBZ0ppWWdLSFZsSUNvOUlFWmxMQ0JSSUNvOUlFWmxMQ0JpWlNBcVBTQkdaU2tzSUdObExuTmxkQ2gxWlN3Z1VTd2dZbVVzSUVabEtTd2daMlV1WlhGMVlXeHpLR05sS1NBOVBUMGdJVEVnSmlZZ0tITXhMbU5zWldGeVEyOXNiM0lvZFdVc0lGRXNJR0psTENCR1pTa3NJR2RsTG1OdmNIa29ZMlVwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpaWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1VDQTlJQ0V4TENCaFpTQTlJRzUxYkd3c0lHZGxMbk5sZENndE1Td2dNQ3dnTUN3Z01DazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOU93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdjaWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdVQ0E5SUNFeExDQmpaU0E5SUc1MWJHd3NJR0ZsSUQwZ2JuVnNiQ3dnWjJVZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lITmxkRlJsYzNRNklHWjFibU4wYVc5dUtIVmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxWlNBL0lFVmxLSE14TGtSRlVGUklYMVJGVTFRcElEb2dWR1VvY3pFdVJFVlFWRWhmVkVWVFZDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSE5sZEUxaGMyczZJR1oxYm1OMGFXOXVLSFZsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCalpTQWhQVDBnZFdVZ0ppWWdJVkFnSmlZZ0tITXhMbVJsY0hSb1RXRnpheWgxWlNrc0lHTmxJRDBnZFdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnpaWFJHZFc1ak9pQm1kVzVqZEdsdmJpaDFaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRmxJQ0U5UFNCMVpTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ2gxWlNsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdibVk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek1TNWtaWEIwYUVaMWJtTW9jekV1VGtWV1JWSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnYzJZNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpNUzVrWlhCMGFFWjFibU1vY3pFdVFVeFhRVmxUS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElISm1PZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3pFdVpHVndkR2hHZFc1aktITXhMa3hGVTFNcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdkVzg2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek1TNWtaWEIwYUVaMWJtTW9jekV1VEVWUlZVRk1LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUdGbU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjekV1WkdWd2RHaEdkVzVqS0hNeExrVlJWVUZNS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElHOW1PZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3pFdVpHVndkR2hHZFc1aktITXhMa2RGVVZWQlRDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JqWmpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITXhMbVJsY0hSb1JuVnVZeWh6TVM1SFVrVkJWRVZTS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElHeG1PZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3pFdVpHVndkR2hHZFc1aktITXhMazVQVkVWUlZVRk1LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjekV1WkdWd2RHaEdkVzVqS0hNeExreEZVVlZCVENrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGbElEMGdkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhObGRFeHZZMnRsWkRvZ1puVnVZM1JwYjI0b2RXVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkFnUFNCMVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjMlYwUTJ4bFlYSTZJR1oxYm1OMGFXOXVLSFZsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCblpTQWhQVDBnZFdVZ0ppWWdLSE14TG1Oc1pXRnlSR1Z3ZEdnb2RXVXBMQ0JuWlNBOUlIVmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnY21WelpYUTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVUNBOUlDRXhMQ0JqWlNBOUlHNTFiR3dzSUdGbElEMGdiblZzYkN3Z1oyVWdQU0J1ZFd4c093b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlRzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHRW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElGQWdQU0FoTVN3Z1kyVWdQU0J1ZFd4c0xDQmhaU0E5SUc1MWJHd3NJR2RsSUQwZ2JuVnNiQ3dnZFdVZ1BTQnVkV3hzTENCUklEMGdiblZzYkN3Z1ltVWdQU0J1ZFd4c0xDQkdaU0E5SUc1MWJHd3NJRUYwSUQwZ2JuVnNiRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJQ0FnSUNCelpYUlVaWE4wT2lCbWRXNWpkR2x2YmloMGRDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVQ0I4ZkNBb2RIUWdQeUJGWlNoek1TNVRWRVZPUTBsTVgxUkZVMVFwSURvZ1ZHVW9jekV1VTFSRlRrTkpURjlVUlZOVUtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSE5sZEUxaGMyczZJR1oxYm1OMGFXOXVLSFIwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCalpTQWhQVDBnZEhRZ0ppWWdJVkFnSmlZZ0tITXhMbk4wWlc1amFXeE5ZWE5yS0hSMEtTd2dZMlVnUFNCMGRDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSE5sZEVaMWJtTTZJR1oxYm1OMGFXOXVLSFIwTENCMGJpd2dVblFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoaFpTQWhQVDBnZEhRZ2ZId2daMlVnSVQwOUlIUnVJSHg4SUhWbElDRTlQU0JTZENrZ0ppWWdLSE14TG5OMFpXNWphV3hHZFc1aktIUjBMQ0IwYml3Z1VuUXBMQ0JoWlNBOUlIUjBMQ0JuWlNBOUlIUnVMQ0IxWlNBOUlGSjBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFQzQTZJR1oxYm1OMGFXOXVLSFIwTENCMGJpd2dVblFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoUklDRTlQU0IwZENCOGZDQmlaU0FoUFQwZ2RHNGdmSHdnUm1VZ0lUMDlJRkowS1NBbUppQW9jekV1YzNSbGJtTnBiRTl3S0hSMExDQjBiaXdnVW5RcExDQlJJRDBnZEhRc0lHSmxJRDBnZEc0c0lFWmxJRDBnVW5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnpaWFJNYjJOclpXUTZJR1oxYm1OMGFXOXVLSFIwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUUlEMGdkSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhObGRFTnNaV0Z5T2lCbWRXNWpkR2x2YmloMGRDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRWFFnSVQwOUlIUjBJQ1ltSUNoek1TNWpiR1ZoY2xOMFpXNWphV3dvZEhRcExDQkJkQ0E5SUhSMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6WlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVQ0E5SUNFeExDQmpaU0E5SUc1MWJHd3NJR0ZsSUQwZ2JuVnNiQ3dnWjJVZ1BTQnVkV3hzTENCMVpTQTlJRzUxYkd3c0lGRWdQU0J1ZFd4c0xDQmlaU0E5SUc1MWJHd3NJRVpsSUQwZ2JuVnNiQ3dnUVhRZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lIMEtJQ0FnSUd4bGRDQnZJRDBnYm1WM0lHa3NJR01nUFNCdVpYY2djaXdnYkNBOUlHNWxkeUJoTENCb0lEMGdibVYzSUZkbFlXdE5ZWEFzSUhVZ1BTQnVaWGNnVjJWaGEwMWhjQ3dnWkNBOUlIdDlMQ0JtSUQwZ2UzMHNJRzBnUFNCdVpYY2dWMlZoYTAxaGNDd2dYeUE5SUZ0ZExDQm5JRDBnYm5Wc2JDd2djQ0E5SUNFeExDQjJJRDBnYm5Wc2JDd2dlQ0E5SUc1MWJHd3NJSGtnUFNCdWRXeHNMQ0JpSUQwZ2JuVnNiQ3dnZHlBOUlHNTFiR3dzSUZJZ1BTQnVkV3hzTENCSklEMGdiblZzYkN3Z1RTQTlJQ0V4TENCVUlEMGdiblZzYkN3Z1R5QTlJRzUxYkd3c0lGa2dQU0J1ZFd4c0xDQWtJRDBnYm5Wc2JDd2dWU0E5SUc1MWJHd3NJSG9nUFNCek1TNW5aWFJRWVhKaGJXVjBaWElvY3pFdVRVRllYME5QVFVKSlRrVkVYMVJGV0ZSVlVrVmZTVTFCUjBWZlZVNUpWRk1wTENCeElEMGdJVEVzSUVnZ1BTQXdMQ0J1WlNBOUlITXhMbWRsZEZCaGNtRnRaWFJsY2loek1TNVdSVkpUU1U5T0tUc0tJQ0FnSUc1bExtbHVaR1Y0VDJZb0lsZGxZa2RNSWlrZ0lUMDlJQzB4SUQ4Z0tFZ2dQU0J3WVhKelpVWnNiMkYwS0M5ZVYyVmlSMHdnS0Z4a0tTOHVaWGhsWXlodVpTbGJNVjBwTENCeElEMGdTQ0ErUFNBeEtTQTZJRzVsTG1sdVpHVjRUMllvSWs5d1pXNUhUQ0JGVXlJcElDRTlQU0F0TVNBbUppQW9TQ0E5SUhCaGNuTmxSbXh2WVhRb0wxNVBjR1Z1UjB3Z1JWTWdLRnhrS1M4dVpYaGxZeWh1WlNsYk1WMHBMQ0J4SUQwZ1NDQStQU0F5S1RzS0lDQWdJR3hsZENCWElEMGdiblZzYkN3Z1N5QTlJSHQ5TENCRUlEMGdjekV1WjJWMFVHRnlZVzFsZEdWeUtITXhMbE5EU1ZOVFQxSmZRazlZS1N3Z1J5QTlJSE14TG1kbGRGQmhjbUZ0WlhSbGNpaHpNUzVXU1VWWFVFOVNWQ2tzSUdobElEMGdibVYzSUdwbEtDa3Vabkp2YlVGeWNtRjVLRVFwTENCbVpTQTlJRzVsZHlCcVpTZ3BMbVp5YjIxQmNuSmhlU2hIS1RzS0lDQWdJR1oxYm1OMGFXOXVJRjlsS0ZBc0lHTmxMQ0JoWlN3Z1oyVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RXVWdQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTZzBLU3dnVVNBOUlITXhMbU55WldGMFpWUmxlSFIxY21Vb0tUc0tJQ0FnSUNBZ0lDQnpNUzVpYVc1a1ZHVjRkSFZ5WlNoUUxDQlJLU3dnY3pFdWRHVjRVR0Z5WVcxbGRHVnlhU2hRTENCek1TNVVSVmhVVlZKRlgwMUpUbDlHU1V4VVJWSXNJSE14TGs1RlFWSkZVMVFwTENCek1TNTBaWGhRWVhKaGJXVjBaWEpwS0ZBc0lITXhMbFJGV0ZSVlVrVmZUVUZIWDBaSlRGUkZVaXdnY3pFdVRrVkJVa1ZUVkNrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaVpTQTlJREE3SUdKbElEd2dZV1U3SUdKbEt5c3BiaUFtSmlBb1VDQTlQVDBnY3pFdVZFVllWRlZTUlY4elJDQjhmQ0JRSUQwOVBTQnpNUzVVUlZoVVZWSkZYekpFWDBGU1VrRlpLU0EvSUhNeExuUmxlRWx0WVdkbE0wUW9ZMlVzSURBc0lITXhMbEpIUWtFc0lERXNJREVzSUdkbExDQXdMQ0J6TVM1U1IwSkJMQ0J6TVM1VlRsTkpSMDVGUkY5Q1dWUkZMQ0IxWlNrZ09pQnpNUzUwWlhoSmJXRm5aVEpFS0dObElDc2dZbVVzSURBc0lITXhMbEpIUWtFc0lERXNJREVzSURBc0lITXhMbEpIUWtFc0lITXhMbFZPVTBsSFRrVkVYMEpaVkVVc0lIVmxLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVVHNLSUNBZ0lIMEtJQ0FnSUd4bGRDQjNaU0E5SUh0OU93b2dJQ0FnZDJWYmN6RXVWRVZZVkZWU1JWOHlSRjBnUFNCZlpTaHpNUzVVUlZoVVZWSkZYekpFTENCek1TNVVSVmhVVlZKRlh6SkVMQ0F4S1N3Z2QyVmJjekV1VkVWWVZGVlNSVjlEVlVKRlgwMUJVRjBnUFNCZlpTaHpNUzVVUlZoVVZWSkZYME5WUWtWZlRVRlFMQ0J6TVM1VVJWaFVWVkpGWDBOVlFrVmZUVUZRWDFCUFUwbFVTVlpGWDFnc0lEWXBMQ0J1SUNZbUlDaDNaVnR6TVM1VVJWaFVWVkpGWHpKRVgwRlNVa0ZaWFNBOUlGOWxLSE14TGxSRldGUlZVa1ZmTWtSZlFWSlNRVmtzSUhNeExsUkZXRlJWVWtWZk1rUmZRVkpTUVZrc0lERXNJREVwTENCM1pWdHpNUzVVUlZoVVZWSkZYek5FWFNBOUlGOWxLSE14TGxSRldGUlZVa1ZmTTBRc0lITXhMbFJGV0ZSVlVrVmZNMFFzSURFc0lERXBLU3dnYnk1elpYUkRiR1ZoY2lnd0xDQXdMQ0F3TENBeEtTd2dZeTV6WlhSRGJHVmhjaWd4S1N3Z2JDNXpaWFJEYkdWaGNpZ3dLU3dnUldVb2N6RXVSRVZRVkVoZlZFVlRWQ2tzSUdNdWMyVjBSblZ1WXloMWJ5a3NJRW9vSVRFcExDQlRaU2h5YkNrc0lFVmxLSE14TGtOVlRFeGZSa0ZEUlNrc0lGZ29SRzRwT3dvZ0lDQWdablZ1WTNScGIyNGdSV1VvVUNrZ2V3b2dJQ0FnSUNBZ0lHUmJVRjBnSVQwOUlDRXdJQ1ltSUNoek1TNWxibUZpYkdVb1VDa3NJR1JiVUYwZ1BTQWhNQ2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCVVpTaFFLU0I3Q2lBZ0lDQWdJQ0FnWkZ0UVhTQWhQVDBnSVRFZ0ppWWdLSE14TG1ScGMyRmliR1VvVUNrc0lHUmJVRjBnUFNBaE1TazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJaWlNoUUxDQmpaU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJtVzFCZElDRTlQU0JqWlNBL0lDaHpNUzVpYVc1a1JuSmhiV1ZpZFdabVpYSW9VQ3dnWTJVcExDQm1XMUJkSUQwZ1kyVXNJRzRnSmlZZ0tGQWdQVDA5SUhNeExrUlNRVmRmUmxKQlRVVkNWVVpHUlZJZ0ppWWdLR1piY3pFdVJsSkJUVVZDVlVaR1JWSmRJRDBnWTJVcExDQlFJRDA5UFNCek1TNUdVa0ZOUlVKVlJrWkZVaUFtSmlBb1psdHpNUzVFVWtGWFgwWlNRVTFGUWxWR1JrVlNYU0E5SUdObEtTa3NJQ0V3S1NBNklDRXhPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYVhRb1VDd2dZMlVwSUhzS0lDQWdJQ0FnSUNCc1pYUWdZV1VnUFNCZkxDQm5aU0E5SUNFeE93b2dJQ0FnSUNBZ0lHbG1JQ2hRS1NCcFppQW9ZV1VnUFNCdExtZGxkQ2hqWlNrc0lHRmxJRDA5UFNCMmIybGtJREFnSmlZZ0tHRmxJRDBnVzEwc0lHMHVjMlYwS0dObExDQmhaU2twTENCUUxtbHpWMlZpUjB4TmRXeDBhWEJzWlZKbGJtUmxjbFJoY21kbGRITXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFZsSUQwZ1VDNTBaWGgwZFhKbE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lXVXViR1Z1WjNSb0lDRTlQU0IxWlM1c1pXNW5kR2dnZkh3Z1lXVmJNRjBnSVQwOUlITXhMa05QVEU5U1gwRlVWRUZEU0UxRlRsUXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRkVnUFNBd0xDQmlaU0E5SUhWbExteGxibWQwYURzZ1VTQThJR0psT3lCUkt5c3BZV1ZiVVYwZ1BTQnpNUzVEVDB4UFVsOUJWRlJCUTBoTlJVNVVNQ0FySUZFN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFpTNXNaVzVuZEdnZ1BTQjFaUzVzWlc1bmRHZ3NJR2RsSUQwZ0lUQTdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUlHVnNjMlVnWVdWYk1GMGdJVDA5SUhNeExrTlBURTlTWDBGVVZFRkRTRTFGVGxRd0lDWW1JQ2hoWlZzd1hTQTlJSE14TGtOUFRFOVNYMEZVVkVGRFNFMUZUbFF3TENCblpTQTlJQ0V3S1RzS0lDQWdJQ0FnSUNCbGJITmxJR0ZsV3pCZElDRTlQU0J6TVM1Q1FVTkxJQ1ltSUNoaFpWc3dYU0E5SUhNeExrSkJRMHNzSUdkbElEMGdJVEFwT3dvZ0lDQWdJQ0FnSUdkbElDWW1JQ2gwTG1selYyVmlSMHd5SUQ4Z2N6RXVaSEpoZDBKMVptWmxjbk1vWVdVcElEb2daUzVuWlhRb0lsZEZRa2RNWDJSeVlYZGZZblZtWm1WeWN5SXBMbVJ5WVhkQ2RXWm1aWEp6VjBWQ1Iwd29ZV1VwS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlFTmxLRkFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWnlBaFBUMGdVQ0EvSUNoek1TNTFjMlZRY205bmNtRnRLRkFwTENCbklEMGdVQ3dnSVRBcElEb2dJVEU3Q2lBZ0lDQjlDaUFnSUNCc1pYUWdUQ0E5SUhzS0lDQWdJQ0FnSUNCYlFtbGRPaUJ6TVM1R1ZVNURYMEZFUkN3S0lDQWdJQ0FnSUNCYldHUmRPaUJ6TVM1R1ZVNURYMU5WUWxSU1FVTlVMQW9nSUNBZ0lDQWdJRnR4WkYwNklITXhMa1pWVGtOZlVrVldSVkpUUlY5VFZVSlVVa0ZEVkFvZ0lDQWdmVHNLSUNBZ0lHbG1JQ2h1S1NCTVcyeHNYU0E5SUhNeExrMUpUaXdnVEZ0b2JGMGdQU0J6TVM1TlFWZzdDaUFnSUNCbGJITmxJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1VDQTlJR1V1WjJWMEtDSkZXRlJmWW14bGJtUmZiV2x1YldGNElpazdDaUFnSUNBZ0lDQWdVQ0FoUFQwZ2JuVnNiQ0FtSmlBb1RGdHNiRjBnUFNCUUxrMUpUbDlGV0ZRc0lFeGJhR3hkSUQwZ1VDNU5RVmhmUlZoVUtUc0tJQ0FnSUgwS0lDQWdJR3hsZENCdlpTQTlJSHNLSUNBZ0lDQWdJQ0JiV1dSZE9pQnpNUzVhUlZKUExBb2dJQ0FnSUNBZ0lGdGFaRjA2SUhNeExrOU9SU3dLSUNBZ0lDQWdJQ0JiU21SZE9pQnpNUzVUVWtOZlEwOU1UMUlzQ2lBZ0lDQWdJQ0FnVzJ4a1hUb2djekV1VTFKRFgwRk1VRWhCTEFvZ0lDQWdJQ0FnSUZ0MFpsMDZJSE14TGxOU1ExOUJURkJJUVY5VFFWUlZVa0ZVUlN3S0lDQWdJQ0FnSUNCYmFtUmRPaUJ6TVM1RVUxUmZRMDlNVDFJc0NpQWdJQ0FnSUNBZ1cwdGtYVG9nY3pFdVJGTlVYMEZNVUVoQkxBb2dJQ0FnSUNBZ0lGc2taRjA2SUhNeExrOU9SVjlOU1U1VlUxOVRVa05mUTA5TVQxSXNDaUFnSUNBZ0lDQWdXMmhrWFRvZ2N6RXVUMDVGWDAxSlRsVlRYMU5TUTE5QlRGQklRU3dLSUNBZ0lDQWdJQ0JiWldaZE9pQnpNUzVQVGtWZlRVbE9WVk5mUkZOVVgwTlBURTlTTEFvZ0lDQWdJQ0FnSUZ0UlpGMDZJSE14TGs5T1JWOU5TVTVWVTE5RVUxUmZRVXhRU0VFS0lDQWdJSDA3Q2lBZ0lDQm1kVzVqZEdsdmJpQllLRkFzSUdObExDQmhaU3dnWjJVc0lIVmxMQ0JSTENCaVpTd2dSbVVwSUhzS0lDQWdJQ0FnSUNCcFppQW9VQ0E5UFQwZ1JHNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NDQTlQVDBnSVRBZ0ppWWdLRlJsS0hNeExrSk1SVTVFS1N3Z2NDQTlJQ0V4S1RzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvY0NBOVBUMGdJVEVnSmlZZ0tFVmxLSE14TGtKTVJVNUVLU3dnY0NBOUlDRXdLU3dnVUNBaFBUMGdWMlFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0ZBZ0lUMDlJSFlnZkh3Z1JtVWdJVDA5SUUwcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvZUNBaFBUMGdRbWtnZkh3Z2R5QWhQVDBnUW1rcElDWW1JQ2h6TVM1aWJHVnVaRVZ4ZFdGMGFXOXVLSE14TGtaVlRrTmZRVVJFS1N3Z2VDQTlJRUpwTENCM0lEMGdRbWtwTENCR1pTa2djM2RwZEdOb0tGQXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdWMms2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE14TG1Kc1pXNWtSblZ1WTFObGNHRnlZWFJsS0hNeExrOU9SU3dnY3pFdVQwNUZYMDFKVGxWVFgxTlNRMTlCVEZCSVFTd2djekV1VDA1RkxDQnpNUzVQVGtWZlRVbE9WVk5mVTFKRFgwRk1VRWhCS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmhiRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjekV1WW14bGJtUkdkVzVqS0hNeExrOU9SU3dnY3pFdVQwNUZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCdmJEb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N6RXVZbXhsYm1SR2RXNWpVMlZ3WVhKaGRHVW9jekV1V2tWU1R5d2djekV1VDA1RlgwMUpUbFZUWDFOU1ExOURUMHhQVWl3Z2N6RXVXa1ZTVHl3Z2N6RXVUMDVGS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmpiRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjekV1WW14bGJtUkdkVzVqVTJWd1lYSmhkR1VvY3pFdVdrVlNUeXdnY3pFdVUxSkRYME5QVEU5U0xDQnpNUzVhUlZKUExDQnpNUzVUVWtOZlFVeFFTRUVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVYWldKSFRGTjBZWFJsT2lCSmJuWmhiR2xrSUdKc1pXNWthVzVuT2lBaUxDQlFLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSE4zYVhSamFDaFFLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRmRwT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TVM1aWJHVnVaRVoxYm1OVFpYQmhjbUYwWlNoek1TNVRVa05mUVV4UVNFRXNJSE14TGs5T1JWOU5TVTVWVTE5VFVrTmZRVXhRU0VFc0lITXhMazlPUlN3Z2N6RXVUMDVGWDAxSlRsVlRYMU5TUTE5QlRGQklRU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1lXdzZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITXhMbUpzWlc1a1JuVnVZeWh6TVM1VFVrTmZRVXhRU0VFc0lITXhMazlPUlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdiMnc2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE14TG1Kc1pXNWtSblZ1WTFObGNHRnlZWFJsS0hNeExscEZVazhzSUhNeExrOU9SVjlOU1U1VlUxOVRVa05mUTA5TVQxSXNJSE14TGxwRlVrOHNJSE14TGs5T1JTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWTJ3NkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNeExtSnNaVzVrUm5WdVl5aHpNUzVhUlZKUExDQnpNUzVUVWtOZlEwOU1UMUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVYWldKSFRGTjBZWFJsT2lCSmJuWmhiR2xrSUdKc1pXNWthVzVuT2lBaUxDQlFLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNUlEMGdiblZzYkN3Z1lpQTlJRzUxYkd3c0lGSWdQU0J1ZFd4c0xDQkpJRDBnYm5Wc2JDd2dkaUE5SUZBc0lFMGdQU0JHWlRzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhWbElEMGdkV1VnZkh3Z1kyVXNJRkVnUFNCUklIeDhJR0ZsTENCaVpTQTlJR0psSUh4OElHZGxMQ0FvWTJVZ0lUMDlJSGdnZkh3Z2RXVWdJVDA5SUhjcElDWW1JQ2h6TVM1aWJHVnVaRVZ4ZFdGMGFXOXVVMlZ3WVhKaGRHVW9URnRqWlYwc0lFeGJkV1ZkS1N3Z2VDQTlJR05sTENCM0lEMGdkV1VwTENBb1lXVWdJVDA5SUhrZ2ZId2daMlVnSVQwOUlHSWdmSHdnVVNBaFBUMGdVaUI4ZkNCaVpTQWhQVDBnU1NrZ0ppWWdLSE14TG1Kc1pXNWtSblZ1WTFObGNHRnlZWFJsS0c5bFcyRmxYU3dnYjJWYloyVmRMQ0J2WlZ0UlhTd2diMlZiWW1WZEtTd2dlU0E5SUdGbExDQmlJRDBnWjJVc0lGSWdQU0JSTENCSklEMGdZbVVwTENCMklEMGdVQ3dnVFNBOUlDRXhPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYVdVb1VDd2dZMlVwSUhzS0lDQWdJQ0FnSUNCUUxuTnBaR1VnUFQwOUlHZHVJRDhnVkdVb2N6RXVRMVZNVEY5R1FVTkZLU0E2SUVWbEtITXhMa05WVEV4ZlJrRkRSU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHRmxJRDBnVUM1emFXUmxJRDA5UFNCR2REc0tJQ0FnSUNBZ0lDQmpaU0FtSmlBb1lXVWdQU0FoWVdVcExDQktLR0ZsS1N3Z1VDNWliR1Z1WkdsdVp5QTlQVDBnVjJrZ0ppWWdVQzUwY21GdWMzQmhjbVZ1ZENBOVBUMGdJVEVnUHlCWUtFUnVLU0E2SUZnb1VDNWliR1Z1WkdsdVp5d2dVQzVpYkdWdVpFVnhkV0YwYVc5dUxDQlFMbUpzWlc1a1UzSmpMQ0JRTG1Kc1pXNWtSSE4wTENCUUxtSnNaVzVrUlhGMVlYUnBiMjVCYkhCb1lTd2dVQzVpYkdWdVpGTnlZMEZzY0doaExDQlFMbUpzWlc1a1JITjBRV3h3YUdFc0lGQXVjSEpsYlhWc2RHbHdiR2xsWkVGc2NHaGhLU3dnWXk1elpYUkdkVzVqS0ZBdVpHVndkR2hHZFc1aktTd2dZeTV6WlhSVVpYTjBLRkF1WkdWd2RHaFVaWE4wS1N3Z1l5NXpaWFJOWVhOcktGQXVaR1Z3ZEdoWGNtbDBaU2tzSUc4dWMyVjBUV0Z6YXloUUxtTnZiRzl5VjNKcGRHVXBPd29nSUNBZ0lDQWdJR3hsZENCblpTQTlJRkF1YzNSbGJtTnBiRmR5YVhSbE93b2dJQ0FnSUNBZ0lHd3VjMlYwVkdWemRDaG5aU2tzSUdkbElDWW1JQ2hzTG5ObGRFMWhjMnNvVUM1emRHVnVZMmxzVjNKcGRHVk5ZWE5yS1N3Z2JDNXpaWFJHZFc1aktGQXVjM1JsYm1OcGJFWjFibU1zSUZBdWMzUmxibU5wYkZKbFppd2dVQzV6ZEdWdVkybHNSblZ1WTAxaGMyc3BMQ0JzTG5ObGRFOXdLRkF1YzNSbGJtTnBiRVpoYVd3c0lGQXVjM1JsYm1OcGJGcEdZV2xzTENCUUxuTjBaVzVqYVd4YVVHRnpjeWtwTENCNVpTaFFMbkJ2YkhsbmIyNVBabVp6WlhRc0lGQXVjRzlzZVdkdmJrOW1abk5sZEVaaFkzUnZjaXdnVUM1d2IyeDVaMjl1VDJabWMyVjBWVzVwZEhNcExDQlFMbUZzY0doaFZHOURiM1psY21GblpTQTlQVDBnSVRBZ1B5QkZaU2h6TVM1VFFVMVFURVZmUVV4UVNFRmZWRTlmUTA5V1JWSkJSMFVwSURvZ1ZHVW9jekV1VTBGTlVFeEZYMEZNVUVoQlgxUlBYME5QVmtWU1FVZEZLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUVvb1VDa2dld29nSUNBZ0lDQWdJRlFnSVQwOUlGQWdKaVlnS0ZBZ1B5QnpNUzVtY205dWRFWmhZMlVvY3pFdVExY3BJRG9nY3pFdVpuSnZiblJHWVdObEtITXhMa05EVnlrc0lGUWdQU0JRS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlGTmxLRkFwSUhzS0lDQWdJQ0FnSUNCUUlDRTlQU0JyWkNBL0lDaEZaU2h6TVM1RFZVeE1YMFpCUTBVcExDQlFJQ0U5UFNCUElDWW1JQ2hRSUQwOVBTQnliQ0EvSUhNeExtTjFiR3hHWVdObEtITXhMa0pCUTBzcElEb2dVQ0E5UFQwZ1NHUWdQeUJ6TVM1amRXeHNSbUZqWlNoek1TNUdVazlPVkNrZ09pQnpNUzVqZFd4c1JtRmpaU2h6TVM1R1VrOU9WRjlCVGtSZlFrRkRTeWtwS1NBNklGUmxLSE14TGtOVlRFeGZSa0ZEUlNrc0lFOGdQU0JRT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2JXVW9VQ2tnZXdvZ0lDQWdJQ0FnSUZBZ0lUMDlJRmtnSmlZZ0tIRWdKaVlnY3pFdWJHbHVaVmRwWkhSb0tGQXBMQ0JaSUQwZ1VDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUI1WlNoUUxDQmpaU3dnWVdVcElIc0tJQ0FnSUNBZ0lDQlFJRDhnS0VWbEtITXhMbEJQVEZsSFQwNWZUMFpHVTBWVVgwWkpURXdwTENBb0pDQWhQVDBnWTJVZ2ZId2dWU0FoUFQwZ1lXVXBJQ1ltSUNoek1TNXdiMng1WjI5dVQyWm1jMlYwS0dObExDQmhaU2tzSUNRZ1BTQmpaU3dnVlNBOUlHRmxLU2tnT2lCVVpTaHpNUzVRVDB4WlIwOU9YMDlHUmxORlZGOUdTVXhNS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlFNWxLRkFwSUhzS0lDQWdJQ0FnSUNCUUlEOGdSV1VvY3pFdVUwTkpVMU5QVWw5VVJWTlVLU0E2SUZSbEtITXhMbE5EU1ZOVFQxSmZWRVZUVkNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnhaU2hRS1NCN0NpQWdJQ0FnSUNBZ1VDQTlQVDBnZG05cFpDQXdJQ1ltSUNoUUlEMGdjekV1VkVWWVZGVlNSVEFnS3lCNklDMGdNU2tzSUZjZ0lUMDlJRkFnSmlZZ0tITXhMbUZqZEdsMlpWUmxlSFIxY21Vb1VDa3NJRmNnUFNCUUtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJSEowS0ZBc0lHTmxMQ0JoWlNrZ2V3b2dJQ0FnSUNBZ0lHRmxJRDA5UFNCMmIybGtJREFnSmlZZ0tGY2dQVDA5SUc1MWJHd2dQeUJoWlNBOUlITXhMbFJGV0ZSVlVrVXdJQ3NnZWlBdElERWdPaUJoWlNBOUlGY3BPd29nSUNBZ0lDQWdJR3hsZENCblpTQTlJRXRiWVdWZE93b2dJQ0FnSUNBZ0lHZGxJRDA5UFNCMmIybGtJREFnSmlZZ0tHZGxJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCMmIybGtJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFIxY21VNklIWnZhV1FnTUFvZ0lDQWdJQ0FnSUgwc0lFdGJZV1ZkSUQwZ1oyVXBMQ0FvWjJVdWRIbHdaU0FoUFQwZ1VDQjhmQ0JuWlM1MFpYaDBkWEpsSUNFOVBTQmpaU2tnSmlZZ0tGY2dJVDA5SUdGbElDWW1JQ2h6TVM1aFkzUnBkbVZVWlhoMGRYSmxLR0ZsS1N3Z1Z5QTlJR0ZsS1N3Z2N6RXVZbWx1WkZSbGVIUjFjbVVvVUN3Z1kyVWdmSHdnZDJWYlVGMHBMQ0JuWlM1MGVYQmxJRDBnVUN3Z1oyVXVkR1Y0ZEhWeVpTQTlJR05sS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlFTW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElGQWdQU0JMVzFkZE93b2dJQ0FnSUNBZ0lGQWdJVDA5SUhadmFXUWdNQ0FtSmlCUUxuUjVjR1VnSVQwOUlIWnZhV1FnTUNBbUppQW9jekV1WW1sdVpGUmxlSFIxY21Vb1VDNTBlWEJsTENCdWRXeHNLU3dnVUM1MGVYQmxJRDBnZG05cFpDQXdMQ0JRTG5SbGVIUjFjbVVnUFNCMmIybGtJREFwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1V5Z3BJSHNLSUNBZ0lDQWdJQ0IwY25rZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J6TVM1amIyMXdjbVZ6YzJWa1ZHVjRTVzFoWjJVeVJDNWhjSEJzZVNoek1Td2dZWEpuZFcxbGJuUnpLVHNLSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hRS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxkbFlrZE1VM1JoZEdVNklpd2dVQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1FpZ3BJSHNLSUNBZ0lDQWdJQ0IwY25rZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J6TVM1amIyMXdjbVZ6YzJWa1ZHVjRTVzFoWjJVelJDNWhjSEJzZVNoek1Td2dZWEpuZFcxbGJuUnpLVHNLSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hRS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxkbFlrZE1VM1JoZEdVNklpd2dVQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1pXVW9LU0I3Q2lBZ0lDQWdJQ0FnZEhKNUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnY3pFdWRHVjRVM1ZpU1cxaFoyVXlSQzVoY0hCc2VTaHpNU3dnWVhKbmRXMWxiblJ6S1RzS0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNoUUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxsZGxZa2RNVTNSaGRHVTZJaXdnVUNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdhaWdwSUhzS0lDQWdJQ0FnSUNCMGNua2dld29nSUNBZ0lDQWdJQ0FnSUNCek1TNTBaWGhUZFdKSmJXRm5aVE5FTG1Gd2NHeDVLSE14TENCaGNtZDFiV1Z1ZEhNcE93b2dJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tGQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4VGRHRjBaVG9pTENCUUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUIwWlNncElIc0tJQ0FnSUNBZ0lDQjBjbmtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnpNUzVqYjIxd2NtVnpjMlZrVkdWNFUzVmlTVzFoWjJVeVJDNWhjSEJzZVNoek1Td2dZWEpuZFcxbGJuUnpLVHNLSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hRS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxkbFlrZE1VM1JoZEdVNklpd2dVQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1RXVW9LU0I3Q2lBZ0lDQWdJQ0FnZEhKNUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnY3pFdVkyOXRjSEpsYzNObFpGUmxlRk4xWWtsdFlXZGxNMFF1WVhCd2JIa29jekVzSUdGeVozVnRaVzUwY3lrN0NpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1VDa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVhaV0pIVEZOMFlYUmxPaUlzSUZBcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJSEpsS0NrZ2V3b2dJQ0FnSUNBZ0lIUnllU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lITXhMblJsZUZOMGIzSmhaMlV5UkM1aGNIQnNlU2h6TVN3Z1lYSm5kVzFsYm5SektUc0tJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaFFLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVUzUmhkR1U2SWl3Z1VDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWkdVb0tTQjdDaUFnSUNBZ0lDQWdkSEo1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjekV1ZEdWNFUzUnZjbUZuWlRORUxtRndjR3g1S0hNeExDQmhjbWQxYldWdWRITXBPd29nSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLRkFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VjJWaVIweFRkR0YwWlRvaUxDQlFLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCTVpTZ3BJSHNLSUNBZ0lDQWdJQ0IwY25rZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J6TVM1MFpYaEpiV0ZuWlRKRUxtRndjR3g1S0hNeExDQmhjbWQxYldWdWRITXBPd29nSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLRkFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VjJWaVIweFRkR0YwWlRvaUxDQlFLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCYVpTZ3BJSHNLSUNBZ0lDQWdJQ0IwY25rZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J6TVM1MFpYaEpiV0ZuWlRORUxtRndjR3g1S0hNeExDQmhjbWQxYldWdWRITXBPd29nSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLRkFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VjJWaVIweFRkR0YwWlRvaUxDQlFLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCelpTaFFLU0I3Q2lBZ0lDQWdJQ0FnYUdVdVpYRjFZV3h6S0ZBcElEMDlQU0FoTVNBbUppQW9jekV1YzJOcGMzTnZjaWhRTG5nc0lGQXVlU3dnVUM1NkxDQlFMbmNwTENCb1pTNWpiM0I1S0ZBcEtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJQ1JsS0ZBcElIc0tJQ0FnSUNBZ0lDQm1aUzVsY1hWaGJITW9VQ2tnUFQwOUlDRXhJQ1ltSUNoek1TNTJhV1YzY0c5eWRDaFFMbmdzSUZBdWVTd2dVQzU2TENCUUxuY3BMQ0JtWlM1amIzQjVLRkFwS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlFOWxLRkFzSUdObEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdGbElEMGdkUzVuWlhRb1kyVXBPd29nSUNBZ0lDQWdJR0ZsSUQwOVBTQjJiMmxrSURBZ0ppWWdLR0ZsSUQwZ2JtVjNJRmRsWVd0TllYQXNJSFV1YzJWMEtHTmxMQ0JoWlNrcE93b2dJQ0FnSUNBZ0lHeGxkQ0JuWlNBOUlHRmxMbWRsZENoUUtUc0tJQ0FnSUNBZ0lDQm5aU0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaG5aU0E5SUhNeExtZGxkRlZ1YVdadmNtMUNiRzlqYTBsdVpHVjRLR05sTENCUUxtNWhiV1VwTENCaFpTNXpaWFFvVUN3Z1oyVXBLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUVsbEtGQXNJR05sS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR2RsSUQwZ2RTNW5aWFFvWTJVcExtZGxkQ2hRS1RzS0lDQWdJQ0FnSUNCb0xtZGxkQ2hqWlNrZ0lUMDlJR2RsSUNZbUlDaHpNUzUxYm1sbWIzSnRRbXh2WTJ0Q2FXNWthVzVuS0dObExDQm5aU3dnVUM1ZlgySnBibVJwYm1kUWIybHVkRWx1WkdWNEtTd2dhQzV6WlhRb1kyVXNJR2RsS1NrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQlNaU2dwSUhzS0lDQWdJQ0FnSUNCek1TNWthWE5oWW14bEtITXhMa0pNUlU1RUtTd2djekV1WkdsellXSnNaU2h6TVM1RFZVeE1YMFpCUTBVcExDQnpNUzVrYVhOaFlteGxLSE14TGtSRlVGUklYMVJGVTFRcExDQnpNUzVrYVhOaFlteGxLSE14TGxCUFRGbEhUMDVmVDBaR1UwVlVYMFpKVEV3cExDQnpNUzVrYVhOaFlteGxLSE14TGxORFNWTlRUMUpmVkVWVFZDa3NJSE14TG1ScGMyRmliR1VvY3pFdVUxUkZUa05KVEY5VVJWTlVLU3dnY3pFdVpHbHpZV0pzWlNoek1TNVRRVTFRVEVWZlFVeFFTRUZmVkU5ZlEwOVdSVkpCUjBVcExDQnpNUzVpYkdWdVpFVnhkV0YwYVc5dUtITXhMa1pWVGtOZlFVUkVLU3dnY3pFdVlteGxibVJHZFc1aktITXhMazlPUlN3Z2N6RXVXa1ZTVHlrc0lITXhMbUpzWlc1a1JuVnVZMU5sY0dGeVlYUmxLSE14TGs5T1JTd2djekV1V2tWU1R5d2djekV1VDA1RkxDQnpNUzVhUlZKUEtTd2djekV1WTI5c2IzSk5ZWE5yS0NFd0xDQWhNQ3dnSVRBc0lDRXdLU3dnY3pFdVkyeGxZWEpEYjJ4dmNpZ3dMQ0F3TENBd0xDQXdLU3dnY3pFdVpHVndkR2hOWVhOcktDRXdLU3dnY3pFdVpHVndkR2hHZFc1aktITXhMa3hGVTFNcExDQnpNUzVqYkdWaGNrUmxjSFJvS0RFcExDQnpNUzV6ZEdWdVkybHNUV0Z6YXlnME1qazBPVFkzTWprMUtTd2djekV1YzNSbGJtTnBiRVoxYm1Nb2N6RXVRVXhYUVZsVExDQXdMQ0EwTWprME9UWTNNamsxS1N3Z2N6RXVjM1JsYm1OcGJFOXdLSE14TGt0RlJWQXNJSE14TGt0RlJWQXNJSE14TGt0RlJWQXBMQ0J6TVM1amJHVmhjbE4wWlc1amFXd29NQ2tzSUhNeExtTjFiR3hHWVdObEtITXhMa0pCUTBzcExDQnpNUzVtY205dWRFWmhZMlVvY3pFdVEwTlhLU3dnY3pFdWNHOXNlV2R2Yms5bVpuTmxkQ2d3TENBd0tTd2djekV1WVdOMGFYWmxWR1Y0ZEhWeVpTaHpNUzVVUlZoVVZWSkZNQ2tzSUhNeExtSnBibVJHY21GdFpXSjFabVpsY2loek1TNUdVa0ZOUlVKVlJrWkZVaXdnYm5Wc2JDa3NJRzRnUFQwOUlDRXdJQ1ltSUNoek1TNWlhVzVrUm5KaGJXVmlkV1ptWlhJb2N6RXVSRkpCVjE5R1VrRk5SVUpWUmtaRlVpd2diblZzYkNrc0lITXhMbUpwYm1SR2NtRnRaV0oxWm1abGNpaHpNUzVTUlVGRVgwWlNRVTFGUWxWR1JrVlNMQ0J1ZFd4c0tTa3NJSE14TG5WelpWQnliMmR5WVcwb2JuVnNiQ2tzSUhNeExteHBibVZYYVdSMGFDZ3hLU3dnY3pFdWMyTnBjM052Y2lnd0xDQXdMQ0J6TVM1allXNTJZWE11ZDJsa2RHZ3NJSE14TG1OaGJuWmhjeTVvWldsbmFIUXBMQ0J6TVM1MmFXVjNjRzl5ZENnd0xDQXdMQ0J6TVM1allXNTJZWE11ZDJsa2RHZ3NJSE14TG1OaGJuWmhjeTVvWldsbmFIUXBMQ0JrSUQwZ2UzMHNJRmNnUFNCdWRXeHNMQ0JMSUQwZ2UzMHNJR1lnUFNCN2ZTd2diU0E5SUc1bGR5QlhaV0ZyVFdGd0xDQmZJRDBnVzEwc0lHY2dQU0J1ZFd4c0xDQndJRDBnSVRFc0lIWWdQU0J1ZFd4c0xDQjRJRDBnYm5Wc2JDd2dlU0E5SUc1MWJHd3NJR0lnUFNCdWRXeHNMQ0IzSUQwZ2JuVnNiQ3dnVWlBOUlHNTFiR3dzSUVrZ1BTQnVkV3hzTENCTklEMGdJVEVzSUZRZ1BTQnVkV3hzTENCUElEMGdiblZzYkN3Z1dTQTlJRzUxYkd3c0lDUWdQU0J1ZFd4c0xDQlZJRDBnYm5Wc2JDd2dhR1V1YzJWMEtEQXNJREFzSUhNeExtTmhiblpoY3k1M2FXUjBhQ3dnY3pFdVkyRnVkbUZ6TG1obGFXZG9kQ2tzSUdabExuTmxkQ2d3TENBd0xDQnpNUzVqWVc1MllYTXVkMmxrZEdnc0lITXhMbU5oYm5aaGN5NW9aV2xuYUhRcExDQnZMbkpsYzJWMEtDa3NJR011Y21WelpYUW9LU3dnYkM1eVpYTmxkQ2dwT3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCaWRXWm1aWEp6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9pQnZMQW9nSUNBZ0lDQWdJQ0FnSUNCa1pYQjBhRG9nWXl3S0lDQWdJQ0FnSUNBZ0lDQWdjM1JsYm1OcGJEb2diQW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnWlc1aFlteGxPaUJGWlN3S0lDQWdJQ0FnSUNCa2FYTmhZbXhsT2lCVVpTd0tJQ0FnSUNBZ0lDQmlhVzVrUm5KaGJXVmlkV1ptWlhJNklGbGxMQW9nSUNBZ0lDQWdJR1J5WVhkQ2RXWm1aWEp6T2lCcGRDd0tJQ0FnSUNBZ0lDQjFjMlZRY205bmNtRnRPaUJEWlN3S0lDQWdJQ0FnSUNCelpYUkNiR1Z1WkdsdVp6b2dXQ3dLSUNBZ0lDQWdJQ0J6WlhSTllYUmxjbWxoYkRvZ2FXVXNDaUFnSUNBZ0lDQWdjMlYwUm14cGNGTnBaR1ZrT2lCS0xBb2dJQ0FnSUNBZ0lITmxkRU4xYkd4R1lXTmxPaUJUWlN3S0lDQWdJQ0FnSUNCelpYUk1hVzVsVjJsa2RHZzZJRzFsTEFvZ0lDQWdJQ0FnSUhObGRGQnZiSGxuYjI1UFptWnpaWFE2SUhsbExBb2dJQ0FnSUNBZ0lITmxkRk5qYVhOemIzSlVaWE4wT2lCT1pTd0tJQ0FnSUNBZ0lDQmhZM1JwZG1WVVpYaDBkWEpsT2lCeFpTd0tJQ0FnSUNBZ0lDQmlhVzVrVkdWNGRIVnlaVG9nY25Rc0NpQWdJQ0FnSUNBZ2RXNWlhVzVrVkdWNGRIVnlaVG9nUXl3S0lDQWdJQ0FnSUNCamIyMXdjbVZ6YzJWa1ZHVjRTVzFoWjJVeVJEb2dVeXdLSUNBZ0lDQWdJQ0JqYjIxd2NtVnpjMlZrVkdWNFNXMWhaMlV6UkRvZ1Fpd0tJQ0FnSUNBZ0lDQjBaWGhKYldGblpUSkVPaUJNWlN3S0lDQWdJQ0FnSUNCMFpYaEpiV0ZuWlRORU9pQmFaU3dLSUNBZ0lDQWdJQ0IxY0dSaGRHVlZRazlOWVhCd2FXNW5PaUJQWlN3S0lDQWdJQ0FnSUNCMWJtbG1iM0p0UW14dlkydENhVzVrYVc1bk9pQkpaU3dLSUNBZ0lDQWdJQ0IwWlhoVGRHOXlZV2RsTWtRNklISmxMQW9nSUNBZ0lDQWdJSFJsZUZOMGIzSmhaMlV6UkRvZ1pHVXNDaUFnSUNBZ0lDQWdkR1Y0VTNWaVNXMWhaMlV5UkRvZ1pXVXNDaUFnSUNBZ0lDQWdkR1Y0VTNWaVNXMWhaMlV6UkRvZ2Fpd0tJQ0FnSUNBZ0lDQmpiMjF3Y21WemMyVmtWR1Y0VTNWaVNXMWhaMlV5UkRvZ2RHVXNDaUFnSUNBZ0lDQWdZMjl0Y0hKbGMzTmxaRlJsZUZOMVlrbHRZV2RsTTBRNklFMWxMQW9nSUNBZ0lDQWdJSE5qYVhOemIzSTZJSE5sTEFvZ0lDQWdJQ0FnSUhacFpYZHdiM0owT2lBa1pTd0tJQ0FnSUNBZ0lDQnlaWE5sZERvZ1VtVUtJQ0FnSUgwN0NuMEtablZ1WTNScGIyNGdlakFvY3pFc0lHVXNJSFFzSUc0c0lHa3NJSElzSUdFcElIc0tJQ0FnSUd4bGRDQnZJRDBnYVM1cGMxZGxZa2RNTWl3Z1l5QTlJR2t1YldGNFZHVjRkSFZ5WlhNc0lHd2dQU0JwTG0xaGVFTjFZbVZ0WVhCVGFYcGxMQ0JvSUQwZ2FTNXRZWGhVWlhoMGRYSmxVMmw2WlN3Z2RTQTlJR2t1YldGNFUyRnRjR3hsY3l3Z1pDQTlJR1V1YUdGektDSlhSVUpIVEY5dGRXeDBhWE5oYlhCc1pXUmZjbVZ1WkdWeVgzUnZYM1JsZUhSMWNtVWlLU0EvSUdVdVoyVjBLQ0pYUlVKSFRGOXRkV3gwYVhOaGJYQnNaV1JmY21WdVpHVnlYM1J2WDNSbGVIUjFjbVVpS1NBNklHNTFiR3dzSUdZZ1BTQjBlWEJsYjJZZ2JtRjJhV2RoZEc5eUlENGdJblVpSUQ4Z0lURWdPaUF2VDJOMWJIVnpRbkp2ZDNObGNpOW5MblJsYzNRb2JtRjJhV2RoZEc5eUxuVnpaWEpCWjJWdWRDa3NJRzBnUFNCdVpYY2dWMlZoYTAxaGNDd2dYeXdnWnlBOUlHNWxkeUJYWldGclRXRndMQ0J3SUQwZ0lURTdDaUFnSUNCMGNua2dld29nSUNBZ0lDQWdJSEFnUFNCMGVYQmxiMllnVDJabWMyTnlaV1Z1UTJGdWRtRnpJRHdnSW5VaUlDWW1JRzVsZHlCUFptWnpZM0psWlc1RFlXNTJZWE1vTVN3Z01Ta3VaMlYwUTI5dWRHVjRkQ2dpTW1RaUtTQWhQVDBnYm5Wc2JEc0tJQ0FnSUgwZ1kyRjBZMmdnSUh0OUNpQWdJQ0JtZFc1amRHbHZiaUIyS0VNc0lGTXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjQ0EvSUc1bGR5QlBabVp6WTNKbFpXNURZVzUyWVhNb1F5d2dVeWtnT2lCM2N5Z2lZMkZ1ZG1GeklpazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUI0S0VNc0lGTXNJRUlzSUdWbEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdvZ1BTQXhPd29nSUNBZ0lDQWdJR2xtSUNnb1F5NTNhV1IwYUNBK0lHVmxJSHg4SUVNdWFHVnBaMmgwSUQ0Z1pXVXBJQ1ltSUNocUlEMGdaV1VnTHlCTllYUm9MbTFoZUNoRExuZHBaSFJvTENCRExtaGxhV2RvZENrcExDQnFJRHdnTVNCOGZDQlRJRDA5UFNBaE1Da2dhV1lnS0hSNWNHVnZaaUJJVkUxTVNXMWhaMlZGYkdWdFpXNTBJRHdnSW5VaUlDWW1JRU1nYVc1emRHRnVZMlZ2WmlCSVZFMU1TVzFoWjJWRmJHVnRaVzUwSUh4OElIUjVjR1Z2WmlCSVZFMU1RMkZ1ZG1GelJXeGxiV1Z1ZENBOElDSjFJaUFtSmlCRElHbHVjM1JoYm1ObGIyWWdTRlJOVEVOaGJuWmhjMFZzWlcxbGJuUWdmSHdnZEhsd1pXOW1JRWx0WVdkbFFtbDBiV0Z3SUR3Z0luVWlJQ1ltSUVNZ2FXNXpkR0Z1WTJWdlppQkpiV0ZuWlVKcGRHMWhjQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZEdVZ1BTQlRJRDhnVjNJZ09pQk5ZWFJvTG1ac2IyOXlMQ0JOWlNBOUlIUmxLR29nS2lCRExuZHBaSFJvS1N3Z2NtVWdQU0IwWlNocUlDb2dReTVvWldsbmFIUXBPd29nSUNBZ0lDQWdJQ0FnSUNCZklEMDlQU0IyYjJsa0lEQWdKaVlnS0Y4Z1BTQjJLRTFsTENCeVpTa3BPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaR1VnUFNCQ0lEOGdkaWhOWlN3Z2NtVXBJRG9nWHpzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHUmxMbmRwWkhSb0lEMGdUV1VzSUdSbExtaGxhV2RvZENBOUlISmxMQ0JrWlM1blpYUkRiMjUwWlhoMEtDSXlaQ0lwTG1SeVlYZEpiV0ZuWlNoRExDQXdMQ0F3TENCTlpTd2djbVVwTENCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUZSbGVIUjFjbVVnYUdGeklHSmxaVzRnY21WemFYcGxaQ0JtY205dElDZ2lJQ3NnUXk1M2FXUjBhQ0FySUNKNElpQXJJRU11YUdWcFoyaDBJQ3NnSWlrZ2RHOGdLQ0lnS3lCTlpTQXJJQ0o0SWlBcklISmxJQ3NnSWlrdUlpa3NJR1JsT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J5WlhSMWNtNGdJbVJoZEdFaUlHbHVJRU1nSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCSmJXRm5aU0JwYmlCRVlYUmhWR1Y0ZEhWeVpTQnBjeUIwYjI4Z1ltbG5JQ2dpSUNzZ1F5NTNhV1IwYUNBcklDSjRJaUFySUVNdWFHVnBaMmgwSUNzZ0lpa3VJaWtzSUVNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVNN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQjVLRU1wSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYlc4b1F5NTNhV1IwYUNrZ0ppWWdiVzhvUXk1b1pXbG5hSFFwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1lpaERLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzhnUHlBaE1TQTZJRU11ZDNKaGNGTWdJVDA5SUVsMElIeDhJRU11ZDNKaGNGUWdJVDA5SUVsMElIeDhJRU11YldsdVJtbHNkR1Z5SUNFOVBTQndkQ0FtSmlCRExtMXBia1pwYkhSbGNpQWhQVDBnYlhRN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQjNLRU1zSUZNcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1F5NW5aVzVsY21GMFpVMXBjRzFoY0hNZ0ppWWdVeUFtSmlCRExtMXBia1pwYkhSbGNpQWhQVDBnY0hRZ0ppWWdReTV0YVc1R2FXeDBaWElnSVQwOUlHMTBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnVWloREtTQjdDaUFnSUNBZ0lDQWdjekV1WjJWdVpYSmhkR1ZOYVhCdFlYQW9ReWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCSktFTXNJRk1zSUVJc0lHVmxMQ0JxSUQwZ0lURXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2J5QTlQVDBnSVRFcElISmxkSFZ5YmlCVE93b2dJQ0FnSUNBZ0lHbG1JQ2hESUNFOVBTQnVkV3hzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoek1WdERYU0FoUFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnY3pGYlExMDdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nUVhSMFpXMXdkQ0IwYnlCMWMyVWdibTl1TFdWNGFYTjBhVzVuSUZkbFlrZE1JR2x1ZEdWeWJtRnNJR1p2Y20xaGRDQW5JaUFySUVNZ0t5QWlKeUlwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdkR1VnUFNCVE93b2dJQ0FnSUNBZ0lHbG1JQ2hUSUQwOVBTQnpNUzVTUlVRZ0ppWWdLRUlnUFQwOUlITXhMa1pNVDBGVUlDWW1JQ2gwWlNBOUlITXhMbEl6TWtZcExDQkNJRDA5UFNCek1TNUlRVXhHWDBaTVQwRlVJQ1ltSUNoMFpTQTlJSE14TGxJeE5rWXBMQ0JDSUQwOVBTQnpNUzVWVGxOSlIwNUZSRjlDV1ZSRklDWW1JQ2gwWlNBOUlITXhMbEk0S1Nrc0lGTWdQVDA5SUhNeExsSkZSRjlKVGxSRlIwVlNJQ1ltSUNoQ0lEMDlQU0J6TVM1VlRsTkpSMDVGUkY5Q1dWUkZJQ1ltSUNoMFpTQTlJSE14TGxJNFZVa3BMQ0JDSUQwOVBTQnpNUzVWVGxOSlIwNUZSRjlUU0U5U1ZDQW1KaUFvZEdVZ1BTQnpNUzVTTVRaVlNTa3NJRUlnUFQwOUlITXhMbFZPVTBsSFRrVkVYMGxPVkNBbUppQW9kR1VnUFNCek1TNVNNekpWU1Nrc0lFSWdQVDA5SUhNeExrSlpWRVVnSmlZZ0tIUmxJRDBnY3pFdVVqaEpLU3dnUWlBOVBUMGdjekV1VTBoUFVsUWdKaVlnS0hSbElEMGdjekV1VWpFMlNTa3NJRUlnUFQwOUlITXhMa2xPVkNBbUppQW9kR1VnUFNCek1TNVNNekpKS1Nrc0lGTWdQVDA5SUhNeExsSkhJQ1ltSUNoQ0lEMDlQU0J6TVM1R1RFOUJWQ0FtSmlBb2RHVWdQU0J6TVM1U1J6TXlSaWtzSUVJZ1BUMDlJSE14TGtoQlRFWmZSa3hQUVZRZ0ppWWdLSFJsSUQwZ2N6RXVVa2N4TmtZcExDQkNJRDA5UFNCek1TNVZUbE5KUjA1RlJGOUNXVlJGSUNZbUlDaDBaU0E5SUhNeExsSkhPQ2twTENCVElEMDlQU0J6TVM1U1IwSkJLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JOWlNBOUlHb2dQeUI2Y2lBNklGRmxMbWRsZEZSeVlXNXpabVZ5S0dWbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnUWlBOVBUMGdjekV1Umt4UFFWUWdKaVlnS0hSbElEMGdjekV1VWtkQ1FUTXlSaWtzSUVJZ1BUMDlJSE14TGtoQlRFWmZSa3hQUVZRZ0ppWWdLSFJsSUQwZ2N6RXVVa2RDUVRFMlJpa3NJRUlnUFQwOUlITXhMbFZPVTBsSFRrVkVYMEpaVkVVZ0ppWWdLSFJsSUQwZ1RXVWdQVDA5SUc1MElEOGdjekV1VTFKSFFqaGZRVXhRU0VFNElEb2djekV1VWtkQ1FUZ3BMQ0JDSUQwOVBTQnpNUzVWVGxOSlIwNUZSRjlUU0U5U1ZGODBYelJmTkY4MElDWW1JQ2gwWlNBOUlITXhMbEpIUWtFMEtTd2dRaUE5UFQwZ2N6RXVWVTVUU1VkT1JVUmZVMGhQVWxSZk5WODFYelZmTVNBbUppQW9kR1VnUFNCek1TNVNSMEkxWDBFeEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaDBaU0E5UFQwZ2N6RXVVakUyUmlCOGZDQjBaU0E5UFQwZ2N6RXVVak15UmlCOGZDQjBaU0E5UFQwZ2N6RXVVa2N4TmtZZ2ZId2dkR1VnUFQwOUlITXhMbEpITXpKR0lIeDhJSFJsSUQwOVBTQnpNUzVTUjBKQk1UWkdJSHg4SUhSbElEMDlQU0J6TVM1U1IwSkJNekpHS1NBbUppQmxMbWRsZENnaVJWaFVYMk52Ykc5eVgySjFabVpsY2w5bWJHOWhkQ0lwTENCMFpUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRTBvUXl3Z1V5d2dRaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIzS0VNc0lFSXBJRDA5UFNBaE1DQjhmQ0JETG1selJuSmhiV1ZpZFdabVpYSlVaWGgwZFhKbElDWW1JRU11YldsdVJtbHNkR1Z5SUNFOVBTQndkQ0FtSmlCRExtMXBia1pwYkhSbGNpQWhQVDBnYlhRZ1B5Qk5ZWFJvTG14dlp6SW9UV0YwYUM1dFlYZ29VeTUzYVdSMGFDd2dVeTVvWldsbmFIUXBLU0FySURFZ09pQkRMbTFwY0cxaGNITWdJVDA5SUhadmFXUWdNQ0FtSmlCRExtMXBjRzFoY0hNdWJHVnVaM1JvSUQ0Z01DQS9JRU11Yldsd2JXRndjeTVzWlc1bmRHZ2dPaUJETG1selEyOXRjSEpsYzNObFpGUmxlSFIxY21VZ0ppWWdRWEp5WVhrdWFYTkJjbkpoZVNoRExtbHRZV2RsS1NBL0lGTXViV2x3YldGd2N5NXNaVzVuZEdnZ09pQXhPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnVkNoREtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFTWdQVDA5SUhCMElIeDhJRU1nUFQwOUlHWnZJSHg4SUVNZ1BUMDlJRXh5SUQ4Z2N6RXVUa1ZCVWtWVFZDQTZJSE14TGt4SlRrVkJVanNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUU4b1F5a2dld29nSUNBZ0lDQWdJR3hsZENCVElEMGdReTUwWVhKblpYUTdDaUFnSUNBZ0lDQWdVeTV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NKa2FYTndiM05sSWl3Z1R5a3NJQ1FvVXlrc0lGTXVhWE5XYVdSbGIxUmxlSFIxY21VZ0ppWWdiUzVrWld4bGRHVW9VeWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCWktFTXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1V5QTlJRU11ZEdGeVoyVjBPd29nSUNBZ0lDQWdJRk11Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnaVpHbHpjRzl6WlNJc0lGa3BMQ0I2S0ZNcE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdKQ2hES1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRk1nUFNCdUxtZGxkQ2hES1RzS0lDQWdJQ0FnSUNCcFppQW9VeTVmWDNkbFltZHNTVzVwZENBOVBUMGdkbTlwWkNBd0tTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2JHVjBJRUlnUFNCRExuTnZkWEpqWlN3Z1pXVWdQU0JuTG1kbGRDaENLVHNLSUNBZ0lDQWdJQ0JwWmlBb1pXVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR29nUFNCbFpWdFRMbDlmWTJGamFHVkxaWGxkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnFMblZ6WldSVWFXMWxjeTB0TENCcUxuVnpaV1JVYVcxbGN5QTlQVDBnTUNBbUppQlZLRU1wTENCUFltcGxZM1F1YTJWNWN5aGxaU2t1YkdWdVozUm9JRDA5UFNBd0lDWW1JR2N1WkdWc1pYUmxLRUlwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCdUxuSmxiVzkyWlNoREtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRlVvUXlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JUSUQwZ2JpNW5aWFFvUXlrN0NpQWdJQ0FnSUNBZ2N6RXVaR1ZzWlhSbFZHVjRkSFZ5WlNoVExsOWZkMlZpWjJ4VVpYaDBkWEpsS1RzS0lDQWdJQ0FnSUNCc1pYUWdRaUE5SUVNdWMyOTFjbU5sTENCbFpTQTlJR2N1WjJWMEtFSXBPd29nSUNBZ0lDQWdJR1JsYkdWMFpTQmxaVnRUTGw5ZlkyRmphR1ZMWlhsZExDQmhMbTFsYlc5eWVTNTBaWGgwZFhKbGN5MHRPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnZWloREtTQjdDaUFnSUNBZ0lDQWdiR1YwSUZNZ1BTQkRMblJsZUhSMWNtVXNJRUlnUFNCdUxtZGxkQ2hES1N3Z1pXVWdQU0J1TG1kbGRDaFRLVHNLSUNBZ0lDQWdJQ0JwWmlBb1pXVXVYMTkzWldKbmJGUmxlSFIxY21VZ0lUMDlJSFp2YVdRZ01DQW1KaUFvY3pFdVpHVnNaWFJsVkdWNGRIVnlaU2hsWlM1ZlgzZGxZbWRzVkdWNGRIVnlaU2tzSUdFdWJXVnRiM0o1TG5SbGVIUjFjbVZ6TFMwcExDQkRMbVJsY0hSb1ZHVjRkSFZ5WlNBbUppQkRMbVJsY0hSb1ZHVjRkSFZ5WlM1a2FYTndiM05sS0Nrc0lFTXVhWE5YWldKSFRFTjFZbVZTWlc1a1pYSlVZWEpuWlhRcElHWnZjaWhzWlhRZ2FpQTlJREE3SUdvZ1BDQTJPeUJxS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hDTGw5ZmQyVmlaMnhHY21GdFpXSjFabVpsY2x0cVhTa3BJR1p2Y2loc1pYUWdkR1VnUFNBd095QjBaU0E4SUVJdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeVcycGRMbXhsYm1kMGFEc2dkR1VyS3lsek1TNWtaV3hsZEdWR2NtRnRaV0oxWm1abGNpaENMbDlmZDJWaVoyeEdjbUZ0WldKMVptWmxjbHRxWFZ0MFpWMHBPd29nSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSE14TG1SbGJHVjBaVVp5WVcxbFluVm1abVZ5S0VJdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeVcycGRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1FpNWZYM2RsWW1kc1JHVndkR2hpZFdabVpYSWdKaVlnY3pFdVpHVnNaWFJsVW1WdVpHVnlZblZtWm1WeUtFSXVYMTkzWldKbmJFUmxjSFJvWW5WbVptVnlXMnBkS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtFSXVYMTkzWldKbmJFWnlZVzFsWW5WbVptVnlLU2tnWm05eUtHeGxkQ0JxSUQwZ01Ec2dhaUE4SUVJdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeUxteGxibWQwYURzZ2Fpc3JLWE14TG1SbGJHVjBaVVp5WVcxbFluVm1abVZ5S0VJdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeVcycGRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0J6TVM1a1pXeGxkR1ZHY21GdFpXSjFabVpsY2loQ0xsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNpazdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaENMbDlmZDJWaVoyeEVaWEIwYUdKMVptWmxjaUFtSmlCek1TNWtaV3hsZEdWU1pXNWtaWEppZFdabVpYSW9RaTVmWDNkbFltZHNSR1Z3ZEdoaWRXWm1aWElwTENCQ0xsOWZkMlZpWjJ4TmRXeDBhWE5oYlhCc1pXUkdjbUZ0WldKMVptWmxjaUFtSmlCek1TNWtaV3hsZEdWR2NtRnRaV0oxWm1abGNpaENMbDlmZDJWaVoyeE5kV3gwYVhOaGJYQnNaV1JHY21GdFpXSjFabVpsY2lrc0lFSXVYMTkzWldKbmJFTnZiRzl5VW1WdVpHVnlZblZtWm1WeUtTQm1iM0lvYkdWMElHb2dQU0F3T3lCcUlEd2dRaTVmWDNkbFltZHNRMjlzYjNKU1pXNWtaWEppZFdabVpYSXViR1Z1WjNSb095QnFLeXNwUWk1ZlgzZGxZbWRzUTI5c2IzSlNaVzVrWlhKaWRXWm1aWEpiYWwwZ0ppWWdjekV1WkdWc1pYUmxVbVZ1WkdWeVluVm1abVZ5S0VJdVgxOTNaV0puYkVOdmJHOXlVbVZ1WkdWeVluVm1abVZ5VzJwZEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnUWk1ZlgzZGxZbWRzUkdWd2RHaFNaVzVrWlhKaWRXWm1aWElnSmlZZ2N6RXVaR1ZzWlhSbFVtVnVaR1Z5WW5WbVptVnlLRUl1WDE5M1pXSm5iRVJsY0hSb1VtVnVaR1Z5WW5WbVptVnlLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYVdZZ0tFTXVhWE5YWldKSFRFMTFiSFJwY0d4bFVtVnVaR1Z5VkdGeVoyVjBjeWtnWm05eUtHeGxkQ0JxSUQwZ01Dd2dkR1VnUFNCVExteGxibWQwYURzZ2FpQThJSFJsT3lCcUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdUV1VnUFNCdUxtZGxkQ2hUVzJwZEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnVFdVdVgxOTNaV0puYkZSbGVIUjFjbVVnSmlZZ0tITXhMbVJsYkdWMFpWUmxlSFIxY21Vb1RXVXVYMTkzWldKbmJGUmxlSFIxY21VcExDQmhMbTFsYlc5eWVTNTBaWGgwZFhKbGN5MHRLU3dnYmk1eVpXMXZkbVVvVTF0cVhTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJRzR1Y21WdGIzWmxLRk1wTENCdUxuSmxiVzkyWlNoREtUc0tJQ0FnSUgwS0lDQWdJR3hsZENCeElEMGdNRHNLSUNBZ0lHWjFibU4wYVc5dUlFZ29LU0I3Q2lBZ0lDQWdJQ0FnY1NBOUlEQTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJ1WlNncElIc0tJQ0FnSUNBZ0lDQnNaWFFnUXlBOUlIRTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFTWdQajBnWXlBbUppQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVZHVjRkSFZ5WlhNNklGUnllV2x1WnlCMGJ5QjFjMlVnSWlBcklFTWdLeUFpSUhSbGVIUjFjbVVnZFc1cGRITWdkMmhwYkdVZ2RHaHBjeUJIVUZVZ2MzVndjRzl5ZEhNZ2IyNXNlU0FpSUNzZ1l5a3NJSEVnS3owZ01Td2dRenNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUZjb1F5a2dld29nSUNBZ0lDQWdJR3hsZENCVElEMGdXMTA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRk11Y0hWemFDaERMbmR5WVhCVEtTd2dVeTV3ZFhOb0tFTXVkM0poY0ZRcExDQlRMbkIxYzJnb1F5NTNjbUZ3VWlCOGZDQXdLU3dnVXk1d2RYTm9LRU11YldGblJtbHNkR1Z5S1N3Z1V5NXdkWE5vS0VNdWJXbHVSbWxzZEdWeUtTd2dVeTV3ZFhOb0tFTXVZVzVwYzI5MGNtOXdlU2tzSUZNdWNIVnphQ2hETG1sdWRHVnlibUZzUm05eWJXRjBLU3dnVXk1d2RYTm9LRU11Wm05eWJXRjBLU3dnVXk1d2RYTm9LRU11ZEhsd1pTa3NJRk11Y0hWemFDaERMbWRsYm1WeVlYUmxUV2x3YldGd2N5a3NJRk11Y0hWemFDaERMbkJ5WlcxMWJIUnBjR3g1UVd4d2FHRXBMQ0JUTG5CMWMyZ29ReTVtYkdsd1dTa3NJRk11Y0hWemFDaERMblZ1Y0dGamEwRnNhV2R1YldWdWRDa3NJRk11Y0hWemFDaERMbU52Ykc5eVUzQmhZMlVwTENCVExtcHZhVzRvS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlFc29ReXdnVXlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JDSUQwZ2JpNW5aWFFvUXlrN0NpQWdJQ0FnSUNBZ2FXWWdLRU11YVhOV2FXUmxiMVJsZUhSMWNtVWdKaVlnY1dVb1F5a3NJRU11YVhOU1pXNWtaWEpVWVhKblpYUlVaWGgwZFhKbElEMDlQU0FoTVNBbUppQkRMblpsY25OcGIyNGdQaUF3SUNZbUlFSXVYMTkyWlhKemFXOXVJQ0U5UFNCRExuWmxjbk5wYjI0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHVmxJRDBnUXk1cGJXRm5aVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZsSUQwOVBTQnVkV3hzS1NCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUZSbGVIUjFjbVVnYldGeWEyVmtJR1p2Y2lCMWNHUmhkR1VnWW5WMElHNXZJR2x0WVdkbElHUmhkR0VnWm05MWJtUXVJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tHVmxMbU52YlhCc1pYUmxJRDA5UFNBaE1Ta2dZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQlVaWGgwZFhKbElHMWhjbXRsWkNCbWIzSWdkWEJrWVhSbElHSjFkQ0JwYldGblpTQnBjeUJwYm1OdmJYQnNaWFJsSWlrN0NpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1dXVW9RaXdnUXl3Z1V5azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZEM1aWFXNWtWR1Y0ZEhWeVpTaHpNUzVVUlZoVVZWSkZYekpFTENCQ0xsOWZkMlZpWjJ4VVpYaDBkWEpsTENCek1TNVVSVmhVVlZKRk1DQXJJRk1wT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1JDaERMQ0JUS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRUlnUFNCdUxtZGxkQ2hES1RzS0lDQWdJQ0FnSUNCcFppQW9ReTUyWlhKemFXOXVJRDRnTUNBbUppQkNMbDlmZG1WeWMybHZiaUFoUFQwZ1F5NTJaWEp6YVc5dUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUZsbEtFSXNJRU1zSUZNcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFF1WW1sdVpGUmxlSFIxY21Vb2N6RXVWRVZZVkZWU1JWOHlSRjlCVWxKQldTd2dRaTVmWDNkbFltZHNWR1Y0ZEhWeVpTd2djekV1VkVWWVZGVlNSVEFnS3lCVEtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRWNvUXl3Z1V5a2dld29nSUNBZ0lDQWdJR3hsZENCQ0lEMGdiaTVuWlhRb1F5azdDaUFnSUNBZ0lDQWdhV1lnS0VNdWRtVnljMmx2YmlBK0lEQWdKaVlnUWk1ZlgzWmxjbk5wYjI0Z0lUMDlJRU11ZG1WeWMybHZiaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQlpaU2hDTENCRExDQlRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMExtSnBibVJVWlhoMGRYSmxLSE14TGxSRldGUlZVa1ZmTTBRc0lFSXVYMTkzWldKbmJGUmxlSFIxY21Vc0lITXhMbFJGV0ZSVlVrVXdJQ3NnVXlrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQm9aU2hETENCVEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUVJZ1BTQnVMbWRsZENoREtUc0tJQ0FnSUNBZ0lDQnBaaUFvUXk1MlpYSnphVzl1SUQ0Z01DQW1KaUJDTGw5ZmRtVnljMmx2YmlBaFBUMGdReTUyWlhKemFXOXVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbDBLRUlzSUVNc0lGTXBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhRdVltbHVaRlJsZUhSMWNtVW9jekV1VkVWWVZGVlNSVjlEVlVKRlgwMUJVQ3dnUWk1ZlgzZGxZbWRzVkdWNGRIVnlaU3dnY3pFdVZFVllWRlZTUlRBZ0t5QlRLVHNLSUNBZ0lIMEtJQ0FnSUd4bGRDQm1aU0E5SUhzS0lDQWdJQ0FnSUNCYlJISmRPaUJ6TVM1U1JWQkZRVlFzQ2lBZ0lDQWdJQ0FnVzBsMFhUb2djekV1UTB4QlRWQmZWRTlmUlVSSFJTd0tJQ0FnSUNBZ0lDQmJUbkpkT2lCek1TNU5TVkpTVDFKRlJGOVNSVkJGUVZRS0lDQWdJSDBzSUY5bElEMGdld29nSUNBZ0lDQWdJRnR3ZEYwNklITXhMazVGUVZKRlUxUXNDaUFnSUNBZ0lDQWdXMlp2WFRvZ2N6RXVUa1ZCVWtWVFZGOU5TVkJOUVZCZlRrVkJVa1ZUVkN3S0lDQWdJQ0FnSUNCYlRISmRPaUJ6TVM1T1JVRlNSVk5VWDAxSlVFMUJVRjlNU1U1RlFWSXNDaUFnSUNBZ0lDQWdXMjEwWFRvZ2N6RXVURWxPUlVGU0xBb2dJQ0FnSUNBZ0lGdDFaRjA2SUhNeExreEpUa1ZCVWw5TlNWQk5RVkJmVGtWQlVrVlRWQ3dLSUNBZ0lDQWdJQ0JiYkdsZE9pQnpNUzVNU1U1RlFWSmZUVWxRVFVGUVgweEpUa1ZCVWdvZ0lDQWdmU3dnZDJVZ1BTQjdDaUFnSUNBZ0lDQWdXMVZtWFRvZ2N6RXVUa1ZXUlZJc0NpQWdJQ0FnSUNBZ1cxWm1YVG9nY3pFdVFVeFhRVmxUTEFvZ0lDQWdJQ0FnSUZ0RVpsMDZJSE14TGt4RlUxTXNDaUFnSUNBZ0lDQWdXMDltWFRvZ2N6RXVURVZSVlVGTUxBb2dJQ0FnSUNBZ0lGdE9abDA2SUhNeExrVlJWVUZNTEFvZ0lDQWdJQ0FnSUZ0NlpsMDZJSE14TGtkRlVWVkJUQ3dLSUNBZ0lDQWdJQ0JiUm1aZE9pQnpNUzVIVWtWQlZFVlNMQW9nSUNBZ0lDQWdJRnRDWmwwNklITXhMazVQVkVWUlZVRk1DaUFnSUNCOU93b2dJQ0FnWm5WdVkzUnBiMjRnUldVb1F5d2dVeXdnUWlrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hDSUQ4Z0tITXhMblJsZUZCaGNtRnRaWFJsY21rb1F5d2djekV1VkVWWVZGVlNSVjlYVWtGUVgxTXNJR1psVzFNdWQzSmhjRk5kS1N3Z2N6RXVkR1Y0VUdGeVlXMWxkR1Z5YVNoRExDQnpNUzVVUlZoVVZWSkZYMWRTUVZCZlZDd2dabVZiVXk1M2NtRndWRjBwTENBb1F5QTlQVDBnY3pFdVZFVllWRlZTUlY4elJDQjhmQ0JESUQwOVBTQnpNUzVVUlZoVVZWSkZYekpFWDBGU1VrRlpLU0FtSmlCek1TNTBaWGhRWVhKaGJXVjBaWEpwS0VNc0lITXhMbFJGV0ZSVlVrVmZWMUpCVUY5U0xDQm1aVnRUTG5keVlYQlNYU2tzSUhNeExuUmxlRkJoY21GdFpYUmxjbWtvUXl3Z2N6RXVWRVZZVkZWU1JWOU5RVWRmUmtsTVZFVlNMQ0JmWlZ0VExtMWhaMFpwYkhSbGNsMHBMQ0J6TVM1MFpYaFFZWEpoYldWMFpYSnBLRU1zSUhNeExsUkZXRlJWVWtWZlRVbE9YMFpKVEZSRlVpd2dYMlZiVXk1dGFXNUdhV3gwWlhKZEtTa2dPaUFvY3pFdWRHVjRVR0Z5WVcxbGRHVnlhU2hETENCek1TNVVSVmhVVlZKRlgxZFNRVkJmVXl3Z2N6RXVRMHhCVFZCZlZFOWZSVVJIUlNrc0lITXhMblJsZUZCaGNtRnRaWFJsY21rb1F5d2djekV1VkVWWVZGVlNSVjlYVWtGUVgxUXNJSE14TGtOTVFVMVFYMVJQWDBWRVIwVXBMQ0FvUXlBOVBUMGdjekV1VkVWWVZGVlNSVjh6UkNCOGZDQkRJRDA5UFNCek1TNVVSVmhVVlZKRlh6SkVYMEZTVWtGWktTQW1KaUJ6TVM1MFpYaFFZWEpoYldWMFpYSnBLRU1zSUhNeExsUkZXRlJWVWtWZlYxSkJVRjlTTENCek1TNURURUZOVUY5VVQxOUZSRWRGS1N3Z0tGTXVkM0poY0ZNZ0lUMDlJRWwwSUh4OElGTXVkM0poY0ZRZ0lUMDlJRWwwS1NBbUppQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklGUmxlSFIxY21VZ2FYTWdibTkwSUhCdmQyVnlJRzltSUhSM2J5NGdWR1Y0ZEhWeVpTNTNjbUZ3VXlCaGJtUWdWR1Y0ZEhWeVpTNTNjbUZ3VkNCemFHOTFiR1FnWW1VZ2MyVjBJSFJ2SUZSSVVrVkZMa05zWVcxd1ZHOUZaR2RsVjNKaGNIQnBibWN1SWlrc0lITXhMblJsZUZCaGNtRnRaWFJsY21rb1F5d2djekV1VkVWWVZGVlNSVjlOUVVkZlJrbE1WRVZTTENCVUtGTXViV0ZuUm1sc2RHVnlLU2tzSUhNeExuUmxlRkJoY21GdFpYUmxjbWtvUXl3Z2N6RXVWRVZZVkZWU1JWOU5TVTVmUmtsTVZFVlNMQ0JVS0ZNdWJXbHVSbWxzZEdWeUtTa3NJRk11YldsdVJtbHNkR1Z5SUNFOVBTQndkQ0FtSmlCVExtMXBia1pwYkhSbGNpQWhQVDBnYlhRZ0ppWWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQlVaWGgwZFhKbElHbHpJRzV2ZENCd2IzZGxjaUJ2WmlCMGQyOHVJRlJsZUhSMWNtVXViV2x1Um1sc2RHVnlJSE5vYjNWc1pDQmlaU0J6WlhRZ2RHOGdWRWhTUlVVdVRtVmhjbVZ6ZEVacGJIUmxjaUJ2Y2lCVVNGSkZSUzVNYVc1bFlYSkdhV3gwWlhJdUlpa3BMQ0JUTG1OdmJYQmhjbVZHZFc1amRHbHZiaUFtSmlBb2N6RXVkR1Y0VUdGeVlXMWxkR1Z5YVNoRExDQnpNUzVVUlZoVVZWSkZYME5QVFZCQlVrVmZUVTlFUlN3Z2N6RXVRMDlOVUVGU1JWOVNSVVpmVkU5ZlZFVllWRlZTUlNrc0lITXhMblJsZUZCaGNtRnRaWFJsY21rb1F5d2djekV1VkVWWVZGVlNSVjlEVDAxUVFWSkZYMFpWVGtNc0lIZGxXMU11WTI5dGNHRnlaVVoxYm1OMGFXOXVYU2twTENCbExtaGhjeWdpUlZoVVgzUmxlSFIxY21WZlptbHNkR1Z5WDJGdWFYTnZkSEp2Y0dsaklpa2dQVDA5SUNFd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmxaU0E5SUdVdVoyVjBLQ0pGV0ZSZmRHVjRkSFZ5WlY5bWFXeDBaWEpmWVc1cGMyOTBjbTl3YVdNaUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGTXViV0ZuUm1sc2RHVnlJRDA5UFNCd2RDQjhmQ0JUTG0xcGJrWnBiSFJsY2lBaFBUMGdUSElnSmlZZ1V5NXRhVzVHYVd4MFpYSWdJVDA5SUd4cElIeDhJRk11ZEhsd1pTQTlQVDBnZUc0Z0ppWWdaUzVvWVhNb0lrOUZVMTkwWlhoMGRYSmxYMlpzYjJGMFgyeHBibVZoY2lJcElEMDlQU0FoTVNCOGZDQnZJRDA5UFNBaE1TQW1KaUJUTG5SNWNHVWdQVDA5SUZSeklDWW1JR1V1YUdGektDSlBSVk5mZEdWNGRIVnlaVjlvWVd4bVgyWnNiMkYwWDJ4cGJtVmhjaUlwSUQwOVBTQWhNU2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNBb1V5NWhibWx6YjNSeWIzQjVJRDRnTVNCOGZDQnVMbWRsZENoVEtTNWZYMk4xY25KbGJuUkJibWx6YjNSeWIzQjVLU0FtSmlBb2N6RXVkR1Y0VUdGeVlXMWxkR1Z5WmloRExDQmxaUzVVUlZoVVZWSkZYMDFCV0Y5QlRrbFRUMVJTVDFCWlgwVllWQ3dnVFdGMGFDNXRhVzRvVXk1aGJtbHpiM1J5YjNCNUxDQnBMbWRsZEUxaGVFRnVhWE52ZEhKdmNIa29LU2twTENCdUxtZGxkQ2hUS1M1ZlgyTjFjbkpsYm5SQmJtbHpiM1J5YjNCNUlEMGdVeTVoYm1semIzUnliM0I1S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQlVaU2hETENCVEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUVJZ1BTQWhNVHNLSUNBZ0lDQWdJQ0JETGw5ZmQyVmlaMnhKYm1sMElEMDlQU0IyYjJsa0lEQWdKaVlnS0VNdVgxOTNaV0puYkVsdWFYUWdQU0FoTUN3Z1V5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSmthWE53YjNObElpd2dUeWtwT3dvZ0lDQWdJQ0FnSUd4bGRDQmxaU0E5SUZNdWMyOTFjbU5sTENCcUlEMGdaeTVuWlhRb1pXVXBPd29nSUNBZ0lDQWdJR29nUFQwOUlIWnZhV1FnTUNBbUppQW9haUE5SUh0OUxDQm5Mbk5sZENobFpTd2dhaWtwT3dvZ0lDQWdJQ0FnSUd4bGRDQjBaU0E5SUZjb1V5azdDaUFnSUNBZ0lDQWdhV1lnS0hSbElDRTlQU0JETGw5ZlkyRmphR1ZMWlhrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYWx0MFpWMGdQVDA5SUhadmFXUWdNQ0FtSmlBb2FsdDBaVjBnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBkWEpsT2lCek1TNWpjbVZoZEdWVVpYaDBkWEpsS0Nrc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVmtWR2x0WlhNNklEQUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z1lTNXRaVzF2Y25rdWRHVjRkSFZ5WlhNckt5d2dRaUE5SUNFd0tTd2dhbHQwWlYwdWRYTmxaRlJwYldWekt5czdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQk5aU0E5SUdwYlF5NWZYMk5oWTJobFMyVjVYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1RXVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FsdERMbDlmWTJGamFHVkxaWGxkTG5WelpXUlVhVzFsY3kwdExDQk5aUzUxYzJWa1ZHbHRaWE1nUFQwOUlEQWdKaVlnVlNoVEtTa3NJRU11WDE5allXTm9aVXRsZVNBOUlIUmxMQ0JETGw5ZmQyVmlaMnhVWlhoMGRYSmxJRDBnYWx0MFpWMHVkR1Y0ZEhWeVpUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFSTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJaWlNoRExDQlRMQ0JDS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1ZsSUQwZ2N6RXVWRVZZVkZWU1JWOHlSRHNLSUNBZ0lDQWdJQ0FvVXk1cGMwUmhkR0ZCY25KaGVWUmxlSFIxY21VZ2ZId2dVeTVwYzBOdmJYQnlaWE56WldSQmNuSmhlVlJsZUhSMWNtVXBJQ1ltSUNobFpTQTlJSE14TGxSRldGUlZVa1ZmTWtSZlFWSlNRVmtwTENCVExtbHpSR0YwWVRORVZHVjRkSFZ5WlNBbUppQW9aV1VnUFNCek1TNVVSVmhVVlZKRlh6TkVLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FpQTlJRlJsS0VNc0lGTXBMQ0IwWlNBOUlGTXVjMjkxY21ObE93b2dJQ0FnSUNBZ0lIUXVZbWx1WkZSbGVIUjFjbVVvWldVc0lFTXVYMTkzWldKbmJGUmxlSFIxY21Vc0lITXhMbFJGV0ZSVlVrVXdJQ3NnUWlrN0NpQWdJQ0FnSUNBZ2JHVjBJRTFsSUQwZ2JpNW5aWFFvZEdVcE93b2dJQ0FnSUNBZ0lHbG1JQ2gwWlM1MlpYSnphVzl1SUNFOVBTQk5aUzVmWDNabGNuTnBiMjRnZkh3Z2FpQTlQVDBnSVRBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEM1aFkzUnBkbVZVWlhoMGRYSmxLSE14TGxSRldGUlZVa1V3SUNzZ1FpazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlaU0E5SUZGbExtZGxkRkJ5YVcxaGNtbGxjeWhSWlM1M2IzSnJhVzVuUTI5c2IzSlRjR0ZqWlNrc0lHUmxJRDBnVXk1amIyeHZjbE53WVdObElEMDlQU0JZZENBL0lHNTFiR3dnT2lCUlpTNW5aWFJRY21sdFlYSnBaWE1vVXk1amIyeHZjbE53WVdObEtTd2dUR1VnUFNCVExtTnZiRzl5VTNCaFkyVWdQVDA5SUZoMElIeDhJSEpsSUQwOVBTQmtaU0EvSUhNeExrNVBUa1VnT2lCek1TNUNVazlYVTBWU1gwUkZSa0ZWVEZSZlYwVkNSMHc3Q2lBZ0lDQWdJQ0FnSUNBZ0lITXhMbkJwZUdWc1UzUnZjbVZwS0hNeExsVk9VRUZEUzE5R1RFbFFYMWxmVjBWQ1Iwd3NJRk11Wm14cGNGa3BMQ0J6TVM1d2FYaGxiRk4wYjNKbGFTaHpNUzVWVGxCQlEwdGZVRkpGVFZWTVZFbFFURmxmUVV4UVNFRmZWMFZDUjB3c0lGTXVjSEpsYlhWc2RHbHdiSGxCYkhCb1lTa3NJSE14TG5CcGVHVnNVM1J2Y21WcEtITXhMbFZPVUVGRFMxOUJURWxIVGsxRlRsUXNJRk11ZFc1d1lXTnJRV3hwWjI1dFpXNTBLU3dnY3pFdWNHbDRaV3hUZEc5eVpXa29jekV1VlU1UVFVTkxYME5QVEU5U1UxQkJRMFZmUTA5T1ZrVlNVMGxQVGw5WFJVSkhUQ3dnVEdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1dtVWdQU0JpS0ZNcElDWW1JSGtvVXk1cGJXRm5aU2tnUFQwOUlDRXhMQ0J6WlNBOUlIZ29VeTVwYldGblpTd2dXbVVzSUNFeExDQm9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ2MyVWdQU0J5ZENoVExDQnpaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0FrWlNBOUlIa29jMlVwSUh4OElHOHNJRTlsSUQwZ2NpNWpiMjUyWlhKMEtGTXVabTl5YldGMExDQlRMbU52Ykc5eVUzQmhZMlVwTENCSlpTQTlJSEl1WTI5dWRtVnlkQ2hUTG5SNWNHVXBMQ0JTWlNBOUlFa29VeTVwYm5SbGNtNWhiRVp2Y20xaGRDd2dUMlVzSUVsbExDQlRMbU52Ykc5eVUzQmhZMlVzSUZNdWFYTldhV1JsYjFSbGVIUjFjbVVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQkZaU2hsWlN3Z1V5d2dKR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVUN3Z1kyVWdQU0JUTG0xcGNHMWhjSE1zSUdGbElEMGdieUFtSmlCVExtbHpWbWxrWlc5VVpYaDBkWEpsSUNFOVBTQWhNQ3dnWjJVZ1BTQk5aUzVmWDNabGNuTnBiMjRnUFQwOUlIWnZhV1FnTUNCOGZDQnFJRDA5UFNBaE1Dd2dkV1VnUFNCTktGTXNJSE5sTENBa1pTazdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaFRMbWx6UkdWd2RHaFVaWGgwZFhKbEtTQlNaU0E5SUhNeExrUkZVRlJJWDBOUFRWQlBUa1ZPVkN3Z2J5QS9JRk11ZEhsd1pTQTlQVDBnZUc0Z1B5QlNaU0E5SUhNeExrUkZVRlJJWDBOUFRWQlBUa1ZPVkRNeVJpQTZJRk11ZEhsd1pTQTlQVDBnVEc0Z1B5QlNaU0E5SUhNeExrUkZVRlJJWDBOUFRWQlBUa1ZPVkRJMElEb2dVeTUwZVhCbElEMDlQU0JwYVNBL0lGSmxJRDBnY3pFdVJFVlFWRWd5TkY5VFZFVk9RMGxNT0NBNklGSmxJRDBnY3pFdVJFVlFWRWhmUTA5TlVFOU9SVTVVTVRZZ09pQlRMblI1Y0dVZ1BUMDlJSGh1SUNZbUlHTnZibk52YkdVdVpYSnliM0lvSWxkbFlrZE1VbVZ1WkdWeVpYSTZJRVpzYjJGMGFXNW5JSEJ2YVc1MElHUmxjSFJvSUhSbGVIUjFjbVVnY21WeGRXbHlaWE1nVjJWaVIwd3lMaUlwTENCVExtWnZjbTFoZENBOVBUMGdjMmtnSmlZZ1VtVWdQVDA5SUhNeExrUkZVRlJJWDBOUFRWQlBUa1ZPVkNBbUppQlRMblI1Y0dVZ0lUMDlJRmRqSUNZbUlGTXVkSGx3WlNBaFBUMGdURzRnSmlZZ0tHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ1ZYTmxJRlZ1YzJsbmJtVmtVMmh2Y25SVWVYQmxJRzl5SUZWdWMybG5ibVZrU1c1MFZIbHdaU0JtYjNJZ1JHVndkR2hHYjNKdFlYUWdSR1Z3ZEdoVVpYaDBkWEpsTGlJcExDQlRMblI1Y0dVZ1BTQk1iaXdnU1dVZ1BTQnlMbU52Ym5abGNuUW9VeTUwZVhCbEtTa3NJRk11Wm05eWJXRjBJRDA5UFNCWmFTQW1KaUJTWlNBOVBUMGdjekV1UkVWUVZFaGZRMDlOVUU5T1JVNVVJQ1ltSUNoU1pTQTlJSE14TGtSRlVGUklYMU5VUlU1RFNVd3NJRk11ZEhsd1pTQWhQVDBnYVdrZ0ppWWdLR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dWWE5sSUZWdWMybG5ibVZrU1c1ME1qUTRWSGx3WlNCbWIzSWdSR1Z3ZEdoVGRHVnVZMmxzUm05eWJXRjBJRVJsY0hSb1ZHVjRkSFZ5WlM0aUtTd2dVeTUwZVhCbElEMGdhV2tzSUVsbElEMGdjaTVqYjI1MlpYSjBLRk11ZEhsd1pTa3BLU3dnWjJVZ0ppWWdLR0ZsSUQ4Z2RDNTBaWGhUZEc5eVlXZGxNa1FvY3pFdVZFVllWRlZTUlY4eVJDd2dNU3dnVW1Vc0lITmxMbmRwWkhSb0xDQnpaUzVvWldsbmFIUXBJRG9nZEM1MFpYaEpiV0ZuWlRKRUtITXhMbFJGV0ZSVlVrVmZNa1FzSURBc0lGSmxMQ0J6WlM1M2FXUjBhQ3dnYzJVdWFHVnBaMmgwTENBd0xDQlBaU3dnU1dVc0lHNTFiR3dwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9VeTVwYzBSaGRHRlVaWGgwZFhKbEtTQnBaaUFvWTJVdWJHVnVaM1JvSUQ0Z01DQW1KaUFrWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXVWdKaVlnWjJVZ0ppWWdkQzUwWlhoVGRHOXlZV2RsTWtRb2N6RXVWRVZZVkZWU1JWOHlSQ3dnZFdVc0lGSmxMQ0JqWlZzd1hTNTNhV1IwYUN3Z1kyVmJNRjB1YUdWcFoyaDBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdVU0E5SURBc0lHSmxJRDBnWTJVdWJHVnVaM1JvT3lCUklEd2dZbVU3SUZFckt5bFFJRDBnWTJWYlVWMHNJR0ZsSUQ4Z2RDNTBaWGhUZFdKSmJXRm5aVEpFS0hNeExsUkZXRlJWVWtWZk1rUXNJRkVzSURBc0lEQXNJRkF1ZDJsa2RHZ3NJRkF1YUdWcFoyaDBMQ0JQWlN3Z1NXVXNJRkF1WkdGMFlTa2dPaUIwTG5SbGVFbHRZV2RsTWtRb2N6RXVWRVZZVkZWU1JWOHlSQ3dnVVN3Z1VtVXNJRkF1ZDJsa2RHZ3NJRkF1YUdWcFoyaDBMQ0F3TENCUFpTd2dTV1VzSUZBdVpHRjBZU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JUTG1kbGJtVnlZWFJsVFdsd2JXRndjeUE5SUNFeE93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdZV1VnUHlBb1oyVWdKaVlnZEM1MFpYaFRkRzl5WVdkbE1rUW9jekV1VkVWWVZGVlNSVjh5UkN3Z2RXVXNJRkpsTENCelpTNTNhV1IwYUN3Z2MyVXVhR1ZwWjJoMEtTd2dkQzUwWlhoVGRXSkpiV0ZuWlRKRUtITXhMbFJGV0ZSVlVrVmZNa1FzSURBc0lEQXNJREFzSUhObExuZHBaSFJvTENCelpTNW9aV2xuYUhRc0lFOWxMQ0JKWlN3Z2MyVXVaR0YwWVNrcElEb2dkQzUwWlhoSmJXRm5aVEpFS0hNeExsUkZXRlJWVWtWZk1rUXNJREFzSUZKbExDQnpaUzUzYVdSMGFDd2djMlV1YUdWcFoyaDBMQ0F3TENCUFpTd2dTV1VzSUhObExtUmhkR0VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaFRMbWx6UTI5dGNISmxjM05sWkZSbGVIUjFjbVVwSUdsbUlDaFRMbWx6UTI5dGNISmxjM05sWkVGeWNtRjVWR1Y0ZEhWeVpTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1VnSmlZZ1oyVWdKaVlnZEM1MFpYaFRkRzl5WVdkbE0wUW9jekV1VkVWWVZGVlNSVjh5UkY5QlVsSkJXU3dnZFdVc0lGSmxMQ0JqWlZzd1hTNTNhV1IwYUN3Z1kyVmJNRjB1YUdWcFoyaDBMQ0J6WlM1a1pYQjBhQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRkVnUFNBd0xDQmlaU0E5SUdObExteGxibWQwYURzZ1VTQThJR0psT3lCUkt5c3BVQ0E5SUdObFcxRmRMQ0JUTG1admNtMWhkQ0FoUFQwZ1YzUWdQeUJQWlNBaFBUMGdiblZzYkNBL0lHRmxJRDhnZEM1amIyMXdjbVZ6YzJWa1ZHVjRVM1ZpU1cxaFoyVXpSQ2h6TVM1VVJWaFVWVkpGWHpKRVgwRlNVa0ZaTENCUkxDQXdMQ0F3TENBd0xDQlFMbmRwWkhSb0xDQlFMbWhsYVdkb2RDd2djMlV1WkdWd2RHZ3NJRTlsTENCUUxtUmhkR0VzSURBc0lEQXBJRG9nZEM1amIyMXdjbVZ6YzJWa1ZHVjRTVzFoWjJVelJDaHpNUzVVUlZoVVZWSkZYekpFWDBGU1VrRlpMQ0JSTENCU1pTd2dVQzUzYVdSMGFDd2dVQzVvWldsbmFIUXNJSE5sTG1SbGNIUm9MQ0F3TENCUUxtUmhkR0VzSURBc0lEQXBJRG9nWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUJCZEhSbGJYQjBJSFJ2SUd4dllXUWdkVzV6ZFhCd2IzSjBaV1FnWTI5dGNISmxjM05sWkNCMFpYaDBkWEpsSUdadmNtMWhkQ0JwYmlBdWRYQnNiMkZrVkdWNGRIVnlaU2dwSWlrZ09pQmhaU0EvSUhRdWRHVjRVM1ZpU1cxaFoyVXpSQ2h6TVM1VVJWaFVWVkpGWHpKRVgwRlNVa0ZaTENCUkxDQXdMQ0F3TENBd0xDQlFMbmRwWkhSb0xDQlFMbWhsYVdkb2RDd2djMlV1WkdWd2RHZ3NJRTlsTENCSlpTd2dVQzVrWVhSaEtTQTZJSFF1ZEdWNFNXMWhaMlV6UkNoek1TNVVSVmhVVlZKRlh6SkVYMEZTVWtGWkxDQlJMQ0JTWlN3Z1VDNTNhV1IwYUN3Z1VDNW9aV2xuYUhRc0lITmxMbVJsY0hSb0xDQXdMQ0JQWlN3Z1NXVXNJRkF1WkdGMFlTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWlNBbUppQm5aU0FtSmlCMExuUmxlRk4wYjNKaFoyVXlSQ2h6TVM1VVJWaFVWVkpGWHpKRUxDQjFaU3dnVW1Vc0lHTmxXekJkTG5kcFpIUm9MQ0JqWlZzd1hTNW9aV2xuYUhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCUklEMGdNQ3dnWW1VZ1BTQmpaUzVzWlc1bmRHZzdJRkVnUENCaVpUc2dVU3NyS1ZBZ1BTQmpaVnRSWFN3Z1V5NW1iM0p0WVhRZ0lUMDlJRmQwSUQ4Z1QyVWdJVDA5SUc1MWJHd2dQeUJoWlNBL0lIUXVZMjl0Y0hKbGMzTmxaRlJsZUZOMVlrbHRZV2RsTWtRb2N6RXVWRVZZVkZWU1JWOHlSQ3dnVVN3Z01Dd2dNQ3dnVUM1M2FXUjBhQ3dnVUM1b1pXbG5hSFFzSUU5bExDQlFMbVJoZEdFcElEb2dkQzVqYjIxd2NtVnpjMlZrVkdWNFNXMWhaMlV5UkNoek1TNVVSVmhVVlZKRlh6SkVMQ0JSTENCU1pTd2dVQzUzYVdSMGFDd2dVQzVvWldsbmFIUXNJREFzSUZBdVpHRjBZU2tnT2lCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUVGMGRHVnRjSFFnZEc4Z2JHOWhaQ0IxYm5OMWNIQnZjblJsWkNCamIyMXdjbVZ6YzJWa0lIUmxlSFIxY21VZ1ptOXliV0YwSUdsdUlDNTFjR3h2WVdSVVpYaDBkWEpsS0NraUtTQTZJR0ZsSUQ4Z2RDNTBaWGhUZFdKSmJXRm5aVEpFS0hNeExsUkZXRlJWVWtWZk1rUXNJRkVzSURBc0lEQXNJRkF1ZDJsa2RHZ3NJRkF1YUdWcFoyaDBMQ0JQWlN3Z1NXVXNJRkF1WkdGMFlTa2dPaUIwTG5SbGVFbHRZV2RsTWtRb2N6RXVWRVZZVkZWU1JWOHlSQ3dnVVN3Z1VtVXNJRkF1ZDJsa2RHZ3NJRkF1YUdWcFoyaDBMQ0F3TENCUFpTd2dTV1VzSUZBdVpHRjBZU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvVXk1cGMwUmhkR0ZCY25KaGVWUmxlSFIxY21VcElHRmxJRDhnS0dkbElDWW1JSFF1ZEdWNFUzUnZjbUZuWlRORUtITXhMbFJGV0ZSVlVrVmZNa1JmUVZKU1FWa3NJSFZsTENCU1pTd2djMlV1ZDJsa2RHZ3NJSE5sTG1obGFXZG9kQ3dnYzJVdVpHVndkR2dwTENCMExuUmxlRk4xWWtsdFlXZGxNMFFvY3pFdVZFVllWRlZTUlY4eVJGOUJVbEpCV1N3Z01Dd2dNQ3dnTUN3Z01Dd2djMlV1ZDJsa2RHZ3NJSE5sTG1obGFXZG9kQ3dnYzJVdVpHVndkR2dzSUU5bExDQkpaU3dnYzJVdVpHRjBZU2twSURvZ2RDNTBaWGhKYldGblpUTkVLSE14TGxSRldGUlZVa1ZmTWtSZlFWSlNRVmtzSURBc0lGSmxMQ0J6WlM1M2FXUjBhQ3dnYzJVdWFHVnBaMmgwTENCelpTNWtaWEIwYUN3Z01Dd2dUMlVzSUVsbExDQnpaUzVrWVhSaEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvVXk1cGMwUmhkR0V6UkZSbGVIUjFjbVVwSUdGbElEOGdLR2RsSUNZbUlIUXVkR1Y0VTNSdmNtRm5aVE5FS0hNeExsUkZXRlJWVWtWZk0wUXNJSFZsTENCU1pTd2djMlV1ZDJsa2RHZ3NJSE5sTG1obGFXZG9kQ3dnYzJVdVpHVndkR2dwTENCMExuUmxlRk4xWWtsdFlXZGxNMFFvY3pFdVZFVllWRlZTUlY4elJDd2dNQ3dnTUN3Z01Dd2dNQ3dnYzJVdWQybGtkR2dzSUhObExtaGxhV2RvZEN3Z2MyVXVaR1Z3ZEdnc0lFOWxMQ0JKWlN3Z2MyVXVaR0YwWVNrcElEb2dkQzUwWlhoSmJXRm5aVE5FS0hNeExsUkZXRlJWVWtWZk0wUXNJREFzSUZKbExDQnpaUzUzYVdSMGFDd2djMlV1YUdWcFoyaDBMQ0J6WlM1a1pYQjBhQ3dnTUN3Z1QyVXNJRWxsTENCelpTNWtZWFJoS1RzS0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9VeTVwYzBaeVlXMWxZblZtWm1WeVZHVjRkSFZ5WlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2RsS1NCcFppQW9ZV1VwSUhRdWRHVjRVM1J2Y21GblpUSkVLSE14TGxSRldGUlZVa1ZmTWtRc0lIVmxMQ0JTWlN3Z2MyVXVkMmxrZEdnc0lITmxMbWhsYVdkb2RDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVVNBOUlITmxMbmRwWkhSb0xDQmlaU0E5SUhObExtaGxhV2RvZERzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFWmxJRDBnTURzZ1JtVWdQQ0IxWlRzZ1JtVXJLeWwwTG5SbGVFbHRZV2RsTWtRb2N6RXVWRVZZVkZWU1JWOHlSQ3dnUm1Vc0lGSmxMQ0JSTENCaVpTd2dNQ3dnVDJVc0lFbGxMQ0J1ZFd4c0tTd2dVU0ErUGowZ01Td2dZbVVnUGo0OUlERTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyVXViR1Z1WjNSb0lENGdNQ0FtSmlBa1pTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1VnSmlZZ1oyVWdKaVlnZEM1MFpYaFRkRzl5WVdkbE1rUW9jekV1VkVWWVZGVlNSVjh5UkN3Z2RXVXNJRkpsTENCalpWc3dYUzUzYVdSMGFDd2dZMlZiTUYwdWFHVnBaMmgwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnVVNBOUlEQXNJR0psSUQwZ1kyVXViR1Z1WjNSb095QlJJRHdnWW1VN0lGRXJLeWxRSUQwZ1kyVmJVVjBzSUdGbElEOGdkQzUwWlhoVGRXSkpiV0ZuWlRKRUtITXhMbFJGV0ZSVlVrVmZNa1FzSUZFc0lEQXNJREFzSUU5bExDQkpaU3dnVUNrZ09pQjBMblJsZUVsdFlXZGxNa1FvY3pFdVZFVllWRlZTUlY4eVJDd2dVU3dnVW1Vc0lFOWxMQ0JKWlN3Z1VDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlRMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJQ0V4T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ1lXVWdQeUFvWjJVZ0ppWWdkQzUwWlhoVGRHOXlZV2RsTWtRb2N6RXVWRVZZVkZWU1JWOHlSQ3dnZFdVc0lGSmxMQ0J6WlM1M2FXUjBhQ3dnYzJVdWFHVnBaMmgwS1N3Z2RDNTBaWGhUZFdKSmJXRm5aVEpFS0hNeExsUkZXRlJWVWtWZk1rUXNJREFzSURBc0lEQXNJRTlsTENCSlpTd2djMlVwS1NBNklIUXVkR1Y0U1cxaFoyVXlSQ2h6TVM1VVJWaFVWVkpGWHpKRUxDQXdMQ0JTWlN3Z1QyVXNJRWxsTENCelpTazdDaUFnSUNBZ0lDQWdJQ0FnSUhjb1V5d2dKR1VwSUNZbUlGSW9aV1VwTENCTlpTNWZYM1psY25OcGIyNGdQU0IwWlM1MlpYSnphVzl1TENCVExtOXVWWEJrWVhSbElDWW1JRk11YjI1VmNHUmhkR1VvVXlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lFTXVYMTkyWlhKemFXOXVJRDBnVXk1MlpYSnphVzl1T3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2FYUW9ReXdnVXl3Z1Fpa2dld29nSUNBZ0lDQWdJR2xtSUNoVExtbHRZV2RsTG14bGJtZDBhQ0FoUFQwZ05pa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lHeGxkQ0JsWlNBOUlGUmxLRU1zSUZNcExDQnFJRDBnVXk1emIzVnlZMlU3Q2lBZ0lDQWdJQ0FnZEM1aWFXNWtWR1Y0ZEhWeVpTaHpNUzVVUlZoVVZWSkZYME5WUWtWZlRVRlFMQ0JETGw5ZmQyVmlaMnhVWlhoMGRYSmxMQ0J6TVM1VVJWaFVWVkpGTUNBcklFSXBPd29nSUNBZ0lDQWdJR3hsZENCMFpTQTlJRzR1WjJWMEtHb3BPd29nSUNBZ0lDQWdJR2xtSUNocUxuWmxjbk5wYjI0Z0lUMDlJSFJsTGw5ZmRtVnljMmx2YmlCOGZDQmxaU0E5UFQwZ0lUQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDNWhZM1JwZG1WVVpYaDBkWEpsS0hNeExsUkZXRlJWVWtVd0lDc2dRaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JOWlNBOUlGRmxMbWRsZEZCeWFXMWhjbWxsY3loUlpTNTNiM0pyYVc1blEyOXNiM0pUY0dGalpTa3NJSEpsSUQwZ1V5NWpiMnh2Y2xOd1lXTmxJRDA5UFNCWWRDQS9JRzUxYkd3Z09pQlJaUzVuWlhSUWNtbHRZWEpwWlhNb1V5NWpiMnh2Y2xOd1lXTmxLU3dnWkdVZ1BTQlRMbU52Ykc5eVUzQmhZMlVnUFQwOUlGaDBJSHg4SUUxbElEMDlQU0J5WlNBL0lITXhMazVQVGtVZ09pQnpNUzVDVWs5WFUwVlNYMFJGUmtGVlRGUmZWMFZDUjB3N0NpQWdJQ0FnSUNBZ0lDQWdJSE14TG5CcGVHVnNVM1J2Y21WcEtITXhMbFZPVUVGRFMxOUdURWxRWDFsZlYwVkNSMHdzSUZNdVpteHBjRmtwTENCek1TNXdhWGhsYkZOMGIzSmxhU2h6TVM1VlRsQkJRMHRmVUZKRlRWVk1WRWxRVEZsZlFVeFFTRUZmVjBWQ1Iwd3NJRk11Y0hKbGJYVnNkR2x3YkhsQmJIQm9ZU2tzSUhNeExuQnBlR1ZzVTNSdmNtVnBLSE14TGxWT1VFRkRTMTlCVEVsSFRrMUZUbFFzSUZNdWRXNXdZV05yUVd4cFoyNXRaVzUwS1N3Z2N6RXVjR2w0Wld4VGRHOXlaV2tvY3pFdVZVNVFRVU5MWDBOUFRFOVNVMUJCUTBWZlEwOU9Wa1ZTVTBsUFRsOVhSVUpIVEN3Z1pHVXBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdUR1VnUFNCVExtbHpRMjl0Y0hKbGMzTmxaRlJsZUhSMWNtVWdmSHdnVXk1cGJXRm5aVnN3WFM1cGMwTnZiWEJ5WlhOelpXUlVaWGgwZFhKbExDQmFaU0E5SUZNdWFXMWhaMlZiTUYwZ0ppWWdVeTVwYldGblpWc3dYUzVwYzBSaGRHRlVaWGgwZFhKbExDQnpaU0E5SUZ0ZE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRkVnUFNBd095QlJJRHdnTmpzZ1VTc3JLU0ZNWlNBbUppQWhXbVVnUHlCelpWdFJYU0E5SUhnb1V5NXBiV0ZuWlZ0UlhTd2dJVEVzSUNFd0xDQnNLU0E2SUhObFcxRmRJRDBnV21VZ1B5QlRMbWx0WVdkbFcxRmRMbWx0WVdkbElEb2dVeTVwYldGblpWdFJYU3dnYzJWYlVWMGdQU0J5ZENoVExDQnpaVnRSWFNrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENBa1pTQTlJSE5sV3pCZExDQlBaU0E5SUhrb0pHVXBJSHg4SUc4c0lFbGxJRDBnY2k1amIyNTJaWEowS0ZNdVptOXliV0YwTENCVExtTnZiRzl5VTNCaFkyVXBMQ0JTWlNBOUlISXVZMjl1ZG1WeWRDaFRMblI1Y0dVcExDQlFJRDBnU1NoVExtbHVkR1Z5Ym1Gc1JtOXliV0YwTENCSlpTd2dVbVVzSUZNdVkyOXNiM0pUY0dGalpTa3NJR05sSUQwZ2J5QW1KaUJUTG1selZtbGtaVzlVWlhoMGRYSmxJQ0U5UFNBaE1Dd2dZV1VnUFNCMFpTNWZYM1psY25OcGIyNGdQVDA5SUhadmFXUWdNQ0I4ZkNCbFpTQTlQVDBnSVRBc0lHZGxJRDBnVFNoVExDQWtaU3dnVDJVcE93b2dJQ0FnSUNBZ0lDQWdJQ0JGWlNoek1TNVVSVmhVVlZKRlgwTlZRa1ZmVFVGUUxDQlRMQ0JQWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFeGxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWlNBbUppQmhaU0FtSmlCMExuUmxlRk4wYjNKaFoyVXlSQ2h6TVM1VVJWaFVWVkpGWDBOVlFrVmZUVUZRTENCblpTd2dVQ3dnSkdVdWQybGtkR2dzSUNSbExtaGxhV2RvZENrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUZFZ1BTQXdPeUJSSUR3Z05qc2dVU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFaU0E5SUhObFcxRmRMbTFwY0cxaGNITTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JpWlNBOUlEQTdJR0psSUR3Z2RXVXViR1Z1WjNSb095QmlaU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFWmxJRDBnZFdWYlltVmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlRMbVp2Y20xaGRDQWhQVDBnVjNRZ1B5QkpaU0FoUFQwZ2JuVnNiQ0EvSUdObElEOGdkQzVqYjIxd2NtVnpjMlZrVkdWNFUzVmlTVzFoWjJVeVJDaHpNUzVVUlZoVVZWSkZYME5WUWtWZlRVRlFYMUJQVTBsVVNWWkZYMWdnS3lCUkxDQmlaU3dnTUN3Z01Dd2dSbVV1ZDJsa2RHZ3NJRVpsTG1obGFXZG9kQ3dnU1dVc0lFWmxMbVJoZEdFcElEb2dkQzVqYjIxd2NtVnpjMlZrVkdWNFNXMWhaMlV5UkNoek1TNVVSVmhVVlZKRlgwTlZRa1ZmVFVGUVgxQlBVMGxVU1ZaRlgxZ2dLeUJSTENCaVpTd2dVQ3dnUm1VdWQybGtkR2dzSUVabExtaGxhV2RvZEN3Z01Dd2dSbVV1WkdGMFlTa2dPaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJRUYwZEdWdGNIUWdkRzhnYkc5aFpDQjFibk4xY0hCdmNuUmxaQ0JqYjIxd2NtVnpjMlZrSUhSbGVIUjFjbVVnWm05eWJXRjBJR2x1SUM1elpYUlVaWGgwZFhKbFEzVmlaU2dwSWlrZ09pQmpaU0EvSUhRdWRHVjRVM1ZpU1cxaFoyVXlSQ2h6TVM1VVJWaFVWVkpGWDBOVlFrVmZUVUZRWDFCUFUwbFVTVlpGWDFnZ0t5QlJMQ0JpWlN3Z01Dd2dNQ3dnUm1VdWQybGtkR2dzSUVabExtaGxhV2RvZEN3Z1NXVXNJRkpsTENCR1pTNWtZWFJoS1NBNklIUXVkR1Y0U1cxaFoyVXlSQ2h6TVM1VVJWaFVWVkpGWDBOVlFrVmZUVUZRWDFCUFUwbFVTVlpGWDFnZ0t5QlJMQ0JpWlN3Z1VDd2dSbVV1ZDJsa2RHZ3NJRVpsTG1obGFXZG9kQ3dnTUN3Z1NXVXNJRkpsTENCR1pTNWtZWFJoS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxWlNBOUlGTXViV2x3YldGd2N5d2dZMlVnSmlZZ1lXVWdKaVlnS0hWbExteGxibWQwYUNBK0lEQWdKaVlnWjJVckt5d2dkQzUwWlhoVGRHOXlZV2RsTWtRb2N6RXVWRVZZVkZWU1JWOURWVUpGWDAxQlVDd2daMlVzSUZBc0lITmxXekJkTG5kcFpIUm9MQ0J6WlZzd1hTNW9aV2xuYUhRcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1VTQTlJREE3SUZFZ1BDQTJPeUJSS3lzcGFXWWdLRnBsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMlVnUHlCMExuUmxlRk4xWWtsdFlXZGxNa1FvY3pFdVZFVllWRlZTUlY5RFZVSkZYMDFCVUY5UVQxTkpWRWxXUlY5WUlDc2dVU3dnTUN3Z01Dd2dNQ3dnYzJWYlVWMHVkMmxrZEdnc0lITmxXMUZkTG1obGFXZG9kQ3dnU1dVc0lGSmxMQ0J6WlZ0UlhTNWtZWFJoS1NBNklIUXVkR1Y0U1cxaFoyVXlSQ2h6TVM1VVJWaFVWVkpGWDBOVlFrVmZUVUZRWDFCUFUwbFVTVlpGWDFnZ0t5QlJMQ0F3TENCUUxDQnpaVnRSWFM1M2FXUjBhQ3dnYzJWYlVWMHVhR1ZwWjJoMExDQXdMQ0JKWlN3Z1VtVXNJSE5sVzFGZExtUmhkR0VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ltVWdQU0F3T3lCaVpTQThJSFZsTG14bGJtZDBhRHNnWW1Vckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JCZENBOUlIVmxXMkpsWFM1cGJXRm5aVnRSWFM1cGJXRm5aVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMlVnUHlCMExuUmxlRk4xWWtsdFlXZGxNa1FvY3pFdVZFVllWRlZTUlY5RFZVSkZYMDFCVUY5UVQxTkpWRWxXUlY5WUlDc2dVU3dnWW1VZ0t5QXhMQ0F3TENBd0xDQkJkQzUzYVdSMGFDd2dRWFF1YUdWcFoyaDBMQ0JKWlN3Z1VtVXNJRUYwTG1SaGRHRXBJRG9nZEM1MFpYaEpiV0ZuWlRKRUtITXhMbFJGV0ZSVlVrVmZRMVZDUlY5TlFWQmZVRTlUU1ZSSlZrVmZXQ0FySUZFc0lHSmxJQ3NnTVN3Z1VDd2dRWFF1ZDJsa2RHZ3NJRUYwTG1obGFXZG9kQ3dnTUN3Z1NXVXNJRkpsTENCQmRDNWtZWFJoS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05sSUQ4Z2RDNTBaWGhUZFdKSmJXRm5aVEpFS0hNeExsUkZXRlJWVWtWZlExVkNSVjlOUVZCZlVFOVRTVlJKVmtWZldDQXJJRkVzSURBc0lEQXNJREFzSUVsbExDQlNaU3dnYzJWYlVWMHBJRG9nZEM1MFpYaEpiV0ZuWlRKRUtITXhMbFJGV0ZSVlVrVmZRMVZDUlY5TlFWQmZVRTlUU1ZSSlZrVmZXQ0FySUZFc0lEQXNJRkFzSUVsbExDQlNaU3dnYzJWYlVWMHBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWW1VZ1BTQXdPeUJpWlNBOElIVmxMbXhsYm1kMGFEc2dZbVVyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkdaU0E5SUhWbFcySmxYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMlVnUHlCMExuUmxlRk4xWWtsdFlXZGxNa1FvY3pFdVZFVllWRlZTUlY5RFZVSkZYMDFCVUY5UVQxTkpWRWxXUlY5WUlDc2dVU3dnWW1VZ0t5QXhMQ0F3TENBd0xDQkpaU3dnVW1Vc0lFWmxMbWx0WVdkbFcxRmRLU0E2SUhRdWRHVjRTVzFoWjJVeVJDaHpNUzVVUlZoVVZWSkZYME5WUWtWZlRVRlFYMUJQVTBsVVNWWkZYMWdnS3lCUkxDQmlaU0FySURFc0lGQXNJRWxsTENCU1pTd2dSbVV1YVcxaFoyVmJVVjBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjNLRk1zSUU5bEtTQW1KaUJTS0hNeExsUkZXRlJWVWtWZlExVkNSVjlOUVZBcExDQjBaUzVmWDNabGNuTnBiMjRnUFNCcUxuWmxjbk5wYjI0c0lGTXViMjVWY0dSaGRHVWdKaVlnVXk1dmJsVndaR0YwWlNoVEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdReTVmWDNabGNuTnBiMjRnUFNCVExuWmxjbk5wYjI0N0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQkRaU2hETENCVExDQkNMQ0JsWlN3Z2Fpd2dkR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdUV1VnUFNCeUxtTnZiblpsY25Rb1FpNW1iM0p0WVhRc0lFSXVZMjlzYjNKVGNHRmpaU2tzSUhKbElEMGdjaTVqYjI1MlpYSjBLRUl1ZEhsd1pTa3NJR1JsSUQwZ1NTaENMbWx1ZEdWeWJtRnNSbTl5YldGMExDQk5aU3dnY21Vc0lFSXVZMjlzYjNKVGNHRmpaU2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tDRnVMbWRsZENoVEtTNWZYMmhoYzBWNGRHVnlibUZzVkdWNGRIVnlaWE1wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZwbElEMGdUV0YwYUM1dFlYZ29NU3dnVXk1M2FXUjBhQ0ErUGlCMFpTa3NJSE5sSUQwZ1RXRjBhQzV0WVhnb01Td2dVeTVvWldsbmFIUWdQajRnZEdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0JxSUQwOVBTQnpNUzVVUlZoVVZWSkZYek5FSUh4OElHb2dQVDA5SUhNeExsUkZXRlJWVWtWZk1rUmZRVkpTUVZrZ1B5QjBMblJsZUVsdFlXZGxNMFFvYWl3Z2RHVXNJR1JsTENCYVpTd2djMlVzSUZNdVpHVndkR2dzSURBc0lFMWxMQ0J5WlN3Z2JuVnNiQ2tnT2lCMExuUmxlRWx0WVdkbE1rUW9haXdnZEdVc0lHUmxMQ0JhWlN3Z2MyVXNJREFzSUUxbExDQnlaU3dnYm5Wc2JDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFF1WW1sdVpFWnlZVzFsWW5WbVptVnlLSE14TGtaU1FVMUZRbFZHUmtWU0xDQkRLU3dnVG1Vb1V5a2dQeUJrTG1aeVlXMWxZblZtWm1WeVZHVjRkSFZ5WlRKRVRYVnNkR2x6WVcxd2JHVkZXRlFvY3pFdVJsSkJUVVZDVlVaR1JWSXNJR1ZsTENCcUxDQnVMbWRsZENoQ0tTNWZYM2RsWW1kc1ZHVjRkSFZ5WlN3Z01Dd2dlV1VvVXlrcElEb2dLR29nUFQwOUlITXhMbFJGV0ZSVlVrVmZNa1FnZkh3Z2FpQStQU0J6TVM1VVJWaFVWVkpGWDBOVlFrVmZUVUZRWDFCUFUwbFVTVlpGWDFnZ0ppWWdhaUE4UFNCek1TNVVSVmhVVlZKRlgwTlZRa1ZmVFVGUVgwNUZSMEZVU1ZaRlgxb3BJQ1ltSUhNeExtWnlZVzFsWW5WbVptVnlWR1Y0ZEhWeVpUSkVLSE14TGtaU1FVMUZRbFZHUmtWU0xDQmxaU3dnYWl3Z2JpNW5aWFFvUWlrdVgxOTNaV0puYkZSbGVIUjFjbVVzSUhSbEtTd2dkQzVpYVc1a1JuSmhiV1ZpZFdabVpYSW9jekV1UmxKQlRVVkNWVVpHUlZJc0lHNTFiR3dwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1RDaERMQ0JUTENCQ0tTQjdDaUFnSUNBZ0lDQWdhV1lnS0hNeExtSnBibVJTWlc1a1pYSmlkV1ptWlhJb2N6RXVVa1ZPUkVWU1FsVkdSa1ZTTENCREtTd2dVeTVrWlhCMGFFSjFabVpsY2lBbUppQWhVeTV6ZEdWdVkybHNRblZtWm1WeUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmxaU0E5SUc4Z1BUMDlJQ0V3SUQ4Z2N6RXVSRVZRVkVoZlEwOU5VRTlPUlU1VU1qUWdPaUJ6TVM1RVJWQlVTRjlEVDAxUVQwNUZUbFF4TmpzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VJZ2ZId2dUbVVvVXlrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JxSUQwZ1V5NWtaWEIwYUZSbGVIUjFjbVU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JxSUNZbUlHb3VhWE5FWlhCMGFGUmxlSFIxY21VZ0ppWWdLR291ZEhsd1pTQTlQVDBnZUc0Z1B5QmxaU0E5SUhNeExrUkZVRlJJWDBOUFRWQlBUa1ZPVkRNeVJpQTZJR291ZEhsd1pTQTlQVDBnVEc0Z0ppWWdLR1ZsSUQwZ2N6RXVSRVZRVkVoZlEwOU5VRTlPUlU1VU1qUXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMFpTQTlJSGxsS0ZNcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RtVW9VeWtnUHlCa0xuSmxibVJsY21KMVptWmxjbE4wYjNKaFoyVk5kV3gwYVhOaGJYQnNaVVZZVkNoek1TNVNSVTVFUlZKQ1ZVWkdSVklzSUhSbExDQmxaU3dnVXk1M2FXUjBhQ3dnVXk1b1pXbG5hSFFwSURvZ2N6RXVjbVZ1WkdWeVluVm1abVZ5VTNSdmNtRm5aVTExYkhScGMyRnRjR3hsS0hNeExsSkZUa1JGVWtKVlJrWkZVaXdnZEdVc0lHVmxMQ0JUTG5kcFpIUm9MQ0JUTG1obGFXZG9kQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCek1TNXlaVzVrWlhKaWRXWm1aWEpUZEc5eVlXZGxLSE14TGxKRlRrUkZVa0pWUmtaRlVpd2daV1VzSUZNdWQybGtkR2dzSUZNdWFHVnBaMmgwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjekV1Wm5KaGJXVmlkV1ptWlhKU1pXNWtaWEppZFdabVpYSW9jekV1UmxKQlRVVkNWVVpHUlZJc0lITXhMa1JGVUZSSVgwRlVWRUZEU0UxRlRsUXNJSE14TGxKRlRrUkZVa0pWUmtaRlVpd2dReWs3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoVExtUmxjSFJvUW5WbVptVnlJQ1ltSUZNdWMzUmxibU5wYkVKMVptWmxjaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWldVZ1BTQjVaU2hUS1RzS0lDQWdJQ0FnSUNBZ0lDQWdRaUFtSmlCT1pTaFRLU0E5UFQwZ0lURWdQeUJ6TVM1eVpXNWtaWEppZFdabVpYSlRkRzl5WVdkbFRYVnNkR2x6WVcxd2JHVW9jekV1VWtWT1JFVlNRbFZHUmtWU0xDQmxaU3dnY3pFdVJFVlFWRWd5TkY5VFZFVk9RMGxNT0N3Z1V5NTNhV1IwYUN3Z1V5NW9aV2xuYUhRcElEb2dUbVVvVXlrZ1B5QmtMbkpsYm1SbGNtSjFabVpsY2xOMGIzSmhaMlZOZFd4MGFYTmhiWEJzWlVWWVZDaHpNUzVTUlU1RVJWSkNWVVpHUlZJc0lHVmxMQ0J6TVM1RVJWQlVTREkwWDFOVVJVNURTVXc0TENCVExuZHBaSFJvTENCVExtaGxhV2RvZENrZ09pQnpNUzV5Wlc1a1pYSmlkV1ptWlhKVGRHOXlZV2RsS0hNeExsSkZUa1JGVWtKVlJrWkZVaXdnY3pFdVJFVlFWRWhmVTFSRlRrTkpUQ3dnVXk1M2FXUjBhQ3dnVXk1b1pXbG5hSFFwTENCek1TNW1jbUZ0WldKMVptWmxjbEpsYm1SbGNtSjFabVpsY2loek1TNUdVa0ZOUlVKVlJrWkZVaXdnY3pFdVJFVlFWRWhmVTFSRlRrTkpURjlCVkZSQlEwaE5SVTVVTENCek1TNVNSVTVFUlZKQ1ZVWkdSVklzSUVNcE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbFpTQTlJRk11YVhOWFpXSkhURTExYkhScGNHeGxVbVZ1WkdWeVZHRnlaMlYwY3lBOVBUMGdJVEFnUHlCVExuUmxlSFIxY21VZ09pQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlRMblJsZUhSMWNtVUtJQ0FnSUNBZ0lDQWdJQ0FnWFRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnFJRDBnTURzZ2FpQThJR1ZsTG14bGJtZDBhRHNnYWlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwWlNBOUlHVmxXMnBkTENCTlpTQTlJSEl1WTI5dWRtVnlkQ2gwWlM1bWIzSnRZWFFzSUhSbExtTnZiRzl5VTNCaFkyVXBMQ0J5WlNBOUlISXVZMjl1ZG1WeWRDaDBaUzUwZVhCbEtTd2daR1VnUFNCSktIUmxMbWx1ZEdWeWJtRnNSbTl5YldGMExDQk5aU3dnY21Vc0lIUmxMbU52Ykc5eVUzQmhZMlVwTENCTVpTQTlJSGxsS0ZNcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FpQW1KaUJPWlNoVEtTQTlQVDBnSVRFZ1B5QnpNUzV5Wlc1a1pYSmlkV1ptWlhKVGRHOXlZV2RsVFhWc2RHbHpZVzF3YkdVb2N6RXVVa1ZPUkVWU1FsVkdSa1ZTTENCTVpTd2daR1VzSUZNdWQybGtkR2dzSUZNdWFHVnBaMmgwS1NBNklFNWxLRk1wSUQ4Z1pDNXlaVzVrWlhKaWRXWm1aWEpUZEc5eVlXZGxUWFZzZEdsellXMXdiR1ZGV0ZRb2N6RXVVa1ZPUkVWU1FsVkdSa1ZTTENCTVpTd2daR1VzSUZNdWQybGtkR2dzSUZNdWFHVnBaMmgwS1NBNklITXhMbkpsYm1SbGNtSjFabVpsY2xOMGIzSmhaMlVvY3pFdVVrVk9SRVZTUWxWR1JrVlNMQ0JrWlN3Z1V5NTNhV1IwYUN3Z1V5NW9aV2xuYUhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhNeExtSnBibVJTWlc1a1pYSmlkV1ptWlhJb2N6RXVVa1ZPUkVWU1FsVkdSa1ZTTENCdWRXeHNLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUc5bEtFTXNJRk1wSUhzS0lDQWdJQ0FnSUNCcFppQW9VeUFtSmlCVExtbHpWMlZpUjB4RGRXSmxVbVZ1WkdWeVZHRnlaMlYwS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSWtSbGNIUm9JRlJsZUhSMWNtVWdkMmwwYUNCamRXSmxJSEpsYm1SbGNpQjBZWEpuWlhSeklHbHpJRzV2ZENCemRYQndiM0owWldRaUtUc0tJQ0FnSUNBZ0lDQnBaaUFvZEM1aWFXNWtSbkpoYldWaWRXWm1aWElvY3pFdVJsSkJUVVZDVlVaR1JWSXNJRU1wTENBaEtGTXVaR1Z3ZEdoVVpYaDBkWEpsSUNZbUlGTXVaR1Z3ZEdoVVpYaDBkWEpsTG1selJHVndkR2hVWlhoMGRYSmxLU2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ0p5Wlc1a1pYSlVZWEpuWlhRdVpHVndkR2hVWlhoMGRYSmxJRzExYzNRZ1ltVWdZVzRnYVc1emRHRnVZMlVnYjJZZ1ZFaFNSVVV1UkdWd2RHaFVaWGgwZFhKbElpazdDaUFnSUNBZ0lDQWdLQ0Z1TG1kbGRDaFRMbVJsY0hSb1ZHVjRkSFZ5WlNrdVgxOTNaV0puYkZSbGVIUjFjbVVnZkh3Z1V5NWtaWEIwYUZSbGVIUjFjbVV1YVcxaFoyVXVkMmxrZEdnZ0lUMDlJRk11ZDJsa2RHZ2dmSHdnVXk1a1pYQjBhRlJsZUhSMWNtVXVhVzFoWjJVdWFHVnBaMmgwSUNFOVBTQlRMbWhsYVdkb2RDa2dKaVlnS0ZNdVpHVndkR2hVWlhoMGRYSmxMbWx0WVdkbExuZHBaSFJvSUQwZ1V5NTNhV1IwYUN3Z1V5NWtaWEIwYUZSbGVIUjFjbVV1YVcxaFoyVXVhR1ZwWjJoMElEMGdVeTVvWldsbmFIUXNJRk11WkdWd2RHaFVaWGgwZFhKbExtNWxaV1J6VlhCa1lYUmxJRDBnSVRBcExDQkxLRk11WkdWd2RHaFVaWGgwZFhKbExDQXdLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1pXVWdQU0J1TG1kbGRDaFRMbVJsY0hSb1ZHVjRkSFZ5WlNrdVgxOTNaV0puYkZSbGVIUjFjbVVzSUdvZ1BTQjVaU2hUS1RzS0lDQWdJQ0FnSUNCcFppQW9VeTVrWlhCMGFGUmxlSFIxY21VdVptOXliV0YwSUQwOVBTQnphU2tnVG1Vb1V5a2dQeUJrTG1aeVlXMWxZblZtWm1WeVZHVjRkSFZ5WlRKRVRYVnNkR2x6WVcxd2JHVkZXRlFvY3pFdVJsSkJUVVZDVlVaR1JWSXNJSE14TGtSRlVGUklYMEZVVkVGRFNFMUZUbFFzSUhNeExsUkZXRlJWVWtWZk1rUXNJR1ZsTENBd0xDQnFLU0E2SUhNeExtWnlZVzFsWW5WbVptVnlWR1Y0ZEhWeVpUSkVLSE14TGtaU1FVMUZRbFZHUmtWU0xDQnpNUzVFUlZCVVNGOUJWRlJCUTBoTlJVNVVMQ0J6TVM1VVJWaFVWVkpGWHpKRUxDQmxaU3dnTUNrN0NpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1V5NWtaWEIwYUZSbGVIUjFjbVV1Wm05eWJXRjBJRDA5UFNCWmFTa2dUbVVvVXlrZ1B5QmtMbVp5WVcxbFluVm1abVZ5VkdWNGRIVnlaVEpFVFhWc2RHbHpZVzF3YkdWRldGUW9jekV1UmxKQlRVVkNWVVpHUlZJc0lITXhMa1JGVUZSSVgxTlVSVTVEU1V4ZlFWUlVRVU5JVFVWT1ZDd2djekV1VkVWWVZGVlNSVjh5UkN3Z1pXVXNJREFzSUdvcElEb2djekV1Wm5KaGJXVmlkV1ptWlhKVVpYaDBkWEpsTWtRb2N6RXVSbEpCVFVWQ1ZVWkdSVklzSUhNeExrUkZVRlJJWDFOVVJVNURTVXhmUVZSVVFVTklUVVZPVkN3Z2N6RXVWRVZZVkZWU1JWOHlSQ3dnWldVc0lEQXBPd29nSUNBZ0lDQWdJR1ZzYzJVZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NKVmJtdHViM2R1SUdSbGNIUm9WR1Y0ZEhWeVpTQm1iM0p0WVhRaUtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRmdvUXlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JUSUQwZ2JpNW5aWFFvUXlrc0lFSWdQU0JETG1selYyVmlSMHhEZFdKbFVtVnVaR1Z5VkdGeVoyVjBJRDA5UFNBaE1Ec0tJQ0FnSUNBZ0lDQnBaaUFvUXk1a1pYQjBhRlJsZUhSMWNtVWdKaVlnSVZNdVgxOWhkWFJ2UVd4c2IyTmhkR1ZFWlhCMGFFSjFabVpsY2lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1Fpa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDSjBZWEpuWlhRdVpHVndkR2hVWlhoMGRYSmxJRzV2ZENCemRYQndiM0owWldRZ2FXNGdRM1ZpWlNCeVpXNWtaWElnZEdGeVoyVjBjeUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnZaU2hUTGw5ZmQyVmlaMnhHY21GdFpXSjFabVpsY2l3Z1F5azdDaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hDS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRk11WDE5M1pXSm5iRVJsY0hSb1luVm1abVZ5SUQwZ1cxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWldVZ1BTQXdPeUJsWlNBOElEWTdJR1ZsS3lzcGRDNWlhVzVrUm5KaGJXVmlkV1ptWlhJb2N6RXVSbEpCVFVWQ1ZVWkdSVklzSUZNdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeVcyVmxYU2tzSUZNdVgxOTNaV0puYkVSbGNIUm9ZblZtWm1WeVcyVmxYU0E5SUhNeExtTnlaV0YwWlZKbGJtUmxjbUoxWm1abGNpZ3BMQ0JNS0ZNdVgxOTNaV0puYkVSbGNIUm9ZblZtWm1WeVcyVmxYU3dnUXl3Z0lURXBPd29nSUNBZ0lDQWdJSDBnWld4elpTQjBMbUpwYm1SR2NtRnRaV0oxWm1abGNpaHpNUzVHVWtGTlJVSlZSa1pGVWl3Z1V5NWZYM2RsWW1kc1JuSmhiV1ZpZFdabVpYSXBMQ0JUTGw5ZmQyVmlaMnhFWlhCMGFHSjFabVpsY2lBOUlITXhMbU55WldGMFpWSmxibVJsY21KMVptWmxjaWdwTENCTUtGTXVYMTkzWldKbmJFUmxjSFJvWW5WbVptVnlMQ0JETENBaE1TazdDaUFnSUNBZ0lDQWdkQzVpYVc1a1JuSmhiV1ZpZFdabVpYSW9jekV1UmxKQlRVVkNWVVpHUlZJc0lHNTFiR3dwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2FXVW9ReXdnVXl3Z1Fpa2dld29nSUNBZ0lDQWdJR3hsZENCbFpTQTlJRzR1WjJWMEtFTXBPd29nSUNBZ0lDQWdJRk1nSVQwOUlIWnZhV1FnTUNBbUppQkRaU2hsWlM1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhJc0lFTXNJRU11ZEdWNGRIVnlaU3dnY3pFdVEwOU1UMUpmUVZSVVFVTklUVVZPVkRBc0lITXhMbFJGV0ZSVlVrVmZNa1FzSURBcExDQkNJQ0U5UFNCMmIybGtJREFnSmlZZ1dDaERLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUVvb1F5a2dld29nSUNBZ0lDQWdJR3hsZENCVElEMGdReTUwWlhoMGRYSmxMQ0JDSUQwZ2JpNW5aWFFvUXlrc0lHVmxJRDBnYmk1blpYUW9VeWs3Q2lBZ0lDQWdJQ0FnUXk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKa2FYTndiM05sSWl3Z1dTa3NJRU11YVhOWFpXSkhURTExYkhScGNHeGxVbVZ1WkdWeVZHRnlaMlYwY3lBaFBUMGdJVEFnSmlZZ0tHVmxMbDlmZDJWaVoyeFVaWGgwZFhKbElEMDlQU0IyYjJsa0lEQWdKaVlnS0dWbExsOWZkMlZpWjJ4VVpYaDBkWEpsSUQwZ2N6RXVZM0psWVhSbFZHVjRkSFZ5WlNncEtTd2daV1V1WDE5MlpYSnphVzl1SUQwZ1V5NTJaWEp6YVc5dUxDQmhMbTFsYlc5eWVTNTBaWGgwZFhKbGN5c3JLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FpQTlJRU11YVhOWFpXSkhURU4xWW1WU1pXNWtaWEpVWVhKblpYUWdQVDA5SUNFd0xDQjBaU0E5SUVNdWFYTlhaV0pIVEUxMWJIUnBjR3hsVW1WdVpHVnlWR0Z5WjJWMGN5QTlQVDBnSVRBc0lFMWxJRDBnZVNoREtTQjhmQ0J2T3dvZ0lDQWdJQ0FnSUdsbUlDaHFLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lFSXVYMTkzWldKbmJFWnlZVzFsWW5WbVptVnlJRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdjbVVnUFNBd095QnlaU0E4SURZN0lISmxLeXNwYVdZZ0tHOGdKaVlnVXk1dGFYQnRZWEJ6SUNZbUlGTXViV2x3YldGd2N5NXNaVzVuZEdnZ1BpQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JDTGw5ZmQyVmlaMnhHY21GdFpXSjFabVpsY2x0eVpWMGdQU0JiWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWkdVZ1BTQXdPeUJrWlNBOElGTXViV2x3YldGd2N5NXNaVzVuZEdnN0lHUmxLeXNwUWk1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhKYmNtVmRXMlJsWFNBOUlITXhMbU55WldGMFpVWnlZVzFsWW5WbVptVnlLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCQ0xsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNsdHlaVjBnUFNCek1TNWpjbVZoZEdWR2NtRnRaV0oxWm1abGNpZ3BPd29nSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZJQ1ltSUZNdWJXbHdiV0Z3Y3lBbUppQlRMbTFwY0cxaGNITXViR1Z1WjNSb0lENGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUWk1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhJZ1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdjbVVnUFNBd095QnlaU0E4SUZNdWJXbHdiV0Z3Y3k1c1pXNW5kR2c3SUhKbEt5c3BRaTVmWDNkbFltZHNSbkpoYldWaWRXWm1aWEpiY21WZElEMGdjekV1WTNKbFlYUmxSbkpoYldWaWRXWm1aWElvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElFSXVYMTkzWldKbmJFWnlZVzFsWW5WbVptVnlJRDBnY3pFdVkzSmxZWFJsUm5KaGJXVmlkV1ptWlhJb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUmxLU0JwWmlBb2FTNWtjbUYzUW5WbVptVnljeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISmxJRDBnUXk1MFpYaDBkWEpsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JrWlNBOUlEQXNJRXhsSUQwZ2NtVXViR1Z1WjNSb095QmtaU0E4SUV4bE95QmtaU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnV21VZ1BTQnVMbWRsZENoeVpWdGtaVjBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGcGxMbDlmZDJWaVoyeFVaWGgwZFhKbElEMDlQU0IyYjJsa0lEQWdKaVlnS0ZwbExsOWZkMlZpWjJ4VVpYaDBkWEpsSUQwZ2N6RXVZM0psWVhSbFZHVjRkSFZ5WlNncExDQmhMbTFsYlc5eWVTNTBaWGgwZFhKbGN5c3JLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nVjJWaVIweE5kV3gwYVhCc1pWSmxibVJsY2xSaGNtZGxkSE1nWTJGdUlHOXViSGtnWW1VZ2RYTmxaQ0IzYVhSb0lGZGxZa2RNTWlCdmNpQlhSVUpIVEY5a2NtRjNYMkoxWm1abGNuTWdaWGgwWlc1emFXOXVMaUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYnlBbUppQkRMbk5oYlhCc1pYTWdQaUF3SUNZbUlFNWxLRU1wSUQwOVBTQWhNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISmxJRDBnZEdVZ1B5QlRJRG9nV3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGTUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkNMbDlmZDJWaVoyeE5kV3gwYVhOaGJYQnNaV1JHY21GdFpXSjFabVpsY2lBOUlITXhMbU55WldGMFpVWnlZVzFsWW5WbVptVnlLQ2tzSUVJdVgxOTNaV0puYkVOdmJHOXlVbVZ1WkdWeVluVm1abVZ5SUQwZ1cxMHNJSFF1WW1sdVpFWnlZVzFsWW5WbVptVnlLSE14TGtaU1FVMUZRbFZHUmtWU0xDQkNMbDlmZDJWaVoyeE5kV3gwYVhOaGJYQnNaV1JHY21GdFpXSjFabVpsY2lrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdSbElEMGdNRHNnWkdVZ1BDQnlaUzVzWlc1bmRHZzdJR1JsS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCTVpTQTlJSEpsVzJSbFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JDTGw5ZmQyVmlaMnhEYjJ4dmNsSmxibVJsY21KMVptWmxjbHRrWlYwZ1BTQnpNUzVqY21WaGRHVlNaVzVrWlhKaWRXWm1aWElvS1N3Z2N6RXVZbWx1WkZKbGJtUmxjbUoxWm1abGNpaHpNUzVTUlU1RVJWSkNWVVpHUlZJc0lFSXVYMTkzWldKbmJFTnZiRzl5VW1WdVpHVnlZblZtWm1WeVcyUmxYU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRnBsSUQwZ2NpNWpiMjUyWlhKMEtFeGxMbVp2Y20xaGRDd2dUR1V1WTI5c2IzSlRjR0ZqWlNrc0lITmxJRDBnY2k1amIyNTJaWEowS0V4bExuUjVjR1VwTENBa1pTQTlJRWtvVEdVdWFXNTBaWEp1WVd4R2IzSnRZWFFzSUZwbExDQnpaU3dnVEdVdVkyOXNiM0pUY0dGalpTd2dReTVwYzFoU1VtVnVaR1Z5VkdGeVoyVjBJRDA5UFNBaE1Da3NJRTlsSUQwZ2VXVW9ReWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N6RXVjbVZ1WkdWeVluVm1abVZ5VTNSdmNtRm5aVTExYkhScGMyRnRjR3hsS0hNeExsSkZUa1JGVWtKVlJrWkZVaXdnVDJVc0lDUmxMQ0JETG5kcFpIUm9MQ0JETG1obGFXZG9kQ2tzSUhNeExtWnlZVzFsWW5WbVptVnlVbVZ1WkdWeVluVm1abVZ5S0hNeExrWlNRVTFGUWxWR1JrVlNMQ0J6TVM1RFQweFBVbDlCVkZSQlEwaE5SVTVVTUNBcklHUmxMQ0J6TVM1U1JVNUVSVkpDVlVaR1JWSXNJRUl1WDE5M1pXSm5iRU52Ykc5eVVtVnVaR1Z5WW5WbVptVnlXMlJsWFNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek1TNWlhVzVrVW1WdVpHVnlZblZtWm1WeUtITXhMbEpGVGtSRlVrSlZSa1pGVWl3Z2JuVnNiQ2tzSUVNdVpHVndkR2hDZFdabVpYSWdKaVlnS0VJdVgxOTNaV0puYkVSbGNIUm9VbVZ1WkdWeVluVm1abVZ5SUQwZ2N6RXVZM0psWVhSbFVtVnVaR1Z5WW5WbVptVnlLQ2tzSUV3b1FpNWZYM2RsWW1kc1JHVndkR2hTWlc1a1pYSmlkV1ptWlhJc0lFTXNJQ0V3S1Nrc0lIUXVZbWx1WkVaeVlXMWxZblZtWm1WeUtITXhMa1pTUVUxRlFsVkdSa1ZTTENCdWRXeHNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvYWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwTG1KcGJtUlVaWGgwZFhKbEtITXhMbFJGV0ZSVlVrVmZRMVZDUlY5TlFWQXNJR1ZsTGw5ZmQyVmlaMnhVWlhoMGRYSmxLU3dnUldVb2N6RXVWRVZZVkZWU1JWOURWVUpGWDAxQlVDd2dVeXdnVFdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSEpsSUQwZ01Ec2djbVVnUENBMk95QnlaU3NyS1dsbUlDaHZJQ1ltSUZNdWJXbHdiV0Z3Y3lBbUppQlRMbTFwY0cxaGNITXViR1Z1WjNSb0lENGdNQ2tnWm05eUtHeGxkQ0JrWlNBOUlEQTdJR1JsSUR3Z1V5NXRhWEJ0WVhCekxteGxibWQwYURzZ1pHVXJLeWxEWlNoQ0xsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNsdHlaVjFiWkdWZExDQkRMQ0JUTENCek1TNURUMHhQVWw5QlZGUkJRMGhOUlU1VU1Dd2djekV1VkVWWVZGVlNSVjlEVlVKRlgwMUJVRjlRVDFOSlZFbFdSVjlZSUNzZ2NtVXNJR1JsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCRFpTaENMbDlmZDJWaVoyeEdjbUZ0WldKMVptWmxjbHR5WlYwc0lFTXNJRk1zSUhNeExrTlBURTlTWDBGVVZFRkRTRTFGVGxRd0xDQnpNUzVVUlZoVVZWSkZYME5WUWtWZlRVRlFYMUJQVTBsVVNWWkZYMWdnS3lCeVpTd2dNQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIY29VeXdnVFdVcElDWW1JRklvY3pFdVZFVllWRlZTUlY5RFZVSkZYMDFCVUNrc0lIUXVkVzVpYVc1a1ZHVjRkSFZ5WlNncE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhKbElEMGdReTUwWlhoMGRYSmxPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdSbElEMGdNQ3dnVEdVZ1BTQnlaUzVzWlc1bmRHZzdJR1JsSUR3Z1RHVTdJR1JsS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRnBsSUQwZ2NtVmJaR1ZkTENCelpTQTlJRzR1WjJWMEtGcGxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFF1WW1sdVpGUmxlSFIxY21Vb2N6RXVWRVZZVkZWU1JWOHlSQ3dnYzJVdVgxOTNaV0puYkZSbGVIUjFjbVVwTENCRlpTaHpNUzVVUlZoVVZWSkZYekpFTENCYVpTd2dUV1VwTENCRFpTaENMbDlmZDJWaVoyeEdjbUZ0WldKMVptWmxjaXdnUXl3Z1dtVXNJSE14TGtOUFRFOVNYMEZVVkVGRFNFMUZUbFF3SUNzZ1pHVXNJSE14TGxSRldGUlZVa1ZmTWtRc0lEQXBMQ0IzS0ZwbExDQk5aU2tnSmlZZ1VpaHpNUzVVUlZoVVZWSkZYekpFS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCMExuVnVZbWx1WkZSbGVIUjFjbVVvS1RzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY21VZ1BTQnpNUzVVUlZoVVZWSkZYekpFT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvS0VNdWFYTlhaV0pIVERORVVtVnVaR1Z5VkdGeVoyVjBJSHg4SUVNdWFYTlhaV0pIVEVGeWNtRjVVbVZ1WkdWeVZHRnlaMlYwS1NBbUppQW9ieUEvSUhKbElEMGdReTVwYzFkbFlrZE1NMFJTWlc1a1pYSlVZWEpuWlhRZ1B5QnpNUzVVUlZoVVZWSkZYek5FSURvZ2N6RXVWRVZZVkZWU1JWOHlSRjlCVWxKQldTQTZJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxkbFlrZE1WR1Y0ZEhWeVpYTTZJRlJJVWtWRkxrUmhkR0V6UkZSbGVIUjFjbVVnWVc1a0lGUklVa1ZGTGtSaGRHRkJjbkpoZVZSbGVIUjFjbVVnYjI1c2VTQnpkWEJ3YjNKMFpXUWdkMmwwYUNCWFpXSkhUREl1SWlrcExDQjBMbUpwYm1SVVpYaDBkWEpsS0hKbExDQmxaUzVmWDNkbFltZHNWR1Y0ZEhWeVpTa3NJRVZsS0hKbExDQlRMQ0JOWlNrc0lHOGdKaVlnVXk1dGFYQnRZWEJ6SUNZbUlGTXViV2x3YldGd2N5NXNaVzVuZEdnZ1BpQXdLU0JtYjNJb2JHVjBJR1JsSUQwZ01Ec2daR1VnUENCVExtMXBjRzFoY0hNdWJHVnVaM1JvT3lCa1pTc3JLVU5sS0VJdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeVcyUmxYU3dnUXl3Z1V5d2djekV1UTA5TVQxSmZRVlJVUVVOSVRVVk9WREFzSUhKbExDQmtaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnUTJVb1FpNWZYM2RsWW1kc1JuSmhiV1ZpZFdabVpYSXNJRU1zSUZNc0lITXhMa05QVEU5U1gwRlVWRUZEU0UxRlRsUXdMQ0J5WlN3Z01DazdDaUFnSUNBZ0lDQWdJQ0FnSUhjb1V5d2dUV1VwSUNZbUlGSW9jbVVwTENCMExuVnVZbWx1WkZSbGVIUjFjbVVvS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1F5NWtaWEIwYUVKMVptWmxjaUFtSmlCWUtFTXBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnVTJVb1F5a2dld29nSUNBZ0lDQWdJR3hsZENCVElEMGdlU2hES1NCOGZDQnZMQ0JDSUQwZ1F5NXBjMWRsWWtkTVRYVnNkR2x3YkdWU1pXNWtaWEpVWVhKblpYUnpJRDA5UFNBaE1DQS9JRU11ZEdWNGRIVnlaU0E2SUZzS0lDQWdJQ0FnSUNBZ0lDQWdReTUwWlhoMGRYSmxDaUFnSUNBZ0lDQWdYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR1ZsSUQwZ01Dd2dhaUE5SUVJdWJHVnVaM1JvT3lCbFpTQThJR283SUdWbEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkR1VnUFNCQ1cyVmxYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGNvZEdVc0lGTXBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1RXVWdQU0JETG1selYyVmlSMHhEZFdKbFVtVnVaR1Z5VkdGeVoyVjBJRDhnY3pFdVZFVllWRlZTUlY5RFZVSkZYMDFCVUNBNklITXhMbFJGV0ZSVlVrVmZNa1FzSUhKbElEMGdiaTVuWlhRb2RHVXBMbDlmZDJWaVoyeFVaWGgwZFhKbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDNWlhVzVrVkdWNGRIVnlaU2hOWlN3Z2NtVXBMQ0JTS0UxbEtTd2dkQzUxYm1KcGJtUlVaWGgwZFhKbEtDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnRaU2hES1NCN0NpQWdJQ0FnSUNBZ2FXWWdLRzhnSmlZZ1F5NXpZVzF3YkdWeklENGdNQ0FtSmlCT1pTaERLU0E5UFQwZ0lURXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRk1nUFNCRExtbHpWMlZpUjB4TmRXeDBhWEJzWlZKbGJtUmxjbFJoY21kbGRITWdQeUJETG5SbGVIUjFjbVVnT2lCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRExuUmxlSFIxY21VS0lDQWdJQ0FnSUNBZ0lDQWdYU3dnUWlBOUlFTXVkMmxrZEdnc0lHVmxJRDBnUXk1b1pXbG5hSFFzSUdvZ1BTQnpNUzVEVDB4UFVsOUNWVVpHUlZKZlFrbFVMQ0IwWlNBOUlGdGRMQ0JOWlNBOUlFTXVjM1JsYm1OcGJFSjFabVpsY2lBL0lITXhMa1JGVUZSSVgxTlVSVTVEU1V4ZlFWUlVRVU5JVFVWT1ZDQTZJSE14TGtSRlVGUklYMEZVVkVGRFNFMUZUbFFzSUhKbElEMGdiaTVuWlhRb1F5a3NJR1JsSUQwZ1F5NXBjMWRsWWtkTVRYVnNkR2x3YkdWU1pXNWtaWEpVWVhKblpYUnpJRDA5UFNBaE1Ec0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUmxLU0JtYjNJb2JHVjBJRXhsSUQwZ01Ec2dUR1VnUENCVExteGxibWQwYURzZ1RHVXJLeWwwTG1KcGJtUkdjbUZ0WldKMVptWmxjaWh6TVM1R1VrRk5SVUpWUmtaRlVpd2djbVV1WDE5M1pXSm5iRTExYkhScGMyRnRjR3hsWkVaeVlXMWxZblZtWm1WeUtTd2djekV1Wm5KaGJXVmlkV1ptWlhKU1pXNWtaWEppZFdabVpYSW9jekV1UmxKQlRVVkNWVVpHUlZJc0lITXhMa05QVEU5U1gwRlVWRUZEU0UxRlRsUXdJQ3NnVEdVc0lITXhMbEpGVGtSRlVrSlZSa1pGVWl3Z2JuVnNiQ2tzSUhRdVltbHVaRVp5WVcxbFluVm1abVZ5S0hNeExrWlNRVTFGUWxWR1JrVlNMQ0J5WlM1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhJcExDQnpNUzVtY21GdFpXSjFabVpsY2xSbGVIUjFjbVV5UkNoek1TNUVVa0ZYWDBaU1FVMUZRbFZHUmtWU0xDQnpNUzVEVDB4UFVsOUJWRlJCUTBoTlJVNVVNQ0FySUV4bExDQnpNUzVVUlZoVVZWSkZYekpFTENCdWRXeHNMQ0F3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdkQzVpYVc1a1JuSmhiV1ZpZFdabVpYSW9jekV1VWtWQlJGOUdVa0ZOUlVKVlJrWkZVaXdnY21VdVgxOTNaV0puYkUxMWJIUnBjMkZ0Y0d4bFpFWnlZVzFsWW5WbVptVnlLU3dnZEM1aWFXNWtSbkpoYldWaWRXWm1aWElvY3pFdVJGSkJWMTlHVWtGTlJVSlZSa1pGVWl3Z2NtVXVYMTkzWldKbmJFWnlZVzFsWW5WbVptVnlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCTVpTQTlJREE3SUV4bElEd2dVeTVzWlc1bmRHZzdJRXhsS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVXVjSFZ6YUNoek1TNURUMHhQVWw5QlZGUkJRMGhOUlU1VU1DQXJJRXhsS1N3Z1F5NWtaWEIwYUVKMVptWmxjaUFtSmlCMFpTNXdkWE5vS0UxbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JhWlNBOUlISmxMbDlmYVdkdWIzSmxSR1Z3ZEdoV1lXeDFaWE1nSVQwOUlIWnZhV1FnTUNBL0lISmxMbDlmYVdkdWIzSmxSR1Z3ZEdoV1lXeDFaWE1nT2lBaE1Uc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hhWlNBOVBUMGdJVEVnSmlZZ0tFTXVaR1Z3ZEdoQ2RXWm1aWElnSmlZZ0tHb2dmRDBnY3pFdVJFVlFWRWhmUWxWR1JrVlNYMEpKVkNrc0lFTXVjM1JsYm1OcGJFSjFabVpsY2lBbUppQW9haUI4UFNCek1TNVRWRVZPUTBsTVgwSlZSa1pGVWw5Q1NWUXBLU3dnWkdVZ0ppWWdjekV1Wm5KaGJXVmlkV1ptWlhKU1pXNWtaWEppZFdabVpYSW9jekV1VWtWQlJGOUdVa0ZOUlVKVlJrWkZVaXdnY3pFdVEwOU1UMUpmUVZSVVFVTklUVVZPVkRBc0lITXhMbEpGVGtSRlVrSlZSa1pGVWl3Z2NtVXVYMTkzWldKbmJFTnZiRzl5VW1WdVpHVnlZblZtWm1WeVcweGxYU2tzSUZwbElEMDlQU0FoTUNBbUppQW9jekV1YVc1MllXeHBaR0YwWlVaeVlXMWxZblZtWm1WeUtITXhMbEpGUVVSZlJsSkJUVVZDVlVaR1JWSXNJRnNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTlpRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hTa3NJSE14TG1sdWRtRnNhV1JoZEdWR2NtRnRaV0oxWm1abGNpaHpNUzVFVWtGWFgwWlNRVTFGUWxWR1JrVlNMQ0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RXVUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMHBLU3dnWkdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2MyVWdQU0J1TG1kbGRDaFRXMHhsWFNrdVgxOTNaV0puYkZSbGVIUjFjbVU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N6RXVabkpoYldWaWRXWm1aWEpVWlhoMGRYSmxNa1FvY3pFdVJGSkJWMTlHVWtGTlJVSlZSa1pGVWl3Z2N6RXVRMDlNVDFKZlFWUlVRVU5JVFVWT1ZEQXNJSE14TGxSRldGUlZVa1ZmTWtRc0lITmxMQ0F3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNeExtSnNhWFJHY21GdFpXSjFabVpsY2lnd0xDQXdMQ0JDTENCbFpTd2dNQ3dnTUN3Z1Fpd2daV1VzSUdvc0lITXhMazVGUVZKRlUxUXBMQ0JtSUNZbUlITXhMbWx1ZG1Gc2FXUmhkR1ZHY21GdFpXSjFabVpsY2loek1TNVNSVUZFWDBaU1FVMUZRbFZHUmtWU0xDQjBaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUXVZbWx1WkVaeVlXMWxZblZtWm1WeUtITXhMbEpGUVVSZlJsSkJUVVZDVlVaR1JWSXNJRzUxYkd3cExDQjBMbUpwYm1SR2NtRnRaV0oxWm1abGNpaHpNUzVFVWtGWFgwWlNRVTFGUWxWR1JrVlNMQ0J1ZFd4c0tTd2daR1VwSUdadmNpaHNaWFFnVEdVZ1BTQXdPeUJNWlNBOElGTXViR1Z1WjNSb095Qk1aU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRdVltbHVaRVp5WVcxbFluVm1abVZ5S0hNeExrWlNRVTFGUWxWR1JrVlNMQ0J5WlM1ZlgzZGxZbWRzVFhWc2RHbHpZVzF3YkdWa1JuSmhiV1ZpZFdabVpYSXBMQ0J6TVM1bWNtRnRaV0oxWm1abGNsSmxibVJsY21KMVptWmxjaWh6TVM1R1VrRk5SVUpWUmtaRlVpd2djekV1UTA5TVQxSmZRVlJVUVVOSVRVVk9WREFnS3lCTVpTd2djekV1VWtWT1JFVlNRbFZHUmtWU0xDQnlaUzVmWDNkbFltZHNRMjlzYjNKU1pXNWtaWEppZFdabVpYSmJUR1ZkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmFaU0E5SUc0dVoyVjBLRk5iVEdWZEtTNWZYM2RsWW1kc1ZHVjRkSFZ5WlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRdVltbHVaRVp5WVcxbFluVm1abVZ5S0hNeExrWlNRVTFGUWxWR1JrVlNMQ0J5WlM1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhJcExDQnpNUzVtY21GdFpXSjFabVpsY2xSbGVIUjFjbVV5UkNoek1TNUVVa0ZYWDBaU1FVMUZRbFZHUmtWU0xDQnpNUzVEVDB4UFVsOUJWRlJCUTBoTlJVNVVNQ0FySUV4bExDQnpNUzVVUlZoVVZWSkZYekpFTENCYVpTd2dNQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZEM1aWFXNWtSbkpoYldWaWRXWm1aWElvY3pFdVJGSkJWMTlHVWtGTlJVSlZSa1pGVWl3Z2NtVXVYMTkzWldKbmJFMTFiSFJwYzJGdGNHeGxaRVp5WVcxbFluVm1abVZ5S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQjVaU2hES1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3ViV2x1S0hVc0lFTXVjMkZ0Y0d4bGN5azdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJPWlNoREtTQjdDaUFnSUNBZ0lDQWdiR1YwSUZNZ1BTQnVMbWRsZENoREtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2J5QW1KaUJETG5OaGJYQnNaWE1nUGlBd0lDWW1JR1V1YUdGektDSlhSVUpIVEY5dGRXeDBhWE5oYlhCc1pXUmZjbVZ1WkdWeVgzUnZYM1JsZUhSMWNtVWlLU0E5UFQwZ0lUQWdKaVlnVXk1ZlgzVnpaVkpsYm1SbGNsUnZWR1Y0ZEhWeVpTQWhQVDBnSVRFN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnhaU2hES1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRk1nUFNCaExuSmxibVJsY2k1bWNtRnRaVHNLSUNBZ0lDQWdJQ0J0TG1kbGRDaERLU0FoUFQwZ1V5QW1KaUFvYlM1elpYUW9ReXdnVXlrc0lFTXVkWEJrWVhSbEtDa3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnY25Rb1F5d2dVeWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQkNJRDBnUXk1amIyeHZjbE53WVdObExDQmxaU0E5SUVNdVptOXliV0YwTENCcUlEMGdReTUwZVhCbE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCRExtbHpRMjl0Y0hKbGMzTmxaRlJsZUhSMWNtVWdQVDA5SUNFd0lIeDhJRU11YVhOV2FXUmxiMVJsZUhSMWNtVWdQVDA5SUNFd0lIeDhJRU11Wm05eWJXRjBJRDA5UFNCd2J5QjhmQ0JDSUNFOVBTQk5iaUFtSmlCQ0lDRTlQU0JZZENBbUppQW9VV1V1WjJWMFZISmhibk5tWlhJb1Fpa2dQVDA5SUc1MElEOGdieUE5UFQwZ0lURWdQeUJsTG1oaGN5Z2lSVmhVWDNOU1IwSWlLU0E5UFQwZ0lUQWdKaVlnWldVZ1BUMDlJRmQwSUQ4Z0tFTXVabTl5YldGMElEMGdjRzhzSUVNdWJXbHVSbWxzZEdWeUlEMGdiWFFzSUVNdVoyVnVaWEpoZEdWTmFYQnRZWEJ6SUQwZ0lURXBJRG9nVXlBOUlGaHlMbk5TUjBKVWIweHBibVZoY2loVEtTQTZJQ2hsWlNBaFBUMGdWM1FnZkh3Z2FpQWhQVDBnVDI0cElDWW1JR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFVaWGgwZFhKbGN6b2djMUpIUWlCbGJtTnZaR1ZrSUhSbGVIUjFjbVZ6SUdoaGRtVWdkRzhnZFhObElGSkhRa0ZHYjNKdFlYUWdZVzVrSUZWdWMybG5ibVZrUW5sMFpWUjVjR1V1SWlrZ09pQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVYWldKSFRGUmxlSFIxY21Wek9pQlZibk4xY0hCdmNuUmxaQ0IwWlhoMGRYSmxJR052Ykc5eUlITndZV05sT2lJc0lFSXBLU3dnVXpzS0lDQWdJSDBLSUNBZ0lIUm9hWE11WVd4c2IyTmhkR1ZVWlhoMGRYSmxWVzVwZENBOUlHNWxMQ0IwYUdsekxuSmxjMlYwVkdWNGRIVnlaVlZ1YVhSeklEMGdTQ3dnZEdocGN5NXpaWFJVWlhoMGRYSmxNa1FnUFNCTExDQjBhR2x6TG5ObGRGUmxlSFIxY21VeVJFRnljbUY1SUQwZ1JDd2dkR2hwY3k1elpYUlVaWGgwZFhKbE0wUWdQU0JITENCMGFHbHpMbk5sZEZSbGVIUjFjbVZEZFdKbElEMGdhR1VzSUhSb2FYTXVjbVZpYVc1a1ZHVjRkSFZ5WlhNZ1BTQnBaU3dnZEdocGN5NXpaWFIxY0ZKbGJtUmxjbFJoY21kbGRDQTlJRW9zSUhSb2FYTXVkWEJrWVhSbFVtVnVaR1Z5VkdGeVoyVjBUV2x3YldGd0lEMGdVMlVzSUhSb2FYTXVkWEJrWVhSbFRYVnNkR2x6WVcxd2JHVlNaVzVrWlhKVVlYSm5aWFFnUFNCdFpTd2dkR2hwY3k1elpYUjFjRVJsY0hSb1VtVnVaR1Z5WW5WbVptVnlJRDBnV0N3Z2RHaHBjeTV6WlhSMWNFWnlZVzFsUW5WbVptVnlWR1Y0ZEhWeVpTQTlJRU5sTENCMGFHbHpMblZ6WlUxMWJIUnBjMkZ0Y0d4bFpGSlVWQ0E5SUU1bE93cDlDbVoxYm1OMGFXOXVJRll3S0hNeExDQmxMQ0IwS1NCN0NpQWdJQ0JzWlhRZ2JpQTlJSFF1YVhOWFpXSkhUREk3Q2lBZ0lDQm1kVzVqZEdsdmJpQnBLSElzSUdFZ1BTQllkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnZMQ0JqSUQwZ1VXVXVaMlYwVkhKaGJuTm1aWElvWVNrN0NpQWdJQ0FnSUNBZ2FXWWdLSElnUFQwOUlFOXVLU0J5WlhSMWNtNGdjekV1VlU1VFNVZE9SVVJmUWxsVVJUc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdabVFwSUhKbGRIVnliaUJ6TVM1VlRsTkpSMDVGUkY5VFNFOVNWRjgwWHpSZk5GODBPd29nSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0J3WkNrZ2NtVjBkWEp1SUhNeExsVk9VMGxIVGtWRVgxTklUMUpVWHpWZk5WODFYekU3Q2lBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUY5bUtTQnlaWFIxY200Z2N6RXVRbGxVUlRzS0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ2VHWXBJSEpsZEhWeWJpQnpNUzVUU0U5U1ZEc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdWMk1wSUhKbGRIVnliaUJ6TVM1VlRsTkpSMDVGUkY5VFNFOVNWRHNLSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnWkdRcElISmxkSFZ5YmlCek1TNUpUbFE3Q2lBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUV4dUtTQnlaWFIxY200Z2N6RXVWVTVUU1VkT1JVUmZTVTVVT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCNGJpa2djbVYwZFhKdUlITXhMa1pNVDBGVU93b2dJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQlVjeWtnY21WMGRYSnVJRzRnUHlCek1TNUlRVXhHWDBaTVQwRlVJRG9nS0c4Z1BTQmxMbWRsZENnaVQwVlRYM1JsZUhSMWNtVmZhR0ZzWmw5bWJHOWhkQ0lwTENCdklDRTlQU0J1ZFd4c0lEOGdieTVJUVV4R1gwWk1UMEZVWDA5RlV5QTZJRzUxYkd3cE93b2dJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQjJaaWtnY21WMGRYSnVJSE14TGtGTVVFaEJPd29nSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0JYZENrZ2NtVjBkWEp1SUhNeExsSkhRa0U3Q2lBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUhsbUtTQnlaWFIxY200Z2N6RXVURlZOU1U1QlRrTkZPd29nSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0JOWmlrZ2NtVjBkWEp1SUhNeExreFZUVWxPUVU1RFJWOUJURkJJUVRzS0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ2Mya3BJSEpsZEhWeWJpQnpNUzVFUlZCVVNGOURUMDFRVDA1RlRsUTdDaUFnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJRmxwS1NCeVpYUjFjbTRnY3pFdVJFVlFWRWhmVTFSRlRrTkpURHNLSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnY0c4cElISmxkSFZ5YmlCdklEMGdaUzVuWlhRb0lrVllWRjl6VWtkQ0lpa3NJRzhnSVQwOUlHNTFiR3dnUHlCdkxsTlNSMEpmUVV4UVNFRmZSVmhVSURvZ2JuVnNiRHNLSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnVTJZcElISmxkSFZ5YmlCek1TNVNSVVE3Q2lBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUcxa0tTQnlaWFIxY200Z2N6RXVVa1ZFWDBsT1ZFVkhSVkk3Q2lBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUdKbUtTQnlaWFIxY200Z2N6RXVVa2M3Q2lBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUdka0tTQnlaWFIxY200Z2N6RXVVa2RmU1U1VVJVZEZVanNLSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnWDJRcElISmxkSFZ5YmlCek1TNVNSMEpCWDBsT1ZFVkhSVkk3Q2lBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUhkaElIeDhJSElnUFQwOUlFRmhJSHg4SUhJZ1BUMDlJRkpoSUh4OElISWdQVDA5SUVOaEtTQnBaaUFvWXlBOVBUMGdiblFwSUdsbUlDaHZJRDBnWlM1blpYUW9JbGRGUWtkTVgyTnZiWEJ5WlhOelpXUmZkR1Y0ZEhWeVpWOXpNM1JqWDNOeVoySWlLU3dnYnlBaFBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnZDJFcElISmxkSFZ5YmlCdkxrTlBUVkJTUlZOVFJVUmZVMUpIUWw5VE0xUkRYMFJZVkRGZlJWaFVPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1FXRXBJSEpsZEhWeWJpQnZMa05QVFZCU1JWTlRSVVJmVTFKSFFsOUJURkJJUVY5VE0xUkRYMFJZVkRGZlJWaFVPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1VtRXBJSEpsZEhWeWJpQnZMa05QVFZCU1JWTlRSVVJmVTFKSFFsOUJURkJJUVY5VE0xUkRYMFJZVkROZlJWaFVPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1EyRXBJSEpsZEhWeWJpQnZMa05QVFZCU1JWTlRSVVJmVTFKSFFsOUJURkJJUVY5VE0xUkRYMFJZVkRWZlJWaFVPd29nSUNBZ0lDQWdJSDBnWld4elpTQnlaWFIxY200Z2JuVnNiRHNLSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2h2SUQwZ1pTNW5aWFFvSWxkRlFrZE1YMk52YlhCeVpYTnpaV1JmZEdWNGRIVnlaVjl6TTNSaklpa3NJRzhnSVQwOUlHNTFiR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJSGRoS1NCeVpYUjFjbTRnYnk1RFQwMVFVa1ZUVTBWRVgxSkhRbDlUTTFSRFgwUllWREZmUlZoVU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnUVdFcElISmxkSFZ5YmlCdkxrTlBUVkJTUlZOVFJVUmZVa2RDUVY5VE0xUkRYMFJZVkRGZlJWaFVPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1VtRXBJSEpsZEhWeWJpQnZMa05QVFZCU1JWTlRSVVJmVWtkQ1FWOVRNMVJEWDBSWVZETmZSVmhVT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdRMkVwSUhKbGRIVnliaUJ2TGtOUFRWQlNSVk5UUlVSZlVrZENRVjlUTTFSRFgwUllWRFZmUlZoVU93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdkV3dnZkh3Z2NpQTlQVDBnWkd3Z2ZId2djaUE5UFQwZ1ptd2dmSHdnY2lBOVBUMGdjR3dwSUdsbUlDaHZJRDBnWlM1blpYUW9JbGRGUWtkTVgyTnZiWEJ5WlhOelpXUmZkR1Y0ZEhWeVpWOXdkbkowWXlJcExDQnZJQ0U5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQjFiQ2tnY21WMGRYSnVJRzh1UTA5TlVGSkZVMU5GUkY5U1IwSmZVRlpTVkVOZk5FSlFVRll4WDBsTlJ6c0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUdSc0tTQnlaWFIxY200Z2J5NURUMDFRVWtWVFUwVkVYMUpIUWw5UVZsSlVRMTh5UWxCUVZqRmZTVTFIT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdabXdwSUhKbGRIVnliaUJ2TGtOUFRWQlNSVk5UUlVSZlVrZENRVjlRVmxKVVExODBRbEJRVmpGZlNVMUhPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ2NHd3BJSEpsZEhWeWJpQnZMa05QVFZCU1JWTlRSVVJmVWtkQ1FWOVFWbEpVUTE4eVFsQlFWakZmU1UxSE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdSV1lwSUhKbGRIVnliaUJ2SUQwZ1pTNW5aWFFvSWxkRlFrZE1YMk52YlhCeVpYTnpaV1JmZEdWNGRIVnlaVjlsZEdNeElpa3NJRzhnSVQwOUlHNTFiR3dnUHlCdkxrTlBUVkJTUlZOVFJVUmZVa2RDWDBWVVF6RmZWMFZDUjB3Z09pQnVkV3hzT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCdGJDQjhmQ0J5SUQwOVBTQm5iQ2tnYVdZZ0tHOGdQU0JsTG1kbGRDZ2lWMFZDUjB4ZlkyOXRjSEpsYzNObFpGOTBaWGgwZFhKbFgyVjBZeUlwTENCdklDRTlQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCdGJDa2djbVYwZFhKdUlHTWdQVDA5SUc1MElEOGdieTVEVDAxUVVrVlRVMFZFWDFOU1IwSTRYMFZVUXpJZ09pQnZMa05QVFZCU1JWTlRSVVJmVWtkQ09GOUZWRU15T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdaMndwSUhKbGRIVnliaUJqSUQwOVBTQnVkQ0EvSUc4dVEwOU5VRkpGVTFORlJGOVRVa2RDT0Y5QlRGQklRVGhmUlZSRE1sOUZRVU1nT2lCdkxrTlBUVkJTUlZOVFJVUmZVa2RDUVRoZlJWUkRNbDlGUVVNN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhKbGRIVnliaUJ1ZFd4c093b2dJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQmZiQ0I4ZkNCeUlEMDlQU0I0YkNCOGZDQnlJRDA5UFNCMmJDQjhmQ0J5SUQwOVBTQjViQ0I4ZkNCeUlEMDlQU0JOYkNCOGZDQnlJRDA5UFNCVGJDQjhmQ0J5SUQwOVBTQmliQ0I4ZkNCeUlEMDlQU0JGYkNCOGZDQnlJRDA5UFNCVWJDQjhmQ0J5SUQwOVBTQjNiQ0I4ZkNCeUlEMDlQU0JCYkNCOGZDQnlJRDA5UFNCU2JDQjhmQ0J5SUQwOVBTQkRiQ0I4ZkNCeUlEMDlQU0JRYkNrZ2FXWWdLRzhnUFNCbExtZGxkQ2dpVjBWQ1IweGZZMjl0Y0hKbGMzTmxaRjkwWlhoMGRYSmxYMkZ6ZEdNaUtTd2dieUFoUFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdYMndwSUhKbGRIVnliaUJqSUQwOVBTQnVkQ0EvSUc4dVEwOU5VRkpGVTFORlJGOVRVa2RDT0Y5QlRGQklRVGhmUVZOVVExODBlRFJmUzBoU0lEb2dieTVEVDAxUVVrVlRVMFZFWDFKSFFrRmZRVk5VUTE4MGVEUmZTMGhTT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdlR3dwSUhKbGRIVnliaUJqSUQwOVBTQnVkQ0EvSUc4dVEwOU5VRkpGVTFORlJGOVRVa2RDT0Y5QlRGQklRVGhmUVZOVVExODFlRFJmUzBoU0lEb2dieTVEVDAxUVVrVlRVMFZFWDFKSFFrRmZRVk5VUTE4MWVEUmZTMGhTT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdkbXdwSUhKbGRIVnliaUJqSUQwOVBTQnVkQ0EvSUc4dVEwOU5VRkpGVTFORlJGOVRVa2RDT0Y5QlRGQklRVGhmUVZOVVExODFlRFZmUzBoU0lEb2dieTVEVDAxUVVrVlRVMFZFWDFKSFFrRmZRVk5VUTE4MWVEVmZTMGhTT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdlV3dwSUhKbGRIVnliaUJqSUQwOVBTQnVkQ0EvSUc4dVEwOU5VRkpGVTFORlJGOVRVa2RDT0Y5QlRGQklRVGhmUVZOVVExODJlRFZmUzBoU0lEb2dieTVEVDAxUVVrVlRVMFZFWDFKSFFrRmZRVk5VUTE4MmVEVmZTMGhTT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdUV3dwSUhKbGRIVnliaUJqSUQwOVBTQnVkQ0EvSUc4dVEwOU5VRkpGVTFORlJGOVRVa2RDT0Y5QlRGQklRVGhmUVZOVVExODJlRFpmUzBoU0lEb2dieTVEVDAxUVVrVlRVMFZFWDFKSFFrRmZRVk5VUTE4MmVEWmZTMGhTT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdVMndwSUhKbGRIVnliaUJqSUQwOVBTQnVkQ0EvSUc4dVEwOU5VRkpGVTFORlJGOVRVa2RDT0Y5QlRGQklRVGhmUVZOVVExODRlRFZmUzBoU0lEb2dieTVEVDAxUVVrVlRVMFZFWDFKSFFrRmZRVk5VUTE4NGVEVmZTMGhTT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdZbXdwSUhKbGRIVnliaUJqSUQwOVBTQnVkQ0EvSUc4dVEwOU5VRkpGVTFORlJGOVRVa2RDT0Y5QlRGQklRVGhmUVZOVVExODRlRFpmUzBoU0lEb2dieTVEVDAxUVVrVlRVMFZFWDFKSFFrRmZRVk5VUTE4NGVEWmZTMGhTT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdSV3dwSUhKbGRIVnliaUJqSUQwOVBTQnVkQ0EvSUc4dVEwOU5VRkpGVTFORlJGOVRVa2RDT0Y5QlRGQklRVGhmUVZOVVExODRlRGhmUzBoU0lEb2dieTVEVDAxUVVrVlRVMFZFWDFKSFFrRmZRVk5VUTE4NGVEaGZTMGhTT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdWR3dwSUhKbGRIVnliaUJqSUQwOVBTQnVkQ0EvSUc4dVEwOU5VRkpGVTFORlJGOVRVa2RDT0Y5QlRGQklRVGhmUVZOVVExOHhNSGcxWDB0SVVpQTZJRzh1UTA5TlVGSkZVMU5GUkY5U1IwSkJYMEZUVkVOZk1UQjROVjlMU0ZJN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0IzYkNrZ2NtVjBkWEp1SUdNZ1BUMDlJRzUwSUQ4Z2J5NURUMDFRVWtWVFUwVkVYMU5TUjBJNFgwRk1VRWhCT0Y5QlUxUkRYekV3ZURaZlMwaFNJRG9nYnk1RFQwMVFVa1ZUVTBWRVgxSkhRa0ZmUVZOVVExOHhNSGcyWDB0SVVqc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUVGc0tTQnlaWFIxY200Z1l5QTlQVDBnYm5RZ1B5QnZMa05QVFZCU1JWTlRSVVJmVTFKSFFqaGZRVXhRU0VFNFgwRlRWRU5mTVRCNE9GOUxTRklnT2lCdkxrTlBUVkJTUlZOVFJVUmZVa2RDUVY5QlUxUkRYekV3ZURoZlMwaFNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1Vtd3BJSEpsZEhWeWJpQmpJRDA5UFNCdWRDQS9JRzh1UTA5TlVGSkZVMU5GUkY5VFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4eE1IZ3hNRjlMU0ZJZ09pQnZMa05QVFZCU1JWTlRSVVJmVWtkQ1FWOUJVMVJEWHpFd2VERXdYMHRJVWpzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJRU5zS1NCeVpYUjFjbTRnWXlBOVBUMGdiblFnUHlCdkxrTlBUVkJTUlZOVFJVUmZVMUpIUWpoZlFVeFFTRUU0WDBGVFZFTmZNVEo0TVRCZlMwaFNJRG9nYnk1RFQwMVFVa1ZUVTBWRVgxSkhRa0ZmUVZOVVExOHhNbmd4TUY5TFNGSTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCUWJDa2djbVYwZFhKdUlHTWdQVDA5SUc1MElEOGdieTVEVDAxUVVrVlRVMFZFWDFOU1IwSTRYMEZNVUVoQk9GOUJVMVJEWHpFeWVERXlYMHRJVWlBNklHOHVRMDlOVUZKRlUxTkZSRjlTUjBKQlgwRlRWRU5mTVRKNE1USmZTMGhTT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J5WlhSMWNtNGdiblZzYkRzS0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1VHRWdmSHdnY2lBOVBUMGdUR3dnZkh3Z2NpQTlQVDBnU1d3cElHbG1JQ2h2SUQwZ1pTNW5aWFFvSWtWWVZGOTBaWGgwZFhKbFgyTnZiWEJ5WlhOemFXOXVYMkp3ZEdNaUtTd2dieUFoUFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdVR0VwSUhKbGRIVnliaUJqSUQwOVBTQnVkQ0EvSUc4dVEwOU5VRkpGVTFORlJGOVRVa2RDWDBGTVVFaEJYMEpRVkVOZlZVNVBVazFmUlZoVUlEb2dieTVEVDAxUVVrVlRVMFZFWDFKSFFrRmZRbEJVUTE5VlRrOVNUVjlGV0ZRN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0JNYkNrZ2NtVjBkWEp1SUc4dVEwOU5VRkpGVTFORlJGOVNSMEpmUWxCVVExOVRTVWRPUlVSZlJreFBRVlJmUlZoVU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnU1d3cElISmxkSFZ5YmlCdkxrTlBUVkJTUlZOVFJVUmZVa2RDWDBKUVZFTmZWVTVUU1VkT1JVUmZSa3hQUVZSZlJWaFVPd29nSUNBZ0lDQWdJSDBnWld4elpTQnlaWFIxY200Z2JuVnNiRHNLSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnVkdZZ2ZId2djaUE5UFQwZ1ZXd2dmSHdnY2lBOVBUMGdSR3dnZkh3Z2NpQTlQVDBnVG13cElHbG1JQ2h2SUQwZ1pTNW5aWFFvSWtWWVZGOTBaWGgwZFhKbFgyTnZiWEJ5WlhOemFXOXVYM0puZEdNaUtTd2dieUFoUFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdVR0VwSUhKbGRIVnliaUJ2TGtOUFRWQlNSVk5UUlVSZlVrVkVYMUpIVkVNeFgwVllWRHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSElnUFQwOUlGVnNLU0J5WlhSMWNtNGdieTVEVDAxUVVrVlRVMFZFWDFOSlIwNUZSRjlTUlVSZlVrZFVRekZmUlZoVU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnUkd3cElISmxkSFZ5YmlCdkxrTlBUVkJTUlZOVFJVUmZVa1ZFWDBkU1JVVk9YMUpIVkVNeVgwVllWRHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSElnUFQwOUlFNXNLU0J5WlhSMWNtNGdieTVEVDAxUVVrVlRVMFZFWDFOSlIwNUZSRjlTUlVSZlIxSkZSVTVmVWtkVVF6SmZSVmhVT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J5WlhSMWNtNGdiblZzYkRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnY2lBOVBUMGdhV2tnUHlCdUlEOGdjekV1VlU1VFNVZE9SVVJmU1U1VVh6STBYemdnT2lBb2J5QTlJR1V1WjJWMEtDSlhSVUpIVEY5a1pYQjBhRjkwWlhoMGRYSmxJaWtzSUc4Z0lUMDlJRzUxYkd3Z1B5QnZMbFZPVTBsSFRrVkVYMGxPVkY4eU5GODRYMWRGUWtkTUlEb2diblZzYkNrZ09pQnpNVnR5WFNBaFBUMGdkbTlwWkNBd0lEOGdjekZiY2wwZ09pQnVkV3hzT3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCamIyNTJaWEowT2lCcENpQWdJQ0I5T3dwOUNuWmhjaUJVYnlBOUlHTnNZWE56SUdWNGRHVnVaSE1nZVhRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRnRkS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6UVhKeVlYbERZVzFsY21FZ1BTQWhNQ3dnZEdocGN5NWpZVzFsY21GeklEMGdaVHNLSUNBZ0lIMEtmU3dnZEdrZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVwbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tTd2dkR2hwY3k1cGMwZHliM1Z3SUQwZ0lUQXNJSFJvYVhNdWRIbHdaU0E5SUNKSGNtOTFjQ0k3Q2lBZ0lDQjlDbjBzSUdzd0lEMGdld29nSUNBZ2RIbHdaVG9nSW0xdmRtVWlDbjBzSUZOeklEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tYc0tJQ0FnSUNBZ0lDQjBhR2x6TGw5MFlYSm5aWFJTWVhrZ1BTQnVkV3hzTENCMGFHbHpMbDluY21sd0lEMGdiblZzYkN3Z2RHaHBjeTVmYUdGdVpDQTlJRzUxYkd3N0NpQWdJQ0I5Q2lBZ0lDQm5aWFJJWVc1a1UzQmhZMlVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmhoYm1RZ1BUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdVgyaGhibVFnUFNCdVpYY2dkR2tzSUhSb2FYTXVYMmhoYm1RdWJXRjBjbWw0UVhWMGIxVndaR0YwWlNBOUlDRXhMQ0IwYUdsekxsOW9ZVzVrTG5acGMybGliR1VnUFNBaE1Td2dkR2hwY3k1ZmFHRnVaQzVxYjJsdWRITWdQU0I3ZlN3Z2RHaHBjeTVmYUdGdVpDNXBibkIxZEZOMFlYUmxJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQndhVzVqYUdsdVp6b2dJVEVLSUNBZ0lDQWdJQ0I5S1N3Z2RHaHBjeTVmYUdGdVpEc0tJQ0FnSUgwS0lDQWdJR2RsZEZSaGNtZGxkRkpoZVZOd1lXTmxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTBZWEpuWlhSU1lYa2dQVDA5SUc1MWJHd2dKaVlnS0hSb2FYTXVYM1JoY21kbGRGSmhlU0E5SUc1bGR5QjBhU3dnZEdocGN5NWZkR0Z5WjJWMFVtRjVMbTFoZEhKcGVFRjFkRzlWY0dSaGRHVWdQU0FoTVN3Z2RHaHBjeTVmZEdGeVoyVjBVbUY1TG5acGMybGliR1VnUFNBaE1Td2dkR2hwY3k1ZmRHRnlaMlYwVW1GNUxtaGhjMHhwYm1WaGNsWmxiRzlqYVhSNUlEMGdJVEVzSUhSb2FYTXVYM1JoY21kbGRGSmhlUzVzYVc1bFlYSldaV3h2WTJsMGVTQTlJRzVsZHlCQkxDQjBhR2x6TGw5MFlYSm5aWFJTWVhrdWFHRnpRVzVuZFd4aGNsWmxiRzlqYVhSNUlEMGdJVEVzSUhSb2FYTXVYM1JoY21kbGRGSmhlUzVoYm1kMWJHRnlWbVZzYjJOcGRIa2dQU0J1WlhjZ1FTa3NJSFJvYVhNdVgzUmhjbWRsZEZKaGVUc0tJQ0FnSUgwS0lDQWdJR2RsZEVkeWFYQlRjR0ZqWlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWjNKcGNDQTlQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWZaM0pwY0NBOUlHNWxkeUIwYVN3Z2RHaHBjeTVmWjNKcGNDNXRZWFJ5YVhoQmRYUnZWWEJrWVhSbElEMGdJVEVzSUhSb2FYTXVYMmR5YVhBdWRtbHphV0pzWlNBOUlDRXhMQ0IwYUdsekxsOW5jbWx3TG1oaGMweHBibVZoY2xabGJHOWphWFI1SUQwZ0lURXNJSFJvYVhNdVgyZHlhWEF1YkdsdVpXRnlWbVZzYjJOcGRIa2dQU0J1WlhjZ1FTd2dkR2hwY3k1ZlozSnBjQzVvWVhOQmJtZDFiR0Z5Vm1Wc2IyTnBkSGtnUFNBaE1Td2dkR2hwY3k1ZlozSnBjQzVoYm1kMWJHRnlWbVZzYjJOcGRIa2dQU0J1WlhjZ1FTa3NJSFJvYVhNdVgyZHlhWEE3Q2lBZ0lDQjlDaUFnSUNCa2FYTndZWFJqYUVWMlpXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkR0Z5WjJWMFVtRjVJQ0U5UFNCdWRXeHNJQ1ltSUhSb2FYTXVYM1JoY21kbGRGSmhlUzVrYVhOd1lYUmphRVYyWlc1MEtHVXBMQ0IwYUdsekxsOW5jbWx3SUNFOVBTQnVkV3hzSUNZbUlIUm9hWE11WDJkeWFYQXVaR2x6Y0dGMFkyaEZkbVZ1ZENobEtTd2dkR2hwY3k1ZmFHRnVaQ0FoUFQwZ2JuVnNiQ0FtSmlCMGFHbHpMbDlvWVc1a0xtUnBjM0JoZEdOb1JYWmxiblFvWlNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamIyNXVaV04wS0dVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvWlNBbUppQmxMbWhoYm1RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxsOW9ZVzVrT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZENrZ1ptOXlJQ2hzWlhRZ2JpQnZaaUJsTG1oaGJtUXVkbUZzZFdWektDa3BkR2hwY3k1ZloyVjBTR0Z1WkVwdmFXNTBLSFFzSUc0cE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVrYVhOd1lYUmphRVYyWlc1MEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dJbU52Ym01bFkzUmxaQ0lzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUdVS0lDQWdJQ0FnSUNCOUtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHUnBjMk52Ym01bFkzUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtUnBjM0JoZEdOb1JYWmxiblFvZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaVpHbHpZMjl1Ym1WamRHVmtJaXdLSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nWlFvZ0lDQWdJQ0FnSUgwcExDQjBhR2x6TGw5MFlYSm5aWFJTWVhrZ0lUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdVgzUmhjbWRsZEZKaGVTNTJhWE5wWW14bElEMGdJVEVwTENCMGFHbHpMbDluY21sd0lDRTlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxsOW5jbWx3TG5acGMybGliR1VnUFNBaE1Ta3NJSFJvYVhNdVgyaGhibVFnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11WDJoaGJtUXVkbWx6YVdKc1pTQTlJQ0V4S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaU2hsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0J1ZFd4c0xDQnlJRDBnYm5Wc2JDd2dZU0E5SUc1MWJHd3NJRzhnUFNCMGFHbHpMbDkwWVhKblpYUlNZWGtzSUdNZ1BTQjBhR2x6TGw5bmNtbHdMQ0JzSUQwZ2RHaHBjeTVmYUdGdVpEc0tJQ0FnSUNBZ0lDQnBaaUFvWlNBbUppQjBMbk5sYzNOcGIyNHVkbWx6YVdKcGJHbDBlVk4wWVhSbElDRTlQU0FpZG1semFXSnNaUzFpYkhWeWNtVmtJaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkNBbUppQmxMbWhoYm1RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRWdQU0FoTURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUY4Z2IyWWdaUzVvWVc1a0xuWmhiSFZsY3lncEtYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1p5QTlJSFF1WjJWMFNtOXBiblJRYjNObEtGOHNJRzRwTENCd0lEMGdkR2hwY3k1ZloyVjBTR0Z1WkVwdmFXNTBLR3dzSUY4cE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2NnSVQwOUlHNTFiR3dnSmlZZ0tIQXViV0YwY21sNExtWnliMjFCY25KaGVTaG5MblJ5WVc1elptOXliUzV0WVhSeWFYZ3BMQ0J3TG0xaGRISnBlQzVrWldOdmJYQnZjMlVvY0M1d2IzTnBkR2x2Yml3Z2NDNXliM1JoZEdsdmJpd2djQzV6WTJGc1pTa3NJSEF1YldGMGNtbDRWMjl5YkdST1pXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCd0xtcHZhVzUwVW1Ga2FYVnpJRDBnWnk1eVlXUnBkWE1wTENCd0xuWnBjMmxpYkdVZ1BTQm5JQ0U5UFNCdWRXeHNPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdnZ1BTQnNMbXB2YVc1MGMxc2lhVzVrWlhndFptbHVaMlZ5TFhScGNDSmRMQ0IxSUQwZ2JDNXFiMmx1ZEhOYkluUm9kVzFpTFhScGNDSmRMQ0JrSUQwZ2FDNXdiM05wZEdsdmJpNWthWE4wWVc1alpWUnZLSFV1Y0c5emFYUnBiMjRwTENCbUlEMGdMakF5TENCdElEMGdMakF3TlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd3dWFXNXdkWFJUZEdGMFpTNXdhVzVqYUdsdVp5QW1KaUJrSUQ0Z1ppQXJJRzBnUHlBb2JDNXBibkIxZEZOMFlYUmxMbkJwYm1Ob2FXNW5JRDBnSVRFc0lIUm9hWE11WkdsemNHRjBZMmhGZG1WdWRDaDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dJbkJwYm1Ob1pXNWtJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtaV1J1WlhOek9pQmxMbWhoYm1SbFpHNWxjM01zQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwT2lCMGFHbHpDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLU2tnT2lBaGJDNXBibkIxZEZOMFlYUmxMbkJwYm1Ob2FXNW5JQ1ltSUdRZ1BEMGdaaUF0SUcwZ0ppWWdLR3d1YVc1d2RYUlRkR0YwWlM1d2FXNWphR2x1WnlBOUlDRXdMQ0IwYUdsekxtUnBjM0JoZEdOb1JYWmxiblFvZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNKd2FXNWphSE4wWVhKMElpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a1pXUnVaWE56T2lCbExtaGhibVJsWkc1bGMzTXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBPaUIwYUdsekNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JqSUNFOVBTQnVkV3hzSUNZbUlHVXVaM0pwY0ZOd1lXTmxJQ1ltSUNoeUlEMGdkQzVuWlhSUWIzTmxLR1V1WjNKcGNGTndZV05sTENCdUtTd2djaUFoUFQwZ2JuVnNiQ0FtSmlBb1l5NXRZWFJ5YVhndVpuSnZiVUZ5Y21GNUtISXVkSEpoYm5ObWIzSnRMbTFoZEhKcGVDa3NJR011YldGMGNtbDRMbVJsWTI5dGNHOXpaU2hqTG5CdmMybDBhVzl1TENCakxuSnZkR0YwYVc5dUxDQmpMbk5qWVd4bEtTd2dZeTV0WVhSeWFYaFhiM0pzWkU1bFpXUnpWWEJrWVhSbElEMGdJVEFzSUhJdWJHbHVaV0Z5Vm1Wc2IyTnBkSGtnUHlBb1l5NW9ZWE5NYVc1bFlYSldaV3h2WTJsMGVTQTlJQ0V3TENCakxteHBibVZoY2xabGJHOWphWFI1TG1OdmNIa29jaTVzYVc1bFlYSldaV3h2WTJsMGVTa3BJRG9nWXk1b1lYTk1hVzVsWVhKV1pXeHZZMmwwZVNBOUlDRXhMQ0J5TG1GdVozVnNZWEpXWld4dlkybDBlU0EvSUNoakxtaGhjMEZ1WjNWc1lYSldaV3h2WTJsMGVTQTlJQ0V3TENCakxtRnVaM1ZzWVhKV1pXeHZZMmwwZVM1amIzQjVLSEl1WVc1bmRXeGhjbFpsYkc5amFYUjVLU2tnT2lCakxtaGhjMEZ1WjNWc1lYSldaV3h2WTJsMGVTQTlJQ0V4S1NrN0NpQWdJQ0FnSUNBZ0lDQWdJRzhnSVQwOUlHNTFiR3dnSmlZZ0tHa2dQU0IwTG1kbGRGQnZjMlVvWlM1MFlYSm5aWFJTWVhsVGNHRmpaU3dnYmlrc0lHa2dQVDA5SUc1MWJHd2dKaVlnY2lBaFBUMGdiblZzYkNBbUppQW9hU0E5SUhJcExDQnBJQ0U5UFNCdWRXeHNJQ1ltSUNodkxtMWhkSEpwZUM1bWNtOXRRWEp5WVhrb2FTNTBjbUZ1YzJadmNtMHViV0YwY21sNEtTd2dieTV0WVhSeWFYZ3VaR1ZqYjIxd2IzTmxLRzh1Y0c5emFYUnBiMjRzSUc4dWNtOTBZWFJwYjI0c0lHOHVjMk5oYkdVcExDQnZMbTFoZEhKcGVGZHZjbXhrVG1WbFpITlZjR1JoZEdVZ1BTQWhNQ3dnYVM1c2FXNWxZWEpXWld4dlkybDBlU0EvSUNodkxtaGhjMHhwYm1WaGNsWmxiRzlqYVhSNUlEMGdJVEFzSUc4dWJHbHVaV0Z5Vm1Wc2IyTnBkSGt1WTI5d2VTaHBMbXhwYm1WaGNsWmxiRzlqYVhSNUtTa2dPaUJ2TG1oaGMweHBibVZoY2xabGJHOWphWFI1SUQwZ0lURXNJR2t1WVc1bmRXeGhjbFpsYkc5amFYUjVJRDhnS0c4dWFHRnpRVzVuZFd4aGNsWmxiRzlqYVhSNUlEMGdJVEFzSUc4dVlXNW5kV3hoY2xabGJHOWphWFI1TG1OdmNIa29hUzVoYm1kMWJHRnlWbVZzYjJOcGRIa3BLU0E2SUc4dWFHRnpRVzVuZFd4aGNsWmxiRzlqYVhSNUlEMGdJVEVzSUhSb2FYTXVaR2x6Y0dGMFkyaEZkbVZ1ZENock1Da3BLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzhnSVQwOUlHNTFiR3dnSmlZZ0tHOHVkbWx6YVdKc1pTQTlJR2tnSVQwOUlHNTFiR3dwTENCaklDRTlQU0J1ZFd4c0lDWW1JQ2hqTG5acGMybGliR1VnUFNCeUlDRTlQU0J1ZFd4c0tTd2diQ0FoUFQwZ2JuVnNiQ0FtSmlBb2JDNTJhWE5wWW14bElEMGdZU0FoUFQwZ2JuVnNiQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JmWjJWMFNHRnVaRXB2YVc1MEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCcFppQW9aUzVxYjJsdWRITmJkQzVxYjJsdWRFNWhiV1ZkSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNGdQU0J1WlhjZ2RHazdDaUFnSUNBZ0lDQWdJQ0FnSUc0dWJXRjBjbWw0UVhWMGIxVndaR0YwWlNBOUlDRXhMQ0J1TG5acGMybGliR1VnUFNBaE1Td2daUzVxYjJsdWRITmJkQzVxYjJsdWRFNWhiV1ZkSUQwZ2Jpd2daUzVoWkdRb2JpazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbXB2YVc1MGMxdDBMbXB2YVc1MFRtRnRaVjA3Q2lBZ0lDQjlDbjBzSUhkdklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCVGRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZMQ0JqTENCc0xDQm9LWHNLSUNBZ0lDQWdJQ0JwWmlBb2FDQTlJR2dnSVQwOUlIWnZhV1FnTUNBL0lHZ2dPaUJ6YVN3Z2FDQWhQVDBnYzJrZ0ppWWdhQ0FoUFQwZ1dXa3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lSR1Z3ZEdoVVpYaDBkWEpsSUdadmNtMWhkQ0J0ZFhOMElHSmxJR1ZwZEdobGNpQlVTRkpGUlM1RVpYQjBhRVp2Y20xaGRDQnZjaUJVU0ZKRlJTNUVaWEIwYUZOMFpXNWphV3hHYjNKdFlYUWlLVHNLSUNBZ0lDQWdJQ0J1SUQwOVBTQjJiMmxrSURBZ0ppWWdhQ0E5UFQwZ2Mya2dKaVlnS0c0Z1BTQk1iaWtzSUc0Z1BUMDlJSFp2YVdRZ01DQW1KaUJvSUQwOVBTQlphU0FtSmlBb2JpQTlJR2xwS1N3Z2MzVndaWElvYm5Wc2JDd2dhU3dnY2l3Z1lTd2dieXdnWXl3Z2FDd2diaXdnYkNrc0lIUm9hWE11YVhORVpYQjBhRlJsZUhSMWNtVWdQU0FoTUN3Z2RHaHBjeTVwYldGblpTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c2SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2dkQW9nSUNBZ0lDQWdJSDBzSUhSb2FYTXViV0ZuUm1sc2RHVnlJRDBnYnlBaFBUMGdkbTlwWkNBd0lEOGdieUE2SUhCMExDQjBhR2x6TG0xcGJrWnBiSFJsY2lBOUlHTWdJVDA5SUhadmFXUWdNQ0EvSUdNZ09pQndkQ3dnZEdocGN5NW1iR2x3V1NBOUlDRXhMQ0IwYUdsekxtZGxibVZ5WVhSbFRXbHdiV0Z3Y3lBOUlDRXhMQ0IwYUdsekxtTnZiWEJoY21WR2RXNWpkR2x2YmlBOUlHNTFiR3c3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1amIyMXdZWEpsUm5WdVkzUnBiMjRnUFNCbExtTnZiWEJoY21WR2RXNWpkR2x2Yml3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCemRYQmxjaTUwYjBwVFQwNG9aU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXRjR0Z5WlVaMWJtTjBhVzl1SUNFOVBTQnVkV3hzSUNZbUlDaDBMbU52YlhCaGNtVkdkVzVqZEdsdmJpQTlJSFJvYVhNdVkyOXRjR0Z5WlVaMWJtTjBhVzl1S1N3Z2REc0tJQ0FnSUgwS2ZTd2dRVzhnUFNCamJHRnpjeUJsZUhSbGJtUnpJSE51SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDazdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TENCcElEMGdiblZzYkN3Z2NpQTlJREVzSUdFZ1BTQnVkV3hzTENCdklEMGdJbXh2WTJGc0xXWnNiMjl5SWl3Z1l5QTlJREVzSUd3Z1BTQnVkV3hzTENCb0lEMGdiblZzYkN3Z2RTQTlJRzUxYkd3c0lHUWdQU0J1ZFd4c0xDQm1JRDBnYm5Wc2JDd2diU0E5SUc1MWJHd3NJRjhnUFNCMExtZGxkRU52Ym5SbGVIUkJkSFJ5YVdKMWRHVnpLQ2tzSUdjZ1BTQnVkV3hzTENCd0lEMGdiblZzYkN3Z2RpQTlJRnRkTENCNElEMGdXMTBzSUhrZ1BTQnVaWGNnZVhRN0NpQWdJQ0FnSUNBZ2VTNXNZWGxsY25NdVpXNWhZbXhsS0RFcExDQjVMblpwWlhkd2IzSjBJRDBnYm1WM0lHcGxPd29nSUNBZ0lDQWdJR3hsZENCaUlEMGdibVYzSUhsME93b2dJQ0FnSUNBZ0lHSXViR0Y1WlhKekxtVnVZV0pzWlNneUtTd2dZaTUyYVdWM2NHOXlkQ0E5SUc1bGR5QnFaVHNLSUNBZ0lDQWdJQ0JzWlhRZ2R5QTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ2VTd0tJQ0FnSUNBZ0lDQWdJQ0FnWWdvZ0lDQWdJQ0FnSUYwc0lGSWdQU0J1WlhjZ1ZHODdDaUFnSUNBZ0lDQWdVaTVzWVhsbGNuTXVaVzVoWW14bEtERXBMQ0JTTG14aGVXVnljeTVsYm1GaWJHVW9NaWs3Q2lBZ0lDQWdJQ0FnYkdWMElFa2dQU0J1ZFd4c0xDQk5JRDBnYm5Wc2JEc0tJQ0FnSUNBZ0lDQjBhR2x6TG1OaGJXVnlZVUYxZEc5VmNHUmhkR1VnUFNBaE1Dd2dkR2hwY3k1bGJtRmliR1ZrSUQwZ0lURXNJSFJvYVhNdWFYTlFjbVZ6Wlc1MGFXNW5JRDBnSVRFc0lIUm9hWE11WjJWMFEyOXVkSEp2Ykd4bGNpQTlJR1oxYm1OMGFXOXVLRVFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVjZ1BTQjJXMFJkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1J5QTlQVDBnZG05cFpDQXdJQ1ltSUNoSElEMGdibVYzSUZOekxDQjJXMFJkSUQwZ1J5a3NJRWN1WjJWMFZHRnlaMlYwVW1GNVUzQmhZMlVvS1RzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1kbGRFTnZiblJ5YjJ4c1pYSkhjbWx3SUQwZ1puVnVZM1JwYjI0b1JDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdSeUE5SUhaYlJGMDdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJISUQwOVBTQjJiMmxrSURBZ0ppWWdLRWNnUFNCdVpYY2dVM01zSUhaYlJGMGdQU0JIS1N3Z1J5NW5aWFJIY21sd1UzQmhZMlVvS1RzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1kbGRFaGhibVFnUFNCbWRXNWpkR2x2YmloRUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQkhJRDBnZGx0RVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRWNnUFQwOUlIWnZhV1FnTUNBbUppQW9SeUE5SUc1bGR5QlRjeXdnZGx0RVhTQTlJRWNwTENCSExtZGxkRWhoYm1SVGNHRmpaU2dwT3dvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1ZDaEVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JISUQwZ2VDNXBibVJsZUU5bUtFUXVhVzV3ZFhSVGIzVnlZMlVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUnlBOVBUMGdMVEVwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2hsSUQwZ2RsdEhYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FHVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FHVXVkWEJrWVhSbEtFUXVhVzV3ZFhSVGIzVnlZMlVzSUVRdVpuSmhiV1VzSUd3Z2ZId2dZU2tzSUdobExtUnBjM0JoZEdOb1JYWmxiblFvZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dSQzUwZVhCbExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nUkM1cGJuQjFkRk52ZFhKalpRb2dJQ0FnSUNBZ0lDQWdJQ0I5S1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlFOG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHa3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWdpYzJWc1pXTjBJaXdnVkNrc0lHa3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWdpYzJWc1pXTjBjM1JoY25RaUxDQlVLU3dnYVM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDSnpaV3hsWTNSbGJtUWlMQ0JVS1N3Z2FTNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ0p6Y1hWbFpYcGxJaXdnVkNrc0lHa3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWdpYzNGMVpXVjZaWE4wWVhKMElpd2dWQ2tzSUdrdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2ljM0YxWldWNlpXVnVaQ0lzSUZRcExDQnBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSW1WdVpDSXNJRThwTENCcExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9JbWx1Y0hWMGMyOTFjbU5sYzJOb1lXNW5aU0lzSUZrcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRVFnUFNBd095QkVJRHdnZGk1c1pXNW5kR2c3SUVRckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUnlBOUlIaGJSRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JISUNFOVBTQnVkV3hzSUNZbUlDaDRXMFJkSUQwZ2JuVnNiQ3dnZGx0RVhTNWthWE5qYjI1dVpXTjBLRWNwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCSklEMGdiblZzYkN3Z1RTQTlJRzUxYkd3c0lHVXVjMlYwVW1WdVpHVnlWR0Z5WjJWMEtHY3BMQ0JtSUQwZ2JuVnNiQ3dnWkNBOUlHNTFiR3dzSUhVZ1BTQnVkV3hzTENCcElEMGdiblZzYkN3Z2NDQTlJRzUxYkd3c0lFc3VjM1J2Y0NncExDQnVMbWx6VUhKbGMyVnVkR2x1WnlBOUlDRXhMQ0J1TG1ScGMzQmhkR05vUlhabGJuUW9ld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0luTmxjM05wYjI1bGJtUWlDaUFnSUNBZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFWnlZVzFsWW5WbVptVnlVMk5oYkdWR1lXTjBiM0lnUFNCbWRXNWpkR2x2YmloRUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhJZ1BTQkVMQ0J1TG1selVISmxjMlZ1ZEdsdVp5QTlQVDBnSVRBZ0ppWWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKWVVrMWhibUZuWlhJNklFTmhibTV2ZENCamFHRnVaMlVnWm5KaGJXVmlkV1ptWlhJZ2MyTmhiR1VnZDJocGJHVWdjSEpsYzJWdWRHbHVaeTRpS1RzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG5ObGRGSmxabVZ5Wlc1alpWTndZV05sVkhsd1pTQTlJR1oxYm1OMGFXOXVLRVFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdieUE5SUVRc0lHNHVhWE5RY21WelpXNTBhVzVuSUQwOVBTQWhNQ0FtSmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZbGhTVFdGdVlXZGxjam9nUTJGdWJtOTBJR05vWVc1blpTQnlaV1psY21WdVkyVWdjM0JoWTJVZ2RIbHdaU0IzYUdsc1pTQndjbVZ6Wlc1MGFXNW5MaUlwT3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11WjJWMFVtVm1aWEpsYm1ObFUzQmhZMlVnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR3dnZkh3Z1lUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuTmxkRkpsWm1WeVpXNWpaVk53WVdObElEMGdablZ1WTNScGIyNG9SQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNJRDBnUkRzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1kbGRFSmhjMlZNWVhsbGNpQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pDQWhQVDBnYm5Wc2JDQS9JR1FnT2lCbU93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVoyVjBRbWx1WkdsdVp5QTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxtZGxkRVp5WVcxbElEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdE93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVoyVjBVMlZ6YzJsdmJpQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuTmxkRk5sYzNOcGIyNGdQU0JoYzNsdVl5Qm1kVzVqZEdsdmJpaEVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwSUQwZ1JDd2dhU0FoUFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHY2dQU0JsTG1kbGRGSmxibVJsY2xSaGNtZGxkQ2dwTENCcExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0luTmxiR1ZqZENJc0lGUXBMQ0JwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW5ObGJHVmpkSE4wWVhKMElpd2dWQ2tzSUdrdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnaWMyVnNaV04wWlc1a0lpd2dWQ2tzSUdrdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnaWMzRjFaV1Y2WlNJc0lGUXBMQ0JwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW5OeGRXVmxlbVZ6ZEdGeWRDSXNJRlFwTENCcExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0luTnhkV1ZsZW1WbGJtUWlMQ0JVS1N3Z2FTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSmxibVFpTENCUEtTd2dhUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0pwYm5CMWRITnZkWEpqWlhOamFHRnVaMlVpTENCWktTd2dYeTU0Y2tOdmJYQmhkR2xpYkdVZ0lUMDlJQ0V3SUNZbUlHRjNZV2wwSUhRdWJXRnJaVmhTUTI5dGNHRjBhV0pzWlNncExDQnBMbkpsYm1SbGNsTjBZWFJsTG14aGVXVnljeUE5UFQwZ2RtOXBaQ0F3SUh4OElHVXVZMkZ3WVdKcGJHbDBhV1Z6TG1selYyVmlSMHd5SUQwOVBTQWhNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JISUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGJuUnBZV3hwWVhNNklHa3VjbVZ1WkdWeVUzUmhkR1V1YkdGNVpYSnpJRDA5UFNCMmIybGtJREFnUHlCZkxtRnVkR2xoYkdsaGN5QTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYkhCb1lUb2dJVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb09pQmZMbVJsY0hSb0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHVnVZMmxzT2lCZkxuTjBaVzVqYVd3c0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaeVlXMWxZblZtWm1WeVUyTmhiR1ZHWVdOMGIzSTZJSElLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1lnUFNCdVpYY2dXRkpYWldKSFRFeGhlV1Z5S0drc0lIUXNJRWNwTENCcExuVndaR0YwWlZKbGJtUmxjbE4wWVhSbEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRnpaVXhoZVdWeU9pQm1DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrc0lIQWdQU0J1WlhjZ2NYUW9aaTVtY21GdFpXSjFabVpsY2xkcFpIUm9MQ0JtTG1aeVlXMWxZblZtWm1WeVNHVnBaMmgwTENCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNtMWhkRG9nVjNRc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJRTl1TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNsTndZV05sT2lCbExtOTFkSEIxZEVOdmJHOXlVM0JoWTJVc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFpXNWphV3hDZFdabVpYSTZJRjh1YzNSbGJtTnBiQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUnlBOUlHNTFiR3dzSUdobElEMGdiblZzYkN3Z1ptVWdQU0J1ZFd4c093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjh1WkdWd2RHZ2dKaVlnS0dabElEMGdYeTV6ZEdWdVkybHNJRDhnZEM1RVJWQlVTREkwWDFOVVJVNURTVXc0SURvZ2RDNUVSVkJVU0Y5RFQwMVFUMDVGVGxReU5Dd2dSeUE5SUY4dWMzUmxibU5wYkNBL0lGbHBJRG9nYzJrc0lHaGxJRDBnWHk1emRHVnVZMmxzSUQ4Z2FXa2dPaUJNYmlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUY5bElEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2tadmNtMWhkRG9nZEM1U1IwSkJPQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1Z3ZEdoR2IzSnRZWFE2SUdabExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyRnNaVVpoWTNSdmNqb2djZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkU0E5SUc1bGR5QllVbGRsWWtkTVFtbHVaR2x1WnlocExDQjBLU3dnWkNBOUlIVXVZM0psWVhSbFVISnZhbVZqZEdsdmJreGhlV1Z5S0Y5bEtTd2dhUzUxY0dSaGRHVlNaVzVrWlhKVGRHRjBaU2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoZVdWeWN6b2dXd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JkQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTa3NJSEFnUFNCdVpYY2djWFFvWkM1MFpYaDBkWEpsVjJsa2RHZ3NJR1F1ZEdWNGRIVnlaVWhsYVdkb2RDd2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0p0WVhRNklGZDBMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCUGJpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVndkR2hVWlhoMGRYSmxPaUJ1WlhjZ2QyOG9aQzUwWlhoMGRYSmxWMmxrZEdnc0lHUXVkR1Y0ZEhWeVpVaGxhV2RvZEN3Z2FHVXNJSFp2YVdRZ01Dd2dkbTlwWkNBd0xDQjJiMmxrSURBc0lIWnZhV1FnTUN3Z2RtOXBaQ0F3TENCMmIybGtJREFzSUVjcExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHVnVZMmxzUW5WbVptVnlPaUJmTG5OMFpXNWphV3dzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eVUzQmhZMlU2SUdVdWIzVjBjSFYwUTI5c2IzSlRjR0ZqWlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJGdGNHeGxjem9nWHk1aGJuUnBZV3hwWVhNZ1B5QTBJRG9nTUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjNaU0E5SUdVdWNISnZjR1Z5ZEdsbGN5NW5aWFFvY0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMlV1WDE5cFoyNXZjbVZFWlhCMGFGWmhiSFZsY3lBOUlHUXVhV2R1YjNKbFJHVndkR2hXWVd4MVpYTTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndMbWx6V0ZKU1pXNWtaWEpVWVhKblpYUWdQU0FoTUN3Z2RHaHBjeTV6WlhSR2IzWmxZWFJwYjI0b1l5a3NJR3dnUFNCdWRXeHNMQ0JoSUQwZ1lYZGhhWFFnYVM1eVpYRjFaWE4wVW1WbVpYSmxibU5sVTNCaFkyVW9ieWtzSUVzdWMyVjBRMjl1ZEdWNGRDaHBLU3dnU3k1emRHRnlkQ2dwTENCdUxtbHpVSEpsYzJWdWRHbHVaeUE5SUNFd0xDQnVMbVJwYzNCaGRHTm9SWFpsYm5Rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDSnpaWE56YVc5dWMzUmhjblFpQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBzSUhSb2FYTXVaMlYwUlc1MmFYSnZibTFsYm5SQ2JHVnVaRTF2WkdVZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2tnSVQwOUlHNTFiR3dwSUhKbGRIVnliaUJwTG1WdWRtbHliMjV0Wlc1MFFteGxibVJOYjJSbE93b2dJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdXU2hFS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdSeUE5SURBN0lFY2dQQ0JFTG5KbGJXOTJaV1F1YkdWdVozUm9PeUJIS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2hsSUQwZ1JDNXlaVzF2ZG1Wa1cwZGRMQ0JtWlNBOUlIZ3VhVzVrWlhoUFppaG9aU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtWlNBK1BTQXdJQ1ltSUNoNFcyWmxYU0E5SUc1MWJHd3NJSFpiWm1WZExtUnBjMk52Ym01bFkzUW9hR1VwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUVjZ1BTQXdPeUJISUR3Z1JDNWhaR1JsWkM1c1pXNW5kR2c3SUVjckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYUdVZ1BTQkVMbUZrWkdWa1cwZGRMQ0JtWlNBOUlIZ3VhVzVrWlhoUFppaG9aU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ptVWdQVDA5SUMweEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IzWlNBOUlEQTdJSGRsSUR3Z2RpNXNaVzVuZEdnN0lIZGxLeXNwYVdZZ0tIZGxJRDQ5SUhndWJHVnVaM1JvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhndWNIVnphQ2hvWlNrc0lHWmxJRDBnZDJVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2VGdDNaVjBnUFQwOUlHNTFiR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUZ0M1pWMGdQU0JvWlN3Z1ptVWdQU0IzWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htWlNBOVBUMGdMVEVwSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUY5bElEMGdkbHRtWlYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZlpTQW1KaUJmWlM1amIyNXVaV04wS0dobEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdKQ0E5SUc1bGR5QkJMQ0JWSUQwZ2JtVjNJRUU3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnZWloRUxDQkhMQ0JvWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FrTG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaEhMbTFoZEhKcGVGZHZjbXhrS1N3Z1ZTNXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvYUdVdWJXRjBjbWw0VjI5eWJHUXBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdabVVnUFNBa0xtUnBjM1JoYm1ObFZHOG9WU2tzSUY5bElEMGdSeTV3Y205cVpXTjBhVzl1VFdGMGNtbDRMbVZzWlcxbGJuUnpMQ0IzWlNBOUlHaGxMbkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ3VaV3hsYldWdWRITXNJRVZsSUQwZ1gyVmJNVFJkSUM4Z0tGOWxXekV3WFNBdElERXBMQ0JVWlNBOUlGOWxXekUwWFNBdklDaGZaVnN4TUYwZ0t5QXhLU3dnV1dVZ1BTQW9YMlZiT1YwZ0t5QXhLU0F2SUY5bFd6VmRMQ0JwZENBOUlDaGZaVnM1WFNBdElERXBJQzhnWDJWYk5WMHNJRU5sSUQwZ0tGOWxXemhkSUMwZ01Ta2dMeUJmWlZzd1hTd2dUQ0E5SUNoM1pWczRYU0FySURFcElDOGdkMlZiTUYwc0lHOWxJRDBnUldVZ0tpQkRaU3dnV0NBOUlFVmxJQ29nVEN3Z2FXVWdQU0JtWlNBdklDZ3RRMlVnS3lCTUtTd2dTaUE5SUdsbElDb2dMVU5sT3dvZ0lDQWdJQ0FnSUNBZ0lDQkhMbTFoZEhKcGVGZHZjbXhrTG1SbFkyOXRjRzl6WlNoRUxuQnZjMmwwYVc5dUxDQkVMbkYxWVhSbGNtNXBiMjRzSUVRdWMyTmhiR1VwTENCRUxuUnlZVzV6YkdGMFpWZ29TaWtzSUVRdWRISmhibk5zWVhSbFdpaHBaU2tzSUVRdWJXRjBjbWw0VjI5eWJHUXVZMjl0Y0c5elpTaEVMbkJ2YzJsMGFXOXVMQ0JFTG5GMVlYUmxjbTVwYjI0c0lFUXVjMk5oYkdVcExDQkVMbTFoZEhKcGVGZHZjbXhrU1c1MlpYSnpaUzVqYjNCNUtFUXViV0YwY21sNFYyOXliR1FwTG1sdWRtVnlkQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVTJVZ1BTQkZaU0FySUdsbExDQnRaU0E5SUZSbElDc2dhV1VzSUhsbElEMGdiMlVnTFNCS0xDQk9aU0E5SUZnZ0t5QW9abVVnTFNCS0tTd2djV1VnUFNCWlpTQXFJRlJsSUM4Z2JXVWdLaUJUWlN3Z2NuUWdQU0JwZENBcUlGUmxJQzhnYldVZ0tpQlRaVHNLSUNBZ0lDQWdJQ0FnSUNBZ1JDNXdjbTlxWldOMGFXOXVUV0YwY21sNExtMWhhMlZRWlhKemNHVmpkR2wyWlNoNVpTd2dUbVVzSUhGbExDQnlkQ3dnVTJVc0lHMWxLU3dnUkM1d2NtOXFaV04wYVc5dVRXRjBjbWw0U1c1MlpYSnpaUzVqYjNCNUtFUXVjSEp2YW1WamRHbHZiazFoZEhKcGVDa3VhVzUyWlhKMEtDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSEVvUkN3Z1J5a2dld29nSUNBZ0lDQWdJQ0FnSUNCSElEMDlQU0J1ZFd4c0lEOGdSQzV0WVhSeWFYaFhiM0pzWkM1amIzQjVLRVF1YldGMGNtbDRLU0E2SUVRdWJXRjBjbWw0VjI5eWJHUXViWFZzZEdsd2JIbE5ZWFJ5YVdObGN5aEhMbTFoZEhKcGVGZHZjbXhrTENCRUxtMWhkSEpwZUNrc0lFUXViV0YwY21sNFYyOXliR1JKYm5abGNuTmxMbU52Y0hrb1JDNXRZWFJ5YVhoWGIzSnNaQ2t1YVc1MlpYSjBLQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFEyRnRaWEpoSUQwZ1puVnVZM1JwYjI0b1JDa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0E5UFQwZ2JuVnNiQ2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNCU0xtNWxZWElnUFNCaUxtNWxZWElnUFNCNUxtNWxZWElnUFNCRUxtNWxZWElzSUZJdVptRnlJRDBnWWk1bVlYSWdQU0I1TG1aaGNpQTlJRVF1Wm1GeUxDQW9TU0FoUFQwZ1VpNXVaV0Z5SUh4OElFMGdJVDA5SUZJdVptRnlLU0FtSmlBb2FTNTFjR1JoZEdWU1pXNWtaWEpUZEdGMFpTaDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaWEIwYUU1bFlYSTZJRkl1Ym1WaGNpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxjSFJvUm1GeU9pQlNMbVpoY2dvZ0lDQWdJQ0FnSUNBZ0lDQjlLU3dnU1NBOUlGSXVibVZoY2l3Z1RTQTlJRkl1Wm1GeUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFY2dQU0JFTG5CaGNtVnVkQ3dnYUdVZ1BTQlNMbU5oYldWeVlYTTdDaUFnSUNBZ0lDQWdJQ0FnSUhFb1Vpd2dSeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ptVWdQU0F3T3lCbVpTQThJR2hsTG14bGJtZDBhRHNnWm1Vckt5bHhLR2hsVzJabFhTd2dSeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHaGxMbXhsYm1kMGFDQTlQVDBnTWlBL0lIb29VaXdnZVN3Z1lpa2dPaUJTTG5CeWIycGxZM1JwYjI1TllYUnlhWGd1WTI5d2VTaDVMbkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ3BMQ0JJS0VRc0lGSXNJRWNwT3dvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1NDaEVMQ0JITENCb1pTa2dld29nSUNBZ0lDQWdJQ0FnSUNCb1pTQTlQVDBnYm5Wc2JDQS9JRVF1YldGMGNtbDRMbU52Y0hrb1J5NXRZWFJ5YVhoWGIzSnNaQ2tnT2lBb1JDNXRZWFJ5YVhndVkyOXdlU2hvWlM1dFlYUnlhWGhYYjNKc1pDa3NJRVF1YldGMGNtbDRMbWx1ZG1WeWRDZ3BMQ0JFTG0xaGRISnBlQzV0ZFd4MGFYQnNlU2hITG0xaGRISnBlRmR2Y214a0tTa3NJRVF1YldGMGNtbDRMbVJsWTI5dGNHOXpaU2hFTG5CdmMybDBhVzl1TENCRUxuRjFZWFJsY201cGIyNHNJRVF1YzJOaGJHVXBMQ0JFTG5Wd1pHRjBaVTFoZEhKcGVGZHZjbXhrS0NFd0tTd2dSQzV3Y205cVpXTjBhVzl1VFdGMGNtbDRMbU52Y0hrb1J5NXdjbTlxWldOMGFXOXVUV0YwY21sNEtTd2dSQzV3Y205cVpXTjBhVzl1VFdGMGNtbDRTVzUyWlhKelpTNWpiM0I1S0VjdWNISnZhbVZqZEdsdmJrMWhkSEpwZUVsdWRtVnljMlVwTENCRUxtbHpVR1Z5YzNCbFkzUnBkbVZEWVcxbGNtRWdKaVlnS0VRdVptOTJJRDBnV21rZ0tpQXlJQ29nVFdGMGFDNWhkR0Z1S0RFZ0x5QkVMbkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ3VaV3hsYldWdWRITmJOVjBwTENCRUxucHZiMjBnUFNBeEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdkR2hwY3k1blpYUkRZVzFsY21FZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZJN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1blpYUkdiM1psWVhScGIyNGdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NFb1pDQTlQVDBnYm5Wc2JDQW1KaUJtSUQwOVBTQnVkV3hzS1NrZ2NtVjBkWEp1SUdNN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1elpYUkdiM1psWVhScGIyNGdQU0JtZFc1amRHbHZiaWhFS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR01nUFNCRUxDQmtJQ0U5UFNCdWRXeHNJQ1ltSUNoa0xtWnBlR1ZrUm05MlpXRjBhVzl1SUQwZ1JDa3NJR1lnSVQwOUlHNTFiR3dnSmlZZ1ppNW1hWGhsWkVadmRtVmhkR2x2YmlBaFBUMGdkbTlwWkNBd0lDWW1JQ2htTG1acGVHVmtSbTkyWldGMGFXOXVJRDBnUkNrN0NpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQnNaWFFnYm1VZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUZjb1JDd2dSeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYUNBOUlFY3VaMlYwVm1sbGQyVnlVRzl6WlNoc0lIeDhJR0VwTENCdElEMGdSeXdnYUNBaFBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2hsSUQwZ2FDNTJhV1YzY3pzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdZZ0lUMDlJRzUxYkd3Z0ppWWdLR1V1YzJWMFVtVnVaR1Z5VkdGeVoyVjBSbkpoYldWaWRXWm1aWElvY0N3Z1ppNW1jbUZ0WldKMVptWmxjaWtzSUdVdWMyVjBVbVZ1WkdWeVZHRnlaMlYwS0hBcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JtWlNBOUlDRXhPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR1V1YkdWdVozUm9JQ0U5UFNCU0xtTmhiV1Z5WVhNdWJHVnVaM1JvSUNZbUlDaFNMbU5oYldWeVlYTXViR1Z1WjNSb0lEMGdNQ3dnWm1VZ1BTQWhNQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRjlsSUQwZ01Ec2dYMlVnUENCb1pTNXNaVzVuZEdnN0lGOWxLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IzWlNBOUlHaGxXMTlsWFN3Z1JXVWdQU0J1ZFd4c093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobUlDRTlQU0J1ZFd4c0tTQkZaU0E5SUdZdVoyVjBWbWxsZDNCdmNuUW9kMlVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1dXVWdQU0IxTG1kbGRGWnBaWGRUZFdKSmJXRm5aU2hrTENCM1pTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFVmxJRDBnV1dVdWRtbGxkM0J2Y25Rc0lGOWxJRDA5UFNBd0lDWW1JQ2hsTG5ObGRGSmxibVJsY2xSaGNtZGxkRlJsZUhSMWNtVnpLSEFzSUZsbExtTnZiRzl5VkdWNGRIVnlaU3dnWkM1cFoyNXZjbVZFWlhCMGFGWmhiSFZsY3lBL0lIWnZhV1FnTUNBNklGbGxMbVJsY0hSb1UzUmxibU5wYkZSbGVIUjFjbVVwTENCbExuTmxkRkpsYm1SbGNsUmhjbWRsZENod0tTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JVWlNBOUlIZGJYMlZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGUmxJRDA5UFNCMmIybGtJREFnSmlZZ0tGUmxJRDBnYm1WM0lIbDBMQ0JVWlM1c1lYbGxjbk11Wlc1aFlteGxLRjlsS1N3Z1ZHVXVkbWxsZDNCdmNuUWdQU0J1WlhjZ2FtVXNJSGRiWDJWZElEMGdWR1VwTENCVVpTNXRZWFJ5YVhndVpuSnZiVUZ5Y21GNUtIZGxMblJ5WVc1elptOXliUzV0WVhSeWFYZ3BMQ0JVWlM1dFlYUnlhWGd1WkdWamIyMXdiM05sS0ZSbExuQnZjMmwwYVc5dUxDQlVaUzV4ZFdGMFpYSnVhVzl1TENCVVpTNXpZMkZzWlNrc0lGUmxMbkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ3Vabkp2YlVGeWNtRjVLSGRsTG5CeWIycGxZM1JwYjI1TllYUnlhWGdwTENCVVpTNXdjbTlxWldOMGFXOXVUV0YwY21sNFNXNTJaWEp6WlM1amIzQjVLRlJsTG5CeWIycGxZM1JwYjI1TllYUnlhWGdwTG1sdWRtVnlkQ2dwTENCVVpTNTJhV1YzY0c5eWRDNXpaWFFvUldVdWVDd2dSV1V1ZVN3Z1JXVXVkMmxrZEdnc0lFVmxMbWhsYVdkb2RDa3NJRjlsSUQwOVBTQXdJQ1ltSUNoU0xtMWhkSEpwZUM1amIzQjVLRlJsTG0xaGRISnBlQ2tzSUZJdWJXRjBjbWw0TG1SbFkyOXRjRzl6WlNoU0xuQnZjMmwwYVc5dUxDQlNMbkYxWVhSbGNtNXBiMjRzSUZJdWMyTmhiR1VwS1N3Z1ptVWdQVDA5SUNFd0lDWW1JRkl1WTJGdFpYSmhjeTV3ZFhOb0tGUmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2hsSUQwZ01Ec2dhR1VnUENCMkxteGxibWQwYURzZ2FHVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptVWdQU0I0VzJobFhTd2dYMlVnUFNCMlcyaGxYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1psSUNFOVBTQnVkV3hzSUNZbUlGOWxJQ0U5UFNCMmIybGtJREFnSmlZZ1gyVXVkWEJrWVhSbEtHWmxMQ0JITENCc0lIeDhJR0VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUc1bElDWW1JRzVsS0VRc0lFY3BMQ0JITG1SbGRHVmpkR1ZrVUd4aGJtVnpJQ1ltSUc0dVpHbHpjR0YwWTJoRmRtVnVkQ2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWljR3hoYm1WelpHVjBaV04wWldRaUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nUndvZ0lDQWdJQ0FnSUNBZ0lDQjlLU3dnYlNBOUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQkxJRDBnYm1WM0lFVmtPd29nSUNBZ0lDQWdJRXN1YzJWMFFXNXBiV0YwYVc5dVRHOXZjQ2hYS1N3Z2RHaHBjeTV6WlhSQmJtbHRZWFJwYjI1TWIyOXdJRDBnWm5WdVkzUnBiMjRvUkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J1WlNBOUlFUTdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NWthWE53YjNObElEMGdablZ1WTNScGIyNG9LU0I3ZlRzS0lDQWdJSDBLZlRzS1puVnVZM1JwYjI0Z1NEQW9jekVzSUdVcElIc0tJQ0FnSUdaMWJtTjBhVzl1SUhRb1p5d2djQ2tnZXdvZ0lDQWdJQ0FnSUdjdWJXRjBjbWw0UVhWMGIxVndaR0YwWlNBOVBUMGdJVEFnSmlZZ1p5NTFjR1JoZEdWTllYUnlhWGdvS1N3Z2NDNTJZV3gxWlM1amIzQjVLR2N1YldGMGNtbDRLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUc0b1p5d2djQ2tnZXdvZ0lDQWdJQ0FnSUhBdVkyOXNiM0l1WjJWMFVrZENLR2N1Wm05blEyOXNiM0l1ZG1Gc2RXVXNJR0prS0hNeEtTa3NJSEF1YVhOR2IyY2dQeUFvWnk1bWIyZE9aV0Z5TG5aaGJIVmxJRDBnY0M1dVpXRnlMQ0JuTG1adlowWmhjaTUyWVd4MVpTQTlJSEF1Wm1GeUtTQTZJSEF1YVhOR2IyZEZlSEF5SUNZbUlDaG5MbVp2WjBSbGJuTnBkSGt1ZG1Gc2RXVWdQU0J3TG1SbGJuTnBkSGtwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2FTaG5MQ0J3TENCMkxDQjRMQ0I1S1NCN0NpQWdJQ0FnSUNBZ2NDNXBjMDFsYzJoQ1lYTnBZMDFoZEdWeWFXRnNJSHg4SUhBdWFYTk5aWE5vVEdGdFltVnlkRTFoZEdWeWFXRnNJRDhnY2lobkxDQndLU0E2SUhBdWFYTk5aWE5vVkc5dmJrMWhkR1Z5YVdGc0lEOGdLSElvWnl3Z2NDa3NJSFVvWnl3Z2NDa3BJRG9nY0M1cGMwMWxjMmhRYUc5dVowMWhkR1Z5YVdGc0lEOGdLSElvWnl3Z2NDa3NJR2dvWnl3Z2NDa3BJRG9nY0M1cGMwMWxjMmhUZEdGdVpHRnlaRTFoZEdWeWFXRnNJRDhnS0hJb1p5d2djQ2tzSUdRb1p5d2djQ2tzSUhBdWFYTk5aWE5vVUdoNWMybGpZV3hOWVhSbGNtbGhiQ0FtSmlCbUtHY3NJSEFzSUhrcEtTQTZJSEF1YVhOTlpYTm9UV0YwWTJGd1RXRjBaWEpwWVd3Z1B5QW9jaWhuTENCd0tTd2diU2huTENCd0tTa2dPaUJ3TG1selRXVnphRVJsY0hSb1RXRjBaWEpwWVd3Z1B5QnlLR2NzSUhBcElEb2djQzVwYzAxbGMyaEVhWE4wWVc1alpVMWhkR1Z5YVdGc0lEOGdLSElvWnl3Z2NDa3NJRjhvWnl3Z2NDa3BJRG9nY0M1cGMwMWxjMmhPYjNKdFlXeE5ZWFJsY21saGJDQS9JSElvWnl3Z2NDa2dPaUJ3TG1selRHbHVaVUpoYzJsalRXRjBaWEpwWVd3Z1B5QW9ZU2huTENCd0tTd2djQzVwYzB4cGJtVkVZWE5vWldSTllYUmxjbWxoYkNBbUppQnZLR2NzSUhBcEtTQTZJSEF1YVhOUWIybHVkSE5OWVhSbGNtbGhiQ0EvSUdNb1p5d2djQ3dnZGl3Z2VDa2dPaUJ3TG1selUzQnlhWFJsVFdGMFpYSnBZV3dnUHlCc0tHY3NJSEFwSURvZ2NDNXBjMU5vWVdSdmQwMWhkR1Z5YVdGc0lEOGdLR2N1WTI5c2IzSXVkbUZzZFdVdVkyOXdlU2h3TG1OdmJHOXlLU3dnWnk1dmNHRmphWFI1TG5aaGJIVmxJRDBnY0M1dmNHRmphWFI1S1NBNklIQXVhWE5UYUdGa1pYSk5ZWFJsY21saGJDQW1KaUFvY0M1MWJtbG1iM0p0YzA1bFpXUlZjR1JoZEdVZ1BTQWhNU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCeUtHY3NJSEFwSUhzS0lDQWdJQ0FnSUNCbkxtOXdZV05wZEhrdWRtRnNkV1VnUFNCd0xtOXdZV05wZEhrc0lIQXVZMjlzYjNJZ0ppWWdaeTVrYVdabWRYTmxMblpoYkhWbExtTnZjSGtvY0M1amIyeHZjaWtzSUhBdVpXMXBjM05wZG1VZ0ppWWdaeTVsYldsemMybDJaUzUyWVd4MVpTNWpiM0I1S0hBdVpXMXBjM05wZG1VcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0hBdVpXMXBjM05wZG1WSmJuUmxibk5wZEhrcExDQndMbTFoY0NBbUppQW9aeTV0WVhBdWRtRnNkV1VnUFNCd0xtMWhjQ3dnZENod0xtMWhjQ3dnWnk1dFlYQlVjbUZ1YzJadmNtMHBLU3dnY0M1aGJIQm9ZVTFoY0NBbUppQW9aeTVoYkhCb1lVMWhjQzUyWVd4MVpTQTlJSEF1WVd4d2FHRk5ZWEFzSUhRb2NDNWhiSEJvWVUxaGNDd2daeTVoYkhCb1lVMWhjRlJ5WVc1elptOXliU2twTENCd0xtSjFiWEJOWVhBZ0ppWWdLR2N1WW5WdGNFMWhjQzUyWVd4MVpTQTlJSEF1WW5WdGNFMWhjQ3dnZENod0xtSjFiWEJOWVhBc0lHY3VZblZ0Y0UxaGNGUnlZVzV6Wm05eWJTa3NJR2N1WW5WdGNGTmpZV3hsTG5aaGJIVmxJRDBnY0M1aWRXMXdVMk5oYkdVc0lIQXVjMmxrWlNBOVBUMGdSblFnSmlZZ0tHY3VZblZ0Y0ZOallXeGxMblpoYkhWbElDbzlJQzB4S1Nrc0lIQXVibTl5YldGc1RXRndJQ1ltSUNobkxtNXZjbTFoYkUxaGNDNTJZV3gxWlNBOUlIQXVibTl5YldGc1RXRndMQ0IwS0hBdWJtOXliV0ZzVFdGd0xDQm5MbTV2Y20xaGJFMWhjRlJ5WVc1elptOXliU2tzSUdjdWJtOXliV0ZzVTJOaGJHVXVkbUZzZFdVdVkyOXdlU2h3TG01dmNtMWhiRk5qWVd4bEtTd2djQzV6YVdSbElEMDlQU0JHZENBbUppQm5MbTV2Y20xaGJGTmpZV3hsTG5aaGJIVmxMbTVsWjJGMFpTZ3BLU3dnY0M1a2FYTndiR0ZqWlcxbGJuUk5ZWEFnSmlZZ0tHY3VaR2x6Y0d4aFkyVnRaVzUwVFdGd0xuWmhiSFZsSUQwZ2NDNWthWE53YkdGalpXMWxiblJOWVhBc0lIUW9jQzVrYVhOd2JHRmpaVzFsYm5STllYQXNJR2N1WkdsemNHeGhZMlZ0Wlc1MFRXRndWSEpoYm5ObWIzSnRLU3dnWnk1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlM1MllXeDFaU0E5SUhBdVpHbHpjR3hoWTJWdFpXNTBVMk5oYkdVc0lHY3VaR2x6Y0d4aFkyVnRaVzUwUW1saGN5NTJZV3gxWlNBOUlIQXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5a3NJSEF1WlcxcGMzTnBkbVZOWVhBZ0ppWWdLR2N1WlcxcGMzTnBkbVZOWVhBdWRtRnNkV1VnUFNCd0xtVnRhWE56YVhabFRXRndMQ0IwS0hBdVpXMXBjM05wZG1WTllYQXNJR2N1WlcxcGMzTnBkbVZOWVhCVWNtRnVjMlp2Y20wcEtTd2djQzV6Y0dWamRXeGhjazFoY0NBbUppQW9aeTV6Y0dWamRXeGhjazFoY0M1MllXeDFaU0E5SUhBdWMzQmxZM1ZzWVhKTllYQXNJSFFvY0M1emNHVmpkV3hoY2sxaGNDd2daeTV6Y0dWamRXeGhjazFoY0ZSeVlXNXpabTl5YlNrcExDQndMbUZzY0doaFZHVnpkQ0ErSURBZ0ppWWdLR2N1WVd4d2FHRlVaWE4wTG5aaGJIVmxJRDBnY0M1aGJIQm9ZVlJsYzNRcE93b2dJQ0FnSUNBZ0lHeGxkQ0IySUQwZ1pTNW5aWFFvY0NrdVpXNTJUV0Z3T3dvZ0lDQWdJQ0FnSUdsbUlDaDJJQ1ltSUNobkxtVnVkazFoY0M1MllXeDFaU0E5SUhZc0lHY3VabXhwY0VWdWRrMWhjQzUyWVd4MVpTQTlJSFl1YVhORGRXSmxWR1Y0ZEhWeVpTQW1KaUIyTG1selVtVnVaR1Z5VkdGeVoyVjBWR1Y0ZEhWeVpTQTlQVDBnSVRFZ1B5QXRNU0E2SURFc0lHY3VjbVZtYkdWamRHbDJhWFI1TG5aaGJIVmxJRDBnY0M1eVpXWnNaV04wYVhacGRIa3NJR2N1YVc5eUxuWmhiSFZsSUQwZ2NDNXBiM0lzSUdjdWNtVm1jbUZqZEdsdmJsSmhkR2x2TG5aaGJIVmxJRDBnY0M1eVpXWnlZV04wYVc5dVVtRjBhVzhwTENCd0xteHBaMmgwVFdGd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdjdWJHbG5hSFJOWVhBdWRtRnNkV1VnUFNCd0xteHBaMmgwVFdGd093b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VDQTlJSE14TGw5MWMyVk1aV2RoWTNsTWFXZG9kSE1nUFQwOUlDRXdJRDhnVFdGMGFDNVFTU0E2SURFN0NpQWdJQ0FnSUNBZ0lDQWdJR2N1YkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGt1ZG1Gc2RXVWdQU0J3TG14cFoyaDBUV0Z3U1c1MFpXNXphWFI1SUNvZ2VDd2dkQ2h3TG14cFoyaDBUV0Z3TENCbkxteHBaMmgwVFdGd1ZISmhibk5tYjNKdEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjQzVoYjAxaGNDQW1KaUFvWnk1aGIwMWhjQzUyWVd4MVpTQTlJSEF1WVc5TllYQXNJR2N1WVc5TllYQkpiblJsYm5OcGRIa3VkbUZzZFdVZ1BTQndMbUZ2VFdGd1NXNTBaVzV6YVhSNUxDQjBLSEF1WVc5TllYQXNJR2N1WVc5TllYQlVjbUZ1YzJadmNtMHBLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdFb1p5d2djQ2tnZXdvZ0lDQWdJQ0FnSUdjdVpHbG1ablZ6WlM1MllXeDFaUzVqYjNCNUtIQXVZMjlzYjNJcExDQm5MbTl3WVdOcGRIa3VkbUZzZFdVZ1BTQndMbTl3WVdOcGRIa3NJSEF1YldGd0lDWW1JQ2huTG0xaGNDNTJZV3gxWlNBOUlIQXViV0Z3TENCMEtIQXViV0Z3TENCbkxtMWhjRlJ5WVc1elptOXliU2twT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2J5aG5MQ0J3S1NCN0NpQWdJQ0FnSUNBZ1p5NWtZWE5vVTJsNlpTNTJZV3gxWlNBOUlIQXVaR0Z6YUZOcGVtVXNJR2N1ZEc5MFlXeFRhWHBsTG5aaGJIVmxJRDBnY0M1a1lYTm9VMmw2WlNBcklIQXVaMkZ3VTJsNlpTd2daeTV6WTJGc1pTNTJZV3gxWlNBOUlIQXVjMk5oYkdVN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQmpLR2NzSUhBc0lIWXNJSGdwSUhzS0lDQWdJQ0FnSUNCbkxtUnBabVoxYzJVdWRtRnNkV1V1WTI5d2VTaHdMbU52Ykc5eUtTd2daeTV2Y0dGamFYUjVMblpoYkhWbElEMGdjQzV2Y0dGamFYUjVMQ0JuTG5OcGVtVXVkbUZzZFdVZ1BTQndMbk5wZW1VZ0tpQjJMQ0JuTG5OallXeGxMblpoYkhWbElEMGdlQ0FxSUM0MUxDQndMbTFoY0NBbUppQW9aeTV0WVhBdWRtRnNkV1VnUFNCd0xtMWhjQ3dnZENod0xtMWhjQ3dnWnk1MWRsUnlZVzV6Wm05eWJTa3BMQ0J3TG1Gc2NHaGhUV0Z3SUNZbUlDaG5MbUZzY0doaFRXRndMblpoYkhWbElEMGdjQzVoYkhCb1lVMWhjQ3dnZENod0xtRnNjR2hoVFdGd0xDQm5MbUZzY0doaFRXRndWSEpoYm5ObWIzSnRLU2tzSUhBdVlXeHdhR0ZVWlhOMElENGdNQ0FtSmlBb1p5NWhiSEJvWVZSbGMzUXVkbUZzZFdVZ1BTQndMbUZzY0doaFZHVnpkQ2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCc0tHY3NJSEFwSUhzS0lDQWdJQ0FnSUNCbkxtUnBabVoxYzJVdWRtRnNkV1V1WTI5d2VTaHdMbU52Ykc5eUtTd2daeTV2Y0dGamFYUjVMblpoYkhWbElEMGdjQzV2Y0dGamFYUjVMQ0JuTG5KdmRHRjBhVzl1TG5aaGJIVmxJRDBnY0M1eWIzUmhkR2x2Yml3Z2NDNXRZWEFnSmlZZ0tHY3ViV0Z3TG5aaGJIVmxJRDBnY0M1dFlYQXNJSFFvY0M1dFlYQXNJR2N1YldGd1ZISmhibk5tYjNKdEtTa3NJSEF1WVd4d2FHRk5ZWEFnSmlZZ0tHY3VZV3h3YUdGTllYQXVkbUZzZFdVZ1BTQndMbUZzY0doaFRXRndMQ0IwS0hBdVlXeHdhR0ZOWVhBc0lHY3VZV3h3YUdGTllYQlVjbUZ1YzJadmNtMHBLU3dnY0M1aGJIQm9ZVlJsYzNRZ1BpQXdJQ1ltSUNobkxtRnNjR2hoVkdWemRDNTJZV3gxWlNBOUlIQXVZV3h3YUdGVVpYTjBLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdnb1p5d2djQ2tnZXdvZ0lDQWdJQ0FnSUdjdWMzQmxZM1ZzWVhJdWRtRnNkV1V1WTI5d2VTaHdMbk53WldOMWJHRnlLU3dnWnk1emFHbHVhVzVsYzNNdWRtRnNkV1VnUFNCTllYUm9MbTFoZUNod0xuTm9hVzVwYm1WemN5d2dNV1V0TkNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQjFLR2NzSUhBcElIc0tJQ0FnSUNBZ0lDQndMbWR5WVdScFpXNTBUV0Z3SUNZbUlDaG5MbWR5WVdScFpXNTBUV0Z3TG5aaGJIVmxJRDBnY0M1bmNtRmthV1Z1ZEUxaGNDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJrS0djc0lIQXBJSHNLSUNBZ0lDQWdJQ0JuTG0xbGRHRnNibVZ6Y3k1MllXeDFaU0E5SUhBdWJXVjBZV3h1WlhOekxDQndMbTFsZEdGc2JtVnpjMDFoY0NBbUppQW9aeTV0WlhSaGJHNWxjM05OWVhBdWRtRnNkV1VnUFNCd0xtMWxkR0ZzYm1WemMwMWhjQ3dnZENod0xtMWxkR0ZzYm1WemMwMWhjQ3dnWnk1dFpYUmhiRzVsYzNOTllYQlVjbUZ1YzJadmNtMHBLU3dnWnk1eWIzVm5hRzVsYzNNdWRtRnNkV1VnUFNCd0xuSnZkV2RvYm1WemN5d2djQzV5YjNWbmFHNWxjM05OWVhBZ0ppWWdLR2N1Y205MVoyaHVaWE56VFdGd0xuWmhiSFZsSUQwZ2NDNXliM1ZuYUc1bGMzTk5ZWEFzSUhRb2NDNXliM1ZuYUc1bGMzTk5ZWEFzSUdjdWNtOTFaMmh1WlhOelRXRndWSEpoYm5ObWIzSnRLU2tzSUdVdVoyVjBLSEFwTG1WdWRrMWhjQ0FtSmlBb1p5NWxiblpOWVhCSmJuUmxibk5wZEhrdWRtRnNkV1VnUFNCd0xtVnVkazFoY0VsdWRHVnVjMmwwZVNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQm1LR2NzSUhBc0lIWXBJSHNLSUNBZ0lDQWdJQ0JuTG1sdmNpNTJZV3gxWlNBOUlIQXVhVzl5TENCd0xuTm9aV1Z1SUQ0Z01DQW1KaUFvWnk1emFHVmxia052Ykc5eUxuWmhiSFZsTG1OdmNIa29jQzV6YUdWbGJrTnZiRzl5S1M1dGRXeDBhWEJzZVZOallXeGhjaWh3TG5Ob1pXVnVLU3dnWnk1emFHVmxibEp2ZFdkb2JtVnpjeTUyWVd4MVpTQTlJSEF1YzJobFpXNVNiM1ZuYUc1bGMzTXNJSEF1YzJobFpXNURiMnh2Y2sxaGNDQW1KaUFvWnk1emFHVmxia052Ykc5eVRXRndMblpoYkhWbElEMGdjQzV6YUdWbGJrTnZiRzl5VFdGd0xDQjBLSEF1YzJobFpXNURiMnh2Y2sxaGNDd2daeTV6YUdWbGJrTnZiRzl5VFdGd1ZISmhibk5tYjNKdEtTa3NJSEF1YzJobFpXNVNiM1ZuYUc1bGMzTk5ZWEFnSmlZZ0tHY3VjMmhsWlc1U2IzVm5hRzVsYzNOTllYQXVkbUZzZFdVZ1BTQndMbk5vWldWdVVtOTFaMmh1WlhOelRXRndMQ0IwS0hBdWMyaGxaVzVTYjNWbmFHNWxjM05OWVhBc0lHY3VjMmhsWlc1U2IzVm5hRzVsYzNOTllYQlVjbUZ1YzJadmNtMHBLU2tzSUhBdVkyeGxZWEpqYjJGMElENGdNQ0FtSmlBb1p5NWpiR1ZoY21OdllYUXVkbUZzZFdVZ1BTQndMbU5zWldGeVkyOWhkQ3dnWnk1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNNdWRtRnNkV1VnUFNCd0xtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemN5d2djQzVqYkdWaGNtTnZZWFJOWVhBZ0ppWWdLR2N1WTJ4bFlYSmpiMkYwVFdGd0xuWmhiSFZsSUQwZ2NDNWpiR1ZoY21OdllYUk5ZWEFzSUhRb2NDNWpiR1ZoY21OdllYUk5ZWEFzSUdjdVkyeGxZWEpqYjJGMFRXRndWSEpoYm5ObWIzSnRLU2tzSUhBdVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOelRXRndJQ1ltSUNobkxtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjQzUyWVd4MVpTQTlJSEF1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56VFdGd0xDQjBLSEF1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56VFdGd0xDQm5MbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjMDFoY0ZSeVlXNXpabTl5YlNrcExDQndMbU5zWldGeVkyOWhkRTV2Y20xaGJFMWhjQ0FtSmlBb1p5NWpiR1ZoY21OdllYUk9iM0p0WVd4TllYQXVkbUZzZFdVZ1BTQndMbU5zWldGeVkyOWhkRTV2Y20xaGJFMWhjQ3dnZENod0xtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNDd2daeTVqYkdWaGNtTnZZWFJPYjNKdFlXeE5ZWEJVY21GdWMyWnZjbTBwTENCbkxtTnNaV0Z5WTI5aGRFNXZjbTFoYkZOallXeGxMblpoYkhWbExtTnZjSGtvY0M1amJHVmhjbU52WVhST2IzSnRZV3hUWTJGc1pTa3NJSEF1YzJsa1pTQTlQVDBnUm5RZ0ppWWdaeTVqYkdWaGNtTnZZWFJPYjNKdFlXeFRZMkZzWlM1MllXeDFaUzV1WldkaGRHVW9LU2twTENCd0xtbHlhV1JsYzJObGJtTmxJRDRnTUNBbUppQW9aeTVwY21sa1pYTmpaVzVqWlM1MllXeDFaU0E5SUhBdWFYSnBaR1Z6WTJWdVkyVXNJR2N1YVhKcFpHVnpZMlZ1WTJWSlQxSXVkbUZzZFdVZ1BTQndMbWx5YVdSbGMyTmxibU5sU1U5U0xDQm5MbWx5YVdSbGMyTmxibU5sVkdocFkydHVaWE56VFdsdWFXMTFiUzUyWVd4MVpTQTlJSEF1YVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNOU1lXNW5aVnN3WFN3Z1p5NXBjbWxrWlhOalpXNWpaVlJvYVdOcmJtVnpjMDFoZUdsdGRXMHVkbUZzZFdVZ1BTQndMbWx5YVdSbGMyTmxibU5sVkdocFkydHVaWE56VW1GdVoyVmJNVjBzSUhBdWFYSnBaR1Z6WTJWdVkyVk5ZWEFnSmlZZ0tHY3VhWEpwWkdWelkyVnVZMlZOWVhBdWRtRnNkV1VnUFNCd0xtbHlhV1JsYzJObGJtTmxUV0Z3TENCMEtIQXVhWEpwWkdWelkyVnVZMlZOWVhBc0lHY3VhWEpwWkdWelkyVnVZMlZOWVhCVWNtRnVjMlp2Y20wcEtTd2djQzVwY21sa1pYTmpaVzVqWlZSb2FXTnJibVZ6YzAxaGNDQW1KaUFvWnk1cGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMwMWhjQzUyWVd4MVpTQTlJSEF1YVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNOTllYQXNJSFFvY0M1cGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMwMWhjQ3dnWnk1cGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMwMWhjRlJ5WVc1elptOXliU2twS1N3Z2NDNTBjbUZ1YzIxcGMzTnBiMjRnUGlBd0lDWW1JQ2huTG5SeVlXNXpiV2x6YzJsdmJpNTJZV3gxWlNBOUlIQXVkSEpoYm5OdGFYTnphVzl1TENCbkxuUnlZVzV6YldsemMybHZibE5oYlhCc1pYSk5ZWEF1ZG1Gc2RXVWdQU0IyTG5SbGVIUjFjbVVzSUdjdWRISmhibk50YVhOemFXOXVVMkZ0Y0d4bGNsTnBlbVV1ZG1Gc2RXVXVjMlYwS0hZdWQybGtkR2dzSUhZdWFHVnBaMmgwS1N3Z2NDNTBjbUZ1YzIxcGMzTnBiMjVOWVhBZ0ppWWdLR2N1ZEhKaGJuTnRhWE56YVc5dVRXRndMblpoYkhWbElEMGdjQzUwY21GdWMyMXBjM05wYjI1TllYQXNJSFFvY0M1MGNtRnVjMjFwYzNOcGIyNU5ZWEFzSUdjdWRISmhibk50YVhOemFXOXVUV0Z3VkhKaGJuTm1iM0p0S1Nrc0lHY3VkR2hwWTJ0dVpYTnpMblpoYkhWbElEMGdjQzUwYUdsamEyNWxjM01zSUhBdWRHaHBZMnR1WlhOelRXRndJQ1ltSUNobkxuUm9hV05yYm1WemMwMWhjQzUyWVd4MVpTQTlJSEF1ZEdocFkydHVaWE56VFdGd0xDQjBLSEF1ZEdocFkydHVaWE56VFdGd0xDQm5MblJvYVdOcmJtVnpjMDFoY0ZSeVlXNXpabTl5YlNrcExDQm5MbUYwZEdWdWRXRjBhVzl1UkdsemRHRnVZMlV1ZG1Gc2RXVWdQU0J3TG1GMGRHVnVkV0YwYVc5dVJHbHpkR0Z1WTJVc0lHY3VZWFIwWlc1MVlYUnBiMjVEYjJ4dmNpNTJZV3gxWlM1amIzQjVLSEF1WVhSMFpXNTFZWFJwYjI1RGIyeHZjaWtwTENCd0xtRnVhWE52ZEhKdmNIa2dQaUF3SUNZbUlDaG5MbUZ1YVhOdmRISnZjSGxXWldOMGIzSXVkbUZzZFdVdWMyVjBLSEF1WVc1cGMyOTBjbTl3ZVNBcUlFMWhkR2d1WTI5ektIQXVZVzVwYzI5MGNtOXdlVkp2ZEdGMGFXOXVLU3dnY0M1aGJtbHpiM1J5YjNCNUlDb2dUV0YwYUM1emFXNG9jQzVoYm1semIzUnliM0I1VW05MFlYUnBiMjRwS1N3Z2NDNWhibWx6YjNSeWIzQjVUV0Z3SUNZbUlDaG5MbUZ1YVhOdmRISnZjSGxOWVhBdWRtRnNkV1VnUFNCd0xtRnVhWE52ZEhKdmNIbE5ZWEFzSUhRb2NDNWhibWx6YjNSeWIzQjVUV0Z3TENCbkxtRnVhWE52ZEhKdmNIbE5ZWEJVY21GdWMyWnZjbTBwS1Nrc0lHY3VjM0JsWTNWc1lYSkpiblJsYm5OcGRIa3VkbUZzZFdVZ1BTQndMbk53WldOMWJHRnlTVzUwWlc1emFYUjVMQ0JuTG5Od1pXTjFiR0Z5UTI5c2IzSXVkbUZzZFdVdVkyOXdlU2h3TG5Od1pXTjFiR0Z5UTI5c2IzSXBMQ0J3TG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEFnSmlZZ0tHY3VjM0JsWTNWc1lYSkRiMnh2Y2sxaGNDNTJZV3gxWlNBOUlIQXVjM0JsWTNWc1lYSkRiMnh2Y2sxaGNDd2dkQ2h3TG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEFzSUdjdWMzQmxZM1ZzWVhKRGIyeHZjazFoY0ZSeVlXNXpabTl5YlNrcExDQndMbk53WldOMWJHRnlTVzUwWlc1emFYUjVUV0Z3SUNZbUlDaG5Mbk53WldOMWJHRnlTVzUwWlc1emFYUjVUV0Z3TG5aaGJIVmxJRDBnY0M1emNHVmpkV3hoY2tsdWRHVnVjMmwwZVUxaGNDd2dkQ2h3TG5Od1pXTjFiR0Z5U1c1MFpXNXphWFI1VFdGd0xDQm5Mbk53WldOMWJHRnlTVzUwWlc1emFYUjVUV0Z3VkhKaGJuTm1iM0p0S1NrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnRLR2NzSUhBcElIc0tJQ0FnSUNBZ0lDQndMbTFoZEdOaGNDQW1KaUFvWnk1dFlYUmpZWEF1ZG1Gc2RXVWdQU0J3TG0xaGRHTmhjQ2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCZktHY3NJSEFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkaUE5SUdVdVoyVjBLSEFwTG14cFoyaDBPd29nSUNBZ0lDQWdJR2N1Y21WbVpYSmxibU5sVUc5emFYUnBiMjR1ZG1Gc2RXVXVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0hZdWJXRjBjbWw0VjI5eWJHUXBMQ0JuTG01bFlYSkVhWE4wWVc1alpTNTJZV3gxWlNBOUlIWXVjMmhoWkc5M0xtTmhiV1Z5WVM1dVpXRnlMQ0JuTG1aaGNrUnBjM1JoYm1ObExuWmhiSFZsSUQwZ2RpNXphR0ZrYjNjdVkyRnRaWEpoTG1aaGNqc0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdjbVZtY21WemFFWnZaMVZ1YVdadmNtMXpPaUJ1TEFvZ0lDQWdJQ0FnSUhKbFpuSmxjMmhOWVhSbGNtbGhiRlZ1YVdadmNtMXpPaUJwQ2lBZ0lDQjlPd3A5Q21aMWJtTjBhVzl1SUVjd0tITXhMQ0JsTENCMExDQnVLU0I3Q2lBZ0lDQnNaWFFnYVNBOUlIdDlMQ0J5SUQwZ2UzMHNJR0VnUFNCYlhTd2dieUE5SUhRdWFYTlhaV0pIVERJZ1B5QnpNUzVuWlhSUVlYSmhiV1YwWlhJb2N6RXVUVUZZWDFWT1NVWlBVazFmUWxWR1JrVlNYMEpKVGtSSlRrZFRLU0E2SURBN0NpQWdJQ0JtZFc1amRHbHZiaUJqS0hZc0lIZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2VTQTlJSGd1Y0hKdlozSmhiVHNLSUNBZ0lDQWdJQ0J1TG5WdWFXWnZjbTFDYkc5amEwSnBibVJwYm1jb2Rpd2dlU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCc0tIWXNJSGdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdlU0E5SUdsYmRpNXBaRjA3Q2lBZ0lDQWdJQ0FnZVNBOVBUMGdkbTlwWkNBd0lDWW1JQ2h0S0hZcExDQjVJRDBnYUNoMktTd2dhVnQyTG1sa1hTQTlJSGtzSUhZdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnaVpHbHpjRzl6WlNJc0lHY3BLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1lpQTlJSGd1Y0hKdlozSmhiVHNLSUNBZ0lDQWdJQ0J1TG5Wd1pHRjBaVlZDVDAxaGNIQnBibWNvZGl3Z1lpazdDaUFnSUNBZ0lDQWdiR1YwSUhjZ1BTQmxMbkpsYm1SbGNpNW1jbUZ0WlRzS0lDQWdJQ0FnSUNCeVczWXVhV1JkSUNFOVBTQjNJQ1ltSUNoa0tIWXBMQ0J5VzNZdWFXUmRJRDBnZHlrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQm9LSFlwSUhzS0lDQWdJQ0FnSUNCc1pYUWdlQ0E5SUhVb0tUc0tJQ0FnSUNBZ0lDQjJMbDlmWW1sdVpHbHVaMUJ2YVc1MFNXNWtaWGdnUFNCNE93b2dJQ0FnSUNBZ0lHeGxkQ0I1SUQwZ2N6RXVZM0psWVhSbFFuVm1abVZ5S0Nrc0lHSWdQU0IyTGw5ZmMybDZaU3dnZHlBOUlIWXVkWE5oWjJVN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhNeExtSnBibVJDZFdabVpYSW9jekV1VlU1SlJrOVNUVjlDVlVaR1JWSXNJSGtwTENCek1TNWlkV1ptWlhKRVlYUmhLSE14TGxWT1NVWlBVazFmUWxWR1JrVlNMQ0JpTENCM0tTd2djekV1WW1sdVpFSjFabVpsY2loek1TNVZUa2xHVDFKTlgwSlZSa1pGVWl3Z2JuVnNiQ2tzSUhNeExtSnBibVJDZFdabVpYSkNZWE5sS0hNeExsVk9TVVpQVWsxZlFsVkdSa1ZTTENCNExDQjVLU3dnZVRzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlIVW9LU0I3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IySUQwZ01Ec2dkaUE4SUc4N0lIWXJLeWxwWmlBb1lTNXBibVJsZUU5bUtIWXBJRDA5UFNBdE1Ta2djbVYwZFhKdUlHRXVjSFZ6YUNoMktTd2dkanNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dUV0Y0YVcxMWJTQnVkVzFpWlhJZ2IyWWdjMmx0ZFd4MFlXNWxiM1Z6YkhrZ2RYTmhZbXhsSUhWdWFXWnZjbTF6SUdkeWIzVndjeUJ5WldGamFHVmtMaUlwTENBd093b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdaQ2gyS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSGdnUFNCcFczWXVhV1JkTENCNUlEMGdkaTUxYm1sbWIzSnRjeXdnWWlBOUlIWXVYMTlqWVdOb1pUc0tJQ0FnSUNBZ0lDQnpNUzVpYVc1a1FuVm1abVZ5S0hNeExsVk9TVVpQVWsxZlFsVkdSa1ZTTENCNEtUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIY2dQU0F3TENCU0lEMGdlUzVzWlc1bmRHZzdJSGNnUENCU095QjNLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnU1NBOUlIbGJkMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htS0Vrc0lIY3NJR0lwSUQwOVBTQWhNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFMGdQU0JKTGw5ZmIyWm1jMlYwTENCVUlEMGdRWEp5WVhrdWFYTkJjbkpoZVNoSkxuWmhiSFZsS1NBL0lFa3VkbUZzZFdVZ09pQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnU1M1MllXeDFaUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYU3dnVHlBOUlEQTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGa2dQU0F3T3lCWklEd2dWQzVzWlc1bmRHZzdJRmtyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUNRZ1BTQlVXMWxkTENCVklEMGdYeWdrS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsYjJZZ0pDQTlQU0FpYm5WdFltVnlJaUEvSUNoSkxsOWZaR0YwWVZzd1hTQTlJQ1FzSUhNeExtSjFabVpsY2xOMVlrUmhkR0VvY3pFdVZVNUpSazlTVFY5Q1ZVWkdSVklzSUUwZ0t5QlBMQ0JKTGw5ZlpHRjBZU2twSURvZ0pDNXBjMDFoZEhKcGVETWdQeUFvU1M1ZlgyUmhkR0ZiTUYwZ1BTQWtMbVZzWlcxbGJuUnpXekJkTENCSkxsOWZaR0YwWVZzeFhTQTlJQ1F1Wld4bGJXVnVkSE5iTVYwc0lFa3VYMTlrWVhSaFd6SmRJRDBnSkM1bGJHVnRaVzUwYzFzeVhTd2dTUzVmWDJSaGRHRmJNMTBnUFNBa0xtVnNaVzFsYm5Seld6QmRMQ0JKTGw5ZlpHRjBZVnMwWFNBOUlDUXVaV3hsYldWdWRITmJNMTBzSUVrdVgxOWtZWFJoV3pWZElEMGdKQzVsYkdWdFpXNTBjMXMwWFN3Z1NTNWZYMlJoZEdGYk5sMGdQU0FrTG1Wc1pXMWxiblJ6V3pWZExDQkpMbDlmWkdGMFlWczNYU0E5SUNRdVpXeGxiV1Z1ZEhOYk1GMHNJRWt1WDE5a1lYUmhXemhkSUQwZ0pDNWxiR1Z0Wlc1MGMxczJYU3dnU1M1ZlgyUmhkR0ZiT1YwZ1BTQWtMbVZzWlcxbGJuUnpXemRkTENCSkxsOWZaR0YwWVZzeE1GMGdQU0FrTG1Wc1pXMWxiblJ6V3poZExDQkpMbDlmWkdGMFlWc3hNVjBnUFNBa0xtVnNaVzFsYm5Seld6QmRLU0E2SUNna0xuUnZRWEp5WVhrb1NTNWZYMlJoZEdFc0lFOHBMQ0JQSUNzOUlGVXVjM1J2Y21GblpTQXZJRVpzYjJGME16SkJjbkpoZVM1Q1dWUkZVMTlRUlZKZlJVeEZUVVZPVkNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek1TNWlkV1ptWlhKVGRXSkVZWFJoS0hNeExsVk9TVVpQVWsxZlFsVkdSa1ZTTENCTkxDQkpMbDlmWkdGMFlTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2N6RXVZbWx1WkVKMVptWmxjaWh6TVM1VlRrbEdUMUpOWDBKVlJrWkZVaXdnYm5Wc2JDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJtS0hZc0lIZ3NJSGtwSUhzS0lDQWdJQ0FnSUNCc1pYUWdZaUE5SUhZdWRtRnNkV1U3Q2lBZ0lDQWdJQ0FnYVdZZ0tIbGJlRjBnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdJZ1BUMGdJbTUxYldKbGNpSXBJSGxiZUYwZ1BTQmlPd29nSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCM0lEMGdRWEp5WVhrdWFYTkJjbkpoZVNoaUtTQS9JR0lnT2lCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYU3dnVWlBOUlGdGRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQkpJRDBnTURzZ1NTQThJSGN1YkdWdVozUm9PeUJKS3lzcFVpNXdkWE5vS0hkYlNWMHVZMnh2Ym1Vb0tTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVXM2hkSUQwZ1Vqc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0lUQTdDaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdZaUE5UFNBaWJuVnRZbVZ5SWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2VWdDRYU0FoUFQwZ1lpa2djbVYwZFhKdUlIbGJlRjBnUFNCaUxDQWhNRHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkeUE5SUVGeWNtRjVMbWx6UVhKeVlYa29lVnQ0WFNrZ1B5QjVXM2hkSURvZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VWdDRYUW9nSUNBZ0lDQWdJQ0FnSUNCZExDQlNJRDBnUVhKeVlYa3VhWE5CY25KaGVTaGlLU0EvSUdJZ09pQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlDaUFnSUNBZ0lDQWdJQ0FnSUYwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdTU0E5SURBN0lFa2dQQ0IzTG14bGJtZDBhRHNnU1NzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JOSUQwZ2QxdEpYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoTkxtVnhkV0ZzY3loU1cwbGRLU0E5UFQwZ0lURXBJSEpsZEhWeWJpQk5MbU52Y0hrb1VsdEpYU2tzSUNFd093b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUFoTVRzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHMG9kaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQjRJRDBnZGk1MWJtbG1iM0p0Y3l3Z2VTQTlJREFzSUdJZ1BTQXhOaXdnZHlBOUlEQTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQlNJRDBnTUN3Z1NTQTlJSGd1YkdWdVozUm9PeUJTSUR3Z1NUc2dVaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUUwZ1BTQjRXMUpkTENCVUlEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbTkxYm1SaGNuazZJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEc5eVlXZGxPaUF3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNJRThnUFNCQmNuSmhlUzVwYzBGeWNtRjVLRTB1ZG1Gc2RXVXBJRDhnVFM1MllXeDFaU0E2SUZzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUUwdWRtRnNkV1VLSUNBZ0lDQWdJQ0FnSUNBZ1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JaSUQwZ01Dd2dKQ0E5SUU4dWJHVnVaM1JvT3lCWklEd2dKRHNnV1NzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JWSUQwZ1QxdFpYU3dnZWlBOUlGOG9WU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JVTG1KdmRXNWtZWEo1SUNzOUlIb3VZbTkxYm1SaGNua3NJRlF1YzNSdmNtRm5aU0FyUFNCNkxuTjBiM0poWjJVN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRTB1WDE5a1lYUmhJRDBnYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2hVTG5OMGIzSmhaMlVnTHlCR2JHOWhkRE15UVhKeVlYa3VRbGxVUlZOZlVFVlNYMFZNUlUxRlRsUXBMQ0JOTGw5ZmIyWm1jMlYwSUQwZ2VTd2dVaUErSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIY2dQU0I1SUNVZ1lqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JaSUQwZ1lpQXRJSGM3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzSUNFOVBTQXdJQ1ltSUZrZ0xTQlVMbUp2ZFc1a1lYSjVJRHdnTUNBbUppQW9lU0FyUFNCaUlDMGdkeXdnVFM1ZlgyOW1abk5sZENBOUlIa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSGtnS3owZ1ZDNXpkRzl5WVdkbE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2R5QTlJSGtnSlNCaUxDQjNJRDRnTUNBbUppQW9lU0FyUFNCaUlDMGdkeWtzSUhZdVgxOXphWHBsSUQwZ2VTd2dkaTVmWDJOaFkyaGxJRDBnZTMwc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCZktIWXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2VDQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1ltOTFibVJoY25rNklEQXNDaUFnSUNBZ0lDQWdJQ0FnSUhOMGIzSmhaMlU2SURBS0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGVYQmxiMllnZGlBOVBTQWliblZ0WW1WeUlpQS9JQ2g0TG1KdmRXNWtZWEo1SUQwZ05Dd2dlQzV6ZEc5eVlXZGxJRDBnTkNrZ09pQjJMbWx6Vm1WamRHOXlNaUEvSUNoNExtSnZkVzVrWVhKNUlEMGdPQ3dnZUM1emRHOXlZV2RsSUQwZ09Da2dPaUIyTG1selZtVmpkRzl5TXlCOGZDQjJMbWx6UTI5c2IzSWdQeUFvZUM1aWIzVnVaR0Z5ZVNBOUlERTJMQ0I0TG5OMGIzSmhaMlVnUFNBeE1pa2dPaUIyTG1selZtVmpkRzl5TkNBL0lDaDRMbUp2ZFc1a1lYSjVJRDBnTVRZc0lIZ3VjM1J2Y21GblpTQTlJREUyS1NBNklIWXVhWE5OWVhSeWFYZ3pJRDhnS0hndVltOTFibVJoY25rZ1BTQTBPQ3dnZUM1emRHOXlZV2RsSUQwZ05EZ3BJRG9nZGk1cGMwMWhkSEpwZURRZ1B5QW9lQzVpYjNWdVpHRnllU0E5SURZMExDQjRMbk4wYjNKaFoyVWdQU0EyTkNrZ09pQjJMbWx6VkdWNGRIVnlaU0EvSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nVkdWNGRIVnlaU0J6WVcxd2JHVnljeUJqWVc0Z2JtOTBJR0psSUhCaGNuUWdiMllnWVc0Z2RXNXBabTl5YlhNZ1ozSnZkWEF1SWlrZ09pQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklGVnVjM1Z3Y0c5eWRHVmtJSFZ1YVdadmNtMGdkbUZzZFdVZ2RIbHdaUzRpTENCMktTd2dlRHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdjb2Rpa2dld29nSUNBZ0lDQWdJR3hsZENCNElEMGdkaTUwWVhKblpYUTdDaUFnSUNBZ0lDQWdlQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NKa2FYTndiM05sSWl3Z1p5azdDaUFnSUNBZ0lDQWdiR1YwSUhrZ1BTQmhMbWx1WkdWNFQyWW9lQzVmWDJKcGJtUnBibWRRYjJsdWRFbHVaR1Y0S1RzS0lDQWdJQ0FnSUNCaExuTndiR2xqWlNoNUxDQXhLU3dnY3pFdVpHVnNaWFJsUW5WbVptVnlLR2xiZUM1cFpGMHBMQ0JrWld4bGRHVWdhVnQ0TG1sa1hTd2daR1ZzWlhSbElISmJlQzVwWkYwN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQndLQ2tnZXdvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZGlCcGJpQnBLWE14TG1SbGJHVjBaVUoxWm1abGNpaHBXM1pkS1RzS0lDQWdJQ0FnSUNCaElEMGdXMTBzSUdrZ1BTQjdmU3dnY2lBOUlIdDlPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JpYVc1a09pQmpMQW9nSUNBZ0lDQWdJSFZ3WkdGMFpUb2diQ3dLSUNBZ0lDQWdJQ0JrYVhOd2IzTmxPaUJ3Q2lBZ0lDQjlPd3A5Q25aaGNpQlNieUE5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCN2ZTbDdDaUFnSUNBZ0lDQWdiR1YwSUhzZ1kyRnVkbUZ6T2lCMElEMGdkSEFvS1NBc0lHTnZiblJsZUhRNklHNGdQU0J1ZFd4c0lDd2daR1Z3ZEdnNklHa2dQU0FoTUNBc0lITjBaVzVqYVd3NklISWdQU0FoTUNBc0lHRnNjR2hoT2lCaElEMGdJVEVnTENCaGJuUnBZV3hwWVhNNklHOGdQU0FoTVNBc0lIQnlaVzExYkhScGNHeHBaV1JCYkhCb1lUb2dZeUE5SUNFd0lDd2djSEpsYzJWeWRtVkVjbUYzYVc1blFuVm1abVZ5T2lCc0lEMGdJVEVnTENCd2IzZGxjbEJ5WldabGNtVnVZMlU2SUdnZ1BTQWlaR1ZtWVhWc2RDSWdMQ0JtWVdsc1NXWk5ZV3B2Y2xCbGNtWnZjbTFoYm1ObFEyRjJaV0YwT2lCMUlEMGdJVEVnSUgwZ1BTQmxPd29nSUNBZ0lDQWdJSFJvYVhNdWFYTlhaV0pIVEZKbGJtUmxjbVZ5SUQwZ0lUQTdDaUFnSUNBZ0lDQWdiR1YwSUdRN0NpQWdJQ0FnSUNBZ2JpQWhQVDBnYm5Wc2JDQS9JR1FnUFNCdUxtZGxkRU52Ym5SbGVIUkJkSFJ5YVdKMWRHVnpLQ2t1WVd4d2FHRWdPaUJrSUQwZ1lUc0tJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlHNWxkeUJWYVc1ME16SkJjbkpoZVNnMEtTd2diU0E5SUc1bGR5QkpiblF6TWtGeWNtRjVLRFFwTENCZklEMGdiblZzYkN3Z1p5QTlJRzUxYkd3c0lIQWdQU0JiWFN3Z2RpQTlJRnRkT3dvZ0lDQWdJQ0FnSUhSb2FYTXVaRzl0Uld4bGJXVnVkQ0E5SUhRc0lIUm9hWE11WkdWaWRXY2dQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTm9aV05yVTJoaFpHVnlSWEp5YjNKek9pQWhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2IyNVRhR0ZrWlhKRmNuSnZjam9nYm5Wc2JBb2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVlYVjBiME5zWldGeUlEMGdJVEFzSUhSb2FYTXVZWFYwYjBOc1pXRnlRMjlzYjNJZ1BTQWhNQ3dnZEdocGN5NWhkWFJ2UTJ4bFlYSkVaWEIwYUNBOUlDRXdMQ0IwYUdsekxtRjFkRzlEYkdWaGNsTjBaVzVqYVd3Z1BTQWhNQ3dnZEdocGN5NXpiM0owVDJKcVpXTjBjeUE5SUNFd0xDQjBhR2x6TG1Oc2FYQndhVzVuVUd4aGJtVnpJRDBnVzEwc0lIUm9hWE11Ykc5allXeERiR2x3Y0dsdVowVnVZV0pzWldRZ1BTQWhNU3dnZEdocGN5NWZiM1YwY0hWMFEyOXNiM0pUY0dGalpTQTlJSFowTENCMGFHbHpMbDkxYzJWTVpXZGhZM2xNYVdkb2RITWdQU0FoTVN3Z2RHaHBjeTUwYjI1bFRXRndjR2x1WnlBOUlFNXVMQ0IwYUdsekxuUnZibVZOWVhCd2FXNW5SWGh3YjNOMWNtVWdQU0F4T3dvZ0lDQWdJQ0FnSUd4bGRDQjRJRDBnZEdocGN5d2dlU0E5SUNFeExDQmlJRDBnTUN3Z2R5QTlJREFzSUZJZ1BTQnVkV3hzTENCSklEMGdMVEVzSUUwZ1BTQnVkV3hzTENCVUlEMGdibVYzSUdwbExDQlBJRDBnYm1WM0lHcGxMQ0JaSUQwZ2JuVnNiQ3dnSkNBOUlHNWxkeUJ3WlNnd0tTd2dWU0E5SURBc0lIb2dQU0IwTG5kcFpIUm9MQ0J4SUQwZ2RDNW9aV2xuYUhRc0lFZ2dQU0F4TENCdVpTQTlJRzUxYkd3c0lGY2dQU0J1ZFd4c0xDQkxJRDBnYm1WM0lHcGxLREFzSURBc0lIb3NJSEVwTENCRUlEMGdibVYzSUdwbEtEQXNJREFzSUhvc0lIRXBMQ0JISUQwZ0lURXNJR2hsSUQwZ2JtVjNJRkJ6TENCbVpTQTlJQ0V4TENCZlpTQTlJQ0V4TENCM1pTQTlJRzUxYkd3c0lFVmxJRDBnYm1WM0lIcGxMQ0JVWlNBOUlHNWxkeUJhTENCWlpTQTlJRzVsZHlCQkxDQnBkQ0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdZbUZqYTJkeWIzVnVaRG9nYm5Wc2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnWm05bk9pQnVkV3hzTEFvZ0lDQWdJQ0FnSUNBZ0lDQmxiblpwY205dWJXVnVkRG9nYm5Wc2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnYjNabGNuSnBaR1ZOWVhSbGNtbGhiRG9nYm5Wc2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnYVhOVFkyVnVaVG9nSVRBS0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlFTmxLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VpQTlQVDBnYm5Wc2JDQS9JRWdnT2lBeE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnVENBOUlHNDdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdiMlVvUlN3Z1Rpa2dld29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUZZZ1BTQXdPeUJXSUR3Z1JTNXNaVzVuZEdnN0lGWXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1JpQTlJRVZiVmwwc0lHc2dQU0IwTG1kbGRFTnZiblJsZUhRb1Jpd2dUaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2F5QWhQVDBnYm5Wc2JDa2djbVYwZFhKdUlHczdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSeWVTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQkZJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVd4d2FHRTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWd2RHZzZJR2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdWdVkybHNPaUJ5TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVc1MGFXRnNhV0Z6T2lCdkxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISmxiWFZzZEdsd2JHbGxaRUZzY0doaE9pQmpMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEpsYzJWeWRtVkVjbUYzYVc1blFuVm1abVZ5T2lCc0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOTNaWEpRY21WbVpYSmxibU5sT2lCb0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptRnBiRWxtVFdGcWIzSlFaWEptYjNKdFlXNWpaVU5oZG1WaGREb2dkUW9nSUNBZ0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0luTmxkRUYwZEhKcFluVjBaU0lnYVc0Z2RDQW1KaUIwTG5ObGRFRjBkSEpwWW5WMFpTZ2laR0YwWVMxbGJtZHBibVVpTENCZ2RHaHlaV1V1YW5NZ2NpUjdTR045WUNrc0lIUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2lkMlZpWjJ4amIyNTBaWGgwYkc5emRDSXNJR05sTENBaE1Ta3NJSFF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpZDJWaVoyeGpiMjUwWlhoMGNtVnpkRzl5WldRaUxDQmhaU3dnSVRFcExDQjBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JbmRsWW1kc1kyOXVkR1Y0ZEdOeVpXRjBhVzl1WlhKeWIzSWlMQ0JuWlN3Z0lURXBMQ0JNSUQwOVBTQnVkV3hzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdUaUE5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWlkMlZpWjJ3eUlpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FpZDJWaVoyd2lMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNKbGVIQmxjbWx0Wlc1MFlXd3RkMlZpWjJ3aUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGd1YVhOWFpXSkhUREZTWlc1a1pYSmxjaUE5UFQwZ0lUQWdKaVlnVGk1emFHbG1kQ2dwTENCTUlEMGdiMlVvVGl3Z1JTa3NJRXdnUFQwOUlHNTFiR3dwSUhSb2NtOTNJRzlsS0U0cElEOGdibVYzSUVWeWNtOXlLQ0pGY25KdmNpQmpjbVZoZEdsdVp5QlhaV0pIVENCamIyNTBaWGgwSUhkcGRHZ2dlVzkxY2lCelpXeGxZM1JsWkNCaGRIUnlhV0oxZEdWekxpSXBJRG9nYm1WM0lFVnljbTl5S0NKRmNuSnZjaUJqY21WaGRHbHVaeUJYWldKSFRDQmpiMjUwWlhoMExpSXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dWdlppQlhaV0pIVEZKbGJtUmxjbWx1WjBOdmJuUmxlSFFnUENBaWRTSWdKaVlnVENCcGJuTjBZVzVqWlc5bUlGZGxZa2RNVW1WdVpHVnlhVzVuUTI5dWRHVjRkQ0FtSmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUZkbFlrZE1JREVnYzNWd2NHOXlkQ0IzWVhNZ1pHVndjbVZqWVhSbFpDQnBiaUJ5TVRVeklHRnVaQ0IzYVd4c0lHSmxJSEpsYlc5MlpXUWdhVzRnY2pFMk15NGlLU3dnVEM1blpYUlRhR0ZrWlhKUWNtVmphWE5wYjI1R2IzSnRZWFFnUFQwOUlIWnZhV1FnTUNBbUppQW9UQzVuWlhSVGFHRmtaWEpRY21WamFYTnBiMjVHYjNKdFlYUWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtRnVaMlZOYVc0NklERXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21GdVoyVk5ZWGc2SURFc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEpsWTJsemFXOXVPaUF4Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hGS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklDSWdLeUJGTG0xbGMzTmhaMlVwTENCRk93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnV0N3Z2FXVXNJRW9zSUZObExDQnRaU3dnZVdVc0lFNWxMQ0J4WlN3Z2NuUXNJRU1zSUZNc0lFSXNJR1ZsTENCcUxDQjBaU3dnVFdVc0lISmxMQ0JrWlN3Z1RHVXNJRnBsTENCelpTd2dKR1VzSUU5bExDQkpaVHNLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJTWlNncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnV0NBOUlHNWxkeUJvWHloTUtTd2dhV1VnUFNCdVpYY2djMThvVEN3Z1dDd2daU2tzSUZndWFXNXBkQ2hwWlNrc0lDUmxJRDBnYm1WM0lGWXdLRXdzSUZnc0lHbGxLU3dnU2lBOUlHNWxkeUJDTUNoTUxDQllMQ0JwWlNrc0lGTmxJRDBnYm1WM0lHWmZLRXdwTENCdFpTQTlJRzVsZHlCM01Dd2dlV1VnUFNCdVpYY2dlakFvVEN3Z1dDd2dTaXdnYldVc0lHbGxMQ0FrWlN3Z1UyVXBMQ0JPWlNBOUlHNWxkeUJoWHloNEtTd2djV1VnUFNCdVpYY2diRjhvZUNrc0lISjBJRDBnYm1WM0lHSndLRXdzSUdsbEtTd2dUMlVnUFNCdVpYY2dibDhvVEN3Z1dDd2djblFzSUdsbEtTd2dReUE5SUc1bGR5QjFYeWhNTENCeWRDd2dVMlVzSUU5bEtTd2dVeUE5SUc1bGR5QmZYeWhNTENCRExDQnlkQ3dnVTJVcExDQk1aU0E5SUc1bGR5Qm5YeWhNTENCcFpTd2dlV1VwTENCTlpTQTlJRzVsZHlCeVh5aHRaU2tzSUVJZ1BTQnVaWGNnVkRBb2VDd2dUbVVzSUhGbExDQllMQ0JwWlN3Z1QyVXNJRTFsS1N3Z1pXVWdQU0J1WlhjZ1NEQW9lQ3dnYldVcExDQnFJRDBnYm1WM0lGSXdMQ0IwWlNBOUlHNWxkeUJFTUNoWUxDQnBaU2tzSUdSbElEMGdibVYzSUhSZktIZ3NJRTVsTENCeFpTd2dTaXdnVXl3Z1pDd2dZeWtzSUhKbElEMGdibVYzSUVZd0tIZ3NJRk1zSUdsbEtTd2dTV1VnUFNCdVpYY2dSekFvVEN3Z1UyVXNJR2xsTENCS0tTd2dXbVVnUFNCdVpYY2dhVjhvVEN3Z1dDd2dVMlVzSUdsbEtTd2djMlVnUFNCdVpYY2daRjhvVEN3Z1dDd2dVMlVzSUdsbEtTd2dVMlV1Y0hKdlozSmhiWE1nUFNCQ0xuQnliMmR5WVcxekxDQjRMbU5oY0dGaWFXeHBkR2xsY3lBOUlHbGxMQ0I0TG1WNGRHVnVjMmx2Ym5NZ1BTQllMQ0I0TG5CeWIzQmxjblJwWlhNZ1BTQnRaU3dnZUM1eVpXNWtaWEpNYVhOMGN5QTlJR29zSUhndWMyaGhaRzkzVFdGd0lEMGdjbVVzSUhndWMzUmhkR1VnUFNCS0xDQjRMbWx1Wm04Z1BTQlRaVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnVW1Vb0tUc0tJQ0FnSUNBZ0lDQnNaWFFnVUNBOUlHNWxkeUJCYnloNExDQk1LVHNLSUNBZ0lDQWdJQ0IwYUdsekxuaHlJRDBnVUN3Z2RHaHBjeTVuWlhSRGIyNTBaWGgwSUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJNT3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11WjJWMFEyOXVkR1Y0ZEVGMGRISnBZblYwWlhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUV3dVoyVjBRMjl1ZEdWNGRFRjBkSEpwWW5WMFpYTW9LVHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbVp2Y21ObFEyOXVkR1Y0ZEV4dmMzTWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVVZ1BTQllMbWRsZENnaVYwVkNSMHhmYkc5elpWOWpiMjUwWlhoMElpazdDaUFnSUNBZ0lDQWdJQ0FnSUVVZ0ppWWdSUzVzYjNObFEyOXVkR1Y0ZENncE93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVptOXlZMlZEYjI1MFpYaDBVbVZ6ZEc5eVpTQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUlNBOUlGZ3VaMlYwS0NKWFJVSkhURjlzYjNObFgyTnZiblJsZUhRaUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnUlNBbUppQkZMbkpsYzNSdmNtVkRiMjUwWlhoMEtDazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NW5aWFJRYVhobGJGSmhkR2x2SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJJT3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11YzJWMFVHbDRaV3hTWVhScGJ5QTlJR1oxYm1OMGFXOXVLRVVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdSU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaElJRDBnUlN3Z2RHaHBjeTV6WlhSVGFYcGxLSG9zSUhFc0lDRXhLU2s3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVuWlhSVGFYcGxJRDBnWm5WdVkzUnBiMjRvUlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdSUzV6WlhRb2Vpd2djU2s3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTV6WlhSVGFYcGxJRDBnWm5WdVkzUnBiMjRvUlN3Z1Rpd2dWaUE5SUNFd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaFFMbWx6VUhKbGMyVnVkR2x1WnlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCRFlXNG5kQ0JqYUdGdVoyVWdjMmw2WlNCM2FHbHNaU0JXVWlCa1pYWnBZMlVnYVhNZ2NISmxjMlZ1ZEdsdVp5NGlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjZJRDBnUlN3Z2NTQTlJRTRzSUhRdWQybGtkR2dnUFNCTllYUm9MbVpzYjI5eUtFVWdLaUJJS1N3Z2RDNW9aV2xuYUhRZ1BTQk5ZWFJvTG1ac2IyOXlLRTRnS2lCSUtTd2dWaUE5UFQwZ0lUQWdKaVlnS0hRdWMzUjViR1V1ZDJsa2RHZ2dQU0JGSUNzZ0luQjRJaXdnZEM1emRIbHNaUzVvWldsbmFIUWdQU0JPSUNzZ0luQjRJaWtzSUhSb2FYTXVjMlYwVm1sbGQzQnZjblFvTUN3Z01Dd2dSU3dnVGlrN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1blpYUkVjbUYzYVc1blFuVm1abVZ5VTJsNlpTQTlJR1oxYm1OMGFXOXVLRVVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFVXVjMlYwS0hvZ0tpQklMQ0J4SUNvZ1NDa3VabXh2YjNJb0tUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuTmxkRVJ5WVhkcGJtZENkV1ptWlhKVGFYcGxJRDBnWm5WdVkzUnBiMjRvUlN3Z1Rpd2dWaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjZJRDBnUlN3Z2NTQTlJRTRzSUVnZ1BTQldMQ0IwTG5kcFpIUm9JRDBnVFdGMGFDNW1iRzl2Y2loRklDb2dWaWtzSUhRdWFHVnBaMmgwSUQwZ1RXRjBhQzVtYkc5dmNpaE9JQ29nVmlrc0lIUm9hWE11YzJWMFZtbGxkM0J2Y25Rb01Dd2dNQ3dnUlN3Z1RpazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NW5aWFJEZFhKeVpXNTBWbWxsZDNCdmNuUWdQU0JtZFc1amRHbHZiaWhGS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkZMbU52Y0hrb1ZDazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NW5aWFJXYVdWM2NHOXlkQ0E5SUdaMWJtTjBhVzl1S0VVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRVV1WTI5d2VTaExLVHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbk5sZEZacFpYZHdiM0owSUQwZ1puVnVZM1JwYjI0b1JTd2dUaXdnVml3Z1Jpa2dld29nSUNBZ0lDQWdJQ0FnSUNCRkxtbHpWbVZqZEc5eU5DQS9JRXN1YzJWMEtFVXVlQ3dnUlM1NUxDQkZMbm9zSUVVdWR5a2dPaUJMTG5ObGRDaEZMQ0JPTENCV0xDQkdLU3dnU2k1MmFXVjNjRzl5ZENoVUxtTnZjSGtvU3lrdWJYVnNkR2x3YkhsVFkyRnNZWElvU0NrdVpteHZiM0lvS1NrN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1blpYUlRZMmx6YzI5eUlEMGdablZ1WTNScGIyNG9SU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1JTNWpiM0I1S0VRcE93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdWMyVjBVMk5wYzNOdmNpQTlJR1oxYm1OMGFXOXVLRVVzSUU0c0lGWXNJRVlwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdSUzVwYzFabFkzUnZjalFnUHlCRUxuTmxkQ2hGTG5nc0lFVXVlU3dnUlM1NkxDQkZMbmNwSURvZ1JDNXpaWFFvUlN3Z1Rpd2dWaXdnUmlrc0lFb3VjMk5wYzNOdmNpaFBMbU52Y0hrb1JDa3ViWFZzZEdsd2JIbFRZMkZzWVhJb1NDa3VabXh2YjNJb0tTazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NW5aWFJUWTJsemMyOXlWR1Z6ZENBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUnpzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG5ObGRGTmphWE56YjNKVVpYTjBJRDBnWm5WdVkzUnBiMjRvUlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JLTG5ObGRGTmphWE56YjNKVVpYTjBLRWNnUFNCRktUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuTmxkRTl3WVhGMVpWTnZjblFnUFNCbWRXNWpkR2x2YmloRktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUc1bElEMGdSVHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbk5sZEZSeVlXNXpjR0Z5Wlc1MFUyOXlkQ0E5SUdaMWJtTjBhVzl1S0VVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnVnlBOUlFVTdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NW5aWFJEYkdWaGNrTnZiRzl5SUQwZ1puVnVZM1JwYjI0b1JTa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUlM1amIzQjVLR1JsTG1kbGRFTnNaV0Z5UTI5c2IzSW9LU2s3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTV6WlhSRGJHVmhja052Ykc5eUlEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmxMbk5sZEVOc1pXRnlRMjlzYjNJdVlYQndiSGtvWkdVc0lHRnlaM1Z0Wlc1MGN5azdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NW5aWFJEYkdWaGNrRnNjR2hoSUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJrWlM1blpYUkRiR1ZoY2tGc2NHaGhLQ2s3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTV6WlhSRGJHVmhja0ZzY0doaElEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmxMbk5sZEVOc1pXRnlRV3h3YUdFdVlYQndiSGtvWkdVc0lHRnlaM1Z0Wlc1MGN5azdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NWpiR1ZoY2lBOUlHWjFibU4wYVc5dUtFVWdQU0FoTUN3Z1RpQTlJQ0V3TENCV0lEMGdJVEFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVZZ1BTQXdPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9SU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHc2dQU0FoTVRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaFNJQ0U5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGhsSUQwZ1VpNTBaWGgwZFhKbExtWnZjbTFoZERzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJJRDBnZUdVZ1BUMDlJRjlrSUh4OElIaGxJRDA5UFNCblpDQjhmQ0I0WlNBOVBUMGdiV1E3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2F5a2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjRaU0E5SUZJdWRHVjRkSFZ5WlM1MGVYQmxMQ0JCWlNBOUlIaGxJRDA5UFNCUGJpQjhmQ0I0WlNBOVBUMGdURzRnZkh3Z2VHVWdQVDA5SUZkaklIeDhJSGhsSUQwOVBTQnBhU0I4ZkNCNFpTQTlQVDBnWm1RZ2ZId2dlR1VnUFQwOUlIQmtMQ0JWWlNBOUlHUmxMbWRsZEVOc1pXRnlRMjlzYjNJb0tTd2dSR1VnUFNCa1pTNW5aWFJEYkdWaGNrRnNjR2hoS0Nrc0lGZGxJRDBnVldVdWNpd2dVR1VnUFNCVlpTNW5MQ0JXWlNBOUlGVmxMbUk3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FXVWdQeUFvWmxzd1hTQTlJRmRsTENCbVd6RmRJRDBnVUdVc0lHWmJNbDBnUFNCV1pTd2dabHN6WFNBOUlFUmxMQ0JNTG1Oc1pXRnlRblZtWm1WeWRXbDJLRXd1UTA5TVQxSXNJREFzSUdZcEtTQTZJQ2h0V3pCZElEMGdWMlVzSUcxYk1WMGdQU0JRWlN3Z2JWc3lYU0E5SUZabExDQnRXek5kSUQwZ1JHVXNJRXd1WTJ4bFlYSkNkV1ptWlhKcGRpaE1Ma05QVEU5U0xDQXdMQ0J0S1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnUmlCOFBTQk1Ma05QVEU5U1gwSlZSa1pGVWw5Q1NWUTdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdUaUFtSmlBb1JpQjhQU0JNTGtSRlVGUklYMEpWUmtaRlVsOUNTVlFwTENCV0lDWW1JQ2hHSUh3OUlFd3VVMVJGVGtOSlRGOUNWVVpHUlZKZlFrbFVLU3dnVEM1amJHVmhjaWhHS1RzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1Oc1pXRnlRMjlzYjNJZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYkdWaGNpZ2hNQ3dnSVRFc0lDRXhLVHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbU5zWldGeVJHVndkR2dnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiR1ZoY2lnaE1Td2dJVEFzSUNFeEtUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxtTnNaV0Z5VTNSbGJtTnBiQ0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnNaV0Z5S0NFeExDQWhNU3dnSVRBcE93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVpHbHpjRzl6WlNBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCMExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9JbmRsWW1kc1kyOXVkR1Y0ZEd4dmMzUWlMQ0JqWlN3Z0lURXBMQ0IwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0luZGxZbWRzWTI5dWRHVjRkSEpsYzNSdmNtVmtJaXdnWVdVc0lDRXhLU3dnZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDSjNaV0puYkdOdmJuUmxlSFJqY21WaGRHbHZibVZ5Y205eUlpd2daMlVzSUNFeEtTd2dhaTVrYVhOd2IzTmxLQ2tzSUhSbExtUnBjM0J2YzJVb0tTd2diV1V1WkdsemNHOXpaU2dwTENCT1pTNWthWE53YjNObEtDa3NJSEZsTG1ScGMzQnZjMlVvS1N3Z1V5NWthWE53YjNObEtDa3NJRTlsTG1ScGMzQnZjMlVvS1N3Z1NXVXVaR2x6Y0c5elpTZ3BMQ0JDTG1ScGMzQnZjMlVvS1N3Z1VDNWthWE53YjNObEtDa3NJRkF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnaWMyVnpjMmx2Ym5OMFlYSjBJaXdnZEhRcExDQlFMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSW5ObGMzTnBiMjVsYm1RaUxDQjBiaWtzSUhkbElDWW1JQ2gzWlM1a2FYTndiM05sS0Nrc0lIZGxJRDBnYm5Wc2JDa3NJRkowTG5OMGIzQW9LVHNLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdObEtFVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1JTNXdjbVYyWlc1MFJHVm1ZWFZzZENncExDQmpiMjV6YjJ4bExteHZaeWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ1EyOXVkR1Y0ZENCTWIzTjBMaUlwTENCNUlEMGdJVEE3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdGbEtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nUTI5dWRHVjRkQ0JTWlhOMGIzSmxaQzRpS1N3Z2VTQTlJQ0V4T3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUlNBOUlGTmxMbUYxZEc5U1pYTmxkQ3dnVGlBOUlISmxMbVZ1WVdKc1pXUXNJRllnUFNCeVpTNWhkWFJ2VlhCa1lYUmxMQ0JHSUQwZ2NtVXVibVZsWkhOVmNHUmhkR1VzSUdzZ1BTQnlaUzUwZVhCbE93b2dJQ0FnSUNBZ0lDQWdJQ0JTWlNncExDQlRaUzVoZFhSdlVtVnpaWFFnUFNCRkxDQnlaUzVsYm1GaWJHVmtJRDBnVGl3Z2NtVXVZWFYwYjFWd1pHRjBaU0E5SUZZc0lISmxMbTVsWldSelZYQmtZWFJsSUQwZ1Jpd2djbVV1ZEhsd1pTQTlJR3M3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdkbEtFVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ1FTQlhaV0pIVENCamIyNTBaWGgwSUdOdmRXeGtJRzV2ZENCaVpTQmpjbVZoZEdWa0xpQlNaV0Z6YjI0NklDSXNJRVV1YzNSaGRIVnpUV1Z6YzJGblpTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSFZsS0VVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFNGdQU0JGTG5SaGNtZGxkRHNLSUNBZ0lDQWdJQ0FnSUNBZ1RpNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ0prYVhOd2IzTmxJaXdnZFdVcExDQlJLRTRwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCUktFVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1ltVW9SU2tzSUcxbExuSmxiVzkyWlNoRktUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdZbVVvUlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1RpQTlJRzFsTG1kbGRDaEZLUzV3Y205bmNtRnRjenNLSUNBZ0lDQWdJQ0FnSUNBZ1RpQWhQVDBnZG05cFpDQXdJQ1ltSUNoT0xtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1Zpa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRaTV5Wld4bFlYTmxVSEp2WjNKaGJTaFdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTa3NJRVV1YVhOVGFHRmtaWEpOWVhSbGNtbGhiQ0FtSmlCQ0xuSmxiR1ZoYzJWVGFHRmtaWEpEWVdOb1pTaEZLU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ1WkdWeVFuVm1abVZ5UkdseVpXTjBJRDBnWm5WdVkzUnBiMjRvUlN3Z1Rpd2dWaXdnUml3Z2F5d2dlR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdUaUE5UFQwZ2JuVnNiQ0FtSmlBb1RpQTlJR2wwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVGbElEMGdheTVwYzAxbGMyZ2dKaVlnYXk1dFlYUnlhWGhYYjNKc1pDNWtaWFJsY20xcGJtRnVkQ2dwSUR3Z01Dd2dWV1VnUFNCR1pDaEZMQ0JPTENCV0xDQkdMQ0JyS1RzS0lDQWdJQ0FnSUNBZ0lDQWdTaTV6WlhSTllYUmxjbWxoYkNoR0xDQkJaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JFWlNBOUlGWXVhVzVrWlhnc0lGZGxJRDBnTVRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VZdWQybHlaV1p5WVcxbElEMDlQU0FoTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRVJsSUQwZ1F5NW5aWFJYYVhKbFpuSmhiV1ZCZEhSeWFXSjFkR1VvVmlrc0lFUmxJRDA5UFNCMmIybGtJREFwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRmRsSUQwZ01qc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVUdVZ1BTQldMbVJ5WVhkU1lXNW5aU3dnVm1VZ1BTQldMbUYwZEhKcFluVjBaWE11Y0c5emFYUnBiMjRzSUdGMElEMGdVR1V1YzNSaGNuUWdLaUJYWlN3Z2JIUWdQU0FvVUdVdWMzUmhjblFnS3lCUVpTNWpiM1Z1ZENrZ0tpQlhaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2VHVWdJVDA5SUc1MWJHd2dKaVlnS0dGMElEMGdUV0YwYUM1dFlYZ29ZWFFzSUhobExuTjBZWEowSUNvZ1YyVXBMQ0JzZENBOUlFMWhkR2d1YldsdUtHeDBMQ0FvZUdVdWMzUmhjblFnS3lCNFpTNWpiM1Z1ZENrZ0tpQlhaU2twTENCRVpTQWhQVDBnYm5Wc2JDQS9JQ2hoZENBOUlFMWhkR2d1YldGNEtHRjBMQ0F3S1N3Z2JIUWdQU0JOWVhSb0xtMXBiaWhzZEN3Z1JHVXVZMjkxYm5RcEtTQTZJRlpsSUNFOUlHNTFiR3dnSmlZZ0tHRjBJRDBnVFdGMGFDNXRZWGdvWVhRc0lEQXBMQ0JzZENBOUlFMWhkR2d1YldsdUtHeDBMQ0JXWlM1amIzVnVkQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnU0hRZ1BTQnNkQ0F0SUdGME93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1NIUWdQQ0F3SUh4OElFaDBJRDA5UFNBeElDOGdNQ2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNCUFpTNXpaWFIxY0NockxDQkdMQ0JWWlN3Z1Zpd2dSR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWVc0c0lIVjBJRDBnV21VN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRVpTQWhQVDBnYm5Wc2JDQW1KaUFvWVc0Z1BTQnlkQzVuWlhRb1JHVXBMQ0IxZENBOUlITmxMQ0IxZEM1elpYUkpibVJsZUNoaGJpa3BMQ0JyTG1selRXVnphQ2tnUmk1M2FYSmxabkpoYldVZ1BUMDlJQ0V3SUQ4Z0tFb3VjMlYwVEdsdVpWZHBaSFJvS0VZdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0lDb2dRMlVvS1Nrc0lIVjBMbk5sZEUxdlpHVW9UQzVNU1U1RlV5a3BJRG9nZFhRdWMyVjBUVzlrWlNoTUxsUlNTVUZPUjB4RlV5azdDaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0dzdWFYTk1hVzVsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdXR1VnUFNCR0xteHBibVYzYVdSMGFEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGaGxJRDA5UFNCMmIybGtJREFnSmlZZ0tGaGxJRDBnTVNrc0lFb3VjMlYwVEdsdVpWZHBaSFJvS0ZobElDb2dRMlVvS1Nrc0lHc3VhWE5NYVc1bFUyVm5iV1Z1ZEhNZ1B5QjFkQzV6WlhSTmIyUmxLRXd1VEVsT1JWTXBJRG9nYXk1cGMweHBibVZNYjI5d0lEOGdkWFF1YzJWMFRXOWtaU2hNTGt4SlRrVmZURTlQVUNrZ09pQjFkQzV6WlhSTmIyUmxLRXd1VEVsT1JWOVRWRkpKVUNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnJMbWx6VUc5cGJuUnpJRDhnZFhRdWMyVjBUVzlrWlNoTUxsQlBTVTVVVXlrZ09pQnJMbWx6VTNCeWFYUmxJQ1ltSUhWMExuTmxkRTF2WkdVb1RDNVVVa2xCVGtkTVJWTXBPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9heTVwYzBsdWMzUmhibU5sWkUxbGMyZ3BJSFYwTG5KbGJtUmxja2x1YzNSaGJtTmxjeWhoZEN3Z1NIUXNJR3N1WTI5MWJuUXBPd29nSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoV0xtbHpTVzV6ZEdGdVkyVmtRblZtWm1WeVIyVnZiV1YwY25rcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JZWlNBOUlGWXVYMjFoZUVsdWMzUmhibU5sUTI5MWJuUWdJVDA5SUhadmFXUWdNQ0EvSUZZdVgyMWhlRWx1YzNSaGJtTmxRMjkxYm5RZ09pQXhJQzhnTUN3Z1UyRWdQU0JOWVhSb0xtMXBiaWhXTG1sdWMzUmhibU5sUTI5MWJuUXNJRmhsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWMExuSmxibVJsY2tsdWMzUmhibU5sY3loaGRDd2dTSFFzSUZOaEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSFYwTG5KbGJtUmxjaWhoZEN3Z1NIUXBPd29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVZMjl0Y0dsc1pTQTlJR1oxYm1OMGFXOXVLRVVzSUU0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnVmloR0xDQnJMQ0I0WlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JpNTBjbUZ1YzNCaGNtVnVkQ0E5UFQwZ0lUQWdKaVlnUmk1emFXUmxJRDA5UFNCbmJpQW1KaUJHTG1admNtTmxVMmx1WjJ4bFVHRnpjeUE5UFQwZ0lURWdQeUFvUmk1emFXUmxJRDBnUm5Rc0lFWXVibVZsWkhOVmNHUmhkR1VnUFNBaE1Dd2dTSE1vUml3Z2F5d2dlR1VwTENCR0xuTnBaR1VnUFNCQ2Jpd2dSaTV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0JJY3loR0xDQnJMQ0I0WlNrc0lFWXVjMmxrWlNBOUlHZHVLU0E2SUVoektFWXNJR3NzSUhobEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQm5JRDBnZEdVdVoyVjBLRVVwTENCbkxtbHVhWFFvS1N3Z2RpNXdkWE5vS0djcExDQkZMblJ5WVhabGNuTmxWbWx6YVdKc1pTaG1kVzVqZEdsdmJpaEdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JHTG1selRHbG5hSFFnSmlZZ1JpNXNZWGxsY25NdWRHVnpkQ2hPTG14aGVXVnljeWtnSmlZZ0tHY3VjSFZ6YUV4cFoyaDBLRVlwTENCR0xtTmhjM1JUYUdGa2IzY2dKaVlnWnk1d2RYTm9VMmhoWkc5M0tFWXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTa3NJR2N1YzJWMGRYQk1hV2RvZEhNb2VDNWZkWE5sVEdWbllXTjVUR2xuYUhSektTd2dSUzUwY21GMlpYSnpaU2htZFc1amRHbHZiaWhHS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdheUE5SUVZdWJXRjBaWEpwWVd3N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9heWtnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYXlrcElHWnZjaWhzWlhRZ2VHVWdQU0F3T3lCNFpTQThJR3N1YkdWdVozUm9PeUI0WlNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1FXVWdQU0JyVzNobFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JXS0VGbExDQkZMQ0JHS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdWaWhyTENCRkxDQkdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTa3NJSFl1Y0c5d0tDa3NJR2NnUFNCdWRXeHNPd29nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnYkdWMElFWmxJRDBnYm5Wc2JEc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQkJkQ2hGS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRVpsSUNZbUlFWmxLRVVwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCMGRDZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1VuUXVjM1J2Y0NncE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQjBiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdVblF1YzNSaGNuUW9LVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYkdWMElGSjBJRDBnYm1WM0lFVmtPd29nSUNBZ0lDQWdJRkowTG5ObGRFRnVhVzFoZEdsdmJreHZiM0FvUVhRcExDQjBlWEJsYjJZZ2MyVnNaaUE4SUNKMUlpQW1KaUJTZEM1elpYUkRiMjUwWlhoMEtITmxiR1lwTENCMGFHbHpMbk5sZEVGdWFXMWhkR2x2Ymt4dmIzQWdQU0JtZFc1amRHbHZiaWhGS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRVpsSUQwZ1JTd2dVQzV6WlhSQmJtbHRZWFJwYjI1TWIyOXdLRVVwTENCRklEMDlQU0J1ZFd4c0lEOGdVblF1YzNSdmNDZ3BJRG9nVW5RdWMzUmhjblFvS1RzS0lDQWdJQ0FnSUNCOUxDQlFMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9Jbk5sYzNOcGIyNXpkR0Z5ZENJc0lIUjBLU3dnVUM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKelpYTnphVzl1Wlc1a0lpd2dkRzRwTENCMGFHbHpMbkpsYm1SbGNpQTlJR1oxYm1OMGFXOXVLRVVzSUU0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFNGdJVDA5SUhadmFXUWdNQ0FtSmlCT0xtbHpRMkZ0WlhKaElDRTlQU0FoTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2k1eVpXNWtaWEk2SUdOaGJXVnlZU0JwY3lCdWIzUWdZVzRnYVc1emRHRnVZMlVnYjJZZ1ZFaFNSVVV1UTJGdFpYSmhMaUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoNUlEMDlQU0FoTUNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQkZMbTFoZEhKcGVGZHZjbXhrUVhWMGIxVndaR0YwWlNBOVBUMGdJVEFnSmlZZ1JTNTFjR1JoZEdWTllYUnlhWGhYYjNKc1pDZ3BMQ0JPTG5CaGNtVnVkQ0E5UFQwZ2JuVnNiQ0FtSmlCT0xtMWhkSEpwZUZkdmNteGtRWFYwYjFWd1pHRjBaU0E5UFQwZ0lUQWdKaVlnVGk1MWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNncExDQlFMbVZ1WVdKc1pXUWdQVDA5SUNFd0lDWW1JRkF1YVhOUWNtVnpaVzUwYVc1bklEMDlQU0FoTUNBbUppQW9VQzVqWVcxbGNtRkJkWFJ2VlhCa1lYUmxJRDA5UFNBaE1DQW1KaUJRTG5Wd1pHRjBaVU5oYldWeVlTaE9LU3dnVGlBOUlGQXVaMlYwUTJGdFpYSmhLQ2twTENCRkxtbHpVMk5sYm1VZ1BUMDlJQ0V3SUNZbUlFVXViMjVDWldadmNtVlNaVzVrWlhJb2VDd2dSU3dnVGl3Z1Vpa3NJR2NnUFNCMFpTNW5aWFFvUlN3Z2RpNXNaVzVuZEdncExDQm5MbWx1YVhRb0tTd2dkaTV3ZFhOb0tHY3BMQ0JGWlM1dGRXeDBhWEJzZVUxaGRISnBZMlZ6S0U0dWNISnZhbVZqZEdsdmJrMWhkSEpwZUN3Z1RpNXRZWFJ5YVhoWGIzSnNaRWx1ZG1WeWMyVXBMQ0JvWlM1elpYUkdjbTl0VUhKdmFtVmpkR2x2YmsxaGRISnBlQ2hGWlNrc0lGOWxJRDBnZEdocGN5NXNiMk5oYkVOc2FYQndhVzVuUlc1aFlteGxaQ3dnWm1VZ1BTQk5aUzVwYm1sMEtIUm9hWE11WTJ4cGNIQnBibWRRYkdGdVpYTXNJRjlsS1N3Z1h5QTlJR291WjJWMEtFVXNJSEF1YkdWdVozUm9LU3dnWHk1cGJtbDBLQ2tzSUhBdWNIVnphQ2hmS1N3Z2FtTW9SU3dnVGl3Z01Dd2dlQzV6YjNKMFQySnFaV04wY3lrc0lGOHVabWx1YVhOb0tDa3NJSGd1YzI5eWRFOWlhbVZqZEhNZ1BUMDlJQ0V3SUNZbUlGOHVjMjl5ZENodVpTd2dWeWtzSUhSb2FYTXVhVzVtYnk1eVpXNWtaWEl1Wm5KaGJXVXJLeXdnWm1VZ1BUMDlJQ0V3SUNZbUlFMWxMbUpsWjJsdVUyaGhaRzkzY3lncE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ZpQTlJR2N1YzNSaGRHVXVjMmhoWkc5M2MwRnljbUY1T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21VdWNtVnVaR1Z5S0ZZc0lFVXNJRTRwTENCbVpTQTlQVDBnSVRBZ0ppWWdUV1V1Wlc1a1UyaGhaRzkzY3lncExDQjBhR2x6TG1sdVptOHVZWFYwYjFKbGMyVjBJRDA5UFNBaE1DQW1KaUIwYUdsekxtbHVabTh1Y21WelpYUW9LU3dnWkdVdWNtVnVaR1Z5S0Y4c0lFVXBMQ0JuTG5ObGRIVndUR2xuYUhSektIZ3VYM1Z6WlV4bFoyRmplVXhwWjJoMGN5a3NJRTR1YVhOQmNuSmhlVU5oYldWeVlTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVZZ1BTQk9MbU5oYldWeVlYTTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHc2dQU0F3TENCNFpTQTlJRVl1YkdWdVozUm9PeUJySUR3Z2VHVTdJR3NyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVGbElEMGdSbHRyWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiQ2hmTENCRkxDQkJaU3dnUVdVdWRtbGxkM0J2Y25RcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdaV3dvWHl3Z1JTd2dUaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lGSWdJVDA5SUc1MWJHd2dKaVlnS0hsbExuVndaR0YwWlUxMWJIUnBjMkZ0Y0d4bFVtVnVaR1Z5VkdGeVoyVjBLRklwTENCNVpTNTFjR1JoZEdWU1pXNWtaWEpVWVhKblpYUk5hWEJ0WVhBb1Vpa3BMQ0JGTG1selUyTmxibVVnUFQwOUlDRXdJQ1ltSUVVdWIyNUJablJsY2xKbGJtUmxjaWg0TENCRkxDQk9LU3dnVDJVdWNtVnpaWFJFWldaaGRXeDBVM1JoZEdVb0tTd2dTU0E5SUMweExDQk5JRDBnYm5Wc2JDd2dkaTV3YjNBb0tTd2dkaTVzWlc1bmRHZ2dQaUF3SUQ4Z1p5QTlJSFpiZGk1c1pXNW5kR2dnTFNBeFhTQTZJR2NnUFNCdWRXeHNMQ0J3TG5CdmNDZ3BMQ0J3TG14bGJtZDBhQ0ErSURBZ1B5QmZJRDBnY0Z0d0xteGxibWQwYUNBdElERmRJRG9nWHlBOUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCcVl5aEZMQ0JPTENCV0xDQkdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hGTG5acGMybGliR1VnUFQwOUlDRXhLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaEZMbXhoZVdWeWN5NTBaWE4wS0U0dWJHRjVaWEp6S1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRVV1YVhOSGNtOTFjQ2tnVmlBOUlFVXVjbVZ1WkdWeVQzSmtaWEk3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hGTG1selRFOUVLU0JGTG1GMWRHOVZjR1JoZEdVZ1BUMDlJQ0V3SUNZbUlFVXVkWEJrWVhSbEtFNHBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9SUzVwYzB4cFoyaDBLU0JuTG5CMWMyaE1hV2RvZENoRktTd2dSUzVqWVhOMFUyaGhaRzkzSUNZbUlHY3VjSFZ6YUZOb1lXUnZkeWhGS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0VVdWFYTlRjSEpwZEdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lVVXVabkoxYzNSMWJVTjFiR3hsWkNCOGZDQm9aUzVwYm5SbGNuTmxZM1J6VTNCeWFYUmxLRVVwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVZZ0ppWWdXV1V1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtFVXViV0YwY21sNFYyOXliR1FwTG1Gd2NHeDVUV0YwY21sNE5DaEZaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCQlpTQTlJRk11ZFhCa1lYUmxLRVVwTENCVlpTQTlJRVV1YldGMFpYSnBZV3c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlZsTG5acGMybGliR1VnSmlZZ1h5NXdkWE5vS0VVc0lFRmxMQ0JWWlN3Z1Zpd2dXV1V1ZWl3Z2JuVnNiQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ29SUzVwYzAxbGMyZ2dmSHdnUlM1cGMweHBibVVnZkh3Z1JTNXBjMUJ2YVc1MGN5a2dKaVlnS0NGRkxtWnlkWE4wZFcxRGRXeHNaV1FnZkh3Z2FHVXVhVzUwWlhKelpXTjBjMDlpYW1WamRDaEZLU2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUVdVZ1BTQlRMblZ3WkdGMFpTaEZLU3dnVldVZ1BTQkZMbTFoZEdWeWFXRnNPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaEdJQ1ltSUNoRkxtSnZkVzVrYVc1blUzQm9aWEpsSUNFOVBTQjJiMmxrSURBZ1B5QW9SUzVpYjNWdVpHbHVaMU53YUdWeVpTQTlQVDBnYm5Wc2JDQW1KaUJGTG1OdmJYQjFkR1ZDYjNWdVpHbHVaMU53YUdWeVpTZ3BMQ0JaWlM1amIzQjVLRVV1WW05MWJtUnBibWRUY0dobGNtVXVZMlZ1ZEdWeUtTa2dPaUFvUVdVdVltOTFibVJwYm1kVGNHaGxjbVVnUFQwOUlHNTFiR3dnSmlZZ1FXVXVZMjl0Y0hWMFpVSnZkVzVrYVc1blUzQm9aWEpsS0Nrc0lGbGxMbU52Y0hrb1FXVXVZbTkxYm1ScGJtZFRjR2hsY21VdVkyVnVkR1Z5S1Nrc0lGbGxMbUZ3Y0d4NVRXRjBjbWw0TkNoRkxtMWhkSEpwZUZkdmNteGtLUzVoY0hCc2VVMWhkSEpwZURRb1JXVXBLU3dnUVhKeVlYa3VhWE5CY25KaGVTaFZaU2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFUmxJRDBnUVdVdVozSnZkWEJ6T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRmRsSUQwZ01Dd2dVR1VnUFNCRVpTNXNaVzVuZEdnN0lGZGxJRHdnVUdVN0lGZGxLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRlpsSUQwZ1JHVmJWMlZkTENCaGRDQTlJRlZsVzFabExtMWhkR1Z5YVdGc1NXNWtaWGhkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYUWdKaVlnWVhRdWRtbHphV0pzWlNBbUppQmZMbkIxYzJnb1JTd2dRV1VzSUdGMExDQldMQ0JaWlM1NkxDQldaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnVldVdWRtbHphV0pzWlNBbUppQmZMbkIxYzJnb1JTd2dRV1VzSUZWbExDQldMQ0JaWlM1NkxDQnVkV3hzS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdlR1VnUFNCRkxtTm9hV3hrY21WdU93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRUZsSUQwZ01Dd2dWV1VnUFNCNFpTNXNaVzVuZEdnN0lFRmxJRHdnVldVN0lFRmxLeXNwYW1Nb2VHVmJRV1ZkTENCT0xDQldMQ0JHS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1pXd29SU3dnVGl3Z1Zpd2dSaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYXlBOUlFVXViM0JoY1hWbExDQjRaU0E5SUVVdWRISmhibk50YVhOemFYWmxMQ0JCWlNBOUlFVXVkSEpoYm5Od1lYSmxiblE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHY3VjMlYwZFhCTWFXZG9kSE5XYVdWM0tGWXBMQ0JtWlNBOVBUMGdJVEFnSmlZZ1RXVXVjMlYwUjJ4dlltRnNVM1JoZEdVb2VDNWpiR2x3Y0dsdVoxQnNZVzVsY3l3Z1Zpa3NJSGhsTG14bGJtZDBhQ0ErSURBZ0ppWWdUMlFvYXl3Z2VHVXNJRTRzSUZZcExDQkdJQ1ltSUVvdWRtbGxkM0J2Y25Rb1ZDNWpiM0I1S0VZcEtTd2dheTVzWlc1bmRHZ2dQaUF3SUNZbUlHdHpLR3NzSUU0c0lGWXBMQ0I0WlM1c1pXNW5kR2dnUGlBd0lDWW1JR3R6S0hobExDQk9MQ0JXS1N3Z1FXVXViR1Z1WjNSb0lENGdNQ0FtSmlCcmN5aEJaU3dnVGl3Z1Zpa3NJRW91WW5WbVptVnljeTVrWlhCMGFDNXpaWFJVWlhOMEtDRXdLU3dnU2k1aWRXWm1aWEp6TG1SbGNIUm9Mbk5sZEUxaGMyc29JVEFwTENCS0xtSjFabVpsY25NdVkyOXNiM0l1YzJWMFRXRnpheWdoTUNrc0lFb3VjMlYwVUc5c2VXZHZiazltWm5ObGRDZ2hNU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUU5a0tFVXNJRTRzSUZZc0lFWXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR3NnUFNCcFpTNXBjMWRsWWtkTU1qc0tJQ0FnSUNBZ0lDQWdJQ0FnZDJVZ1BUMDlJRzUxYkd3Z0ppWWdLSGRsSUQwZ2JtVjNJSEYwS0RFc0lERXNJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsYm1WeVlYUmxUV2x3YldGd2N6b2dJVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQllMbWhoY3lnaVJWaFVYMk52Ykc5eVgySjFabVpsY2w5b1lXeG1YMlpzYjJGMElpa2dQeUJVY3lBNklFOXVMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x1Um1sc2RHVnlPaUJzYVN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOaGJYQnNaWE02SUdzZ1B5QTBJRG9nTUFvZ0lDQWdJQ0FnSUNBZ0lDQjlLU2tzSUhndVoyVjBSSEpoZDJsdVowSjFabVpsY2xOcGVtVW9WR1VwTENCcklEOGdkMlV1YzJWMFUybDZaU2hVWlM1NExDQlVaUzU1S1NBNklIZGxMbk5sZEZOcGVtVW9WM0lvVkdVdWVDa3NJRmR5S0ZSbExua3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGhsSUQwZ2VDNW5aWFJTWlc1a1pYSlVZWEpuWlhRb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZUM1elpYUlNaVzVrWlhKVVlYSm5aWFFvZDJVcExDQjRMbWRsZEVOc1pXRnlRMjlzYjNJb0pDa3NJRlVnUFNCNExtZGxkRU5zWldGeVFXeHdhR0VvS1N3Z1ZTQThJREVnSmlZZ2VDNXpaWFJEYkdWaGNrTnZiRzl5S0RFMk56YzNNakUxTENBdU5Ta3NJSGd1WTJ4bFlYSW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRUZsSUQwZ2VDNTBiMjVsVFdGd2NHbHVaenNLSUNBZ0lDQWdJQ0FnSUNBZ2VDNTBiMjVsVFdGd2NHbHVaeUE5SUU1dUxDQnJjeWhGTENCV0xDQkdLU3dnZVdVdWRYQmtZWFJsVFhWc2RHbHpZVzF3YkdWU1pXNWtaWEpVWVhKblpYUW9kMlVwTENCNVpTNTFjR1JoZEdWU1pXNWtaWEpVWVhKblpYUk5hWEJ0WVhBb2QyVXBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdWV1VnUFNBaE1Uc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JFWlNBOUlEQXNJRmRsSUQwZ1RpNXNaVzVuZEdnN0lFUmxJRHdnVjJVN0lFUmxLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGQmxJRDBnVGx0RVpWMHNJRlpsSUQwZ1VHVXViMkpxWldOMExDQmhkQ0E5SUZCbExtZGxiMjFsZEhKNUxDQnNkQ0E5SUZCbExtMWhkR1Z5YVdGc0xDQklkQ0E5SUZCbExtZHliM1Z3T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHeDBMbk5wWkdVZ1BUMDlJR2R1SUNZbUlGWmxMbXhoZVdWeWN5NTBaWE4wS0VZdWJHRjVaWEp6S1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaGJpQTlJR3gwTG5OcFpHVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkhRdWMybGtaU0E5SUVaMExDQnNkQzV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0IwYkNoV1pTd2dWaXdnUml3Z1lYUXNJR3gwTENCSWRDa3NJR3gwTG5OcFpHVWdQU0JoYml3Z2JIUXVibVZsWkhOVmNHUmhkR1VnUFNBaE1Dd2dWV1VnUFNBaE1Ec0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQlZaU0E5UFQwZ0lUQWdKaVlnS0hsbExuVndaR0YwWlUxMWJIUnBjMkZ0Y0d4bFVtVnVaR1Z5VkdGeVoyVjBLSGRsS1N3Z2VXVXVkWEJrWVhSbFVtVnVaR1Z5VkdGeVoyVjBUV2x3YldGd0tIZGxLU2tzSUhndWMyVjBVbVZ1WkdWeVZHRnlaMlYwS0hobEtTd2dlQzV6WlhSRGJHVmhja052Ykc5eUtDUXNJRlVwTENCNExuUnZibVZOWVhCd2FXNW5JRDBnUVdVN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHdHpLRVVzSUU0c0lGWXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVlnUFNCT0xtbHpVMk5sYm1VZ1BUMDlJQ0V3SUQ4Z1RpNXZkbVZ5Y21sa1pVMWhkR1Z5YVdGc0lEb2diblZzYkRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnJJRDBnTUN3Z2VHVWdQU0JGTG14bGJtZDBhRHNnYXlBOElIaGxPeUJyS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRUZsSUQwZ1JWdHJYU3dnVldVZ1BTQkJaUzV2WW1wbFkzUXNJRVJsSUQwZ1FXVXVaMlZ2YldWMGNua3NJRmRsSUQwZ1JpQTlQVDBnYm5Wc2JDQS9JRUZsTG0xaGRHVnlhV0ZzSURvZ1Jpd2dVR1VnUFNCQlpTNW5jbTkxY0RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZWbExteGhlV1Z5Y3k1MFpYTjBLRll1YkdGNVpYSnpLU0FtSmlCMGJDaFZaU3dnVGl3Z1Zpd2dSR1VzSUZkbExDQlFaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdkR3dvUlN3Z1Rpd2dWaXdnUml3Z2F5d2dlR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdSUzV2YmtKbFptOXlaVkpsYm1SbGNpaDRMQ0JPTENCV0xDQkdMQ0JyTENCNFpTa3NJRVV1Ylc5a1pXeFdhV1YzVFdGMGNtbDRMbTExYkhScGNHeDVUV0YwY21salpYTW9WaTV0WVhSeWFYaFhiM0pzWkVsdWRtVnljMlVzSUVVdWJXRjBjbWw0VjI5eWJHUXBMQ0JGTG01dmNtMWhiRTFoZEhKcGVDNW5aWFJPYjNKdFlXeE5ZWFJ5YVhnb1JTNXRiMlJsYkZacFpYZE5ZWFJ5YVhncExDQnJMbTl1UW1WbWIzSmxVbVZ1WkdWeUtIZ3NJRTRzSUZZc0lFWXNJRVVzSUhobEtTd2dheTUwY21GdWMzQmhjbVZ1ZENBOVBUMGdJVEFnSmlZZ2F5NXphV1JsSUQwOVBTQm5iaUFtSmlCckxtWnZjbU5sVTJsdVoyeGxVR0Z6Y3lBOVBUMGdJVEVnUHlBb2F5NXphV1JsSUQwZ1JuUXNJR3N1Ym1WbFpITlZjR1JoZEdVZ1BTQWhNQ3dnZUM1eVpXNWtaWEpDZFdabVpYSkVhWEpsWTNRb1Zpd2dUaXdnUml3Z2F5d2dSU3dnZUdVcExDQnJMbk5wWkdVZ1BTQkNiaXdnYXk1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCNExuSmxibVJsY2tKMVptWmxja1JwY21WamRDaFdMQ0JPTENCR0xDQnJMQ0JGTENCNFpTa3NJR3N1YzJsa1pTQTlJR2R1S1NBNklIZ3VjbVZ1WkdWeVFuVm1abVZ5UkdseVpXTjBLRllzSUU0c0lFWXNJR3NzSUVVc0lIaGxLU3dnUlM1dmJrRm1kR1Z5VW1WdVpHVnlLSGdzSUU0c0lGWXNJRVlzSUdzc0lIaGxLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnU0hNb1JTd2dUaXdnVmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JPTG1selUyTmxibVVnSVQwOUlDRXdJQ1ltSUNoT0lEMGdhWFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUmlBOUlHMWxMbWRsZENoRktTd2dheUE5SUdjdWMzUmhkR1V1YkdsbmFIUnpMQ0I0WlNBOUlHY3VjM1JoZEdVdWMyaGhaRzkzYzBGeWNtRjVMQ0JCWlNBOUlHc3VjM1JoZEdVdWRtVnljMmx2Yml3Z1ZXVWdQU0JDTG1kbGRGQmhjbUZ0WlhSbGNuTW9SU3dnYXk1emRHRjBaU3dnZUdVc0lFNHNJRllwTENCRVpTQTlJRUl1WjJWMFVISnZaM0poYlVOaFkyaGxTMlY1S0ZWbEtTd2dWMlVnUFNCR0xuQnliMmR5WVcxek93b2dJQ0FnSUNBZ0lDQWdJQ0JHTG1WdWRtbHliMjV0Wlc1MElEMGdSUzVwYzAxbGMyaFRkR0Z1WkdGeVpFMWhkR1Z5YVdGc0lEOGdUaTVsYm5acGNtOXViV1Z1ZENBNklHNTFiR3dzSUVZdVptOW5JRDBnVGk1bWIyY3NJRVl1Wlc1MlRXRndJRDBnS0VVdWFYTk5aWE5vVTNSaGJtUmhjbVJOWVhSbGNtbGhiQ0EvSUhGbElEb2dUbVVwTG1kbGRDaEZMbVZ1ZGsxaGNDQjhmQ0JHTG1WdWRtbHliMjV0Wlc1MEtTd2dWMlVnUFQwOUlIWnZhV1FnTUNBbUppQW9SUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0prYVhOd2IzTmxJaXdnZFdVcExDQlhaU0E5SUc1bGR5Qk5ZWEFzSUVZdWNISnZaM0poYlhNZ1BTQlhaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JRWlNBOUlGZGxMbWRsZENoRVpTazdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaFFaU0FoUFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9SaTVqZFhKeVpXNTBVSEp2WjNKaGJTQTlQVDBnVUdVZ0ppWWdSaTVzYVdkb2RITlRkR0YwWlZabGNuTnBiMjRnUFQwOUlFRmxLU0J5WlhSMWNtNGdibXdvUlN3Z1ZXVXBMQ0JRWlRzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElGVmxMblZ1YVdadmNtMXpJRDBnUWk1blpYUlZibWxtYjNKdGN5aEZLU3dnUlM1dmJrSjFhV3hrS0ZZc0lGVmxMQ0I0S1N3Z1JTNXZia0psWm05eVpVTnZiWEJwYkdVb1ZXVXNJSGdwTENCUVpTQTlJRUl1WVdOeGRXbHlaVkJ5YjJkeVlXMG9WV1VzSUVSbEtTd2dWMlV1YzJWMEtFUmxMQ0JRWlNrc0lFWXVkVzVwWm05eWJYTWdQU0JWWlM1MWJtbG1iM0p0Y3pzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZabElEMGdSaTUxYm1sbWIzSnRjenNLSUNBZ0lDQWdJQ0FnSUNBZ0tDRkZMbWx6VTJoaFpHVnlUV0YwWlhKcFlXd2dKaVlnSVVVdWFYTlNZWGRUYUdGa1pYSk5ZWFJsY21saGJDQjhmQ0JGTG1Oc2FYQndhVzVuSUQwOVBTQWhNQ2tnSmlZZ0tGWmxMbU5zYVhCd2FXNW5VR3hoYm1WeklEMGdUV1V1ZFc1cFptOXliU2tzSUc1c0tFVXNJRlZsS1N3Z1JpNXVaV1ZrYzB4cFoyaDBjeUE5SUhwa0tFVXBMQ0JHTG14cFoyaDBjMU4wWVhSbFZtVnljMmx2YmlBOUlFRmxMQ0JHTG01bFpXUnpUR2xuYUhSeklDWW1JQ2hXWlM1aGJXSnBaVzUwVEdsbmFIUkRiMnh2Y2k1MllXeDFaU0E5SUdzdWMzUmhkR1V1WVcxaWFXVnVkQ3dnVm1VdWJHbG5hSFJRY205aVpTNTJZV3gxWlNBOUlHc3VjM1JoZEdVdWNISnZZbVVzSUZabExtUnBjbVZqZEdsdmJtRnNUR2xuYUhSekxuWmhiSFZsSUQwZ2F5NXpkR0YwWlM1a2FYSmxZM1JwYjI1aGJDd2dWbVV1WkdseVpXTjBhVzl1WVd4TWFXZG9kRk5vWVdSdmQzTXVkbUZzZFdVZ1BTQnJMbk4wWVhSbExtUnBjbVZqZEdsdmJtRnNVMmhoWkc5M0xDQldaUzV6Y0c5MFRHbG5hSFJ6TG5aaGJIVmxJRDBnYXk1emRHRjBaUzV6Y0c5MExDQldaUzV6Y0c5MFRHbG5hSFJUYUdGa2IzZHpMblpoYkhWbElEMGdheTV6ZEdGMFpTNXpjRzkwVTJoaFpHOTNMQ0JXWlM1eVpXTjBRWEpsWVV4cFoyaDBjeTUyWVd4MVpTQTlJR3N1YzNSaGRHVXVjbVZqZEVGeVpXRXNJRlpsTG14MFkxOHhMblpoYkhWbElEMGdheTV6ZEdGMFpTNXlaV04wUVhKbFlVeFVRekVzSUZabExteDBZMTh5TG5aaGJIVmxJRDBnYXk1emRHRjBaUzV5WldOMFFYSmxZVXhVUXpJc0lGWmxMbkJ2YVc1MFRHbG5hSFJ6TG5aaGJIVmxJRDBnYXk1emRHRjBaUzV3YjJsdWRDd2dWbVV1Y0c5cGJuUk1hV2RvZEZOb1lXUnZkM011ZG1Gc2RXVWdQU0JyTG5OMFlYUmxMbkJ2YVc1MFUyaGhaRzkzTENCV1pTNW9aVzFwYzNCb1pYSmxUR2xuYUhSekxuWmhiSFZsSUQwZ2F5NXpkR0YwWlM1b1pXMXBMQ0JXWlM1a2FYSmxZM1JwYjI1aGJGTm9ZV1J2ZDAxaGNDNTJZV3gxWlNBOUlHc3VjM1JoZEdVdVpHbHlaV04wYVc5dVlXeFRhR0ZrYjNkTllYQXNJRlpsTG1ScGNtVmpkR2x2Ym1Gc1UyaGhaRzkzVFdGMGNtbDRMblpoYkhWbElEMGdheTV6ZEdGMFpTNWthWEpsWTNScGIyNWhiRk5vWVdSdmQwMWhkSEpwZUN3Z1ZtVXVjM0J2ZEZOb1lXUnZkMDFoY0M1MllXeDFaU0E5SUdzdWMzUmhkR1V1YzNCdmRGTm9ZV1J2ZDAxaGNDd2dWbVV1YzNCdmRFeHBaMmgwVFdGMGNtbDRMblpoYkhWbElEMGdheTV6ZEdGMFpTNXpjRzkwVEdsbmFIUk5ZWFJ5YVhnc0lGWmxMbk53YjNSTWFXZG9kRTFoY0M1MllXeDFaU0E5SUdzdWMzUmhkR1V1YzNCdmRFeHBaMmgwVFdGd0xDQldaUzV3YjJsdWRGTm9ZV1J2ZDAxaGNDNTJZV3gxWlNBOUlHc3VjM1JoZEdVdWNHOXBiblJUYUdGa2IzZE5ZWEFzSUZabExuQnZhVzUwVTJoaFpHOTNUV0YwY21sNExuWmhiSFZsSUQwZ2F5NXpkR0YwWlM1d2IybHVkRk5vWVdSdmQwMWhkSEpwZUNrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaGRDQTlJRkJsTG1kbGRGVnVhV1p2Y20xektDa3NJR3gwSUQwZ2NXa3VjMlZ4VjJsMGFGWmhiSFZsS0dGMExuTmxjU3dnVm1VcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdSaTVqZFhKeVpXNTBVSEp2WjNKaGJTQTlJRkJsTENCR0xuVnVhV1p2Y20xelRHbHpkQ0E5SUd4MExDQlFaVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYm13b1JTd2dUaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVmlBOUlHMWxMbWRsZENoRktUc0tJQ0FnSUNBZ0lDQWdJQ0FnVmk1dmRYUndkWFJEYjJ4dmNsTndZV05sSUQwZ1RpNXZkWFJ3ZFhSRGIyeHZjbE53WVdObExDQldMbWx1YzNSaGJtTnBibWNnUFNCT0xtbHVjM1JoYm1OcGJtY3NJRll1YVc1emRHRnVZMmx1WjBOdmJHOXlJRDBnVGk1cGJuTjBZVzVqYVc1blEyOXNiM0lzSUZZdWMydHBibTVwYm1jZ1BTQk9Mbk5yYVc1dWFXNW5MQ0JXTG0xdmNuQm9WR0Z5WjJWMGN5QTlJRTR1Ylc5eWNHaFVZWEpuWlhSekxDQldMbTF2Y25Cb1RtOXliV0ZzY3lBOUlFNHViVzl5Y0doT2IzSnRZV3h6TENCV0xtMXZjbkJvUTI5c2IzSnpJRDBnVGk1dGIzSndhRU52Ykc5eWN5d2dWaTV0YjNKd2FGUmhjbWRsZEhORGIzVnVkQ0E5SUU0dWJXOXljR2hVWVhKblpYUnpRMjkxYm5Rc0lGWXViblZ0UTJ4cGNIQnBibWRRYkdGdVpYTWdQU0JPTG01MWJVTnNhWEJ3YVc1blVHeGhibVZ6TENCV0xtNTFiVWx1ZEdWeWMyVmpkR2x2YmlBOUlFNHViblZ0UTJ4cGNFbHVkR1Z5YzJWamRHbHZiaXdnVmk1MlpYSjBaWGhCYkhCb1lYTWdQU0JPTG5abGNuUmxlRUZzY0doaGN5d2dWaTUyWlhKMFpYaFVZVzVuWlc1MGN5QTlJRTR1ZG1WeWRHVjRWR0Z1WjJWdWRITXNJRll1ZEc5dVpVMWhjSEJwYm1jZ1BTQk9MblJ2Ym1WTllYQndhVzVuT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCR1pDaEZMQ0JPTENCV0xDQkdMQ0JyS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRTR1YVhOVFkyVnVaU0FoUFQwZ0lUQWdKaVlnS0U0Z1BTQnBkQ2tzSUhsbExuSmxjMlYwVkdWNGRIVnlaVlZ1YVhSektDazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjRaU0E5SUU0dVptOW5MQ0JCWlNBOUlFWXVhWE5OWlhOb1UzUmhibVJoY21STllYUmxjbWxoYkNBL0lFNHVaVzUyYVhKdmJtMWxiblFnT2lCdWRXeHNMQ0JWWlNBOUlGSWdQVDA5SUc1MWJHd2dQeUI0TG05MWRIQjFkRU52Ykc5eVUzQmhZMlVnT2lCU0xtbHpXRkpTWlc1a1pYSlVZWEpuWlhRZ1BUMDlJQ0V3SUQ4Z1VpNTBaWGgwZFhKbExtTnZiRzl5VTNCaFkyVWdPaUJOYml3Z1JHVWdQU0FvUmk1cGMwMWxjMmhUZEdGdVpHRnlaRTFoZEdWeWFXRnNJRDhnY1dVZ09pQk9aU2t1WjJWMEtFWXVaVzUyVFdGd0lIeDhJRUZsS1N3Z1YyVWdQU0JHTG5abGNuUmxlRU52Ykc5eWN5QTlQVDBnSVRBZ0ppWWdJU0ZXTG1GMGRISnBZblYwWlhNdVkyOXNiM0lnSmlZZ1ZpNWhkSFJ5YVdKMWRHVnpMbU52Ykc5eUxtbDBaVzFUYVhwbElEMDlQU0EwTENCUVpTQTlJQ0VoVmk1aGRIUnlhV0oxZEdWekxuUmhibWRsYm5RZ0ppWWdLQ0VoUmk1dWIzSnRZV3hOWVhBZ2ZId2dSaTVoYm1semIzUnliM0I1SUQ0Z01Da3NJRlpsSUQwZ0lTRldMbTF2Y25Cb1FYUjBjbWxpZFhSbGN5NXdiM05wZEdsdmJpd2dZWFFnUFNBaElWWXViVzl5Y0doQmRIUnlhV0oxZEdWekxtNXZjbTFoYkN3Z2JIUWdQU0FoSVZZdWJXOXljR2hCZEhSeWFXSjFkR1Z6TG1OdmJHOXlMQ0JJZENBOUlFNXVPd29nSUNBZ0lDQWdJQ0FnSUNCR0xuUnZibVZOWVhCd1pXUWdKaVlnS0ZJZ1BUMDlJRzUxYkd3Z2ZId2dVaTVwYzFoU1VtVnVaR1Z5VkdGeVoyVjBJRDA5UFNBaE1Da2dKaVlnS0VoMElEMGdlQzUwYjI1bFRXRndjR2x1WnlrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaGJpQTlJRll1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVJSHg4SUZZdWJXOXljR2hCZEhSeWFXSjFkR1Z6TG01dmNtMWhiQ0I4ZkNCV0xtMXZjbkJvUVhSMGNtbGlkWFJsY3k1amIyeHZjaXdnZFhRZ1BTQmhiaUFoUFQwZ2RtOXBaQ0F3SUQ4Z1lXNHViR1Z1WjNSb0lEb2dNQ3dnV0dVZ1BTQnRaUzVuWlhRb1Jpa3NJRk5oSUQwZ1p5NXpkR0YwWlM1c2FXZG9kSE03Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htWlNBOVBUMGdJVEFnSmlZZ0tGOWxJRDA5UFNBaE1DQjhmQ0JGSUNFOVBTQk5LU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFSjBJRDBnUlNBOVBUMGdUU0FtSmlCR0xtbGtJRDA5UFNCSk93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RXVXVjMlYwVTNSaGRHVW9SaXdnUlN3Z1FuUXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa2RDQTlJQ0V4T3dvZ0lDQWdJQ0FnSUNBZ0lDQkdMblpsY25OcGIyNGdQVDA5SUZobExsOWZkbVZ5YzJsdmJpQS9JQ2hZWlM1dVpXVmtjMHhwWjJoMGN5QW1KaUJZWlM1c2FXZG9kSE5UZEdGMFpWWmxjbk5wYjI0Z0lUMDlJRk5oTG5OMFlYUmxMblpsY25OcGIyNGdmSHdnV0dVdWIzVjBjSFYwUTI5c2IzSlRjR0ZqWlNBaFBUMGdWV1VnZkh3Z2F5NXBjMGx1YzNSaGJtTmxaRTFsYzJnZ0ppWWdXR1V1YVc1emRHRnVZMmx1WnlBOVBUMGdJVEVnZkh3Z0lXc3VhWE5KYm5OMFlXNWpaV1JOWlhOb0lDWW1JRmhsTG1sdWMzUmhibU5wYm1jZ1BUMDlJQ0V3SUh4OElHc3VhWE5UYTJsdWJtVmtUV1Z6YUNBbUppQllaUzV6YTJsdWJtbHVaeUE5UFQwZ0lURWdmSHdnSVdzdWFYTlRhMmx1Ym1Wa1RXVnphQ0FtSmlCWVpTNXphMmx1Ym1sdVp5QTlQVDBnSVRBZ2ZId2dheTVwYzBsdWMzUmhibU5sWkUxbGMyZ2dKaVlnV0dVdWFXNXpkR0Z1WTJsdVowTnZiRzl5SUQwOVBTQWhNQ0FtSmlCckxtbHVjM1JoYm1ObFEyOXNiM0lnUFQwOUlHNTFiR3dnZkh3Z2F5NXBjMGx1YzNSaGJtTmxaRTFsYzJnZ0ppWWdXR1V1YVc1emRHRnVZMmx1WjBOdmJHOXlJRDA5UFNBaE1TQW1KaUJyTG1sdWMzUmhibU5sUTI5c2IzSWdJVDA5SUc1MWJHd2dmSHdnV0dVdVpXNTJUV0Z3SUNFOVBTQkVaU0I4ZkNCR0xtWnZaeUE5UFQwZ0lUQWdKaVlnV0dVdVptOW5JQ0U5UFNCNFpTQjhmQ0JZWlM1dWRXMURiR2x3Y0dsdVoxQnNZVzVsY3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2hZWlM1dWRXMURiR2x3Y0dsdVoxQnNZVzVsY3lBaFBUMGdUV1V1Ym5WdFVHeGhibVZ6SUh4OElGaGxMbTUxYlVsdWRHVnljMlZqZEdsdmJpQWhQVDBnVFdVdWJuVnRTVzUwWlhKelpXTjBhVzl1S1NCOGZDQllaUzUyWlhKMFpYaEJiSEJvWVhNZ0lUMDlJRmRsSUh4OElGaGxMblpsY25SbGVGUmhibWRsYm5SeklDRTlQU0JRWlNCOGZDQllaUzV0YjNKd2FGUmhjbWRsZEhNZ0lUMDlJRlpsSUh4OElGaGxMbTF2Y25Cb1RtOXliV0ZzY3lBaFBUMGdZWFFnZkh3Z1dHVXViVzl5Y0doRGIyeHZjbk1nSVQwOUlHeDBJSHg4SUZobExuUnZibVZOWVhCd2FXNW5JQ0U5UFNCSWRDQjhmQ0JwWlM1cGMxZGxZa2RNTWlBOVBUMGdJVEFnSmlZZ1dHVXViVzl5Y0doVVlYSm5aWFJ6UTI5MWJuUWdJVDA5SUhWMEtTQW1KaUFvWkhRZ1BTQWhNQ2tnT2lBb1pIUWdQU0FoTUN3Z1dHVXVYMTkyWlhKemFXOXVJRDBnUmk1MlpYSnphVzl1S1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVodUlEMGdXR1V1WTNWeWNtVnVkRkJ5YjJkeVlXMDdDaUFnSUNBZ0lDQWdJQ0FnSUdSMElEMDlQU0FoTUNBbUppQW9TRzRnUFNCSWN5aEdMQ0JPTENCcktTazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBiQ0E5SUNFeExDQnZjeUE5SUNFeExDQmlZU0E5SUNFeExDQkRkQ0E5SUVodUxtZGxkRlZ1YVdadmNtMXpLQ2tzSUVkdUlEMGdXR1V1ZFc1cFptOXliWE03Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hLTG5WelpWQnliMmR5WVcwb1NHNHVjSEp2WjNKaGJTa2dKaVlnS0dsc0lEMGdJVEFzSUc5eklEMGdJVEFzSUdKaElEMGdJVEFwTENCR0xtbGtJQ0U5UFNCSklDWW1JQ2hKSUQwZ1JpNXBaQ3dnYjNNZ1BTQWhNQ2tzSUdsc0lIeDhJRTBnSVQwOUlFVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRU4wTG5ObGRGWmhiSFZsS0V3c0lDSndjbTlxWldOMGFXOXVUV0YwY21sNElpd2dSUzV3Y205cVpXTjBhVzl1VFdGMGNtbDRLU3dnUTNRdWMyVjBWbUZzZFdVb1RDd2dJblpwWlhkTllYUnlhWGdpTENCRkxtMWhkSEpwZUZkdmNteGtTVzUyWlhKelpTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUW5RZ1BTQkRkQzV0WVhBdVkyRnRaWEpoVUc5emFYUnBiMjQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JDZENBaFBUMGdkbTlwWkNBd0lDWW1JRUowTG5ObGRGWmhiSFZsS0V3c0lGbGxMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloRkxtMWhkSEpwZUZkdmNteGtLU2tzSUdsbExteHZaMkZ5YVhSb2JXbGpSR1Z3ZEdoQ2RXWm1aWElnSmlZZ1EzUXVjMlYwVm1Gc2RXVW9UQ3dnSW14dlowUmxjSFJvUW5WbVJrTWlMQ0F5SUM4Z0tFMWhkR2d1Ykc5bktFVXVabUZ5SUNzZ01Ta2dMeUJOWVhSb0xreE9NaWtwTENBb1JpNXBjMDFsYzJoUWFHOXVaMDFoZEdWeWFXRnNJSHg4SUVZdWFYTk5aWE5vVkc5dmJrMWhkR1Z5YVdGc0lIeDhJRVl1YVhOTlpYTm9UR0Z0WW1WeWRFMWhkR1Z5YVdGc0lIeDhJRVl1YVhOTlpYTm9RbUZ6YVdOTllYUmxjbWxoYkNCOGZDQkdMbWx6VFdWemFGTjBZVzVrWVhKa1RXRjBaWEpwWVd3Z2ZId2dSaTVwYzFOb1lXUmxjazFoZEdWeWFXRnNLU0FtSmlCRGRDNXpaWFJXWVd4MVpTaE1MQ0FpYVhOUGNuUm9iMmR5WVhCb2FXTWlMQ0JGTG1selQzSjBhRzluY21Gd2FHbGpRMkZ0WlhKaElEMDlQU0FoTUNrc0lFMGdJVDA5SUVVZ0ppWWdLRTBnUFNCRkxDQnZjeUE5SUNFd0xDQmlZU0E5SUNFd0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYXk1cGMxTnJhVzV1WldSTlpYTm9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JEZEM1elpYUlBjSFJwYjI1aGJDaE1MQ0JyTENBaVltbHVaRTFoZEhKcGVDSXBMQ0JEZEM1elpYUlBjSFJwYjI1aGJDaE1MQ0JyTENBaVltbHVaRTFoZEhKcGVFbHVkbVZ5YzJVaUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JDZENBOUlHc3VjMnRsYkdWMGIyNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkNkQ0FtSmlBb2FXVXVabXh2WVhSV1pYSjBaWGhVWlhoMGRYSmxjeUEvSUNoQ2RDNWliMjVsVkdWNGRIVnlaU0E5UFQwZ2JuVnNiQ0FtSmlCQ2RDNWpiMjF3ZFhSbFFtOXVaVlJsZUhSMWNtVW9LU3dnUTNRdWMyVjBWbUZzZFdVb1RDd2dJbUp2Ym1WVVpYaDBkWEpsSWl3Z1FuUXVZbTl1WlZSbGVIUjFjbVVzSUhsbEtTd2dRM1F1YzJWMFZtRnNkV1VvVEN3Z0ltSnZibVZVWlhoMGRYSmxVMmw2WlNJc0lFSjBMbUp2Ym1WVVpYaDBkWEpsVTJsNlpTa3BJRG9nWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUJUYTJsdWJtVmtUV1Z6YUNCallXNGdiMjVzZVNCaVpTQjFjMlZrSUhkcGRHZ2dWMlZpUjB3Z01pNGdWMmwwYUNCWFpXSkhUQ0F4SUU5RlUxOTBaWGgwZFhKbFgyWnNiMkYwSUdGdVpDQjJaWEowWlhnZ2RHVjRkSFZ5WlhNZ2MzVndjRzl5ZENCcGN5QnlaWEYxYVhKbFpDNGlLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFVmhJRDBnVmk1dGIzSndhRUYwZEhKcFluVjBaWE03Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvUldFdWNHOXphWFJwYjI0Z0lUMDlJSFp2YVdRZ01DQjhmQ0JGWVM1dWIzSnRZV3dnSVQwOUlIWnZhV1FnTUNCOGZDQkZZUzVqYjJ4dmNpQWhQVDBnZG05cFpDQXdJQ1ltSUdsbExtbHpWMlZpUjB3eUlEMDlQU0FoTUNrZ0ppWWdUR1V1ZFhCa1lYUmxLR3NzSUZZc0lFaHVLU3dnS0c5eklIeDhJRmhsTG5KbFkyVnBkbVZUYUdGa2IzY2dJVDA5SUdzdWNtVmpaV2wyWlZOb1lXUnZkeWtnSmlZZ0tGaGxMbkpsWTJWcGRtVlRhR0ZrYjNjZ1BTQnJMbkpsWTJWcGRtVlRhR0ZrYjNjc0lFTjBMbk5sZEZaaGJIVmxLRXdzSUNKeVpXTmxhWFpsVTJoaFpHOTNJaXdnYXk1eVpXTmxhWFpsVTJoaFpHOTNLU2tzSUVZdWFYTk5aWE5vUjI5MWNtRjFaRTFoZEdWeWFXRnNJQ1ltSUVZdVpXNTJUV0Z3SUNFOVBTQnVkV3hzSUNZbUlDaEhiaTVsYm5aTllYQXVkbUZzZFdVZ1BTQkVaU3dnUjI0dVpteHBjRVZ1ZGsxaGNDNTJZV3gxWlNBOUlFUmxMbWx6UTNWaVpWUmxlSFIxY21VZ0ppWWdSR1V1YVhOU1pXNWtaWEpVWVhKblpYUlVaWGgwZFhKbElEMDlQU0FoTVNBL0lDMHhJRG9nTVNrc0lHOXpJQ1ltSUNoRGRDNXpaWFJXWVd4MVpTaE1MQ0FpZEc5dVpVMWhjSEJwYm1kRmVIQnZjM1Z5WlNJc0lIZ3VkRzl1WlUxaGNIQnBibWRGZUhCdmMzVnlaU2tzSUZobExtNWxaV1J6VEdsbmFIUnpJQ1ltSUVKa0tFZHVMQ0JpWVNrc0lIaGxJQ1ltSUVZdVptOW5JRDA5UFNBaE1DQW1KaUJsWlM1eVpXWnlaWE5vUm05blZXNXBabTl5YlhNb1IyNHNJSGhsS1N3Z1pXVXVjbVZtY21WemFFMWhkR1Z5YVdGc1ZXNXBabTl5YlhNb1IyNHNJRVlzSUVnc0lIRXNJSGRsS1N3Z2NXa3VkWEJzYjJGa0tFd3NJRmhsTG5WdWFXWnZjbTF6VEdsemRDd2dSMjRzSUhsbEtTa3NJRVl1YVhOVGFHRmtaWEpOWVhSbGNtbGhiQ0FtSmlCR0xuVnVhV1p2Y20xelRtVmxaRlZ3WkdGMFpTQTlQVDBnSVRBZ0ppWWdLSEZwTG5Wd2JHOWhaQ2hNTENCWVpTNTFibWxtYjNKdGMweHBjM1FzSUVkdUxDQjVaU2tzSUVZdWRXNXBabTl5YlhOT1pXVmtWWEJrWVhSbElEMGdJVEVwTENCR0xtbHpVM0J5YVhSbFRXRjBaWEpwWVd3Z0ppWWdRM1F1YzJWMFZtRnNkV1VvVEN3Z0ltTmxiblJsY2lJc0lHc3VZMlZ1ZEdWeUtTd2dRM1F1YzJWMFZtRnNkV1VvVEN3Z0ltMXZaR1ZzVm1sbGQwMWhkSEpwZUNJc0lHc3ViVzlrWld4V2FXVjNUV0YwY21sNEtTd2dRM1F1YzJWMFZtRnNkV1VvVEN3Z0ltNXZjbTFoYkUxaGRISnBlQ0lzSUdzdWJtOXliV0ZzVFdGMGNtbDRLU3dnUTNRdWMyVjBWbUZzZFdVb1RDd2dJbTF2WkdWc1RXRjBjbWw0SWl3Z2F5NXRZWFJ5YVhoWGIzSnNaQ2tzSUVZdWFYTlRhR0ZrWlhKTllYUmxjbWxoYkNCOGZDQkdMbWx6VW1GM1UyaGhaR1Z5VFdGMFpYSnBZV3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkNkQ0E5SUVZdWRXNXBabTl5YlhOSGNtOTFjSE03Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRlJoSUQwZ01Dd2dWbVFnUFNCQ2RDNXNaVzVuZEdnN0lGUmhJRHdnVm1RN0lGUmhLeXNwYVdZZ0tHbGxMbWx6VjJWaVIwd3lLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSE5zSUQwZ1FuUmJWR0ZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFbGxMblZ3WkdGMFpTaHpiQ3dnU0c0cExDQkpaUzVpYVc1a0tITnNMQ0JJYmlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUJWYm1sbWIzSnRJRUoxWm1abGNpQlBZbXBsWTNSeklHTmhiaUJ2Ym14NUlHSmxJSFZ6WldRZ2QybDBhQ0JYWldKSFRDQXlMaUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJJYmpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1FtUW9SU3dnVGlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JGTG1GdFltbGxiblJNYVdkb2RFTnZiRzl5TG01bFpXUnpWWEJrWVhSbElEMGdUaXdnUlM1c2FXZG9kRkJ5YjJKbExtNWxaV1J6VlhCa1lYUmxJRDBnVGl3Z1JTNWthWEpsWTNScGIyNWhiRXhwWjJoMGN5NXVaV1ZrYzFWd1pHRjBaU0E5SUU0c0lFVXVaR2x5WldOMGFXOXVZV3hNYVdkb2RGTm9ZV1J2ZDNNdWJtVmxaSE5WY0dSaGRHVWdQU0JPTENCRkxuQnZhVzUwVEdsbmFIUnpMbTVsWldSelZYQmtZWFJsSUQwZ1Rpd2dSUzV3YjJsdWRFeHBaMmgwVTJoaFpHOTNjeTV1WldWa2MxVndaR0YwWlNBOUlFNHNJRVV1YzNCdmRFeHBaMmgwY3k1dVpXVmtjMVZ3WkdGMFpTQTlJRTRzSUVVdWMzQnZkRXhwWjJoMFUyaGhaRzkzY3k1dVpXVmtjMVZ3WkdGMFpTQTlJRTRzSUVVdWNtVmpkRUZ5WldGTWFXZG9kSE11Ym1WbFpITlZjR1JoZEdVZ1BTQk9MQ0JGTG1obGJXbHpjR2hsY21WTWFXZG9kSE11Ym1WbFpITlZjR1JoZEdVZ1BTQk9Pd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUI2WkNoRktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJGTG1selRXVnphRXhoYldKbGNuUk5ZWFJsY21saGJDQjhmQ0JGTG1selRXVnphRlJ2YjI1TllYUmxjbWxoYkNCOGZDQkZMbWx6VFdWemFGQm9iMjVuVFdGMFpYSnBZV3dnZkh3Z1JTNXBjMDFsYzJoVGRHRnVaR0Z5WkUxaGRHVnlhV0ZzSUh4OElFVXVhWE5UYUdGa2IzZE5ZWFJsY21saGJDQjhmQ0JGTG1selUyaGhaR1Z5VFdGMFpYSnBZV3dnSmlZZ1JTNXNhV2RvZEhNZ1BUMDlJQ0V3T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMbWRsZEVGamRHbDJaVU4xWW1WR1lXTmxJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmlPd29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVaMlYwUVdOMGFYWmxUV2x3YldGd1RHVjJaV3dnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSGM3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVuWlhSU1pXNWtaWEpVWVhKblpYUWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGSTdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NXpaWFJTWlc1a1pYSlVZWEpuWlhSVVpYaDBkWEpsY3lBOUlHWjFibU4wYVc5dUtFVXNJRTRzSUZZcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYldVdVoyVjBLRVV1ZEdWNGRIVnlaU2t1WDE5M1pXSm5iRlJsZUhSMWNtVWdQU0JPTENCdFpTNW5aWFFvUlM1a1pYQjBhRlJsZUhSMWNtVXBMbDlmZDJWaVoyeFVaWGgwZFhKbElEMGdWanNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVlnUFNCdFpTNW5aWFFvUlNrN0NpQWdJQ0FnSUNBZ0lDQWdJRVl1WDE5b1lYTkZlSFJsY201aGJGUmxlSFIxY21WeklEMGdJVEFzSUVZdVgxOW9ZWE5GZUhSbGNtNWhiRlJsZUhSMWNtVnpJQ1ltSUNoR0xsOWZZWFYwYjBGc2JHOWpZWFJsUkdWd2RHaENkV1ptWlhJZ1BTQldJRDA5UFNCMmIybGtJREFzSUVZdVgxOWhkWFJ2UVd4c2IyTmhkR1ZFWlhCMGFFSjFabVpsY2lCOGZDQllMbWhoY3lnaVYwVkNSMHhmYlhWc2RHbHpZVzF3YkdWa1gzSmxibVJsY2w5MGIxOTBaWGgwZFhKbElpa2dQVDA5SUNFd0lDWW1JQ2hqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJRkpsYm1SbGNpMTBieTEwWlhoMGRYSmxJR1Y0ZEdWdWMybHZiaUIzWVhNZ1pHbHpZV0pzWldRZ1ltVmpZWFZ6WlNCaGJpQmxlSFJsY201aGJDQjBaWGgwZFhKbElIZGhjeUJ3Y205MmFXUmxaQ0lwTENCR0xsOWZkWE5sVW1WdVpHVnlWRzlVWlhoMGRYSmxJRDBnSVRFcEtUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuTmxkRkpsYm1SbGNsUmhjbWRsZEVaeVlXMWxZblZtWm1WeUlEMGdablZ1WTNScGIyNG9SU3dnVGlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ZpQTlJRzFsTG1kbGRDaEZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ZpNWZYM2RsWW1kc1JuSmhiV1ZpZFdabVpYSWdQU0JPTENCV0xsOWZkWE5sUkdWbVlYVnNkRVp5WVcxbFluVm1abVZ5SUQwZ1RpQTlQVDBnZG05cFpDQXdPd29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVjMlYwVW1WdVpHVnlWR0Z5WjJWMElEMGdablZ1WTNScGIyNG9SU3dnVGlBOUlEQXNJRllnUFNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUZJZ1BTQkZMQ0JpSUQwZ1Rpd2dkeUE5SUZZN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCR0lEMGdJVEFzSUdzZ1BTQnVkV3hzTENCNFpTQTlJQ0V4TENCQlpTQTlJQ0V4T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVJsSUQwZ2JXVXVaMlYwS0VVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JHVXVYMTkxYzJWRVpXWmhkV3gwUm5KaGJXVmlkV1ptWlhJZ0lUMDlJSFp2YVdRZ01DQS9JQ2hLTG1KcGJtUkdjbUZ0WldKMVptWmxjaWhNTGtaU1FVMUZRbFZHUmtWU0xDQnVkV3hzS1N3Z1JpQTlJQ0V4S1NBNklFUmxMbDlmZDJWaVoyeEdjbUZ0WldKMVptWmxjaUE5UFQwZ2RtOXBaQ0F3SUQ4Z2VXVXVjMlYwZFhCU1pXNWtaWEpVWVhKblpYUW9SU2tnT2lCRVpTNWZYMmhoYzBWNGRHVnlibUZzVkdWNGRIVnlaWE1nSmlZZ2VXVXVjbVZpYVc1a1ZHVjRkSFZ5WlhNb1JTd2diV1V1WjJWMEtFVXVkR1Y0ZEhWeVpTa3VYMTkzWldKbmJGUmxlSFIxY21Vc0lHMWxMbWRsZENoRkxtUmxjSFJvVkdWNGRIVnlaU2t1WDE5M1pXSm5iRlJsZUhSMWNtVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZkbElEMGdSUzUwWlhoMGRYSmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLRmRsTG1selJHRjBZVE5FVkdWNGRIVnlaU0I4ZkNCWFpTNXBjMFJoZEdGQmNuSmhlVlJsZUhSMWNtVWdmSHdnVjJVdWFYTkRiMjF3Y21WemMyVmtRWEp5WVhsVVpYaDBkWEpsS1NBbUppQW9RV1VnUFNBaE1DazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVUdVZ1BTQnRaUzVuWlhRb1JTa3VYMTkzWldKbmJFWnlZVzFsWW5WbVptVnlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSUzVwYzFkbFlrZE1RM1ZpWlZKbGJtUmxjbFJoY21kbGRDQS9JQ2hCY25KaGVTNXBjMEZ5Y21GNUtGQmxXMDVkS1NBL0lHc2dQU0JRWlZ0T1hWdFdYU0E2SUdzZ1BTQlFaVnRPWFN3Z2VHVWdQU0FoTUNrZ09pQnBaUzVwYzFkbFlrZE1NaUFtSmlCRkxuTmhiWEJzWlhNZ1BpQXdJQ1ltSUhsbExuVnpaVTExYkhScGMyRnRjR3hsWkZKVVZDaEZLU0E5UFQwZ0lURWdQeUJySUQwZ2JXVXVaMlYwS0VVcExsOWZkMlZpWjJ4TmRXeDBhWE5oYlhCc1pXUkdjbUZ0WldKMVptWmxjaUE2SUVGeWNtRjVMbWx6UVhKeVlYa29VR1VwSUQ4Z2F5QTlJRkJsVzFaZElEb2dheUE5SUZCbExDQlVMbU52Y0hrb1JTNTJhV1YzY0c5eWRDa3NJRTh1WTI5d2VTaEZMbk5qYVhOemIzSXBMQ0JaSUQwZ1JTNXpZMmx6YzI5eVZHVnpkRHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUZRdVkyOXdlU2hMS1M1dGRXeDBhWEJzZVZOallXeGhjaWhJS1M1bWJHOXZjaWdwTENCUExtTnZjSGtvUkNrdWJYVnNkR2x3YkhsVFkyRnNZWElvU0NrdVpteHZiM0lvS1N3Z1dTQTlJRWM3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hLTG1KcGJtUkdjbUZ0WldKMVptWmxjaWhNTGtaU1FVMUZRbFZHUmtWU0xDQnJLU0FtSmlCcFpTNWtjbUYzUW5WbVptVnljeUFtSmlCR0lDWW1JRW91WkhKaGQwSjFabVpsY25Nb1JTd2dheWtzSUVvdWRtbGxkM0J2Y25Rb1ZDa3NJRW91YzJOcGMzTnZjaWhQS1N3Z1NpNXpaWFJUWTJsemMyOXlWR1Z6ZENoWktTd2dlR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkVaU0E5SUcxbExtZGxkQ2hGTG5SbGVIUjFjbVVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEM1bWNtRnRaV0oxWm1abGNsUmxlSFIxY21VeVJDaE1Ma1pTUVUxRlFsVkdSa1ZTTENCTUxrTlBURTlTWDBGVVZFRkRTRTFGVGxRd0xDQk1MbFJGV0ZSVlVrVmZRMVZDUlY5TlFWQmZVRTlUU1ZSSlZrVmZXQ0FySUU0c0lFUmxMbDlmZDJWaVoyeFVaWGgwZFhKbExDQldLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaEJaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFUmxJRDBnYldVdVoyVjBLRVV1ZEdWNGRIVnlaU2tzSUZkbElEMGdUaUI4ZkNBd093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RDNW1jbUZ0WldKMVptWmxjbFJsZUhSMWNtVk1ZWGxsY2loTUxrWlNRVTFGUWxWR1JrVlNMQ0JNTGtOUFRFOVNYMEZVVkVGRFNFMUZUbFF3TENCRVpTNWZYM2RsWW1kc1ZHVjRkSFZ5WlN3Z1ZpQjhmQ0F3TENCWFpTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdTU0E5SUMweE93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdWNtVmhaRkpsYm1SbGNsUmhjbWRsZEZCcGVHVnNjeUE5SUdaMWJtTjBhVzl1S0VVc0lFNHNJRllzSUVZc0lHc3NJSGhsTENCQlpTa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9JU2hGSUNZbUlFVXVhWE5YWldKSFRGSmxibVJsY2xSaGNtZGxkQ2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEl1Y21WaFpGSmxibVJsY2xSaGNtZGxkRkJwZUdWc2N6b2djbVZ1WkdWeVZHRnlaMlYwSUdseklHNXZkQ0JVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbFJoY21kbGRDNGlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVldVZ1BTQnRaUzVuWlhRb1JTa3VYMTkzWldKbmJFWnlZVzFsWW5WbVptVnlPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9SUzVwYzFkbFlrZE1RM1ZpWlZKbGJtUmxjbFJoY21kbGRDQW1KaUJCWlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hWWlNBOUlGVmxXMEZsWFNrc0lGVmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JLTG1KcGJtUkdjbUZ0WldKMVptWmxjaWhNTGtaU1FVMUZRbFZHUmtWU0xDQlZaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCRVpTQTlJRVV1ZEdWNGRIVnlaU3dnVjJVZ1BTQkVaUzVtYjNKdFlYUXNJRkJsSUQwZ1JHVXVkSGx3WlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVjJVZ0lUMDlJRmQwSUNZbUlDUmxMbU52Ym5abGNuUW9WMlVwSUNFOVBTQk1MbWRsZEZCaGNtRnRaWFJsY2loTUxrbE5VRXhGVFVWT1ZFRlVTVTlPWDBOUFRFOVNYMUpGUVVSZlJrOVNUVUZVS1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5TG5KbFlXUlNaVzVrWlhKVVlYSm5aWFJRYVhobGJITTZJSEpsYm1SbGNsUmhjbWRsZENCcGN5QnViM1FnYVc0Z1VrZENRU0J2Y2lCcGJYQnNaVzFsYm5SaGRHbHZiaUJrWldacGJtVmtJR1p2Y20xaGRDNGlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdWbVVnUFNCUVpTQTlQVDBnVkhNZ0ppWWdLRmd1YUdGektDSkZXRlJmWTI5c2IzSmZZblZtWm1WeVgyaGhiR1pmWm14dllYUWlLU0I4ZkNCcFpTNXBjMWRsWWtkTU1pQW1KaUJZTG1oaGN5Z2lSVmhVWDJOdmJHOXlYMkoxWm1abGNsOW1iRzloZENJcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1VHVWdJVDA5SUU5dUlDWW1JQ1JsTG1OdmJuWmxjblFvVUdVcElDRTlQU0JNTG1kbGRGQmhjbUZ0WlhSbGNpaE1Ma2xOVUV4RlRVVk9WRUZVU1U5T1gwTlBURTlTWDFKRlFVUmZWRmxRUlNrZ0ppWWdJU2hRWlNBOVBUMGdlRzRnSmlZZ0tHbGxMbWx6VjJWaVIwd3lJSHg4SUZndWFHRnpLQ0pQUlZOZmRHVjRkSFZ5WlY5bWJHOWhkQ0lwSUh4OElGZ3VhR0Z6S0NKWFJVSkhURjlqYjJ4dmNsOWlkV1ptWlhKZlpteHZZWFFpS1NrcElDWW1JQ0ZXWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5TG5KbFlXUlNaVzVrWlhKVVlYSm5aWFJRYVhobGJITTZJSEpsYm1SbGNsUmhjbWRsZENCcGN5QnViM1FnYVc0Z1ZXNXphV2R1WldSQ2VYUmxWSGx3WlNCdmNpQnBiWEJzWlcxbGJuUmhkR2x2YmlCa1pXWnBibVZrSUhSNWNHVXVJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RpQStQU0F3SUNZbUlFNGdQRDBnUlM1M2FXUjBhQ0F0SUVZZ0ppWWdWaUErUFNBd0lDWW1JRllnUEQwZ1JTNW9aV2xuYUhRZ0xTQnJJQ1ltSUV3dWNtVmhaRkJwZUdWc2N5aE9MQ0JXTENCR0xDQnJMQ0FrWlM1amIyNTJaWEowS0ZkbEtTd2dKR1V1WTI5dWRtVnlkQ2hRWlNrc0lIaGxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdSR1VnUFNCU0lDRTlQU0J1ZFd4c0lEOGdiV1V1WjJWMEtGSXBMbDlmZDJWaVoyeEdjbUZ0WldKMVptWmxjaUE2SUc1MWJHdzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnU2k1aWFXNWtSbkpoYldWaWRXWm1aWElvVEM1R1VrRk5SVUpWUmtaRlVpd2dSR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NWpiM0I1Um5KaGJXVmlkV1ptWlhKVWIxUmxlSFIxY21VZ1BTQm1kVzVqZEdsdmJpaEZMQ0JPTENCV0lEMGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUmlBOUlFMWhkR2d1Y0c5M0tESXNJQzFXS1N3Z2F5QTlJRTFoZEdndVpteHZiM0lvVGk1cGJXRm5aUzUzYVdSMGFDQXFJRVlwTENCNFpTQTlJRTFoZEdndVpteHZiM0lvVGk1cGJXRm5aUzVvWldsbmFIUWdLaUJHS1RzS0lDQWdJQ0FnSUNBZ0lDQWdlV1V1YzJWMFZHVjRkSFZ5WlRKRUtFNHNJREFwTENCTUxtTnZjSGxVWlhoVGRXSkpiV0ZuWlRKRUtFd3VWRVZZVkZWU1JWOHlSQ3dnVml3Z01Dd2dNQ3dnUlM1NExDQkZMbmtzSUdzc0lIaGxLU3dnU2k1MWJtSnBibVJVWlhoMGRYSmxLQ2s3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVqYjNCNVZHVjRkSFZ5WlZSdlZHVjRkSFZ5WlNBOUlHWjFibU4wYVc5dUtFVXNJRTRzSUZZc0lFWWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcklEMGdUaTVwYldGblpTNTNhV1IwYUN3Z2VHVWdQU0JPTG1sdFlXZGxMbWhsYVdkb2RDd2dRV1VnUFNBa1pTNWpiMjUyWlhKMEtGWXVabTl5YldGMEtTd2dWV1VnUFNBa1pTNWpiMjUyWlhKMEtGWXVkSGx3WlNrN0NpQWdJQ0FnSUNBZ0lDQWdJSGxsTG5ObGRGUmxlSFIxY21VeVJDaFdMQ0F3S1N3Z1RDNXdhWGhsYkZOMGIzSmxhU2hNTGxWT1VFRkRTMTlHVEVsUVgxbGZWMFZDUjB3c0lGWXVabXhwY0ZrcExDQk1MbkJwZUdWc1UzUnZjbVZwS0V3dVZVNVFRVU5MWDFCU1JVMVZURlJKVUV4WlgwRk1VRWhCWDFkRlFrZE1MQ0JXTG5CeVpXMTFiSFJwY0d4NVFXeHdhR0VwTENCTUxuQnBlR1ZzVTNSdmNtVnBLRXd1VlU1UVFVTkxYMEZNU1VkT1RVVk9WQ3dnVmk1MWJuQmhZMnRCYkdsbmJtMWxiblFwTENCT0xtbHpSR0YwWVZSbGVIUjFjbVVnUHlCTUxuUmxlRk4xWWtsdFlXZGxNa1FvVEM1VVJWaFVWVkpGWHpKRUxDQkdMQ0JGTG5nc0lFVXVlU3dnYXl3Z2VHVXNJRUZsTENCVlpTd2dUaTVwYldGblpTNWtZWFJoS1NBNklFNHVhWE5EYjIxd2NtVnpjMlZrVkdWNGRIVnlaU0EvSUV3dVkyOXRjSEpsYzNObFpGUmxlRk4xWWtsdFlXZGxNa1FvVEM1VVJWaFVWVkpGWHpKRUxDQkdMQ0JGTG5nc0lFVXVlU3dnVGk1dGFYQnRZWEJ6V3pCZExuZHBaSFJvTENCT0xtMXBjRzFoY0hOYk1GMHVhR1ZwWjJoMExDQkJaU3dnVGk1dGFYQnRZWEJ6V3pCZExtUmhkR0VwSURvZ1RDNTBaWGhUZFdKSmJXRm5aVEpFS0V3dVZFVllWRlZTUlY4eVJDd2dSaXdnUlM1NExDQkZMbmtzSUVGbExDQlZaU3dnVGk1cGJXRm5aU2tzSUVZZ1BUMDlJREFnSmlZZ1ZpNW5aVzVsY21GMFpVMXBjRzFoY0hNZ0ppWWdUQzVuWlc1bGNtRjBaVTFwY0cxaGNDaE1MbFJGV0ZSVlVrVmZNa1FwTENCS0xuVnVZbWx1WkZSbGVIUjFjbVVvS1RzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1OdmNIbFVaWGgwZFhKbFZHOVVaWGgwZFhKbE0wUWdQU0JtZFc1amRHbHZiaWhGTENCT0xDQldMQ0JHTENCcklEMGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZUM1cGMxZGxZa2RNTVZKbGJtUmxjbVZ5S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEl1WTI5d2VWUmxlSFIxY21WVWIxUmxlSFIxY21VelJEb2dZMkZ1SUc5dWJIa2dZbVVnZFhObFpDQjNhWFJvSUZkbFlrZE1NaTRpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VHVWdQU0JGTG0xaGVDNTRJQzBnUlM1dGFXNHVlQ0FySURFc0lFRmxJRDBnUlM1dFlYZ3VlU0F0SUVVdWJXbHVMbmtnS3lBeExDQlZaU0E5SUVVdWJXRjRMbm9nTFNCRkxtMXBiaTU2SUNzZ01Td2dSR1VnUFNBa1pTNWpiMjUyWlhKMEtFWXVabTl5YldGMEtTd2dWMlVnUFNBa1pTNWpiMjUyWlhKMEtFWXVkSGx3WlNrc0lGQmxPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9SaTVwYzBSaGRHRXpSRlJsZUhSMWNtVXBJSGxsTG5ObGRGUmxlSFIxY21VelJDaEdMQ0F3S1N3Z1VHVWdQU0JNTGxSRldGUlZVa1ZmTTBRN0NpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLRVl1YVhORVlYUmhRWEp5WVhsVVpYaDBkWEpsS1NCNVpTNXpaWFJVWlhoMGRYSmxNa1JCY25KaGVTaEdMQ0F3S1N3Z1VHVWdQU0JNTGxSRldGUlZVa1ZmTWtSZlFWSlNRVms3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlMbU52Y0hsVVpYaDBkWEpsVkc5VVpYaDBkWEpsTTBRNklHOXViSGtnYzNWd2NHOXlkSE1nVkVoU1JVVXVSR0YwWVZSbGVIUjFjbVV6UkNCaGJtUWdWRWhTUlVVdVJHRjBZVlJsZUhSMWNtVXlSRUZ5Y21GNUxpSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lFd3VjR2w0Wld4VGRHOXlaV2tvVEM1VlRsQkJRMHRmUmt4SlVGOVpYMWRGUWtkTUxDQkdMbVpzYVhCWktTd2dUQzV3YVhobGJGTjBiM0psYVNoTUxsVk9VRUZEUzE5UVVrVk5WVXhVU1ZCTVdWOUJURkJJUVY5WFJVSkhUQ3dnUmk1d2NtVnRkV3gwYVhCc2VVRnNjR2hoS1N3Z1RDNXdhWGhsYkZOMGIzSmxhU2hNTGxWT1VFRkRTMTlCVEVsSFRrMUZUbFFzSUVZdWRXNXdZV05yUVd4cFoyNXRaVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZabElEMGdUQzVuWlhSUVlYSmhiV1YwWlhJb1RDNVZUbEJCUTB0ZlVrOVhYMHhGVGtkVVNDa3NJR0YwSUQwZ1RDNW5aWFJRWVhKaGJXVjBaWElvVEM1VlRsQkJRMHRmU1UxQlIwVmZTRVZKUjBoVUtTd2diSFFnUFNCTUxtZGxkRkJoY21GdFpYUmxjaWhNTGxWT1VFRkRTMTlUUzBsUVgxQkpXRVZNVXlrc0lFaDBJRDBnVEM1blpYUlFZWEpoYldWMFpYSW9UQzVWVGxCQlEwdGZVMHRKVUY5U1QxZFRLU3dnWVc0Z1BTQk1MbWRsZEZCaGNtRnRaWFJsY2loTUxsVk9VRUZEUzE5VFMwbFFYMGxOUVVkRlV5a3NJSFYwSUQwZ1ZpNXBjME52YlhCeVpYTnpaV1JVWlhoMGRYSmxJRDhnVmk1dGFYQnRZWEJ6V3pCZElEb2dWaTVwYldGblpUc0tJQ0FnSUNBZ0lDQWdJQ0FnVEM1d2FYaGxiRk4wYjNKbGFTaE1MbFZPVUVGRFMxOVNUMWRmVEVWT1IxUklMQ0IxZEM1M2FXUjBhQ2tzSUV3dWNHbDRaV3hUZEc5eVpXa29UQzVWVGxCQlEwdGZTVTFCUjBWZlNFVkpSMGhVTENCMWRDNW9aV2xuYUhRcExDQk1MbkJwZUdWc1UzUnZjbVZwS0V3dVZVNVFRVU5MWDFOTFNWQmZVRWxZUlV4VExDQkZMbTFwYmk1NEtTd2dUQzV3YVhobGJGTjBiM0psYVNoTUxsVk9VRUZEUzE5VFMwbFFYMUpQVjFNc0lFVXViV2x1TG5rcExDQk1MbkJwZUdWc1UzUnZjbVZwS0V3dVZVNVFRVU5MWDFOTFNWQmZTVTFCUjBWVExDQkZMbTFwYmk1NktTd2dWaTVwYzBSaGRHRlVaWGgwZFhKbElIeDhJRll1YVhORVlYUmhNMFJVWlhoMGRYSmxJRDhnVEM1MFpYaFRkV0pKYldGblpUTkVLRkJsTENCckxDQk9MbmdzSUU0dWVTd2dUaTU2TENCNFpTd2dRV1VzSUZWbExDQkVaU3dnVjJVc0lIVjBMbVJoZEdFcElEb2dWaTVwYzBOdmJYQnlaWE56WldSQmNuSmhlVlJsZUhSMWNtVWdQeUFvWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlMbU52Y0hsVVpYaDBkWEpsVkc5VVpYaDBkWEpsTTBRNklIVnVkR1Z6ZEdWa0lITjFjSEJ2Y25RZ1ptOXlJR052YlhCeVpYTnpaV1FnYzNKalZHVjRkSFZ5WlM0aUtTd2dUQzVqYjIxd2NtVnpjMlZrVkdWNFUzVmlTVzFoWjJVelJDaFFaU3dnYXl3Z1RpNTRMQ0JPTG5rc0lFNHVlaXdnZUdVc0lFRmxMQ0JWWlN3Z1JHVXNJSFYwTG1SaGRHRXBLU0E2SUV3dWRHVjRVM1ZpU1cxaFoyVXpSQ2hRWlN3Z2F5d2dUaTU0TENCT0xua3NJRTR1ZWl3Z2VHVXNJRUZsTENCVlpTd2dSR1VzSUZkbExDQjFkQ2tzSUV3dWNHbDRaV3hUZEc5eVpXa29UQzVWVGxCQlEwdGZVazlYWDB4RlRrZFVTQ3dnVm1VcExDQk1MbkJwZUdWc1UzUnZjbVZwS0V3dVZVNVFRVU5MWDBsTlFVZEZYMGhGU1VkSVZDd2dZWFFwTENCTUxuQnBlR1ZzVTNSdmNtVnBLRXd1VlU1UVFVTkxYMU5MU1ZCZlVFbFlSVXhUTENCc2RDa3NJRXd1Y0dsNFpXeFRkRzl5Wldrb1RDNVZUbEJCUTB0ZlUwdEpVRjlTVDFkVExDQklkQ2tzSUV3dWNHbDRaV3hUZEc5eVpXa29UQzVWVGxCQlEwdGZVMHRKVUY5SlRVRkhSVk1zSUdGdUtTd2dheUE5UFQwZ01DQW1KaUJHTG1kbGJtVnlZWFJsVFdsd2JXRndjeUFtSmlCTUxtZGxibVZ5WVhSbFRXbHdiV0Z3S0ZCbEtTd2dTaTUxYm1KcGJtUlVaWGgwZFhKbEtDazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NXBibWwwVkdWNGRIVnlaU0E5SUdaMWJtTjBhVzl1S0VVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnUlM1cGMwTjFZbVZVWlhoMGRYSmxJRDhnZVdVdWMyVjBWR1Y0ZEhWeVpVTjFZbVVvUlN3Z01Da2dPaUJGTG1selJHRjBZVE5FVkdWNGRIVnlaU0EvSUhsbExuTmxkRlJsZUhSMWNtVXpSQ2hGTENBd0tTQTZJRVV1YVhORVlYUmhRWEp5WVhsVVpYaDBkWEpsSUh4OElFVXVhWE5EYjIxd2NtVnpjMlZrUVhKeVlYbFVaWGgwZFhKbElEOGdlV1V1YzJWMFZHVjRkSFZ5WlRKRVFYSnlZWGtvUlN3Z01Da2dPaUI1WlM1elpYUlVaWGgwZFhKbE1rUW9SU3dnTUNrc0lFb3VkVzVpYVc1a1ZHVjRkSFZ5WlNncE93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdWNtVnpaWFJUZEdGMFpTQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmlJRDBnTUN3Z2R5QTlJREFzSUZJZ1BTQnVkV3hzTENCS0xuSmxjMlYwS0Nrc0lFOWxMbkpsYzJWMEtDazdDaUFnSUNBZ0lDQWdmU3dnZEhsd1pXOW1JRjlmVkVoU1JVVmZSRVZXVkU5UFRGTmZYeUE4SUNKMUlpQW1KaUJmWDFSSVVrVkZYMFJGVmxSUFQweFRYMTh1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0ltOWljMlZ5ZG1VaUxDQjdDaUFnSUNBZ0lDQWdJQ0FnSUdSbGRHRnBiRG9nZEdocGN3b2dJQ0FnSUNBZ0lIMHBLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRDQmpiMjl5WkdsdVlYUmxVM2x6ZEdWdEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjJianNLSUNBZ0lIMEtJQ0FnSUdkbGRDQnZkWFJ3ZFhSRGIyeHZjbE53WVdObEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dmRYUndkWFJEYjJ4dmNsTndZV05sT3dvZ0lDQWdmUW9nSUNBZ2MyVjBJRzkxZEhCMWRFTnZiRzl5VTNCaFkyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVYMjkxZEhCMWRFTnZiRzl5VTNCaFkyVWdQU0JsT3dvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NW5aWFJEYjI1MFpYaDBLQ2s3Q2lBZ0lDQWdJQ0FnZEM1a2NtRjNhVzVuUW5WbVptVnlRMjlzYjNKVGNHRmpaU0E5SUdVZ1BUMDlJSEZqSUQ4Z0ltUnBjM0JzWVhrdGNETWlJRG9nSW5OeVoySWlMQ0IwTG5WdWNHRmphME52Ykc5eVUzQmhZMlVnUFNCUlpTNTNiM0pyYVc1blEyOXNiM0pUY0dGalpTQTlQVDBnZG1FZ1B5QWlaR2x6Y0d4aGVTMXdNeUlnT2lBaWMzSm5ZaUk3Q2lBZ0lDQjlDaUFnSUNCblpYUWdjR2g1YzJsallXeHNlVU52Y25KbFkzUk1hV2RvZEhNb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ1ZHaGxJSEJ5YjNCbGNuUjVJQzV3YUhsemFXTmhiR3g1UTI5eWNtVmpkRXhwWjJoMGN5Qm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpQlRaWFFnY21WdVpHVnlaWEl1ZFhObFRHVm5ZV041VEdsbmFIUnpJR2x1YzNSbFlXUXVJaWtzSUNGMGFHbHpMblZ6WlV4bFoyRmplVXhwWjJoMGN6c0tJQ0FnSUgwS0lDQWdJSE5sZENCd2FIbHphV05oYkd4NVEyOXljbVZqZEV4cFoyaDBjeWhsS1NCN0NpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCVWFHVWdjSEp2Y0dWeWRIa2dMbkJvZVhOcFkyRnNiSGxEYjNKeVpXTjBUR2xuYUhSeklHaGhjeUJpWldWdUlISmxiVzkyWldRdUlGTmxkQ0J5Wlc1a1pYSmxjaTUxYzJWTVpXZGhZM2xNYVdkb2RITWdhVzV6ZEdWaFpDNGlLU3dnZEdocGN5NTFjMlZNWldkaFkzbE1hV2RvZEhNZ1BTQWhaVHNLSUNBZ0lIMEtJQ0FnSUdkbGRDQnZkWFJ3ZFhSRmJtTnZaR2x1WnlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCUWNtOXdaWEowZVNBdWIzVjBjSFYwUlc1amIyUnBibWNnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRnVlhObElDNXZkWFJ3ZFhSRGIyeHZjbE53WVdObElHbHVjM1JsWVdRdUlpa3NJSFJvYVhNdWIzVjBjSFYwUTI5c2IzSlRjR0ZqWlNBOVBUMGdkblFnUHlCeWFTQTZJSFprT3dvZ0lDQWdmUW9nSUNBZ2MyVjBJRzkxZEhCMWRFVnVZMjlrYVc1bktHVXBJSHNLSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJRkJ5YjNCbGNuUjVJQzV2ZFhSd2RYUkZibU52WkdsdVp5Qm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpQlZjMlVnTG05MWRIQjFkRU52Ykc5eVUzQmhZMlVnYVc1emRHVmhaQzRpS1N3Z2RHaHBjeTV2ZFhSd2RYUkRiMnh2Y2xOd1lXTmxJRDBnWlNBOVBUMGdjbWtnUHlCMmRDQTZJRTF1T3dvZ0lDQWdmUW9nSUNBZ1oyVjBJSFZ6WlV4bFoyRmplVXhwWjJoMGN5Z3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQlVhR1VnY0hKdmNHVnlkSGtnTG5WelpVeGxaMkZqZVV4cFoyaDBjeUJvWVhNZ1ltVmxiaUJrWlhCeVpXTmhkR1ZrTGlCTmFXZHlZWFJsSUhsdmRYSWdiR2xuYUhScGJtY2dZV05qYjNKa2FXNW5JSFJ2SUhSb1pTQm1iMnhzYjNkcGJtY2daM1ZwWkdVNklHaDBkSEJ6T2k4dlpHbHpZMjkxY25ObExuUm9jbVZsYW5NdWIzSm5MM1F2ZFhCa1lYUmxjeTEwYnkxc2FXZG9kR2x1WnkxcGJpMTBhSEpsWlMxcWN5MXlNVFUxTHpVek56TXpMaUlwTENCMGFHbHpMbDkxYzJWTVpXZGhZM2xNYVdkb2RITTdDaUFnSUNCOUNpQWdJQ0J6WlhRZ2RYTmxUR1ZuWVdONVRHbG5hSFJ6S0dVcElIc0tJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklGUm9aU0J3Y205d1pYSjBlU0F1ZFhObFRHVm5ZV041VEdsbmFIUnpJR2hoY3lCaVpXVnVJR1JsY0hKbFkyRjBaV1F1SUUxcFozSmhkR1VnZVc5MWNpQnNhV2RvZEdsdVp5QmhZMk52Y21ScGJtY2dkRzhnZEdobElHWnZiR3h2ZDJsdVp5Qm5kV2xrWlRvZ2FIUjBjSE02THk5a2FYTmpiM1Z5YzJVdWRHaHlaV1ZxY3k1dmNtY3ZkQzkxY0dSaGRHVnpMWFJ2TFd4cFoyaDBhVzVuTFdsdUxYUm9jbVZsTFdwekxYSXhOVFV2TlRNM016TXVJaWtzSUhSb2FYTXVYM1Z6WlV4bFoyRmplVXhwWjJoMGN5QTlJR1U3Q2lBZ0lDQjlDbjBzSUVOdklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCU2J5QjdDbjA3Q2tOdkxuQnliM1J2ZEhsd1pTNXBjMWRsWWtkTU1WSmxibVJsY21WeUlEMGdJVEE3Q25aaGNpQlFieUE5SUdOc1lYTnpJSE14SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUWdQU0F5TldVdE5TbDdDaUFnSUNBZ0lDQWdkR2hwY3k1cGMwWnZaMFY0Y0RJZ1BTQWhNQ3dnZEdocGN5NXVZVzFsSUQwZ0lpSXNJSFJvYVhNdVkyOXNiM0lnUFNCdVpYY2djR1VvWlNrc0lIUm9hWE11WkdWdWMybDBlU0E5SUhRN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSE14S0hSb2FYTXVZMjlzYjNJc0lIUm9hWE11WkdWdWMybDBlU2s3Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0lrWnZaMFY0Y0RJaUxBb2dJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQjBhR2x6TG01aGJXVXNDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUIwYUdsekxtTnZiRzl5TG1kbGRFaGxlQ2dwTEFvZ0lDQWdJQ0FnSUNBZ0lDQmtaVzV6YVhSNU9pQjBhR2x6TG1SbGJuTnBkSGtLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdmUXA5TENCTWJ5QTlJR05zWVhOeklITXhJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRZ1BTQXhMQ0J1SUQwZ01XVXpLWHNLSUNBZ0lDQWdJQ0IwYUdsekxtbHpSbTluSUQwZ0lUQXNJSFJvYVhNdWJtRnRaU0E5SUNJaUxDQjBhR2x6TG1OdmJHOXlJRDBnYm1WM0lIQmxLR1VwTENCMGFHbHpMbTVsWVhJZ1BTQjBMQ0IwYUdsekxtWmhjaUE5SUc0N0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSE14S0hSb2FYTXVZMjlzYjNJc0lIUm9hWE11Ym1WaGNpd2dkR2hwY3k1bVlYSXBPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNKR2IyY2lMQW9nSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUIwYUdsekxtNWhiV1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lCMGFHbHpMbU52Ykc5eUxtZGxkRWhsZUNncExBb2dJQ0FnSUNBZ0lDQWdJQ0J1WldGeU9pQjBhR2x6TG01bFlYSXNDaUFnSUNBZ0lDQWdJQ0FnSUdaaGNqb2dkR2hwY3k1bVlYSUtJQ0FnSUNBZ0lDQjlPd29nSUNBZ2ZRcDlMQ0JKYnlBOUlHTnNZWE56SUdWNGRHVnVaSE1nU21VZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selUyTmxibVVnUFNBaE1Dd2dkR2hwY3k1MGVYQmxJRDBnSWxOalpXNWxJaXdnZEdocGN5NWlZV05yWjNKdmRXNWtJRDBnYm5Wc2JDd2dkR2hwY3k1bGJuWnBjbTl1YldWdWRDQTlJRzUxYkd3c0lIUm9hWE11Wm05bklEMGdiblZzYkN3Z2RHaHBjeTVpWVdOclozSnZkVzVrUW14MWNuSnBibVZ6Y3lBOUlEQXNJSFJvYVhNdVltRmphMmR5YjNWdVpFbHVkR1Z1YzJsMGVTQTlJREVzSUhSb2FYTXViM1psY25KcFpHVk5ZWFJsY21saGJDQTlJRzUxYkd3c0lIUjVjR1Z2WmlCZlgxUklVa1ZGWDBSRlZsUlBUMHhUWDE4Z1BDQWlkU0lnSmlZZ1gxOVVTRkpGUlY5RVJWWlVUMDlNVTE5ZkxtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ0p2WW5ObGNuWmxJaXdnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmtaWFJoYVd3NklIUm9hWE1LSUNBZ0lDQWdJQ0I5S1NrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsTENCMEtTd2daUzVpWVdOclozSnZkVzVrSUNFOVBTQnVkV3hzSUNZbUlDaDBhR2x6TG1KaFkydG5jbTkxYm1RZ1BTQmxMbUpoWTJ0bmNtOTFibVF1WTJ4dmJtVW9LU2tzSUdVdVpXNTJhWEp2Ym0xbGJuUWdJVDA5SUc1MWJHd2dKaVlnS0hSb2FYTXVaVzUyYVhKdmJtMWxiblFnUFNCbExtVnVkbWx5YjI1dFpXNTBMbU5zYjI1bEtDa3BMQ0JsTG1adlp5QWhQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NW1iMmNnUFNCbExtWnZaeTVqYkc5dVpTZ3BLU3dnZEdocGN5NWlZV05yWjNKdmRXNWtRbXgxY25KcGJtVnpjeUE5SUdVdVltRmphMmR5YjNWdVpFSnNkWEp5YVc1bGMzTXNJSFJvYVhNdVltRmphMmR5YjNWdVpFbHVkR1Z1YzJsMGVTQTlJR1V1WW1GamEyZHliM1Z1WkVsdWRHVnVjMmwwZVN3Z1pTNXZkbVZ5Y21sa1pVMWhkR1Z5YVdGc0lDRTlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxtOTJaWEp5YVdSbFRXRjBaWEpwWVd3Z1BTQmxMbTkyWlhKeWFXUmxUV0YwWlhKcFlXd3VZMnh2Ym1Vb0tTa3NJSFJvYVhNdWJXRjBjbWw0UVhWMGIxVndaR0YwWlNBOUlHVXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQnpkWEJsY2k1MGIwcFRUMDRvWlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVabTluSUNFOVBTQnVkV3hzSUNZbUlDaDBMbTlpYW1WamRDNW1iMmNnUFNCMGFHbHpMbVp2Wnk1MGIwcFRUMDRvS1Nrc0lIUm9hWE11WW1GamEyZHliM1Z1WkVKc2RYSnlhVzVsYzNNZ1BpQXdJQ1ltSUNoMExtOWlhbVZqZEM1aVlXTnJaM0p2ZFc1a1FteDFjbkpwYm1WemN5QTlJSFJvYVhNdVltRmphMmR5YjNWdVpFSnNkWEp5YVc1bGMzTXBMQ0IwYUdsekxtSmhZMnRuY205MWJtUkpiblJsYm5OcGRIa2dJVDA5SURFZ0ppWWdLSFF1YjJKcVpXTjBMbUpoWTJ0bmNtOTFibVJKYm5SbGJuTnBkSGtnUFNCMGFHbHpMbUpoWTJ0bmNtOTFibVJKYm5SbGJuTnBkSGtwTENCME93b2dJQ0FnZlFwOUxDQkpjeUE5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRcGV3b2dJQ0FnSUNBZ0lIUm9hWE11YVhOSmJuUmxjbXhsWVhabFpFSjFabVpsY2lBOUlDRXdMQ0IwYUdsekxtRnljbUY1SUQwZ1pTd2dkR2hwY3k1emRISnBaR1VnUFNCMExDQjBhR2x6TG1OdmRXNTBJRDBnWlNBaFBUMGdkbTlwWkNBd0lEOGdaUzVzWlc1bmRHZ2dMeUIwSURvZ01Dd2dkR2hwY3k1MWMyRm5aU0E5SUVoeUxDQjBhR2x6TG5Wd1pHRjBaVkpoYm1kbElEMGdld29nSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFE2SURBc0NpQWdJQ0FnSUNBZ0lDQWdJR052ZFc1ME9pQXRNUW9nSUNBZ0lDQWdJSDBzSUhSb2FYTXVkbVZ5YzJsdmJpQTlJREFzSUhSb2FYTXVkWFZwWkNBOUlHdDBLQ2s3Q2lBZ0lDQjlDaUFnSUNCdmJsVndiRzloWkVOaGJHeGlZV05yS0NrZ2UzMEtJQ0FnSUhObGRDQnVaV1ZrYzFWd1pHRjBaU2hsS1NCN0NpQWdJQ0FnSUNBZ1pTQTlQVDBnSVRBZ0ppWWdkR2hwY3k1MlpYSnphVzl1S3lzN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJWYzJGblpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRYTmhaMlVnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWEp5WVhrZ1BTQnVaWGNnWlM1aGNuSmhlUzVqYjI1emRISjFZM1J2Y2lobExtRnljbUY1S1N3Z2RHaHBjeTVqYjNWdWRDQTlJR1V1WTI5MWJuUXNJSFJvYVhNdWMzUnlhV1JsSUQwZ1pTNXpkSEpwWkdVc0lIUm9hWE11ZFhOaFoyVWdQU0JsTG5WellXZGxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVVGMEtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQmxJQ285SUhSb2FYTXVjM1J5YVdSbExDQnVJQ285SUhRdWMzUnlhV1JsT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQXNJSElnUFNCMGFHbHpMbk4wY21sa1pUc2dhU0E4SUhJN0lHa3JLeWwwYUdsekxtRnljbUY1VzJVZ0t5QnBYU0E5SUhRdVlYSnlZWGxiYmlBcklHbGRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBLR1VzSUhRZ1BTQXdLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlYSnlZWGt1YzJWMEtHVXNJSFFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9aU2tnZXdvZ0lDQWdJQ0FnSUdVdVlYSnlZWGxDZFdabVpYSnpJRDA5UFNCMmIybGtJREFnSmlZZ0tHVXVZWEp5WVhsQ2RXWm1aWEp6SUQwZ2UzMHBMQ0IwYUdsekxtRnljbUY1TG1KMVptWmxjaTVmZFhWcFpDQTlQVDBnZG05cFpDQXdJQ1ltSUNoMGFHbHpMbUZ5Y21GNUxtSjFabVpsY2k1ZmRYVnBaQ0E5SUd0MEtDa3BMQ0JsTG1GeWNtRjVRblZtWm1WeWMxdDBhR2x6TG1GeWNtRjVMbUoxWm1abGNpNWZkWFZwWkYwZ1BUMDlJSFp2YVdRZ01DQW1KaUFvWlM1aGNuSmhlVUoxWm1abGNuTmJkR2hwY3k1aGNuSmhlUzVpZFdabVpYSXVYM1YxYVdSZElEMGdkR2hwY3k1aGNuSmhlUzV6YkdsalpTZ3dLUzVpZFdabVpYSXBPd29nSUNBZ0lDQWdJR3hsZENCMElEMGdibVYzSUhSb2FYTXVZWEp5WVhrdVkyOXVjM1J5ZFdOMGIzSW9aUzVoY25KaGVVSjFabVpsY25OYmRHaHBjeTVoY25KaGVTNWlkV1ptWlhJdVgzVjFhV1JkS1N3Z2JpQTlJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0hRc0lIUm9hWE11YzNSeWFXUmxLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaTV6WlhSVmMyRm5aU2gwYUdsekxuVnpZV2RsS1N3Z2Jqc0tJQ0FnSUgwS0lDQWdJRzl1VlhCc2IyRmtLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXZibFZ3Ykc5aFpFTmhiR3hpWVdOcklEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1WVhKeVlYbENkV1ptWlhKeklEMDlQU0IyYjJsa0lEQWdKaVlnS0dVdVlYSnlZWGxDZFdabVpYSnpJRDBnZTMwcExDQjBhR2x6TG1GeWNtRjVMbUoxWm1abGNpNWZkWFZwWkNBOVBUMGdkbTlwWkNBd0lDWW1JQ2gwYUdsekxtRnljbUY1TG1KMVptWmxjaTVmZFhWcFpDQTlJR3QwS0NrcExDQmxMbUZ5Y21GNVFuVm1abVZ5YzF0MGFHbHpMbUZ5Y21GNUxtSjFabVpsY2k1ZmRYVnBaRjBnUFQwOUlIWnZhV1FnTUNBbUppQW9aUzVoY25KaGVVSjFabVpsY25OYmRHaHBjeTVoY25KaGVTNWlkV1ptWlhJdVgzVjFhV1JkSUQwZ1FYSnlZWGt1Wm5KdmJTaHVaWGNnVldsdWRETXlRWEp5WVhrb2RHaHBjeTVoY25KaGVTNWlkV1ptWlhJcEtTa3NJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RYVnBaRG9nZEdocGN5NTFkV2xrTEFvZ0lDQWdJQ0FnSUNBZ0lDQmlkV1ptWlhJNklIUm9hWE11WVhKeVlYa3VZblZtWm1WeUxsOTFkV2xrTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCMGFHbHpMbUZ5Y21GNUxtTnZibk4wY25WamRHOXlMbTVoYldVc0NpQWdJQ0FnSUNBZ0lDQWdJSE4wY21sa1pUb2dkR2hwY3k1emRISnBaR1VLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdmUXA5TENCUWRDQTlJRzVsZHlCQkxDQlJhU0E5SUdOc1lYTnpJSE14SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRzSUdrZ1BTQWhNU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NXBjMGx1ZEdWeWJHVmhkbVZrUW5WbVptVnlRWFIwY21saWRYUmxJRDBnSVRBc0lIUm9hWE11Ym1GdFpTQTlJQ0lpTENCMGFHbHpMbVJoZEdFZ1BTQmxMQ0IwYUdsekxtbDBaVzFUYVhwbElEMGdkQ3dnZEdocGN5NXZabVp6WlhRZ1BTQnVMQ0IwYUdsekxtNXZjbTFoYkdsNlpXUWdQU0JwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBJR052ZFc1MEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1SaGRHRXVZMjkxYm5RN0NpQWdJQ0I5Q2lBZ0lDQm5aWFFnWVhKeVlYa29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpHRjBZUzVoY25KaGVUc0tJQ0FnSUgwS0lDQWdJSE5sZENCdVpXVmtjMVZ3WkdGMFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoTG01bFpXUnpWWEJrWVhSbElEMGdaVHNLSUNBZ0lIMEtJQ0FnSUdGd2NHeDVUV0YwY21sNE5DaGxLU0I3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Dd2diaUE5SUhSb2FYTXVaR0YwWVM1amIzVnVkRHNnZENBOElHNDdJSFFyS3lsUWRDNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLSFJvYVhNc0lIUXBMQ0JRZEM1aGNIQnNlVTFoZEhKcGVEUW9aU2tzSUhSb2FYTXVjMlYwV0ZsYUtIUXNJRkIwTG5nc0lGQjBMbmtzSUZCMExub3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1lYQndiSGxPYjNKdFlXeE5ZWFJ5YVhnb1pTa2dld29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBc0lHNGdQU0IwYUdsekxtTnZkVzUwT3lCMElEd2dianNnZENzcktWQjBMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvZEdocGN5d2dkQ2tzSUZCMExtRndjR3g1VG05eWJXRnNUV0YwY21sNEtHVXBMQ0IwYUdsekxuTmxkRmhaV2loMExDQlFkQzU0TENCUWRDNTVMQ0JRZEM1NktUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSeVlXNXpabTl5YlVScGNtVmpkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJSFJvYVhNdVkyOTFiblE3SUhRZ1BDQnVPeUIwS3lzcFVIUXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2gwYUdsekxDQjBLU3dnVUhRdWRISmhibk5tYjNKdFJHbHlaV04wYVc5dUtHVXBMQ0IwYUdsekxuTmxkRmhaV2loMExDQlFkQzU0TENCUWRDNTVMQ0JRZEM1NktUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRGZ29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTV2Y20xaGJHbDZaV1FnSmlZZ0tIUWdQU0JDWlNoMExDQjBhR2x6TG1GeWNtRjVLU2tzSUhSb2FYTXVaR0YwWVM1aGNuSmhlVnRsSUNvZ2RHaHBjeTVrWVhSaExuTjBjbWxrWlNBcklIUm9hWE11YjJabWMyVjBYU0E5SUhRc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUlpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXeHBlbVZrSUNZbUlDaDBJRDBnUW1Vb2RDd2dkR2hwY3k1aGNuSmhlU2twTENCMGFHbHpMbVJoZEdFdVlYSnlZWGxiWlNBcUlIUm9hWE11WkdGMFlTNXpkSEpwWkdVZ0t5QjBhR2x6TG05bVpuTmxkQ0FySURGZElEMGdkQ3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZvb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNXZjbTFoYkdsNlpXUWdKaVlnS0hRZ1BTQkNaU2gwTENCMGFHbHpMbUZ5Y21GNUtTa3NJSFJvYVhNdVpHRjBZUzVoY25KaGVWdGxJQ29nZEdocGN5NWtZWFJoTG5OMGNtbGtaU0FySUhSb2FYTXViMlptYzJWMElDc2dNbDBnUFNCMExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBWeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNhWHBsWkNBbUppQW9kQ0E5SUVKbEtIUXNJSFJvYVhNdVlYSnlZWGtwS1N3Z2RHaHBjeTVrWVhSaExtRnljbUY1VzJVZ0tpQjBhR2x6TG1SaGRHRXVjM1J5YVdSbElDc2dkR2hwY3k1dlptWnpaWFFnS3lBelhTQTlJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSWUtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVpHRjBZUzVoY25KaGVWdGxJQ29nZEdocGN5NWtZWFJoTG5OMGNtbGtaU0FySUhSb2FYTXViMlptYzJWMFhUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXeHBlbVZrSUNZbUlDaDBJRDBnVDNRb2RDd2dkR2hwY3k1aGNuSmhlU2twTENCME93b2dJQ0FnZlFvZ0lDQWdaMlYwV1NobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1SaGRHRXVZWEp5WVhsYlpTQXFJSFJvYVhNdVpHRjBZUzV6ZEhKcFpHVWdLeUIwYUdsekxtOW1abk5sZENBcklERmRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmNtMWhiR2w2WldRZ0ppWWdLSFFnUFNCUGRDaDBMQ0IwYUdsekxtRnljbUY1S1Nrc0lIUTdDaUFnSUNCOUNpQWdJQ0JuWlhSYUtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVpHRjBZUzVoY25KaGVWdGxJQ29nZEdocGN5NWtZWFJoTG5OMGNtbGtaU0FySUhSb2FYTXViMlptYzJWMElDc2dNbDA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJtOXliV0ZzYVhwbFpDQW1KaUFvZENBOUlFOTBLSFFzSUhSb2FYTXVZWEp5WVhrcEtTd2dkRHNLSUNBZ0lIMEtJQ0FnSUdkbGRGY29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWtZWFJoTG1GeWNtRjVXMlVnS2lCMGFHbHpMbVJoZEdFdWMzUnlhV1JsSUNzZ2RHaHBjeTV2Wm1aelpYUWdLeUF6WFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViM0p0WVd4cGVtVmtJQ1ltSUNoMElEMGdUM1FvZEN3Z2RHaHBjeTVoY25KaGVTa3BMQ0IwT3dvZ0lDQWdmUW9nSUNBZ2MyVjBXRmtvWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsSUQwZ1pTQXFJSFJvYVhNdVpHRjBZUzV6ZEhKcFpHVWdLeUIwYUdsekxtOW1abk5sZEN3Z2RHaHBjeTV1YjNKdFlXeHBlbVZrSUNZbUlDaDBJRDBnUW1Vb2RDd2dkR2hwY3k1aGNuSmhlU2tzSUc0Z1BTQkNaU2h1TENCMGFHbHpMbUZ5Y21GNUtTa3NJSFJvYVhNdVpHRjBZUzVoY25KaGVWdGxJQ3NnTUYwZ1BTQjBMQ0IwYUdsekxtUmhkR0V1WVhKeVlYbGJaU0FySURGZElEMGdiaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZoWldpaGxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1VnUFNCbElDb2dkR2hwY3k1a1lYUmhMbk4wY21sa1pTQXJJSFJvYVhNdWIyWm1jMlYwTENCMGFHbHpMbTV2Y20xaGJHbDZaV1FnSmlZZ0tIUWdQU0JDWlNoMExDQjBhR2x6TG1GeWNtRjVLU3dnYmlBOUlFSmxLRzRzSUhSb2FYTXVZWEp5WVhrcExDQnBJRDBnUW1Vb2FTd2dkR2hwY3k1aGNuSmhlU2twTENCMGFHbHpMbVJoZEdFdVlYSnlZWGxiWlNBcklEQmRJRDBnZEN3Z2RHaHBjeTVrWVhSaExtRnljbUY1VzJVZ0t5QXhYU0E5SUc0c0lIUm9hWE11WkdGMFlTNWhjbkpoZVZ0bElDc2dNbDBnUFNCcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBXRmxhVnlobExDQjBMQ0J1TENCcExDQnlLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1VnUFNCbElDb2dkR2hwY3k1a1lYUmhMbk4wY21sa1pTQXJJSFJvYVhNdWIyWm1jMlYwTENCMGFHbHpMbTV2Y20xaGJHbDZaV1FnSmlZZ0tIUWdQU0JDWlNoMExDQjBhR2x6TG1GeWNtRjVLU3dnYmlBOUlFSmxLRzRzSUhSb2FYTXVZWEp5WVhrcExDQnBJRDBnUW1Vb2FTd2dkR2hwY3k1aGNuSmhlU2tzSUhJZ1BTQkNaU2h5TENCMGFHbHpMbUZ5Y21GNUtTa3NJSFJvYVhNdVpHRjBZUzVoY25KaGVWdGxJQ3NnTUYwZ1BTQjBMQ0IwYUdsekxtUmhkR0V1WVhKeVlYbGJaU0FySURGZElEMGdiaXdnZEdocGN5NWtZWFJoTG1GeWNtRjVXMlVnS3lBeVhTQTlJR2tzSUhSb2FYTXVaR0YwWVM1aGNuSmhlVnRsSUNzZ00xMGdQU0J5TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9aU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaGxJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSWxSSVVrVkZMa2x1ZEdWeWJHVmhkbVZrUW5WbVptVnlRWFIwY21saWRYUmxMbU5zYjI1bEtDazZJRU5zYjI1cGJtY2dZVzRnYVc1MFpYSnNaV0YyWldRZ1luVm1abVZ5SUdGMGRISnBZblYwWlNCM2FXeHNJR1JsTFdsdWRHVnliR1ZoZG1VZ1luVm1abVZ5SUdSaGRHRXVJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1cxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQTdJRzRnUENCMGFHbHpMbU52ZFc1ME95QnVLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0J1SUNvZ2RHaHBjeTVrWVhSaExuTjBjbWxrWlNBcklIUm9hWE11YjJabWMyVjBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnlJRDBnTURzZ2NpQThJSFJvYVhNdWFYUmxiVk5wZW1VN0lISXJLeWwwTG5CMWMyZ29kR2hwY3k1a1lYUmhMbUZ5Y21GNVcya2dLeUJ5WFNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QmxkQ2h1WlhjZ2RHaHBjeTVoY25KaGVTNWpiMjV6ZEhKMVkzUnZjaWgwS1N3Z2RHaHBjeTVwZEdWdFUybDZaU3dnZEdocGN5NXViM0p0WVd4cGVtVmtLVHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdjbVYwZFhKdUlHVXVhVzUwWlhKc1pXRjJaV1JDZFdabVpYSnpJRDA5UFNCMmIybGtJREFnSmlZZ0tHVXVhVzUwWlhKc1pXRjJaV1JDZFdabVpYSnpJRDBnZTMwcExDQmxMbWx1ZEdWeWJHVmhkbVZrUW5WbVptVnljMXQwYUdsekxtUmhkR0V1ZFhWcFpGMGdQVDA5SUhadmFXUWdNQ0FtSmlBb1pTNXBiblJsY214bFlYWmxaRUoxWm1abGNuTmJkR2hwY3k1a1lYUmhMblYxYVdSZElEMGdkR2hwY3k1a1lYUmhMbU5zYjI1bEtHVXBLU3dnYm1WM0lITXhLR1V1YVc1MFpYSnNaV0YyWldSQ2RXWm1aWEp6VzNSb2FYTXVaR0YwWVM1MWRXbGtYU3dnZEdocGN5NXBkR1Z0VTJsNlpTd2dkR2hwY3k1dlptWnpaWFFzSUhSb2FYTXVibTl5YldGc2FYcGxaQ2s3Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hsSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0lsUklVa1ZGTGtsdWRHVnliR1ZoZG1Wa1FuVm1abVZ5UVhSMGNtbGlkWFJsTG5SdlNsTlBUaWdwT2lCVFpYSnBZV3hwZW1sdVp5QmhiaUJwYm5SbGNteGxZWFpsWkNCaWRXWm1aWElnWVhSMGNtbGlkWFJsSUhkcGJHd2daR1V0YVc1MFpYSnNaV0YyWlNCaWRXWm1aWElnWkdGMFlTNGlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Ec2diaUE4SUhSb2FYTXVZMjkxYm5RN0lHNHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJRzRnS2lCMGFHbHpMbVJoZEdFdWMzUnlhV1JsSUNzZ2RHaHBjeTV2Wm1aelpYUTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElISWdQU0F3T3lCeUlEd2dkR2hwY3k1cGRHVnRVMmw2WlRzZ2Npc3JLWFF1Y0hWemFDaDBhR2x6TG1SaGRHRXVZWEp5WVhsYmFTQXJJSEpkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJWTnBlbVU2SUhSb2FYTXVhWFJsYlZOcGVtVXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCMGFHbHpMbUZ5Y21GNUxtTnZibk4wY25WamRHOXlMbTVoYldVc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNuSmhlVG9nZEN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dmNtMWhiR2w2WldRNklIUm9hWE11Ym05eWJXRnNhWHBsWkFvZ0lDQWdJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJSDBnWld4elpTQnlaWFIxY200Z1pTNXBiblJsY214bFlYWmxaRUoxWm1abGNuTWdQVDA5SUhadmFXUWdNQ0FtSmlBb1pTNXBiblJsY214bFlYWmxaRUoxWm1abGNuTWdQU0I3ZlNrc0lHVXVhVzUwWlhKc1pXRjJaV1JDZFdabVpYSnpXM1JvYVhNdVpHRjBZUzUxZFdsa1hTQTlQVDBnZG05cFpDQXdJQ1ltSUNobExtbHVkR1Z5YkdWaGRtVmtRblZtWm1WeWMxdDBhR2x6TG1SaGRHRXVkWFZwWkYwZ1BTQjBhR2x6TG1SaGRHRXVkRzlLVTA5T0tHVXBLU3dnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBjMGx1ZEdWeWJHVmhkbVZrUW5WbVptVnlRWFIwY21saWRYUmxPaUFoTUN3S0lDQWdJQ0FnSUNBZ0lDQWdhWFJsYlZOcGVtVTZJSFJvYVhNdWFYUmxiVk5wZW1Vc0NpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFNklIUm9hWE11WkdGMFlTNTFkV2xrTEFvZ0lDQWdJQ0FnSUNBZ0lDQnZabVp6WlhRNklIUm9hWE11YjJabWMyVjBMQW9nSUNBZ0lDQWdJQ0FnSUNCdWIzSnRZV3hwZW1Wa09pQjBhR2x6TG01dmNtMWhiR2w2WldRS0lDQWdJQ0FnSUNCOU93b2dJQ0FnZlFwOUxDQmxZU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdZblFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1N3Z2RHaHBjeTVwYzFOd2NtbDBaVTFoZEdWeWFXRnNJRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pUY0hKcGRHVk5ZWFJsY21saGJDSXNJSFJvYVhNdVkyOXNiM0lnUFNCdVpYY2djR1VvTVRZM056Y3lNVFVwTENCMGFHbHpMbTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVZV3h3YUdGTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG5KdmRHRjBhVzl1SUQwZ01Dd2dkR2hwY3k1emFYcGxRWFIwWlc1MVlYUnBiMjRnUFNBaE1Dd2dkR2hwY3k1MGNtRnVjM0JoY21WdWRDQTlJQ0V3TENCMGFHbHpMbVp2WnlBOUlDRXdMQ0IwYUdsekxuTmxkRlpoYkhWbGN5aGxLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG1OdmJHOXlMbU52Y0hrb1pTNWpiMnh2Y2lrc0lIUm9hWE11YldGd0lEMGdaUzV0WVhBc0lIUm9hWE11WVd4d2FHRk5ZWEFnUFNCbExtRnNjR2hoVFdGd0xDQjBhR2x6TG5KdmRHRjBhVzl1SUQwZ1pTNXliM1JoZEdsdmJpd2dkR2hwY3k1emFYcGxRWFIwWlc1MVlYUnBiMjRnUFNCbExuTnBlbVZCZEhSbGJuVmhkR2x2Yml3Z2RHaHBjeTVtYjJjZ1BTQmxMbVp2Wnl3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnU1drc0lHUnpJRDBnYm1WM0lFRXNJRlZwSUQwZ2JtVjNJRUVzSUVScElEMGdibVYzSUVFc0lFNXBJRDBnYm1WM0lGb3NJR1p6SUQwZ2JtVjNJRm9zSUVOa0lEMGdibVYzSUhwbExDQm9jaUE5SUc1bGR5QkJMQ0J3Y3lBOUlHNWxkeUJCTENCMWNpQTlJRzVsZHlCQkxDQk1hQ0E5SUc1bGR5QmFMQ0JxWVNBOUlHNWxkeUJhTENCSmFDQTlJRzVsZHlCYUxDQlZieUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdTbVVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlHNWxkeUJsWVNsN0NpQWdJQ0FnSUNBZ2FXWWdLSE4xY0dWeUtDa3NJSFJvYVhNdWFYTlRjSEpwZEdVZ1BTQWhNQ3dnZEdocGN5NTBlWEJsSUQwZ0lsTndjbWwwWlNJc0lFbHBJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdTV2tnUFNCdVpYY2dSMlU3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2JtVjNJRVpzYjJGME16SkJjbkpoZVNoYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdExqVXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXRMalVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdU5Td0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDMHVOU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM0MUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xqVXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F0TGpVc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdU5Td0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNUW9nSUNBZ0lDQWdJQ0FnSUNCZEtTd2diaUE5SUc1bGR5QkpjeWgwTENBMUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnU1drdWMyVjBTVzVrWlhnb1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRElzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F6Q2lBZ0lDQWdJQ0FnSUNBZ0lGMHBMQ0JKYVM1elpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaXdnYm1WM0lGRnBLRzRzSURNc0lEQXNJQ0V4S1Nrc0lFbHBMbk5sZEVGMGRISnBZblYwWlNnaWRYWWlMQ0J1WlhjZ1VXa29iaXdnTWl3Z015d2dJVEVwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RHaHBjeTVuWlc5dFpYUnllU0E5SUVscExDQjBhR2x6TG0xaGRHVnlhV0ZzSUQwZ1pTd2dkR2hwY3k1alpXNTBaWElnUFNCdVpYY2dXaWd1TlN3Z0xqVXBPd29nSUNBZ2ZRb2dJQ0FnY21GNVkyRnpkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdaUzVqWVcxbGNtRWdQVDA5SUc1MWJHd2dKaVlnWTI5dWMyOXNaUzVsY25KdmNpZ25WRWhTUlVVdVUzQnlhWFJsT2lBaVVtRjVZMkZ6ZEdWeUxtTmhiV1Z5WVNJZ2JtVmxaSE1nZEc4Z1ltVWdjMlYwSUdsdUlHOXlaR1Z5SUhSdklISmhlV05oYzNRZ1lXZGhhVzV6ZENCemNISnBkR1Z6TGljcExDQlZhUzV6WlhSR2NtOXRUV0YwY21sNFUyTmhiR1VvZEdocGN5NXRZWFJ5YVhoWGIzSnNaQ2tzSUVOa0xtTnZjSGtvWlM1allXMWxjbUV1YldGMGNtbDRWMjl5YkdRcExDQjBhR2x6TG0xdlpHVnNWbWxsZDAxaGRISnBlQzV0ZFd4MGFYQnNlVTFoZEhKcFkyVnpLR1V1WTJGdFpYSmhMbTFoZEhKcGVGZHZjbXhrU1c1MlpYSnpaU3dnZEdocGN5NXRZWFJ5YVhoWGIzSnNaQ2tzSUVScExuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWgwYUdsekxtMXZaR1ZzVm1sbGQwMWhkSEpwZUNrc0lHVXVZMkZ0WlhKaExtbHpVR1Z5YzNCbFkzUnBkbVZEWVcxbGNtRWdKaVlnZEdocGN5NXRZWFJsY21saGJDNXphWHBsUVhSMFpXNTFZWFJwYjI0Z1BUMDlJQ0V4SUNZbUlGVnBMbTExYkhScGNHeDVVMk5oYkdGeUtDMUVhUzU2S1RzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXViV0YwWlhKcFlXd3VjbTkwWVhScGIyNHNJR2tzSUhJN0NpQWdJQ0FnSUNBZ2JpQWhQVDBnTUNBbUppQW9jaUE5SUUxaGRHZ3VZMjl6S0c0cExDQnBJRDBnVFdGMGFDNXphVzRvYmlrcE93b2dJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ2RHaHBjeTVqWlc1MFpYSTdDaUFnSUNBZ0lDQWdaSElvYUhJdWMyVjBLQzB1TlN3Z0xTNDFMQ0F3S1N3Z1JHa3NJR0VzSUZWcExDQnBMQ0J5S1N3Z1pISW9jSE11YzJWMEtDNDFMQ0F0TGpVc0lEQXBMQ0JFYVN3Z1lTd2dWV2tzSUdrc0lISXBMQ0JrY2loMWNpNXpaWFFvTGpVc0lDNDFMQ0F3S1N3Z1JHa3NJR0VzSUZWcExDQnBMQ0J5S1N3Z1RHZ3VjMlYwS0RBc0lEQXBMQ0JxWVM1elpYUW9NU3dnTUNrc0lFbG9Mbk5sZENneExDQXhLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJR1V1Y21GNUxtbHVkR1Z5YzJWamRGUnlhV0Z1WjJ4bEtHaHlMQ0J3Y3l3Z2RYSXNJQ0V4TENCa2N5azdDaUFnSUNBZ0lDQWdhV1lnS0c4Z1BUMDlJRzUxYkd3Z0ppWWdLR1J5S0hCekxuTmxkQ2d0TGpVc0lDNDFMQ0F3S1N3Z1JHa3NJR0VzSUZWcExDQnBMQ0J5S1N3Z2FtRXVjMlYwS0RBc0lERXBMQ0J2SUQwZ1pTNXlZWGt1YVc1MFpYSnpaV04wVkhKcFlXNW5iR1VvYUhJc0lIVnlMQ0J3Y3l3Z0lURXNJR1J6S1N3Z2J5QTlQVDBnYm5Wc2JDa3BJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlHVXVjbUY1TG05eWFXZHBiaTVrYVhOMFlXNWpaVlJ2S0dSektUc0tJQ0FnSUNBZ0lDQmpJRHdnWlM1dVpXRnlJSHg4SUdNZ1BpQmxMbVpoY2lCOGZDQjBMbkIxYzJnb2V3b2dJQ0FnSUNBZ0lDQWdJQ0JrYVhOMFlXNWpaVG9nWXl3S0lDQWdJQ0FnSUNBZ0lDQWdjRzlwYm5RNklHUnpMbU5zYjI1bEtDa3NDaUFnSUNBZ0lDQWdJQ0FnSUhWMk9pQlZiaTVuWlhSSmJuUmxjbkJ2YkdGMGFXOXVLR1J6TENCb2Npd2djSE1zSUhWeUxDQk1hQ3dnYW1Fc0lFbG9MQ0J1WlhjZ1dpa3NDaUFnSUNBZ0lDQWdJQ0FnSUdaaFkyVTZJRzUxYkd3c0NpQWdJQ0FnSUNBZ0lDQWdJRzlpYW1WamREb2dkR2hwY3dvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlN3Z2RDa3NJR1V1WTJWdWRHVnlJQ0U5UFNCMmIybGtJREFnSmlZZ2RHaHBjeTVqWlc1MFpYSXVZMjl3ZVNobExtTmxiblJsY2lrc0lIUm9hWE11YldGMFpYSnBZV3dnUFNCbExtMWhkR1Z5YVdGc0xDQjBhR2x6T3dvZ0lDQWdmUXA5T3dwbWRXNWpkR2x2YmlCa2NpaHpNU3dnWlN3Z2RDd2diaXdnYVN3Z2Npa2dld29nSUNBZ1Rta3VjM1ZpVm1WamRHOXljeWh6TVN3Z2RDa3VZV1JrVTJOaGJHRnlLQzQxS1M1dGRXeDBhWEJzZVNodUtTd2dhU0FoUFQwZ2RtOXBaQ0F3SUQ4Z0tHWnpMbmdnUFNCeUlDb2dUbWt1ZUNBdElHa2dLaUJPYVM1NUxDQm1jeTU1SUQwZ2FTQXFJRTVwTG5nZ0t5QnlJQ29nVG1rdWVTa2dPaUJtY3k1amIzQjVLRTVwS1N3Z2N6RXVZMjl3ZVNobEtTd2djekV1ZUNBclBTQm1jeTU0TENCek1TNTVJQ3M5SUdaekxua3NJSE14TG1Gd2NHeDVUV0YwY21sNE5DaERaQ2s3Q24wS2RtRnlJR1p5SUQwZ2JtVjNJRUVzSUZWb0lEMGdibVYzSUVFc0lFUnZJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QktaU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVYMk4xY25KbGJuUk1aWFpsYkNBOUlEQXNJSFJvYVhNdWRIbHdaU0E5SUNKTVQwUWlMQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aDBhR2x6TENCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZG1Wc2N6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSVRBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nVzEwS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FYTk1UMFE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUFoTUFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU2tzSUhSb2FYTXVZWFYwYjFWd1pHRjBaU0E5SUNFd093b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjM1Z3WlhJdVkyOXdlU2hsTENBaE1TazdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbXhsZG1Wc2N6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3TENCcElEMGdkQzVzWlc1bmRHZzdJRzRnUENCcE95QnVLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUmJibDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WVdSa1RHVjJaV3dvY2k1dlltcGxZM1F1WTJ4dmJtVW9LU3dnY2k1a2FYTjBZVzVqWlN3Z2NpNW9lWE4wWlhKbGMybHpLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlYVjBiMVZ3WkdGMFpTQTlJR1V1WVhWMGIxVndaR0YwWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGa1pFeGxkbVZzS0dVc0lIUWdQU0F3TENCdUlEMGdNQ2tnZXdvZ0lDQWdJQ0FnSUhRZ1BTQk5ZWFJvTG1GaWN5aDBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdWJHVjJaV3h6TENCeU93b2dJQ0FnSUNBZ0lHWnZjaWh5SUQwZ01Ec2djaUE4SUdrdWJHVnVaM1JvSUNZbUlDRW9kQ0E4SUdsYmNsMHVaR2x6ZEdGdVkyVXBPeUJ5S3lzcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCcExuTndiR2xqWlNoeUxDQXdMQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUnBjM1JoYm1ObE9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCb2VYTjBaWEpsYzJsek9pQnVMQW9nSUNBZ0lDQWdJQ0FnSUNCdlltcGxZM1E2SUdVS0lDQWdJQ0FnSUNCOUtTd2dkR2hwY3k1aFpHUW9aU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSRGRYSnlaVzUwVEdWMlpXd29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyTjFjbkpsYm5STVpYWmxiRHNLSUNBZ0lIMEtJQ0FnSUdkbGRFOWlhbVZqZEVadmNrUnBjM1JoYm1ObEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdWJHVjJaV3h6T3dvZ0lDQWdJQ0FnSUdsbUlDaDBMbXhsYm1kMGFDQStJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc0c0lHazdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHVJRDBnTVN3Z2FTQTlJSFF1YkdWdVozUm9PeUJ1SUR3Z2FUc2diaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnZEZ0dVhTNWthWE4wWVc1alpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwVzI1ZExtOWlhbVZqZEM1MmFYTnBZbXhsSUNZbUlDaHlJQzA5SUhJZ0tpQjBXMjVkTG1oNWMzUmxjbVZ6YVhNcExDQmxJRHdnY2lrZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJiYmlBdElERmRMbTlpYW1WamREc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3Q2lBZ0lDQjlDaUFnSUNCeVlYbGpZWE4wS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVzWlhabGJITXViR1Z1WjNSb0lENGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQm1jaTV6WlhSR2NtOXRUV0YwY21sNFVHOXphWFJwYjI0b2RHaHBjeTV0WVhSeWFYaFhiM0pzWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdaUzV5WVhrdWIzSnBaMmx1TG1ScGMzUmhibU5sVkc4b1puSXBPd29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWRsZEU5aWFtVmpkRVp2Y2tScGMzUmhibU5sS0drcExuSmhlV05oYzNRb1pTd2dkQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ2RYQmtZWFJsS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11YkdWMlpXeHpPd29nSUNBZ0lDQWdJR2xtSUNoMExteGxibWQwYUNBK0lERXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1puSXVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0dVdWJXRjBjbWw0VjI5eWJHUXBMQ0JWYUM1elpYUkdjbTl0VFdGMGNtbDRVRzl6YVhScGIyNG9kR2hwY3k1dFlYUnlhWGhYYjNKc1pDazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnWm5JdVpHbHpkR0Z1WTJWVWJ5aFZhQ2tnTHlCbExucHZiMjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUmJNRjB1YjJKcVpXTjBMblpwYzJsaWJHVWdQU0FoTURzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrc0lISTdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHBJRDBnTVN3Z2NpQTlJSFF1YkdWdVozUm9PeUJwSUR3Z2Nqc2dhU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnZEZ0cFhTNWthWE4wWVc1alpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwVzJsZExtOWlhbVZqZEM1MmFYTnBZbXhsSUNZbUlDaGhJQzA5SUdFZ0tpQjBXMmxkTG1oNWMzUmxjbVZ6YVhNcExDQnVJRDQ5SUdFcElIUmJhU0F0SURGZExtOWlhbVZqZEM1MmFYTnBZbXhsSUQwZ0lURXNJSFJiYVYwdWIySnFaV04wTG5acGMybGliR1VnUFNBaE1Ec0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0hSb2FYTXVYMk4xY25KbGJuUk1aWFpsYkNBOUlHa2dMU0F4T3lCcElEd2djanNnYVNzcktYUmJhVjB1YjJKcVpXTjBMblpwYzJsaWJHVWdQU0FoTVRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdjM1Z3WlhJdWRHOUtVMDlPS0dVcE93b2dJQ0FnSUNBZ0lIUm9hWE11WVhWMGIxVndaR0YwWlNBOVBUMGdJVEVnSmlZZ0tIUXViMkpxWldOMExtRjFkRzlWY0dSaGRHVWdQU0FoTVNrc0lIUXViMkpxWldOMExteGxkbVZzY3lBOUlGdGRPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1c1pYWmxiSE03Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Dd2djaUE5SUc0dWJHVnVaM1JvT3lCcElEd2djanNnYVNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHRWdQU0J1VzJsZE93b2dJQ0FnSUNBZ0lDQWdJQ0IwTG05aWFtVmpkQzVzWlhabGJITXVjSFZ6YUNoN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlltcGxZM1E2SUdFdWIySnFaV04wTG5WMWFXUXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE4wWVc1alpUb2dZUzVrYVhOMFlXNWpaU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2g1YzNSbGNtVnphWE02SUdFdWFIbHpkR1Z5WlhOcGN3b2dJQ0FnSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRN0NpQWdJQ0I5Q24wc0lFUm9JRDBnYm1WM0lFRXNJRTVvSUQwZ2JtVjNJR3BsTENCUGFDQTlJRzVsZHlCcVpTd2dWekFnUFNCdVpYY2dRU3dnUm1nZ1BTQnVaWGNnZW1Vc0lFOXBJRDBnYm1WM0lFRXNJR1Z2SUQwZ2JtVjNJRmwwTENCQ2FDQTlJRzVsZHlCNlpTd2dkRzhnUFNCdVpYY2dhR2tzSUU1dklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCTmRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMEtTd2dkR2hwY3k1cGMxTnJhVzV1WldSTlpYTm9JRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pUYTJsdWJtVmtUV1Z6YUNJc0lIUm9hWE11WW1sdVpFMXZaR1VnUFNBaVlYUjBZV05vWldRaUxDQjBhR2x6TG1KcGJtUk5ZWFJ5YVhnZ1BTQnVaWGNnZW1Vc0lIUm9hWE11WW1sdVpFMWhkSEpwZUVsdWRtVnljMlVnUFNCdVpYY2dlbVVzSUhSb2FYTXVZbTkxYm1ScGJtZENiM2dnUFNCdWRXeHNMQ0IwYUdsekxtSnZkVzVrYVc1blUzQm9aWEpsSUQwZ2JuVnNiRHNLSUNBZ0lIMEtJQ0FnSUdOdmJYQjFkR1ZDYjNWdVpHbHVaMEp2ZUNncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11WjJWdmJXVjBjbms3Q2lBZ0lDQWdJQ0FnZEdocGN5NWliM1Z1WkdsdVowSnZlQ0E5UFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVpYjNWdVpHbHVaMEp2ZUNBOUlHNWxkeUJSZENrc0lIUm9hWE11WW05MWJtUnBibWRDYjNndWJXRnJaVVZ0Y0hSNUtDazdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbWRsZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUtUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3T3lCdUlEd2dkQzVqYjNWdWREc2diaXNyS1U5cExtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9kQ3dnYmlrc0lIUm9hWE11WVhCd2JIbENiMjVsVkhKaGJuTm1iM0p0S0c0c0lFOXBLU3dnZEdocGN5NWliM1Z1WkdsdVowSnZlQzVsZUhCaGJtUkNlVkJ2YVc1MEtFOXBLVHNLSUNBZ0lIMEtJQ0FnSUdOdmJYQjFkR1ZDYjNWdVpHbHVaMU53YUdWeVpTZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVoyVnZiV1YwY25rN0NpQWdJQ0FnSUNBZ2RHaHBjeTVpYjNWdVpHbHVaMU53YUdWeVpTQTlQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlNBOUlHNWxkeUJaZENrc0lIUm9hWE11WW05MWJtUnBibWRUY0dobGNtVXViV0ZyWlVWdGNIUjVLQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JsTG1kbGRFRjBkSEpwWW5WMFpTZ2ljRzl6YVhScGIyNGlLVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd095QnVJRHdnZEM1amIzVnVkRHNnYmlzcktVOXBMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvZEN3Z2Jpa3NJSFJvYVhNdVlYQndiSGxDYjI1bFZISmhibk5tYjNKdEtHNHNJRTlwS1N3Z2RHaHBjeTVpYjNWdVpHbHVaMU53YUdWeVpTNWxlSEJoYm1SQ2VWQnZhVzUwS0U5cEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVc0lIUXBMQ0IwYUdsekxtSnBibVJOYjJSbElEMGdaUzVpYVc1a1RXOWtaU3dnZEdocGN5NWlhVzVrVFdGMGNtbDRMbU52Y0hrb1pTNWlhVzVrVFdGMGNtbDRLU3dnZEdocGN5NWlhVzVrVFdGMGNtbDRTVzUyWlhKelpTNWpiM0I1S0dVdVltbHVaRTFoZEhKcGVFbHVkbVZ5YzJVcExDQjBhR2x6TG5OclpXeGxkRzl1SUQwZ1pTNXphMlZzWlhSdmJpd2daUzVpYjNWdVpHbHVaMEp2ZUNBaFBUMGdiblZzYkNBbUppQW9kR2hwY3k1aWIzVnVaR2x1WjBKdmVDQTlJR1V1WW05MWJtUnBibWRDYjNndVkyeHZibVVvS1Nrc0lHVXVZbTkxYm1ScGJtZFRjR2hsY21VZ0lUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdVltOTFibVJwYm1kVGNHaGxjbVVnUFNCbExtSnZkVzVrYVc1blUzQm9aWEpsTG1Oc2IyNWxLQ2twTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnY21GNVkyRnpkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG0xaGRHVnlhV0ZzTENCcElEMGdkR2hwY3k1dFlYUnlhWGhYYjNKc1pEc0tJQ0FnSUNBZ0lDQnVJQ0U5UFNCMmIybGtJREFnSmlZZ0tIUm9hWE11WW05MWJtUnBibWRUY0dobGNtVWdQVDA5SUc1MWJHd2dKaVlnZEdocGN5NWpiMjF3ZFhSbFFtOTFibVJwYm1kVGNHaGxjbVVvS1N3Z1pXOHVZMjl3ZVNoMGFHbHpMbUp2ZFc1a2FXNW5VM0JvWlhKbEtTd2daVzh1WVhCd2JIbE5ZWFJ5YVhnMEtHa3BMQ0JsTG5KaGVTNXBiblJsY25ObFkzUnpVM0JvWlhKbEtHVnZLU0FoUFQwZ0lURWdKaVlnS0VKb0xtTnZjSGtvYVNrdWFXNTJaWEowS0Nrc0lIUnZMbU52Y0hrb1pTNXlZWGtwTG1Gd2NHeDVUV0YwY21sNE5DaENhQ2tzSUNFb2RHaHBjeTVpYjNWdVpHbHVaMEp2ZUNBaFBUMGdiblZzYkNBbUppQjBieTVwYm5SbGNuTmxZM1J6UW05NEtIUm9hWE11WW05MWJtUnBibWRDYjNncElEMDlQU0FoTVNrZ0ppWWdkR2hwY3k1ZlkyOXRjSFYwWlVsdWRHVnljMlZqZEdsdmJuTW9aU3dnZEN3Z2RHOHBLU2s3Q2lBZ0lDQjlDaUFnSUNCblpYUldaWEowWlhoUWIzTnBkR2x2YmlobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtZGxkRlpsY25SbGVGQnZjMmwwYVc5dUtHVXNJSFFwTENCMGFHbHpMbUZ3Y0d4NVFtOXVaVlJ5WVc1elptOXliU2hsTENCMEtTd2dkRHNLSUNBZ0lIMEtJQ0FnSUdKcGJtUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YzJ0bGJHVjBiMjRnUFNCbExDQjBJRDA5UFNCMmIybGtJREFnSmlZZ0tIUm9hWE11ZFhCa1lYUmxUV0YwY21sNFYyOXliR1FvSVRBcExDQjBhR2x6TG5OclpXeGxkRzl1TG1OaGJHTjFiR0YwWlVsdWRtVnljMlZ6S0Nrc0lIUWdQU0IwYUdsekxtMWhkSEpwZUZkdmNteGtLU3dnZEdocGN5NWlhVzVrVFdGMGNtbDRMbU52Y0hrb2RDa3NJSFJvYVhNdVltbHVaRTFoZEhKcGVFbHVkbVZ5YzJVdVkyOXdlU2gwS1M1cGJuWmxjblFvS1RzS0lDQWdJSDBLSUNBZ0lIQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV6YTJWc1pYUnZiaTV3YjNObEtDazdDaUFnSUNCOUNpQWdJQ0J1YjNKdFlXeHBlbVZUYTJsdVYyVnBaMmgwY3lncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlHNWxkeUJxWlN3Z2RDQTlJSFJvYVhNdVoyVnZiV1YwY25rdVlYUjBjbWxpZFhSbGN5NXphMmx1VjJWcFoyaDBPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiaUE5SURBc0lHa2dQU0IwTG1OdmRXNTBPeUJ1SUR3Z2FUc2diaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdaUzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0hRc0lHNHBPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjaUE5SURFZ0x5QmxMbTFoYm1oaGRIUmhia3hsYm1kMGFDZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCeUlDRTlQU0F4SUM4Z01DQS9JR1V1YlhWc2RHbHdiSGxUWTJGc1lYSW9jaWtnT2lCbExuTmxkQ2d4TENBd0xDQXdMQ0F3S1N3Z2RDNXpaWFJZV1ZwWEtHNHNJR1V1ZUN3Z1pTNTVMQ0JsTG5vc0lHVXVkeWs3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ2RYQmtZWFJsVFdGMGNtbDRWMjl5YkdRb1pTa2dld29nSUNBZ0lDQWdJSE4xY0dWeUxuVndaR0YwWlUxaGRISnBlRmR2Y214a0tHVXBMQ0IwYUdsekxtSnBibVJOYjJSbElEMDlQU0FpWVhSMFlXTm9aV1FpSUQ4Z2RHaHBjeTVpYVc1a1RXRjBjbWw0U1c1MlpYSnpaUzVqYjNCNUtIUm9hWE11YldGMGNtbDRWMjl5YkdRcExtbHVkbVZ5ZENncElEb2dkR2hwY3k1aWFXNWtUVzlrWlNBOVBUMGdJbVJsZEdGamFHVmtJaUEvSUhSb2FYTXVZbWx1WkUxaGRISnBlRWx1ZG1WeWMyVXVZMjl3ZVNoMGFHbHpMbUpwYm1STllYUnlhWGdwTG1sdWRtVnlkQ2dwSURvZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVRhMmx1Ym1Wa1RXVnphRG9nVlc1eVpXTnZaMjVwZW1Wa0lHSnBibVJOYjJSbE9pQWlJQ3NnZEdocGN5NWlhVzVrVFc5a1pTazdDaUFnSUNCOUNpQWdJQ0JoY0hCc2VVSnZibVZVY21GdWMyWnZjbTBvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1emEyVnNaWFJ2Yml3Z2FTQTlJSFJvYVhNdVoyVnZiV1YwY25rN0NpQWdJQ0FnSUNBZ1RtZ3Vabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2hwTG1GMGRISnBZblYwWlhNdWMydHBia2x1WkdWNExDQmxLU3dnVDJndVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHBMbUYwZEhKcFluVjBaWE11YzJ0cGJsZGxhV2RvZEN3Z1pTa3NJRVJvTG1OdmNIa29kQ2t1WVhCd2JIbE5ZWFJ5YVhnMEtIUm9hWE11WW1sdVpFMWhkSEpwZUNrc0lIUXVjMlYwS0RBc0lEQXNJREFwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY2lBOUlEQTdJSElnUENBME95QnlLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlFOW9MbWRsZEVOdmJYQnZibVZ1ZENoeUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRWdJVDA5SURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ1RtZ3VaMlYwUTI5dGNHOXVaVzUwS0hJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JtZ3ViWFZzZEdsd2JIbE5ZWFJ5YVdObGN5aHVMbUp2Ym1WelcyOWRMbTFoZEhKcGVGZHZjbXhrTENCdUxtSnZibVZKYm5abGNuTmxjMXR2WFNrc0lIUXVZV1JrVTJOaGJHVmtWbVZqZEc5eUtGY3dMbU52Y0hrb1JHZ3BMbUZ3Y0d4NVRXRjBjbWw0TkNoR2FDa3NJR0VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBMbUZ3Y0d4NVRXRjBjbWw0TkNoMGFHbHpMbUpwYm1STllYUnlhWGhKYm5abGNuTmxLVHNLSUNBZ0lIMEtJQ0FnSUdKdmJtVlVjbUZ1YzJadmNtMG9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsTnJhVzV1WldSTlpYTm9PaUF1WW05dVpWUnlZVzV6Wm05eWJTZ3BJSGRoY3lCeVpXNWhiV1ZrSUhSdklDNWhjSEJzZVVKdmJtVlVjbUZ1YzJadmNtMG9LU0JwYmlCeU1UVXhMaUlwTENCMGFHbHpMbUZ3Y0d4NVFtOXVaVlJ5WVc1elptOXliU2hsTENCMEtUc0tJQ0FnSUgwS2ZTd2dkR0VnUFNCamJHRnpjeUJsZUhSbGJtUnpJRXBsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0NsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1N3Z2RHaHBjeTVwYzBKdmJtVWdQU0FoTUN3Z2RHaHBjeTUwZVhCbElEMGdJa0p2Ym1VaU93b2dJQ0FnZlFwOUxDQnZhU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdVM1FnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlHNTFiR3dzSUhRZ1BTQXhMQ0J1SUQwZ01Td2dhU3dnY2l3Z1lTd2dieXdnWXl3Z2JDQTlJSEIwTENCb0lEMGdjSFFzSUhVc0lHUXBld29nSUNBZ0lDQWdJSE4xY0dWeUtHNTFiR3dzSUdFc0lHOHNJR01zSUd3c0lHZ3NJR2tzSUhJc0lIVXNJR1FwTENCMGFHbHpMbWx6UkdGMFlWUmxlSFIxY21VZ1BTQWhNQ3dnZEdocGN5NXBiV0ZuWlNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlUb2daU3dLSUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c2SUhRc0NpQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2diZ29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVaMlZ1WlhKaGRHVk5hWEJ0WVhCeklEMGdJVEVzSUhSb2FYTXVabXhwY0ZrZ1BTQWhNU3dnZEdocGN5NTFibkJoWTJ0QmJHbG5ibTFsYm5RZ1BTQXhPd29nSUNBZ2ZRcDlMQ0I2YUNBOUlHNWxkeUI2WlN3Z1dEQWdQU0J1WlhjZ2VtVXNJRTl2SUQwZ1kyeGhjM01nY3pFZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRnRkTENCMElEMGdXMTBwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVkWFZwWkNBOUlHdDBLQ2tzSUhSb2FYTXVZbTl1WlhNZ1BTQmxMbk5zYVdObEtEQXBMQ0IwYUdsekxtSnZibVZKYm5abGNuTmxjeUE5SUhRc0lIUm9hWE11WW05dVpVMWhkSEpwWTJWeklEMGdiblZzYkN3Z2RHaHBjeTVpYjI1bFZHVjRkSFZ5WlNBOUlHNTFiR3dzSUhSb2FYTXVZbTl1WlZSbGVIUjFjbVZUYVhwbElEMGdNQ3dnZEdocGN5NXBibWwwS0NrN0NpQWdJQ0I5Q2lBZ0lDQnBibWwwS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVpYjI1bGN5d2dkQ0E5SUhSb2FYTXVZbTl1WlVsdWRtVnljMlZ6T3dvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1KdmJtVk5ZWFJ5YVdObGN5QTlJRzVsZHlCR2JHOWhkRE15UVhKeVlYa29aUzVzWlc1bmRHZ2dLaUF4Tmlrc0lIUXViR1Z1WjNSb0lEMDlQU0F3S1NCMGFHbHpMbU5oYkdOMWJHRjBaVWx1ZG1WeWMyVnpLQ2s3Q2lBZ0lDQWdJQ0FnWld4elpTQnBaaUFvWlM1c1pXNW5kR2dnSVQwOUlIUXViR1Z1WjNSb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVUydGxiR1YwYjI0NklFNTFiV0psY2lCdlppQnBiblpsY25ObElHSnZibVVnYldGMGNtbGpaWE1nWkc5bGN5QnViM1FnYldGMFkyZ2dZVzF2ZFc1MElHOW1JR0p2Ym1WekxpSXBMQ0IwYUdsekxtSnZibVZKYm5abGNuTmxjeUE5SUZ0ZE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd0xDQnBJRDBnZEdocGN5NWliMjVsY3k1c1pXNW5kR2c3SUc0Z1BDQnBPeUJ1S3lzcGRHaHBjeTVpYjI1bFNXNTJaWEp6WlhNdWNIVnphQ2h1WlhjZ2VtVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUdOaGJHTjFiR0YwWlVsdWRtVnljMlZ6S0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WW05dVpVbHVkbVZ5YzJWekxteGxibWQwYUNBOUlEQTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQmxJRDBnTUN3Z2RDQTlJSFJvYVhNdVltOXVaWE11YkdWdVozUm9PeUJsSUR3Z2REc2daU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc0Z1BTQnVaWGNnZW1VN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVltOXVaWE5iWlYwZ0ppWWdiaTVqYjNCNUtIUm9hWE11WW05dVpYTmJaVjB1YldGMGNtbDRWMjl5YkdRcExtbHVkbVZ5ZENncExDQjBhR2x6TG1KdmJtVkpiblpsY25ObGN5NXdkWE5vS0c0cE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJSEJ2YzJVb0tTQjdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQmxJRDBnTUN3Z2RDQTlJSFJvYVhNdVltOXVaWE11YkdWdVozUm9PeUJsSUR3Z2REc2daU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1KdmJtVnpXMlZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnVJQ1ltSUc0dWJXRjBjbWw0VjI5eWJHUXVZMjl3ZVNoMGFHbHpMbUp2Ym1WSmJuWmxjbk5sYzF0bFhTa3VhVzUyWlhKMEtDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1p2Y2loc1pYUWdaU0E5SURBc0lIUWdQU0IwYUdsekxtSnZibVZ6TG14bGJtZDBhRHNnWlNBOElIUTdJR1VyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1aWIyNWxjMXRsWFRzS0lDQWdJQ0FnSUNBZ0lDQWdiaUFtSmlBb2JpNXdZWEpsYm5RZ0ppWWdiaTV3WVhKbGJuUXVhWE5DYjI1bElEOGdLRzR1YldGMGNtbDRMbU52Y0hrb2JpNXdZWEpsYm5RdWJXRjBjbWw0VjI5eWJHUXBMbWx1ZG1WeWRDZ3BMQ0J1TG0xaGRISnBlQzV0ZFd4MGFYQnNlU2h1TG0xaGRISnBlRmR2Y214a0tTa2dPaUJ1TG0xaGRISnBlQzVqYjNCNUtHNHViV0YwY21sNFYyOXliR1FwTENCdUxtMWhkSEpwZUM1a1pXTnZiWEJ2YzJVb2JpNXdiM05wZEdsdmJpd2diaTV4ZFdGMFpYSnVhVzl1TENCdUxuTmpZV3hsS1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbEtDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3k1aWIyNWxjeXdnZENBOUlIUm9hWE11WW05dVpVbHVkbVZ5YzJWekxDQnVJRDBnZEdocGN5NWliMjVsVFdGMGNtbGpaWE1zSUdrZ1BTQjBhR2x6TG1KdmJtVlVaWGgwZFhKbE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2NpQTlJREFzSUdFZ1BTQmxMbXhsYm1kMGFEc2djaUE4SUdFN0lISXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ1pWdHlYU0EvSUdWYmNsMHViV0YwY21sNFYyOXliR1FnT2lCWU1Ec0tJQ0FnSUNBZ0lDQWdJQ0FnZW1ndWJYVnNkR2x3YkhsTllYUnlhV05sY3lodkxDQjBXM0pkS1N3Z2VtZ3VkRzlCY25KaGVTaHVMQ0J5SUNvZ01UWXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwSUNFOVBTQnVkV3hzSUNZbUlDaHBMbTVsWldSelZYQmtZWFJsSUQwZ0lUQXBPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCek1TaDBhR2x6TG1KdmJtVnpMQ0IwYUdsekxtSnZibVZKYm5abGNuTmxjeWs3Q2lBZ0lDQjlDaUFnSUNCamIyMXdkWFJsUW05dVpWUmxlSFIxY21Vb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQk5ZWFJvTG5OeGNuUW9kR2hwY3k1aWIyNWxjeTVzWlc1bmRHZ2dLaUEwS1RzS0lDQWdJQ0FnSUNCbElEMGdlV1FvWlNrc0lHVWdQU0JOWVhSb0xtMWhlQ2hsTENBMEtUc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlHNWxkeUJHYkc5aGRETXlRWEp5WVhrb1pTQXFJR1VnS2lBMEtUc0tJQ0FnSUNBZ0lDQjBMbk5sZENoMGFHbHpMbUp2Ym1WTllYUnlhV05sY3lrN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCdVpYY2diMmtvZEN3Z1pTd2daU3dnVjNRc0lIaHVLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaTV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0IwYUdsekxtSnZibVZOWVhSeWFXTmxjeUE5SUhRc0lIUm9hWE11WW05dVpWUmxlSFIxY21VZ1BTQnVMQ0IwYUdsekxtSnZibVZVWlhoMGRYSmxVMmw2WlNBOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJDYjI1bFFubE9ZVzFsS0dVcElIc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIUWdQU0F3TENCdUlEMGdkR2hwY3k1aWIyNWxjeTVzWlc1bmRHZzdJSFFnUENCdU95QjBLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUm9hWE11WW05dVpYTmJkRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwTG01aGJXVWdQVDA5SUdVcElISmxkSFZ5YmlCcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJR1JwYzNCdmMyVW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWliMjVsVkdWNGRIVnlaU0FoUFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVpYjI1bFZHVjRkSFZ5WlM1a2FYTndiM05sS0Nrc0lIUm9hWE11WW05dVpWUmxlSFIxY21VZ1BTQnVkV3hzS1RzS0lDQWdJSDBLSUNBZ0lHWnliMjFLVTA5T0tHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMblYxYVdRZ1BTQmxMblYxYVdRN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNQ3dnYVNBOUlHVXVZbTl1WlhNdWJHVnVaM1JvT3lCdUlEd2dhVHNnYmlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISWdQU0JsTG1KdmJtVnpXMjVkTENCaElEMGdkRnR5WFRzS0lDQWdJQ0FnSUNBZ0lDQWdZU0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaGpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbE5yWld4bGRHOXVPaUJPYnlCaWIyNWxJR1p2ZFc1a0lIZHBkR2dnVlZWSlJEb2lMQ0J5S1N3Z1lTQTlJRzVsZHlCMFlTa3NJSFJvYVhNdVltOXVaWE11Y0hWemFDaGhLU3dnZEdocGN5NWliMjVsU1c1MlpYSnpaWE11Y0hWemFDaHVaWGNnZW1Vb0tTNW1jbTl0UVhKeVlYa29aUzVpYjI1bFNXNTJaWEp6WlhOYmJsMHBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWFXNXBkQ2dwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnRaWFJoWkdGMFlUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbVZ5YzJsdmJqb2dOQzQyTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dJbE5yWld4bGRHOXVJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsYm1WeVlYUnZjam9nSWxOclpXeGxkRzl1TG5SdlNsTlBUaUlLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnWW05dVpYTTZJRnRkTEFvZ0lDQWdJQ0FnSUNBZ0lDQmliMjVsU1c1MlpYSnpaWE02SUZ0ZENpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQmxMblYxYVdRZ1BTQjBhR2x6TG5WMWFXUTdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1KdmJtVnpMQ0J1SUQwZ2RHaHBjeTVpYjI1bFNXNTJaWEp6WlhNN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcElEMGdNQ3dnY2lBOUlIUXViR1Z1WjNSb095QnBJRHdnY2pzZ2FTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCMFcybGRPd29nSUNBZ0lDQWdJQ0FnSUNCbExtSnZibVZ6TG5CMWMyZ29ZUzUxZFdsa0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0J1VzJsZE93b2dJQ0FnSUNBZ0lDQWdJQ0JsTG1KdmJtVkpiblpsY25ObGN5NXdkWE5vS0c4dWRHOUJjbkpoZVNncEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVTdDaUFnSUNCOUNuMHNJSFZwSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJsZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcElEMGdNU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU3dnZEN3Z2Jpa3NJSFJvYVhNdWFYTkpibk4wWVc1alpXUkNkV1ptWlhKQmRIUnlhV0oxZEdVZ1BTQWhNQ3dnZEdocGN5NXRaWE5vVUdWeVFYUjBjbWxpZFhSbElEMGdhVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG0xbGMyaFFaWEpCZEhSeWFXSjFkR1VnUFNCbExtMWxjMmhRWlhKQmRIUnlhV0oxZEdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCemRYQmxjaTUwYjBwVFQwNG9LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzV0WlhOb1VHVnlRWFIwY21saWRYUmxJRDBnZEdocGN5NXRaWE5vVUdWeVFYUjBjbWxpZFhSbExDQmxMbWx6U1c1emRHRnVZMlZrUW5WbVptVnlRWFIwY21saWRYUmxJRDBnSVRBc0lHVTdDaUFnSUNCOUNuMHNJRVpwSUQwZ2JtVjNJSHBsTENCV2FDQTlJRzVsZHlCNlpTd2djSElnUFNCYlhTd2dhMmdnUFNCdVpYY2dVWFFzSUhFd0lEMGdibVYzSUhwbExDQnRjeUE5SUc1bGR5Qk5kQ3dnWjNNZ1BTQnVaWGNnV1hRc0lFWnZJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5Qk5kQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxMQ0IwS1N3Z2RHaHBjeTVwYzBsdWMzUmhibU5sWkUxbGMyZ2dQU0FoTUN3Z2RHaHBjeTVwYm5OMFlXNWpaVTFoZEhKcGVDQTlJRzVsZHlCMWFTaHVaWGNnUm14dllYUXpNa0Z5Y21GNUtHNGdLaUF4Tmlrc0lERTJLU3dnZEdocGN5NXBibk4wWVc1alpVTnZiRzl5SUQwZ2JuVnNiQ3dnZEdocGN5NWpiM1Z1ZENBOUlHNHNJSFJvYVhNdVltOTFibVJwYm1kQ2IzZ2dQU0J1ZFd4c0xDQjBhR2x6TG1KdmRXNWthVzVuVTNCb1pYSmxJRDBnYm5Wc2JEc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dQU0F3T3lCcElEd2dianNnYVNzcktYUm9hWE11YzJWMFRXRjBjbWw0UVhRb2FTd2djVEFwT3dvZ0lDQWdmUW9nSUNBZ1kyOXRjSFYwWlVKdmRXNWthVzVuUW05NEtDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3k1blpXOXRaWFJ5ZVN3Z2RDQTlJSFJvYVhNdVkyOTFiblE3Q2lBZ0lDQWdJQ0FnZEdocGN5NWliM1Z1WkdsdVowSnZlQ0E5UFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVpYjNWdVpHbHVaMEp2ZUNBOUlHNWxkeUJSZENrc0lHVXVZbTkxYm1ScGJtZENiM2dnUFQwOUlHNTFiR3dnSmlZZ1pTNWpiMjF3ZFhSbFFtOTFibVJwYm1kQ2IzZ29LU3dnZEdocGN5NWliM1Z1WkdsdVowSnZlQzV0WVd0bFJXMXdkSGtvS1RzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdPeUJ1SUR3Z2REc2diaXNyS1hSb2FYTXVaMlYwVFdGMGNtbDRRWFFvYml3Z1Jta3BMQ0JyYUM1amIzQjVLR1V1WW05MWJtUnBibWRDYjNncExtRndjR3g1VFdGMGNtbDROQ2hHYVNrc0lIUm9hWE11WW05MWJtUnBibWRDYjNndWRXNXBiMjRvYTJncE93b2dJQ0FnZlFvZ0lDQWdZMjl0Y0hWMFpVSnZkVzVrYVc1blUzQm9aWEpsS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVuWlc5dFpYUnllU3dnZENBOUlIUm9hWE11WTI5MWJuUTdDaUFnSUNBZ0lDQWdkR2hwY3k1aWIzVnVaR2x1WjFOd2FHVnlaU0E5UFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVpYjNWdVpHbHVaMU53YUdWeVpTQTlJRzVsZHlCWmRDa3NJR1V1WW05MWJtUnBibWRUY0dobGNtVWdQVDA5SUc1MWJHd2dKaVlnWlM1amIyMXdkWFJsUW05MWJtUnBibWRUY0dobGNtVW9LU3dnZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlM1dFlXdGxSVzF3ZEhrb0tUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3T3lCdUlEd2dkRHNnYmlzcktYUm9hWE11WjJWMFRXRjBjbWw0UVhRb2Jpd2dSbWtwTENCbmN5NWpiM0I1S0dVdVltOTFibVJwYm1kVGNHaGxjbVVwTG1Gd2NHeDVUV0YwY21sNE5DaEdhU2tzSUhSb2FYTXVZbTkxYm1ScGJtZFRjR2hsY21VdWRXNXBiMjRvWjNNcE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlN3Z2RDa3NJSFJvYVhNdWFXNXpkR0Z1WTJWTllYUnlhWGd1WTI5d2VTaGxMbWx1YzNSaGJtTmxUV0YwY21sNEtTd2daUzVwYm5OMFlXNWpaVU52Ykc5eUlDRTlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxtbHVjM1JoYm1ObFEyOXNiM0lnUFNCbExtbHVjM1JoYm1ObFEyOXNiM0l1WTJ4dmJtVW9LU2tzSUhSb2FYTXVZMjkxYm5RZ1BTQmxMbU52ZFc1MExDQmxMbUp2ZFc1a2FXNW5RbTk0SUNFOVBTQnVkV3hzSUNZbUlDaDBhR2x6TG1KdmRXNWthVzVuUW05NElEMGdaUzVpYjNWdVpHbHVaMEp2ZUM1amJHOXVaU2dwS1N3Z1pTNWliM1Z1WkdsdVoxTndhR1Z5WlNBaFBUMGdiblZzYkNBbUppQW9kR2hwY3k1aWIzVnVaR2x1WjFOd2FHVnlaU0E5SUdVdVltOTFibVJwYm1kVGNHaGxjbVV1WTJ4dmJtVW9LU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSRGIyeHZja0YwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwTG1aeWIyMUJjbkpoZVNoMGFHbHpMbWx1YzNSaGJtTmxRMjlzYjNJdVlYSnlZWGtzSUdVZ0tpQXpLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFMWhkSEpwZUVGMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMExtWnliMjFCY25KaGVTaDBhR2x6TG1sdWMzUmhibU5sVFdGMGNtbDRMbUZ5Y21GNUxDQmxJQ29nTVRZcE93b2dJQ0FnZlFvZ0lDQWdjbUY1WTJGemRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbTFoZEhKcGVGZHZjbXhrTENCcElEMGdkR2hwY3k1amIzVnVkRHNLSUNBZ0lDQWdJQ0JwWmlBb2JYTXVaMlZ2YldWMGNua2dQU0IwYUdsekxtZGxiMjFsZEhKNUxDQnRjeTV0WVhSbGNtbGhiQ0E5SUhSb2FYTXViV0YwWlhKcFlXd3NJRzF6TG0xaGRHVnlhV0ZzSUNFOVBTQjJiMmxrSURBZ0ppWWdLSFJvYVhNdVltOTFibVJwYm1kVGNHaGxjbVVnUFQwOUlHNTFiR3dnSmlZZ2RHaHBjeTVqYjIxd2RYUmxRbTkxYm1ScGJtZFRjR2hsY21Vb0tTd2daM011WTI5d2VTaDBhR2x6TG1KdmRXNWthVzVuVTNCb1pYSmxLU3dnWjNNdVlYQndiSGxOWVhSeWFYZzBLRzRwTENCbExuSmhlUzVwYm5SbGNuTmxZM1J6VTNCb1pYSmxLR2R6S1NBaFBUMGdJVEVwS1NCbWIzSW9iR1YwSUhJZ1BTQXdPeUJ5SUR3Z2FUc2djaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1blpYUk5ZWFJ5YVhoQmRDaHlMQ0JHYVNrc0lGWm9MbTExYkhScGNHeDVUV0YwY21salpYTW9iaXdnUm1rcExDQnRjeTV0WVhSeWFYaFhiM0pzWkNBOUlGWm9MQ0J0Y3k1eVlYbGpZWE4wS0dVc0lIQnlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaElEMGdNQ3dnYnlBOUlIQnlMbXhsYm1kMGFEc2dZU0E4SUc4N0lHRXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJSEJ5VzJGZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1l5NXBibk4wWVc1alpVbGtJRDBnY2l3Z1l5NXZZbXBsWTNRZ1BTQjBhR2x6TENCMExuQjFjMmdvWXlrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2NISXViR1Z1WjNSb0lEMGdNRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCelpYUkRiMnh2Y2tGMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbWx1YzNSaGJtTmxRMjlzYjNJZ1BUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdWFXNXpkR0Z1WTJWRGIyeHZjaUE5SUc1bGR5QjFhU2h1WlhjZ1JteHZZWFF6TWtGeWNtRjVLSFJvYVhNdWFXNXpkR0Z1WTJWTllYUnlhWGd1WTI5MWJuUWdLaUF6S1N3Z015a3BMQ0IwTG5SdlFYSnlZWGtvZEdocGN5NXBibk4wWVc1alpVTnZiRzl5TG1GeWNtRjVMQ0JsSUNvZ015azdDaUFnSUNCOUNpQWdJQ0J6WlhSTllYUnlhWGhCZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnZEM1MGIwRnljbUY1S0hSb2FYTXVhVzV6ZEdGdVkyVk5ZWFJ5YVhndVlYSnlZWGtzSUdVZ0tpQXhOaWs3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1ZOYjNKd2FGUmhjbWRsZEhNb0tTQjdmUW9nSUNBZ1pHbHpjRzl6WlNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzQmhkR05vUlhabGJuUW9ld29nSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFpWkdsemNHOXpaU0lLSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJSDBLZlN3Z2QzUWdQU0JqYkdGemN5QmxlSFJsYm1SeklHSjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVhWE5NYVc1bFFtRnphV05OWVhSbGNtbGhiQ0E5SUNFd0xDQjBhR2x6TG5SNWNHVWdQU0FpVEdsdVpVSmhjMmxqVFdGMFpYSnBZV3dpTENCMGFHbHpMbU52Ykc5eUlEMGdibVYzSUhCbEtERTJOemMzTWpFMUtTd2dkR2hwY3k1dFlYQWdQU0J1ZFd4c0xDQjBhR2x6TG14cGJtVjNhV1IwYUNBOUlERXNJSFJvYVhNdWJHbHVaV05oY0NBOUlDSnliM1Z1WkNJc0lIUm9hWE11YkdsdVpXcHZhVzRnUFNBaWNtOTFibVFpTENCMGFHbHpMbVp2WnlBOUlDRXdMQ0IwYUdsekxuTmxkRlpoYkhWbGN5aGxLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG1OdmJHOXlMbU52Y0hrb1pTNWpiMnh2Y2lrc0lIUm9hWE11YldGd0lEMGdaUzV0WVhBc0lIUm9hWE11YkdsdVpYZHBaSFJvSUQwZ1pTNXNhVzVsZDJsa2RHZ3NJSFJvYVhNdWJHbHVaV05oY0NBOUlHVXViR2x1WldOaGNDd2dkR2hwY3k1c2FXNWxhbTlwYmlBOUlHVXViR2x1WldwdmFXNHNJSFJvYVhNdVptOW5JRDBnWlM1bWIyY3NJSFJvYVhNN0NpQWdJQ0I5Q24wc0lFaG9JRDBnYm1WM0lFRXNJRWRvSUQwZ2JtVjNJRUVzSUZkb0lEMGdibVYzSUhwbExDQnVieUE5SUc1bGR5Qm9hU3dnYlhJZ1BTQnVaWGNnV1hRc0lHSnVJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QktaU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ2JtVjNJRWRsTENCMElEMGdibVYzSUhkMEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selRHbHVaU0E5SUNFd0xDQjBhR2x6TG5SNWNHVWdQU0FpVEdsdVpTSXNJSFJvYVhNdVoyVnZiV1YwY25rZ1BTQmxMQ0IwYUdsekxtMWhkR1Z5YVdGc0lEMGdkQ3dnZEdocGN5NTFjR1JoZEdWTmIzSndhRlJoY21kbGRITW9LVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXNJSFFwTENCMGFHbHpMbTFoZEdWeWFXRnNJRDBnUVhKeVlYa3VhWE5CY25KaGVTaGxMbTFoZEdWeWFXRnNLU0EvSUdVdWJXRjBaWEpwWVd3dWMyeHBZMlVvS1NBNklHVXViV0YwWlhKcFlXd3NJSFJvYVhNdVoyVnZiV1YwY25rZ1BTQmxMbWRsYjIxbGRISjVMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMjl0Y0hWMFpVeHBibVZFYVhOMFlXNWpaWE1vS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbWRsYjIxbGRISjVPd29nSUNBZ0lDQWdJR2xtSUNobExtbHVaR1Y0SUQwOVBTQnVkV3hzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMElEMGdaUzVoZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1TENCdUlEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQW9nSUNBZ0lDQWdJQ0FnSUNCZE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2tnUFNBeExDQnlJRDBnZEM1amIzVnVkRHNnYVNBOElISTdJR2tyS3lsSWFDNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLSFFzSUdrZ0xTQXhLU3dnUjJndVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaDBMQ0JwS1N3Z2JsdHBYU0E5SUc1YmFTQXRJREZkTENCdVcybGRJQ3M5SUVob0xtUnBjM1JoYm1ObFZHOG9SMmdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmxMbk5sZEVGMGRISnBZblYwWlNnaWJHbHVaVVJwYzNSaGJtTmxJaXdnYm1WM0lIWmxLRzRzSURFcEtUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNU1hVzVsTG1OdmJYQjFkR1ZNYVc1bFJHbHpkR0Z1WTJWektDazZJRU52YlhCMWRHRjBhVzl1SUc5dWJIa2djRzl6YzJsaWJHVWdkMmwwYUNCdWIyNHRhVzVrWlhobFpDQkNkV1ptWlhKSFpXOXRaWFJ5ZVM0aUtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhKaGVXTmhjM1FvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1blpXOXRaWFJ5ZVN3Z2FTQTlJSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXNJSElnUFNCbExuQmhjbUZ0Y3k1TWFXNWxMblJvY21WemFHOXNaQ3dnWVNBOUlHNHVaSEpoZDFKaGJtZGxPd29nSUNBZ0lDQWdJR2xtSUNodUxtSnZkVzVrYVc1blUzQm9aWEpsSUQwOVBTQnVkV3hzSUNZbUlHNHVZMjl0Y0hWMFpVSnZkVzVrYVc1blUzQm9aWEpsS0Nrc0lHMXlMbU52Y0hrb2JpNWliM1Z1WkdsdVoxTndhR1Z5WlNrc0lHMXlMbUZ3Y0d4NVRXRjBjbWw0TkNocEtTd2diWEl1Y21Ga2FYVnpJQ3M5SUhJc0lHVXVjbUY1TG1sdWRHVnljMlZqZEhOVGNHaGxjbVVvYlhJcElEMDlQU0FoTVNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUZkb0xtTnZjSGtvYVNrdWFXNTJaWEowS0Nrc0lHNXZMbU52Y0hrb1pTNXlZWGtwTG1Gd2NHeDVUV0YwY21sNE5DaFhhQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0J5SUM4Z0tDaDBhR2x6TG5OallXeGxMbmdnS3lCMGFHbHpMbk5qWVd4bExua2dLeUIwYUdsekxuTmpZV3hsTG5vcElDOGdNeWtzSUdNZ1BTQnZJQ29nYnl3Z2JDQTlJRzVsZHlCQkxDQm9JRDBnYm1WM0lFRXNJSFVnUFNCdVpYY2dRU3dnWkNBOUlHNWxkeUJCTENCbUlEMGdkR2hwY3k1cGMweHBibVZUWldkdFpXNTBjeUEvSURJZ09pQXhMQ0J0SUQwZ2JpNXBibVJsZUN3Z1p5QTlJRzR1WVhSMGNtbGlkWFJsY3k1d2IzTnBkR2x2YmpzS0lDQWdJQ0FnSUNCcFppQW9iU0FoUFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0NBOUlFMWhkR2d1YldGNEtEQXNJR0V1YzNSaGNuUXBMQ0IySUQwZ1RXRjBhQzV0YVc0b2JTNWpiM1Z1ZEN3Z1lTNXpkR0Z5ZENBcklHRXVZMjkxYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGdnUFNCd0xDQjVJRDBnZGlBdElERTdJSGdnUENCNU95QjRJQ3M5SUdZcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0lnUFNCdExtZGxkRmdvZUNrc0lIY2dQU0J0TG1kbGRGZ29lQ0FySURFcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3d1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNobkxDQmlLU3dnYUM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHY3NJSGNwTENCdWJ5NWthWE4wWVc1alpWTnhWRzlUWldkdFpXNTBLR3dzSUdnc0lHUXNJSFVwSUQ0Z1l5a2dZMjl1ZEdsdWRXVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtMbUZ3Y0d4NVRXRjBjbWw0TkNoMGFHbHpMbTFoZEhKcGVGZHZjbXhrS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkpJRDBnWlM1eVlYa3ViM0pwWjJsdUxtUnBjM1JoYm1ObFZHOG9aQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JKSUR3Z1pTNXVaV0Z5SUh4OElFa2dQaUJsTG1aaGNpQjhmQ0IwTG5CMWMyZ29ld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGMzUmhibU5sT2lCSkxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ2YVc1ME9pQjFMbU5zYjI1bEtDa3VZWEJ3YkhsTllYUnlhWGcwS0hSb2FYTXViV0YwY21sNFYyOXliR1FwTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0T2lCNExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1poWTJVNklHNTFiR3dzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptRmpaVWx1WkdWNE9pQnVkV3hzTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOWlhbVZqZERvZ2RHaHBjd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NDQTlJRTFoZEdndWJXRjRLREFzSUdFdWMzUmhjblFwTENCMklEMGdUV0YwYUM1dGFXNG9aeTVqYjNWdWRDd2dZUzV6ZEdGeWRDQXJJR0V1WTI5MWJuUXBPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhnZ1BTQndMQ0I1SUQwZ2RpQXRJREU3SUhnZ1BDQjVPeUI0SUNzOUlHWXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d3dVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaG5MQ0I0S1N3Z2FDNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLR2NzSUhnZ0t5QXhLU3dnYm04dVpHbHpkR0Z1WTJWVGNWUnZVMlZuYldWdWRDaHNMQ0JvTENCa0xDQjFLU0ErSUdNcElHTnZiblJwYm5WbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pDNWhjSEJzZVUxaGRISnBlRFFvZEdocGN5NXRZWFJ5YVhoWGIzSnNaQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2R5QTlJR1V1Y21GNUxtOXlhV2RwYmk1a2FYTjBZVzVqWlZSdktHUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkeUE4SUdVdWJtVmhjaUI4ZkNCM0lENGdaUzVtWVhJZ2ZId2dkQzV3ZFhOb0tIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOMFlXNWpaVG9nZHl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiMmx1ZERvZ2RTNWpiRzl1WlNncExtRndjR3g1VFdGMGNtbDROQ2gwYUdsekxtMWhkSEpwZUZkdmNteGtLU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlRG9nZUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV05sT2lCdWRXeHNMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaaFkyVkpibVJsZURvZ2JuVnNiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlltcGxZM1E2SUhSb2FYTUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbFRXOXljR2hVWVhKblpYUnpLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NW5aVzl0WlhSeWVTNXRiM0p3YUVGMGRISnBZblYwWlhNc0lHNGdQU0JQWW1wbFkzUXVhMlY1Y3loMEtUc0tJQ0FnSUNBZ0lDQnBaaUFvYmk1c1pXNW5kR2dnUGlBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEZ0dVd6QmRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2tnSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YjNKd2FGUmhjbWRsZEVsdVpteDFaVzVqWlhNZ1BTQmJYU3dnZEdocGN5NXRiM0p3YUZSaGNtZGxkRVJwWTNScGIyNWhjbmtnUFNCN2ZUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2NpQTlJREFzSUdFZ1BTQnBMbXhsYm1kMGFEc2djaUE4SUdFN0lISXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCcFczSmRMbTVoYldVZ2ZId2dVM1J5YVc1bktISXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6TG5CMWMyZ29NQ2tzSUhSb2FYTXViVzl5Y0doVVlYSm5aWFJFYVdOMGFXOXVZWEo1VzI5ZElEMGdjanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS2ZTd2dXR2dnUFNCdVpYY2dRU3dnY1dnZ1BTQnVaWGNnUVN3Z1pXNGdQU0JqYkdGemN5QmxlSFJsYm1SeklHSnVJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVc0lIUXBMQ0IwYUdsekxtbHpUR2x1WlZObFoyMWxiblJ6SUQwZ0lUQXNJSFJvYVhNdWRIbHdaU0E5SUNKTWFXNWxVMlZuYldWdWRITWlPd29nSUNBZ2ZRb2dJQ0FnWTI5dGNIVjBaVXhwYm1WRWFYTjBZVzVqWlhNb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG1kbGIyMWxkSEo1T3dvZ0lDQWdJQ0FnSUdsbUlDaGxMbWx1WkdWNElEMDlQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlM1aGRIUnlhV0oxZEdWekxuQnZjMmwwYVc5dUxDQnVJRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SURBc0lISWdQU0IwTG1OdmRXNTBPeUJwSUR3Z2Nqc2dhU0FyUFNBeUtWaG9MbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvZEN3Z2FTa3NJSEZvTG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb2RDd2dhU0FySURFcExDQnVXMmxkSUQwZ2FTQTlQVDBnTUNBL0lEQWdPaUJ1VzJrZ0xTQXhYU3dnYmx0cElDc2dNVjBnUFNCdVcybGRJQ3NnV0dndVpHbHpkR0Z1WTJWVWJ5aHhhQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVXVjMlYwUVhSMGNtbGlkWFJsS0NKc2FXNWxSR2x6ZEdGdVkyVWlMQ0J1WlhjZ2RtVW9iaXdnTVNrcE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxreHBibVZUWldkdFpXNTBjeTVqYjIxd2RYUmxUR2x1WlVScGMzUmhibU5sY3lncE9pQkRiMjF3ZFhSaGRHbHZiaUJ2Ym14NUlIQnZjM05wWW14bElIZHBkR2dnYm05dUxXbHVaR1Y0WldRZ1FuVm1abVZ5UjJWdmJXVjBjbmt1SWlrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNuMHNJRUp2SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJpYmlCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxMQ0IwS1N3Z2RHaHBjeTVwYzB4cGJtVk1iMjl3SUQwZ0lUQXNJSFJvYVhNdWRIbHdaU0E5SUNKTWFXNWxURzl2Y0NJN0NpQWdJQ0I5Q24wc0lHNWhJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmlkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6VUc5cGJuUnpUV0YwWlhKcFlXd2dQU0FoTUN3Z2RHaHBjeTUwZVhCbElEMGdJbEJ2YVc1MGMwMWhkR1Z5YVdGc0lpd2dkR2hwY3k1amIyeHZjaUE5SUc1bGR5QndaU2d4TmpjM056SXhOU2tzSUhSb2FYTXViV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWhiSEJvWVUxaGNDQTlJRzUxYkd3c0lIUm9hWE11YzJsNlpTQTlJREVzSUhSb2FYTXVjMmw2WlVGMGRHVnVkV0YwYVc5dUlEMGdJVEFzSUhSb2FYTXVabTluSUQwZ0lUQXNJSFJvYVhNdWMyVjBWbUZzZFdWektHVXBPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11WTI5c2IzSXVZMjl3ZVNobExtTnZiRzl5S1N3Z2RHaHBjeTV0WVhBZ1BTQmxMbTFoY0N3Z2RHaHBjeTVoYkhCb1lVMWhjQ0E5SUdVdVlXeHdhR0ZOWVhBc0lIUm9hWE11YzJsNlpTQTlJR1V1YzJsNlpTd2dkR2hwY3k1emFYcGxRWFIwWlc1MVlYUnBiMjRnUFNCbExuTnBlbVZCZEhSbGJuVmhkR2x2Yml3Z2RHaHBjeTVtYjJjZ1BTQmxMbVp2Wnl3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnV1dnZ1BTQnVaWGNnZW1Vc0lIcHZJRDBnYm1WM0lHaHBMQ0JuY2lBOUlHNWxkeUJaZEN3Z1gzSWdQU0J1WlhjZ1FTd2dWbThnUFNCamJHRnpjeUJsZUhSbGJtUnpJRXBsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnUjJVc0lIUWdQU0J1WlhjZ2JtRXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWFYTlFiMmx1ZEhNZ1BTQWhNQ3dnZEdocGN5NTBlWEJsSUQwZ0lsQnZhVzUwY3lJc0lIUm9hWE11WjJWdmJXVjBjbmtnUFNCbExDQjBhR2x6TG0xaGRHVnlhV0ZzSUQwZ2RDd2dkR2hwY3k1MWNHUmhkR1ZOYjNKd2FGUmhjbWRsZEhNb0tUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVc0lIUXBMQ0IwYUdsekxtMWhkR1Z5YVdGc0lEMGdRWEp5WVhrdWFYTkJjbkpoZVNobExtMWhkR1Z5YVdGc0tTQS9JR1V1YldGMFpYSnBZV3d1YzJ4cFkyVW9LU0E2SUdVdWJXRjBaWEpwWVd3c0lIUm9hWE11WjJWdmJXVjBjbmtnUFNCbExtZGxiMjFsZEhKNUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2NtRjVZMkZ6ZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxtZGxiMjFsZEhKNUxDQnBJRDBnZEdocGN5NXRZWFJ5YVhoWGIzSnNaQ3dnY2lBOUlHVXVjR0Z5WVcxekxsQnZhVzUwY3k1MGFISmxjMmh2YkdRc0lHRWdQU0J1TG1SeVlYZFNZVzVuWlRzS0lDQWdJQ0FnSUNCcFppQW9iaTVpYjNWdVpHbHVaMU53YUdWeVpTQTlQVDBnYm5Wc2JDQW1KaUJ1TG1OdmJYQjFkR1ZDYjNWdVpHbHVaMU53YUdWeVpTZ3BMQ0JuY2k1amIzQjVLRzR1WW05MWJtUnBibWRUY0dobGNtVXBMQ0JuY2k1aGNIQnNlVTFoZEhKcGVEUW9hU2tzSUdkeUxuSmhaR2wxY3lBclBTQnlMQ0JsTG5KaGVTNXBiblJsY25ObFkzUnpVM0JvWlhKbEtHZHlLU0E5UFQwZ0lURXBJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQlphQzVqYjNCNUtHa3BMbWx1ZG1WeWRDZ3BMQ0I2Ynk1amIzQjVLR1V1Y21GNUtTNWhjSEJzZVUxaGRISnBlRFFvV1dncE93b2dJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2NpQXZJQ2dvZEdocGN5NXpZMkZzWlM1NElDc2dkR2hwY3k1elkyRnNaUzU1SUNzZ2RHaHBjeTV6WTJGc1pTNTZLU0F2SURNcExDQmpJRDBnYnlBcUlHOHNJR3dnUFNCdUxtbHVaR1Y0TENCMUlEMGdiaTVoZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1T3dvZ0lDQWdJQ0FnSUdsbUlDaHNJQ0U5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ1RXRjBhQzV0WVhnb01Dd2dZUzV6ZEdGeWRDa3NJR1lnUFNCTllYUm9MbTFwYmloc0xtTnZkVzUwTENCaExuTjBZWEowSUNzZ1lTNWpiM1Z1ZENrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiU0E5SUdRc0lGOGdQU0JtT3lCdElEd2dYenNnYlNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JuSUQwZ2JDNW5aWFJZS0cwcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzSXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2gxTENCbktTd2dXbWdvWDNJc0lHY3NJR01zSUdrc0lHVXNJSFFzSUhSb2FYTXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQk5ZWFJvTG0xaGVDZ3dMQ0JoTG5OMFlYSjBLU3dnWmlBOUlFMWhkR2d1YldsdUtIVXVZMjkxYm5Rc0lHRXVjM1JoY25RZ0t5QmhMbU52ZFc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J0SUQwZ1pDd2dYeUE5SUdZN0lHMGdQQ0JmT3lCdEt5c3BYM0l1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoMUxDQnRLU3dnV21nb1gzSXNJRzBzSUdNc0lHa3NJR1VzSUhRc0lIUm9hWE1wT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlUxdmNuQm9WR0Z5WjJWMGN5Z3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVoyVnZiV1YwY25rdWJXOXljR2hCZEhSeWFXSjFkR1Z6TENCdUlEMGdUMkpxWldOMExtdGxlWE1vZENrN0NpQWdJQ0FnSUNBZ2FXWWdLRzR1YkdWdVozUm9JRDRnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJiYmxzd1hWMDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6SUQwZ1cxMHNJSFJvYVhNdWJXOXljR2hVWVhKblpYUkVhV04wYVc5dVlYSjVJRDBnZTMwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhJZ1BTQXdMQ0JoSUQwZ2FTNXNaVzVuZEdnN0lISWdQQ0JoT3lCeUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnYVZ0eVhTNXVZVzFsSUh4OElGTjBjbWx1WnloeUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxjeTV3ZFhOb0tEQXBMQ0IwYUdsekxtMXZjbkJvVkdGeVoyVjBSR2xqZEdsdmJtRnllVnR2WFNBOUlISTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q24wN0NtWjFibU4wYVc5dUlGcG9LSE14TENCbExDQjBMQ0J1TENCcExDQnlMQ0JoS1NCN0NpQWdJQ0JzWlhRZ2J5QTlJSHB2TG1ScGMzUmhibU5sVTNGVWIxQnZhVzUwS0hNeEtUc0tJQ0FnSUdsbUlDaHZJRHdnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ2JtVjNJRUU3Q2lBZ0lDQWdJQ0FnZW04dVkyeHZjMlZ6ZEZCdmFXNTBWRzlRYjJsdWRDaHpNU3dnWXlrc0lHTXVZWEJ3YkhsTllYUnlhWGcwS0c0cE93b2dJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ2FTNXlZWGt1YjNKcFoybHVMbVJwYzNSaGJtTmxWRzhvWXlrN0NpQWdJQ0FnSUNBZ2FXWWdLR3dnUENCcExtNWxZWElnZkh3Z2JDQStJR2t1Wm1GeUtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2NpNXdkWE5vS0hzS0lDQWdJQ0FnSUNBZ0lDQWdaR2x6ZEdGdVkyVTZJR3dzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUnBjM1JoYm1ObFZHOVNZWGs2SUUxaGRHZ3VjM0Z5ZENodktTd0tJQ0FnSUNBZ0lDQWdJQ0FnY0c5cGJuUTZJR01zQ2lBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0T2lCbExBb2dJQ0FnSUNBZ0lDQWdJQ0JtWVdObE9pQnVkV3hzTEFvZ0lDQWdJQ0FnSUNBZ0lDQnZZbXBsWTNRNklHRUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lIMEtmUXAyWVhJZ1NtZ2dQU0JqYkdGemN5QmxlSFJsYm1SeklGTjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXNJRzhzSUdNc0lHd3Bld29nSUNBZ0lDQWdJSE4xY0dWeUtHVXNJSFFzSUc0c0lHa3NJSElzSUdFc0lHOHNJR01zSUd3cExDQjBhR2x6TG1selZtbGtaVzlVWlhoMGRYSmxJRDBnSVRBc0lIUm9hWE11YldsdVJtbHNkR1Z5SUQwZ1lTQWhQVDBnZG05cFpDQXdJRDhnWVNBNklHMTBMQ0IwYUdsekxtMWhaMFpwYkhSbGNpQTlJSElnSVQwOUlIWnZhV1FnTUNBL0lISWdPaUJ0ZEN3Z2RHaHBjeTVuWlc1bGNtRjBaVTFwY0cxaGNITWdQU0FoTVRzS0lDQWdJQ0FnSUNCc1pYUWdhQ0E5SUhSb2FYTTdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdkU2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhQzV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0JsTG5KbGNYVmxjM1JXYVdSbGIwWnlZVzFsUTJGc2JHSmhZMnNvZFNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDSnlaWEYxWlhOMFZtbGtaVzlHY21GdFpVTmhiR3hpWVdOcklpQnBiaUJsSUNZbUlHVXVjbVZ4ZFdWemRGWnBaR1Z2Um5KaGJXVkRZV3hzWW1GamF5aDFLVHNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2loMGFHbHpMbWx0WVdkbEtTNWpiM0I1S0hSb2FYTXBPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NXBiV0ZuWlRzS0lDQWdJQ0FnSUNBaWNtVnhkV1Z6ZEZacFpHVnZSbkpoYldWRFlXeHNZbUZqYXlJZ2FXNGdaU0E5UFQwZ0lURWdKaVlnWlM1eVpXRmtlVk4wWVhSbElENDlJR1V1U0VGV1JWOURWVkpTUlU1VVgwUkJWRUVnSmlZZ0tIUm9hWE11Ym1WbFpITlZjR1JoZEdVZ1BTQWhNQ2s3Q2lBZ0lDQjlDbjBzSUNSb0lEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCVGRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWg3Q2lBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCbExBb2dJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJSFFLSUNBZ0lDQWdJQ0I5S1N3Z2RHaHBjeTVwYzBaeVlXMWxZblZtWm1WeVZHVjRkSFZ5WlNBOUlDRXdMQ0IwYUdsekxtMWhaMFpwYkhSbGNpQTlJSEIwTENCMGFHbHpMbTFwYmtacGJIUmxjaUE5SUhCMExDQjBhR2x6TG1kbGJtVnlZWFJsVFdsd2JXRndjeUE5SUNFeExDQjBhR2x6TG01bFpXUnpWWEJrWVhSbElEMGdJVEE3Q2lBZ0lDQjlDbjBzSUZWeklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCVGRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZMQ0JqTENCc0xDQm9MQ0IxTENCa0tYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lodWRXeHNMQ0JoTENCdkxDQmpMQ0JzTENCb0xDQnBMQ0J5TENCMUxDQmtLU3dnZEdocGN5NXBjME52YlhCeVpYTnpaV1JVWlhoMGRYSmxJRDBnSVRBc0lIUm9hWE11YVcxaFoyVWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCMExBb2dJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJRzRLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbTFwY0cxaGNITWdQU0JsTENCMGFHbHpMbVpzYVhCWklEMGdJVEVzSUhSb2FYTXVaMlZ1WlhKaGRHVk5hWEJ0WVhCeklEMGdJVEU3Q2lBZ0lDQjlDbjBzSUV0b0lEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCVmN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUxDQnBMQ0J5TENCaEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBMQ0J1TENCeUxDQmhLU3dnZEdocGN5NXBjME52YlhCeVpYTnpaV1JCY25KaGVWUmxlSFIxY21VZ1BTQWhNQ3dnZEdocGN5NXBiV0ZuWlM1a1pYQjBhQ0E5SUdrc0lIUm9hWE11ZDNKaGNGSWdQU0JKZERzS0lDQWdJSDBLZlN3Z1VXZ2dQU0JqYkdGemN5QmxlSFJsYm1SeklGVnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHBld29nSUNBZ0lDQWdJSE4xY0dWeUtIWnZhV1FnTUN3Z1pWc3dYUzUzYVdSMGFDd2daVnN3WFM1b1pXbG5hSFFzSUhRc0lHNHNJSHB1S1N3Z2RHaHBjeTVwYzBOdmJYQnlaWE56WldSRGRXSmxWR1Y0ZEhWeVpTQTlJQ0V3TENCMGFHbHpMbWx6UTNWaVpWUmxlSFIxY21VZ1BTQWhNQ3dnZEdocGN5NXBiV0ZuWlNBOUlHVTdDaUFnSUNCOUNuMHNJR3BvSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJUZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcExDQnlMQ0JoTENCdkxDQmpMQ0JzS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMExDQnVMQ0JwTENCeUxDQmhMQ0J2TENCakxDQnNLU3dnZEdocGN5NXBjME5oYm5aaGMxUmxlSFIxY21VZ1BTQWhNQ3dnZEdocGN5NXVaV1ZrYzFWd1pHRjBaU0E5SUNFd093b2dJQ0FnZlFwOUxDQmFkQ0E5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NTBlWEJsSUQwZ0lrTjFjblpsSWl3Z2RHaHBjeTVoY21OTVpXNW5kR2hFYVhacGMybHZibk1nUFNBeU1EQTdDaUFnSUNCOUNpQWdJQ0JuWlhSUWIybHVkQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1RGRYSjJaVG9nTG1kbGRGQnZhVzUwS0NrZ2JtOTBJR2x0Y0d4bGJXVnVkR1ZrTGlJcExDQnVkV3hzT3dvZ0lDQWdmUW9nSUNBZ1oyVjBVRzlwYm5SQmRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbWRsZEZWMGIxUnRZWEJ3YVc1bktHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRGQnZhVzUwS0c0c0lIUXBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFVHOXBiblJ6S0dVZ1BTQTFLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdPeUJ1SUR3OUlHVTdJRzRyS3lsMExuQjFjMmdvZEdocGN5NW5aWFJRYjJsdWRDaHVJQzhnWlNrcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCME93b2dJQ0FnZlFvZ0lDQWdaMlYwVTNCaFkyVmtVRzlwYm5SektHVWdQU0ExS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3T3lCdUlEdzlJR1U3SUc0ckt5bDBMbkIxYzJnb2RHaHBjeTVuWlhSUWIybHVkRUYwS0c0Z0x5QmxLU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFE3Q2lBZ0lDQjlDaUFnSUNCblpYUk1aVzVuZEdnb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG1kbGRFeGxibWQwYUhNb0tUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pWdGxMbXhsYm1kMGFDQXRJREZkT3dvZ0lDQWdmUW9nSUNBZ1oyVjBUR1Z1WjNSb2N5aGxJRDBnZEdocGN5NWhjbU5NWlc1bmRHaEVhWFpwYzJsdmJuTXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqWVdOb1pVRnlZMHhsYm1kMGFITWdKaVlnZEdocGN5NWpZV05vWlVGeVkweGxibWQwYUhNdWJHVnVaM1JvSUQwOVBTQmxJQ3NnTVNBbUppQWhkR2hwY3k1dVpXVmtjMVZ3WkdGMFpTa2djbVYwZFhKdUlIUm9hWE11WTJGamFHVkJjbU5NWlc1bmRHaHpPd29nSUNBZ0lDQWdJSFJvYVhNdWJtVmxaSE5WY0dSaGRHVWdQU0FoTVRzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUZ0ZExDQnVMQ0JwSUQwZ2RHaHBjeTVuWlhSUWIybHVkQ2d3S1N3Z2NpQTlJREE3Q2lBZ0lDQWdJQ0FnZEM1d2RYTm9LREFwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWVNBOUlERTdJR0VnUEQwZ1pUc2dZU3NyS1c0Z1BTQjBhR2x6TG1kbGRGQnZhVzUwS0dFZ0x5QmxLU3dnY2lBclBTQnVMbVJwYzNSaGJtTmxWRzhvYVNrc0lIUXVjSFZ6YUNoeUtTd2dhU0E5SUc0N0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMkZqYUdWQmNtTk1aVzVuZEdoeklEMGdkQ3dnZERzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlVGeVkweGxibWQwYUhNb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCMGFHbHpMbWRsZEV4bGJtZDBhSE1vS1RzS0lDQWdJSDBLSUNBZ0lHZGxkRlYwYjFSdFlYQndhVzVuS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVoyVjBUR1Z1WjNSb2N5Z3BMQ0JwSUQwZ01Dd2djaUE5SUc0dWJHVnVaM1JvTENCaE93b2dJQ0FnSUNBZ0lIUWdQeUJoSUQwZ2RDQTZJR0VnUFNCbElDb2dibHR5SUMwZ01WMDdDaUFnSUNBZ0lDQWdiR1YwSUc4Z1BTQXdMQ0JqSUQwZ2NpQXRJREVzSUd3N0NpQWdJQ0FnSUNBZ1ptOXlLRHNnYnlBOFBTQmpPeWxwWmlBb2FTQTlJRTFoZEdndVpteHZiM0lvYnlBcklDaGpJQzBnYnlrZ0x5QXlLU3dnYkNBOUlHNWJhVjBnTFNCaExDQnNJRHdnTUNrZ2J5QTlJR2tnS3lBeE93b2dJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tHd2dQaUF3S1NCaklEMGdhU0F0SURFN0NpQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTWdQU0JwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLR2tnUFNCakxDQnVXMmxkSUQwOVBTQmhLU0J5WlhSMWNtNGdhU0F2SUNoeUlDMGdNU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHZ2dQU0J1VzJsZExDQmtJRDBnYmx0cElDc2dNVjBnTFNCb0xDQm1JRDBnS0dFZ0xTQm9LU0F2SUdRN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNocElDc2daaWtnTHlBb2NpQXRJREVwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBWR0Z1WjJWdWRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCbElDMGdNV1V0TkN3Z2NpQTlJR1VnS3lBeFpTMDBPd29nSUNBZ0lDQWdJR2tnUENBd0lDWW1JQ2hwSUQwZ01Da3NJSElnUGlBeElDWW1JQ2h5SUQwZ01TazdDaUFnSUNBZ0lDQWdiR1YwSUdFZ1BTQjBhR2x6TG1kbGRGQnZhVzUwS0drcExDQnZJRDBnZEdocGN5NW5aWFJRYjJsdWRDaHlLU3dnWXlBOUlIUWdmSHdnS0dFdWFYTldaV04wYjNJeUlEOGdibVYzSUZvZ09pQnVaWGNnUVNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdNdVkyOXdlU2h2S1M1emRXSW9ZU2t1Ym05eWJXRnNhWHBsS0Nrc0lHTTdDaUFnSUNCOUNpQWdJQ0JuWlhSVVlXNW5aVzUwUVhRb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NW5aWFJWZEc5VWJXRndjR2x1WnlobEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhSVVlXNW5aVzUwS0c0c0lIUXBPd29nSUNBZ2ZRb2dJQ0FnWTI5dGNIVjBaVVp5Wlc1bGRFWnlZVzFsY3lobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0J1WlhjZ1FTd2dhU0E5SUZ0ZExDQnlJRDBnVzEwc0lHRWdQU0JiWFN3Z2J5QTlJRzVsZHlCQkxDQmpJRDBnYm1WM0lIcGxPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdaaUE5SURBN0lHWWdQRDBnWlRzZ1ppc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzBnUFNCbUlDOGdaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FWdG1YU0E5SUhSb2FYTXVaMlYwVkdGdVoyVnVkRUYwS0cwc0lHNWxkeUJCS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2Nsc3dYU0E5SUc1bGR5QkJMQ0JoV3pCZElEMGdibVYzSUVFN0NpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCT2RXMWlaWEl1VFVGWVgxWkJURlZGTENCb0lEMGdUV0YwYUM1aFluTW9hVnN3WFM1NEtTd2dkU0E5SUUxaGRHZ3VZV0p6S0dsYk1GMHVlU2tzSUdRZ1BTQk5ZWFJvTG1GaWN5aHBXekJkTG5vcE93b2dJQ0FnSUNBZ0lHZ2dQRDBnYkNBbUppQW9iQ0E5SUdnc0lHNHVjMlYwS0RFc0lEQXNJREFwS1N3Z2RTQThQU0JzSUNZbUlDaHNJRDBnZFN3Z2JpNXpaWFFvTUN3Z01Td2dNQ2twTENCa0lEdzlJR3dnSmlZZ2JpNXpaWFFvTUN3Z01Dd2dNU2tzSUc4dVkzSnZjM05XWldOMGIzSnpLR2xiTUYwc0lHNHBMbTV2Y20xaGJHbDZaU2dwTENCeVd6QmRMbU55YjNOelZtVmpkRzl5Y3locFd6QmRMQ0J2S1N3Z1lWc3dYUzVqY205emMxWmxZM1J2Y25Nb2FWc3dYU3dnY2xzd1hTazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQm1JRDBnTVRzZ1ppQThQU0JsT3lCbUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbHRtWFNBOUlISmJaaUF0SURGZExtTnNiMjVsS0Nrc0lHRmJabDBnUFNCaFcyWWdMU0F4WFM1amJHOXVaU2dwTENCdkxtTnliM056Vm1WamRHOXljeWhwVzJZZ0xTQXhYU3dnYVZ0bVhTa3NJRzh1YkdWdVozUm9LQ2tnUGlCT2RXMWlaWEl1UlZCVFNVeFBUaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnk1dWIzSnRZV3hwZW1Vb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0SUQwZ1RXRjBhQzVoWTI5ektHTjBLR2xiWmlBdElERmRMbVJ2ZENocFcyWmRLU3dnTFRFc0lERXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpiWmwwdVlYQndiSGxOWVhSeWFYZzBLR011YldGclpWSnZkR0YwYVc5dVFYaHBjeWh2TENCdEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdZVnRtWFM1amNtOXpjMVpsWTNSdmNuTW9hVnRtWFN3Z2NsdG1YU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdsbUlDaDBJRDA5UFNBaE1Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaaUE5SUUxaGRHZ3VZV052Y3loamRDaHlXekJkTG1SdmRDaHlXMlZkS1N3Z0xURXNJREVwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdaaUF2UFNCbExDQnBXekJkTG1SdmRDaHZMbU55YjNOelZtVmpkRzl5Y3loeVd6QmRMQ0J5VzJWZEtTa2dQaUF3SUNZbUlDaG1JRDBnTFdZcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzBnUFNBeE95QnRJRHc5SUdVN0lHMHJLeWx5VzIxZExtRndjR3g1VFdGMGNtbDROQ2hqTG0xaGEyVlNiM1JoZEdsdmJrRjRhWE1vYVZ0dFhTd2daaUFxSUcwcEtTd2dZVnR0WFM1amNtOXpjMVpsWTNSdmNuTW9hVnR0WFN3Z2NsdHRYU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUmhibWRsYm5Sek9pQnBMQW9nSUNBZ0lDQWdJQ0FnSUNCdWIzSnRZV3h6T2lCeUxBb2dJQ0FnSUNBZ0lDQWdJQ0JpYVc1dmNtMWhiSE02SUdFS0lDQWdJQ0FnSUNCOU93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwYUdsekxtTnZibk4wY25WamRHOXlLQ2t1WTI5d2VTaDBhR2x6S1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZ5WTB4bGJtZDBhRVJwZG1semFXOXVjeUE5SUdVdVlYSmpUR1Z1WjNSb1JHbDJhWE5wYjI1ekxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RHOUtVMDlPS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J0WlhSaFpHRjBZVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWMybHZiam9nTkM0MkxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSWtOMWNuWmxJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsYm1WeVlYUnZjam9nSWtOMWNuWmxMblJ2U2xOUFRpSUtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdVlYSmpUR1Z1WjNSb1JHbDJhWE5wYjI1eklEMGdkR2hwY3k1aGNtTk1aVzVuZEdoRWFYWnBjMmx2Ym5Nc0lHVXVkSGx3WlNBOUlIUm9hWE11ZEhsd1pTd2daVHNLSUNBZ0lIMEtJQ0FnSUdaeWIyMUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVoY21OTVpXNW5kR2hFYVhacGMybHZibk1nUFNCbExtRnlZMHhsYm1kMGFFUnBkbWx6YVc5dWN5d2dkR2hwY3pzS0lDQWdJSDBLZlN3Z1JITWdQU0JqYkdGemN5QmxlSFJsYm1SeklGcDBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBd0xDQjBJRDBnTUN3Z2JpQTlJREVzSUdrZ1BTQXhMQ0J5SUQwZ01Dd2dZU0E5SUUxaGRHZ3VVRWtnS2lBeUxDQnZJRDBnSVRFc0lHTWdQU0F3S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6Uld4c2FYQnpaVU4xY25abElEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSkZiR3hwY0hObFEzVnlkbVVpTENCMGFHbHpMbUZZSUQwZ1pTd2dkR2hwY3k1aFdTQTlJSFFzSUhSb2FYTXVlRkpoWkdsMWN5QTlJRzRzSUhSb2FYTXVlVkpoWkdsMWN5QTlJR2tzSUhSb2FYTXVZVk4wWVhKMFFXNW5iR1VnUFNCeUxDQjBhR2x6TG1GRmJtUkJibWRzWlNBOUlHRXNJSFJvYVhNdVlVTnNiMk5yZDJselpTQTlJRzhzSUhSb2FYTXVZVkp2ZEdGMGFXOXVJRDBnWXpzS0lDQWdJSDBLSUNBZ0lHZGxkRkJ2YVc1MEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhRZ2ZId2dibVYzSUZvc0lHa2dQU0JOWVhSb0xsQkpJQ29nTWl3Z2NpQTlJSFJvYVhNdVlVVnVaRUZ1WjJ4bElDMGdkR2hwY3k1aFUzUmhjblJCYm1kc1pTd2dZU0E5SUUxaGRHZ3VZV0p6S0hJcElEd2dUblZ0WW1WeUxrVlFVMGxNVDA0N0NpQWdJQ0FnSUNBZ1ptOXlLRHNnY2lBOElEQTdLWElnS3owZ2FUc0tJQ0FnSUNBZ0lDQm1iM0lvT3lCeUlENGdhVHNwY2lBdFBTQnBPd29nSUNBZ0lDQWdJSElnUENCT2RXMWlaWEl1UlZCVFNVeFBUaUFtSmlBb1lTQS9JSElnUFNBd0lEb2djaUE5SUdrcExDQjBhR2x6TG1GRGJHOWphM2RwYzJVZ1BUMDlJQ0V3SUNZbUlDRmhJQ1ltSUNoeUlEMDlQU0JwSUQ4Z2NpQTlJQzFwSURvZ2NpQTlJSElnTFNCcEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlIUm9hWE11WVZOMFlYSjBRVzVuYkdVZ0t5QmxJQ29nY2l3Z1l5QTlJSFJvYVhNdVlWZ2dLeUIwYUdsekxuaFNZV1JwZFhNZ0tpQk5ZWFJvTG1OdmN5aHZLU3dnYkNBOUlIUm9hWE11WVZrZ0t5QjBhR2x6TG5sU1lXUnBkWE1nS2lCTllYUm9Mbk5wYmlodktUc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWhVbTkwWVhScGIyNGdJVDA5SURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHZ2dQU0JOWVhSb0xtTnZjeWgwYUdsekxtRlNiM1JoZEdsdmJpa3NJSFVnUFNCTllYUm9Mbk5wYmloMGFHbHpMbUZTYjNSaGRHbHZiaWtzSUdRZ1BTQmpJQzBnZEdocGN5NWhXQ3dnWmlBOUlHd2dMU0IwYUdsekxtRlpPd29nSUNBZ0lDQWdJQ0FnSUNCaklEMGdaQ0FxSUdnZ0xTQm1JQ29nZFNBcklIUm9hWE11WVZnc0lHd2dQU0JrSUNvZ2RTQXJJR1lnS2lCb0lDc2dkR2hwY3k1aFdUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNHVjMlYwS0dNc0lHd3BPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11WVZnZ1BTQmxMbUZZTENCMGFHbHpMbUZaSUQwZ1pTNWhXU3dnZEdocGN5NTRVbUZrYVhWeklEMGdaUzU0VW1Ga2FYVnpMQ0IwYUdsekxubFNZV1JwZFhNZ1BTQmxMbmxTWVdScGRYTXNJSFJvYVhNdVlWTjBZWEowUVc1bmJHVWdQU0JsTG1GVGRHRnlkRUZ1WjJ4bExDQjBhR2x6TG1GRmJtUkJibWRzWlNBOUlHVXVZVVZ1WkVGdVoyeGxMQ0IwYUdsekxtRkRiRzlqYTNkcGMyVWdQU0JsTG1GRGJHOWphM2RwYzJVc0lIUm9hWE11WVZKdmRHRjBhVzl1SUQwZ1pTNWhVbTkwWVhScGIyNHNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQnpkWEJsY2k1MGIwcFRUMDRvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1aFdDQTlJSFJvYVhNdVlWZ3NJR1V1WVZrZ1BTQjBhR2x6TG1GWkxDQmxMbmhTWVdScGRYTWdQU0IwYUdsekxuaFNZV1JwZFhNc0lHVXVlVkpoWkdsMWN5QTlJSFJvYVhNdWVWSmhaR2wxY3l3Z1pTNWhVM1JoY25SQmJtZHNaU0E5SUhSb2FYTXVZVk4wWVhKMFFXNW5iR1VzSUdVdVlVVnVaRUZ1WjJ4bElEMGdkR2hwY3k1aFJXNWtRVzVuYkdVc0lHVXVZVU5zYjJOcmQybHpaU0E5SUhSb2FYTXVZVU5zYjJOcmQybHpaU3dnWlM1aFVtOTBZWFJwYjI0Z1BTQjBhR2x6TG1GU2IzUmhkR2x2Yml3Z1pUc0tJQ0FnSUgwS0lDQWdJR1p5YjIxS1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVabkp2YlVwVFQwNG9aU2tzSUhSb2FYTXVZVmdnUFNCbExtRllMQ0IwYUdsekxtRlpJRDBnWlM1aFdTd2dkR2hwY3k1NFVtRmthWFZ6SUQwZ1pTNTRVbUZrYVhWekxDQjBhR2x6TG5sU1lXUnBkWE1nUFNCbExubFNZV1JwZFhNc0lIUm9hWE11WVZOMFlYSjBRVzVuYkdVZ1BTQmxMbUZUZEdGeWRFRnVaMnhsTENCMGFHbHpMbUZGYm1SQmJtZHNaU0E5SUdVdVlVVnVaRUZ1WjJ4bExDQjBhR2x6TG1GRGJHOWphM2RwYzJVZ1BTQmxMbUZEYkc5amEzZHBjMlVzSUhSb2FYTXVZVkp2ZEdGMGFXOXVJRDBnWlM1aFVtOTBZWFJwYjI0c0lIUm9hWE03Q2lBZ0lDQjlDbjBzSUd0dklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCRWN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUxDQnBMQ0J5TENCaEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBMQ0J1TENCdUxDQnBMQ0J5TENCaEtTd2dkR2hwY3k1cGMwRnlZME4xY25abElEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSkJjbU5EZFhKMlpTSTdDaUFnSUNCOUNuMDdDbVoxYm1OMGFXOXVJRXBqS0NrZ2V3b2dJQ0FnYkdWMElITXhJRDBnTUN3Z1pTQTlJREFzSUhRZ1BTQXdMQ0J1SUQwZ01Ec0tJQ0FnSUdaMWJtTjBhVzl1SUdrb2Npd2dZU3dnYnl3Z1l5a2dld29nSUNBZ0lDQWdJSE14SUQwZ2Npd2daU0E5SUc4c0lIUWdQU0F0TXlBcUlISWdLeUF6SUNvZ1lTQXRJRElnS2lCdklDMGdZeXdnYmlBOUlESWdLaUJ5SUMwZ01pQXFJR0VnS3lCdklDc2dZenNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnYVc1cGRFTmhkRzExYkd4U2IyMDZJR1oxYm1OMGFXOXVLSElzSUdFc0lHOHNJR01zSUd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVNoaExDQnZMQ0JzSUNvZ0tHOGdMU0J5S1N3Z2JDQXFJQ2hqSUMwZ1lTa3BPd29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYVc1cGRFNXZiblZ1YVdadmNtMURZWFJ0ZFd4c1VtOXRPaUJtZFc1amRHbHZiaWh5TENCaExDQnZMQ0JqTENCc0xDQm9MQ0IxS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdLR0VnTFNCeUtTQXZJR3dnTFNBb2J5QXRJSElwSUM4Z0tHd2dLeUJvS1NBcklDaHZJQzBnWVNrZ0x5Qm9MQ0JtSUQwZ0tHOGdMU0JoS1NBdklHZ2dMU0FvWXlBdElHRXBJQzhnS0dnZ0t5QjFLU0FySUNoaklDMGdieWtnTHlCMU93b2dJQ0FnSUNBZ0lDQWdJQ0JrSUNvOUlHZ3NJR1lnS2owZ2FDd2dhU2hoTENCdkxDQmtMQ0JtS1RzS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHTmhiR002SUdaMWJtTjBhVzl1S0hJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHRWdQU0J5SUNvZ2Npd2dieUE5SUdFZ0tpQnlPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY3pFZ0t5QmxJQ29nY2lBcklIUWdLaUJoSUNzZ2JpQXFJRzg3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmVHNLZlFwMllYSWdlSElnUFNCdVpYY2dRU3dnYVc4Z1BTQnVaWGNnU21Nc0lITnZJRDBnYm1WM0lFcGpMQ0J5YnlBOUlHNWxkeUJLWXl3Z1NHOGdQU0JqYkdGemN5QmxlSFJsYm1SeklGcDBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCYlhTd2dkQ0E5SUNFeExDQnVJRDBnSW1ObGJuUnlhWEJsZEdGc0lpd2dhU0E5SUM0MUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selEyRjBiWFZzYkZKdmJVTjFjblpsTXlBOUlDRXdMQ0IwYUdsekxuUjVjR1VnUFNBaVEyRjBiWFZzYkZKdmJVTjFjblpsTXlJc0lIUm9hWE11Y0c5cGJuUnpJRDBnWlN3Z2RHaHBjeTVqYkc5elpXUWdQU0IwTENCMGFHbHpMbU4xY25abFZIbHdaU0E5SUc0c0lIUm9hWE11ZEdWdWMybHZiaUE5SUdrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJRYjJsdWRDaGxMQ0IwSUQwZ2JtVjNJRUVwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhRc0lHa2dQU0IwYUdsekxuQnZhVzUwY3l3Z2NpQTlJR2t1YkdWdVozUm9MQ0JoSUQwZ0tISWdMU0FvZEdocGN5NWpiRzl6WldRZ1B5QXdJRG9nTVNrcElDb2daU3dnYnlBOUlFMWhkR2d1Wm14dmIzSW9ZU2tzSUdNZ1BTQmhJQzBnYnpzS0lDQWdJQ0FnSUNCMGFHbHpMbU5zYjNObFpDQS9JRzhnS3owZ2J5QStJREFnUHlBd0lEb2dLRTFoZEdndVpteHZiM0lvVFdGMGFDNWhZbk1vYnlrZ0x5QnlLU0FySURFcElDb2djaUE2SUdNZ1BUMDlJREFnSmlZZ2J5QTlQVDBnY2lBdElERWdKaVlnS0c4Z1BTQnlJQzBnTWl3Z1l5QTlJREVwT3dvZ0lDQWdJQ0FnSUd4bGRDQnNMQ0JvT3dvZ0lDQWdJQ0FnSUhSb2FYTXVZMnh2YzJWa0lIeDhJRzhnUGlBd0lEOGdiQ0E5SUdsYktHOGdMU0F4S1NBbElISmRJRG9nS0hoeUxuTjFZbFpsWTNSdmNuTW9hVnN3WFN3Z2FWc3hYU2t1WVdSa0tHbGJNRjBwTENCc0lEMGdlSElwT3dvZ0lDQWdJQ0FnSUd4bGRDQjFJRDBnYVZ0dklDVWdjbDBzSUdRZ1BTQnBXeWh2SUNzZ01Ta2dKU0J5WFRzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1amJHOXpaV1FnZkh3Z2J5QXJJRElnUENCeUlEOGdhQ0E5SUdsYktHOGdLeUF5S1NBbElISmRJRG9nS0hoeUxuTjFZbFpsWTNSdmNuTW9hVnR5SUMwZ01WMHNJR2xiY2lBdElESmRLUzVoWkdRb2FWdHlJQzBnTVYwcExDQm9JRDBnZUhJcExDQjBhR2x6TG1OMWNuWmxWSGx3WlNBOVBUMGdJbU5sYm5SeWFYQmxkR0ZzSWlCOGZDQjBhR2x6TG1OMWNuWmxWSGx3WlNBOVBUMGdJbU5vYjNKa1lXd2lLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JtSUQwZ2RHaHBjeTVqZFhKMlpWUjVjR1VnUFQwOUlDSmphRzl5WkdGc0lpQS9JQzQxSURvZ0xqSTFMQ0J0SUQwZ1RXRjBhQzV3YjNjb2JDNWthWE4wWVc1alpWUnZVM0YxWVhKbFpDaDFLU3dnWmlrc0lGOGdQU0JOWVhSb0xuQnZkeWgxTG1ScGMzUmhibU5sVkc5VGNYVmhjbVZrS0dRcExDQm1LU3dnWnlBOUlFMWhkR2d1Y0c5M0tHUXVaR2x6ZEdGdVkyVlViMU54ZFdGeVpXUW9hQ2tzSUdZcE93b2dJQ0FnSUNBZ0lDQWdJQ0JmSUR3Z01XVXROQ0FtSmlBb1h5QTlJREVwTENCdElEd2dNV1V0TkNBbUppQW9iU0E5SUY4cExDQm5JRHdnTVdVdE5DQW1KaUFvWnlBOUlGOHBMQ0JwYnk1cGJtbDBUbTl1ZFc1cFptOXliVU5oZEcxMWJHeFNiMjBvYkM1NExDQjFMbmdzSUdRdWVDd2dhQzU0TENCdExDQmZMQ0JuS1N3Z2MyOHVhVzVwZEU1dmJuVnVhV1p2Y20xRFlYUnRkV3hzVW05dEtHd3VlU3dnZFM1NUxDQmtMbmtzSUdndWVTd2diU3dnWHl3Z1p5a3NJSEp2TG1sdWFYUk9iMjUxYm1sbWIzSnRRMkYwYlhWc2JGSnZiU2hzTG5vc0lIVXVlaXdnWkM1NkxDQm9Mbm9zSUcwc0lGOHNJR2NwT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0IwYUdsekxtTjFjblpsVkhsd1pTQTlQVDBnSW1OaGRHMTFiR3h5YjIwaUlDWW1JQ2hwYnk1cGJtbDBRMkYwYlhWc2JGSnZiU2hzTG5nc0lIVXVlQ3dnWkM1NExDQm9MbmdzSUhSb2FYTXVkR1Z1YzJsdmJpa3NJSE52TG1sdWFYUkRZWFJ0ZFd4c1VtOXRLR3d1ZVN3Z2RTNTVMQ0JrTG5rc0lHZ3VlU3dnZEdocGN5NTBaVzV6YVc5dUtTd2djbTh1YVc1cGRFTmhkRzExYkd4U2IyMG9iQzU2TENCMUxub3NJR1F1ZWl3Z2FDNTZMQ0IwYUdsekxuUmxibk5wYjI0cEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JpNXpaWFFvYVc4dVkyRnNZeWhqS1N3Z2MyOHVZMkZzWXloaktTd2djbTh1WTJGc1l5aGpLU2tzSUc0N0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbkJ2YVc1MGN5QTlJRnRkT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZENBOUlEQXNJRzRnUFNCbExuQnZhVzUwY3k1c1pXNW5kR2c3SUhRZ1BDQnVPeUIwS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJR1V1Y0c5cGJuUnpXM1JkT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CdmFXNTBjeTV3ZFhOb0tHa3VZMnh2Ym1Vb0tTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1Oc2IzTmxaQ0E5SUdVdVkyeHZjMlZrTENCMGFHbHpMbU4xY25abFZIbHdaU0E5SUdVdVkzVnlkbVZVZVhCbExDQjBhR2x6TG5SbGJuTnBiMjRnUFNCbExuUmxibk5wYjI0c0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCemRYQmxjaTUwYjBwVFQwNG9LVHNLSUNBZ0lDQWdJQ0JsTG5CdmFXNTBjeUE5SUZ0ZE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREFzSUc0Z1BTQjBhR2x6TG5CdmFXNTBjeTVzWlc1bmRHZzdJSFFnUENCdU95QjBLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUm9hWE11Y0c5cGJuUnpXM1JkT3dvZ0lDQWdJQ0FnSUNBZ0lDQmxMbkJ2YVc1MGN5NXdkWE5vS0drdWRHOUJjbkpoZVNncEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVZMnh2YzJWa0lEMGdkR2hwY3k1amJHOXpaV1FzSUdVdVkzVnlkbVZVZVhCbElEMGdkR2hwY3k1amRYSjJaVlI1Y0dVc0lHVXVkR1Z1YzJsdmJpQTlJSFJvYVhNdWRHVnVjMmx2Yml3Z1pUc0tJQ0FnSUgwS0lDQWdJR1p5YjIxS1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCemRYQmxjaTVtY205dFNsTlBUaWhsS1N3Z2RHaHBjeTV3YjJsdWRITWdQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhRZ1BTQXdMQ0J1SUQwZ1pTNXdiMmx1ZEhNdWJHVnVaM1JvT3lCMElEd2dianNnZENzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0JsTG5CdmFXNTBjMXQwWFRzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2IybHVkSE11Y0hWemFDaHVaWGNnUVNncExtWnliMjFCY25KaGVTaHBLU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnNiM05sWkNBOUlHVXVZMnh2YzJWa0xDQjBhR2x6TG1OMWNuWmxWSGx3WlNBOUlHVXVZM1Z5ZG1WVWVYQmxMQ0IwYUdsekxuUmxibk5wYjI0Z1BTQmxMblJsYm5OcGIyNHNJSFJvYVhNN0NpQWdJQ0I5Q24wN0NtWjFibU4wYVc5dUlHVjFLSE14TENCbExDQjBMQ0J1TENCcEtTQjdDaUFnSUNCc1pYUWdjaUE5SUNodUlDMGdaU2tnS2lBdU5Td2dZU0E5SUNocElDMGdkQ2tnS2lBdU5Td2dieUE5SUhNeElDb2djekVzSUdNZ1BTQnpNU0FxSUc4N0NpQWdJQ0J5WlhSMWNtNGdLRElnS2lCMElDMGdNaUFxSUc0Z0t5QnlJQ3NnWVNrZ0tpQmpJQ3NnS0MweklDb2dkQ0FySURNZ0tpQnVJQzBnTWlBcUlISWdMU0JoS1NBcUlHOGdLeUJ5SUNvZ2N6RWdLeUIwT3dwOUNtWjFibU4wYVc5dUlGa3dLSE14TENCbEtTQjdDaUFnSUNCc1pYUWdkQ0E5SURFZ0xTQnpNVHNLSUNBZ0lISmxkSFZ5YmlCMElDb2dkQ0FxSUdVN0NuMEtablZ1WTNScGIyNGdXakFvY3pFc0lHVXBJSHNLSUNBZ0lISmxkSFZ5YmlBeUlDb2dLREVnTFNCek1Ta2dLaUJ6TVNBcUlHVTdDbjBLWm5WdVkzUnBiMjRnU2pBb2N6RXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQnpNU0FxSUhNeElDb2daVHNLZlFwbWRXNWpkR2x2YmlCaWN5aHpNU3dnWlN3Z2RDd2diaWtnZXdvZ0lDQWdjbVYwZFhKdUlGa3dLSE14TENCbEtTQXJJRm93S0hNeExDQjBLU0FySUVvd0tITXhMQ0J1S1RzS2ZRcG1kVzVqZEdsdmJpQWtNQ2h6TVN3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNBeElDMGdjekU3Q2lBZ0lDQnlaWFIxY200Z2RDQXFJSFFnS2lCMElDb2daVHNLZlFwbWRXNWpkR2x2YmlCTE1DaHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0F4SUMwZ2N6RTdDaUFnSUNCeVpYUjFjbTRnTXlBcUlIUWdLaUIwSUNvZ2N6RWdLaUJsT3dwOUNtWjFibU4wYVc5dUlGRXdLSE14TENCbEtTQjdDaUFnSUNCeVpYUjFjbTRnTXlBcUlDZ3hJQzBnY3pFcElDb2djekVnS2lCek1TQXFJR1U3Q24wS1puVnVZM1JwYjI0Z2FqQW9jekVzSUdVcElIc0tJQ0FnSUhKbGRIVnliaUJ6TVNBcUlITXhJQ29nY3pFZ0tpQmxPd3A5Q21aMWJtTjBhVzl1SUVWektITXhMQ0JsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0J5WlhSMWNtNGdKREFvY3pFc0lHVXBJQ3NnU3pBb2N6RXNJSFFwSUNzZ1VUQW9jekVzSUc0cElDc2dhakFvY3pFc0lHa3BPd3A5Q25aaGNpQnBZU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdXblFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlHNWxkeUJhTENCMElEMGdibVYzSUZvc0lHNGdQU0J1WlhjZ1dpd2dhU0E5SUc1bGR5QmFLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpRM1ZpYVdOQ1pYcHBaWEpEZFhKMlpTQTlJQ0V3TENCMGFHbHpMblI1Y0dVZ1BTQWlRM1ZpYVdOQ1pYcHBaWEpEZFhKMlpTSXNJSFJvYVhNdWRqQWdQU0JsTENCMGFHbHpMbll4SUQwZ2RDd2dkR2hwY3k1Mk1pQTlJRzRzSUhSb2FYTXVkak1nUFNCcE93b2dJQ0FnZlFvZ0lDQWdaMlYwVUc5cGJuUW9aU3dnZENBOUlHNWxkeUJhS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMExDQnBJRDBnZEdocGN5NTJNQ3dnY2lBOUlIUm9hWE11ZGpFc0lHRWdQU0IwYUdsekxuWXlMQ0J2SUQwZ2RHaHBjeTUyTXpzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmk1elpYUW9SWE1vWlN3Z2FTNTRMQ0J5TG5nc0lHRXVlQ3dnYnk1NEtTd2dSWE1vWlN3Z2FTNTVMQ0J5TG5rc0lHRXVlU3dnYnk1NUtTa3NJRzQ3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1Mk1DNWpiM0I1S0dVdWRqQXBMQ0IwYUdsekxuWXhMbU52Y0hrb1pTNTJNU2tzSUhSb2FYTXVkakl1WTI5d2VTaGxMbll5S1N3Z2RHaHBjeTUyTXk1amIzQjVLR1V1ZGpNcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RHOUtVMDlPS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2MzVndaWEl1ZEc5S1UwOU9LQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1ZGpBZ1BTQjBhR2x6TG5Zd0xuUnZRWEp5WVhrb0tTd2daUzUyTVNBOUlIUm9hWE11ZGpFdWRHOUJjbkpoZVNncExDQmxMbll5SUQwZ2RHaHBjeTUyTWk1MGIwRnljbUY1S0Nrc0lHVXVkak1nUFNCMGFHbHpMbll6TG5SdlFYSnlZWGtvS1N3Z1pUc0tJQ0FnSUgwS0lDQWdJR1p5YjIxS1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVabkp2YlVwVFQwNG9aU2tzSUhSb2FYTXVkakF1Wm5KdmJVRnljbUY1S0dVdWRqQXBMQ0IwYUdsekxuWXhMbVp5YjIxQmNuSmhlU2hsTG5ZeEtTd2dkR2hwY3k1Mk1pNW1jbTl0UVhKeVlYa29aUzUyTWlrc0lIUm9hWE11ZGpNdVpuSnZiVUZ5Y21GNUtHVXVkak1wTENCMGFHbHpPd29nSUNBZ2ZRcDlMQ0JIYnlBOUlHTnNZWE56SUdWNGRHVnVaSE1nV25RZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRzVsZHlCQkxDQjBJRDBnYm1WM0lFRXNJRzRnUFNCdVpYY2dRU3dnYVNBOUlHNWxkeUJCS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6UTNWaWFXTkNaWHBwWlhKRGRYSjJaVE1nUFNBaE1Dd2dkR2hwY3k1MGVYQmxJRDBnSWtOMVltbGpRbVY2YVdWeVEzVnlkbVV6SWl3Z2RHaHBjeTUyTUNBOUlHVXNJSFJvYVhNdWRqRWdQU0IwTENCMGFHbHpMbll5SUQwZ2Jpd2dkR2hwY3k1Mk15QTlJR2s3Q2lBZ0lDQjlDaUFnSUNCblpYUlFiMmx1ZENobExDQjBJRDBnYm1WM0lFRXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFFzSUdrZ1BTQjBhR2x6TG5Zd0xDQnlJRDBnZEdocGN5NTJNU3dnWVNBOUlIUm9hWE11ZGpJc0lHOGdQU0IwYUdsekxuWXpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVMbk5sZENoRmN5aGxMQ0JwTG5nc0lISXVlQ3dnWVM1NExDQnZMbmdwTENCRmN5aGxMQ0JwTG5rc0lISXVlU3dnWVM1NUxDQnZMbmtwTENCRmN5aGxMQ0JwTG5vc0lISXVlaXdnWVM1NkxDQnZMbm9wS1N3Z2Jqc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbll3TG1OdmNIa29aUzUyTUNrc0lIUm9hWE11ZGpFdVkyOXdlU2hsTG5ZeEtTd2dkR2hwY3k1Mk1pNWpiM0I1S0dVdWRqSXBMQ0IwYUdsekxuWXpMbU52Y0hrb1pTNTJNeWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0J6ZFhCbGNpNTBiMHBUVDA0b0tUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNTJNQ0E5SUhSb2FYTXVkakF1ZEc5QmNuSmhlU2dwTENCbExuWXhJRDBnZEdocGN5NTJNUzUwYjBGeWNtRjVLQ2tzSUdVdWRqSWdQU0IwYUdsekxuWXlMblJ2UVhKeVlYa29LU3dnWlM1Mk15QTlJSFJvYVhNdWRqTXVkRzlCY25KaGVTZ3BMQ0JsT3dvZ0lDQWdmUW9nSUNBZ1puSnZiVXBUVDA0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1bWNtOXRTbE5QVGlobEtTd2dkR2hwY3k1Mk1DNW1jbTl0UVhKeVlYa29aUzUyTUNrc0lIUm9hWE11ZGpFdVpuSnZiVUZ5Y21GNUtHVXVkakVwTENCMGFHbHpMbll5TG1aeWIyMUJjbkpoZVNobExuWXlLU3dnZEdocGN5NTJNeTVtY205dFFYSnlZWGtvWlM1Mk15a3NJSFJvYVhNN0NpQWdJQ0I5Q24wc0lITmhJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmFkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ2JtVjNJRm9zSUhRZ1BTQnVaWGNnV2lsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1N3Z2RHaHBjeTVwYzB4cGJtVkRkWEoyWlNBOUlDRXdMQ0IwYUdsekxuUjVjR1VnUFNBaVRHbHVaVU4xY25abElpd2dkR2hwY3k1Mk1TQTlJR1VzSUhSb2FYTXVkaklnUFNCME93b2dJQ0FnZlFvZ0lDQWdaMlYwVUc5cGJuUW9aU3dnZENBOUlHNWxkeUJhS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCME93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbElEMDlQU0F4SUQ4Z2JpNWpiM0I1S0hSb2FYTXVkaklwSURvZ0tHNHVZMjl3ZVNoMGFHbHpMbll5S1M1emRXSW9kR2hwY3k1Mk1Ta3NJRzR1YlhWc2RHbHdiSGxUWTJGc1lYSW9aU2t1WVdSa0tIUm9hWE11ZGpFcEtTd2dianNLSUNBZ0lIMEtJQ0FnSUdkbGRGQnZhVzUwUVhRb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRkJ2YVc1MEtHVXNJSFFwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBWR0Z1WjJWdWRDaGxMQ0IwSUQwZ2JtVjNJRm9wSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEM1emRXSldaV04wYjNKektIUm9hWE11ZGpJc0lIUm9hWE11ZGpFcExtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ2ZRb2dJQ0FnWjJWMFZHRnVaMlZ1ZEVGMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJVWVc1blpXNTBLR1VzSUhRcE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVkakV1WTI5d2VTaGxMbll4S1N3Z2RHaHBjeTUyTWk1amIzQjVLR1V1ZGpJcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RHOUtVMDlPS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2MzVndaWEl1ZEc5S1UwOU9LQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1ZGpFZ1BTQjBhR2x6TG5ZeExuUnZRWEp5WVhrb0tTd2daUzUyTWlBOUlIUm9hWE11ZGpJdWRHOUJjbkpoZVNncExDQmxPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVtY205dFNsTlBUaWhsS1N3Z2RHaHBjeTUyTVM1bWNtOXRRWEp5WVhrb1pTNTJNU2tzSUhSb2FYTXVkakl1Wm5KdmJVRnljbUY1S0dVdWRqSXBMQ0IwYUdsek93b2dJQ0FnZlFwOUxDQlhieUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdXblFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlHNWxkeUJCTENCMElEMGdibVYzSUVFcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11YVhOTWFXNWxRM1Z5ZG1VeklEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSk1hVzVsUTNWeWRtVXpJaXdnZEdocGN5NTJNU0E5SUdVc0lIUm9hWE11ZGpJZ1BTQjBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFVHOXBiblFvWlN3Z2RDQTlJRzVsZHlCQktTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxJRDA5UFNBeElEOGdiaTVqYjNCNUtIUm9hWE11ZGpJcElEb2dLRzR1WTI5d2VTaDBhR2x6TG5ZeUtTNXpkV0lvZEdocGN5NTJNU2tzSUc0dWJYVnNkR2x3YkhsVFkyRnNZWElvWlNrdVlXUmtLSFJvYVhNdWRqRXBLU3dnYmpzS0lDQWdJSDBLSUNBZ0lHZGxkRkJ2YVc1MFFYUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRsZEZCdmFXNTBLR1VzSUhRcE93b2dJQ0FnZlFvZ0lDQWdaMlYwVkdGdVoyVnVkQ2hsTENCMElEMGdibVYzSUVFcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDNXpkV0pXWldOMGIzSnpLSFJvYVhNdWRqSXNJSFJvYVhNdWRqRXBMbTV2Y20xaGJHbDZaU2dwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBWR0Z1WjJWdWRFRjBLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhSVVlXNW5aVzUwS0dVc0lIUXBPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11ZGpFdVkyOXdlU2hsTG5ZeEtTd2dkR2hwY3k1Mk1pNWpiM0I1S0dVdWRqSXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdjM1Z3WlhJdWRHOUtVMDlPS0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWRqRWdQU0IwYUdsekxuWXhMblJ2UVhKeVlYa29LU3dnWlM1Mk1pQTlJSFJvYVhNdWRqSXVkRzlCY25KaGVTZ3BMQ0JsT3dvZ0lDQWdmUW9nSUNBZ1puSnZiVXBUVDA0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1bWNtOXRTbE5QVGlobEtTd2dkR2hwY3k1Mk1TNW1jbTl0UVhKeVlYa29aUzUyTVNrc0lIUm9hWE11ZGpJdVpuSnZiVUZ5Y21GNUtHVXVkaklwTENCMGFHbHpPd29nSUNBZ2ZRcDlMQ0J5WVNBOUlHTnNZWE56SUdWNGRHVnVaSE1nV25RZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRzVsZHlCYUxDQjBJRDBnYm1WM0lGb3NJRzRnUFNCdVpYY2dXaWw3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NXBjMUYxWVdSeVlYUnBZMEpsZW1sbGNrTjFjblpsSUQwZ0lUQXNJSFJvYVhNdWRIbHdaU0E5SUNKUmRXRmtjbUYwYVdOQ1pYcHBaWEpEZFhKMlpTSXNJSFJvYVhNdWRqQWdQU0JsTENCMGFHbHpMbll4SUQwZ2RDd2dkR2hwY3k1Mk1pQTlJRzQ3Q2lBZ0lDQjlDaUFnSUNCblpYUlFiMmx1ZENobExDQjBJRDBnYm1WM0lGb3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFFzSUdrZ1BTQjBhR2x6TG5Zd0xDQnlJRDBnZEdocGN5NTJNU3dnWVNBOUlIUm9hWE11ZGpJN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0dWMyVjBLR0p6S0dVc0lHa3VlQ3dnY2k1NExDQmhMbmdwTENCaWN5aGxMQ0JwTG5rc0lISXVlU3dnWVM1NUtTa3NJRzQ3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1Mk1DNWpiM0I1S0dVdWRqQXBMQ0IwYUdsekxuWXhMbU52Y0hrb1pTNTJNU2tzSUhSb2FYTXVkakl1WTI5d2VTaGxMbll5S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhOMWNHVnlMblJ2U2xOUFRpZ3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbll3SUQwZ2RHaHBjeTUyTUM1MGIwRnljbUY1S0Nrc0lHVXVkakVnUFNCMGFHbHpMbll4TG5SdlFYSnlZWGtvS1N3Z1pTNTJNaUE5SUhSb2FYTXVkakl1ZEc5QmNuSmhlU2dwTENCbE93b2dJQ0FnZlFvZ0lDQWdabkp2YlVwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNW1jbTl0U2xOUFRpaGxLU3dnZEdocGN5NTJNQzVtY205dFFYSnlZWGtvWlM1Mk1Da3NJSFJvYVhNdWRqRXVabkp2YlVGeWNtRjVLR1V1ZGpFcExDQjBhR2x6TG5ZeUxtWnliMjFCY25KaGVTaGxMbll5S1N3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnWVdFZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUZwMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0J1WlhjZ1FTd2dkQ0E5SUc1bGR5QkJMQ0J1SUQwZ2JtVjNJRUVwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVhWE5SZFdGa2NtRjBhV05DWlhwcFpYSkRkWEoyWlRNZ1BTQWhNQ3dnZEdocGN5NTBlWEJsSUQwZ0lsRjFZV1J5WVhScFkwSmxlbWxsY2tOMWNuWmxNeUlzSUhSb2FYTXVkakFnUFNCbExDQjBhR2x6TG5ZeElEMGdkQ3dnZEdocGN5NTJNaUE5SUc0N0NpQWdJQ0I5Q2lBZ0lDQm5aWFJRYjJsdWRDaGxMQ0IwSUQwZ2JtVjNJRUVwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhRc0lHa2dQU0IwYUdsekxuWXdMQ0J5SUQwZ2RHaHBjeTUyTVN3Z1lTQTlJSFJvYVhNdWRqSTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNHVjMlYwS0dKektHVXNJR2t1ZUN3Z2NpNTRMQ0JoTG5ncExDQmljeWhsTENCcExua3NJSEl1ZVN3Z1lTNTVLU3dnWW5Nb1pTd2dhUzU2TENCeUxub3NJR0V1ZWlrcExDQnVPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11ZGpBdVkyOXdlU2hsTG5Zd0tTd2dkR2hwY3k1Mk1TNWpiM0I1S0dVdWRqRXBMQ0IwYUdsekxuWXlMbU52Y0hrb1pTNTJNaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0J6ZFhCbGNpNTBiMHBUVDA0b0tUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNTJNQ0E5SUhSb2FYTXVkakF1ZEc5QmNuSmhlU2dwTENCbExuWXhJRDBnZEdocGN5NTJNUzUwYjBGeWNtRjVLQ2tzSUdVdWRqSWdQU0IwYUdsekxuWXlMblJ2UVhKeVlYa29LU3dnWlRzS0lDQWdJSDBLSUNBZ0lHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVpuSnZiVXBUVDA0b1pTa3NJSFJvYVhNdWRqQXVabkp2YlVGeWNtRjVLR1V1ZGpBcExDQjBhR2x6TG5ZeExtWnliMjFCY25KaGVTaGxMbll4S1N3Z2RHaHBjeTUyTWk1bWNtOXRRWEp5WVhrb1pTNTJNaWtzSUhSb2FYTTdDaUFnSUNCOUNuMHNJRzloSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJhZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdXMTBwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVhWE5UY0d4cGJtVkRkWEoyWlNBOUlDRXdMQ0IwYUdsekxuUjVjR1VnUFNBaVUzQnNhVzVsUTNWeWRtVWlMQ0IwYUdsekxuQnZhVzUwY3lBOUlHVTdDaUFnSUNCOUNpQWdJQ0JuWlhSUWIybHVkQ2hsTENCMElEMGdibVYzSUZvcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUXNJR2tnUFNCMGFHbHpMbkJ2YVc1MGN5d2djaUE5SUNocExteGxibWQwYUNBdElERXBJQ29nWlN3Z1lTQTlJRTFoZEdndVpteHZiM0lvY2lrc0lHOGdQU0J5SUMwZ1lTd2dZeUE5SUdsYllTQTlQVDBnTUNBL0lHRWdPaUJoSUMwZ01WMHNJR3dnUFNCcFcyRmRMQ0JvSUQwZ2FWdGhJRDRnYVM1c1pXNW5kR2dnTFNBeUlEOGdhUzVzWlc1bmRHZ2dMU0F4SURvZ1lTQXJJREZkTENCMUlEMGdhVnRoSUQ0Z2FTNXNaVzVuZEdnZ0xTQXpJRDhnYVM1c1pXNW5kR2dnTFNBeElEb2dZU0FySURKZE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdUxuTmxkQ2hsZFNodkxDQmpMbmdzSUd3dWVDd2dhQzU0TENCMUxuZ3BMQ0JsZFNodkxDQmpMbmtzSUd3dWVTd2dhQzU1TENCMUxua3BLU3dnYmpzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVjRzlwYm5SeklEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Dd2diaUE5SUdVdWNHOXBiblJ6TG14bGJtZDBhRHNnZENBOElHNDdJSFFyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdaUzV3YjJsdWRITmJkRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0c5cGJuUnpMbkIxYzJnb2FTNWpiRzl1WlNncEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCemRYQmxjaTUwYjBwVFQwNG9LVHNLSUNBZ0lDQWdJQ0JsTG5CdmFXNTBjeUE5SUZ0ZE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREFzSUc0Z1BTQjBhR2x6TG5CdmFXNTBjeTVzWlc1bmRHZzdJSFFnUENCdU95QjBLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUm9hWE11Y0c5cGJuUnpXM1JkT3dvZ0lDQWdJQ0FnSUNBZ0lDQmxMbkJ2YVc1MGN5NXdkWE5vS0drdWRHOUJjbkpoZVNncEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVTdDaUFnSUNCOUNpQWdJQ0JtY205dFNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2MzVndaWEl1Wm5KdmJVcFRUMDRvWlNrc0lIUm9hWE11Y0c5cGJuUnpJRDBnVzEwN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNQ3dnYmlBOUlHVXVjRzlwYm5SekxteGxibWQwYURzZ2RDQThJRzQ3SUhRckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnWlM1d2IybHVkSE5iZEYwN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHOXBiblJ6TG5CMWMyZ29ibVYzSUZvb0tTNW1jbTl0UVhKeVlYa29hU2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS2ZTd2dZMkVnUFNCUFltcGxZM1F1Wm5KbFpYcGxLSHNLSUNBZ0lGOWZjSEp2ZEc5Zlh6b2diblZzYkN3S0lDQWdJRUZ5WTBOMWNuWmxPaUJyYnl3S0lDQWdJRU5oZEcxMWJHeFNiMjFEZFhKMlpUTTZJRWh2TEFvZ0lDQWdRM1ZpYVdOQ1pYcHBaWEpEZFhKMlpUb2dhV0VzQ2lBZ0lDQkRkV0pwWTBKbGVtbGxja04xY25abE16b2dSMjhzQ2lBZ0lDQkZiR3hwY0hObFEzVnlkbVU2SUVSekxBb2dJQ0FnVEdsdVpVTjFjblpsT2lCellTd0tJQ0FnSUV4cGJtVkRkWEoyWlRNNklGZHZMQW9nSUNBZ1VYVmhaSEpoZEdsalFtVjZhV1Z5UTNWeWRtVTZJSEpoTEFvZ0lDQWdVWFZoWkhKaGRHbGpRbVY2YVdWeVEzVnlkbVV6T2lCaFlTd0tJQ0FnSUZOd2JHbHVaVU4xY25abE9pQnZZUXA5S1N3Z1dHOGdQU0JqYkdGemN5QmxlSFJsYm1SeklGcDBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NTBlWEJsSUQwZ0lrTjFjblpsVUdGMGFDSXNJSFJvYVhNdVkzVnlkbVZ6SUQwZ1cxMHNJSFJvYVhNdVlYVjBiME5zYjNObElEMGdJVEU3Q2lBZ0lDQjlDaUFnSUNCaFpHUW9aU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVZM1Z5ZG1WekxuQjFjMmdvWlNrN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl6WlZCaGRHZ29LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxtTjFjblpsYzFzd1hTNW5aWFJRYjJsdWRDZ3dLU3dnZENBOUlIUm9hWE11WTNWeWRtVnpXM1JvYVhNdVkzVnlkbVZ6TG14bGJtZDBhQ0F0SURGZExtZGxkRkJ2YVc1MEtERXBPd29nSUNBZ0lDQWdJR2xtSUNnaFpTNWxjWFZoYkhNb2RDa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCbExtbHpWbVZqZEc5eU1pQTlQVDBnSVRBZ1B5QWlUR2x1WlVOMWNuWmxJaUE2SUNKTWFXNWxRM1Z5ZG1Veklqc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpkWEoyWlhNdWNIVnphQ2h1WlhjZ1kyRmJibDBvZEN3Z1pTa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHZGxkRkJ2YVc1MEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdVZ0tpQjBhR2x6TG1kbGRFeGxibWQwYUNncExDQnBJRDBnZEdocGN5NW5aWFJEZFhKMlpVeGxibWQwYUhNb0tTd2djaUE5SURBN0NpQWdJQ0FnSUNBZ1ptOXlLRHNnY2lBOElHa3ViR1Z1WjNSb095bDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBXM0pkSUQ0OUlHNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaElEMGdhVnR5WFNBdElHNHNJRzhnUFNCMGFHbHpMbU4xY25abGMxdHlYU3dnWXlBOUlHOHVaMlYwVEdWdVozUm9LQ2tzSUd3Z1BTQmpJRDA5UFNBd0lEOGdNQ0E2SURFZ0xTQmhJQzhnWXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2TG1kbGRGQnZhVzUwUVhRb2JDd2dkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnY2lzck93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHNLSUNBZ0lIMEtJQ0FnSUdkbGRFeGxibWQwYUNncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11WjJWMFEzVnlkbVZNWlc1bmRHaHpLQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1ZiWlM1c1pXNW5kR2dnTFNBeFhUc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpVRnlZMHhsYm1kMGFITW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQjBhR2x6TG1OaFkyaGxUR1Z1WjNSb2N5QTlJRzUxYkd3c0lIUm9hWE11WjJWMFEzVnlkbVZNWlc1bmRHaHpLQ2s3Q2lBZ0lDQjlDaUFnSUNCblpYUkRkWEoyWlV4bGJtZDBhSE1vS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyRmphR1ZNWlc1bmRHaHpJQ1ltSUhSb2FYTXVZMkZqYUdWTVpXNW5kR2h6TG14bGJtZDBhQ0E5UFQwZ2RHaHBjeTVqZFhKMlpYTXViR1Z1WjNSb0tTQnlaWFIxY200Z2RHaHBjeTVqWVdOb1pVeGxibWQwYUhNN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCYlhTd2dkQ0E5SURBN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNQ3dnYVNBOUlIUm9hWE11WTNWeWRtVnpMbXhsYm1kMGFEc2diaUE4SUdrN0lHNHJLeWwwSUNzOUlIUm9hWE11WTNWeWRtVnpXMjVkTG1kbGRFeGxibWQwYUNncExDQmxMbkIxYzJnb2RDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTJGamFHVk1aVzVuZEdoeklEMGdaU3dnWlRzS0lDQWdJSDBLSUNBZ0lHZGxkRk53WVdObFpGQnZhVzUwY3lobElEMGdOREFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUZ0ZE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJREE3SUc0Z1BEMGdaVHNnYmlzcktYUXVjSFZ6YUNoMGFHbHpMbWRsZEZCdmFXNTBLRzRnTHlCbEtTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVhWMGIwTnNiM05sSUNZbUlIUXVjSFZ6YUNoMFd6QmRLU3dnZERzS0lDQWdJSDBLSUNBZ0lHZGxkRkJ2YVc1MGN5aGxJRDBnTVRJcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlGdGRMQ0J1T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQXNJSElnUFNCMGFHbHpMbU4xY25abGN6c2dhU0E4SUhJdWJHVnVaM1JvT3lCcEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUhKYmFWMHNJRzhnUFNCaExtbHpSV3hzYVhCelpVTjFjblpsSUQ4Z1pTQXFJRElnT2lCaExtbHpUR2x1WlVOMWNuWmxJSHg4SUdFdWFYTk1hVzVsUTNWeWRtVXpJRDhnTVNBNklHRXVhWE5UY0d4cGJtVkRkWEoyWlNBL0lHVWdLaUJoTG5CdmFXNTBjeTVzWlc1bmRHZ2dPaUJsTENCaklEMGdZUzVuWlhSUWIybHVkSE1vYnlrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiQ0E5SURBN0lHd2dQQ0JqTG14bGJtZDBhRHNnYkNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvSUQwZ1kxdHNYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzRnSmlZZ2JpNWxjWFZoYkhNb2FDa2dmSHdnS0hRdWNIVnphQ2hvS1N3Z2JpQTlJR2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1GMWRHOURiRzl6WlNBbUppQjBMbXhsYm1kMGFDQStJREVnSmlZZ0lYUmJkQzVzWlc1bmRHZ2dMU0F4WFM1bGNYVmhiSE1vZEZzd1hTa2dKaVlnZEM1d2RYTm9LSFJiTUYwcExDQjBPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1amRYSjJaWE1nUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIUWdQU0F3TENCdUlEMGdaUzVqZFhKMlpYTXViR1Z1WjNSb095QjBJRHdnYmpzZ2RDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCbExtTjFjblpsYzF0MFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpkWEoyWlhNdWNIVnphQ2hwTG1Oc2IyNWxLQ2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhkWFJ2UTJ4dmMyVWdQU0JsTG1GMWRHOURiRzl6WlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhOMWNHVnlMblJ2U2xOUFRpZ3BPd29nSUNBZ0lDQWdJR1V1WVhWMGIwTnNiM05sSUQwZ2RHaHBjeTVoZFhSdlEyeHZjMlVzSUdVdVkzVnlkbVZ6SUQwZ1cxMDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJSFJvYVhNdVkzVnlkbVZ6TG14bGJtZDBhRHNnZENBOElHNDdJSFFyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdkR2hwY3k1amRYSjJaWE5iZEYwN0NpQWdJQ0FnSUNBZ0lDQWdJR1V1WTNWeWRtVnpMbkIxYzJnb2FTNTBiMHBUVDA0b0tTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQmxPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lITjFjR1Z5TG1aeWIyMUtVMDlPS0dVcExDQjBhR2x6TG1GMWRHOURiRzl6WlNBOUlHVXVZWFYwYjBOc2IzTmxMQ0IwYUdsekxtTjFjblpsY3lBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBc0lHNGdQU0JsTG1OMWNuWmxjeTVzWlc1bmRHZzdJSFFnUENCdU95QjBLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHVXVZM1Z5ZG1WelczUmRPd29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU4xY25abGN5NXdkWE5vS0c1bGR5QmpZVnRwTG5SNWNHVmRLQ2t1Wm5KdmJVcFRUMDRvYVNrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtmU3dnYW1rZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUZodklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWRIbHdaU0E5SUNKUVlYUm9JaXdnZEdocGN5NWpkWEp5Wlc1MFVHOXBiblFnUFNCdVpYY2dXaXdnWlNBbUppQjBhR2x6TG5ObGRFWnliMjFRYjJsdWRITW9aU2s3Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0VUc5cGJuUnpLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbTF2ZG1WVWJ5aGxXekJkTG5nc0lHVmJNRjB1ZVNrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNU3dnYmlBOUlHVXViR1Z1WjNSb095QjBJRHdnYmpzZ2RDc3JLWFJvYVhNdWJHbHVaVlJ2S0dWYmRGMHVlQ3dnWlZ0MFhTNTVLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMXZkbVZVYnlobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzVnljbVZ1ZEZCdmFXNTBMbk5sZENobExDQjBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR3hwYm1WVWJ5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCdVpYY2djMkVvZEdocGN5NWpkWEp5Wlc1MFVHOXBiblF1WTJ4dmJtVW9LU3dnYm1WM0lGb29aU3dnZENrcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU4xY25abGN5NXdkWE5vS0c0cExDQjBhR2x6TG1OMWNuSmxiblJRYjJsdWRDNXpaWFFvWlN3Z2RDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnhkV0ZrY21GMGFXTkRkWEoyWlZSdktHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJRzVsZHlCeVlTaDBhR2x6TG1OMWNuSmxiblJRYjJsdWRDNWpiRzl1WlNncExDQnVaWGNnV2lobExDQjBLU3dnYm1WM0lGb29iaXdnYVNrcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU4xY25abGN5NXdkWE5vS0hJcExDQjBhR2x6TG1OMWNuSmxiblJRYjJsdWRDNXpaWFFvYml3Z2FTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmlaWHBwWlhKRGRYSjJaVlJ2S0dVc0lIUXNJRzRzSUdrc0lISXNJR0VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUc1bGR5QnBZU2gwYUdsekxtTjFjbkpsYm5SUWIybHVkQzVqYkc5dVpTZ3BMQ0J1WlhjZ1dpaGxMQ0IwS1N3Z2JtVjNJRm9vYml3Z2FTa3NJRzVsZHlCYUtISXNJR0VwS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpkWEoyWlhNdWNIVnphQ2h2S1N3Z2RHaHBjeTVqZFhKeVpXNTBVRzlwYm5RdWMyVjBLSElzSUdFcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MzQnNhVzVsVkdoeWRTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNWeWNtVnVkRkJ2YVc1MExtTnNiMjVsS0NrS0lDQWdJQ0FnSUNCZExtTnZibU5oZENobEtTd2diaUE5SUc1bGR5QnZZU2gwS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpkWEoyWlhNdWNIVnphQ2h1S1N3Z2RHaHBjeTVqZFhKeVpXNTBVRzlwYm5RdVkyOXdlU2hsVzJVdWJHVnVaM1JvSUMwZ01WMHBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZWEpqS0dVc0lIUXNJRzRzSUdrc0lISXNJR0VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUhSb2FYTXVZM1Z5Y21WdWRGQnZhVzUwTG5nc0lHTWdQU0IwYUdsekxtTjFjbkpsYm5SUWIybHVkQzU1T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRmljMkZ5WXlobElDc2dieXdnZENBcklHTXNJRzRzSUdrc0lISXNJR0VwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVdKellYSmpLR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aFluTmxiR3hwY0hObEtHVXNJSFFzSUc0c0lHNHNJR2tzSUhJc0lHRXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaV3hzYVhCelpTaGxMQ0IwTENCdUxDQnBMQ0J5TENCaExDQnZMQ0JqS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCMGFHbHpMbU4xY25KbGJuUlFiMmx1ZEM1NExDQm9JRDBnZEdocGN5NWpkWEp5Wlc1MFVHOXBiblF1ZVRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhZbk5sYkd4cGNITmxLR1VnS3lCc0xDQjBJQ3NnYUN3Z2Jpd2dhU3dnY2l3Z1lTd2dieXdnWXlrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCaFluTmxiR3hwY0hObEtHVXNJSFFzSUc0c0lHa3NJSElzSUdFc0lHOHNJR01wSUhzS0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUc1bGR5QkVjeWhsTENCMExDQnVMQ0JwTENCeUxDQmhMQ0J2TENCaktUc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWpkWEoyWlhNdWJHVnVaM1JvSUQ0Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkU0E5SUd3dVoyVjBVRzlwYm5Rb01DazdDaUFnSUNBZ0lDQWdJQ0FnSUhVdVpYRjFZV3h6S0hSb2FYTXVZM1Z5Y21WdWRGQnZhVzUwS1NCOGZDQjBhR2x6TG14cGJtVlVieWgxTG5nc0lIVXVlU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSb2FYTXVZM1Z5ZG1WekxuQjFjMmdvYkNrN0NpQWdJQ0FnSUNBZ2JHVjBJR2dnUFNCc0xtZGxkRkJ2YVc1MEtERXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OMWNuSmxiblJRYjJsdWRDNWpiM0I1S0dncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdVkzVnljbVZ1ZEZCdmFXNTBMbU52Y0hrb1pTNWpkWEp5Wlc1MFVHOXBiblFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnYzNWd1pYSXVkRzlLVTA5T0tDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVZM1Z5Y21WdWRGQnZhVzUwSUQwZ2RHaHBjeTVqZFhKeVpXNTBVRzlwYm5RdWRHOUJjbkpoZVNncExDQmxPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVtY205dFNsTlBUaWhsS1N3Z2RHaHBjeTVqZFhKeVpXNTBVRzlwYm5RdVpuSnZiVUZ5Y21GNUtHVXVZM1Z5Y21WdWRGQnZhVzUwS1N3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnYkdFZ1BTQmpiR0Z6Y3lCek1TQmxlSFJsYm1SeklFZGxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCYkNpQWdJQ0FnSUNBZ2JtVjNJRm9vTUN3Z0xTNDFLU3dLSUNBZ0lDQWdJQ0J1WlhjZ1dpZ3VOU3dnTUNrc0NpQWdJQ0FnSUNBZ2JtVjNJRm9vTUN3Z0xqVXBDaUFnSUNCZExDQjBJRDBnTVRJc0lHNGdQU0F3TENCcElEMGdUV0YwYUM1UVNTQXFJRElwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVkSGx3WlNBOUlDSk1ZWFJvWlVkbGIyMWxkSEo1SWl3Z2RHaHBjeTV3WVhKaGJXVjBaWEp6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J3YjJsdWRITTZJR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lITmxaMjFsYm5Sek9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCd2FHbFRkR0Z5ZERvZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnY0docFRHVnVaM1JvT2lCcENpQWdJQ0FnSUNBZ2ZTd2dkQ0E5SUUxaGRHZ3VabXh2YjNJb2RDa3NJR2tnUFNCamRDaHBMQ0F3TENCTllYUm9MbEJKSUNvZ01pazdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQmJYU3dnWVNBOUlGdGRMQ0J2SUQwZ1cxMHNJR01nUFNCYlhTd2diQ0E5SUZ0ZExDQm9JRDBnTVNBdklIUXNJSFVnUFNCdVpYY2dRU3dnWkNBOUlHNWxkeUJhTENCbUlEMGdibVYzSUVFc0lHMGdQU0J1WlhjZ1FTd2dYeUE5SUc1bGR5QkJMQ0JuSUQwZ01Dd2djQ0E5SURBN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMklEMGdNRHNnZGlBOFBTQmxMbXhsYm1kMGFDQXRJREU3SUhZckt5bHpkMmwwWTJnb2RpbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2NnUFNCbFczWWdLeUF4WFM1NElDMGdaVnQyWFM1NExDQndJRDBnWlZ0MklDc2dNVjB1ZVNBdElHVmJkbDB1ZVN3Z1ppNTRJRDBnY0NBcUlERXNJR1l1ZVNBOUlDMW5MQ0JtTG5vZ1BTQndJQ29nTUN3Z1h5NWpiM0I1S0dZcExDQm1MbTV2Y20xaGJHbDZaU2dwTENCakxuQjFjMmdvWmk1NExDQm1MbmtzSUdZdWVpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCbExteGxibWQwYUNBdElERTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpMbkIxYzJnb1h5NTRMQ0JmTG5rc0lGOHVlaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2NnUFNCbFczWWdLeUF4WFM1NElDMGdaVnQyWFM1NExDQndJRDBnWlZ0MklDc2dNVjB1ZVNBdElHVmJkbDB1ZVN3Z1ppNTRJRDBnY0NBcUlERXNJR1l1ZVNBOUlDMW5MQ0JtTG5vZ1BTQndJQ29nTUN3Z2JTNWpiM0I1S0dZcExDQm1MbmdnS3owZ1h5NTRMQ0JtTG5rZ0t6MGdYeTU1TENCbUxub2dLejBnWHk1NkxDQm1MbTV2Y20xaGJHbDZaU2dwTENCakxuQjFjMmdvWmk1NExDQm1MbmtzSUdZdWVpa3NJRjh1WTI5d2VTaHRLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IySUQwZ01Ec2dkaUE4UFNCME95QjJLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZUNBOUlHNGdLeUIySUNvZ2FDQXFJR2tzSUhrZ1BTQk5ZWFJvTG5OcGJpaDRLU3dnWWlBOUlFMWhkR2d1WTI5ektIZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhjZ1BTQXdPeUIzSUR3OUlHVXViR1Z1WjNSb0lDMGdNVHNnZHlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVXVlQ0E5SUdWYmQxMHVlQ0FxSUhrc0lIVXVlU0E5SUdWYmQxMHVlU3dnZFM1NklEMGdaVnQzWFM1NElDb2dZaXdnWVM1d2RYTm9LSFV1ZUN3Z2RTNTVMQ0IxTG5vcExDQmtMbmdnUFNCMklDOGdkQ3dnWkM1NUlEMGdkeUF2SUNobExteGxibWQwYUNBdElERXBMQ0J2TG5CMWMyZ29aQzU0TENCa0xua3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZJZ1BTQmpXek1nS2lCM0lDc2dNRjBnS2lCNUxDQkpJRDBnWTFzeklDb2dkeUFySURGZExDQk5JRDBnWTFzeklDb2dkeUFySURCZElDb2dZanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3d1Y0hWemFDaFNMQ0JKTENCTktUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhZZ1BTQXdPeUIySUR3Z2REc2dkaXNyS1dadmNpaHNaWFFnZUNBOUlEQTdJSGdnUENCbExteGxibWQwYUNBdElERTdJSGdyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNUlEMGdlQ0FySUhZZ0tpQmxMbXhsYm1kMGFDd2dZaUE5SUhrc0lIY2dQU0I1SUNzZ1pTNXNaVzVuZEdnc0lGSWdQU0I1SUNzZ1pTNXNaVzVuZEdnZ0t5QXhMQ0JKSUQwZ2VTQXJJREU3Q2lBZ0lDQWdJQ0FnSUNBZ0lISXVjSFZ6YUNoaUxDQjNMQ0JKS1N3Z2NpNXdkWE5vS0ZJc0lFa3NJSGNwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVsdVpHVjRLSElwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnZG1Vb1lTd2dNeWtwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWRYWWlMQ0J1WlhjZ2RtVW9ieXdnTWlrcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2libTl5YldGc0lpd2dibVYzSUhabEtHd3NJRE1wS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxuQmhjbUZ0WlhSbGNuTWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0JsTG5CaGNtRnRaWFJsY25NcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUdaeWIyMUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSE14S0dVdWNHOXBiblJ6TENCbExuTmxaMjFsYm5SekxDQmxMbkJvYVZOMFlYSjBMQ0JsTG5Cb2FVeGxibWQwYUNrN0NpQWdJQ0I5Q24wc0lIRnZJRDBnWTJ4aGMzTWdjekVnWlhoMFpXNWtjeUJzWVNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdNU3dnZENBOUlERXNJRzRnUFNBMExDQnBJRDBnT0NsN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCdVpYY2dhbWs3Q2lBZ0lDQWdJQ0FnY2k1aFluTmhjbU1vTUN3Z0xYUWdMeUF5TENCbExDQk5ZWFJvTGxCSklDb2dNUzQxTENBd0tTd2djaTVoWW5OaGNtTW9NQ3dnZENBdklESXNJR1VzSURBc0lFMWhkR2d1VUVrZ0tpQXVOU2tzSUhOMWNHVnlLSEl1WjJWMFVHOXBiblJ6S0c0cExDQnBLU3dnZEdocGN5NTBlWEJsSUQwZ0lrTmhjSE4xYkdWSFpXOXRaWFJ5ZVNJc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21Ga2FYVnpPaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQnNaVzVuZEdnNklIUXNDaUFnSUNBZ0lDQWdJQ0FnSUdOaGNGTmxaMjFsYm5Sek9pQnVMQW9nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBZV3hUWldkdFpXNTBjem9nYVFvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ1puSnZiVXBUVDA0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnY3pFb1pTNXlZV1JwZFhNc0lHVXViR1Z1WjNSb0xDQmxMbU5oY0ZObFoyMWxiblJ6TENCbExuSmhaR2xoYkZObFoyMWxiblJ6S1RzS0lDQWdJSDBLZlN3Z1dXOGdQU0JqYkdGemN5QnpNU0JsZUhSbGJtUnpJRWRsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhMQ0IwSUQwZ016SXNJRzRnUFNBd0xDQnBJRDBnVFdGMGFDNVFTU0FxSURJcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11ZEhsd1pTQTlJQ0pEYVhKamJHVkhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthWFZ6T2lCbExBb2dJQ0FnSUNBZ0lDQWdJQ0J6WldkdFpXNTBjem9nZEN3S0lDQWdJQ0FnSUNBZ0lDQWdkR2hsZEdGVGRHRnlkRG9nYml3S0lDQWdJQ0FnSUNBZ0lDQWdkR2hsZEdGTVpXNW5kR2c2SUdrS0lDQWdJQ0FnSUNCOUxDQjBJRDBnVFdGMGFDNXRZWGdvTXl3Z2RDazdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQmJYU3dnWVNBOUlGdGRMQ0J2SUQwZ1cxMHNJR01nUFNCYlhTd2diQ0E5SUc1bGR5QkJMQ0JvSUQwZ2JtVjNJRm83Q2lBZ0lDQWdJQ0FnWVM1d2RYTm9LREFzSURBc0lEQXBMQ0J2TG5CMWMyZ29NQ3dnTUN3Z01Ta3NJR011Y0hWemFDZ3VOU3dnTGpVcE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RTQTlJREFzSUdRZ1BTQXpPeUIxSUR3OUlIUTdJSFVyS3l3Z1pDQXJQU0F6S1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdZZ1BTQnVJQ3NnZFNBdklIUWdLaUJwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNMbmdnUFNCbElDb2dUV0YwYUM1amIzTW9aaWtzSUd3dWVTQTlJR1VnS2lCTllYUm9Mbk5wYmlobUtTd2dZUzV3ZFhOb0tHd3VlQ3dnYkM1NUxDQnNMbm9wTENCdkxuQjFjMmdvTUN3Z01Dd2dNU2tzSUdndWVDQTlJQ2hoVzJSZElDOGdaU0FySURFcElDOGdNaXdnYUM1NUlEMGdLR0ZiWkNBcklERmRJQzhnWlNBcklERXBJQzhnTWl3Z1l5NXdkWE5vS0dndWVDd2dhQzU1S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMUlEMGdNVHNnZFNBOFBTQjBPeUIxS3lzcGNpNXdkWE5vS0hVc0lIVWdLeUF4TENBd0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHVaR1Y0S0hJcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2ljRzl6YVhScGIyNGlMQ0J1WlhjZ2RtVW9ZU3dnTXlrcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2libTl5YldGc0lpd2dibVYzSUhabEtHOHNJRE1wS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luVjJJaXdnYm1WM0lIWmxLR01zSURJcEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbkJoY21GdFpYUmxjbk1nUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCbExuQmhjbUZ0WlhSbGNuTXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhNeEtHVXVjbUZrYVhWekxDQmxMbk5sWjIxbGJuUnpMQ0JsTG5Sb1pYUmhVM1JoY25Rc0lHVXVkR2hsZEdGTVpXNW5kR2dwT3dvZ0lDQWdmUXA5TENCT2N5QTlJR05zWVhOeklITXhJR1Y0ZEdWdVpITWdSMlVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlERXNJSFFnUFNBeExDQnVJRDBnTVN3Z2FTQTlJRE15TENCeUlEMGdNU3dnWVNBOUlDRXhMQ0J2SUQwZ01Dd2dZeUE5SUUxaGRHZ3VVRWtnS2lBeUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG5SNWNHVWdQU0FpUTNsc2FXNWtaWEpIWlc5dFpYUnllU0lzSUhSb2FYTXVjR0Z5WVcxbGRHVnljeUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbUZrYVhWelZHOXdPaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQnlZV1JwZFhOQ2IzUjBiMjA2SUhRc0NpQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2diaXdLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthV0ZzVTJWbmJXVnVkSE02SUdrc0NpQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2RGTmxaMjFsYm5Sek9pQnlMQW9nSUNBZ0lDQWdJQ0FnSUNCdmNHVnVSVzVrWldRNklHRXNDaUFnSUNBZ0lDQWdJQ0FnSUhSb1pYUmhVM1JoY25RNklHOHNDaUFnSUNBZ0lDQWdJQ0FnSUhSb1pYUmhUR1Z1WjNSb09pQmpDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJSFJvYVhNN0NpQWdJQ0FnSUNBZ2FTQTlJRTFoZEdndVpteHZiM0lvYVNrc0lISWdQU0JOWVhSb0xtWnNiMjl5S0hJcE93b2dJQ0FnSUNBZ0lHeGxkQ0JvSUQwZ1cxMHNJSFVnUFNCYlhTd2daQ0E5SUZ0ZExDQm1JRDBnVzEwc0lHMGdQU0F3TENCZklEMGdXMTBzSUdjZ1BTQnVJQzhnTWl3Z2NDQTlJREE3Q2lBZ0lDQWdJQ0FnZGlncExDQmhJRDA5UFNBaE1TQW1KaUFvWlNBK0lEQWdKaVlnZUNnaE1Da3NJSFFnUGlBd0lDWW1JSGdvSVRFcEtTd2dkR2hwY3k1elpYUkpibVJsZUNob0tTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaXdnYm1WM0lIWmxLSFVzSURNcEtTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JbTV2Y20xaGJDSXNJRzVsZHlCMlpTaGtMQ0F6S1Nrc0lIUm9hWE11YzJWMFFYUjBjbWxpZFhSbEtDSjFkaUlzSUc1bGR5QjJaU2htTENBeUtTazdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdkaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhrZ1BTQnVaWGNnUVN3Z1lpQTlJRzVsZHlCQkxDQjNJRDBnTUN3Z1VpQTlJQ2gwSUMwZ1pTa2dMeUJ1T3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFa2dQU0F3T3lCSklEdzlJSEk3SUVrckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVFNBOUlGdGRMQ0JVSUQwZ1NTQXZJSElzSUU4Z1BTQlVJQ29nS0hRZ0xTQmxLU0FySUdVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUZrZ1BTQXdPeUJaSUR3OUlHazdJRmtyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUNRZ1BTQlpJQzhnYVN3Z1ZTQTlJQ1FnS2lCaklDc2dieXdnZWlBOUlFMWhkR2d1YzJsdUtGVXBMQ0J4SUQwZ1RXRjBhQzVqYjNNb1ZTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWWk1NElEMGdUeUFxSUhvc0lHSXVlU0E5SUMxVUlDb2diaUFySUdjc0lHSXVlaUE5SUU4Z0tpQnhMQ0IxTG5CMWMyZ29ZaTU0TENCaUxua3NJR0l1ZWlrc0lIa3VjMlYwS0hvc0lGSXNJSEVwTG01dmNtMWhiR2w2WlNncExDQmtMbkIxYzJnb2VTNTRMQ0I1TG5rc0lIa3VlaWtzSUdZdWNIVnphQ2drTENBeElDMGdWQ2tzSUUwdWNIVnphQ2h0S3lzcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1h5NXdkWE5vS0UwcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1NTQTlJREE3SUVrZ1BDQnBPeUJKS3lzcFptOXlLR3hsZENCTklEMGdNRHNnVFNBOElISTdJRTByS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdWQ0E5SUY5YlRWMWJTVjBzSUU4Z1BTQmZXMDBnS3lBeFhWdEpYU3dnV1NBOUlGOWJUU0FySURGZFcwa2dLeUF4WFN3Z0pDQTlJRjliVFYxYlNTQXJJREZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUM1d2RYTm9LRlFzSUU4c0lDUXBMQ0JvTG5CMWMyZ29UeXdnV1N3Z0pDa3NJSGNnS3owZ05qc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnNMbUZrWkVkeWIzVndLSEFzSUhjc0lEQXBMQ0J3SUNzOUlIYzdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSGdvZVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lpQTlJRzBzSUhjZ1BTQnVaWGNnV2l3Z1VpQTlJRzVsZHlCQkxDQkpJRDBnTUN3Z1RTQTlJSGtnUFQwOUlDRXdJRDhnWlNBNklIUXNJRlFnUFNCNUlEMDlQU0FoTUNBL0lERWdPaUF0TVRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQlpJRDBnTVRzZ1dTQThQU0JwT3lCWkt5c3BkUzV3ZFhOb0tEQXNJR2NnS2lCVUxDQXdLU3dnWkM1d2RYTm9LREFzSUZRc0lEQXBMQ0JtTG5CMWMyZ29MalVzSUM0MUtTd2diU3NyT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVHlBOUlHMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnV1NBOUlEQTdJRmtnUEQwZ2FUc2dXU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlZJRDBnV1NBdklHa2dLaUJqSUNzZ2J5d2dlaUE5SUUxaGRHZ3VZMjl6S0ZVcExDQnhJRDBnVFdGMGFDNXphVzRvVlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCU0xuZ2dQU0JOSUNvZ2NTd2dVaTU1SUQwZ1p5QXFJRlFzSUZJdWVpQTlJRTBnS2lCNkxDQjFMbkIxYzJnb1VpNTRMQ0JTTG5rc0lGSXVlaWtzSUdRdWNIVnphQ2d3TENCVUxDQXdLU3dnZHk1NElEMGdlaUFxSUM0MUlDc2dMalVzSUhjdWVTQTlJSEVnS2lBdU5TQXFJRlFnS3lBdU5Td2daaTV3ZFhOb0tIY3VlQ3dnZHk1NUtTd2diU3NyT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnV1NBOUlEQTdJRmtnUENCcE95QlpLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElDUWdQU0JpSUNzZ1dTd2dWU0E5SUU4Z0t5QlpPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlU0E5UFQwZ0lUQWdQeUJvTG5CMWMyZ29WU3dnVlNBcklERXNJQ1FwSURvZ2FDNXdkWE5vS0ZVZ0t5QXhMQ0JWTENBa0tTd2dTU0FyUFNBek93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHd3VZV1JrUjNKdmRYQW9jQ3dnU1N3Z2VTQTlQVDBnSVRBZ1B5QXhJRG9nTWlrc0lIQWdLejBnU1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnWlM1d1lYSmhiV1YwWlhKektTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCbWNtOXRTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJ6TVNobExuSmhaR2wxYzFSdmNDd2daUzV5WVdScGRYTkNiM1IwYjIwc0lHVXVhR1ZwWjJoMExDQmxMbkpoWkdsaGJGTmxaMjFsYm5SekxDQmxMbWhsYVdkb2RGTmxaMjFsYm5SekxDQmxMbTl3Wlc1RmJtUmxaQ3dnWlM1MGFHVjBZVk4wWVhKMExDQmxMblJvWlhSaFRHVnVaM1JvS1RzS0lDQWdJSDBLZlN3Z1dtOGdQU0JqYkdGemN5QnpNU0JsZUhSbGJtUnpJRTV6SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhMQ0IwSUQwZ01Td2diaUE5SURNeUxDQnBJRDBnTVN3Z2NpQTlJQ0V4TENCaElEMGdNQ3dnYnlBOUlFMWhkR2d1VUVrZ0tpQXlLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3dMQ0JsTENCMExDQnVMQ0JwTENCeUxDQmhMQ0J2S1N3Z2RHaHBjeTUwZVhCbElEMGdJa052Ym1WSFpXOXRaWFJ5ZVNJc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21Ga2FYVnpPaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklIUXNDaUFnSUNBZ0lDQWdJQ0FnSUhKaFpHbGhiRk5sWjIxbGJuUnpPaUJ1TEFvZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhSVFpXZHRaVzUwY3pvZ2FTd0tJQ0FnSUNBZ0lDQWdJQ0FnYjNCbGJrVnVaR1ZrT2lCeUxBb2dJQ0FnSUNBZ0lDQWdJQ0IwYUdWMFlWTjBZWEowT2lCaExBb2dJQ0FnSUNBZ0lDQWdJQ0IwYUdWMFlVeGxibWQwYURvZ2J3b2dJQ0FnSUNBZ0lIMDdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdabkp2YlVwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2N6RW9aUzV5WVdScGRYTXNJR1V1YUdWcFoyaDBMQ0JsTG5KaFpHbGhiRk5sWjIxbGJuUnpMQ0JsTG1obGFXZG9kRk5sWjIxbGJuUnpMQ0JsTG05d1pXNUZibVJsWkN3Z1pTNTBhR1YwWVZOMFlYSjBMQ0JsTG5Sb1pYUmhUR1Z1WjNSb0tUc0tJQ0FnSUgwS2ZTd2daR2tnUFNCamJHRnpjeUJ6TVNCbGVIUmxibVJ6SUVkbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0JiWFN3Z2RDQTlJRnRkTENCdUlEMGdNU3dnYVNBOUlEQXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWRIbHdaU0E5SUNKUWIyeDVhR1ZrY205dVIyVnZiV1YwY25raUxDQjBhR2x6TG5CaGNtRnRaWFJsY25NZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhabGNuUnBZMlZ6T2lCbExBb2dJQ0FnSUNBZ0lDQWdJQ0JwYm1ScFkyVnpPaUIwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnlZV1JwZFhNNklHNHNDaUFnSUNBZ0lDQWdJQ0FnSUdSbGRHRnBiRG9nYVFvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCYlhTd2dZU0E5SUZ0ZE93b2dJQ0FnSUNBZ0lHOG9hU2tzSUd3b2Jpa3NJR2dvS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUhabEtISXNJRE1wS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0ltNXZjbTFoYkNJc0lHNWxkeUIyWlNoeUxuTnNhV05sS0Nrc0lETXBLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5WMklpd2dibVYzSUhabEtHRXNJRElwS1N3Z2FTQTlQVDBnTUNBL0lIUm9hWE11WTI5dGNIVjBaVlpsY25SbGVFNXZjbTFoYkhNb0tTQTZJSFJvYVhNdWJtOXliV0ZzYVhwbFRtOXliV0ZzY3lncE93b2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHOG9kaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZUNBOUlHNWxkeUJCTENCNUlEMGdibVYzSUVFc0lHSWdQU0J1WlhjZ1FUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IzSUQwZ01Ec2dkeUE4SUhRdWJHVnVaM1JvT3lCM0lDczlJRE1wWmloMFczY2dLeUF3WFN3Z2VDa3NJR1lvZEZ0M0lDc2dNVjBzSUhrcExDQm1LSFJiZHlBcklESmRMQ0JpS1N3Z1l5aDRMQ0I1TENCaUxDQjJLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWXloMkxDQjRMQ0I1TENCaUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjNJRDBnWWlBcklERXNJRklnUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JKSUQwZ01Ec2dTU0E4UFNCM095QkpLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVWx0SlhTQTlJRnRkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFMGdQU0IyTG1Oc2IyNWxLQ2t1YkdWeWNDaDVMQ0JKSUM4Z2R5a3NJRlFnUFNCNExtTnNiMjVsS0NrdWJHVnljQ2g1TENCSklDOGdkeWtzSUU4Z1BTQjNJQzBnU1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnV1NBOUlEQTdJRmtnUEQwZ1R6c2dXU3NyS1ZrZ1BUMDlJREFnSmlZZ1NTQTlQVDBnZHlBL0lGSmJTVjFiV1YwZ1BTQk5JRG9nVWx0SlhWdFpYU0E5SUUwdVkyeHZibVVvS1M1c1pYSndLRlFzSUZrZ0x5QlBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRWtnUFNBd095QkpJRHdnZHpzZ1NTc3JLV1p2Y2loc1pYUWdUU0E5SURBN0lFMGdQQ0F5SUNvZ0tIY2dMU0JKS1NBdElERTdJRTByS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdWQ0E5SUUxaGRHZ3VabXh2YjNJb1RTQXZJRElwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVFNBbElESWdQVDA5SURBZ1B5QW9aQ2hTVzBsZFcxUWdLeUF4WFNrc0lHUW9VbHRKSUNzZ01WMWJWRjBwTENCa0tGSmJTVjFiVkYwcEtTQTZJQ2hrS0ZKYlNWMWJWQ0FySURGZEtTd2daQ2hTVzBrZ0t5QXhYVnRVSUNzZ01WMHBMQ0JrS0ZKYlNTQXJJREZkVzFSZEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2JDaDJLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0I0SUQwZ2JtVjNJRUU3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2VTQTlJREE3SUhrZ1BDQnlMbXhsYm1kMGFEc2dlU0FyUFNBektYZ3VlQ0E5SUhKYmVTQXJJREJkTENCNExua2dQU0J5VzNrZ0t5QXhYU3dnZUM1NklEMGdjbHQ1SUNzZ01sMHNJSGd1Ym05eWJXRnNhWHBsS0NrdWJYVnNkR2x3YkhsVFkyRnNZWElvZGlrc0lISmJlU0FySURCZElEMGdlQzU0TENCeVcza2dLeUF4WFNBOUlIZ3VlU3dnY2x0NUlDc2dNbDBnUFNCNExubzdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR2dvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMklEMGdibVYzSUVFN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlQ0E5SURBN0lIZ2dQQ0J5TG14bGJtZDBhRHNnZUNBclBTQXpLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFl1ZUNBOUlISmJlQ0FySURCZExDQjJMbmtnUFNCeVczZ2dLeUF4WFN3Z2RpNTZJRDBnY2x0NElDc2dNbDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VTQTlJR2NvZGlrZ0x5QXlJQzhnVFdGMGFDNVFTU0FySUM0MUxDQmlJRDBnY0NoMktTQXZJRTFoZEdndVVFa2dLeUF1TlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdFdWNIVnphQ2g1TENBeElDMGdZaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYlNncExDQjFLQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhVb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZGlBOUlEQTdJSFlnUENCaExteGxibWQwYURzZ2RpQXJQU0EyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjRJRDBnWVZ0MklDc2dNRjBzSUhrZ1BTQmhXM1lnS3lBeVhTd2dZaUE5SUdGYmRpQXJJRFJkTENCM0lEMGdUV0YwYUM1dFlYZ29lQ3dnZVN3Z1lpa3NJRklnUFNCTllYUm9MbTFwYmloNExDQjVMQ0JpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhjZ1BpQXVPU0FtSmlCU0lEd2dMakVnSmlZZ0tIZ2dQQ0F1TWlBbUppQW9ZVnQySUNzZ01GMGdLejBnTVNrc0lIa2dQQ0F1TWlBbUppQW9ZVnQySUNzZ01sMGdLejBnTVNrc0lHSWdQQ0F1TWlBbUppQW9ZVnQySUNzZ05GMGdLejBnTVNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdRb2Rpa2dld29nSUNBZ0lDQWdJQ0FnSUNCeUxuQjFjMmdvZGk1NExDQjJMbmtzSUhZdWVpazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR1lvZGl3Z2VDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdlU0E5SUhZZ0tpQXpPd29nSUNBZ0lDQWdJQ0FnSUNCNExuZ2dQU0JsVzNrZ0t5QXdYU3dnZUM1NUlEMGdaVnQ1SUNzZ01WMHNJSGd1ZWlBOUlHVmJlU0FySURKZE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnRLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZGlBOUlHNWxkeUJCTENCNElEMGdibVYzSUVFc0lIa2dQU0J1WlhjZ1FTd2dZaUE5SUc1bGR5QkJMQ0IzSUQwZ2JtVjNJRm9zSUZJZ1BTQnVaWGNnV2l3Z1NTQTlJRzVsZHlCYU93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRTBnUFNBd0xDQlVJRDBnTURzZ1RTQThJSEl1YkdWdVozUm9PeUJOSUNzOUlEa3NJRlFnS3owZ05pbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJMbk5sZENoeVcwMGdLeUF3WFN3Z2NsdE5JQ3NnTVYwc0lISmJUU0FySURKZEtTd2dlQzV6WlhRb2NsdE5JQ3NnTTEwc0lISmJUU0FySURSZExDQnlXMDBnS3lBMVhTa3NJSGt1YzJWMEtISmJUU0FySURaZExDQnlXMDBnS3lBM1hTd2djbHROSUNzZ09GMHBMQ0IzTG5ObGRDaGhXMVFnS3lBd1hTd2dZVnRVSUNzZ01WMHBMQ0JTTG5ObGRDaGhXMVFnS3lBeVhTd2dZVnRVSUNzZ00xMHBMQ0JKTG5ObGRDaGhXMVFnS3lBMFhTd2dZVnRVSUNzZ05WMHBMQ0JpTG1OdmNIa29kaWt1WVdSa0tIZ3BMbUZrWkNoNUtTNWthWFpwWkdWVFkyRnNZWElvTXlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdUeUE5SUdjb1lpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZLSGNzSUZRZ0t5QXdMQ0IyTENCUEtTd2dYeWhTTENCVUlDc2dNaXdnZUN3Z1R5a3NJRjhvU1N3Z1ZDQXJJRFFzSUhrc0lFOHBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlGOG9kaXdnZUN3Z2VTd2dZaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmlJRHdnTUNBbUppQjJMbmdnUFQwOUlERWdKaVlnS0dGYmVGMGdQU0IyTG5nZ0xTQXhLU3dnZVM1NElEMDlQU0F3SUNZbUlIa3VlaUE5UFQwZ01DQW1KaUFvWVZ0NFhTQTlJR0lnTHlBeUlDOGdUV0YwYUM1UVNTQXJJQzQxS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1p5aDJLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbUYwWVc0eUtIWXVlaXdnTFhZdWVDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSEFvZGlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1aGRHRnVNaWd0ZGk1NUxDQk5ZWFJvTG5OeGNuUW9kaTU0SUNvZ2RpNTRJQ3NnZGk1NklDb2dkaTU2S1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVjR0Z5WVcxbGRHVnljeUE5SUU5aWFtVmpkQzVoYzNOcFoyNG9lMzBzSUdVdWNHRnlZVzFsZEdWeWN5a3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ1puSnZiVXBUVDA0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnY3pFb1pTNTJaWEowYVdObGN5d2daUzVwYm1ScFkyVnpMQ0JsTG5KaFpHbDFjeXdnWlM1a1pYUmhhV3h6S1RzS0lDQWdJSDBLZlN3Z1NtOGdQU0JqYkdGemN5QnpNU0JsZUhSbGJtUnpJR1JwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhMQ0IwSUQwZ01DbDdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQW9NU0FySUUxaGRHZ3VjM0Z5ZENnMUtTa2dMeUF5TENCcElEMGdNU0F2SUc0c0lISWdQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMXBMQW9nSUNBZ0lDQWdJQ0FnSUNBdGJpd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdMV2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNHNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJR2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMXVMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVMQW9nSUNBZ0lDQWdJQ0FnSUNBdGFTd0tJQ0FnSUNBZ0lDQWdJQ0FnTFc0c0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMXBMQW9nSUNBZ0lDQWdJQ0FnSUNCdUxBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnBMQW9nSUNBZ0lDQWdJQ0FnSUNBdGJpd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdhU3dLSUNBZ0lDQWdJQ0FnSUNBZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdMVzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMxcExBb2dJQ0FnSUNBZ0lDQWdJQ0J1TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBdGFTd0tJQ0FnSUNBZ0lDQWdJQ0FnTFc0c0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHa3NDaUFnSUNBZ0lDQWdJQ0FnSUc0c0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHa0tJQ0FnSUNBZ0lDQmRMQ0JoSUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ055d0tJQ0FnSUNBZ0lDQWdJQ0FnTXl3S0lDQWdJQ0FnSUNBZ0lDQWdOeXdLSUNBZ0lDQWdJQ0FnSUNBZ01UVXNDaUFnSUNBZ0lDQWdJQ0FnSURNc0NpQWdJQ0FnSUNBZ0lDQWdJREUxTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNeXdLSUNBZ0lDQWdJQ0FnSUNBZ055d0tJQ0FnSUNBZ0lDQWdJQ0FnTVRrc0NpQWdJQ0FnSUNBZ0lDQWdJREUzTEFvZ0lDQWdJQ0FnSUNBZ0lDQTNMQW9nSUNBZ0lDQWdJQ0FnSUNBeE55d0tJQ0FnSUNBZ0lDQWdJQ0FnTml3S0lDQWdJQ0FnSUNBZ0lDQWdOeXdLSUNBZ0lDQWdJQ0FnSUNBZ05pd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRVc0NpQWdJQ0FnSUNBZ0lDQWdJREUzTEFvZ0lDQWdJQ0FnSUNBZ0lDQTBMQW9nSUNBZ0lDQWdJQ0FnSUNBNExBb2dJQ0FnSUNBZ0lDQWdJQ0F4Tnl3S0lDQWdJQ0FnSUNBZ0lDQWdPQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01UQXNDaUFnSUNBZ0lDQWdJQ0FnSURFM0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TUN3S0lDQWdJQ0FnSUNBZ0lDQWdOaXdLSUNBZ0lDQWdJQ0FnSUNBZ09Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNVFlzQ2lBZ0lDQWdJQ0FnSUNBZ0lEZ3NDaUFnSUNBZ0lDQWdJQ0FnSURFMkxBb2dJQ0FnSUNBZ0lDQWdJQ0F5TEFvZ0lDQWdJQ0FnSUNBZ0lDQTRMQW9nSUNBZ0lDQWdJQ0FnSUNBeUxBb2dJQ0FnSUNBZ0lDQWdJQ0F4TUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01USXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURFNExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhPQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01UWXNDaUFnSUNBZ0lDQWdJQ0FnSURZc0NpQWdJQ0FnSUNBZ0lDQWdJREV3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJQ0FnSUNBMkxBb2dJQ0FnSUNBZ0lDQWdJQ0F5TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNeXdLSUNBZ0lDQWdJQ0FnSUNBZ05pd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRNc0NpQWdJQ0FnSUNBZ0lDQWdJREUxTEFvZ0lDQWdJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJQ0FnSUNBeE5pd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRnc0NpQWdJQ0FnSUNBZ0lDQWdJRElzQ2lBZ0lDQWdJQ0FnSUNBZ0lERTRMQW9nSUNBZ0lDQWdJQ0FnSUNBekxBb2dJQ0FnSUNBZ0lDQWdJQ0F5TEFvZ0lDQWdJQ0FnSUNBZ0lDQXpMQW9nSUNBZ0lDQWdJQ0FnSUNBeE15d0tJQ0FnSUNBZ0lDQWdJQ0FnTVRnc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEa3NDaUFnSUNBZ0lDQWdJQ0FnSURFNExBb2dJQ0FnSUNBZ0lDQWdJQ0E1TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01UZ3NDaUFnSUNBZ0lDQWdJQ0FnSURFeExBb2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQTBMQW9nSUNBZ0lDQWdJQ0FnSUNBeE5Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRJc0NpQWdJQ0FnSUNBZ0lDQWdJRFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXlMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0EwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBNExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TVN3S0lDQWdJQ0FnSUNBZ0lDQWdPU3dLSUNBZ0lDQWdJQ0FnSUNBZ05Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVRFc0NpQWdJQ0FnSUNBZ0lDQWdJRFVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERTVMQW9nSUNBZ0lDQWdJQ0FnSUNBeE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVRrc0NpQWdJQ0FnSUNBZ0lDQWdJRGNzQ2lBZ0lDQWdJQ0FnSUNBZ0lERTVMQW9nSUNBZ0lDQWdJQ0FnSUNBMUxBb2dJQ0FnSUNBZ0lDQWdJQ0F4TkN3S0lDQWdJQ0FnSUNBZ0lDQWdNVGtzQ2lBZ0lDQWdJQ0FnSUNBZ0lERTBMQW9nSUNBZ0lDQWdJQ0FnSUNBMExBb2dJQ0FnSUNBZ0lDQWdJQ0F4T1N3S0lDQWdJQ0FnSUNBZ0lDQWdOQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01UY3NDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREV5TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhOQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVRRc0NpQWdJQ0FnSUNBZ0lDQWdJRFVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURVc0NpQWdJQ0FnSUNBZ0lDQWdJRGtLSUNBZ0lDQWdJQ0JkT3dvZ0lDQWdJQ0FnSUhOMWNHVnlLSElzSUdFc0lHVXNJSFFwTENCMGFHbHpMblI1Y0dVZ1BTQWlSRzlrWldOaGFHVmtjbTl1UjJWdmJXVjBjbmtpTENCMGFHbHpMbkJoY21GdFpYUmxjbk1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpoWkdsMWN6b2daU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pHVjBZV2xzT2lCMENpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5Qm1jbTl0U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCek1TaGxMbkpoWkdsMWN5d2daUzVrWlhSaGFXd3BPd29nSUNBZ2ZRcDlMQ0IyY2lBOUlHNWxkeUJCTENCNWNpQTlJRzVsZHlCQkxDQmhieUE5SUc1bGR5QkJMQ0JOY2lBOUlHNWxkeUJWYml3Z0pHOGdQU0JqYkdGemN5QmxlSFJsYm1SeklFZGxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCdWRXeHNMQ0IwSUQwZ01TbDdDaUFnSUNBZ0lDQWdhV1lnS0hOMWNHVnlLQ2tzSUhSb2FYTXVkSGx3WlNBOUlDSkZaR2RsYzBkbGIyMWxkSEo1SWl3Z2RHaHBjeTV3WVhKaGJXVjBaWEp6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JuWlc5dFpYUnllVG9nWlN3S0lDQWdJQ0FnSUNBZ0lDQWdkR2h5WlhOb2IyeGtRVzVuYkdVNklIUUtJQ0FnSUNBZ0lDQjlMQ0JsSUNFOVBTQnVkV3hzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdUV0YwYUM1d2IzY29NVEFzSURRcExDQnlJRDBnVFdGMGFDNWpiM01vWVdrZ0tpQjBLU3dnWVNBOUlHVXVaMlYwU1c1a1pYZ29LU3dnYnlBOUlHVXVaMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJcExDQmpJRDBnWVNBL0lHRXVZMjkxYm5RZ09pQnZMbU52ZFc1MExDQnNJRDBnV3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0NpQWdJQ0FnSUNBZ0lDQWdJRjBzSUdnZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWlZU0lzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FpWWlJc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaVl5SUtJQ0FnSUNBZ0lDQWdJQ0FnWFN3Z2RTQTlJRzVsZHlCQmNuSmhlU2d6S1N3Z1pDQTlJSHQ5TENCbUlEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JTQTlJREE3SUcwZ1BDQmpPeUJ0SUNzOUlETXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0EvSUNoc1d6QmRJRDBnWVM1blpYUllLRzBwTENCc1d6RmRJRDBnWVM1blpYUllLRzBnS3lBeEtTd2diRnN5WFNBOUlHRXVaMlYwV0NodElDc2dNaWtwSURvZ0tHeGJNRjBnUFNCdExDQnNXekZkSUQwZ2JTQXJJREVzSUd4Yk1sMGdQU0J0SUNzZ01pazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZXlCaE9pQmZJQ3dnWWpvZ1p5QXNJR002SUhBZ0lIMGdQU0JOY2pzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvYnl3Z2JGc3dYU2tzSUdjdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHZMQ0JzV3pGZEtTd2djQzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0c4c0lHeGJNbDBwTENCTmNpNW5aWFJPYjNKdFlXd29ZVzhwTENCMVd6QmRJRDBnWUNSN1RXRjBhQzV5YjNWdVpDaGZMbmdnS2lCcEtYMHNKSHROWVhSb0xuSnZkVzVrS0Y4dWVTQXFJR2twZlN3a2UwMWhkR2d1Y205MWJtUW9YeTU2SUNvZ2FTbDlZQ3dnZFZzeFhTQTlJR0FrZTAxaGRHZ3VjbTkxYm1Rb1p5NTRJQ29nYVNsOUxDUjdUV0YwYUM1eWIzVnVaQ2huTG5rZ0tpQnBLWDBzSkh0TllYUm9Mbkp2ZFc1a0tHY3VlaUFxSUdrcGZXQXNJSFZiTWwwZ1BTQmdKSHROWVhSb0xuSnZkVzVrS0hBdWVDQXFJR2twZlN3a2UwMWhkR2d1Y205MWJtUW9jQzU1SUNvZ2FTbDlMQ1I3VFdGMGFDNXliM1Z1WkNod0xub2dLaUJwS1gxZ0xDQWhLSFZiTUYwZ1BUMDlJSFZiTVYwZ2ZId2dkVnN4WFNBOVBUMGdkVnN5WFNCOGZDQjFXekpkSUQwOVBTQjFXekJkS1NrZ1ptOXlLR3hsZENCMklEMGdNRHNnZGlBOElETTdJSFlyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhnZ1BTQW9kaUFySURFcElDVWdNeXdnZVNBOUlIVmJkbDBzSUdJZ1BTQjFXM2hkTENCM0lEMGdUWEpiYUZ0MlhWMHNJRklnUFNCTmNsdG9XM2hkWFN3Z1NTQTlJR0FrZTNsOVh5UjdZbjFnTENCTklEMGdZQ1I3WW4xZkpIdDVmV0E3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RTQnBiaUJrSUNZbUlHUmJUVjBnUHlBb1lXOHVaRzkwS0dSYlRWMHVibTl5YldGc0tTQThQU0J5SUNZbUlDaG1MbkIxYzJnb2R5NTRMQ0IzTG5rc0lIY3VlaWtzSUdZdWNIVnphQ2hTTG5nc0lGSXVlU3dnVWk1NktTa3NJR1JiVFYwZ1BTQnVkV3hzS1NBNklFa2dhVzRnWkNCOGZDQW9aRnRKWFNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGd3T2lCc1czWmRMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZURFNklHeGJlRjBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJEb2dZVzh1WTJ4dmJtVW9LUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JTQnBiaUJrS1dsbUlDaGtXMjFkS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdleUJwYm1SbGVEQTZJRjhnTENCcGJtUmxlREU2SUdjZ0lIMGdQU0JrVzIxZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RuSXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2h2TENCZktTd2dlWEl1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNodkxDQm5LU3dnWmk1d2RYTm9LSFp5TG5nc0lIWnlMbmtzSUhaeUxub3BMQ0JtTG5CMWMyZ29lWEl1ZUN3Z2VYSXVlU3dnZVhJdWVpazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaXdnYm1WM0lIWmxLR1lzSURNcEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTV3WVhKaGJXVjBaWEp6SUQwZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z1pTNXdZWEpoYldWMFpYSnpLU3dnZEdocGN6c0tJQ0FnSUgwS2ZTd2dSbTRnUFNCamJHRnpjeUJsZUhSbGJtUnpJR3BwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVcExDQjBhR2x6TG5WMWFXUWdQU0JyZENncExDQjBhR2x6TG5SNWNHVWdQU0FpVTJoaGNHVWlMQ0IwYUdsekxtaHZiR1Z6SUQwZ1cxMDdDaUFnSUNCOUNpQWdJQ0JuWlhSUWIybHVkSE5JYjJ4bGN5aGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdMQ0JwSUQwZ2RHaHBjeTVvYjJ4bGN5NXNaVzVuZEdnN0lHNGdQQ0JwT3lCdUt5c3BkRnR1WFNBOUlIUm9hWE11YUc5c1pYTmJibDB1WjJWMFVHOXBiblJ6S0dVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCME93b2dJQ0FnZlFvZ0lDQWdaWGgwY21GamRGQnZhVzUwY3lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnYzJoaGNHVTZJSFJvYVhNdVoyVjBVRzlwYm5SektHVXBMQW9nSUNBZ0lDQWdJQ0FnSUNCb2IyeGxjem9nZEdocGN5NW5aWFJRYjJsdWRITkliMnhsY3lobEtRb2dJQ0FnSUNBZ0lIMDdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG1odmJHVnpJRDBnVzEwN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNQ3dnYmlBOUlHVXVhRzlzWlhNdWJHVnVaM1JvT3lCMElEd2dianNnZENzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0JsTG1odmJHVnpXM1JkT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1odmJHVnpMbkIxYzJnb2FTNWpiRzl1WlNncEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCemRYQmxjaTUwYjBwVFQwNG9LVHNLSUNBZ0lDQWdJQ0JsTG5WMWFXUWdQU0IwYUdsekxuVjFhV1FzSUdVdWFHOXNaWE1nUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIUWdQU0F3TENCdUlEMGdkR2hwY3k1b2IyeGxjeTVzWlc1bmRHZzdJSFFnUENCdU95QjBLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUm9hWE11YUc5c1pYTmJkRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVXVhRzlzWlhNdWNIVnphQ2hwTG5SdlNsTlBUaWdwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVN0NpQWdJQ0I5Q2lBZ0lDQm1jbTl0U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnYzNWd1pYSXVabkp2YlVwVFQwNG9aU2tzSUhSb2FYTXVkWFZwWkNBOUlHVXVkWFZwWkN3Z2RHaHBjeTVvYjJ4bGN5QTlJRnRkT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZENBOUlEQXNJRzRnUFNCbExtaHZiR1Z6TG14bGJtZDBhRHNnZENBOElHNDdJSFFyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdaUzVvYjJ4bGMxdDBYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvYjJ4bGN5NXdkWE5vS0c1bGR5QnFhU2dwTG1aeWIyMUtVMDlPS0drcEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDbjBzSUdWNElEMGdld29nSUNBZ2RISnBZVzVuZFd4aGRHVTZJR1oxYm1OMGFXOXVLSE14TENCbExDQjBJRDBnTWlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1pTQW1KaUJsTG14bGJtZDBhQ3dnYVNBOUlHNGdQeUJsV3pCZElDb2dkQ0E2SUhNeExteGxibWQwYUN3Z2NpQTlJRkJrS0hNeExDQXdMQ0JwTENCMExDQWhNQ2tzSUdFZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JwWmlBb0lYSWdmSHdnY2k1dVpYaDBJRDA5UFNCeUxuQnlaWFlwSUhKbGRIVnliaUJoT3dvZ0lDQWdJQ0FnSUd4bGRDQnZMQ0JqTENCc0xDQm9MQ0IxTENCa0xDQm1Pd29nSUNBZ0lDQWdJR2xtSUNodUlDWW1JQ2h5SUQwZ2NuZ29jekVzSUdVc0lISXNJSFFwS1N3Z2N6RXViR1Z1WjNSb0lENGdPREFnS2lCMEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUc4Z1BTQnNJRDBnY3pGYk1GMHNJR01nUFNCb0lEMGdjekZiTVYwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiU0E5SUhRN0lHMGdQQ0JwT3lCdElDczlJSFFwZFNBOUlITXhXMjFkTENCa0lEMGdjekZiYlNBcklERmRMQ0IxSUR3Z2J5QW1KaUFvYnlBOUlIVXBMQ0JrSUR3Z1l5QW1KaUFvWXlBOUlHUXBMQ0IxSUQ0Z2JDQW1KaUFvYkNBOUlIVXBMQ0JrSUQ0Z2FDQW1KaUFvYUNBOUlHUXBPd29nSUNBZ0lDQWdJQ0FnSUNCbUlEMGdUV0YwYUM1dFlYZ29iQ0F0SUc4c0lHZ2dMU0JqS1N3Z1ppQTlJR1lnSVQwOUlEQWdQeUF6TWpjMk55QXZJR1lnT2lBd093b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z1QzTW9jaXdnWVN3Z2RDd2dieXdnWXl3Z1ppd2dNQ2tzSUdFN0NpQWdJQ0I5Q24wN0NtWjFibU4wYVc5dUlGQmtLSE14TENCbExDQjBMQ0J1TENCcEtTQjdDaUFnSUNCc1pYUWdjaXdnWVRzS0lDQWdJR2xtSUNocElEMDlQU0JuZUNoek1Td2daU3dnZEN3Z2Jpa2dQaUF3S1NCbWIzSW9jaUE5SUdVN0lISWdQQ0IwT3lCeUlDczlJRzRwWVNBOUlIUjFLSElzSUhNeFczSmRMQ0J6TVZ0eUlDc2dNVjBzSUdFcE93b2dJQ0FnWld4elpTQm1iM0lvY2lBOUlIUWdMU0J1T3lCeUlENDlJR1U3SUhJZ0xUMGdiaWxoSUQwZ2RIVW9jaXdnY3pGYmNsMHNJSE14VzNJZ0t5QXhYU3dnWVNrN0NpQWdJQ0J5WlhSMWNtNGdZU0FtSmlCTllTaGhMQ0JoTG01bGVIUXBJQ1ltSUNoQ2N5aGhLU3dnWVNBOUlHRXVibVY0ZENrc0lHRTdDbjBLWm5WdVkzUnBiMjRnWm1rb2N6RXNJR1VwSUhzS0lDQWdJR2xtSUNnaGN6RXBJSEpsZEhWeWJpQnpNVHNLSUNBZ0lHVWdmSHdnS0dVZ1BTQnpNU2s3Q2lBZ0lDQnNaWFFnZENBOUlITXhMQ0J1T3dvZ0lDQWdaRzhnYVdZZ0tHNGdQU0FoTVN3Z0lYUXVjM1JsYVc1bGNpQW1KaUFvVFdFb2RDd2dkQzV1WlhoMEtTQjhmQ0J6ZENoMExuQnlaWFlzSUhRc0lIUXVibVY0ZENrZ1BUMDlJREFwS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLRUp6S0hRcExDQjBJRDBnWlNBOUlIUXVjSEpsZGl3Z2RDQTlQVDBnZEM1dVpYaDBLU0JpY21WaGF6c0tJQ0FnSUNBZ0lDQnVJRDBnSVRBN0NpQWdJQ0I5SUdWc2MyVWdkQ0E5SUhRdWJtVjRkRHNLSUNBZ0lIZG9hV3hsSUNodUlIeDhJSFFnSVQwOUlHVXBDaUFnSUNCeVpYUjFjbTRnWlRzS2ZRcG1kVzVqZEdsdmJpQlBjeWh6TVN3Z1pTd2dkQ3dnYml3Z2FTd2djaXdnWVNrZ2V3b2dJQ0FnYVdZZ0tDRnpNU2tnY21WMGRYSnVPd29nSUNBZ0lXRWdKaVlnY2lBbUppQm9lQ2h6TVN3Z2Jpd2dhU3dnY2lrN0NpQWdJQ0JzWlhRZ2J5QTlJSE14TENCakxDQnNPd29nSUNBZ1ptOXlLRHNnY3pFdWNISmxkaUFoUFQwZ2N6RXVibVY0ZERzcGV3b2dJQ0FnSUNBZ0lHbG1JQ2hqSUQwZ2N6RXVjSEpsZGl3Z2JDQTlJSE14TG01bGVIUXNJSElnUHlCdWVDaHpNU3dnYml3Z2FTd2djaWtnT2lCMGVDaHpNU2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdaUzV3ZFhOb0tHTXVhU0F2SUhRZ2ZDQXdLU3dnWlM1d2RYTm9LSE14TG1rZ0x5QjBJSHdnTUNrc0lHVXVjSFZ6YUNoc0xta2dMeUIwSUh3Z01Da3NJRUp6S0hNeEtTd2djekVnUFNCc0xtNWxlSFFzSUc4Z1BTQnNMbTVsZUhRN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb2N6RWdQU0JzTENCek1TQTlQVDBnYnlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JoSUQ4Z1lTQTlQVDBnTVNBL0lDaHpNU0E5SUdsNEtHWnBLSE14S1N3Z1pTd2dkQ2tzSUU5ektITXhMQ0JsTENCMExDQnVMQ0JwTENCeUxDQXlLU2tnT2lCaElEMDlQU0F5SUNZbUlITjRLSE14TENCbExDQjBMQ0J1TENCcExDQnlLU0E2SUU5ektHWnBLSE14S1N3Z1pTd2dkQ3dnYml3Z2FTd2djaXdnTVNrN0NpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS2ZRcG1kVzVqZEdsdmJpQjBlQ2h6TVNrZ2V3b2dJQ0FnYkdWMElHVWdQU0J6TVM1d2NtVjJMQ0IwSUQwZ2N6RXNJRzRnUFNCek1TNXVaWGgwT3dvZ0lDQWdhV1lnS0hOMEtHVXNJSFFzSUc0cElENDlJREFwSUhKbGRIVnliaUFoTVRzS0lDQWdJR3hsZENCcElEMGdaUzU0TENCeUlEMGdkQzU0TENCaElEMGdiaTU0TENCdklEMGdaUzU1TENCaklEMGdkQzU1TENCc0lEMGdiaTU1TENCb0lEMGdhU0E4SUhJZ1B5QnBJRHdnWVNBL0lHa2dPaUJoSURvZ2NpQThJR0VnUHlCeUlEb2dZU3dnZFNBOUlHOGdQQ0JqSUQ4Z2J5QThJR3dnUHlCdklEb2diQ0E2SUdNZ1BDQnNJRDhnWXlBNklHd3NJR1FnUFNCcElENGdjaUEvSUdrZ1BpQmhJRDhnYVNBNklHRWdPaUJ5SUQ0Z1lTQS9JSElnT2lCaExDQm1JRDBnYnlBK0lHTWdQeUJ2SUQ0Z2JDQS9JRzhnT2lCc0lEb2dZeUErSUd3Z1B5QmpJRG9nYkN3Z2JTQTlJRzR1Ym1WNGREc0tJQ0FnSUdadmNpZzdJRzBnSVQwOUlHVTdLWHNLSUNBZ0lDQWdJQ0JwWmlBb2JTNTRJRDQ5SUdnZ0ppWWdiUzU0SUR3OUlHUWdKaVlnYlM1NUlENDlJSFVnSmlZZ2JTNTVJRHc5SUdZZ0ppWWdSMmtvYVN3Z2J5d2djaXdnWXl3Z1lTd2diQ3dnYlM1NExDQnRMbmtwSUNZbUlITjBLRzB1Y0hKbGRpd2diU3dnYlM1dVpYaDBLU0ErUFNBd0tTQnlaWFIxY200Z0lURTdDaUFnSUNBZ0lDQWdiU0E5SUcwdWJtVjRkRHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUFoTURzS2ZRcG1kVzVqZEdsdmJpQnVlQ2h6TVN3Z1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnYkdWMElHa2dQU0J6TVM1d2NtVjJMQ0J5SUQwZ2N6RXNJR0VnUFNCek1TNXVaWGgwT3dvZ0lDQWdhV1lnS0hOMEtHa3NJSElzSUdFcElENDlJREFwSUhKbGRIVnliaUFoTVRzS0lDQWdJR3hsZENCdklEMGdhUzU0TENCaklEMGdjaTU0TENCc0lEMGdZUzU0TENCb0lEMGdhUzU1TENCMUlEMGdjaTU1TENCa0lEMGdZUzU1TENCbUlEMGdieUE4SUdNZ1B5QnZJRHdnYkNBL0lHOGdPaUJzSURvZ1l5QThJR3dnUHlCaklEb2diQ3dnYlNBOUlHZ2dQQ0IxSUQ4Z2FDQThJR1FnUHlCb0lEb2daQ0E2SUhVZ1BDQmtJRDhnZFNBNklHUXNJRjhnUFNCdklENGdZeUEvSUc4Z1BpQnNJRDhnYnlBNklHd2dPaUJqSUQ0Z2JDQS9JR01nT2lCc0xDQm5JRDBnYUNBK0lIVWdQeUJvSUQ0Z1pDQS9JR2dnT2lCa0lEb2dkU0ErSUdRZ1B5QjFJRG9nWkN3Z2NDQTlJRXR2S0dZc0lHMHNJR1VzSUhRc0lHNHBMQ0IySUQwZ1MyOG9YeXdnWnl3Z1pTd2dkQ3dnYmlrc0lIZ2dQU0J6TVM1d2NtVjJXaXdnZVNBOUlITXhMbTVsZUhSYU93b2dJQ0FnWm05eUtEc2dlQ0FtSmlCNExub2dQajBnY0NBbUppQjVJQ1ltSUhrdWVpQThQU0IyT3lsN0NpQWdJQ0FnSUNBZ2FXWWdLSGd1ZUNBK1BTQm1JQ1ltSUhndWVDQThQU0JmSUNZbUlIZ3VlU0ErUFNCdElDWW1JSGd1ZVNBOFBTQm5JQ1ltSUhnZ0lUMDlJR2tnSmlZZ2VDQWhQVDBnWVNBbUppQkhhU2h2TENCb0xDQmpMQ0IxTENCc0xDQmtMQ0I0TG5nc0lIZ3VlU2tnSmlZZ2MzUW9lQzV3Y21WMkxDQjRMQ0I0TG01bGVIUXBJRDQ5SURBZ2ZId2dLSGdnUFNCNExuQnlaWFphTENCNUxuZ2dQajBnWmlBbUppQjVMbmdnUEQwZ1h5QW1KaUI1TG5rZ1BqMGdiU0FtSmlCNUxua2dQRDBnWnlBbUppQjVJQ0U5UFNCcElDWW1JSGtnSVQwOUlHRWdKaVlnUjJrb2J5d2dhQ3dnWXl3Z2RTd2diQ3dnWkN3Z2VTNTRMQ0I1TG5rcElDWW1JSE4wS0hrdWNISmxkaXdnZVN3Z2VTNXVaWGgwS1NBK1BTQXdLU2tnY21WMGRYSnVJQ0V4T3dvZ0lDQWdJQ0FnSUhrZ1BTQjVMbTVsZUhSYU93b2dJQ0FnZlFvZ0lDQWdabTl5S0RzZ2VDQW1KaUI0TG5vZ1BqMGdjRHNwZXdvZ0lDQWdJQ0FnSUdsbUlDaDRMbmdnUGowZ1ppQW1KaUI0TG5nZ1BEMGdYeUFtSmlCNExua2dQajBnYlNBbUppQjRMbmtnUEQwZ1p5QW1KaUI0SUNFOVBTQnBJQ1ltSUhnZ0lUMDlJR0VnSmlZZ1Iya29ieXdnYUN3Z1l5d2dkU3dnYkN3Z1pDd2dlQzU0TENCNExua3BJQ1ltSUhOMEtIZ3VjSEpsZGl3Z2VDd2dlQzV1WlhoMEtTQStQU0F3S1NCeVpYUjFjbTRnSVRFN0NpQWdJQ0FnSUNBZ2VDQTlJSGd1Y0hKbGRsbzdDaUFnSUNCOUNpQWdJQ0JtYjNJb095QjVJQ1ltSUhrdWVpQThQU0IyT3lsN0NpQWdJQ0FnSUNBZ2FXWWdLSGt1ZUNBK1BTQm1JQ1ltSUhrdWVDQThQU0JmSUNZbUlIa3VlU0ErUFNCdElDWW1JSGt1ZVNBOFBTQm5JQ1ltSUhrZ0lUMDlJR2tnSmlZZ2VTQWhQVDBnWVNBbUppQkhhU2h2TENCb0xDQmpMQ0IxTENCc0xDQmtMQ0I1TG5nc0lIa3VlU2tnSmlZZ2MzUW9lUzV3Y21WMkxDQjVMQ0I1TG01bGVIUXBJRDQ5SURBcElISmxkSFZ5YmlBaE1Uc0tJQ0FnSUNBZ0lDQjVJRDBnZVM1dVpYaDBXanNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUFoTURzS2ZRcG1kVzVqZEdsdmJpQnBlQ2h6TVN3Z1pTd2dkQ2tnZXdvZ0lDQWdiR1YwSUc0Z1BTQnpNVHNLSUNBZ0lHUnZJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJRzR1Y0hKbGRpd2djaUE5SUc0dWJtVjRkQzV1WlhoME93b2dJQ0FnSUNBZ0lDRk5ZU2hwTENCeUtTQW1KaUJNWkNocExDQnVMQ0J1TG01bGVIUXNJSElwSUNZbUlFWnpLR2tzSUhJcElDWW1JRVp6S0hJc0lHa3BJQ1ltSUNobExuQjFjMmdvYVM1cElDOGdkQ0I4SURBcExDQmxMbkIxYzJnb2JpNXBJQzhnZENCOElEQXBMQ0JsTG5CMWMyZ29jaTVwSUM4Z2RDQjhJREFwTENCQ2N5aHVLU3dnUW5Nb2JpNXVaWGgwS1N3Z2JpQTlJSE14SUQwZ2Npa3NJRzRnUFNCdUxtNWxlSFE3Q2lBZ0lDQjlkMmhwYkdVZ0tHNGdJVDA5SUhNeEtRb2dJQ0FnY21WMGRYSnVJR1pwS0c0cE93cDlDbVoxYm1OMGFXOXVJSE40S0hNeExDQmxMQ0IwTENCdUxDQnBMQ0J5S1NCN0NpQWdJQ0JzWlhRZ1lTQTlJSE14T3dvZ0lDQWdaRzhnZXdvZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnWVM1dVpYaDBMbTVsZUhRN0NpQWdJQ0FnSUNBZ1ptOXlLRHNnYnlBaFBUMGdZUzV3Y21WMk95bDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhMbWtnSVQwOUlHOHVhU0FtSmlCbWVDaGhMQ0J2S1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCSlpDaGhMQ0J2S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdFZ1BTQm1hU2hoTENCaExtNWxlSFFwTENCaklEMGdabWtvWXl3Z1l5NXVaWGgwS1N3Z1QzTW9ZU3dnWlN3Z2RDd2diaXdnYVN3Z2Npd2dNQ2tzSUU5ektHTXNJR1VzSUhRc0lHNHNJR2tzSUhJc0lEQXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHOGdQU0J2TG01bGVIUTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR0VnUFNCaExtNWxlSFE3Q2lBZ0lDQjlkMmhwYkdVZ0tHRWdJVDA5SUhNeEtRcDlDbVoxYm1OMGFXOXVJSEo0S0hNeExDQmxMQ0IwTENCdUtTQjdDaUFnSUNCc1pYUWdhU0E5SUZ0ZExDQnlMQ0JoTENCdkxDQmpMQ0JzT3dvZ0lDQWdabTl5S0hJZ1BTQXdMQ0JoSUQwZ1pTNXNaVzVuZEdnN0lISWdQQ0JoT3lCeUt5c3BieUE5SUdWYmNsMGdLaUJ1TENCaklEMGdjaUE4SUdFZ0xTQXhJRDhnWlZ0eUlDc2dNVjBnS2lCdUlEb2djekV1YkdWdVozUm9MQ0JzSUQwZ1VHUW9jekVzSUc4c0lHTXNJRzRzSUNFeEtTd2diQ0E5UFQwZ2JDNXVaWGgwSUNZbUlDaHNMbk4wWldsdVpYSWdQU0FoTUNrc0lHa3VjSFZ6YUNoa2VDaHNLU2s3Q2lBZ0lDQm1iM0lvYVM1emIzSjBLR0Y0S1N3Z2NpQTlJREE3SUhJZ1BDQnBMbXhsYm1kMGFEc2djaXNyS1hRZ1BTQnZlQ2hwVzNKZExDQjBLVHNLSUNBZ0lISmxkSFZ5YmlCME93cDlDbVoxYm1OMGFXOXVJR0Y0S0hNeExDQmxLU0I3Q2lBZ0lDQnlaWFIxY200Z2N6RXVlQ0F0SUdVdWVEc0tmUXBtZFc1amRHbHZiaUJ2ZUNoek1Td2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQmplQ2h6TVN3Z1pTazdDaUFnSUNCcFppQW9JWFFwSUhKbGRIVnliaUJsT3dvZ0lDQWdiR1YwSUc0Z1BTQkpaQ2gwTENCek1TazdDaUFnSUNCeVpYUjFjbTRnWm1rb2Jpd2diaTV1WlhoMEtTd2dabWtvZEN3Z2RDNXVaWGgwS1RzS2ZRcG1kVzVqZEdsdmJpQmplQ2h6TVN3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCbExDQnVJRDBnTFRFZ0x5QXdMQ0JwTENCeUlEMGdjekV1ZUN3Z1lTQTlJSE14TG5rN0NpQWdJQ0JrYnlCN0NpQWdJQ0FnSUNBZ2FXWWdLR0VnUEQwZ2RDNTVJQ1ltSUdFZ1BqMGdkQzV1WlhoMExua2dKaVlnZEM1dVpYaDBMbmtnSVQwOUlIUXVlU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkNBOUlIUXVlQ0FySUNoaElDMGdkQzU1S1NBcUlDaDBMbTVsZUhRdWVDQXRJSFF1ZUNrZ0x5QW9kQzV1WlhoMExua2dMU0IwTG5rcE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pDQThQU0J5SUNZbUlHUWdQaUJ1SUNZbUlDaHVJRDBnWkN3Z2FTQTlJSFF1ZUNBOElIUXVibVY0ZEM1NElEOGdkQ0E2SUhRdWJtVjRkQ3dnWkNBOVBUMGdjaWtwSUhKbGRIVnliaUJwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMElEMGdkQzV1WlhoME93b2dJQ0FnZlhkb2FXeGxJQ2gwSUNFOVBTQmxLUW9nSUNBZ2FXWWdLQ0ZwS1NCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUd4bGRDQnZJRDBnYVN3Z1l5QTlJR2t1ZUN3Z2JDQTlJR2t1ZVN3Z2FDQTlJREVnTHlBd0xDQjFPd29nSUNBZ2RDQTlJR2s3Q2lBZ0lDQmtieUJ5SUQ0OUlIUXVlQ0FtSmlCMExuZ2dQajBnWXlBbUppQnlJQ0U5UFNCMExuZ2dKaVlnUjJrb1lTQThJR3dnUHlCeUlEb2diaXdnWVN3Z1l5d2diQ3dnWVNBOElHd2dQeUJ1SURvZ2Npd2dZU3dnZEM1NExDQjBMbmtwSUNZbUlDaDFJRDBnVFdGMGFDNWhZbk1vWVNBdElIUXVlU2tnTHlBb2NpQXRJSFF1ZUNrc0lFWnpLSFFzSUhNeEtTQW1KaUFvZFNBOElHZ2dmSHdnZFNBOVBUMGdhQ0FtSmlBb2RDNTRJRDRnYVM1NElIeDhJSFF1ZUNBOVBUMGdhUzU0SUNZbUlHeDRLR2tzSUhRcEtTa2dKaVlnS0drZ1BTQjBMQ0JvSUQwZ2RTa3BMQ0IwSUQwZ2RDNXVaWGgwT3dvZ0lDQWdkMmhwYkdVZ0tIUWdJVDA5SUc4cENpQWdJQ0J5WlhSMWNtNGdhVHNLZlFwbWRXNWpkR2x2YmlCc2VDaHpNU3dnWlNrZ2V3b2dJQ0FnY21WMGRYSnVJSE4wS0hNeExuQnlaWFlzSUhNeExDQmxMbkJ5WlhZcElEd2dNQ0FtSmlCemRDaGxMbTVsZUhRc0lITXhMQ0J6TVM1dVpYaDBLU0E4SURBN0NuMEtablZ1WTNScGIyNGdhSGdvY3pFc0lHVXNJSFFzSUc0cElIc0tJQ0FnSUd4bGRDQnBJRDBnY3pFN0NpQWdJQ0JrYnlCcExub2dQVDA5SURBZ0ppWWdLR2t1ZWlBOUlFdHZLR2t1ZUN3Z2FTNTVMQ0JsTENCMExDQnVLU2tzSUdrdWNISmxkbG9nUFNCcExuQnlaWFlzSUdrdWJtVjRkRm9nUFNCcExtNWxlSFFzSUdrZ1BTQnBMbTVsZUhRN0NpQWdJQ0IzYUdsc1pTQW9hU0FoUFQwZ2N6RXBDaUFnSUNCcExuQnlaWFphTG01bGVIUmFJRDBnYm5Wc2JDd2dhUzV3Y21WMldpQTlJRzUxYkd3c0lIVjRLR2twT3dwOUNtWjFibU4wYVc5dUlIVjRLSE14S1NCN0NpQWdJQ0JzWlhRZ1pTd2dkQ3dnYml3Z2FTd2djaXdnWVN3Z2J5d2dZeXdnYkNBOUlERTdDaUFnSUNCa2J5QjdDaUFnSUNBZ0lDQWdabTl5S0hRZ1BTQnpNU3dnY3pFZ1BTQnVkV3hzTENCeUlEMGdiblZzYkN3Z1lTQTlJREE3SUhRN0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHRXJLeXdnYmlBOUlIUXNJRzhnUFNBd0xDQmxJRDBnTURzZ1pTQThJR3dnSmlZZ0tHOHJLeXdnYmlBOUlHNHVibVY0ZEZvc0lDRWhiaWs3SUdVckt5azdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaGpJRDBnYkRzZ2J5QStJREFnZkh3Z1l5QStJREFnSmlZZ2Jqc3BieUFoUFQwZ01DQW1KaUFvWXlBOVBUMGdNQ0I4ZkNBaGJpQjhmQ0IwTG5vZ1BEMGdiaTU2S1NBL0lDaHBJRDBnZEN3Z2RDQTlJSFF1Ym1WNGRGb3NJRzh0TFNrZ09pQW9hU0E5SUc0c0lHNGdQU0J1TG01bGVIUmFMQ0JqTFMwcExDQnlJRDhnY2k1dVpYaDBXaUE5SUdrZ09pQnpNU0E5SUdrc0lHa3VjSEpsZGxvZ1BTQnlMQ0J5SUQwZ2FUc0tJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlHNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEl1Ym1WNGRGb2dQU0J1ZFd4c0xDQnNJQ285SURJN0NpQWdJQ0I5ZDJocGJHVWdLR0VnUGlBeEtRb2dJQ0FnY21WMGRYSnVJSE14T3dwOUNtWjFibU4wYVc5dUlFdHZLSE14TENCbExDQjBMQ0J1TENCcEtTQjdDaUFnSUNCeVpYUjFjbTRnY3pFZ1BTQW9jekVnTFNCMEtTQXFJR2tnZkNBd0xDQmxJRDBnS0dVZ0xTQnVLU0FxSUdrZ2ZDQXdMQ0J6TVNBOUlDaHpNU0I4SUhNeElEdzhJRGdwSUNZZ01UWTNNVEU1TXpVc0lITXhJRDBnS0hNeElId2djekVnUER3Z05Da2dKaUF5TlRJMk5EVXhNelVzSUhNeElEMGdLSE14SUh3Z2N6RWdQRHdnTWlrZ0ppQTROVGc1T1RNME5Ua3NJSE14SUQwZ0tITXhJSHdnY3pFZ1BEd2dNU2tnSmlBeE5ETXhOalUxTnpZMUxDQmxJRDBnS0dVZ2ZDQmxJRHc4SURncElDWWdNVFkzTVRFNU16VXNJR1VnUFNBb1pTQjhJR1VnUER3Z05Da2dKaUF5TlRJMk5EVXhNelVzSUdVZ1BTQW9aU0I4SUdVZ1BEd2dNaWtnSmlBNE5UZzVPVE0wTlRrc0lHVWdQU0FvWlNCOElHVWdQRHdnTVNrZ0ppQXhORE14TmpVMU56WTFMQ0J6TVNCOElHVWdQRHdnTVRzS2ZRcG1kVzVqZEdsdmJpQmtlQ2h6TVNrZ2V3b2dJQ0FnYkdWMElHVWdQU0J6TVN3Z2RDQTlJSE14T3dvZ0lDQWdaRzhnS0dVdWVDQThJSFF1ZUNCOGZDQmxMbmdnUFQwOUlIUXVlQ0FtSmlCbExua2dQQ0IwTG5rcElDWW1JQ2gwSUQwZ1pTa3NJR1VnUFNCbExtNWxlSFE3Q2lBZ0lDQjNhR2xzWlNBb1pTQWhQVDBnY3pFcENpQWdJQ0J5WlhSMWNtNGdkRHNLZlFwbWRXNWpkR2x2YmlCSGFTaHpNU3dnWlN3Z2RDd2diaXdnYVN3Z2Npd2dZU3dnYnlrZ2V3b2dJQ0FnY21WMGRYSnVJQ2hwSUMwZ1lTa2dLaUFvWlNBdElHOHBJRDQ5SUNoek1TQXRJR0VwSUNvZ0tISWdMU0J2S1NBbUppQW9jekVnTFNCaEtTQXFJQ2h1SUMwZ2J5a2dQajBnS0hRZ0xTQmhLU0FxSUNobElDMGdieWtnSmlZZ0tIUWdMU0JoS1NBcUlDaHlJQzBnYnlrZ1BqMGdLR2tnTFNCaEtTQXFJQ2h1SUMwZ2J5azdDbjBLWm5WdVkzUnBiMjRnWm5nb2N6RXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQnpNUzV1WlhoMExta2dJVDA5SUdVdWFTQW1KaUJ6TVM1d2NtVjJMbWtnSVQwOUlHVXVhU0FtSmlBaGNIZ29jekVzSUdVcElDWW1JQ2hHY3loek1Td2daU2tnSmlZZ1JuTW9aU3dnY3pFcElDWW1JRzE0S0hNeExDQmxLU0FtSmlBb2MzUW9jekV1Y0hKbGRpd2djekVzSUdVdWNISmxkaWtnZkh3Z2MzUW9jekVzSUdVdWNISmxkaXdnWlNrcElIeDhJRTFoS0hNeExDQmxLU0FtSmlCemRDaHpNUzV3Y21WMkxDQnpNU3dnY3pFdWJtVjRkQ2tnUGlBd0lDWW1JSE4wS0dVdWNISmxkaXdnWlN3Z1pTNXVaWGgwS1NBK0lEQXBPd3A5Q21aMWJtTjBhVzl1SUhOMEtITXhMQ0JsTENCMEtTQjdDaUFnSUNCeVpYUjFjbTRnS0dVdWVTQXRJSE14TG5rcElDb2dLSFF1ZUNBdElHVXVlQ2tnTFNBb1pTNTRJQzBnY3pFdWVDa2dLaUFvZEM1NUlDMGdaUzU1S1RzS2ZRcG1kVzVqZEdsdmJpQk5ZU2h6TVN3Z1pTa2dld29nSUNBZ2NtVjBkWEp1SUhNeExuZ2dQVDA5SUdVdWVDQW1KaUJ6TVM1NUlEMDlQU0JsTG5rN0NuMEtablZ1WTNScGIyNGdUR1FvY3pFc0lHVXNJSFFzSUc0cElIc0tJQ0FnSUd4bGRDQnBJRDBnWW5Jb2MzUW9jekVzSUdVc0lIUXBLU3dnY2lBOUlHSnlLSE4wS0hNeExDQmxMQ0J1S1Nrc0lHRWdQU0JpY2loemRDaDBMQ0J1TENCek1Ta3BMQ0J2SUQwZ1luSW9jM1FvZEN3Z2Jpd2daU2twT3dvZ0lDQWdjbVYwZFhKdUlDRWhLR2tnSVQwOUlISWdKaVlnWVNBaFBUMGdieUI4ZkNCcElEMDlQU0F3SUNZbUlGTnlLSE14TENCMExDQmxLU0I4ZkNCeUlEMDlQU0F3SUNZbUlGTnlLSE14TENCdUxDQmxLU0I4ZkNCaElEMDlQU0F3SUNZbUlGTnlLSFFzSUhNeExDQnVLU0I4ZkNCdklEMDlQU0F3SUNZbUlGTnlLSFFzSUdVc0lHNHBLVHNLZlFwbWRXNWpkR2x2YmlCVGNpaHpNU3dnWlN3Z2RDa2dld29nSUNBZ2NtVjBkWEp1SUdVdWVDQThQU0JOWVhSb0xtMWhlQ2h6TVM1NExDQjBMbmdwSUNZbUlHVXVlQ0ErUFNCTllYUm9MbTFwYmloek1TNTRMQ0IwTG5ncElDWW1JR1V1ZVNBOFBTQk5ZWFJvTG0xaGVDaHpNUzU1TENCMExua3BJQ1ltSUdVdWVTQStQU0JOWVhSb0xtMXBiaWh6TVM1NUxDQjBMbmtwT3dwOUNtWjFibU4wYVc5dUlHSnlLSE14S1NCN0NpQWdJQ0J5WlhSMWNtNGdjekVnUGlBd0lEOGdNU0E2SUhNeElEd2dNQ0EvSUMweElEb2dNRHNLZlFwbWRXNWpkR2x2YmlCd2VDaHpNU3dnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0J6TVRzS0lDQWdJR1J2SUhzS0lDQWdJQ0FnSUNCcFppQW9kQzVwSUNFOVBTQnpNUzVwSUNZbUlIUXVibVY0ZEM1cElDRTlQU0J6TVM1cElDWW1JSFF1YVNBaFBUMGdaUzVwSUNZbUlIUXVibVY0ZEM1cElDRTlQU0JsTG1rZ0ppWWdUR1FvZEN3Z2RDNXVaWGgwTENCek1Td2daU2twSUhKbGRIVnliaUFoTURzS0lDQWdJQ0FnSUNCMElEMGdkQzV1WlhoME93b2dJQ0FnZlhkb2FXeGxJQ2gwSUNFOVBTQnpNU2tLSUNBZ0lISmxkSFZ5YmlBaE1Uc0tmUXBtZFc1amRHbHZiaUJHY3loek1Td2daU2tnZXdvZ0lDQWdjbVYwZFhKdUlITjBLSE14TG5CeVpYWXNJSE14TENCek1TNXVaWGgwS1NBOElEQWdQeUJ6ZENoek1Td2daU3dnY3pFdWJtVjRkQ2tnUGowZ01DQW1KaUJ6ZENoek1Td2djekV1Y0hKbGRpd2daU2tnUGowZ01DQTZJSE4wS0hNeExDQmxMQ0J6TVM1d2NtVjJLU0E4SURBZ2ZId2djM1FvY3pFc0lITXhMbTVsZUhRc0lHVXBJRHdnTURzS2ZRcG1kVzVqZEdsdmJpQnRlQ2h6TVN3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCek1Td2diaUE5SUNFeExDQnBJRDBnS0hNeExuZ2dLeUJsTG5ncElDOGdNaXdnY2lBOUlDaHpNUzU1SUNzZ1pTNTVLU0F2SURJN0NpQWdJQ0JrYnlCMExua2dQaUJ5SUNFOUlIUXVibVY0ZEM1NUlENGdjaUFtSmlCMExtNWxlSFF1ZVNBaFBUMGdkQzU1SUNZbUlHa2dQQ0FvZEM1dVpYaDBMbmdnTFNCMExuZ3BJQ29nS0hJZ0xTQjBMbmtwSUM4Z0tIUXVibVY0ZEM1NUlDMGdkQzU1S1NBcklIUXVlQ0FtSmlBb2JpQTlJQ0Z1S1N3Z2RDQTlJSFF1Ym1WNGREc0tJQ0FnSUhkb2FXeGxJQ2gwSUNFOVBTQnpNU2tLSUNBZ0lISmxkSFZ5YmlCdU93cDlDbVoxYm1OMGFXOXVJRWxrS0hNeExDQmxLU0I3Q2lBZ0lDQnNaWFFnZENBOUlHNWxkeUJSYnloek1TNXBMQ0J6TVM1NExDQnpNUzU1S1N3Z2JpQTlJRzVsZHlCUmJ5aGxMbWtzSUdVdWVDd2daUzU1S1N3Z2FTQTlJSE14TG01bGVIUXNJSElnUFNCbExuQnlaWFk3Q2lBZ0lDQnlaWFIxY200Z2N6RXVibVY0ZENBOUlHVXNJR1V1Y0hKbGRpQTlJSE14TENCMExtNWxlSFFnUFNCcExDQnBMbkJ5WlhZZ1BTQjBMQ0J1TG01bGVIUWdQU0IwTENCMExuQnlaWFlnUFNCdUxDQnlMbTVsZUhRZ1BTQnVMQ0J1TG5CeVpYWWdQU0J5TENCdU93cDlDbVoxYm1OMGFXOXVJSFIxS0hNeExDQmxMQ0IwTENCdUtTQjdDaUFnSUNCc1pYUWdhU0E5SUc1bGR5QlJieWh6TVN3Z1pTd2dkQ2s3Q2lBZ0lDQnlaWFIxY200Z2JpQS9JQ2hwTG01bGVIUWdQU0J1TG01bGVIUXNJR2t1Y0hKbGRpQTlJRzRzSUc0dWJtVjRkQzV3Y21WMklEMGdhU3dnYmk1dVpYaDBJRDBnYVNrZ09pQW9hUzV3Y21WMklEMGdhU3dnYVM1dVpYaDBJRDBnYVNrc0lHazdDbjBLWm5WdVkzUnBiMjRnUW5Nb2N6RXBJSHNLSUNBZ0lITXhMbTVsZUhRdWNISmxkaUE5SUhNeExuQnlaWFlzSUhNeExuQnlaWFl1Ym1WNGRDQTlJSE14TG01bGVIUXNJSE14TG5CeVpYWmFJQ1ltSUNoek1TNXdjbVYyV2k1dVpYaDBXaUE5SUhNeExtNWxlSFJhS1N3Z2N6RXVibVY0ZEZvZ0ppWWdLSE14TG01bGVIUmFMbkJ5WlhaYUlEMGdjekV1Y0hKbGRsb3BPd3A5Q21aMWJtTjBhVzl1SUZGdktITXhMQ0JsTENCMEtTQjdDaUFnSUNCMGFHbHpMbWtnUFNCek1Td2dkR2hwY3k1NElEMGdaU3dnZEdocGN5NTVJRDBnZEN3Z2RHaHBjeTV3Y21WMklEMGdiblZzYkN3Z2RHaHBjeTV1WlhoMElEMGdiblZzYkN3Z2RHaHBjeTU2SUQwZ01Dd2dkR2hwY3k1d2NtVjJXaUE5SUc1MWJHd3NJSFJvYVhNdWJtVjRkRm9nUFNCdWRXeHNMQ0IwYUdsekxuTjBaV2x1WlhJZ1BTQWhNVHNLZlFwbWRXNWpkR2x2YmlCbmVDaHpNU3dnWlN3Z2RDd2diaWtnZXdvZ0lDQWdiR1YwSUdrZ1BTQXdPd29nSUNBZ1ptOXlLR3hsZENCeUlEMGdaU3dnWVNBOUlIUWdMU0J1T3lCeUlEd2dkRHNnY2lBclBTQnVLV2tnS3owZ0tITXhXMkZkSUMwZ2N6RmJjbDBwSUNvZ0tITXhXM0lnS3lBeFhTQXJJSE14VzJFZ0t5QXhYU2tzSUdFZ1BTQnlPd29nSUNBZ2NtVjBkWEp1SUdrN0NuMEtkbUZ5SUhsdUlEMGdZMnhoYzNNZ2N6RWdld29nSUNBZ2MzUmhkR2xqSUdGeVpXRW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlM1c1pXNW5kR2dzSUc0Z1BTQXdPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SUhRZ0xTQXhMQ0J5SUQwZ01Ec2djaUE4SUhRN0lHa2dQU0J5S3lzcGJpQXJQU0JsVzJsZExuZ2dLaUJsVzNKZExua2dMU0JsVzNKZExuZ2dLaUJsVzJsZExuazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNGdLaUF1TlRzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCcGMwTnNiMk5yVjJselpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE14TG1GeVpXRW9aU2tnUENBd093b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklIUnlhV0Z1WjNWc1lYUmxVMmhoY0dVb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnVzEwc0lHa2dQU0JiWFN3Z2NpQTlJRnRkT3dvZ0lDQWdJQ0FnSUc1MUtHVXBMQ0JwZFNodUxDQmxLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJR1V1YkdWdVozUm9Pd29nSUNBZ0lDQWdJSFF1Wm05eVJXRmphQ2h1ZFNrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaklEMGdNRHNnWXlBOElIUXViR1Z1WjNSb095QmpLeXNwYVM1d2RYTm9LR0VwTENCaElDczlJSFJiWTEwdWJHVnVaM1JvTENCcGRTaHVMQ0IwVzJOZEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlHVjRMblJ5YVdGdVozVnNZWFJsS0c0c0lHa3BPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdZeUE5SURBN0lHTWdQQ0J2TG14bGJtZDBhRHNnWXlBclBTQXpLWEl1Y0hWemFDaHZMbk5zYVdObEtHTXNJR01nS3lBektTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlISTdDaUFnSUNCOUNuMDdDbVoxYm1OMGFXOXVJRzUxS0hNeEtTQjdDaUFnSUNCc1pYUWdaU0E5SUhNeExteGxibWQwYURzS0lDQWdJR1VnUGlBeUlDWW1JSE14VzJVZ0xTQXhYUzVsY1hWaGJITW9jekZiTUYwcElDWW1JSE14TG5CdmNDZ3BPd3A5Q21aMWJtTjBhVzl1SUdsMUtITXhMQ0JsS1NCN0NpQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd095QjBJRHdnWlM1c1pXNW5kR2c3SUhRckt5bHpNUzV3ZFhOb0tHVmJkRjB1ZUNrc0lITXhMbkIxYzJnb1pWdDBYUzU1S1RzS2ZRcDJZWElnYW04Z1BTQmpiR0Z6Y3lCek1TQmxlSFJsYm1SeklFZGxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCdVpYY2dSbTRvV3dvZ0lDQWdJQ0FnSUc1bGR5QmFLQzQxTENBdU5Ta3NDaUFnSUNBZ0lDQWdibVYzSUZvb0xTNDFMQ0F1TlNrc0NpQWdJQ0FnSUNBZ2JtVjNJRm9vTFM0MUxDQXRMalVwTEFvZ0lDQWdJQ0FnSUc1bGR5QmFLQzQxTENBdExqVXBDaUFnSUNCZEtTd2dkQ0E5SUh0OUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG5SNWNHVWdQU0FpUlhoMGNuVmtaVWRsYjIxbGRISjVJaXdnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnphR0Z3WlhNNklHVXNDaUFnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk02SUhRS0lDQWdJQ0FnSUNCOUxDQmxJRDBnUVhKeVlYa3VhWE5CY25KaGVTaGxLU0EvSUdVZ09pQmJDaUFnSUNBZ0lDQWdJQ0FnSUdVS0lDQWdJQ0FnSUNCZE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeXdnYVNBOUlGdGRMQ0J5SUQwZ1cxMDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnZJRDBnTUN3Z1l5QTlJR1V1YkdWdVozUm9PeUJ2SUR3Z1l6c2dieXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd3Z1BTQmxXMjlkT3dvZ0lDQWdJQ0FnSUNBZ0lDQmhLR3dwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnZG1Vb2FTd2dNeWtwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWRYWWlMQ0J1WlhjZ2RtVW9jaXdnTWlrcExDQjBhR2x6TG1OdmJYQjFkR1ZXWlhKMFpYaE9iM0p0WVd4ektDazdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdZU2h2S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaklEMGdXMTBzSUd3Z1BTQjBMbU4xY25abFUyVm5iV1Z1ZEhNZ0lUMDlJSFp2YVdRZ01DQS9JSFF1WTNWeWRtVlRaV2R0Wlc1MGN5QTZJREV5TENCb0lEMGdkQzV6ZEdWd2N5QWhQVDBnZG05cFpDQXdJRDhnZEM1emRHVndjeUE2SURFc0lIVWdQU0IwTG1SbGNIUm9JQ0U5UFNCMmIybGtJREFnUHlCMExtUmxjSFJvSURvZ01Td2daQ0E5SUhRdVltVjJaV3hGYm1GaWJHVmtJQ0U5UFNCMmIybGtJREFnUHlCMExtSmxkbVZzUlc1aFlteGxaQ0E2SUNFd0xDQm1JRDBnZEM1aVpYWmxiRlJvYVdOcmJtVnpjeUFoUFQwZ2RtOXBaQ0F3SUQ4Z2RDNWlaWFpsYkZSb2FXTnJibVZ6Y3lBNklDNHlMQ0J0SUQwZ2RDNWlaWFpsYkZOcGVtVWdJVDA5SUhadmFXUWdNQ0EvSUhRdVltVjJaV3hUYVhwbElEb2daaUF0SUM0eExDQmZJRDBnZEM1aVpYWmxiRTltWm5ObGRDQWhQVDBnZG05cFpDQXdJRDhnZEM1aVpYWmxiRTltWm5ObGRDQTZJREFzSUdjZ1BTQjBMbUpsZG1Wc1UyVm5iV1Z1ZEhNZ0lUMDlJSFp2YVdRZ01DQS9JSFF1WW1WMlpXeFRaV2R0Wlc1MGN5QTZJRE1zSUhBZ1BTQjBMbVY0ZEhKMVpHVlFZWFJvTENCMklEMGdkQzVWVmtkbGJtVnlZWFJ2Y2lBaFBUMGdkbTlwWkNBd0lEOGdkQzVWVmtkbGJtVnlZWFJ2Y2lBNklGOTRMQ0I0TENCNUlEMGdJVEVzSUdJc0lIY3NJRklzSUVrN0NpQWdJQ0FnSUNBZ0lDQWdJSEFnSmlZZ0tIZ2dQU0J3TG1kbGRGTndZV05sWkZCdmFXNTBjeWhvS1N3Z2VTQTlJQ0V3TENCa0lEMGdJVEVzSUdJZ1BTQndMbU52YlhCMWRHVkdjbVZ1WlhSR2NtRnRaWE1vYUN3Z0lURXBMQ0IzSUQwZ2JtVjNJRUVzSUZJZ1BTQnVaWGNnUVN3Z1NTQTlJRzVsZHlCQktTd2daQ0I4ZkNBb1p5QTlJREFzSUdZZ1BTQXdMQ0J0SUQwZ01Dd2dYeUE5SURBcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1RTQTlJRzh1WlhoMGNtRmpkRkJ2YVc1MGN5aHNLU3dnVkNBOUlFMHVjMmhoY0dVc0lFOGdQU0JOTG1odmJHVnpPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWGx1TG1selEyeHZZMnRYYVhObEtGUXBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JVSUQwZ1ZDNXlaWFpsY25ObEtDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFd2dQU0F3TENCdlpTQTlJRTh1YkdWdVozUm9PeUJNSUR3Z2IyVTdJRXdyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZnZ1BTQlBXMHhkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIbHVMbWx6UTJ4dlkydFhhWE5sS0ZncElDWW1JQ2hQVzB4ZElEMGdXQzV5WlhabGNuTmxLQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQWtJRDBnZVc0dWRISnBZVzVuZFd4aGRHVlRhR0Z3WlNoVUxDQlBLU3dnVlNBOUlGUTdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnVENBOUlEQXNJRzlsSUQwZ1R5NXNaVzVuZEdnN0lFd2dQQ0J2WlRzZ1RDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCWUlEMGdUMXRNWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZRZ1BTQlVMbU52Ym1OaGRDaFlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUI2S0V3c0lHOWxMQ0JZS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYjJVZ2ZId2dZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1UlhoMGNuVmtaVWRsYjIxbGRISjVPaUIyWldNZ1pHOWxjeUJ1YjNRZ1pYaHBjM1FpS1N3Z1RDNWpiRzl1WlNncExtRmtaRk5qWVd4bFpGWmxZM1J2Y2lodlpTd2dXQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIRWdQU0JVTG14bGJtZDBhQ3dnU0NBOUlDUXViR1Z1WjNSb093b2dJQ0FnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ1WlNoTUxDQnZaU3dnV0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2xsTENCS0xDQlRaU3dnYldVZ1BTQk1MbmdnTFNCdlpTNTRMQ0I1WlNBOUlFd3VlU0F0SUc5bExua3NJRTVsSUQwZ1dDNTRJQzBnVEM1NExDQnhaU0E5SUZndWVTQXRJRXd1ZVN3Z2NuUWdQU0J0WlNBcUlHMWxJQ3NnZVdVZ0tpQjVaU3dnUXlBOUlHMWxJQ29nY1dVZ0xTQjVaU0FxSUU1bE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRTFoZEdndVlXSnpLRU1wSUQ0Z1RuVnRZbVZ5TGtWUVUwbE1UMDRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVXlBOUlFMWhkR2d1YzNGeWRDaHlkQ2tzSUVJZ1BTQk5ZWFJvTG5OeGNuUW9UbVVnS2lCT1pTQXJJSEZsSUNvZ2NXVXBMQ0JsWlNBOUlHOWxMbmdnTFNCNVpTQXZJRk1zSUdvZ1BTQnZaUzU1SUNzZ2JXVWdMeUJUTENCMFpTQTlJRmd1ZUNBdElIRmxJQzhnUWl3Z1RXVWdQU0JZTG5rZ0t5Qk9aU0F2SUVJc0lISmxJRDBnS0NoMFpTQXRJR1ZsS1NBcUlIRmxJQzBnS0UxbElDMGdhaWtnS2lCT1pTa2dMeUFvYldVZ0tpQnhaU0F0SUhsbElDb2dUbVVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGxJRDBnWldVZ0t5QnRaU0FxSUhKbElDMGdUQzU0TENCS0lEMGdhaUFySUhsbElDb2djbVVnTFNCTUxuazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUmxJRDBnYVdVZ0tpQnBaU0FySUVvZ0tpQktPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtaU0E4UFNBeUtTQnlaWFIxY200Z2JtVjNJRm9vYVdVc0lFb3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZObElEMGdUV0YwYUM1emNYSjBLR1JsSUM4Z01pazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCVElEMGdJVEU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVWdQaUJPZFcxaVpYSXVSVkJUU1V4UFRpQS9JRTVsSUQ0Z1RuVnRZbVZ5TGtWUVUwbE1UMDRnSmlZZ0tGTWdQU0FoTUNrZ09pQnRaU0E4SUMxT2RXMWlaWEl1UlZCVFNVeFBUaUEvSUU1bElEd2dMVTUxYldKbGNpNUZVRk5KVEU5T0lDWW1JQ2hUSUQwZ0lUQXBJRG9nVFdGMGFDNXphV2R1S0hsbEtTQTlQVDBnVFdGMGFDNXphV2R1S0hGbEtTQW1KaUFvVXlBOUlDRXdLU3dnVXlBL0lDaHBaU0E5SUMxNVpTd2dTaUE5SUcxbExDQlRaU0E5SUUxaGRHZ3VjM0Z5ZENoeWRDa3BJRG9nS0dsbElEMGdiV1VzSUVvZ1BTQjVaU3dnVTJVZ1BTQk5ZWFJvTG5OeGNuUW9jblFnTHlBeUtTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRm9vYVdVZ0x5QlRaU3dnU2lBdklGTmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1Z5QTlJRnRkT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFd2dQU0F3TENCdlpTQTlJRlV1YkdWdVozUm9MQ0JZSUQwZ2IyVWdMU0F4TENCcFpTQTlJRXdnS3lBeE95Qk1JRHdnYjJVN0lFd3JLeXdnV0NzckxDQnBaU3NyS1ZnZ1BUMDlJRzlsSUNZbUlDaFlJRDBnTUNrc0lHbGxJRDA5UFNCdlpTQW1KaUFvYVdVZ1BTQXdLU3dnVjF0TVhTQTlJRzVsS0ZWYlRGMHNJRlZiV0Ywc0lGVmJhV1ZkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVzZ1BTQmJYU3dnUkN3Z1J5QTlJRmN1WTI5dVkyRjBLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1RDQTlJREFzSUc5bElEMGdUeTVzWlc1bmRHZzdJRXdnUENCdlpUc2dUQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQllJRDBnVDF0TVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFUWdQU0JiWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVdVZ1BTQXdMQ0JLSUQwZ1dDNXNaVzVuZEdnc0lGTmxJRDBnU2lBdElERXNJRzFsSUQwZ2FXVWdLeUF4T3lCcFpTQThJRW83SUdsbEt5c3NJRk5sS3lzc0lHMWxLeXNwVTJVZ1BUMDlJRW9nSmlZZ0tGTmxJRDBnTUNrc0lHMWxJRDA5UFNCS0lDWW1JQ2h0WlNBOUlEQXBMQ0JFVzJsbFhTQTlJRzVsS0ZoYmFXVmRMQ0JZVzFObFhTd2dXRnR0WlYwcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1N5NXdkWE5vS0VRcExDQkhJRDBnUnk1amIyNWpZWFFvUkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCTUlEMGdNRHNnVENBOElHYzdJRXdyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiMlVnUFNCTUlDOGdaeXdnV0NBOUlHWWdLaUJOWVhSb0xtTnZjeWh2WlNBcUlFMWhkR2d1VUVrZ0x5QXlLU3dnYVdVZ1BTQnRJQ29nVFdGMGFDNXphVzRvYjJVZ0tpQk5ZWFJvTGxCSklDOGdNaWtnS3lCZk93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCS0lEMGdNQ3dnVTJVZ1BTQlZMbXhsYm1kMGFEc2dTaUE4SUZObE95QktLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0WlNBOUlIb29WVnRLWFN3Z1YxdEtYU3dnYVdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVZsS0cxbExuZ3NJRzFsTG5rc0lDMVlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdTaUE5SURBc0lGTmxJRDBnVHk1c1pXNW5kR2c3SUVvZ1BDQlRaVHNnU2lzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JXVWdQU0JQVzBwZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVFnUFNCTFcwcGRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZVdVZ1BTQXdMQ0JPWlNBOUlHMWxMbXhsYm1kMGFEc2dlV1VnUENCT1pUc2dlV1VyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnhaU0E5SUhvb2JXVmJlV1ZkTENCRVczbGxYU3dnYVdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRlpTaHhaUzU0TENCeFpTNTVMQ0F0V0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb1pTQTlJRzBnS3lCZk93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRXdnUFNBd095Qk1JRHdnY1RzZ1RDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdlpTQTlJR1FnUHlCNktGUmJURjBzSUVkYlRGMHNJR2hsS1NBNklGUmJURjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1SUQ4Z0tGSXVZMjl3ZVNoaUxtNXZjbTFoYkhOYk1GMHBMbTExYkhScGNHeDVVMk5oYkdGeUtHOWxMbmdwTENCM0xtTnZjSGtvWWk1aWFXNXZjbTFoYkhOYk1GMHBMbTExYkhScGNHeDVVMk5oYkdGeUtHOWxMbmtwTENCSkxtTnZjSGtvZUZzd1hTa3VZV1JrS0ZJcExtRmtaQ2gzS1N3Z1JXVW9TUzU0TENCSkxua3NJRWt1ZWlrcElEb2dSV1VvYjJVdWVDd2diMlV1ZVN3Z01DazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQk1JRDBnTVRzZ1RDQThQU0JvT3lCTUt5c3BabTl5S0d4bGRDQnZaU0E5SURBN0lHOWxJRHdnY1RzZ2IyVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1dDQTlJR1FnUHlCNktGUmJiMlZkTENCSFcyOWxYU3dnYUdVcElEb2dWRnR2WlYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNUlEOGdLRkl1WTI5d2VTaGlMbTV2Y20xaGJITmJURjBwTG0xMWJIUnBjR3g1VTJOaGJHRnlLRmd1ZUNrc0lIY3VZMjl3ZVNoaUxtSnBibTl5YldGc2MxdE1YU2t1YlhWc2RHbHdiSGxUWTJGc1lYSW9XQzU1S1N3Z1NTNWpiM0I1S0hoYlRGMHBMbUZrWkNoU0tTNWhaR1FvZHlrc0lFVmxLRWt1ZUN3Z1NTNTVMQ0JKTG5vcEtTQTZJRVZsS0ZndWVDd2dXQzU1TENCMUlDOGdhQ0FxSUV3cE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1RDQTlJR2NnTFNBeE95Qk1JRDQ5SURBN0lFd3RMU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2IyVWdQU0JNSUM4Z1p5d2dXQ0E5SUdZZ0tpQk5ZWFJvTG1OdmN5aHZaU0FxSUUxaGRHZ3VVRWtnTHlBeUtTd2dhV1VnUFNCdElDb2dUV0YwYUM1emFXNG9iMlVnS2lCTllYUm9MbEJKSUM4Z01pa2dLeUJmT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JLSUQwZ01Dd2dVMlVnUFNCVkxteGxibWQwYURzZ1NpQThJRk5sT3lCS0t5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRaU0E5SUhvb1ZWdEtYU3dnVjF0S1hTd2dhV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFVmxLRzFsTG5nc0lHMWxMbmtzSUhVZ0t5QllLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdTaUE5SURBc0lGTmxJRDBnVHk1c1pXNW5kR2c3SUVvZ1BDQlRaVHNnU2lzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JXVWdQU0JQVzBwZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVFnUFNCTFcwcGRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZVdVZ1BTQXdMQ0JPWlNBOUlHMWxMbXhsYm1kMGFEc2dlV1VnUENCT1pUc2dlV1VyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnhaU0E5SUhvb2JXVmJlV1ZkTENCRVczbGxYU3dnYVdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNUlEOGdSV1VvY1dVdWVDd2djV1V1ZVNBcklIaGJhQ0F0SURGZExua3NJSGhiYUNBdElERmRMbmdnS3lCWUtTQTZJRVZsS0hGbExuZ3NJSEZsTG5rc0lIVWdLeUJZS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdabVVvS1N3Z1gyVW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1ptVW9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1RDQTlJR2t1YkdWdVozUm9JQzhnTXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzlsSUQwZ01Dd2dXQ0E5SUhFZ0tpQnZaVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdsbElEMGdNRHNnYVdVZ1BDQklPeUJwWlNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRW9nUFNBa1cybGxYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWR1VvU2xzeVhTQXJJRmdzSUVwYk1WMGdLeUJZTENCS1d6QmRJQ3NnV0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5bElEMGdhQ0FySUdjZ0tpQXlMQ0JZSUQwZ2NTQXFJRzlsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FXVWdQU0F3T3lCcFpTQThJRWc3SUdsbEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnU2lBOUlDUmJhV1ZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JVWlNoS1d6QmRJQ3NnV0N3Z1Nsc3hYU0FySUZnc0lFcGJNbDBnS3lCWUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYjJVZ1BTQXdPeUJ2WlNBOElFZzdJRzlsS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdXQ0E5SUNSYmIyVmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVaU2hZV3pKZExDQllXekZkTENCWVd6QmRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnZaU0E5SURBN0lHOWxJRHdnU0RzZ2IyVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCWUlEMGdKRnR2WlYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZSbEtGaGJNRjBnS3lCeElDb2dhQ3dnV0ZzeFhTQXJJSEVnS2lCb0xDQllXekpkSUNzZ2NTQXFJR2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNHVZV1JrUjNKdmRYQW9UQ3dnYVM1c1pXNW5kR2dnTHlBeklDMGdUQ3dnTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1gyVW9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1RDQTlJR2t1YkdWdVozUm9JQzhnTXl3Z2IyVWdQU0F3T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJVb1ZTd2diMlVwTENCdlpTQXJQU0JWTG14bGJtZDBhRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdXQ0E5SURBc0lHbGxJRDBnVHk1c1pXNW5kR2c3SUZnZ1BDQnBaVHNnV0NzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1NpQTlJRTliV0YwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMlVvU2l3Z2IyVXBMQ0J2WlNBclBTQktMbXhsYm1kMGFEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNHVZV1JrUjNKdmRYQW9UQ3dnYVM1c1pXNW5kR2dnTHlBeklDMGdUQ3dnTVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2QyVW9UQ3dnYjJVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JZSUQwZ1RDNXNaVzVuZEdnN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9PeUF0TFZnZ1BqMGdNRHNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwWlNBOUlGZ3NJRW9nUFNCWUlDMGdNVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCS0lEd2dNQ0FtSmlBb1NpQTlJRXd1YkdWdVozUm9JQzBnTVNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQlRaU0E5SURBc0lHMWxJRDBnYUNBcklHY2dLaUF5T3lCVFpTQThJRzFsT3lCVFpTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhsbElEMGdjU0FxSUZObExDQk9aU0E5SUhFZ0tpQW9VMlVnS3lBeEtTd2djV1VnUFNCdlpTQXJJR2xsSUNzZ2VXVXNJSEowSUQwZ2IyVWdLeUJLSUNzZ2VXVXNJRU1nUFNCdlpTQXJJRW9nS3lCT1pTd2dVeUE5SUc5bElDc2dhV1VnS3lCT1pUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1dXVW9jV1VzSUhKMExDQkRMQ0JUS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdSV1VvVEN3Z2IyVXNJRmdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdNdWNIVnphQ2hNS1N3Z1l5NXdkWE5vS0c5bEtTd2dZeTV3ZFhOb0tGZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJRlJsS0V3c0lHOWxMQ0JZS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGRDaE1LU3dnYVhRb2IyVXBMQ0JwZENoWUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwWlNBOUlHa3ViR1Z1WjNSb0lDOGdNeXdnU2lBOUlIWXVaMlZ1WlhKaGRHVlViM0JWVmlodUxDQnBMQ0JwWlNBdElETXNJR2xsSUMwZ01pd2dhV1VnTFNBeEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFTmxLRXBiTUYwcExDQkRaU2hLV3pGZEtTd2dRMlVvU2xzeVhTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdXV1VvVEN3Z2IyVXNJRmdzSUdsbEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkQ2hNS1N3Z2FYUW9iMlVwTENCcGRDaHBaU2tzSUdsMEtHOWxLU3dnYVhRb1dDa3NJR2wwS0dsbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JLSUQwZ2FTNXNaVzVuZEdnZ0x5QXpMQ0JUWlNBOUlIWXVaMlZ1WlhKaGRHVlRhV1JsVjJGc2JGVldLRzRzSUdrc0lFb2dMU0EyTENCS0lDMGdNeXdnU2lBdElESXNJRW9nTFNBeEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFTmxLRk5sV3pCZEtTd2dRMlVvVTJWYk1WMHBMQ0JEWlNoVFpWc3pYU2tzSUVObEtGTmxXekZkS1N3Z1EyVW9VMlZiTWwwcExDQkRaU2hUWlZzelhTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdhWFFvVENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTNXdkWE5vS0dOYlRDQXFJRE1nS3lBd1hTa3NJR2t1Y0hWemFDaGpXMHdnS2lBeklDc2dNVjBwTENCcExuQjFjMmdvWTF0TUlDb2dNeUFySURKZEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQkRaU2hNS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeUxuQjFjMmdvVEM1NEtTd2djaTV3ZFhOb0tFd3VlU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTV3WVhKaGJXVjBaWEp6SUQwZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z1pTNXdZWEpoYldWMFpYSnpLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSE4xY0dWeUxuUnZTbE5QVGlncExDQjBJRDBnZEdocGN5NXdZWEpoYldWMFpYSnpMbk5vWVhCbGN5d2diaUE5SUhSb2FYTXVjR0Z5WVcxbGRHVnljeTV2Y0hScGIyNXpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjRlQ2gwTENCdUxDQmxLVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJtY205dFNsTlBUaWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSElnUFNBd0xDQmhJRDBnWlM1emFHRndaWE11YkdWdVozUm9PeUJ5SUR3Z1lUc2djaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc4Z1BTQjBXMlV1YzJoaGNHVnpXM0pkWFRzS0lDQWdJQ0FnSUNBZ0lDQWdiaTV3ZFhOb0tHOHBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJR1V1YjNCMGFXOXVjeTVsZUhSeWRXUmxVR0YwYURzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hsTG05d2RHbHZibk11WlhoMGNuVmtaVkJoZEdnZ1BTQnVaWGNnWTJGYmFTNTBlWEJsWFNncExtWnliMjFLVTA5T0tHa3BLU3dnYm1WM0lITXhLRzRzSUdVdWIzQjBhVzl1Y3lrN0NpQWdJQ0I5Q24wc0lGOTRJRDBnZXdvZ0lDQWdaMlZ1WlhKaGRHVlViM0JWVmpvZ1puVnVZM1JwYjI0b2N6RXNJR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUdWYmRDQXFJRE5kTENCaElEMGdaVnQwSUNvZ015QXJJREZkTENCdklEMGdaVnR1SUNvZ00xMHNJR01nUFNCbFcyNGdLaUF6SUNzZ01WMHNJR3dnUFNCbFcya2dLaUF6WFN3Z2FDQTlJR1ZiYVNBcUlETWdLeUF4WFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnV3dvZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnV2loeUxDQmhLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRm9vYnl3Z1l5a3NDaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QmFLR3dzSUdncENpQWdJQ0FnSUNBZ1hUc0tJQ0FnSUgwc0NpQWdJQ0JuWlc1bGNtRjBaVk5wWkdWWFlXeHNWVlk2SUdaMWJtTjBhVzl1S0hNeExDQmxMQ0IwTENCdUxDQnBMQ0J5S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCbFczUWdLaUF6WFN3Z2J5QTlJR1ZiZENBcUlETWdLeUF4WFN3Z1l5QTlJR1ZiZENBcUlETWdLeUF5WFN3Z2JDQTlJR1ZiYmlBcUlETmRMQ0JvSUQwZ1pWdHVJQ29nTXlBcklERmRMQ0IxSUQwZ1pWdHVJQ29nTXlBcklESmRMQ0JrSUQwZ1pWdHBJQ29nTTEwc0lHWWdQU0JsVzJrZ0tpQXpJQ3NnTVYwc0lHMGdQU0JsVzJrZ0tpQXpJQ3NnTWwwc0lGOGdQU0JsVzNJZ0tpQXpYU3dnWnlBOUlHVmJjaUFxSURNZ0t5QXhYU3dnY0NBOUlHVmJjaUFxSURNZ0t5QXlYVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1aFluTW9ieUF0SUdncElEd2dUV0YwYUM1aFluTW9ZU0F0SUd3cElEOGdXd29nSUNBZ0lDQWdJQ0FnSUNCdVpYY2dXaWhoTENBeElDMGdZeWtzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJhS0d3c0lERWdMU0IxS1N3S0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUZvb1pDd2dNU0F0SUcwcExBb2dJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1dpaGZMQ0F4SUMwZ2NDa0tJQ0FnSUNBZ0lDQmRJRG9nV3dvZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnV2lodkxDQXhJQzBnWXlrc0NpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCYUtHZ3NJREVnTFNCMUtTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGb29aaXdnTVNBdElHMHBMQW9nSUNBZ0lDQWdJQ0FnSUNCdVpYY2dXaWhuTENBeElDMGdjQ2tLSUNBZ0lDQWdJQ0JkT3dvZ0lDQWdmUXA5T3dwbWRXNWpkR2x2YmlCNGVDaHpNU3dnWlN3Z2RDa2dld29nSUNBZ2FXWWdLSFF1YzJoaGNHVnpJRDBnVzEwc0lFRnljbUY1TG1selFYSnlZWGtvY3pFcEtTQm1iM0lvYkdWMElHNGdQU0F3TENCcElEMGdjekV1YkdWdVozUm9PeUJ1SUR3Z2FUc2diaXNyS1hzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUhNeFcyNWRPd29nSUNBZ0lDQWdJSFF1YzJoaGNHVnpMbkIxYzJnb2NpNTFkV2xrS1RzS0lDQWdJSDBLSUNBZ0lHVnNjMlVnZEM1emFHRndaWE11Y0hWemFDaHpNUzUxZFdsa0tUc0tJQ0FnSUhKbGRIVnliaUIwTG05d2RHbHZibk1nUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCbEtTd2daUzVsZUhSeWRXUmxVR0YwYUNBaFBUMGdkbTlwWkNBd0lDWW1JQ2gwTG05d2RHbHZibk11WlhoMGNuVmtaVkJoZEdnZ1BTQmxMbVY0ZEhKMVpHVlFZWFJvTG5SdlNsTlBUaWdwS1N3Z2REc0tmUXAyWVhJZ1pXTWdQU0JqYkdGemN5QnpNU0JsZUhSbGJtUnpJR1JwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhMQ0IwSUQwZ01DbDdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQW9NU0FySUUxaGRHZ3VjM0Z5ZENnMUtTa2dMeUF5TENCcElEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUMxdUxBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBdGJpd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUc0c0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSUc0c0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBdGJpd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xXNHNDaUFnSUNBZ0lDQWdJQ0FnSUc0c0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNCdUxBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBdGJpd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMXVMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4Q2lBZ0lDQWdJQ0FnWFN3Z2NpQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRFc0NpQWdJQ0FnSUNBZ0lDQWdJRFVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURVc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJRGNzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURjc0NpQWdJQ0FnSUNBZ0lDQWdJREV3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeE1Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEVXNDaUFnSUNBZ0lDQWdJQ0FnSURrc0NpQWdJQ0FnSUNBZ0lDQWdJRFVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXhMQW9nSUNBZ0lDQWdJQ0FnSUNBMExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lESXNDaUFnSUNBZ0lDQWdJQ0FnSURFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0EzTEFvZ0lDQWdJQ0FnSUNBZ0lDQTJMQW9nSUNBZ0lDQWdJQ0FnSUNBM0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQTRMQW9nSUNBZ0lDQWdJQ0FnSUNBekxBb2dJQ0FnSUNBZ0lDQWdJQ0E1TEFvZ0lDQWdJQ0FnSUNBZ0lDQTBMQW9nSUNBZ0lDQWdJQ0FnSUNBekxBb2dJQ0FnSUNBZ0lDQWdJQ0EwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJQ0FnSUNBekxBb2dJQ0FnSUNBZ0lDQWdJQ0F5TEFvZ0lDQWdJQ0FnSUNBZ0lDQTJMQW9nSUNBZ0lDQWdJQ0FnSUNBekxBb2dJQ0FnSUNBZ0lDQWdJQ0EyTEFvZ0lDQWdJQ0FnSUNBZ0lDQTRMQW9nSUNBZ0lDQWdJQ0FnSUNBekxBb2dJQ0FnSUNBZ0lDQWdJQ0E0TEFvZ0lDQWdJQ0FnSUNBZ0lDQTVMQW9nSUNBZ0lDQWdJQ0FnSUNBMExBb2dJQ0FnSUNBZ0lDQWdJQ0E1TEFvZ0lDQWdJQ0FnSUNBZ0lDQTFMQW9nSUNBZ0lDQWdJQ0FnSUNBeUxBb2dJQ0FnSUNBZ0lDQWdJQ0EwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ05pd0tJQ0FnSUNBZ0lDQWdJQ0FnTWl3S0lDQWdJQ0FnSUNBZ0lDQWdNVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEZ3NDaUFnSUNBZ0lDQWdJQ0FnSURZc0NpQWdJQ0FnSUNBZ0lDQWdJRGNzQ2lBZ0lDQWdJQ0FnSUNBZ0lEa3NDaUFnSUNBZ0lDQWdJQ0FnSURnc0NpQWdJQ0FnSUNBZ0lDQWdJREVLSUNBZ0lDQWdJQ0JkT3dvZ0lDQWdJQ0FnSUhOMWNHVnlLR2tzSUhJc0lHVXNJSFFwTENCMGFHbHpMblI1Y0dVZ1BTQWlTV052YzJGb1pXUnliMjVIWlc5dFpYUnllU0lzSUhSb2FYTXVjR0Z5WVcxbGRHVnljeUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbUZrYVhWek9pQmxMQW9nSUNBZ0lDQWdJQ0FnSUNCa1pYUmhhV3c2SUhRS0lDQWdJQ0FnSUNCOU93b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhNeEtHVXVjbUZrYVhWekxDQmxMbVJsZEdGcGJDazdDaUFnSUNCOUNuMHNJR2hoSUQwZ1kyeGhjM01nY3pFZ1pYaDBaVzVrY3lCa2FTQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnTVN3Z2RDQTlJREFwZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnV3dvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMweENpQWdJQ0FnSUNBZ1hTd2dhU0E5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01pd0tJQ0FnSUNBZ0lDQWdJQ0FnTkN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ05Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTXl3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ015d0tJQ0FnSUNBZ0lDQWdJQ0FnTlN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ05Td0tJQ0FnSUNBZ0lDQWdJQ0FnTWl3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01pd0tJQ0FnSUNBZ0lDQWdJQ0FnTlN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ05Td0tJQ0FnSUNBZ0lDQWdJQ0FnTXl3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ015d0tJQ0FnSUNBZ0lDQWdJQ0FnTkN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ05Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTWdvZ0lDQWdJQ0FnSUYwN0NpQWdJQ0FnSUNBZ2MzVndaWElvYml3Z2FTd2daU3dnZENrc0lIUm9hWE11ZEhsd1pTQTlJQ0pQWTNSaGFHVmtjbTl1UjJWdmJXVjBjbmtpTENCMGFHbHpMbkJoY21GdFpYUmxjbk1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpoWkdsMWN6b2daU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pHVjBZV2xzT2lCMENpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5Qm1jbTl0U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCek1TaGxMbkpoWkdsMWN5d2daUzVrWlhSaGFXd3BPd29nSUNBZ2ZRcDlMQ0IwWXlBOUlHTnNZWE56SUhNeElHVjRkR1Z1WkhNZ1IyVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUM0MUxDQjBJRDBnTVN3Z2JpQTlJRE15TENCcElEMGdNU3dnY2lBOUlEQXNJR0VnUFNCTllYUm9MbEJKSUNvZ01pbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tTd2dkR2hwY3k1MGVYQmxJRDBnSWxKcGJtZEhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXNXVaWEpTWVdScGRYTTZJR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHOTFkR1Z5VW1Ga2FYVnpPaUIwTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBhR1YwWVZObFoyMWxiblJ6T2lCdUxBb2dJQ0FnSUNBZ0lDQWdJQ0J3YUdsVFpXZHRaVzUwY3pvZ2FTd0tJQ0FnSUNBZ0lDQWdJQ0FnZEdobGRHRlRkR0Z5ZERvZ2Npd0tJQ0FnSUNBZ0lDQWdJQ0FnZEdobGRHRk1aVzVuZEdnNklHRUtJQ0FnSUNBZ0lDQjlMQ0J1SUQwZ1RXRjBhQzV0WVhnb015d2diaWtzSUdrZ1BTQk5ZWFJvTG0xaGVDZ3hMQ0JwS1RzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUZ0ZExDQmpJRDBnVzEwc0lHd2dQU0JiWFN3Z2FDQTlJRnRkTENCMUlEMGdaU3dnWkNBOUlDaDBJQzBnWlNrZ0x5QnBMQ0JtSUQwZ2JtVjNJRUVzSUcwZ1BTQnVaWGNnV2pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUY4Z1BTQXdPeUJmSUR3OUlHazdJRjhyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaeUE5SURBN0lHY2dQRDBnYmpzZ1p5c3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd0lEMGdjaUFySUdjZ0x5QnVJQ29nWVRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdZdWVDQTlJSFVnS2lCTllYUm9MbU52Y3lod0tTd2daaTU1SUQwZ2RTQXFJRTFoZEdndWMybHVLSEFwTENCakxuQjFjMmdvWmk1NExDQm1MbmtzSUdZdWVpa3NJR3d1Y0hWemFDZ3dMQ0F3TENBeEtTd2diUzU0SUQwZ0tHWXVlQ0F2SUhRZ0t5QXhLU0F2SURJc0lHMHVlU0E5SUNobUxua2dMeUIwSUNzZ01Ta2dMeUF5TENCb0xuQjFjMmdvYlM1NExDQnRMbmtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUhVZ0t6MGdaRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JmSUQwZ01Ec2dYeUE4SUdrN0lGOHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JuSUQwZ1h5QXFJQ2h1SUNzZ01TazdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY0NBOUlEQTdJSEFnUENCdU95QndLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIWWdQU0J3SUNzZ1p5d2dlQ0E5SUhZc0lIa2dQU0IySUNzZ2JpQXJJREVzSUdJZ1BTQjJJQ3NnYmlBcklESXNJSGNnUFNCMklDc2dNVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzh1Y0hWemFDaDRMQ0I1TENCM0tTd2dieTV3ZFhOb0tIa3NJR0lzSUhjcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwU1c1a1pYZ29ieWtzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJc0lHNWxkeUIyWlNoakxDQXpLU2tzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKdWIzSnRZV3dpTENCdVpYY2dkbVVvYkN3Z015a3BMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpZFhZaUxDQnVaWGNnZG1Vb2FDd2dNaWtwT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJR1V1Y0dGeVlXMWxkR1Z5Y3lrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2djekVvWlM1cGJtNWxjbEpoWkdsMWN5d2daUzV2ZFhSbGNsSmhaR2wxY3l3Z1pTNTBhR1YwWVZObFoyMWxiblJ6TENCbExuQm9hVk5sWjIxbGJuUnpMQ0JsTG5Sb1pYUmhVM1JoY25Rc0lHVXVkR2hsZEdGTVpXNW5kR2dwT3dvZ0lDQWdmUXA5TENCdVl5QTlJR05zWVhOeklITXhJR1Y0ZEdWdVpITWdSMlVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlHNWxkeUJHYmloYkNpQWdJQ0FnSUNBZ2JtVjNJRm9vTUN3Z0xqVXBMQW9nSUNBZ0lDQWdJRzVsZHlCYUtDMHVOU3dnTFM0MUtTd0tJQ0FnSUNBZ0lDQnVaWGNnV2lndU5Td2dMUzQxS1FvZ0lDQWdYU2tzSUhRZ1BTQXhNaWw3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NTBlWEJsSUQwZ0lsTm9ZWEJsUjJWdmJXVjBjbmtpTENCMGFHbHpMbkJoY21GdFpYUmxjbk1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJSE5vWVhCbGN6b2daU3dLSUNBZ0lDQWdJQ0FnSUNBZ1kzVnlkbVZUWldkdFpXNTBjem9nZEFvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCYlhTd2dhU0E5SUZ0ZExDQnlJRDBnVzEwc0lHRWdQU0JiWFN3Z2J5QTlJREFzSUdNZ1BTQXdPd29nSUNBZ0lDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1VwSUQwOVBTQWhNU2tnYkNobEtUc0tJQ0FnSUNBZ0lDQmxiSE5sSUdadmNpaHNaWFFnYUNBOUlEQTdJR2dnUENCbExteGxibWQwYURzZ2FDc3JLV3dvWlZ0b1hTa3NJSFJvYVhNdVlXUmtSM0p2ZFhBb2J5d2dZeXdnYUNrc0lHOGdLejBnWXl3Z1l5QTlJREE3Q2lBZ0lDQWdJQ0FnZEdocGN5NXpaWFJKYm1SbGVDaHVLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWl3Z2JtVjNJSFpsS0drc0lETXBLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW01dmNtMWhiQ0lzSUc1bGR5QjJaU2h5TENBektTa3NJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ0oxZGlJc0lHNWxkeUIyWlNoaExDQXlLU2s3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYkNob0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjFJRDBnYVM1c1pXNW5kR2dnTHlBekxDQmtJRDBnYUM1bGVIUnlZV04wVUc5cGJuUnpLSFFwTENCbUlEMGdaQzV6YUdGd1pTd2diU0E5SUdRdWFHOXNaWE03Q2lBZ0lDQWdJQ0FnSUNBZ0lIbHVMbWx6UTJ4dlkydFhhWE5sS0dZcElEMDlQU0FoTVNBbUppQW9aaUE5SUdZdWNtVjJaWEp6WlNncEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JuSUQwZ01Dd2djQ0E5SUcwdWJHVnVaM1JvT3lCbklEd2djRHNnWnlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IySUQwZ2JWdG5YVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGx1TG1selEyeHZZMnRYYVhObEtIWXBJRDA5UFNBaE1DQW1KaUFvYlZ0blhTQTlJSFl1Y21WMlpYSnpaU2dwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdYeUE5SUhsdUxuUnlhV0Z1WjNWc1lYUmxVMmhoY0dVb1ppd2diU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1p5QTlJREFzSUhBZ1BTQnRMbXhsYm1kMGFEc2daeUE4SUhBN0lHY3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RpQTlJRzFiWjEwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbUlEMGdaaTVqYjI1allYUW9kaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JuSUQwZ01Dd2djQ0E5SUdZdWJHVnVaM1JvT3lCbklEd2djRHNnWnlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IySUQwZ1psdG5YVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2t1Y0hWemFDaDJMbmdzSUhZdWVTd2dNQ2tzSUhJdWNIVnphQ2d3TENBd0xDQXhLU3dnWVM1d2RYTm9LSFl1ZUN3Z2RpNTVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2NnUFNBd0xDQndJRDBnWHk1c1pXNW5kR2c3SUdjZ1BDQndPeUJuS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFlnUFNCZlcyZGRMQ0I0SUQwZ2Rsc3dYU0FySUhVc0lIa2dQU0IyV3pGZElDc2dkU3dnWWlBOUlIWmJNbDBnS3lCMU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JpNXdkWE5vS0hnc0lIa3NJR0lwTENCaklDczlJRE03Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTV3WVhKaGJXVjBaWEp6SUQwZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z1pTNXdZWEpoYldWMFpYSnpLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSE4xY0dWeUxuUnZTbE5QVGlncExDQjBJRDBnZEdocGN5NXdZWEpoYldWMFpYSnpMbk5vWVhCbGN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RuZ29kQ3dnWlNrN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ1puSnZiVXBUVDA0b1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnVzEwN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcElEMGdNQ3dnY2lBOUlHVXVjMmhoY0dWekxteGxibWQwYURzZ2FTQThJSEk3SUdrckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnZEZ0bExuTm9ZWEJsYzF0cFhWMDdDaUFnSUNBZ0lDQWdJQ0FnSUc0dWNIVnphQ2hoS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QnpNU2h1TENCbExtTjFjblpsVTJWbmJXVnVkSE1wT3dvZ0lDQWdmUXA5T3dwbWRXNWpkR2x2YmlCMmVDaHpNU3dnWlNrZ2V3b2dJQ0FnYVdZZ0tHVXVjMmhoY0dWeklEMGdXMTBzSUVGeWNtRjVMbWx6UVhKeVlYa29jekVwS1NCbWIzSW9iR1YwSUhRZ1BTQXdMQ0J1SUQwZ2N6RXViR1Z1WjNSb095QjBJRHdnYmpzZ2RDc3JLWHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSE14VzNSZE93b2dJQ0FnSUNBZ0lHVXVjMmhoY0dWekxuQjFjMmdvYVM1MWRXbGtLVHNLSUNBZ0lIMEtJQ0FnSUdWc2MyVWdaUzV6YUdGd1pYTXVjSFZ6YUNoek1TNTFkV2xrS1RzS0lDQWdJSEpsZEhWeWJpQmxPd3A5Q25aaGNpQjFZU0E5SUdOc1lYTnpJSE14SUdWNGRHVnVaSE1nUjJVZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJREVzSUhRZ1BTQXpNaXdnYmlBOUlERTJMQ0JwSUQwZ01Dd2djaUE5SUUxaGRHZ3VVRWtnS2lBeUxDQmhJRDBnTUN3Z2J5QTlJRTFoZEdndVVFa3Bld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWRIbHdaU0E5SUNKVGNHaGxjbVZIWlc5dFpYUnllU0lzSUhSb2FYTXVjR0Z5WVcxbGRHVnljeUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbUZrYVhWek9pQmxMQW9nSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRk5sWjIxbGJuUnpPaUIwTEFvZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhSVFpXZHRaVzUwY3pvZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnY0docFUzUmhjblE2SUdrc0NpQWdJQ0FnSUNBZ0lDQWdJSEJvYVV4bGJtZDBhRG9nY2l3S0lDQWdJQ0FnSUNBZ0lDQWdkR2hsZEdGVGRHRnlkRG9nWVN3S0lDQWdJQ0FnSUNBZ0lDQWdkR2hsZEdGTVpXNW5kR2c2SUc4S0lDQWdJQ0FnSUNCOUxDQjBJRDBnVFdGMGFDNXRZWGdvTXl3Z1RXRjBhQzVtYkc5dmNpaDBLU2tzSUc0Z1BTQk5ZWFJvTG0xaGVDZ3lMQ0JOWVhSb0xtWnNiMjl5S0c0cEtUc0tJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlFMWhkR2d1YldsdUtHRWdLeUJ2TENCTllYUm9MbEJKS1N3Z2JDQTlJREFzSUdnZ1BTQmJYU3dnZFNBOUlHNWxkeUJCTENCa0lEMGdibVYzSUVFc0lHWWdQU0JiWFN3Z2JTQTlJRnRkTENCZklEMGdXMTBzSUdjZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSEFnUFNBd095QndJRHc5SUc0N0lIQXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IySUQwZ1cxMHNJSGdnUFNCd0lDOGdiaXdnZVNBOUlEQTdDaUFnSUNBZ0lDQWdJQ0FnSUhBZ1BUMDlJREFnSmlZZ1lTQTlQVDBnTUNBL0lIa2dQU0F1TlNBdklIUWdPaUJ3SUQwOVBTQnVJQ1ltSUdNZ1BUMDlJRTFoZEdndVVFa2dKaVlnS0hrZ1BTQXRMalVnTHlCMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JpSUQwZ01Ec2dZaUE4UFNCME95QmlLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIY2dQU0JpSUM4Z2REc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVXVlQ0E5SUMxbElDb2dUV0YwYUM1amIzTW9hU0FySUhjZ0tpQnlLU0FxSUUxaGRHZ3VjMmx1S0dFZ0t5QjRJQ29nYnlrc0lIVXVlU0E5SUdVZ0tpQk5ZWFJvTG1OdmN5aGhJQ3NnZUNBcUlHOHBMQ0IxTG5vZ1BTQmxJQ29nVFdGMGFDNXphVzRvYVNBcklIY2dLaUJ5S1NBcUlFMWhkR2d1YzJsdUtHRWdLeUI0SUNvZ2J5a3NJRzB1Y0hWemFDaDFMbmdzSUhVdWVTd2dkUzU2S1N3Z1pDNWpiM0I1S0hVcExtNXZjbTFoYkdsNlpTZ3BMQ0JmTG5CMWMyZ29aQzU0TENCa0xua3NJR1F1ZWlrc0lHY3VjSFZ6YUNoM0lDc2dlU3dnTVNBdElIZ3BMQ0IyTG5CMWMyZ29iQ3NyS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCb0xuQjFjMmdvZGlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2NDQTlJREE3SUhBZ1BDQnVPeUJ3S3lzcFptOXlLR3hsZENCMklEMGdNRHNnZGlBOElIUTdJSFlyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNElEMGdhRnR3WFZ0MklDc2dNVjBzSUhrZ1BTQm9XM0JkVzNaZExDQmlJRDBnYUZ0d0lDc2dNVjFiZGwwc0lIY2dQU0JvVzNBZ0t5QXhYVnQySUNzZ01WMDdDaUFnSUNBZ0lDQWdJQ0FnSUNod0lDRTlQU0F3SUh4OElHRWdQaUF3S1NBbUppQm1MbkIxYzJnb2VDd2dlU3dnZHlrc0lDaHdJQ0U5UFNCdUlDMGdNU0I4ZkNCaklEd2dUV0YwYUM1UVNTa2dKaVlnWmk1d2RYTm9LSGtzSUdJc0lIY3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRWx1WkdWNEtHWXBMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpY0c5emFYUnBiMjRpTENCdVpYY2dkbVVvYlN3Z015a3BMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpYm05eWJXRnNJaXdnYm1WM0lIWmxLRjhzSURNcEtTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JblYySWl3Z2JtVjNJSFpsS0djc0lESXBLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG5CaGNtRnRaWFJsY25NZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQmxMbkJoY21GdFpYUmxjbk1wTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJR1p5YjIxS1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lITXhLR1V1Y21Ga2FYVnpMQ0JsTG5kcFpIUm9VMlZuYldWdWRITXNJR1V1YUdWcFoyaDBVMlZuYldWdWRITXNJR1V1Y0docFUzUmhjblFzSUdVdWNHaHBUR1Z1WjNSb0xDQmxMblJvWlhSaFUzUmhjblFzSUdVdWRHaGxkR0ZNWlc1bmRHZ3BPd29nSUNBZ2ZRcDlMQ0JwWXlBOUlHTnNZWE56SUhNeElHVjRkR1Z1WkhNZ1pHa2dld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SURFc0lIUWdQU0F3S1hzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNUW9nSUNBZ0lDQWdJRjBzSUdrZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSURJc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lESXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURJc0NpQWdJQ0FnSUNBZ0lDQWdJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lERUtJQ0FnSUNBZ0lDQmRPd29nSUNBZ0lDQWdJSE4xY0dWeUtHNHNJR2tzSUdVc0lIUXBMQ0IwYUdsekxuUjVjR1VnUFNBaVZHVjBjbUZvWldSeWIyNUhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthWFZ6T2lCbExBb2dJQ0FnSUNBZ0lDQWdJQ0JrWlhSaGFXdzZJSFFLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUdaeWIyMUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSE14S0dVdWNtRmthWFZ6TENCbExtUmxkR0ZwYkNrN0NpQWdJQ0I5Q24wc0lITmpJRDBnWTJ4aGMzTWdjekVnWlhoMFpXNWtjeUJIWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdNU3dnZENBOUlDNDBMQ0J1SUQwZ01USXNJR2tnUFNBME9Dd2djaUE5SUUxaGRHZ3VVRWtnS2lBeUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG5SNWNHVWdQU0FpVkc5eWRYTkhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthWFZ6T2lCbExBb2dJQ0FnSUNBZ0lDQWdJQ0IwZFdKbE9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBZV3hUWldkdFpXNTBjem9nYml3S0lDQWdJQ0FnSUNBZ0lDQWdkSFZpZFd4aGNsTmxaMjFsYm5Sek9pQnBMQW9nSUNBZ0lDQWdJQ0FnSUNCaGNtTTZJSElLSUNBZ0lDQWdJQ0I5TENCdUlEMGdUV0YwYUM1bWJHOXZjaWh1S1N3Z2FTQTlJRTFoZEdndVpteHZiM0lvYVNrN0NpQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCYlhTd2dieUE5SUZ0ZExDQmpJRDBnVzEwc0lHd2dQU0JiWFN3Z2FDQTlJRzVsZHlCQkxDQjFJRDBnYm1WM0lFRXNJR1FnUFNCdVpYY2dRVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR1lnUFNBd095Qm1JRHc5SUc0N0lHWXJLeWxtYjNJb2JHVjBJRzBnUFNBd095QnRJRHc5SUdrN0lHMHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JmSUQwZ2JTQXZJR2tnS2lCeUxDQm5JRDBnWmlBdklHNGdLaUJOWVhSb0xsQkpJQ29nTWpzS0lDQWdJQ0FnSUNBZ0lDQWdkUzU0SUQwZ0tHVWdLeUIwSUNvZ1RXRjBhQzVqYjNNb1p5a3BJQ29nVFdGMGFDNWpiM01vWHlrc0lIVXVlU0E5SUNobElDc2dkQ0FxSUUxaGRHZ3VZMjl6S0djcEtTQXFJRTFoZEdndWMybHVLRjhwTENCMUxub2dQU0IwSUNvZ1RXRjBhQzV6YVc0b1p5a3NJRzh1Y0hWemFDaDFMbmdzSUhVdWVTd2dkUzU2S1N3Z2FDNTRJRDBnWlNBcUlFMWhkR2d1WTI5ektGOHBMQ0JvTG5rZ1BTQmxJQ29nVFdGMGFDNXphVzRvWHlrc0lHUXVjM1ZpVm1WamRHOXljeWgxTENCb0tTNXViM0p0WVd4cGVtVW9LU3dnWXk1d2RYTm9LR1F1ZUN3Z1pDNTVMQ0JrTG5vcExDQnNMbkIxYzJnb2JTQXZJR2twTENCc0xuQjFjMmdvWmlBdklHNHBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR1lnUFNBeE95Qm1JRHc5SUc0N0lHWXJLeWxtYjNJb2JHVjBJRzBnUFNBeE95QnRJRHc5SUdrN0lHMHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JmSUQwZ0tHa2dLeUF4S1NBcUlHWWdLeUJ0SUMwZ01Td2daeUE5SUNocElDc2dNU2tnS2lBb1ppQXRJREVwSUNzZ2JTQXRJREVzSUhBZ1BTQW9hU0FySURFcElDb2dLR1lnTFNBeEtTQXJJRzBzSUhZZ1BTQW9hU0FySURFcElDb2daaUFySUcwN0NpQWdJQ0FnSUNBZ0lDQWdJR0V1Y0hWemFDaGZMQ0JuTENCMktTd2dZUzV3ZFhOb0tHY3NJSEFzSUhZcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHVaR1Y0S0dFcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2ljRzl6YVhScGIyNGlMQ0J1WlhjZ2RtVW9ieXdnTXlrcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2libTl5YldGc0lpd2dibVYzSUhabEtHTXNJRE1wS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luVjJJaXdnYm1WM0lIWmxLR3dzSURJcEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbkJoY21GdFpYUmxjbk1nUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCbExuQmhjbUZ0WlhSbGNuTXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhNeEtHVXVjbUZrYVhWekxDQmxMblIxWW1Vc0lHVXVjbUZrYVdGc1UyVm5iV1Z1ZEhNc0lHVXVkSFZpZFd4aGNsTmxaMjFsYm5SekxDQmxMbUZ5WXlrN0NpQWdJQ0I5Q24wc0lISmpJRDBnWTJ4aGMzTWdjekVnWlhoMFpXNWtjeUJIWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdNU3dnZENBOUlDNDBMQ0J1SUQwZ05qUXNJR2tnUFNBNExDQnlJRDBnTWl3Z1lTQTlJRE1wZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2tzSUhSb2FYTXVkSGx3WlNBOUlDSlViM0oxYzB0dWIzUkhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthWFZ6T2lCbExBb2dJQ0FnSUNBZ0lDQWdJQ0IwZFdKbE9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCMGRXSjFiR0Z5VTJWbmJXVnVkSE02SUc0c0NpQWdJQ0FnSUNBZ0lDQWdJSEpoWkdsaGJGTmxaMjFsYm5Sek9pQnBMQW9nSUNBZ0lDQWdJQ0FnSUNCd09pQnlMQW9nSUNBZ0lDQWdJQ0FnSUNCeE9pQmhDaUFnSUNBZ0lDQWdmU3dnYmlBOUlFMWhkR2d1Wm14dmIzSW9iaWtzSUdrZ1BTQk5ZWFJvTG1ac2IyOXlLR2twT3dvZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnVzEwc0lHTWdQU0JiWFN3Z2JDQTlJRnRkTENCb0lEMGdXMTBzSUhVZ1BTQnVaWGNnUVN3Z1pDQTlJRzVsZHlCQkxDQm1JRDBnYm1WM0lFRXNJRzBnUFNCdVpYY2dRU3dnWHlBOUlHNWxkeUJCTENCbklEMGdibVYzSUVFc0lIQWdQU0J1WlhjZ1FUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIZ2dQU0F3T3lCNElEdzlJRzQ3SUNzcmVDbDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjVJRDBnZUNBdklHNGdLaUJ5SUNvZ1RXRjBhQzVRU1NBcUlESTdDaUFnSUNBZ0lDQWdJQ0FnSUhZb2VTd2djaXdnWVN3Z1pTd2daaWtzSUhZb2VTQXJJQzR3TVN3Z2Npd2dZU3dnWlN3Z2JTa3NJR2N1YzNWaVZtVmpkRzl5Y3lodExDQm1LU3dnY0M1aFpHUldaV04wYjNKektHMHNJR1lwTENCZkxtTnliM056Vm1WamRHOXljeWhuTENCd0tTd2djQzVqY205emMxWmxZM1J2Y25Nb1h5d2daeWtzSUY4dWJtOXliV0ZzYVhwbEtDa3NJSEF1Ym05eWJXRnNhWHBsS0NrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdZaUE5SURBN0lHSWdQRDBnYVRzZ0t5dGlLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCM0lEMGdZaUF2SUdrZ0tpQk5ZWFJvTGxCSklDb2dNaXdnVWlBOUlDMTBJQ29nVFdGMGFDNWpiM01vZHlrc0lFa2dQU0IwSUNvZ1RXRjBhQzV6YVc0b2R5azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFMbmdnUFNCbUxuZ2dLeUFvVWlBcUlIQXVlQ0FySUVrZ0tpQmZMbmdwTENCMUxua2dQU0JtTG5rZ0t5QW9VaUFxSUhBdWVTQXJJRWtnS2lCZkxua3BMQ0IxTG5vZ1BTQm1Mbm9nS3lBb1VpQXFJSEF1ZWlBcklFa2dLaUJmTG5vcExDQmpMbkIxYzJnb2RTNTRMQ0IxTG5rc0lIVXVlaWtzSUdRdWMzVmlWbVZqZEc5eWN5aDFMQ0JtS1M1dWIzSnRZV3hwZW1Vb0tTd2diQzV3ZFhOb0tHUXVlQ3dnWkM1NUxDQmtMbm9wTENCb0xuQjFjMmdvZUNBdklHNHBMQ0JvTG5CMWMyZ29ZaUF2SUdrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZUNBOUlERTdJSGdnUEQwZ2Jqc2dlQ3NyS1dadmNpaHNaWFFnZVNBOUlERTdJSGtnUEQwZ2FUc2dlU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdJZ1BTQW9hU0FySURFcElDb2dLSGdnTFNBeEtTQXJJQ2g1SUMwZ01Ta3NJSGNnUFNBb2FTQXJJREVwSUNvZ2VDQXJJQ2g1SUMwZ01Ta3NJRklnUFNBb2FTQXJJREVwSUNvZ2VDQXJJSGtzSUVrZ1BTQW9hU0FySURFcElDb2dLSGdnTFNBeEtTQXJJSGs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHOHVjSFZ6YUNoaUxDQjNMQ0JKS1N3Z2J5NXdkWE5vS0hjc0lGSXNJRWtwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVsdVpHVjRLRzhwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnZG1Vb1l5d2dNeWtwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWJtOXliV0ZzSWl3Z2JtVjNJSFpsS0d3c0lETXBLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5WMklpd2dibVYzSUhabEtHZ3NJRElwS1RzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCMktIZ3NJSGtzSUdJc0lIY3NJRklwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVrZ1BTQk5ZWFJvTG1OdmN5aDRLU3dnVFNBOUlFMWhkR2d1YzJsdUtIZ3BMQ0JVSUQwZ1lpQXZJSGtnS2lCNExDQlBJRDBnVFdGMGFDNWpiM01vVkNrN0NpQWdJQ0FnSUNBZ0lDQWdJRkl1ZUNBOUlIY2dLaUFvTWlBcklFOHBJQ29nTGpVZ0tpQkpMQ0JTTG5rZ1BTQjNJQ29nS0RJZ0t5QlBLU0FxSUUwZ0tpQXVOU3dnVWk1NklEMGdkeUFxSUUxaGRHZ3VjMmx1S0ZRcElDb2dMalU3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJR1V1Y0dGeVlXMWxkR1Z5Y3lrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2djekVvWlM1eVlXUnBkWE1zSUdVdWRIVmlaU3dnWlM1MGRXSjFiR0Z5VTJWbmJXVnVkSE1zSUdVdWNtRmthV0ZzVTJWbmJXVnVkSE1zSUdVdWNDd2daUzV4S1RzS0lDQWdJSDBLZlN3Z1lXTWdQU0JqYkdGemN5QnpNU0JsZUhSbGJtUnpJRWRsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnWVdFb2JtVjNJRUVvTFRFc0lDMHhMQ0F3S1N3Z2JtVjNJRUVvTFRFc0lERXNJREFwTENCdVpYY2dRU2d4TENBeExDQXdLU2tzSUhRZ1BTQTJOQ3dnYmlBOUlERXNJR2tnUFNBNExDQnlJRDBnSVRFcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11ZEhsd1pTQTlJQ0pVZFdKbFIyVnZiV1YwY25raUxDQjBhR2x6TG5CaGNtRnRaWFJsY25NZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhCaGRHZzZJR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUjFZblZzWVhKVFpXZHRaVzUwY3pvZ2RDd0tJQ0FnSUNBZ0lDQWdJQ0FnY21Ga2FYVnpPaUJ1TEFvZ0lDQWdJQ0FnSUNBZ0lDQnlZV1JwWVd4VFpXZHRaVzUwY3pvZ2FTd0tJQ0FnSUNBZ0lDQWdJQ0FnWTJ4dmMyVmtPaUJ5Q2lBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUdVdVkyOXRjSFYwWlVaeVpXNWxkRVp5WVcxbGN5aDBMQ0J5S1RzS0lDQWdJQ0FnSUNCMGFHbHpMblJoYm1kbGJuUnpJRDBnWVM1MFlXNW5aVzUwY3l3Z2RHaHBjeTV1YjNKdFlXeHpJRDBnWVM1dWIzSnRZV3h6TENCMGFHbHpMbUpwYm05eWJXRnNjeUE5SUdFdVltbHViM0p0WVd4ek93b2dJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2JtVjNJRUVzSUdNZ1BTQnVaWGNnUVN3Z2JDQTlJRzVsZHlCYUxDQm9JRDBnYm1WM0lFRXNJSFVnUFNCYlhTd2daQ0E5SUZ0ZExDQm1JRDBnVzEwc0lHMGdQU0JiWFRzS0lDQWdJQ0FnSUNCZktDa3NJSFJvYVhNdWMyVjBTVzVrWlhnb2JTa3NJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QjJaU2gxTENBektTa3NJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ0p1YjNKdFlXd2lMQ0J1WlhjZ2RtVW9aQ3dnTXlrcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2lkWFlpTENCdVpYY2dkbVVvWml3Z01pa3BPd29nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJRjhvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlQ0E5SURBN0lIZ2dQQ0IwT3lCNEt5c3BaeWg0S1RzS0lDQWdJQ0FnSUNBZ0lDQWdaeWh5SUQwOVBTQWhNU0EvSUhRZ09pQXdLU3dnZGlncExDQndLQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdjb2VDa2dld29nSUNBZ0lDQWdJQ0FnSUNCb0lEMGdaUzVuWlhSUWIybHVkRUYwS0hnZ0x5QjBMQ0JvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhrZ1BTQmhMbTV2Y20xaGJITmJlRjBzSUdJZ1BTQmhMbUpwYm05eWJXRnNjMXQ0WFRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQjNJRDBnTURzZ2R5QThQU0JwT3lCM0t5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZJZ1BTQjNJQzhnYVNBcUlFMWhkR2d1VUVrZ0tpQXlMQ0JKSUQwZ1RXRjBhQzV6YVc0b1Vpa3NJRTBnUFNBdFRXRjBhQzVqYjNNb1VpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpMbmdnUFNCTklDb2dlUzU0SUNzZ1NTQXFJR0l1ZUN3Z1l5NTVJRDBnVFNBcUlIa3VlU0FySUVrZ0tpQmlMbmtzSUdNdWVpQTlJRTBnS2lCNUxub2dLeUJKSUNvZ1lpNTZMQ0JqTG01dmNtMWhiR2w2WlNncExDQmtMbkIxYzJnb1l5NTRMQ0JqTG5rc0lHTXVlaWtzSUc4dWVDQTlJR2d1ZUNBcklHNGdLaUJqTG5nc0lHOHVlU0E5SUdndWVTQXJJRzRnS2lCakxua3NJRzh1ZWlBOUlHZ3VlaUFySUc0Z0tpQmpMbm9zSUhVdWNIVnphQ2h2TG5nc0lHOHVlU3dnYnk1NktUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCd0tDa2dld29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhnZ1BTQXhPeUI0SUR3OUlIUTdJSGdyS3lsbWIzSW9iR1YwSUhrZ1BTQXhPeUI1SUR3OUlHazdJSGtyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZaUE5SUNocElDc2dNU2tnS2lBb2VDQXRJREVwSUNzZ0tIa2dMU0F4S1N3Z2R5QTlJQ2hwSUNzZ01Ta2dLaUI0SUNzZ0tIa2dMU0F4S1N3Z1VpQTlJQ2hwSUNzZ01Ta2dLaUI0SUNzZ2VTd2dTU0E5SUNocElDc2dNU2tnS2lBb2VDQXRJREVwSUNzZ2VUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMHVjSFZ6YUNoaUxDQjNMQ0JKS1N3Z2JTNXdkWE5vS0hjc0lGSXNJRWtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSFlvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlQ0E5SURBN0lIZ2dQRDBnZERzZ2VDc3JLV1p2Y2loc1pYUWdlU0E5SURBN0lIa2dQRDBnYVRzZ2VTc3JLV3d1ZUNBOUlIZ2dMeUIwTENCc0xua2dQU0I1SUM4Z2FTd2daaTV3ZFhOb0tHd3VlQ3dnYkM1NUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTV3WVhKaGJXVjBaWEp6SUQwZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z1pTNXdZWEpoYldWMFpYSnpLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSE4xY0dWeUxuUnZTbE5QVGlncE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExuQmhkR2dnUFNCMGFHbHpMbkJoY21GdFpYUmxjbk11Y0dGMGFDNTBiMHBUVDA0b0tTd2daVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJtY205dFNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QnpNU2h1WlhjZ1kyRmJaUzV3WVhSb0xuUjVjR1ZkS0NrdVpuSnZiVXBUVDA0b1pTNXdZWFJvS1N3Z1pTNTBkV0oxYkdGeVUyVm5iV1Z1ZEhNc0lHVXVjbUZrYVhWekxDQmxMbkpoWkdsaGJGTmxaMjFsYm5SekxDQmxMbU5zYjNObFpDazdDaUFnSUNCOUNuMHNJRzlqSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJIWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdiblZzYkNsN0NpQWdJQ0FnSUNBZ2FXWWdLSE4xY0dWeUtDa3NJSFJvYVhNdWRIbHdaU0E5SUNKWGFYSmxabkpoYldWSFpXOXRaWFJ5ZVNJc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnWjJWdmJXVjBjbms2SUdVS0lDQWdJQ0FnSUNCOUxDQmxJQ0U5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1cxMHNJRzRnUFNCdVpYY2dVMlYwTENCcElEMGdibVYzSUVFc0lISWdQU0J1WlhjZ1FUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVXVhVzVrWlhnZ0lUMDlJRzUxYkd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ1pTNWhkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVMQ0J2SUQwZ1pTNXBibVJsZUN3Z1l5QTlJR1V1WjNKdmRYQnpPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZeTVzWlc1bmRHZ2dQVDA5SURBZ0ppWWdLR01nUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZERvZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOTFiblE2SUc4dVkyOTFiblFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoZEdWeWFXRnNTVzVrWlhnNklEQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYkNBOUlEQXNJR2dnUFNCakxteGxibWQwYURzZ2JDQThJR2c3SUNzcmJDbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIVWdQU0JqVzJ4ZExDQmtJRDBnZFM1emRHRnlkQ3dnWmlBOUlIVXVZMjkxYm5RN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnRJRDBnWkN3Z1h5QTlJR1FnS3lCbU95QnRJRHdnWHpzZ2JTQXJQU0F6S1dadmNpaHNaWFFnWnlBOUlEQTdJR2NnUENBek95Qm5LeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NDQTlJRzh1WjJWMFdDaHRJQ3NnWnlrc0lIWWdQU0J2TG1kbGRGZ29iU0FySUNobklDc2dNU2tnSlNBektUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLR0VzSUhBcExDQnlMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvWVN3Z2Rpa3NJSE4xS0drc0lISXNJRzRwSUQwOVBTQWhNQ0FtSmlBb2RDNXdkWE5vS0drdWVDd2dhUzU1TENCcExub3BMQ0IwTG5CMWMyZ29jaTU0TENCeUxua3NJSEl1ZWlrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnWlM1aGRIUnlhV0oxZEdWekxuQnZjMmwwYVc5dU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdklEMGdNQ3dnWXlBOUlHRXVZMjkxYm5RZ0x5QXpPeUJ2SUR3Z1l6c2dieXNyS1dadmNpaHNaWFFnYkNBOUlEQTdJR3dnUENBek95QnNLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvSUQwZ015QXFJRzhnS3lCc0xDQjFJRDBnTXlBcUlHOGdLeUFvYkNBcklERXBJQ1VnTXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvWVN3Z2FDa3NJSEl1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoaExDQjFLU3dnYzNVb2FTd2djaXdnYmlrZ1BUMDlJQ0V3SUNZbUlDaDBMbkIxYzJnb2FTNTRMQ0JwTG5rc0lHa3VlaWtzSUhRdWNIVnphQ2h5TG5nc0lISXVlU3dnY2k1NktTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaXdnYm1WM0lIWmxLSFFzSURNcEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTV3WVhKaGJXVjBaWEp6SUQwZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z1pTNXdZWEpoYldWMFpYSnpLU3dnZEdocGN6c0tJQ0FnSUgwS2ZUc0tablZ1WTNScGIyNGdjM1VvY3pFc0lHVXNJSFFwSUhzS0lDQWdJR3hsZENCdUlEMGdZQ1I3Y3pFdWVIMHNKSHR6TVM1NWZTd2tlM014TG5wOUxTUjdaUzU0ZlN3a2UyVXVlWDBzSkh0bExucDlZQ3dnYVNBOUlHQWtlMlV1ZUgwc0pIdGxMbmw5TENSN1pTNTZmUzBrZTNNeExuaDlMQ1I3Y3pFdWVYMHNKSHR6TVM1NmZXQTdDaUFnSUNCeVpYUjFjbTRnZEM1b1lYTW9iaWtnUFQwOUlDRXdJSHg4SUhRdWFHRnpLR2twSUQwOVBTQWhNQ0EvSUNFeElEb2dLSFF1WVdSa0tHNHBMQ0IwTG1Ga1pDaHBLU3dnSVRBcE93cDlDblpoY2lCeWRTQTlJRTlpYW1WamRDNW1jbVZsZW1Vb2V3b2dJQ0FnWDE5d2NtOTBiMTlmT2lCdWRXeHNMQW9nSUNBZ1FtOTRSMlZ2YldWMGNuazZJRXBwTEFvZ0lDQWdRMkZ3YzNWc1pVZGxiMjFsZEhKNU9pQnhieXdLSUNBZ0lFTnBjbU5zWlVkbGIyMWxkSEo1T2lCWmJ5d0tJQ0FnSUVOdmJtVkhaVzl0WlhSeWVUb2dXbThzQ2lBZ0lDQkRlV3hwYm1SbGNrZGxiMjFsZEhKNU9pQk9jeXdLSUNBZ0lFUnZaR1ZqWVdobFpISnZia2RsYjIxbGRISjVPaUJLYnl3S0lDQWdJRVZrWjJWelIyVnZiV1YwY25rNklDUnZMQW9nSUNBZ1JYaDBjblZrWlVkbGIyMWxkSEo1T2lCcWJ5d0tJQ0FnSUVsamIzTmhhR1ZrY205dVIyVnZiV1YwY25rNklHVmpMQW9nSUNBZ1RHRjBhR1ZIWlc5dFpYUnllVG9nYkdFc0NpQWdJQ0JQWTNSaGFHVmtjbTl1UjJWdmJXVjBjbms2SUdoaExBb2dJQ0FnVUd4aGJtVkhaVzl0WlhSeWVUb2dKSElzQ2lBZ0lDQlFiMng1YUdWa2NtOXVSMlZ2YldWMGNuazZJR1JwTEFvZ0lDQWdVbWx1WjBkbGIyMWxkSEo1T2lCMFl5d0tJQ0FnSUZOb1lYQmxSMlZ2YldWMGNuazZJRzVqTEFvZ0lDQWdVM0JvWlhKbFIyVnZiV1YwY25rNklIVmhMQW9nSUNBZ1ZHVjBjbUZvWldSeWIyNUhaVzl0WlhSeWVUb2dhV01zQ2lBZ0lDQlViM0oxYzBkbGIyMWxkSEo1T2lCell5d0tJQ0FnSUZSdmNuVnpTMjV2ZEVkbGIyMWxkSEo1T2lCeVl5d0tJQ0FnSUZSMVltVkhaVzl0WlhSeWVUb2dZV01zQ2lBZ0lDQlhhWEpsWm5KaGJXVkhaVzl0WlhSeWVUb2diMk1LZlNrc0lHTmpJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmlkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6VTJoaFpHOTNUV0YwWlhKcFlXd2dQU0FoTUN3Z2RHaHBjeTUwZVhCbElEMGdJbE5vWVdSdmQwMWhkR1Z5YVdGc0lpd2dkR2hwY3k1amIyeHZjaUE5SUc1bGR5QndaU2d3S1N3Z2RHaHBjeTUwY21GdWMzQmhjbVZ1ZENBOUlDRXdMQ0IwYUdsekxtWnZaeUE5SUNFd0xDQjBhR2x6TG5ObGRGWmhiSFZsY3lobEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbU52Ykc5eUxtTnZjSGtvWlM1amIyeHZjaWtzSUhSb2FYTXVabTluSUQwZ1pTNW1iMmNzSUhSb2FYTTdDaUFnSUNCOUNuMHNJR3hqSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJxZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobEtTd2dkR2hwY3k1cGMxSmhkMU5vWVdSbGNrMWhkR1Z5YVdGc0lEMGdJVEFzSUhSb2FYTXVkSGx3WlNBOUlDSlNZWGRUYUdGa1pYSk5ZWFJsY21saGJDSTdDaUFnSUNCOUNuMHNJR1JoSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJpZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG1selRXVnphRk4wWVc1a1lYSmtUV0YwWlhKcFlXd2dQU0FoTUN3Z2RHaHBjeTVrWldacGJtVnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQlRWRUZPUkVGU1JEb2dJaUlLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMblI1Y0dVZ1BTQWlUV1Z6YUZOMFlXNWtZWEprVFdGMFpYSnBZV3dpTENCMGFHbHpMbU52Ykc5eUlEMGdibVYzSUhCbEtERTJOemMzTWpFMUtTd2dkR2hwY3k1eWIzVm5hRzVsYzNNZ1BTQXhMQ0IwYUdsekxtMWxkR0ZzYm1WemN5QTlJREFzSUhSb2FYTXViV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NXNhV2RvZEUxaGNDQTlJRzUxYkd3c0lIUm9hWE11YkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGtnUFNBeExDQjBhR2x6TG1GdlRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1aGIwMWhjRWx1ZEdWdWMybDBlU0E5SURFc0lIUm9hWE11WlcxcGMzTnBkbVVnUFNCdVpYY2djR1VvTUNrc0lIUm9hWE11WlcxcGMzTnBkbVZKYm5SbGJuTnBkSGtnUFNBeExDQjBhR2x6TG1WdGFYTnphWFpsVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVpZFcxd1RXRndJRDBnYm5Wc2JDd2dkR2hwY3k1aWRXMXdVMk5oYkdVZ1BTQXhMQ0IwYUdsekxtNXZjbTFoYkUxaGNDQTlJRzUxYkd3c0lIUm9hWE11Ym05eWJXRnNUV0Z3Vkhsd1pTQTlJRzFwTENCMGFHbHpMbTV2Y20xaGJGTmpZV3hsSUQwZ2JtVjNJRm9vTVN3Z01Ta3NJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJUWTJGc1pTQTlJREVzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QTlJREFzSUhSb2FYTXVjbTkxWjJodVpYTnpUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NXRaWFJoYkc1bGMzTk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtRnNjR2hoVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVsYm5aTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG1WdWRrMWhjRWx1ZEdWdWMybDBlU0E5SURFc0lIUm9hWE11ZDJseVpXWnlZVzFsSUQwZ0lURXNJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0lEMGdNU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsWTJGd0lEMGdJbkp2ZFc1a0lpd2dkR2hwY3k1M2FYSmxabkpoYldWTWFXNWxhbTlwYmlBOUlDSnliM1Z1WkNJc0lIUm9hWE11Wm14aGRGTm9ZV1JwYm1jZ1BTQWhNU3dnZEdocGN5NW1iMmNnUFNBaE1Dd2dkR2hwY3k1elpYUldZV3gxWlhNb1pTazdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTVrWldacGJtVnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQlRWRUZPUkVGU1JEb2dJaUlLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbU52Ykc5eUxtTnZjSGtvWlM1amIyeHZjaWtzSUhSb2FYTXVjbTkxWjJodVpYTnpJRDBnWlM1eWIzVm5hRzVsYzNNc0lIUm9hWE11YldWMFlXeHVaWE56SUQwZ1pTNXRaWFJoYkc1bGMzTXNJSFJvYVhNdWJXRndJRDBnWlM1dFlYQXNJSFJvYVhNdWJHbG5hSFJOWVhBZ1BTQmxMbXhwWjJoMFRXRndMQ0IwYUdsekxteHBaMmgwVFdGd1NXNTBaVzV6YVhSNUlEMGdaUzVzYVdkb2RFMWhjRWx1ZEdWdWMybDBlU3dnZEdocGN5NWhiMDFoY0NBOUlHVXVZVzlOWVhBc0lIUm9hWE11WVc5TllYQkpiblJsYm5OcGRIa2dQU0JsTG1GdlRXRndTVzUwWlc1emFYUjVMQ0IwYUdsekxtVnRhWE56YVhabExtTnZjSGtvWlM1bGJXbHpjMmwyWlNrc0lIUm9hWE11WlcxcGMzTnBkbVZOWVhBZ1BTQmxMbVZ0YVhOemFYWmxUV0Z3TENCMGFHbHpMbVZ0YVhOemFYWmxTVzUwWlc1emFYUjVJRDBnWlM1bGJXbHpjMmwyWlVsdWRHVnVjMmwwZVN3Z2RHaHBjeTVpZFcxd1RXRndJRDBnWlM1aWRXMXdUV0Z3TENCMGFHbHpMbUoxYlhCVFkyRnNaU0E5SUdVdVluVnRjRk5qWVd4bExDQjBhR2x6TG01dmNtMWhiRTFoY0NBOUlHVXVibTl5YldGc1RXRndMQ0IwYUdsekxtNXZjbTFoYkUxaGNGUjVjR1VnUFNCbExtNXZjbTFoYkUxaGNGUjVjR1VzSUhSb2FYTXVibTl5YldGc1UyTmhiR1V1WTI5d2VTaGxMbTV2Y20xaGJGTmpZV3hsS1N3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5STllYQWdQU0JsTG1ScGMzQnNZV05sYldWdWRFMWhjQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJUWTJGc1pTQTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeXdnZEdocGN5NXliM1ZuYUc1bGMzTk5ZWEFnUFNCbExuSnZkV2RvYm1WemMwMWhjQ3dnZEdocGN5NXRaWFJoYkc1bGMzTk5ZWEFnUFNCbExtMWxkR0ZzYm1WemMwMWhjQ3dnZEdocGN5NWhiSEJvWVUxaGNDQTlJR1V1WVd4d2FHRk5ZWEFzSUhSb2FYTXVaVzUyVFdGd0lEMGdaUzVsYm5aTllYQXNJSFJvYVhNdVpXNTJUV0Z3U1c1MFpXNXphWFI1SUQwZ1pTNWxiblpOWVhCSmJuUmxibk5wZEhrc0lIUm9hWE11ZDJseVpXWnlZVzFsSUQwZ1pTNTNhWEpsWm5KaGJXVXNJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0lEMGdaUzUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dzSUhSb2FYTXVkMmx5WldaeVlXMWxUR2x1WldOaGNDQTlJR1V1ZDJseVpXWnlZVzFsVEdsdVpXTmhjQ3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsYW05cGJpQTlJR1V1ZDJseVpXWnlZVzFsVEdsdVpXcHZhVzRzSUhSb2FYTXVabXhoZEZOb1lXUnBibWNnUFNCbExtWnNZWFJUYUdGa2FXNW5MQ0IwYUdsekxtWnZaeUE5SUdVdVptOW5MQ0IwYUdsek93b2dJQ0FnZlFwOUxDQm9ZeUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdaR0VnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1N3Z2RHaHBjeTVwYzAxbGMyaFFhSGx6YVdOaGJFMWhkR1Z5YVdGc0lEMGdJVEFzSUhSb2FYTXVaR1ZtYVc1bGN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1UxUkJUa1JCVWtRNklDSWlMQW9nSUNBZ0lDQWdJQ0FnSUNCUVNGbFRTVU5CVERvZ0lpSUtJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuUjVjR1VnUFNBaVRXVnphRkJvZVhOcFkyRnNUV0YwWlhKcFlXd2lMQ0IwYUdsekxtRnVhWE52ZEhKdmNIbFNiM1JoZEdsdmJpQTlJREFzSUhSb2FYTXVZVzVwYzI5MGNtOXdlVTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVZMnhsWVhKamIyRjBUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTWdQU0F3TENCMGFHbHpMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjMDFoY0NBOUlHNTFiR3dzSUhSb2FYTXVZMnhsWVhKamIyRjBUbTl5YldGc1UyTmhiR1VnUFNCdVpYY2dXaWd4TENBeEtTd2dkR2hwY3k1amJHVmhjbU52WVhST2IzSnRZV3hOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbWx2Y2lBOUlERXVOU3dnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIUm9hWE1zSUNKeVpXWnNaV04wYVhacGRIa2lMQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTNRb01pNDFJQ29nS0hSb2FYTXVhVzl5SUMwZ01Ta2dMeUFvZEdocGN5NXBiM0lnS3lBeEtTd2dNQ3dnTVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRvZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYjNJZ1BTQW9NU0FySUM0MElDb2dkQ2tnTHlBb01TQXRJQzQwSUNvZ2RDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUtTd2dkR2hwY3k1cGNtbGtaWE5qWlc1alpVMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdWFYSnBaR1Z6WTJWdVkyVkpUMUlnUFNBeExqTXNJSFJvYVhNdWFYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTlNZVzVuWlNBOUlGc0tJQ0FnSUNBZ0lDQWdJQ0FnTVRBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0EwTURBS0lDQWdJQ0FnSUNCZExDQjBhR2x6TG1seWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOelRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1emFHVmxia052Ykc5eUlEMGdibVYzSUhCbEtEQXBMQ0IwYUdsekxuTm9aV1Z1UTI5c2IzSk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxuTm9aV1Z1VW05MVoyaHVaWE56SUQwZ01Td2dkR2hwY3k1emFHVmxibEp2ZFdkb2JtVnpjMDFoY0NBOUlHNTFiR3dzSUhSb2FYTXVkSEpoYm5OdGFYTnphVzl1VFdGd0lEMGdiblZzYkN3Z2RHaHBjeTUwYUdsamEyNWxjM01nUFNBd0xDQjBhR2x6TG5Sb2FXTnJibVZ6YzAxaGNDQTlJRzUxYkd3c0lIUm9hWE11WVhSMFpXNTFZWFJwYjI1RWFYTjBZVzVqWlNBOUlERWdMeUF3TENCMGFHbHpMbUYwZEdWdWRXRjBhVzl1UTI5c2IzSWdQU0J1WlhjZ2NHVW9NU3dnTVN3Z01Ta3NJSFJvYVhNdWMzQmxZM1ZzWVhKSmJuUmxibk5wZEhrZ1BTQXhMQ0IwYUdsekxuTndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1emNHVmpkV3hoY2tOdmJHOXlJRDBnYm1WM0lIQmxLREVzSURFc0lERXBMQ0IwYUdsekxuTndaV04xYkdGeVEyOXNiM0pOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbDloYm1semIzUnliM0I1SUQwZ01Dd2dkR2hwY3k1ZlkyeGxZWEpqYjJGMElEMGdNQ3dnZEdocGN5NWZhWEpwWkdWelkyVnVZMlVnUFNBd0xDQjBhR2x6TGw5emFHVmxiaUE5SURBc0lIUm9hWE11WDNSeVlXNXpiV2x6YzJsdmJpQTlJREFzSUhSb2FYTXVjMlYwVm1Gc2RXVnpLR1VwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBJR0Z1YVhOdmRISnZjSGtvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMkZ1YVhOdmRISnZjSGs3Q2lBZ0lDQjlDaUFnSUNCelpYUWdZVzVwYzI5MGNtOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmWVc1cGMyOTBjbTl3ZVNBK0lEQWdJVDBnWlNBK0lEQWdKaVlnZEdocGN5NTJaWEp6YVc5dUt5c3NJSFJvYVhNdVgyRnVhWE52ZEhKdmNIa2dQU0JsT3dvZ0lDQWdmUW9nSUNBZ1oyVjBJR05zWldGeVkyOWhkQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZMnhsWVhKamIyRjBPd29nSUNBZ2ZRb2dJQ0FnYzJWMElHTnNaV0Z5WTI5aGRDaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZZMnhsWVhKamIyRjBJRDRnTUNBaFBTQmxJRDRnTUNBbUppQjBhR2x6TG5abGNuTnBiMjRyS3l3Z2RHaHBjeTVmWTJ4bFlYSmpiMkYwSUQwZ1pUc0tJQ0FnSUgwS0lDQWdJR2RsZENCcGNtbGtaWE5qWlc1alpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFYSnBaR1Z6WTJWdVkyVTdDaUFnSUNCOUNpQWdJQ0J6WlhRZ2FYSnBaR1Z6WTJWdVkyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVYMmx5YVdSbGMyTmxibU5sSUQ0Z01DQWhQU0JsSUQ0Z01DQW1KaUIwYUdsekxuWmxjbk5wYjI0ckt5d2dkR2hwY3k1ZmFYSnBaR1Z6WTJWdVkyVWdQU0JsT3dvZ0lDQWdmUW9nSUNBZ1oyVjBJSE5vWldWdUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5emFHVmxianNLSUNBZ0lIMEtJQ0FnSUhObGRDQnphR1ZsYmlobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmMyaGxaVzRnUGlBd0lDRTlJR1VnUGlBd0lDWW1JSFJvYVhNdWRtVnljMmx2YmlzckxDQjBhR2x6TGw5emFHVmxiaUE5SUdVN0NpQWdJQ0I5Q2lBZ0lDQm5aWFFnZEhKaGJuTnRhWE56YVc5dUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5MGNtRnVjMjFwYzNOcGIyNDdDaUFnSUNCOUNpQWdJQ0J6WlhRZ2RISmhibk50YVhOemFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbDkwY21GdWMyMXBjM05wYjI0Z1BpQXdJQ0U5SUdVZ1BpQXdJQ1ltSUhSb2FYTXVkbVZ5YzJsdmJpc3JMQ0IwYUdsekxsOTBjbUZ1YzIxcGMzTnBiMjRnUFNCbE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVaR1ZtYVc1bGN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1UxUkJUa1JCVWtRNklDSWlMQW9nSUNBZ0lDQWdJQ0FnSUNCUVNGbFRTVU5CVERvZ0lpSUtJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxtRnVhWE52ZEhKdmNIa2dQU0JsTG1GdWFYTnZkSEp2Y0hrc0lIUm9hWE11WVc1cGMyOTBjbTl3ZVZKdmRHRjBhVzl1SUQwZ1pTNWhibWx6YjNSeWIzQjVVbTkwWVhScGIyNHNJSFJvYVhNdVlXNXBjMjkwY205d2VVMWhjQ0E5SUdVdVlXNXBjMjkwY205d2VVMWhjQ3dnZEdocGN5NWpiR1ZoY21OdllYUWdQU0JsTG1Oc1pXRnlZMjloZEN3Z2RHaHBjeTVqYkdWaGNtTnZZWFJOWVhBZ1BTQmxMbU5zWldGeVkyOWhkRTFoY0N3Z2RHaHBjeTVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM01nUFNCbExtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemN5d2dkR2hwY3k1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNOTllYQWdQU0JsTG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6YzAxaGNDd2dkR2hwY3k1amJHVmhjbU52WVhST2IzSnRZV3hOWVhBZ1BTQmxMbU5zWldGeVkyOWhkRTV2Y20xaGJFMWhjQ3dnZEdocGN5NWpiR1ZoY21OdllYUk9iM0p0WVd4VFkyRnNaUzVqYjNCNUtHVXVZMnhsWVhKamIyRjBUbTl5YldGc1UyTmhiR1VwTENCMGFHbHpMbWx2Y2lBOUlHVXVhVzl5TENCMGFHbHpMbWx5YVdSbGMyTmxibU5sSUQwZ1pTNXBjbWxrWlhOalpXNWpaU3dnZEdocGN5NXBjbWxrWlhOalpXNWpaVTFoY0NBOUlHVXVhWEpwWkdWelkyVnVZMlZOWVhBc0lIUm9hWE11YVhKcFpHVnpZMlZ1WTJWSlQxSWdQU0JsTG1seWFXUmxjMk5sYm1ObFNVOVNMQ0IwYUdsekxtbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpVbUZ1WjJVZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSUM0dUxtVXVhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05TWVc1blpRb2dJQ0FnSUNBZ0lGMHNJSFJvYVhNdWFYSnBaR1Z6WTJWdVkyVlVhR2xqYTI1bGMzTk5ZWEFnUFNCbExtbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpUV0Z3TENCMGFHbHpMbk5vWldWdUlEMGdaUzV6YUdWbGJpd2dkR2hwY3k1emFHVmxia052Ykc5eUxtTnZjSGtvWlM1emFHVmxia052Ykc5eUtTd2dkR2hwY3k1emFHVmxia052Ykc5eVRXRndJRDBnWlM1emFHVmxia052Ykc5eVRXRndMQ0IwYUdsekxuTm9aV1Z1VW05MVoyaHVaWE56SUQwZ1pTNXphR1ZsYmxKdmRXZG9ibVZ6Y3l3Z2RHaHBjeTV6YUdWbGJsSnZkV2RvYm1WemMwMWhjQ0E5SUdVdWMyaGxaVzVTYjNWbmFHNWxjM05OWVhBc0lIUm9hWE11ZEhKaGJuTnRhWE56YVc5dUlEMGdaUzUwY21GdWMyMXBjM05wYjI0c0lIUm9hWE11ZEhKaGJuTnRhWE56YVc5dVRXRndJRDBnWlM1MGNtRnVjMjFwYzNOcGIyNU5ZWEFzSUhSb2FYTXVkR2hwWTJ0dVpYTnpJRDBnWlM1MGFHbGphMjVsYzNNc0lIUm9hWE11ZEdocFkydHVaWE56VFdGd0lEMGdaUzUwYUdsamEyNWxjM05OWVhBc0lIUm9hWE11WVhSMFpXNTFZWFJwYjI1RWFYTjBZVzVqWlNBOUlHVXVZWFIwWlc1MVlYUnBiMjVFYVhOMFlXNWpaU3dnZEdocGN5NWhkSFJsYm5WaGRHbHZia052Ykc5eUxtTnZjSGtvWlM1aGRIUmxiblZoZEdsdmJrTnZiRzl5S1N3Z2RHaHBjeTV6Y0dWamRXeGhja2x1ZEdWdWMybDBlU0E5SUdVdWMzQmxZM1ZzWVhKSmJuUmxibk5wZEhrc0lIUm9hWE11YzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhBZ1BTQmxMbk53WldOMWJHRnlTVzUwWlc1emFYUjVUV0Z3TENCMGFHbHpMbk53WldOMWJHRnlRMjlzYjNJdVkyOXdlU2hsTG5Od1pXTjFiR0Z5UTI5c2IzSXBMQ0IwYUdsekxuTndaV04xYkdGeVEyOXNiM0pOWVhBZ1BTQmxMbk53WldOMWJHRnlRMjlzYjNKTllYQXNJSFJvYVhNN0NpQWdJQ0I5Q24wc0lIVmpJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmlkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6VFdWemFGQm9iMjVuVFdGMFpYSnBZV3dnUFNBaE1Dd2dkR2hwY3k1MGVYQmxJRDBnSWsxbGMyaFFhRzl1WjAxaGRHVnlhV0ZzSWl3Z2RHaHBjeTVqYjJ4dmNpQTlJRzVsZHlCd1pTZ3hOamMzTnpJeE5Ta3NJSFJvYVhNdWMzQmxZM1ZzWVhJZ1BTQnVaWGNnY0dVb01URXhPRFE0TVNrc0lIUm9hWE11YzJocGJtbHVaWE56SUQwZ016QXNJSFJvYVhNdWJXRndJRDBnYm5Wc2JDd2dkR2hwY3k1c2FXZG9kRTFoY0NBOUlHNTFiR3dzSUhSb2FYTXViR2xuYUhSTllYQkpiblJsYm5OcGRIa2dQU0F4TENCMGFHbHpMbUZ2VFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVoYjAxaGNFbHVkR1Z1YzJsMGVTQTlJREVzSUhSb2FYTXVaVzFwYzNOcGRtVWdQU0J1WlhjZ2NHVW9NQ2tzSUhSb2FYTXVaVzFwYzNOcGRtVkpiblJsYm5OcGRIa2dQU0F4TENCMGFHbHpMbVZ0YVhOemFYWmxUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWlkVzF3VFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVpZFcxd1UyTmhiR1VnUFNBeExDQjBhR2x6TG01dmNtMWhiRTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVibTl5YldGc1RXRndWSGx3WlNBOUlHMXBMQ0IwYUdsekxtNXZjbTFoYkZOallXeGxJRDBnYm1WM0lGb29NU3dnTVNrc0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBOUlERXNJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lBOUlEQXNJSFJvYVhNdWMzQmxZM1ZzWVhKTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG1Gc2NHaGhUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWxiblpOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbU52YldKcGJtVWdQU0I0WVN3Z2RHaHBjeTV5Wldac1pXTjBhWFpwZEhrZ1BTQXhMQ0IwYUdsekxuSmxabkpoWTNScGIyNVNZWFJwYnlBOUlDNDVPQ3dnZEdocGN5NTNhWEpsWm5KaGJXVWdQU0FoTVN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dnUFNBeExDQjBhR2x6TG5kcGNtVm1jbUZ0WlV4cGJtVmpZWEFnUFNBaWNtOTFibVFpTENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WcWIybHVJRDBnSW5KdmRXNWtJaXdnZEdocGN5NW1iR0YwVTJoaFpHbHVaeUE5SUNFeExDQjBhR2x6TG1adlp5QTlJQ0V3TENCMGFHbHpMbk5sZEZaaGJIVmxjeWhsS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtTnZiRzl5TG1OdmNIa29aUzVqYjJ4dmNpa3NJSFJvYVhNdWMzQmxZM1ZzWVhJdVkyOXdlU2hsTG5Od1pXTjFiR0Z5S1N3Z2RHaHBjeTV6YUdsdWFXNWxjM01nUFNCbExuTm9hVzVwYm1WemN5d2dkR2hwY3k1dFlYQWdQU0JsTG0xaGNDd2dkR2hwY3k1c2FXZG9kRTFoY0NBOUlHVXViR2xuYUhSTllYQXNJSFJvYVhNdWJHbG5hSFJOWVhCSmJuUmxibk5wZEhrZ1BTQmxMbXhwWjJoMFRXRndTVzUwWlc1emFYUjVMQ0IwYUdsekxtRnZUV0Z3SUQwZ1pTNWhiMDFoY0N3Z2RHaHBjeTVoYjAxaGNFbHVkR1Z1YzJsMGVTQTlJR1V1WVc5TllYQkpiblJsYm5OcGRIa3NJSFJvYVhNdVpXMXBjM05wZG1VdVkyOXdlU2hsTG1WdGFYTnphWFpsS1N3Z2RHaHBjeTVsYldsemMybDJaVTFoY0NBOUlHVXVaVzFwYzNOcGRtVk5ZWEFzSUhSb2FYTXVaVzFwYzNOcGRtVkpiblJsYm5OcGRIa2dQU0JsTG1WdGFYTnphWFpsU1c1MFpXNXphWFI1TENCMGFHbHpMbUoxYlhCTllYQWdQU0JsTG1KMWJYQk5ZWEFzSUhSb2FYTXVZblZ0Y0ZOallXeGxJRDBnWlM1aWRXMXdVMk5oYkdVc0lIUm9hWE11Ym05eWJXRnNUV0Z3SUQwZ1pTNXViM0p0WVd4TllYQXNJSFJvYVhNdWJtOXliV0ZzVFdGd1ZIbHdaU0E5SUdVdWJtOXliV0ZzVFdGd1ZIbHdaU3dnZEdocGN5NXViM0p0WVd4VFkyRnNaUzVqYjNCNUtHVXVibTl5YldGc1UyTmhiR1VwTENCMGFHbHpMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDQTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFRXRndMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRk5qWVd4bElEMGdaUzVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU3dnZEdocGN5NWthWE53YkdGalpXMWxiblJDYVdGeklEMGdaUzVrYVhOd2JHRmpaVzFsYm5SQ2FXRnpMQ0IwYUdsekxuTndaV04xYkdGeVRXRndJRDBnWlM1emNHVmpkV3hoY2sxaGNDd2dkR2hwY3k1aGJIQm9ZVTFoY0NBOUlHVXVZV3h3YUdGTllYQXNJSFJvYVhNdVpXNTJUV0Z3SUQwZ1pTNWxiblpOWVhBc0lIUm9hWE11WTI5dFltbHVaU0E5SUdVdVkyOXRZbWx1WlN3Z2RHaHBjeTV5Wldac1pXTjBhWFpwZEhrZ1BTQmxMbkpsWm14bFkzUnBkbWwwZVN3Z2RHaHBjeTV5WldaeVlXTjBhVzl1VW1GMGFXOGdQU0JsTG5KbFpuSmhZM1JwYjI1U1lYUnBieXdnZEdocGN5NTNhWEpsWm5KaGJXVWdQU0JsTG5kcGNtVm1jbUZ0WlN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dnUFNCbExuZHBjbVZtY21GdFpVeHBibVYzYVdSMGFDd2dkR2hwY3k1M2FYSmxabkpoYldWTWFXNWxZMkZ3SUQwZ1pTNTNhWEpsWm5KaGJXVk1hVzVsWTJGd0xDQjBhR2x6TG5kcGNtVm1jbUZ0WlV4cGJtVnFiMmx1SUQwZ1pTNTNhWEpsWm5KaGJXVk1hVzVsYW05cGJpd2dkR2hwY3k1bWJHRjBVMmhoWkdsdVp5QTlJR1V1Wm14aGRGTm9ZV1JwYm1jc0lIUm9hWE11Wm05bklEMGdaUzVtYjJjc0lIUm9hWE03Q2lBZ0lDQjlDbjBzSUdSaklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCaWRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpUV1Z6YUZSdmIyNU5ZWFJsY21saGJDQTlJQ0V3TENCMGFHbHpMbVJsWm1sdVpYTWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lGUlBUMDQ2SUNJaUNpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1MGVYQmxJRDBnSWsxbGMyaFViMjl1VFdGMFpYSnBZV3dpTENCMGFHbHpMbU52Ykc5eUlEMGdibVYzSUhCbEtERTJOemMzTWpFMUtTd2dkR2hwY3k1dFlYQWdQU0J1ZFd4c0xDQjBhR2x6TG1keVlXUnBaVzUwVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVzYVdkb2RFMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdWJHbG5hSFJOWVhCSmJuUmxibk5wZEhrZ1BTQXhMQ0IwYUdsekxtRnZUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWhiMDFoY0VsdWRHVnVjMmwwZVNBOUlERXNJSFJvYVhNdVpXMXBjM05wZG1VZ1BTQnVaWGNnY0dVb01Da3NJSFJvYVhNdVpXMXBjM05wZG1WSmJuUmxibk5wZEhrZ1BTQXhMQ0IwYUdsekxtVnRhWE56YVhabFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1aWRXMXdUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWlkVzF3VTJOaGJHVWdQU0F4TENCMGFHbHpMbTV2Y20xaGJFMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdWJtOXliV0ZzVFdGd1ZIbHdaU0E5SUcxcExDQjBhR2x6TG01dmNtMWhiRk5qWVd4bElEMGdibVYzSUZvb01Td2dNU2tzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU0E5SURFc0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeUE5SURBc0lIUm9hWE11WVd4d2FHRk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxuZHBjbVZtY21GdFpTQTlJQ0V4TENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ0E5SURFc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpXTmhjQ0E5SUNKeWIzVnVaQ0lzSUhSb2FYTXVkMmx5WldaeVlXMWxUR2x1WldwdmFXNGdQU0FpY205MWJtUWlMQ0IwYUdsekxtWnZaeUE5SUNFd0xDQjBhR2x6TG5ObGRGWmhiSFZsY3lobEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbU52Ykc5eUxtTnZjSGtvWlM1amIyeHZjaWtzSUhSb2FYTXViV0Z3SUQwZ1pTNXRZWEFzSUhSb2FYTXVaM0poWkdsbGJuUk5ZWEFnUFNCbExtZHlZV1JwWlc1MFRXRndMQ0IwYUdsekxteHBaMmgwVFdGd0lEMGdaUzVzYVdkb2RFMWhjQ3dnZEdocGN5NXNhV2RvZEUxaGNFbHVkR1Z1YzJsMGVTQTlJR1V1YkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGtzSUhSb2FYTXVZVzlOWVhBZ1BTQmxMbUZ2VFdGd0xDQjBhR2x6TG1GdlRXRndTVzUwWlc1emFYUjVJRDBnWlM1aGIwMWhjRWx1ZEdWdWMybDBlU3dnZEdocGN5NWxiV2x6YzJsMlpTNWpiM0I1S0dVdVpXMXBjM05wZG1VcExDQjBhR2x6TG1WdGFYTnphWFpsVFdGd0lEMGdaUzVsYldsemMybDJaVTFoY0N3Z2RHaHBjeTVsYldsemMybDJaVWx1ZEdWdWMybDBlU0E5SUdVdVpXMXBjM05wZG1WSmJuUmxibk5wZEhrc0lIUm9hWE11WW5WdGNFMWhjQ0E5SUdVdVluVnRjRTFoY0N3Z2RHaHBjeTVpZFcxd1UyTmhiR1VnUFNCbExtSjFiWEJUWTJGc1pTd2dkR2hwY3k1dWIzSnRZV3hOWVhBZ1BTQmxMbTV2Y20xaGJFMWhjQ3dnZEdocGN5NXViM0p0WVd4TllYQlVlWEJsSUQwZ1pTNXViM0p0WVd4TllYQlVlWEJsTENCMGFHbHpMbTV2Y20xaGJGTmpZV3hsTG1OdmNIa29aUzV1YjNKdFlXeFRZMkZzWlNrc0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFRXRndJRDBnWlM1a2FYTndiR0ZqWlcxbGJuUk5ZWEFzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVWdQU0JsTG1ScGMzQnNZV05sYldWdWRGTmpZV3hsTENCMGFHbHpMbVJwYzNCc1lXTmxiV1Z1ZEVKcFlYTWdQU0JsTG1ScGMzQnNZV05sYldWdWRFSnBZWE1zSUhSb2FYTXVZV3h3YUdGTllYQWdQU0JsTG1Gc2NHaGhUV0Z3TENCMGFHbHpMbmRwY21WbWNtRnRaU0E5SUdVdWQybHlaV1p5WVcxbExDQjBhR2x6TG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUNBOUlHVXVkMmx5WldaeVlXMWxUR2x1WlhkcFpIUm9MQ0IwYUdsekxuZHBjbVZtY21GdFpVeHBibVZqWVhBZ1BTQmxMbmRwY21WbWNtRnRaVXhwYm1WallYQXNJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaV3B2YVc0Z1BTQmxMbmRwY21WbWNtRnRaVXhwYm1WcWIybHVMQ0IwYUdsekxtWnZaeUE5SUdVdVptOW5MQ0IwYUdsek93b2dJQ0FnZlFwOUxDQm1ZeUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdZblFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1N3Z2RHaHBjeTVwYzAxbGMyaE9iM0p0WVd4TllYUmxjbWxoYkNBOUlDRXdMQ0IwYUdsekxuUjVjR1VnUFNBaVRXVnphRTV2Y20xaGJFMWhkR1Z5YVdGc0lpd2dkR2hwY3k1aWRXMXdUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWlkVzF3VTJOaGJHVWdQU0F4TENCMGFHbHpMbTV2Y20xaGJFMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdWJtOXliV0ZzVFdGd1ZIbHdaU0E5SUcxcExDQjBhR2x6TG01dmNtMWhiRk5qWVd4bElEMGdibVYzSUZvb01Td2dNU2tzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU0E5SURFc0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeUE5SURBc0lIUm9hWE11ZDJseVpXWnlZVzFsSUQwZ0lURXNJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0lEMGdNU3dnZEdocGN5NW1iR0YwVTJoaFpHbHVaeUE5SUNFeExDQjBhR2x6TG5ObGRGWmhiSFZsY3lobEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbUoxYlhCTllYQWdQU0JsTG1KMWJYQk5ZWEFzSUhSb2FYTXVZblZ0Y0ZOallXeGxJRDBnWlM1aWRXMXdVMk5oYkdVc0lIUm9hWE11Ym05eWJXRnNUV0Z3SUQwZ1pTNXViM0p0WVd4TllYQXNJSFJvYVhNdWJtOXliV0ZzVFdGd1ZIbHdaU0E5SUdVdWJtOXliV0ZzVFdGd1ZIbHdaU3dnZEdocGN5NXViM0p0WVd4VFkyRnNaUzVqYjNCNUtHVXVibTl5YldGc1UyTmhiR1VwTENCMGFHbHpMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDQTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFRXRndMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRk5qWVd4bElEMGdaUzVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU3dnZEdocGN5NWthWE53YkdGalpXMWxiblJDYVdGeklEMGdaUzVrYVhOd2JHRmpaVzFsYm5SQ2FXRnpMQ0IwYUdsekxuZHBjbVZtY21GdFpTQTlJR1V1ZDJseVpXWnlZVzFsTENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ0E5SUdVdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0xDQjBhR2x6TG1ac1lYUlRhR0ZrYVc1bklEMGdaUzVtYkdGMFUyaGhaR2x1Wnl3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnY0dNZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdKMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWFYTk5aWE5vVEdGdFltVnlkRTFoZEdWeWFXRnNJRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pOWlhOb1RHRnRZbVZ5ZEUxaGRHVnlhV0ZzSWl3Z2RHaHBjeTVqYjJ4dmNpQTlJRzVsZHlCd1pTZ3hOamMzTnpJeE5Ta3NJSFJvYVhNdWJXRndJRDBnYm5Wc2JDd2dkR2hwY3k1c2FXZG9kRTFoY0NBOUlHNTFiR3dzSUhSb2FYTXViR2xuYUhSTllYQkpiblJsYm5OcGRIa2dQU0F4TENCMGFHbHpMbUZ2VFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVoYjAxaGNFbHVkR1Z1YzJsMGVTQTlJREVzSUhSb2FYTXVaVzFwYzNOcGRtVWdQU0J1WlhjZ2NHVW9NQ2tzSUhSb2FYTXVaVzFwYzNOcGRtVkpiblJsYm5OcGRIa2dQU0F4TENCMGFHbHpMbVZ0YVhOemFYWmxUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWlkVzF3VFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVpZFcxd1UyTmhiR1VnUFNBeExDQjBhR2x6TG01dmNtMWhiRTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVibTl5YldGc1RXRndWSGx3WlNBOUlHMXBMQ0IwYUdsekxtNXZjbTFoYkZOallXeGxJRDBnYm1WM0lGb29NU3dnTVNrc0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBOUlERXNJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lBOUlEQXNJSFJvYVhNdWMzQmxZM1ZzWVhKTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG1Gc2NHaGhUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWxiblpOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbU52YldKcGJtVWdQU0I0WVN3Z2RHaHBjeTV5Wldac1pXTjBhWFpwZEhrZ1BTQXhMQ0IwYUdsekxuSmxabkpoWTNScGIyNVNZWFJwYnlBOUlDNDVPQ3dnZEdocGN5NTNhWEpsWm5KaGJXVWdQU0FoTVN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dnUFNBeExDQjBhR2x6TG5kcGNtVm1jbUZ0WlV4cGJtVmpZWEFnUFNBaWNtOTFibVFpTENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WcWIybHVJRDBnSW5KdmRXNWtJaXdnZEdocGN5NW1iR0YwVTJoaFpHbHVaeUE5SUNFeExDQjBhR2x6TG1adlp5QTlJQ0V3TENCMGFHbHpMbk5sZEZaaGJIVmxjeWhsS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtTnZiRzl5TG1OdmNIa29aUzVqYjJ4dmNpa3NJSFJvYVhNdWJXRndJRDBnWlM1dFlYQXNJSFJvYVhNdWJHbG5hSFJOWVhBZ1BTQmxMbXhwWjJoMFRXRndMQ0IwYUdsekxteHBaMmgwVFdGd1NXNTBaVzV6YVhSNUlEMGdaUzVzYVdkb2RFMWhjRWx1ZEdWdWMybDBlU3dnZEdocGN5NWhiMDFoY0NBOUlHVXVZVzlOWVhBc0lIUm9hWE11WVc5TllYQkpiblJsYm5OcGRIa2dQU0JsTG1GdlRXRndTVzUwWlc1emFYUjVMQ0IwYUdsekxtVnRhWE56YVhabExtTnZjSGtvWlM1bGJXbHpjMmwyWlNrc0lIUm9hWE11WlcxcGMzTnBkbVZOWVhBZ1BTQmxMbVZ0YVhOemFYWmxUV0Z3TENCMGFHbHpMbVZ0YVhOemFYWmxTVzUwWlc1emFYUjVJRDBnWlM1bGJXbHpjMmwyWlVsdWRHVnVjMmwwZVN3Z2RHaHBjeTVpZFcxd1RXRndJRDBnWlM1aWRXMXdUV0Z3TENCMGFHbHpMbUoxYlhCVFkyRnNaU0E5SUdVdVluVnRjRk5qWVd4bExDQjBhR2x6TG01dmNtMWhiRTFoY0NBOUlHVXVibTl5YldGc1RXRndMQ0IwYUdsekxtNXZjbTFoYkUxaGNGUjVjR1VnUFNCbExtNXZjbTFoYkUxaGNGUjVjR1VzSUhSb2FYTXVibTl5YldGc1UyTmhiR1V1WTI5d2VTaGxMbTV2Y20xaGJGTmpZV3hsS1N3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5STllYQWdQU0JsTG1ScGMzQnNZV05sYldWdWRFMWhjQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJUWTJGc1pTQTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeXdnZEdocGN5NXpjR1ZqZFd4aGNrMWhjQ0E5SUdVdWMzQmxZM1ZzWVhKTllYQXNJSFJvYVhNdVlXeHdhR0ZOWVhBZ1BTQmxMbUZzY0doaFRXRndMQ0IwYUdsekxtVnVkazFoY0NBOUlHVXVaVzUyVFdGd0xDQjBhR2x6TG1OdmJXSnBibVVnUFNCbExtTnZiV0pwYm1Vc0lIUm9hWE11Y21WbWJHVmpkR2wyYVhSNUlEMGdaUzV5Wldac1pXTjBhWFpwZEhrc0lIUm9hWE11Y21WbWNtRmpkR2x2YmxKaGRHbHZJRDBnWlM1eVpXWnlZV04wYVc5dVVtRjBhVzhzSUhSb2FYTXVkMmx5WldaeVlXMWxJRDBnWlM1M2FYSmxabkpoYldVc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpYZHBaSFJvSUQwZ1pTNTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ3NJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaV05oY0NBOUlHVXVkMmx5WldaeVlXMWxUR2x1WldOaGNDd2dkR2hwY3k1M2FYSmxabkpoYldWTWFXNWxhbTlwYmlBOUlHVXVkMmx5WldaeVlXMWxUR2x1WldwdmFXNHNJSFJvYVhNdVpteGhkRk5vWVdScGJtY2dQU0JsTG1ac1lYUlRhR0ZrYVc1bkxDQjBhR2x6TG1adlp5QTlJR1V1Wm05bkxDQjBhR2x6T3dvZ0lDQWdmUXA5TENCdFl5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1luUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NXBjMDFsYzJoTllYUmpZWEJOWVhSbGNtbGhiQ0E5SUNFd0xDQjBhR2x6TG1SbFptbHVaWE1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJRTFCVkVOQlVEb2dJaUlLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMblI1Y0dVZ1BTQWlUV1Z6YUUxaGRHTmhjRTFoZEdWeWFXRnNJaXdnZEdocGN5NWpiMnh2Y2lBOUlHNWxkeUJ3WlNneE5qYzNOekl4TlNrc0lIUm9hWE11YldGMFkyRndJRDBnYm5Wc2JDd2dkR2hwY3k1dFlYQWdQU0J1ZFd4c0xDQjBhR2x6TG1KMWJYQk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtSjFiWEJUWTJGc1pTQTlJREVzSUhSb2FYTXVibTl5YldGc1RXRndJRDBnYm5Wc2JDd2dkR2hwY3k1dWIzSnRZV3hOWVhCVWVYQmxJRDBnYldrc0lIUm9hWE11Ym05eWJXRnNVMk5oYkdVZ1BTQnVaWGNnV2lneExDQXhLU3dnZEdocGN5NWthWE53YkdGalpXMWxiblJOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbVJwYzNCc1lXTmxiV1Z1ZEZOallXeGxJRDBnTVN3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5SQ2FXRnpJRDBnTUN3Z2RHaHBjeTVoYkhCb1lVMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVpteGhkRk5vWVdScGJtY2dQU0FoTVN3Z2RHaHBjeTVtYjJjZ1BTQWhNQ3dnZEdocGN5NXpaWFJXWVd4MVpYTW9aU2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1a1pXWnBibVZ6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JOUVZSRFFWQTZJQ0lpQ2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVqYjJ4dmNpNWpiM0I1S0dVdVkyOXNiM0lwTENCMGFHbHpMbTFoZEdOaGNDQTlJR1V1YldGMFkyRndMQ0IwYUdsekxtMWhjQ0E5SUdVdWJXRndMQ0IwYUdsekxtSjFiWEJOWVhBZ1BTQmxMbUoxYlhCTllYQXNJSFJvYVhNdVluVnRjRk5qWVd4bElEMGdaUzVpZFcxd1UyTmhiR1VzSUhSb2FYTXVibTl5YldGc1RXRndJRDBnWlM1dWIzSnRZV3hOWVhBc0lIUm9hWE11Ym05eWJXRnNUV0Z3Vkhsd1pTQTlJR1V1Ym05eWJXRnNUV0Z3Vkhsd1pTd2dkR2hwY3k1dWIzSnRZV3hUWTJGc1pTNWpiM0I1S0dVdWJtOXliV0ZzVTJOaGJHVXBMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRTFoY0NBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0xDQjBhR2x6TG1ScGMzQnNZV05sYldWdWRGTmpZV3hsSUQwZ1pTNWthWE53YkdGalpXMWxiblJUWTJGc1pTd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUkNhV0Z6SUQwZ1pTNWthWE53YkdGalpXMWxiblJDYVdGekxDQjBhR2x6TG1Gc2NHaGhUV0Z3SUQwZ1pTNWhiSEJvWVUxaGNDd2dkR2hwY3k1bWJHRjBVMmhoWkdsdVp5QTlJR1V1Wm14aGRGTm9ZV1JwYm1jc0lIUm9hWE11Wm05bklEMGdaUzVtYjJjc0lIUm9hWE03Q2lBZ0lDQjlDbjBzSUdkaklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCM2RDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpUR2x1WlVSaGMyaGxaRTFoZEdWeWFXRnNJRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pNYVc1bFJHRnphR1ZrVFdGMFpYSnBZV3dpTENCMGFHbHpMbk5qWVd4bElEMGdNU3dnZEdocGN5NWtZWE5vVTJsNlpTQTlJRE1zSUhSb2FYTXVaMkZ3VTJsNlpTQTlJREVzSUhSb2FYTXVjMlYwVm1Gc2RXVnpLR1VwT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdWMyTmhiR1VnUFNCbExuTmpZV3hsTENCMGFHbHpMbVJoYzJoVGFYcGxJRDBnWlM1a1lYTm9VMmw2WlN3Z2RHaHBjeTVuWVhCVGFYcGxJRDBnWlM1bllYQlRhWHBsTENCMGFHbHpPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUJ1YVNoek1Td2daU3dnZENrZ2V3b2dJQ0FnY21WMGRYSnVJQ0Z6TVNCOGZDQWhkQ0FtSmlCek1TNWpiMjV6ZEhKMVkzUnZjaUE5UFQwZ1pTQS9JSE14SURvZ2RIbHdaVzltSUdVdVFsbFVSVk5mVUVWU1gwVk1SVTFGVGxRZ1BUMGdJbTUxYldKbGNpSWdQeUJ1WlhjZ1pTaHpNU2tnT2lCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNoek1TazdDbjBLWm5WdVkzUnBiMjRnVldRb2N6RXBJSHNLSUNBZ0lISmxkSFZ5YmlCQmNuSmhlVUoxWm1abGNpNXBjMVpwWlhjb2N6RXBJQ1ltSUNFb2N6RWdhVzV6ZEdGdVkyVnZaaUJFWVhSaFZtbGxkeWs3Q24wS1puVnVZM1JwYjI0Z1JHUW9jekVwSUhzS0lDQWdJR1oxYm1OMGFXOXVJR1VvYVN3Z2Npa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpNVnRwWFNBdElITXhXM0pkT3dvZ0lDQWdmUW9nSUNBZ2JHVjBJSFFnUFNCek1TNXNaVzVuZEdnc0lHNGdQU0J1WlhjZ1FYSnlZWGtvZENrN0NpQWdJQ0JtYjNJb2JHVjBJR2tnUFNBd095QnBJQ0U5UFNCME95QXJLMmtwYmx0cFhTQTlJR2s3Q2lBZ0lDQnlaWFIxY200Z2JpNXpiM0owS0dVcExDQnVPd3A5Q21aMWJtTjBhVzl1SUY5aktITXhMQ0JsTENCMEtTQjdDaUFnSUNCc1pYUWdiaUE5SUhNeExteGxibWQwYUN3Z2FTQTlJRzVsZHlCek1TNWpiMjV6ZEhKMVkzUnZjaWh1S1RzS0lDQWdJR1p2Y2loc1pYUWdjaUE5SURBc0lHRWdQU0F3T3lCaElDRTlQU0J1T3lBckszSXBld29nSUNBZ0lDQWdJR3hsZENCdklEMGdkRnR5WFNBcUlHVTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQmpJRDBnTURzZ1l5QWhQVDBnWlRzZ0t5dGpLV2xiWVNzclhTQTlJSE14VzI4Z0t5QmpYVHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUJwT3dwOUNtWjFibU4wYVc5dUlDUmpLSE14TENCbExDQjBMQ0J1S1NCN0NpQWdJQ0JzWlhRZ2FTQTlJREVzSUhJZ1BTQnpNVnN3WFRzS0lDQWdJR1p2Y2lnN0lISWdJVDA5SUhadmFXUWdNQ0FtSmlCeVcyNWRJRDA5UFNCMmIybGtJREE3S1hJZ1BTQnpNVnRwS3l0ZE93b2dJQ0FnYVdZZ0tISWdQVDA5SUhadmFXUWdNQ2tnY21WMGRYSnVPd29nSUNBZ2JHVjBJR0VnUFNCeVcyNWRPd29nSUNBZ2FXWWdLR0VnSVQwOUlIWnZhV1FnTUNrZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1lTa3BJR1J2SUdFZ1BTQnlXMjVkTENCaElDRTlQU0IyYjJsa0lEQWdKaVlnS0dVdWNIVnphQ2h5TG5ScGJXVXBMQ0IwTG5CMWMyZ3VZWEJ3Ykhrb2RDd2dZU2twTENCeUlEMGdjekZiYVNzclhUc0tJQ0FnSUhkb2FXeGxJQ2h5SUNFOVBTQjJiMmxrSURBcENpQWdJQ0JsYkhObElHbG1JQ2hoTG5SdlFYSnlZWGtnSVQwOUlIWnZhV1FnTUNrZ1pHOGdZU0E5SUhKYmJsMHNJR0VnSVQwOUlIWnZhV1FnTUNBbUppQW9aUzV3ZFhOb0tISXVkR2x0WlNrc0lHRXVkRzlCY25KaGVTaDBMQ0IwTG14bGJtZDBhQ2twTENCeUlEMGdjekZiYVNzclhUc0tJQ0FnSUhkb2FXeGxJQ2h5SUNFOVBTQjJiMmxrSURBcENpQWdJQ0JsYkhObElHUnZJR0VnUFNCeVcyNWRMQ0JoSUNFOVBTQjJiMmxrSURBZ0ppWWdLR1V1Y0hWemFDaHlMblJwYldVcExDQjBMbkIxYzJnb1lTa3BMQ0J5SUQwZ2N6RmJhU3NyWFRzS0lDQWdJSGRvYVd4bElDaHlJQ0U5UFNCMmIybGtJREFwQ24wS1puVnVZM1JwYjI0Z2VYZ29jekVzSUdVc0lIUXNJRzRzSUdrZ1BTQXpNQ2tnZXdvZ0lDQWdiR1YwSUhJZ1BTQnpNUzVqYkc5dVpTZ3BPd29nSUNBZ2NpNXVZVzFsSUQwZ1pUc0tJQ0FnSUd4bGRDQmhJRDBnVzEwN0NpQWdJQ0JtYjNJb2JHVjBJR01nUFNBd095QmpJRHdnY2k1MGNtRmphM011YkdWdVozUm9PeUFySzJNcGV3b2dJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ2NpNTBjbUZqYTNOYlkxMHNJR2dnUFNCc0xtZGxkRlpoYkhWbFUybDZaU2dwTENCMUlEMGdXMTBzSUdRZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR1lnUFNBd095Qm1JRHdnYkM1MGFXMWxjeTVzWlc1bmRHZzdJQ3NyWmlsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdElEMGdiQzUwYVcxbGMxdG1YU0FxSUdrN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtHMGdQQ0IwSUh4OElHMGdQajBnYmlrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVXVjSFZ6YUNoc0xuUnBiV1Z6VzJaZEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1h5QTlJREE3SUY4Z1BDQm9PeUFySzE4cFpDNXdkWE5vS0d3dWRtRnNkV1Z6VzJZZ0tpQm9JQ3NnWDEwcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhVdWJHVnVaM1JvSUNFOVBTQXdJQ1ltSUNoc0xuUnBiV1Z6SUQwZ2Jta29kU3dnYkM1MGFXMWxjeTVqYjI1emRISjFZM1J2Y2lrc0lHd3VkbUZzZFdWeklEMGdibWtvWkN3Z2JDNTJZV3gxWlhNdVkyOXVjM1J5ZFdOMGIzSXBMQ0JoTG5CMWMyZ29iQ2twT3dvZ0lDQWdmUW9nSUNBZ2NpNTBjbUZqYTNNZ1BTQmhPd29nSUNBZ2JHVjBJRzhnUFNBeElDOGdNRHNLSUNBZ0lHWnZjaWhzWlhRZ1l5QTlJREE3SUdNZ1BDQnlMblJ5WVdOcmN5NXNaVzVuZEdnN0lDc3JZeWx2SUQ0Z2NpNTBjbUZqYTNOYlkxMHVkR2x0WlhOYk1GMGdKaVlnS0c4Z1BTQnlMblJ5WVdOcmMxdGpYUzUwYVcxbGMxc3dYU2s3Q2lBZ0lDQm1iM0lvYkdWMElHTWdQU0F3T3lCaklEd2djaTUwY21GamEzTXViR1Z1WjNSb095QXJLMk1wY2k1MGNtRmphM05iWTEwdWMyaHBablFvTFRFZ0tpQnZLVHNLSUNBZ0lISmxkSFZ5YmlCeUxuSmxjMlYwUkhWeVlYUnBiMjRvS1N3Z2Nqc0tmUXBtZFc1amRHbHZiaUJOZUNoek1Td2daU0E5SURBc0lIUWdQU0J6TVN3Z2JpQTlJRE13S1NCN0NpQWdJQ0J1SUR3OUlEQWdKaVlnS0c0Z1BTQXpNQ2s3Q2lBZ0lDQnNaWFFnYVNBOUlIUXVkSEpoWTJ0ekxteGxibWQwYUN3Z2NpQTlJR1VnTHlCdU93b2dJQ0FnWm05eUtHeGxkQ0JoSUQwZ01Ec2dZU0E4SUdrN0lDc3JZU2w3Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0IwTG5SeVlXTnJjMXRoWFN3Z1l5QTlJRzh1Vm1Gc2RXVlVlWEJsVG1GdFpUc0tJQ0FnSUNBZ0lDQnBaaUFvWXlBOVBUMGdJbUp2YjJ3aUlIeDhJR01nUFQwOUlDSnpkSEpwYm1jaUtTQmpiMjUwYVc1MVpUc0tJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlITXhMblJ5WVdOcmN5NW1hVzVrS0daMWJtTjBhVzl1S0hBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEF1Ym1GdFpTQTlQVDBnYnk1dVlXMWxJQ1ltSUhBdVZtRnNkV1ZVZVhCbFRtRnRaU0E5UFQwZ1l6c0tJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0JwWmlBb2JDQTlQVDBnZG05cFpDQXdLU0JqYjI1MGFXNTFaVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJREFzSUhVZ1BTQnZMbWRsZEZaaGJIVmxVMmw2WlNncE93b2dJQ0FnSUNBZ0lHOHVZM0psWVhSbFNXNTBaWEp3YjJ4aGJuUXVhWE5KYm5SbGNuQnZiR0Z1ZEVaaFkzUnZjbmxOWlhSb2IyUkhURlJHUTNWaWFXTlRjR3hwYm1VZ0ppWWdLR2dnUFNCMUlDOGdNeWs3Q2lBZ0lDQWdJQ0FnYkdWMElHUWdQU0F3TENCbUlEMGdiQzVuWlhSV1lXeDFaVk5wZW1Vb0tUc0tJQ0FnSUNBZ0lDQnNMbU55WldGMFpVbHVkR1Z5Y0c5c1lXNTBMbWx6U1c1MFpYSndiMnhoYm5SR1lXTjBiM0o1VFdWMGFHOWtSMHhVUmtOMVltbGpVM0JzYVc1bElDWW1JQ2hrSUQwZ1ppQXZJRE1wT3dvZ0lDQWdJQ0FnSUd4bGRDQnRJRDBnYnk1MGFXMWxjeTVzWlc1bmRHZ2dMU0F4TENCZk93b2dJQ0FnSUNBZ0lHbG1JQ2h5SUR3OUlHOHVkR2x0WlhOYk1GMHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEFnUFNCb0xDQjJJRDBnZFNBdElHZzdDaUFnSUNBZ0lDQWdJQ0FnSUY4Z1BTQnZMblpoYkhWbGN5NXpiR2xqWlNod0xDQjJLVHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hJZ1BqMGdieTUwYVcxbGMxdHRYU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0NBOUlHMGdLaUIxSUNzZ2FDd2dkaUE5SUhBZ0t5QjFJQzBnYURzS0lDQWdJQ0FnSUNBZ0lDQWdYeUE5SUc4dWRtRnNkV1Z6TG5Oc2FXTmxLSEFzSUhZcE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd0lEMGdieTVqY21WaGRHVkpiblJsY25CdmJHRnVkQ2dwTENCMklEMGdhQ3dnZUNBOUlIVWdMU0JvT3dvZ0lDQWdJQ0FnSUNBZ0lDQndMbVYyWVd4MVlYUmxLSElwTENCZklEMGdjQzV5WlhOMWJIUkNkV1ptWlhJdWMyeHBZMlVvZGl3Z2VDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR01nUFQwOUlDSnhkV0YwWlhKdWFXOXVJaUFtSmlCdVpYY2dWWFFvS1M1bWNtOXRRWEp5WVhrb1h5a3VibTl5YldGc2FYcGxLQ2t1WTI5dWFuVm5ZWFJsS0NrdWRHOUJjbkpoZVNoZktUc0tJQ0FnSUNBZ0lDQnNaWFFnWnlBOUlHd3VkR2x0WlhNdWJHVnVaM1JvT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY0NBOUlEQTdJSEFnUENCbk95QXJLM0FwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZGlBOUlIQWdLaUJtSUNzZ1pEc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTWdQVDA5SUNKeGRXRjBaWEp1YVc5dUlpa2dWWFF1YlhWc2RHbHdiSGxSZFdGMFpYSnVhVzl1YzBac1lYUW9iQzUyWVd4MVpYTXNJSFlzSUY4c0lEQXNJR3d1ZG1Gc2RXVnpMQ0IyS1RzS0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdlQ0E5SUdZZ0xTQmtJQ29nTWpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZVNBOUlEQTdJSGtnUENCNE95QXJLM2twYkM1MllXeDFaWE5iZGlBcklIbGRJQzA5SUY5YmVWMDdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2N6RXVZbXhsYm1STmIyUmxJRDBnZUdRc0lITXhPd3A5Q25aaGNpQlRkaUE5SUhzS0lDQWdJR052Ym5abGNuUkJjbkpoZVRvZ2Jta3NDaUFnSUNCcGMxUjVjR1ZrUVhKeVlYazZJRlZrTEFvZ0lDQWdaMlYwUzJWNVpuSmhiV1ZQY21SbGNqb2dSR1FzQ2lBZ0lDQnpiM0owWldSQmNuSmhlVG9nWDJNc0NpQWdJQ0JtYkdGMGRHVnVTbE5QVGpvZ0pHTXNDaUFnSUNCemRXSmpiR2x3T2lCNWVDd0tJQ0FnSUcxaGEyVkRiR2x3UVdSa2FYUnBkbVU2SUUxNENuMHNJR1Z6SUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaXdnYVNsN0NpQWdJQ0FnSUNBZ2RHaHBjeTV3WVhKaGJXVjBaWEpRYjNOcGRHbHZibk1nUFNCbExDQjBhR2x6TGw5allXTm9aV1JKYm1SbGVDQTlJREFzSUhSb2FYTXVjbVZ6ZFd4MFFuVm1abVZ5SUQwZ2FTQWhQVDBnZG05cFpDQXdJRDhnYVNBNklHNWxkeUIwTG1OdmJuTjBjblZqZEc5eUtHNHBMQ0IwYUdsekxuTmhiWEJzWlZaaGJIVmxjeUE5SUhRc0lIUm9hWE11ZG1Gc2RXVlRhWHBsSUQwZ2Jpd2dkR2hwY3k1elpYUjBhVzVuY3lBOUlHNTFiR3dzSUhSb2FYTXVSR1ZtWVhWc2RGTmxkSFJwYm1kelh5QTlJSHQ5T3dvZ0lDQWdmUW9nSUNBZ1pYWmhiSFZoZEdVb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1d1lYSmhiV1YwWlhKUWIzTnBkR2x2Ym5Nc0lHNGdQU0IwYUdsekxsOWpZV05vWldSSmJtUmxlQ3dnYVNBOUlIUmJibDBzSUhJZ1BTQjBXMjRnTFNBeFhUc0tJQ0FnSUNBZ0lDQmxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2Jqb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrNklHbG1JQ2doS0dVZ1BDQnBLU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzhnUFNCdUlDc2dNanM3S1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aU0E4SUhJcElHSnlaV0ZySUdrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzRnUFNCMExteGxibWQwYUN3Z2RHaHBjeTVmWTJGamFHVmtTVzVrWlhnZ1BTQnVMQ0IwYUdsekxtTnZjSGxUWVcxd2JHVldZV3gxWlY4b2JpQXRJREVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c0Z1BUMDlJRzhwSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISWdQU0JwTENCcElEMGdkRnNySzI1ZExDQmxJRHdnYVNrZ1luSmxZV3NnZERzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ2RDNXNaVzVuZEdnN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJJRzQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtHVWdQajBnY2lrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCMFd6RmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxJRHdnYnlBbUppQW9iaUE5SURJc0lISWdQU0J2S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JqSUQwZ2JpQXRJREk3T3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2RHaHBjeTVmWTJGamFHVmtTVzVrWlhnZ1BTQXdMQ0IwYUdsekxtTnZjSGxUWVcxd2JHVldZV3gxWlY4b01DazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JpQTlQVDBnWXlrZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0E5SUhJc0lISWdQU0IwV3kwdGJpQXRJREZkTENCbElENDlJSElwSUdKeVpXRnJJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUc0c0lHNGdQU0F3T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF5QnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXlCbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLRHNnYmlBOElHRTdLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdieUE5SUc0Z0t5QmhJRDQrUGlBeE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1VnUENCMFcyOWRJRDhnWVNBOUlHOGdPaUJ1SUQwZ2J5QXJJREU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FTQTlJSFJiYmwwc0lISWdQU0IwVzI0Z0xTQXhYU3dnY2lBOVBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2RHaHBjeTVmWTJGamFHVmtTVzVrWlhnZ1BTQXdMQ0IwYUdsekxtTnZjSGxUWVcxd2JHVldZV3gxWlY4b01DazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBOVBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2JpQTlJSFF1YkdWdVozUm9MQ0IwYUdsekxsOWpZV05vWldSSmJtUmxlQ0E5SUc0c0lIUm9hWE11WTI5d2VWTmhiWEJzWlZaaGJIVmxYeWh1SUMwZ01TazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyRmphR1ZrU1c1a1pYZ2dQU0J1TENCMGFHbHpMbWx1ZEdWeWRtRnNRMmhoYm1kbFpGOG9iaXdnY2l3Z2FTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1sdWRHVnljRzlzWVhSbFh5aHVMQ0J5TENCbExDQnBLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRGTmxkSFJwYm1kelh5Z3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYUjBhVzVuY3lCOGZDQjBhR2x6TGtSbFptRjFiSFJUWlhSMGFXNW5jMTg3Q2lBZ0lDQjlDaUFnSUNCamIzQjVVMkZ0Y0d4bFZtRnNkV1ZmS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11Y21WemRXeDBRblZtWm1WeUxDQnVJRDBnZEdocGN5NXpZVzF3YkdWV1lXeDFaWE1zSUdrZ1BTQjBhR2x6TG5aaGJIVmxVMmw2WlN3Z2NpQTlJR1VnS2lCcE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1lTQTlJREE3SUdFZ0lUMDlJR2s3SUNzcllTbDBXMkZkSUQwZ2JsdHlJQ3NnWVYwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25CdmJHRjBaVjhvS1NCN0NpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NKallXeHNJSFJ2SUdGaWMzUnlZV04wSUcxbGRHaHZaQ0lwT3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEoyWVd4RGFHRnVaMlZrWHlncElIdDlDbjBzSUhoaklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCbGN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUxDQnBLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxMQ0IwTENCdUxDQnBLU3dnZEdocGN5NWZkMlZwWjJoMFVISmxkaUE5SUMwd0xDQjBhR2x6TGw5dlptWnpaWFJRY21WMklEMGdMVEFzSUhSb2FYTXVYM2RsYVdkb2RFNWxlSFFnUFNBdE1Dd2dkR2hwY3k1ZmIyWm1jMlYwVG1WNGRDQTlJQzB3TENCMGFHbHpMa1JsWm1GMWJIUlRaWFIwYVc1bmMxOGdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnVaR2x1WjFOMFlYSjBPaUI2YVN3S0lDQWdJQ0FnSUNBZ0lDQWdaVzVrYVc1blJXNWtPaUI2YVFvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25aaGJFTm9ZVzVuWldSZktHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUm9hWE11Y0dGeVlXMWxkR1Z5VUc5emFYUnBiMjV6TENCeUlEMGdaU0F0SURJc0lHRWdQU0JsSUNzZ01Td2dieUE5SUdsYmNsMHNJR01nUFNCcFcyRmRPd29nSUNBZ0lDQWdJR2xtSUNodklEMDlQU0IyYjJsa0lEQXBJSE4zYVhSamFDaDBhR2x6TG1kbGRGTmxkSFJwYm1kelh5Z3BMbVZ1WkdsdVoxTjBZWEowS1hzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCV2FUb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISWdQU0JsTENCdklEMGdNaUFxSUhRZ0xTQnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1FuSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlJRDBnYVM1c1pXNW5kR2dnTFNBeUxDQnZJRDBnZENBcklHbGJjbDBnTFNCcFczSWdLeUF4WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2lBOUlHVXNJRzhnUFNCdU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvWXlBOVBUMGdkbTlwWkNBd0tTQnpkMmwwWTJnb2RHaHBjeTVuWlhSVFpYUjBhVzVuYzE4b0tTNWxibVJwYm1kRmJtUXBld29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJRlpwT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVNBOUlHVXNJR01nUFNBeUlDb2diaUF0SUhRN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JDY2pvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdFZ1BTQXhMQ0JqSUQwZ2JpQXJJR2xiTVYwZ0xTQnBXekJkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ1pTQXRJREVzSUdNZ1BTQjBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJQ2h1SUMwZ2RDa2dLaUF1TlN3Z2FDQTlJSFJvYVhNdWRtRnNkV1ZUYVhwbE93b2dJQ0FnSUNBZ0lIUm9hWE11WDNkbGFXZG9kRkJ5WlhZZ1BTQnNJQzhnS0hRZ0xTQnZLU3dnZEdocGN5NWZkMlZwWjJoMFRtVjRkQ0E5SUd3Z0x5QW9ZeUF0SUc0cExDQjBhR2x6TGw5dlptWnpaWFJRY21WMklEMGdjaUFxSUdnc0lIUm9hWE11WDI5bVpuTmxkRTVsZUhRZ1BTQmhJQ29nYURzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5Y0c5c1lYUmxYeWhsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCMGFHbHpMbkpsYzNWc2RFSjFabVpsY2l3Z1lTQTlJSFJvYVhNdWMyRnRjR3hsVm1Gc2RXVnpMQ0J2SUQwZ2RHaHBjeTUyWVd4MVpWTnBlbVVzSUdNZ1BTQmxJQ29nYnl3Z2JDQTlJR01nTFNCdkxDQm9JRDBnZEdocGN5NWZiMlptYzJWMFVISmxkaXdnZFNBOUlIUm9hWE11WDI5bVpuTmxkRTVsZUhRc0lHUWdQU0IwYUdsekxsOTNaV2xuYUhSUWNtVjJMQ0JtSUQwZ2RHaHBjeTVmZDJWcFoyaDBUbVY0ZEN3Z2JTQTlJQ2h1SUMwZ2RDa2dMeUFvYVNBdElIUXBMQ0JmSUQwZ2JTQXFJRzBzSUdjZ1BTQmZJQ29nYlN3Z2NDQTlJQzFrSUNvZ1p5QXJJRElnS2lCa0lDb2dYeUF0SUdRZ0tpQnRMQ0IySUQwZ0tERWdLeUJrS1NBcUlHY2dLeUFvTFRFdU5TQXRJRElnS2lCa0tTQXFJRjhnS3lBb0xTNDFJQ3NnWkNrZ0tpQnRJQ3NnTVN3Z2VDQTlJQ2d0TVNBdElHWXBJQ29nWnlBcklDZ3hMalVnS3lCbUtTQXFJRjhnS3lBdU5TQXFJRzBzSUhrZ1BTQm1JQ29nWnlBdElHWWdLaUJmT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWWlBOUlEQTdJR0lnSVQwOUlHODdJQ3NyWWlseVcySmRJRDBnY0NBcUlHRmJhQ0FySUdKZElDc2dkaUFxSUdGYmJDQXJJR0pkSUNzZ2VDQXFJR0ZiWXlBcklHSmRJQ3NnZVNBcUlHRmJkU0FySUdKZE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCeU93b2dJQ0FnZlFwOUxDQm1ZU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdaWE1nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaXdnYVNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlN3Z2RDd2diaXdnYVNrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25CdmJHRjBaVjhvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHaHBjeTV5WlhOMWJIUkNkV1ptWlhJc0lHRWdQU0IwYUdsekxuTmhiWEJzWlZaaGJIVmxjeXdnYnlBOUlIUm9hWE11ZG1Gc2RXVlRhWHBsTENCaklEMGdaU0FxSUc4c0lHd2dQU0JqSUMwZ2J5d2dhQ0E5SUNodUlDMGdkQ2tnTHlBb2FTQXRJSFFwTENCMUlEMGdNU0F0SUdnN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCa0lEMGdNRHNnWkNBaFBUMGdienNnS3l0a0tYSmJaRjBnUFNCaFcyd2dLeUJrWFNBcUlIVWdLeUJoVzJNZ0t5QmtYU0FxSUdnN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhJN0NpQWdJQ0I5Q24wc0lIWmpJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmxjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVMQ0JwS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMExDQnVMQ0JwS1RzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5Y0c5c1lYUmxYeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl3ZVZOaGJYQnNaVlpoYkhWbFh5aGxJQzBnTVNrN0NpQWdJQ0I5Q24wc0lFcDBJRDBnWTJ4aGMzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2Jpd2dhU2w3Q2lBZ0lDQWdJQ0FnYVdZZ0tHVWdQVDA5SUhadmFXUWdNQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ0pVU0ZKRlJTNUxaWGxtY21GdFpWUnlZV05yT2lCMGNtRmpheUJ1WVcxbElHbHpJSFZ1WkdWbWFXNWxaQ0lwT3dvZ0lDQWdJQ0FnSUdsbUlDaDBJRDA5UFNCMmIybGtJREFnZkh3Z2RDNXNaVzVuZEdnZ1BUMDlJREFwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWdpVkVoU1JVVXVTMlY1Wm5KaGJXVlVjbUZqYXpvZ2JtOGdhMlY1Wm5KaGJXVnpJR2x1SUhSeVlXTnJJRzVoYldWa0lDSWdLeUJsS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbTVoYldVZ1BTQmxMQ0IwYUdsekxuUnBiV1Z6SUQwZ2Jta29kQ3dnZEdocGN5NVVhVzFsUW5WbVptVnlWSGx3WlNrc0lIUm9hWE11ZG1Gc2RXVnpJRDBnYm1rb2Jpd2dkR2hwY3k1V1lXeDFaVUoxWm1abGNsUjVjR1VwTENCMGFHbHpMbk5sZEVsdWRHVnljRzlzWVhScGIyNG9hU0I4ZkNCMGFHbHpMa1JsWm1GMWJIUkpiblJsY25CdmJHRjBhVzl1S1RzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCMGIwcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTNWpiMjV6ZEhKMVkzUnZjaXdnYmpzS0lDQWdJQ0FnSUNCcFppQW9kQzUwYjBwVFQwNGdJVDA5SUhSb2FYTXVkRzlLVTA5T0tTQnVJRDBnZEM1MGIwcFRUMDRvWlNrN0NpQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHNGdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQmxMbTVoYldVc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFXMWxjem9nYm1rb1pTNTBhVzFsY3l3Z1FYSnlZWGtwTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVnpPaUJ1YVNobExuWmhiSFZsY3l3Z1FYSnlZWGtwQ2lBZ0lDQWdJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnWlM1blpYUkpiblJsY25CdmJHRjBhVzl1S0NrN0NpQWdJQ0FnSUNBZ0lDQWdJR2tnSVQwOUlHVXVSR1ZtWVhWc2RFbHVkR1Z5Y0c5c1lYUnBiMjRnSmlZZ0tHNHVhVzUwWlhKd2IyeGhkR2x2YmlBOUlHa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaTUwZVhCbElEMGdaUzVXWVd4MVpWUjVjR1ZPWVcxbExDQnVPd29nSUNBZ2ZRb2dJQ0FnU1c1MFpYSndiMnhoYm5SR1lXTjBiM0o1VFdWMGFHOWtSR2x6WTNKbGRHVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RtTW9kR2hwY3k1MGFXMWxjeXdnZEdocGN5NTJZV3gxWlhNc0lIUm9hWE11WjJWMFZtRnNkV1ZUYVhwbEtDa3NJR1VwT3dvZ0lDQWdmUW9nSUNBZ1NXNTBaWEp3YjJ4aGJuUkdZV04wYjNKNVRXVjBhRzlrVEdsdVpXRnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lHWmhLSFJvYVhNdWRHbHRaWE1zSUhSb2FYTXVkbUZzZFdWekxDQjBhR2x6TG1kbGRGWmhiSFZsVTJsNlpTZ3BMQ0JsS1RzS0lDQWdJSDBLSUNBZ0lFbHVkR1Z5Y0c5c1lXNTBSbUZqZEc5eWVVMWxkR2h2WkZOdGIyOTBhQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QjRZeWgwYUdsekxuUnBiV1Z6TENCMGFHbHpMblpoYkhWbGN5d2dkR2hwY3k1blpYUldZV3gxWlZOcGVtVW9LU3dnWlNrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJKYm5SbGNuQnZiR0YwYVc5dUtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2REc0tJQ0FnSUNBZ0lDQnpkMmwwWTJnb1pTbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdUM0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwSUQwZ2RHaHBjeTVKYm5SbGNuQnZiR0Z1ZEVaaFkzUnZjbmxOWlhSb2IyUkVhWE5qY21WMFpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVaeU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJSFJvYVhNdVNXNTBaWEp3YjJ4aGJuUkdZV04wYjNKNVRXVjBhRzlrVEdsdVpXRnlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1RHRTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBJRDBnZEdocGN5NUpiblJsY25CdmJHRnVkRVpoWTNSdmNubE5aWFJvYjJSVGJXOXZkR2c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0hRZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUNKMWJuTjFjSEJ2Y25SbFpDQnBiblJsY25CdmJHRjBhVzl1SUdadmNpQWlJQ3NnZEdocGN5NVdZV3gxWlZSNWNHVk9ZVzFsSUNzZ0lpQnJaWGxtY21GdFpTQjBjbUZqYXlCdVlXMWxaQ0FpSUNzZ2RHaHBjeTV1WVcxbE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqY21WaGRHVkpiblJsY25CdmJHRnVkQ0E5UFQwZ2RtOXBaQ0F3S1NCcFppQW9aU0FoUFQwZ2RHaHBjeTVFWldaaGRXeDBTVzUwWlhKd2IyeGhkR2x2YmlrZ2RHaHBjeTV6WlhSSmJuUmxjbkJ2YkdGMGFXOXVLSFJvYVhNdVJHVm1ZWFZzZEVsdWRHVnljRzlzWVhScGIyNHBPd29nSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSFJvY205M0lHNWxkeUJGY25KdmNpaHVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVMyVjVabkpoYldWVWNtRmphem9pTENCdUtTd2dkR2hwY3pzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFNXNTBaWEp3YjJ4aGJuUWdQU0IwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWjJWMFNXNTBaWEp3YjJ4aGRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNCemQybDBZMmdvZEdocGN5NWpjbVZoZEdWSmJuUmxjbkJ2YkdGdWRDbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdkR2hwY3k1SmJuUmxjbkJ2YkdGdWRFWmhZM1J2Y25sTlpYUm9iMlJFYVhOamNtVjBaVG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlBjanNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0IwYUdsekxrbHVkR1Z5Y0c5c1lXNTBSbUZqZEc5eWVVMWxkR2h2WkV4cGJtVmhjam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkdjanNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0IwYUdsekxrbHVkR1Z5Y0c5c1lXNTBSbUZqZEc5eWVVMWxkR2h2WkZOdGIyOTBhRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQk1ZVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCblpYUldZV3gxWlZOcGVtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRtRnNkV1Z6TG14bGJtZDBhQ0F2SUhSb2FYTXVkR2x0WlhNdWJHVnVaM1JvT3dvZ0lDQWdmUW9nSUNBZ2MyaHBablFvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hsSUNFOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTUwYVcxbGN6c0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Dd2dhU0E5SUhRdWJHVnVaM1JvT3lCdUlDRTlQU0JwT3lBcksyNHBkRnR1WFNBclBTQmxPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmpZV3hsS0dVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvWlNBaFBUMGdNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11ZEdsdFpYTTdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQXNJR2tnUFNCMExteGxibWQwYURzZ2JpQWhQVDBnYVRzZ0t5dHVLWFJiYmwwZ0tqMGdaVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBjbWx0S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdWRHbHRaWE1zSUdrZ1BTQnVMbXhsYm1kMGFDd2djaUE5SURBc0lHRWdQU0JwSUMwZ01Uc0tJQ0FnSUNBZ0lDQm1iM0lvT3lCeUlDRTlQU0JwSUNZbUlHNWJjbDBnUENCbE95a3JLM0k3Q2lBZ0lDQWdJQ0FnWm05eUtEc2dZU0FoUFQwZ0xURWdKaVlnYmx0aFhTQStJSFE3S1MwdFlUc0tJQ0FnSUNBZ0lDQnBaaUFvS3l0aExDQnlJQ0U5UFNBd0lIeDhJR0VnSVQwOUlHa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NpQStQU0JoSUNZbUlDaGhJRDBnVFdGMGFDNXRZWGdvWVN3Z01Ta3NJSElnUFNCaElDMGdNU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2RHaHBjeTVuWlhSV1lXeDFaVk5wZW1Vb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBhVzFsY3lBOUlHNHVjMnhwWTJVb2Npd2dZU2tzSUhSb2FYTXVkbUZzZFdWeklEMGdkR2hwY3k1MllXeDFaWE11YzJ4cFkyVW9jaUFxSUc4c0lHRWdLaUJ2S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IyWVd4cFpHRjBaU2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUNFd0xDQjBJRDBnZEdocGN5NW5aWFJXWVd4MVpWTnBlbVVvS1RzS0lDQWdJQ0FnSUNCMElDMGdUV0YwYUM1bWJHOXZjaWgwS1NBaFBUMGdNQ0FtSmlBb1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVTMlY1Wm5KaGJXVlVjbUZqYXpvZ1NXNTJZV3hwWkNCMllXeDFaU0J6YVhwbElHbHVJSFJ5WVdOckxpSXNJSFJvYVhNcExDQmxJRDBnSVRFcE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTUwYVcxbGN5d2dhU0E5SUhSb2FYTXVkbUZzZFdWekxDQnlJRDBnYmk1c1pXNW5kR2c3Q2lBZ0lDQWdJQ0FnY2lBOVBUMGdNQ0FtSmlBb1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVTMlY1Wm5KaGJXVlVjbUZqYXpvZ1ZISmhZMnNnYVhNZ1pXMXdkSGt1SWl3Z2RHaHBjeWtzSUdVZ1BTQWhNU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0J1ZFd4c093b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2J5QTlJREE3SUc4Z0lUMDlJSEk3SUc4ckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnYmx0dlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCaklEMDlJQ0p1ZFcxaVpYSWlJQ1ltSUdselRtRk9LR01wS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNUxaWGxtY21GdFpWUnlZV05yT2lCVWFXMWxJR2x6SUc1dmRDQmhJSFpoYkdsa0lHNTFiV0psY2k0aUxDQjBhR2x6TENCdkxDQmpLU3dnWlNBOUlDRXhPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR0VnSVQwOUlHNTFiR3dnSmlZZ1lTQStJR01wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxrdGxlV1p5WVcxbFZISmhZMnM2SUU5MWRDQnZaaUJ2Y21SbGNpQnJaWGx6TGlJc0lIUm9hWE1zSUc4c0lHTXNJR0VwTENCbElEMGdJVEU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQmhJRDBnWXpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLR2tnSVQwOUlIWnZhV1FnTUNBbUppQlZaQ2hwS1NrZ1ptOXlLR3hsZENCdklEMGdNQ3dnWXlBOUlHa3ViR1Z1WjNSb095QnZJQ0U5UFNCak95QXJLMjhwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlHbGJiMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwYzA1aFRpaHNLU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVMyVjVabkpoYldWVWNtRmphem9nVm1Gc2RXVWdhWE1nYm05MElHRWdkbUZzYVdRZ2JuVnRZbVZ5TGlJc0lIUm9hWE1zSUc4c0lHd3BMQ0JsSUQwZ0lURTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaVHNLSUNBZ0lIMEtJQ0FnSUc5d2RHbHRhWHBsS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTUwYVcxbGN5NXpiR2xqWlNncExDQjBJRDBnZEdocGN5NTJZV3gxWlhNdWMyeHBZMlVvS1N3Z2JpQTlJSFJvYVhNdVoyVjBWbUZzZFdWVGFYcGxLQ2tzSUdrZ1BTQjBhR2x6TG1kbGRFbHVkR1Z5Y0c5c1lYUnBiMjRvS1NBOVBUMGdUR0VzSUhJZ1BTQmxMbXhsYm1kMGFDQXRJREVzSUdFZ1BTQXhPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdieUE5SURFN0lHOGdQQ0J5T3lBcksyOHBld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUNFeExDQnNJRDBnWlZ0dlhTd2dhQ0E5SUdWYmJ5QXJJREZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkNBaFBUMGdhQ0FtSmlBb2J5QWhQVDBnTVNCOGZDQnNJQ0U5UFNCbFd6QmRLU2tnYVdZZ0tHa3BJR01nUFNBaE1Ec0tJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZFNBOUlHOGdLaUJ1TENCa0lEMGdkU0F0SUc0c0lHWWdQU0IxSUNzZ2Jqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JTQTlJREE3SUcwZ0lUMDlJRzQ3SUNzcmJTbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGOGdQU0IwVzNVZ0t5QnRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YeUFoUFQwZ2RGdGtJQ3NnYlYwZ2ZId2dYeUFoUFQwZ2RGdG1JQ3NnYlYwcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1l5QTlJQ0V3T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodklDRTlQU0JoS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVnRoWFNBOUlHVmJiMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFVnUFNCdklDb2diaXdnWkNBOUlHRWdLaUJ1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ppQTlJREE3SUdZZ0lUMDlJRzQ3SUNzclppbDBXMlFnS3lCbVhTQTlJSFJiZFNBcklHWmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLeXRoT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNoeUlENGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmxXMkZkSUQwZ1pWdHlYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdklEMGdjaUFxSUc0c0lHTWdQU0JoSUNvZ2Jpd2diQ0E5SURBN0lHd2dJVDA5SUc0N0lDc3JiQ2wwVzJNZ0t5QnNYU0E5SUhSYmJ5QXJJR3hkT3dvZ0lDQWdJQ0FnSUNBZ0lDQXJLMkU3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJoSUNFOVBTQmxMbXhsYm1kMGFDQS9JQ2gwYUdsekxuUnBiV1Z6SUQwZ1pTNXpiR2xqWlNnd0xDQmhLU3dnZEdocGN5NTJZV3gxWlhNZ1BTQjBMbk5zYVdObEtEQXNJR0VnS2lCdUtTa2dPaUFvZEdocGN5NTBhVzFsY3lBOUlHVXNJSFJvYVhNdWRtRnNkV1Z6SUQwZ2RDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11ZEdsdFpYTXVjMnhwWTJVb0tTd2dkQ0E5SUhSb2FYTXVkbUZzZFdWekxuTnNhV05sS0Nrc0lHNGdQU0IwYUdsekxtTnZibk4wY25WamRHOXlMQ0JwSUQwZ2JtVjNJRzRvZEdocGN5NXVZVzFsTENCbExDQjBLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhUzVqY21WaGRHVkpiblJsY25CdmJHRnVkQ0E5SUhSb2FYTXVZM0psWVhSbFNXNTBaWEp3YjJ4aGJuUXNJR2s3Q2lBZ0lDQjlDbjA3Q2twMExuQnliM1J2ZEhsd1pTNVVhVzFsUW5WbVptVnlWSGx3WlNBOUlFWnNiMkYwTXpKQmNuSmhlVHNLU25RdWNISnZkRzkwZVhCbExsWmhiSFZsUW5WbVptVnlWSGx3WlNBOUlFWnNiMkYwTXpKQmNuSmhlVHNLU25RdWNISnZkRzkwZVhCbExrUmxabUYxYkhSSmJuUmxjbkJ2YkdGMGFXOXVJRDBnUm5JN0NuWmhjaUJXYmlBOUlHTnNZWE56SUdWNGRHVnVaSE1nU25RZ2V3cDlPd3BXYmk1d2NtOTBiM1I1Y0dVdVZtRnNkV1ZVZVhCbFRtRnRaU0E5SUNKaWIyOXNJanNLVm00dWNISnZkRzkwZVhCbExsWmhiSFZsUW5WbVptVnlWSGx3WlNBOUlFRnljbUY1T3dwV2JpNXdjbTkwYjNSNWNHVXVSR1ZtWVhWc2RFbHVkR1Z5Y0c5c1lYUnBiMjRnUFNCUGNqc0tWbTR1Y0hKdmRHOTBlWEJsTGtsdWRHVnljRzlzWVc1MFJtRmpkRzl5ZVUxbGRHaHZaRXhwYm1WaGNpQTlJSFp2YVdRZ01Ec0tWbTR1Y0hKdmRHOTBlWEJsTGtsdWRHVnljRzlzWVc1MFJtRmpkRzl5ZVUxbGRHaHZaRk50YjI5MGFDQTlJSFp2YVdRZ01Ec0tkbUZ5SUhCaElEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCS2RDQjdDbjA3Q25CaExuQnliM1J2ZEhsd1pTNVdZV3gxWlZSNWNHVk9ZVzFsSUQwZ0ltTnZiRzl5SWpzS2RtRnlJSFJ6SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJLZENCN0NuMDdDblJ6TG5CeWIzUnZkSGx3WlM1V1lXeDFaVlI1Y0dWT1lXMWxJRDBnSW01MWJXSmxjaUk3Q25aaGNpQjVZeUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdaWE1nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaXdnYVNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlN3Z2RDd2diaXdnYVNrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25CdmJHRjBaVjhvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHaHBjeTV5WlhOMWJIUkNkV1ptWlhJc0lHRWdQU0IwYUdsekxuTmhiWEJzWlZaaGJIVmxjeXdnYnlBOUlIUm9hWE11ZG1Gc2RXVlRhWHBsTENCaklEMGdLRzRnTFNCMEtTQXZJQ2hwSUMwZ2RDa3NJR3dnUFNCbElDb2dienNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2dnUFNCc0lDc2dienNnYkNBaFBUMGdhRHNnYkNBclBTQTBLVlYwTG5Oc1pYSndSbXhoZENoeUxDQXdMQ0JoTENCc0lDMGdieXdnWVN3Z2JDd2dZeWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSEk3Q2lBZ0lDQjlDbjBzSUhCcElEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCS2RDQjdDaUFnSUNCSmJuUmxjbkJ2YkdGdWRFWmhZM1J2Y25sTlpYUm9iMlJNYVc1bFlYSW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2VXTW9kR2hwY3k1MGFXMWxjeXdnZEdocGN5NTJZV3gxWlhNc0lIUm9hWE11WjJWMFZtRnNkV1ZUYVhwbEtDa3NJR1VwT3dvZ0lDQWdmUXA5T3dwd2FTNXdjbTkwYjNSNWNHVXVWbUZzZFdWVWVYQmxUbUZ0WlNBOUlDSnhkV0YwWlhKdWFXOXVJanNLY0drdWNISnZkRzkwZVhCbExrUmxabUYxYkhSSmJuUmxjbkJ2YkdGMGFXOXVJRDBnUm5JN0NuQnBMbkJ5YjNSdmRIbHdaUzVKYm5SbGNuQnZiR0Z1ZEVaaFkzUnZjbmxOWlhSb2IyUlRiVzl2ZEdnZ1BTQjJiMmxrSURBN0NuWmhjaUJyYmlBOUlHTnNZWE56SUdWNGRHVnVaSE1nU25RZ2V3cDlPd3ByYmk1d2NtOTBiM1I1Y0dVdVZtRnNkV1ZVZVhCbFRtRnRaU0E5SUNKemRISnBibWNpT3dwcmJpNXdjbTkwYjNSNWNHVXVWbUZzZFdWQ2RXWm1aWEpVZVhCbElEMGdRWEp5WVhrN0NtdHVMbkJ5YjNSdmRIbHdaUzVFWldaaGRXeDBTVzUwWlhKd2IyeGhkR2x2YmlBOUlFOXlPd3ByYmk1d2NtOTBiM1I1Y0dVdVNXNTBaWEp3YjJ4aGJuUkdZV04wYjNKNVRXVjBhRzlrVEdsdVpXRnlJRDBnZG05cFpDQXdPd3ByYmk1d2NtOTBiM1I1Y0dVdVNXNTBaWEp3YjJ4aGJuUkdZV04wYjNKNVRXVjBhRzlrVTIxdmIzUm9JRDBnZG05cFpDQXdPd3AyWVhJZ2JuTWdQU0JqYkdGemN5QmxlSFJsYm1SeklFcDBJSHNLZlRzS2JuTXVjSEp2ZEc5MGVYQmxMbFpoYkhWbFZIbHdaVTVoYldVZ1BTQWlkbVZqZEc5eUlqc0tkbUZ5SUdseklEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ0E5SUMweExDQnVMQ0JwSUQwZ1dHTXBld29nSUNBZ0lDQWdJSFJvYVhNdWJtRnRaU0E5SUdVc0lIUm9hWE11ZEhKaFkydHpJRDBnYml3Z2RHaHBjeTVrZFhKaGRHbHZiaUE5SUhRc0lIUm9hWE11WW14bGJtUk5iMlJsSUQwZ2FTd2dkR2hwY3k1MWRXbGtJRDBnYTNRb0tTd2dkR2hwY3k1a2RYSmhkR2x2YmlBOElEQWdKaVlnZEdocGN5NXlaWE5sZEVSMWNtRjBhVzl1S0NrN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ2NHRnljMlVvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1cxMHNJRzRnUFNCbExuUnlZV05yY3l3Z2FTQTlJREVnTHlBb1pTNW1jSE1nZkh3Z01TazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQmhJRDBnTUN3Z2J5QTlJRzR1YkdWdVozUm9PeUJoSUNFOVBTQnZPeUFySzJFcGRDNXdkWE5vS0dKNEtHNWJZVjBwTG5OallXeGxLR2twS1RzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUc1bGR5QjBhR2x6S0dVdWJtRnRaU3dnWlM1a2RYSmhkR2x2Yml3Z2RDd2daUzVpYkdWdVpFMXZaR1VwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5TG5WMWFXUWdQU0JsTG5WMWFXUXNJSEk3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nZEc5S1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUZ0ZExDQnVJRDBnWlM1MGNtRmphM01zSUdrZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJR1V1Ym1GdFpTd0tJQ0FnSUNBZ0lDQWdJQ0FnWkhWeVlYUnBiMjQ2SUdVdVpIVnlZWFJwYjI0c0NpQWdJQ0FnSUNBZ0lDQWdJSFJ5WVdOcmN6b2dkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2RYVnBaRG9nWlM1MWRXbGtMQW9nSUNBZ0lDQWdJQ0FnSUNCaWJHVnVaRTF2WkdVNklHVXVZbXhsYm1STmIyUmxDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSElnUFNBd0xDQmhJRDBnYmk1c1pXNW5kR2c3SUhJZ0lUMDlJR0U3SUNzcmNpbDBMbkIxYzJnb1NuUXVkRzlLVTA5T0tHNWJjbDBwS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVRzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCRGNtVmhkR1ZHY205dFRXOXljR2hVWVhKblpYUlRaWEYxWlc1alpTaGxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0IwTG14bGJtZDBhQ3dnWVNBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdieUE5SURBN0lHOGdQQ0J5T3lCdkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUZ0ZExDQnNJRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR011Y0hWemFDZ29ieUFySUhJZ0xTQXhLU0FsSUhJc0lHOHNJQ2h2SUNzZ01Ta2dKU0J5S1N3Z2JDNXdkWE5vS0RBc0lERXNJREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYUNBOUlFUmtLR01wT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpJRDBnWDJNb1l5d2dNU3dnYUNrc0lHd2dQU0JmWXloc0xDQXhMQ0JvS1N3Z0lXa2dKaVlnWTFzd1hTQTlQVDBnTUNBbUppQW9ZeTV3ZFhOb0tISXBMQ0JzTG5CMWMyZ29iRnN3WFNrcExDQmhMbkIxYzJnb2JtVjNJSFJ6S0NJdWJXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpXeUlnS3lCMFcyOWRMbTVoYldVZ0t5QWlYU0lzSUdNc0lHd3BMbk5qWVd4bEtERWdMeUJ1S1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkR2hwY3lobExDQXRNU3dnWVNrN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ1ptbHVaRUo1VG1GdFpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCbE93b2dJQ0FnSUNBZ0lHbG1JQ2doUVhKeVlYa3VhWE5CY25KaGVTaGxLU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHVTdDaUFnSUNBZ0lDQWdJQ0FnSUc0Z1BTQnBMbWRsYjIxbGRISjVJQ1ltSUdrdVoyVnZiV1YwY25rdVlXNXBiV0YwYVc5dWN5QjhmQ0JwTG1GdWFXMWhkR2x2Ym5NN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FTQTlJREE3SUdrZ1BDQnVMbXhsYm1kMGFEc2dhU3NyS1dsbUlDaHVXMmxkTG01aGJXVWdQVDA5SUhRcElISmxkSFZ5YmlCdVcybGRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzT3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUVOeVpXRjBaVU5zYVhCelJuSnZiVTF2Y25Cb1ZHRnlaMlYwVTJWeGRXVnVZMlZ6S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUh0OUxDQnlJRDBnTDE0b1cxeDNMVjBxUHlrb1cxeGtYU3NwSkM4N0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdklEMGdNQ3dnWXlBOUlHVXViR1Z1WjNSb095QnZJRHdnWXpzZ2J5c3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCbFcyOWRMQ0JvSUQwZ2JDNXVZVzFsTG0xaGRHTm9LSElwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYUNBbUppQm9MbXhsYm1kMGFDQStJREVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjFJRDBnYUZzeFhTd2daQ0E5SUdsYmRWMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtJSHg4SUNocFczVmRJRDBnWkNBOUlGdGRLU3dnWkM1d2RYTm9LR3dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCaElEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J2SUdsdUlHa3BZUzV3ZFhOb0tIUm9hWE11UTNKbFlYUmxSbkp2YlUxdmNuQm9WR0Z5WjJWMFUyVnhkV1Z1WTJVb2J5d2dhVnR2WFN3Z2RDd2diaWtwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJoT3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUhCaGNuTmxRVzVwYldGMGFXOXVLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnBaaUFvSVdVcElISmxkSFZ5YmlCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNUJibWx0WVhScGIyNURiR2x3T2lCT2J5QmhibWx0WVhScGIyNGdhVzRnU2xOUFRreHZZV1JsY2lCa1lYUmhMaUlwTENCdWRXeHNPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdablZ1WTNScGIyNG9kU3dnWkN3Z1ppd2diU3dnWHlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ppNXNaVzVuZEdnZ0lUMDlJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm5JRDBnVzEwc0lIQWdQU0JiWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNSaktHWXNJR2NzSUhBc0lHMHBMQ0JuTG14bGJtZDBhQ0FoUFQwZ01DQW1KaUJmTG5CMWMyZ29ibVYzSUhVb1pDd2daeXdnY0NrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlN3Z2FTQTlJRnRkTENCeUlEMGdaUzV1WVcxbElIeDhJQ0prWldaaGRXeDBJaXdnWVNBOUlHVXVabkJ6SUh4OElETXdMQ0J2SUQwZ1pTNWliR1Z1WkUxdlpHVXNJR01nUFNCbExteGxibWQwYUNCOGZDQXRNU3dnYkNBOUlHVXVhR2xsY21GeVkyaDVJSHg4SUZ0ZE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RTQTlJREE3SUhVZ1BDQnNMbXhsYm1kMGFEc2dkU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQnNXM1ZkTG10bGVYTTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hLQ0ZrSUh4OElHUXViR1Z1WjNSb0lEMDlQU0F3S1NrZ2FXWWdLR1JiTUYwdWJXOXljR2hVWVhKblpYUnpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJSHQ5TENCdE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLRzBnUFNBd095QnRJRHdnWkM1c1pXNW5kR2c3SUcwckt5bHBaaUFvWkZ0dFhTNXRiM0p3YUZSaGNtZGxkSE1wSUdadmNpaHNaWFFnWHlBOUlEQTdJRjhnUENCa1cyMWRMbTF2Y25Cb1ZHRnlaMlYwY3k1c1pXNW5kR2c3SUY4ckt5bG1XMlJiYlYwdWJXOXljR2hVWVhKblpYUnpXMTlkWFNBOUlDMHhPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmZJR2x1SUdZcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbklEMGdXMTBzSUhBZ1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhZZ1BTQXdPeUIySUNFOVBTQmtXMjFkTG0xdmNuQm9WR0Z5WjJWMGN5NXNaVzVuZEdnN0lDc3JkaWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNElEMGdaRnR0WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWnk1d2RYTm9LSGd1ZEdsdFpTa3NJSEF1Y0hWemFDaDRMbTF2Y25Cb1ZHRnlaMlYwSUQwOVBTQmZJRDhnTVNBNklEQXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBMbkIxYzJnb2JtVjNJSFJ6S0NJdWJXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVmJJaUFySUY4Z0t5QWlYU0lzSUdjc0lIQXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR01nUFNCbUxteGxibWQwYUNBcUlHRTdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJQ0l1WW05dVpYTmJJaUFySUhSYmRWMHVibUZ0WlNBcklDSmRJanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzRvYm5Nc0lHWWdLeUFpTG5CdmMybDBhVzl1SWl3Z1pDd2dJbkJ2Y3lJc0lHa3BMQ0J1S0hCcExDQm1JQ3NnSWk1eGRXRjBaWEp1YVc5dUlpd2daQ3dnSW5KdmRDSXNJR2twTENCdUtHNXpMQ0JtSUNzZ0lpNXpZMkZzWlNJc0lHUXNJQ0p6WTJ3aUxDQnBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2FTNXNaVzVuZEdnZ1BUMDlJREFnUHlCdWRXeHNJRG9nYm1WM0lIUm9hWE1vY2l3Z1l5d2dhU3dnYnlrN0NpQWdJQ0I5Q2lBZ0lDQnlaWE5sZEVSMWNtRjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTUwY21GamEzTXNJSFFnUFNBd093b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJREFzSUdrZ1BTQmxMbXhsYm1kMGFEc2diaUFoUFQwZ2FUc2dLeXR1S1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhJZ1BTQjBhR2x6TG5SeVlXTnJjMXR1WFRzS0lDQWdJQ0FnSUNBZ0lDQWdkQ0E5SUUxaGRHZ3ViV0Y0S0hRc0lISXVkR2x0WlhOYmNpNTBhVzFsY3k1c1pXNW5kR2dnTFNBeFhTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1SMWNtRjBhVzl1SUQwZ2RDd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnlhVzBvS1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbElEMGdNRHNnWlNBOElIUm9hWE11ZEhKaFkydHpMbXhsYm1kMGFEc2daU3NyS1hSb2FYTXVkSEpoWTJ0elcyVmRMblJ5YVcwb01Dd2dkR2hwY3k1a2RYSmhkR2x2YmlrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IyWVd4cFpHRjBaU2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUNFd093b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREE3SUhRZ1BDQjBhR2x6TG5SeVlXTnJjeTVzWlc1bmRHZzdJSFFyS3lsbElEMGdaU0FtSmlCMGFHbHpMblJ5WVdOcmMxdDBYUzUyWVd4cFpHRjBaU2dwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsT3dvZ0lDQWdmUW9nSUNBZ2IzQjBhVzFwZW1Vb0tTQjdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQmxJRDBnTURzZ1pTQThJSFJvYVhNdWRISmhZMnR6TG14bGJtZDBhRHNnWlNzcktYUm9hWE11ZEhKaFkydHpXMlZkTG05d2RHbHRhWHBsS0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJRnRkT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZENBOUlEQTdJSFFnUENCMGFHbHpMblJ5WVdOcmN5NXNaVzVuZEdnN0lIUXJLeWxsTG5CMWMyZ29kR2hwY3k1MGNtRmphM05iZEYwdVkyeHZibVVvS1NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QjBhR2x6TG1OdmJuTjBjblZqZEc5eUtIUm9hWE11Ym1GdFpTd2dkR2hwY3k1a2RYSmhkR2x2Yml3Z1pTd2dkR2hwY3k1aWJHVnVaRTF2WkdVcE93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdmJuTjBjblZqZEc5eUxuUnZTbE5QVGloMGFHbHpLVHNLSUNBZ0lIMEtmVHNLWm5WdVkzUnBiMjRnVTNnb2N6RXBJSHNLSUNBZ0lITjNhWFJqYUNoek1TNTBiMHh2ZDJWeVEyRnpaU2dwS1hzS0lDQWdJQ0FnSUNCallYTmxJQ0p6WTJGc1lYSWlPZ29nSUNBZ0lDQWdJR05oYzJVZ0ltUnZkV0pzWlNJNkNpQWdJQ0FnSUNBZ1kyRnpaU0FpWm14dllYUWlPZ29nSUNBZ0lDQWdJR05oYzJVZ0ltNTFiV0psY2lJNkNpQWdJQ0FnSUNBZ1kyRnpaU0FpYVc1MFpXZGxjaUk2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGN6c0tJQ0FnSUNBZ0lDQmpZWE5sSUNKMlpXTjBiM0lpT2dvZ0lDQWdJQ0FnSUdOaGMyVWdJblpsWTNSdmNqSWlPZ29nSUNBZ0lDQWdJR05oYzJVZ0luWmxZM1J2Y2pNaU9nb2dJQ0FnSUNBZ0lHTmhjMlVnSW5abFkzUnZjalFpT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuTTdDaUFnSUNBZ0lDQWdZMkZ6WlNBaVkyOXNiM0lpT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NHRTdDaUFnSUNBZ0lDQWdZMkZ6WlNBaWNYVmhkR1Z5Ym1sdmJpSTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3YVRzS0lDQWdJQ0FnSUNCallYTmxJQ0ppYjI5c0lqb0tJQ0FnSUNBZ0lDQmpZWE5sSUNKaWIyOXNaV0Z1SWpvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGWnVPd29nSUNBZ0lDQWdJR05oYzJVZ0luTjBjbWx1WnlJNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnJianNLSUNBZ0lIMEtJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWdpVkVoU1JVVXVTMlY1Wm5KaGJXVlVjbUZqYXpvZ1ZXNXpkWEJ3YjNKMFpXUWdkSGx3WlU1aGJXVTZJQ0lnS3lCek1TazdDbjBLWm5WdVkzUnBiMjRnWW5nb2N6RXBJSHNLSUNBZ0lHbG1JQ2h6TVM1MGVYQmxJRDA5UFNCMmIybGtJREFwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWdpVkVoU1JVVXVTMlY1Wm5KaGJXVlVjbUZqYXpvZ2RISmhZMnNnZEhsd1pTQjFibVJsWm1sdVpXUXNJR05oYmlCdWIzUWdjR0Z5YzJVaUtUc0tJQ0FnSUd4bGRDQmxJRDBnVTNnb2N6RXVkSGx3WlNrN0NpQWdJQ0JwWmlBb2N6RXVkR2x0WlhNZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdXMTBzSUc0Z1BTQmJYVHNLSUNBZ0lDQWdJQ0FrWXloek1TNXJaWGx6TENCMExDQnVMQ0FpZG1Gc2RXVWlLU3dnY3pFdWRHbHRaWE1nUFNCMExDQnpNUzUyWVd4MVpYTWdQU0J1T3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUdVdWNHRnljMlVnSVQwOUlIWnZhV1FnTUNBL0lHVXVjR0Z5YzJVb2N6RXBJRG9nYm1WM0lHVW9jekV1Ym1GdFpTd2djekV1ZEdsdFpYTXNJSE14TG5aaGJIVmxjeXdnY3pFdWFXNTBaWEp3YjJ4aGRHbHZiaWs3Q24wS2RtRnlJSE56SUQwZ2V3b2dJQ0FnWlc1aFlteGxaRG9nSVRFc0NpQWdJQ0JtYVd4bGN6b2dlMzBzQ2lBZ0lDQmhaR1E2SUdaMWJtTjBhVzl1S0hNeExDQmxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWxibUZpYkdWa0lDRTlQU0FoTVNBbUppQW9kR2hwY3k1bWFXeGxjMXR6TVYwZ1BTQmxLVHNLSUNBZ0lIMHNDaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLSE14S1NCN0NpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVpXNWhZbXhsWkNBaFBUMGdJVEVwSUhKbGRIVnliaUIwYUdsekxtWnBiR1Z6VzNNeFhUc0tJQ0FnSUgwc0NpQWdJQ0J5WlcxdmRtVTZJR1oxYm1OMGFXOXVLSE14S1NCN0NpQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb2FYTXVabWxzWlhOYmN6RmRPd29nSUNBZ2ZTd0tJQ0FnSUdOc1pXRnlPaUJtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbVpwYkdWeklEMGdlMzA3Q2lBZ0lDQjlDbjBzSUcxaElEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYmlsN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMQ0J5SUQwZ0lURXNJR0VnUFNBd0xDQnZJRDBnTUN3Z1l5d2diQ0E5SUZ0ZE93b2dJQ0FnSUNBZ0lIUm9hWE11YjI1VGRHRnlkQ0E5SUhadmFXUWdNQ3dnZEdocGN5NXZia3h2WVdRZ1BTQmxMQ0IwYUdsekxtOXVVSEp2WjNKbGMzTWdQU0IwTENCMGFHbHpMbTl1UlhKeWIzSWdQU0J1TENCMGFHbHpMbWwwWlcxVGRHRnlkQ0E5SUdaMWJtTjBhVzl1S0dncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYnlzckxDQnlJRDA5UFNBaE1TQW1KaUJwTG05dVUzUmhjblFnSVQwOUlIWnZhV1FnTUNBbUppQnBMbTl1VTNSaGNuUW9hQ3dnWVN3Z2J5a3NJSElnUFNBaE1Ec0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxtbDBaVzFGYm1RZ1BTQm1kVzVqZEdsdmJpaG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHRXJLeXdnYVM1dmJsQnliMmR5WlhOeklDRTlQU0IyYjJsa0lEQWdKaVlnYVM1dmJsQnliMmR5WlhOektHZ3NJR0VzSUc4cExDQmhJRDA5UFNCdklDWW1JQ2h5SUQwZ0lURXNJR2t1YjI1TWIyRmtJQ0U5UFNCMmIybGtJREFnSmlZZ2FTNXZia3h2WVdRb0tTazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NXBkR1Z0UlhKeWIzSWdQU0JtZFc1amRHbHZiaWhvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2t1YjI1RmNuSnZjaUFoUFQwZ2RtOXBaQ0F3SUNZbUlHa3ViMjVGY25KdmNpaG9LVHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbkpsYzI5c2RtVlZVa3dnUFNCbWRXNWpkR2x2Ymlob0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqSUQ4Z1l5aG9LU0E2SUdnN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1elpYUlZVa3hOYjJScFptbGxjaUE5SUdaMWJtTjBhVzl1S0dncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR01nUFNCb0xDQjBhR2x6T3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11WVdSa1NHRnVaR3hsY2lBOUlHWjFibU4wYVc5dUtHZ3NJSFVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHd3VjSFZ6YUNob0xDQjFLU3dnZEdocGN6c0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxuSmxiVzkyWlVoaGJtUnNaWElnUFNCbWRXNWpkR2x2Ymlob0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjFJRDBnYkM1cGJtUmxlRTltS0dncE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkU0FoUFQwZ0xURWdKaVlnYkM1emNHeHBZMlVvZFN3Z01pa3NJSFJvYVhNN0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1blpYUklZVzVrYkdWeUlEMGdablZ1WTNScGIyNG9hQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIVWdQU0F3TENCa0lEMGdiQzVzWlc1bmRHZzdJSFVnUENCa095QjFJQ3M5SURJcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1lnUFNCc1czVmRMQ0J0SUQwZ2JGdDFJQ3NnTVYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aaTVuYkc5aVlXd2dKaVlnS0dZdWJHRnpkRWx1WkdWNElEMGdNQ2tzSUdZdWRHVnpkQ2hvS1NrZ2NtVjBkWEp1SUcwN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lIMEtmU3dnUlhnZ1BTQnVaWGNnYldFc0lFUjBJRDBnWTJ4aGMzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NXRZVzVoWjJWeUlEMGdaU0FoUFQwZ2RtOXBaQ0F3SUQ4Z1pTQTZJRVY0TENCMGFHbHpMbU55YjNOelQzSnBaMmx1SUQwZ0ltRnViMjU1Ylc5MWN5SXNJSFJvYVhNdWQybDBhRU55WldSbGJuUnBZV3h6SUQwZ0lURXNJSFJvYVhNdWNHRjBhQ0E5SUNJaUxDQjBhR2x6TG5KbGMyOTFjbU5sVUdGMGFDQTlJQ0lpTENCMGFHbHpMbkpsY1hWbGMzUklaV0ZrWlhJZ1BTQjdmVHNLSUNBZ0lIMEtJQ0FnSUd4dllXUW9LU0I3ZlFvZ0lDQWdiRzloWkVGemVXNWpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0drc0lISXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JpNXNiMkZrS0dVc0lHa3NJSFFzSUhJcE93b2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ2ZRb2dJQ0FnY0dGeWMyVW9LU0I3ZlFvZ0lDQWdjMlYwUTNKdmMzTlBjbWxuYVc0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OeWIzTnpUM0pwWjJsdUlEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZkcGRHaERjbVZrWlc1MGFXRnNjeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkMmwwYUVOeVpXUmxiblJwWVd4eklEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZCaGRHZ29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQmhkR2dnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBVbVZ6YjNWeVkyVlFZWFJvS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WlhOdmRYSmpaVkJoZEdnZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwVW1WeGRXVnpkRWhsWVdSbGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVnhkV1Z6ZEVobFlXUmxjaUE5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDbjA3Q2tSMExrUkZSa0ZWVEZSZlRVRlVSVkpKUVV4ZlRrRk5SU0E5SUNKZlgwUkZSa0ZWVEZRaU93cDJZWElnWm00Z1BTQjdmU3dnVFdNZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVWeWNtOXlJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVcExDQjBhR2x6TG5KbGMzQnZibk5sSUQwZ2REc0tJQ0FnSUgwS2ZTd2djbTRnUFNCamJHRnpjeUJsZUhSbGJtUnpJRVIwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVcE93b2dJQ0FnZlFvZ0lDQWdiRzloWkNobExDQjBMQ0J1TENCcEtTQjdDaUFnSUNBZ0lDQWdaU0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaGxJRDBnSWlJcExDQjBhR2x6TG5CaGRHZ2dJVDA5SUhadmFXUWdNQ0FtSmlBb1pTQTlJSFJvYVhNdWNHRjBhQ0FySUdVcExDQmxJRDBnZEdocGN5NXRZVzVoWjJWeUxuSmxjMjlzZG1WVlVrd29aU2s3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0J6Y3k1blpYUW9aU2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tISWdJVDA5SUhadmFXUWdNQ2tnY21WMGRYSnVJSFJvYVhNdWJXRnVZV2RsY2k1cGRHVnRVM1JoY25Rb1pTa3NJSE5sZEZScGJXVnZkWFFvS0NrOVBuc0tJQ0FnSUNBZ0lDQWdJQ0FnZENBbUppQjBLSElwTENCMGFHbHpMbTFoYm1GblpYSXVhWFJsYlVWdVpDaGxLVHNLSUNBZ0lDQWdJQ0I5TENBd0tTd2djanNLSUNBZ0lDQWdJQ0JwWmlBb1ptNWJaVjBnSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JtYmx0bFhTNXdkWE5vS0hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVRHOWhaRG9nZEN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVVISnZaM0psYzNNNklHNHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZia1Z5Y205eU9pQnBDaUFnSUNBZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1p1VzJWZElEMGdXMTBzSUdadVcyVmRMbkIxYzJnb2V3b2dJQ0FnSUNBZ0lDQWdJQ0J2Ymt4dllXUTZJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHOXVVSEp2WjNKbGMzTTZJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lHOXVSWEp5YjNJNklHa0tJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJRzVsZHlCU1pYRjFaWE4wS0dVc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnYUdWaFpHVnljem9nYm1WM0lFaGxZV1JsY25Nb2RHaHBjeTV5WlhGMVpYTjBTR1ZoWkdWeUtTd0tJQ0FnSUNBZ0lDQWdJQ0FnWTNKbFpHVnVkR2xoYkhNNklIUm9hWE11ZDJsMGFFTnlaV1JsYm5ScFlXeHpJRDhnSW1sdVkyeDFaR1VpSURvZ0luTmhiV1V0YjNKcFoybHVJZ29nSUNBZ0lDQWdJSDBwTENCdklEMGdkR2hwY3k1dGFXMWxWSGx3WlN3Z1l5QTlJSFJvYVhNdWNtVnpjRzl1YzJWVWVYQmxPd29nSUNBZ0lDQWdJR1psZEdOb0tHRXBMblJvWlc0b0tHd3BQVDU3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzTG5OMFlYUjFjeUE5UFQwZ01qQXdJSHg4SUd3dWMzUmhkSFZ6SUQwOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JDNXpkR0YwZFhNZ1BUMDlJREFnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUdhV3hsVEc5aFpHVnlPaUJJVkZSUUlGTjBZWFIxY3lBd0lISmxZMlZwZG1Wa0xpSXBMQ0IwZVhCbGIyWWdVbVZoWkdGaWJHVlRkSEpsWVcwZ1BpQWlkU0lnZkh3Z2JDNWliMlI1SUQwOVBTQjJiMmxrSURBZ2ZId2diQzVpYjJSNUxtZGxkRkpsWVdSbGNpQTlQVDBnZG05cFpDQXdLU0J5WlhSMWNtNGdiRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb0lEMGdabTViWlYwc0lIVWdQU0JzTG1KdlpIa3VaMlYwVW1WaFpHVnlLQ2tzSUdRZ1BTQnNMbWhsWVdSbGNuTXVaMlYwS0NKRGIyNTBaVzUwTFV4bGJtZDBhQ0lwSUh4OElHd3VhR1ZoWkdWeWN5NW5aWFFvSWxndFJtbHNaUzFUYVhwbElpa3NJR1lnUFNCa0lEOGdjR0Z5YzJWSmJuUW9aQ2tnT2lBd0xDQnRJRDBnWmlBaFBUMGdNQ3dnWHlBOUlEQXNJR2NnUFNCdVpYY2dVbVZoWkdGaWJHVlRkSEpsWVcwb2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWVhKMElDaHdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFlvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnZGlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFV1Y21WaFpDZ3BMblJvWlc0b0tIc2daRzl1WlRvZ2VDQXNJSFpoYkhWbE9pQjVJQ0I5S1QwK2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDRLU0J3TG1Oc2IzTmxLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOGdLejBnZVM1aWVYUmxUR1Z1WjNSb093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWWlBOUlHNWxkeUJRY205bmNtVnpjMFYyWlc1MEtDSndjbTluY21WemN5SXNJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxibWQwYUVOdmJYQjFkR0ZpYkdVNklHMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyRmtaV1E2SUY4c0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjNSaGJEb2daZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCM0lEMGdNQ3dnVWlBOUlHZ3ViR1Z1WjNSb095QjNJRHdnVWpzZ2R5c3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JKSUQwZ2FGdDNYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFa3ViMjVRY205bmNtVnpjeUFtSmlCSkxtOXVVSEp2WjNKbGMzTW9ZaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NDNWxibkYxWlhWbEtIa3BMQ0IyS0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VtVnpjRzl1YzJVb1p5azdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0IwYUhKdmR5QnVaWGNnVFdNb1lHWmxkR05vSUdadmNpQWlKSHRzTG5WeWJIMGlJSEpsYzNCdmJtUmxaQ0IzYVhSb0lDUjdiQzV6ZEdGMGRYTjlPaUFrZTJ3dWMzUmhkSFZ6VkdWNGRIMWdMQ0JzS1RzS0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0Noc0tUMCtld29nSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdvWXlsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0poY25KaGVXSjFabVpsY2lJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHd3VZWEp5WVhsQ2RXWm1aWElvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbUpzYjJJaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnNMbUpzYjJJb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSW1SdlkzVnRaVzUwSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JDNTBaWGgwS0NrdWRHaGxiaWdvYUNrOVBtNWxkeUJFVDAxUVlYSnpaWElvS1M1d1lYSnpaVVp5YjIxVGRISnBibWNvYUN3Z2J5a3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaWFuTnZiaUk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUd3dWFuTnZiaWdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ieUE5UFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnYkM1MFpYaDBLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkU0E5SUM5amFHRnljMlYwUFNJL0tGdGVPeUpjYzEwcUtTSS9MMmt1WlhobFl5aHZLU3dnWkNBOUlIVWdKaVlnZFZzeFhTQS9JSFZiTVYwdWRHOU1iM2RsY2tOaGMyVW9LU0E2SUhadmFXUWdNQ3dnWmlBOUlHNWxkeUJVWlhoMFJHVmpiMlJsY2loa0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUd3dVlYSnlZWGxDZFdabVpYSW9LUzUwYUdWdUtDaHRLVDArWmk1a1pXTnZaR1VvYlNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMHBMblJvWlc0b0tHd3BQVDU3Q2lBZ0lDQWdJQ0FnSUNBZ0lITnpMbUZrWkNobExDQnNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2dnUFNCbWJsdGxYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUdadVcyVmRPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhVZ1BTQXdMQ0JrSUQwZ2FDNXNaVzVuZEdnN0lIVWdQQ0JrT3lCMUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdZZ1BTQm9XM1ZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmk1dmJreHZZV1FnSmlZZ1ppNXZia3h2WVdRb2JDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUtTNWpZWFJqYUNnb2JDazlQbnNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2dnUFNCbWJsdGxYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2dnUFQwOUlIWnZhV1FnTUNrZ2RHaHliM2NnZEdocGN5NXRZVzVoWjJWeUxtbDBaVzFGY25KdmNpaGxLU3dnYkRzS0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElHWnVXMlZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIVWdQU0F3TENCa0lEMGdhQzVzWlc1bmRHZzdJSFVnUENCa095QjFLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWWdQU0JvVzNWZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ppNXZia1Z5Y205eUlDWW1JR1l1YjI1RmNuSnZjaWhzS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTFoYm1GblpYSXVhWFJsYlVWeWNtOXlLR1VwT3dvZ0lDQWdJQ0FnSUgwcExtWnBibUZzYkhrb0tDazlQbnNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0WVc1aFoyVnlMbWwwWlcxRmJtUW9aU2s3Q2lBZ0lDQWdJQ0FnZlNrc0lIUm9hWE11YldGdVlXZGxjaTVwZEdWdFUzUmhjblFvWlNrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJTWlhOd2IyNXpaVlI1Y0dVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGMzQnZibk5sVkhsd1pTQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSTmFXMWxWSGx3WlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldsdFpWUjVjR1VnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUXA5TENCaGRTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1JIUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU2s3Q2lBZ0lDQjlDaUFnSUNCc2IyRmtLR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUhSb2FYTXNJR0VnUFNCdVpYY2djbTRvZEdocGN5NXRZVzVoWjJWeUtUc0tJQ0FnSUNBZ0lDQmhMbk5sZEZCaGRHZ29kR2hwY3k1d1lYUm9LU3dnWVM1elpYUlNaWEYxWlhOMFNHVmhaR1Z5S0hSb2FYTXVjbVZ4ZFdWemRFaGxZV1JsY2lrc0lHRXVjMlYwVjJsMGFFTnlaV1JsYm5ScFlXeHpLSFJvYVhNdWQybDBhRU55WldSbGJuUnBZV3h6S1N3Z1lTNXNiMkZrS0dVc0lHWjFibU4wYVc5dUtHOHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFFvY2k1d1lYSnpaU2hLVTA5T0xuQmhjbk5sS0c4cEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQeUJwS0dNcElEb2dZMjl1YzI5c1pTNWxjbkp2Y2loaktTd2djaTV0WVc1aFoyVnlMbWwwWlcxRmNuSnZjaWhsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBzSUc0c0lHa3BPd29nSUNBZ2ZRb2dJQ0FnY0dGeWMyVW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnVzEwN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNRHNnYmlBOElHVXViR1Z1WjNSb095QnVLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHbHpMbkJoY25ObEtHVmJibDBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBMbkIxYzJnb2FTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBPd29nSUNBZ2ZRcDlMQ0J2ZFNBOUlHTnNZWE56SUdWNGRHVnVaSE1nUkhRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb1pTazdDaUFnSUNCOUNpQWdJQ0JzYjJGa0tHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFJvYVhNc0lHRWdQU0JiWFN3Z2J5QTlJRzVsZHlCVmN5d2dZeUE5SUc1bGR5QnliaWgwYUdsekxtMWhibUZuWlhJcE93b2dJQ0FnSUNBZ0lHTXVjMlYwVUdGMGFDaDBhR2x6TG5CaGRHZ3BMQ0JqTG5ObGRGSmxjM0J2Ym5ObFZIbHdaU2dpWVhKeVlYbGlkV1ptWlhJaUtTd2dZeTV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLSFJvYVhNdWNtVnhkV1Z6ZEVobFlXUmxjaWtzSUdNdWMyVjBWMmwwYUVOeVpXUmxiblJwWVd4ektISXVkMmwwYUVOeVpXUmxiblJwWVd4ektUc0tJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlEQTdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhQ2gxS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR011Ykc5aFpDaGxXM1ZkTENCbWRXNWpkR2x2Ymloa0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlISXVjR0Z5YzJVb1pDd2dJVEFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVZ0MVhTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRG9nWmk1M2FXUjBhQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUdZdWFHVnBaMmgwTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjbTFoZERvZ1ppNW1iM0p0WVhRc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x3YldGd2N6b2daaTV0YVhCdFlYQnpDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMQ0JzSUNzOUlERXNJR3dnUFQwOUlEWWdKaVlnS0dZdWJXbHdiV0Z3UTI5MWJuUWdQVDA5SURFZ0ppWWdLRzh1YldsdVJtbHNkR1Z5SUQwZ2JYUXBMQ0J2TG1sdFlXZGxJRDBnWVN3Z2J5NW1iM0p0WVhRZ1BTQm1MbVp2Y20xaGRDd2dieTV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0IwSUNZbUlIUW9ieWtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlMQ0J1TENCcEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29aU2twSUdadmNpaHNaWFFnZFNBOUlEQXNJR1FnUFNCbExteGxibWQwYURzZ2RTQThJR1E3SUNzcmRTbG9LSFVwT3dvZ0lDQWdJQ0FnSUdWc2MyVWdZeTVzYjJGa0tHVXNJR1oxYm1OMGFXOXVLSFVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQnlMbkJoY25ObEtIVXNJQ0V3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dRdWFYTkRkV0psYldGd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlHUXViV2x3YldGd2N5NXNaVzVuZEdnZ0x5QmtMbTFwY0cxaGNFTnZkVzUwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J0SUQwZ01Ec2diU0E4SUdZN0lHMHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lWdHRYU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldsd2JXRndjem9nVzEwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWHlBOUlEQTdJRjhnUENCa0xtMXBjRzFoY0VOdmRXNTBPeUJmS3lzcFlWdHRYUzV0YVhCdFlYQnpMbkIxYzJnb1pDNXRhWEJ0WVhCelcyMGdLaUJrTG0xcGNHMWhjRU52ZFc1MElDc2dYMTBwTENCaFcyMWRMbVp2Y20xaGRDQTlJR1F1Wm05eWJXRjBMQ0JoVzIxZExuZHBaSFJvSUQwZ1pDNTNhV1IwYUN3Z1lWdHRYUzVvWldsbmFIUWdQU0JrTG1obGFXZG9kRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzh1YVcxaFoyVWdQU0JoT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2J5NXBiV0ZuWlM1M2FXUjBhQ0E5SUdRdWQybGtkR2dzSUc4dWFXMWhaMlV1YUdWcFoyaDBJRDBnWkM1b1pXbG5hSFFzSUc4dWJXbHdiV0Z3Y3lBOUlHUXViV2x3YldGd2N6c0tJQ0FnSUNBZ0lDQWdJQ0FnWkM1dGFYQnRZWEJEYjNWdWRDQTlQVDBnTVNBbUppQW9ieTV0YVc1R2FXeDBaWElnUFNCdGRDa3NJRzh1Wm05eWJXRjBJRDBnWkM1bWIzSnRZWFFzSUc4dWJtVmxaSE5WY0dSaGRHVWdQU0FoTUN3Z2RDQW1KaUIwS0c4cE93b2dJQ0FnSUNBZ0lIMHNJRzRzSUdrcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdk93b2dJQ0FnZlFwOUxDQnljeUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdSSFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlNrN0NpQWdJQ0I5Q2lBZ0lDQnNiMkZrS0dVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5CaGRHZ2dJVDA5SUhadmFXUWdNQ0FtSmlBb1pTQTlJSFJvYVhNdWNHRjBhQ0FySUdVcExDQmxJRDBnZEdocGN5NXRZVzVoWjJWeUxuSmxjMjlzZG1WVlVrd29aU2s3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0IwYUdsekxDQmhJRDBnYzNNdVoyVjBLR1VwT3dvZ0lDQWdJQ0FnSUdsbUlDaGhJQ0U5UFNCMmIybGtJREFwSUhKbGRIVnliaUJ5TG0xaGJtRm5aWEl1YVhSbGJWTjBZWEowS0dVcExDQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBJQ1ltSUhRb1lTa3NJSEl1YldGdVlXZGxjaTVwZEdWdFJXNWtLR1VwT3dvZ0lDQWdJQ0FnSUgwc0lEQXBMQ0JoT3dvZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnZDNNb0ltbHRaeUlwT3dvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdNb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdnb0tTd2djM011WVdSa0tHVXNJSFJvYVhNcExDQjBJQ1ltSUhRb2RHaHBjeWtzSUhJdWJXRnVZV2RsY2k1cGRHVnRSVzVrS0dVcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnNLSFVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhQ2dwTENCcElDWW1JR2tvZFNrc0lISXViV0Z1WVdkbGNpNXBkR1Z0UlhKeWIzSW9aU2tzSUhJdWJXRnVZV2RsY2k1cGRHVnRSVzVrS0dVcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQm9LQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnZMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSW14dllXUWlMQ0JqTENBaE1Ta3NJRzh1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnaVpYSnliM0lpTENCc0xDQWhNU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW14dllXUWlMQ0JqTENBaE1Ta3NJRzh1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpWlhKeWIzSWlMQ0JzTENBaE1Ta3NJR1V1YzJ4cFkyVW9NQ3dnTlNrZ0lUMDlJQ0prWVhSaE9pSWdKaVlnZEdocGN5NWpjbTl6YzA5eWFXZHBiaUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHZMbU55YjNOelQzSnBaMmx1SUQwZ2RHaHBjeTVqY205emMwOXlhV2RwYmlrc0lISXViV0Z1WVdkbGNpNXBkR1Z0VTNSaGNuUW9aU2tzSUc4dWMzSmpJRDBnWlN3Z2J6c0tJQ0FnSUgwS2ZTd2dZM1VnUFNCamJHRnpjeUJsZUhSbGJtUnpJRVIwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVcE93b2dJQ0FnZlFvZ0lDQWdiRzloWkNobExDQjBMQ0J1TENCcEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQnVaWGNnUzJrN0NpQWdJQ0FnSUNBZ2NpNWpiMnh2Y2xOd1lXTmxJRDBnZG5RN0NpQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCdVpYY2djbk1vZEdocGN5NXRZVzVoWjJWeUtUc0tJQ0FnSUNBZ0lDQmhMbk5sZEVOeWIzTnpUM0pwWjJsdUtIUm9hWE11WTNKdmMzTlBjbWxuYVc0cExDQmhMbk5sZEZCaGRHZ29kR2hwY3k1d1lYUm9LVHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJREE3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWXloc0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdFdWJHOWhaQ2hsVzJ4ZExDQm1kVzVqZEdsdmJpaG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5TG1sdFlXZGxjMXRzWFNBOUlHZ3NJRzhyS3l3Z2J5QTlQVDBnTmlBbUppQW9jaTV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0IwSUNZbUlIUW9jaWtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlMQ0IyYjJsa0lEQXNJR2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUd3Z1BTQXdPeUJzSUR3Z1pTNXNaVzVuZEdnN0lDc3JiQ2xqS0d3cE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCeU93b2dJQ0FnZlFwOUxDQnNkU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdSSFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlNrN0NpQWdJQ0I5Q2lBZ0lDQnNiMkZrS0dVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUm9hWE1zSUdFZ1BTQnVaWGNnYjJrc0lHOGdQU0J1WlhjZ2NtNG9kR2hwY3k1dFlXNWhaMlZ5S1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYnk1elpYUlNaWE53YjI1elpWUjVjR1VvSW1GeWNtRjVZblZtWm1WeUlpa3NJRzh1YzJWMFVtVnhkV1Z6ZEVobFlXUmxjaWgwYUdsekxuSmxjWFZsYzNSSVpXRmtaWElwTENCdkxuTmxkRkJoZEdnb2RHaHBjeTV3WVhSb0tTd2dieTV6WlhSWGFYUm9RM0psWkdWdWRHbGhiSE1vY2k1M2FYUm9RM0psWkdWdWRHbGhiSE1wTENCdkxteHZZV1FvWlN3Z1puVnVZM1JwYjI0b1l5a2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiRHNLSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3dnUFNCeUxuQmhjbk5sS0dNcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0FoUFQwZ2RtOXBaQ0F3S1NCcEtHZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lob0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdiQzVwYldGblpTQWhQVDBnZG05cFpDQXdJRDhnWVM1cGJXRm5aU0E5SUd3dWFXMWhaMlVnT2lCc0xtUmhkR0VnSVQwOUlIWnZhV1FnTUNBbUppQW9ZUzVwYldGblpTNTNhV1IwYUNBOUlHd3VkMmxrZEdnc0lHRXVhVzFoWjJVdWFHVnBaMmgwSUQwZ2JDNW9aV2xuYUhRc0lHRXVhVzFoWjJVdVpHRjBZU0E5SUd3dVpHRjBZU2tzSUdFdWQzSmhjRk1nUFNCc0xuZHlZWEJUSUNFOVBTQjJiMmxrSURBZ1B5QnNMbmR5WVhCVElEb2dTWFFzSUdFdWQzSmhjRlFnUFNCc0xuZHlZWEJVSUNFOVBTQjJiMmxrSURBZ1B5QnNMbmR5WVhCVUlEb2dTWFFzSUdFdWJXRm5SbWxzZEdWeUlEMGdiQzV0WVdkR2FXeDBaWElnSVQwOUlIWnZhV1FnTUNBL0lHd3ViV0ZuUm1sc2RHVnlJRG9nYlhRc0lHRXViV2x1Um1sc2RHVnlJRDBnYkM1dGFXNUdhV3gwWlhJZ0lUMDlJSFp2YVdRZ01DQS9JR3d1YldsdVJtbHNkR1Z5SURvZ2JYUXNJR0V1WVc1cGMyOTBjbTl3ZVNBOUlHd3VZVzVwYzI5MGNtOXdlU0FoUFQwZ2RtOXBaQ0F3SUQ4Z2JDNWhibWx6YjNSeWIzQjVJRG9nTVN3Z2JDNWpiMnh2Y2xOd1lXTmxJQ0U5UFNCMmIybGtJREFnUHlCaExtTnZiRzl5VTNCaFkyVWdQU0JzTG1OdmJHOXlVM0JoWTJVZ09pQnNMbVZ1WTI5a2FXNW5JQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVaVzVqYjJScGJtY2dQU0JzTG1WdVkyOWthVzVuS1N3Z2JDNW1iR2x3V1NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hoTG1ac2FYQlpJRDBnYkM1bWJHbHdXU2tzSUd3dVptOXliV0YwSUNFOVBTQjJiMmxrSURBZ0ppWWdLR0V1Wm05eWJXRjBJRDBnYkM1bWIzSnRZWFFwTENCc0xuUjVjR1VnSVQwOUlIWnZhV1FnTUNBbUppQW9ZUzUwZVhCbElEMGdiQzUwZVhCbEtTd2diQzV0YVhCdFlYQnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXViV2x3YldGd2N5QTlJR3d1Yldsd2JXRndjeXdnWVM1dGFXNUdhV3gwWlhJZ1BTQnNhU2tzSUd3dWJXbHdiV0Z3UTI5MWJuUWdQVDA5SURFZ0ppWWdLR0V1YldsdVJtbHNkR1Z5SUQwZ2JYUXBMQ0JzTG1kbGJtVnlZWFJsVFdsd2JXRndjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaGhMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJR3d1WjJWdVpYSmhkR1ZOYVhCdFlYQnpLU3dnWVM1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCMElDWW1JSFFvWVN3Z2JDazdDaUFnSUNBZ0lDQWdmU3dnYml3Z2FTa3NJR0U3Q2lBZ0lDQjlDbjBzSUdoMUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCRWRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxLVHNLSUNBZ0lIMEtJQ0FnSUd4dllXUW9aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnYm1WM0lGTjBMQ0JoSUQwZ2JtVjNJSEp6S0hSb2FYTXViV0Z1WVdkbGNpazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRXVjMlYwUTNKdmMzTlBjbWxuYVc0b2RHaHBjeTVqY205emMwOXlhV2RwYmlrc0lHRXVjMlYwVUdGMGFDaDBhR2x6TG5CaGRHZ3BMQ0JoTG14dllXUW9aU3dnWm5WdVkzUnBiMjRvYnlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5TG1sdFlXZGxJRDBnYnl3Z2NpNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQjBJQ0U5UFNCMmIybGtJREFnSmlZZ2RDaHlLVHNLSUNBZ0lDQWdJQ0I5TENCdUxDQnBLU3dnY2pzS0lDQWdJSDBLZlN3Z1JXNGdQU0JqYkdGemN5QmxlSFJsYm1SeklFcGxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRZ1BTQXhLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BMQ0IwYUdsekxtbHpUR2xuYUhRZ1BTQWhNQ3dnZEdocGN5NTBlWEJsSUQwZ0lreHBaMmgwSWl3Z2RHaHBjeTVqYjJ4dmNpQTlJRzVsZHlCd1pTaGxLU3dnZEdocGN5NXBiblJsYm5OcGRIa2dQU0IwT3dvZ0lDQWdmUW9nSUNBZ1pHbHpjRzl6WlNncElIdDlDaUFnSUNCamIzQjVLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxMQ0IwS1N3Z2RHaHBjeTVqYjJ4dmNpNWpiM0I1S0dVdVkyOXNiM0lwTENCMGFHbHpMbWx1ZEdWdWMybDBlU0E5SUdVdWFXNTBaVzV6YVhSNUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RHOUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlITjFjR1Z5TG5SdlNsTlBUaWhsS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEM1dlltcGxZM1F1WTI5c2IzSWdQU0IwYUdsekxtTnZiRzl5TG1kbGRFaGxlQ2dwTENCMExtOWlhbVZqZEM1cGJuUmxibk5wZEhrZ1BTQjBhR2x6TG1sdWRHVnVjMmwwZVN3Z2RHaHBjeTVuY205MWJtUkRiMnh2Y2lBaFBUMGdkbTlwWkNBd0lDWW1JQ2gwTG05aWFtVmpkQzVuY205MWJtUkRiMnh2Y2lBOUlIUm9hWE11WjNKdmRXNWtRMjlzYjNJdVoyVjBTR1Y0S0NrcExDQjBhR2x6TG1ScGMzUmhibU5sSUNFOVBTQjJiMmxrSURBZ0ppWWdLSFF1YjJKcVpXTjBMbVJwYzNSaGJtTmxJRDBnZEdocGN5NWthWE4wWVc1alpTa3NJSFJvYVhNdVlXNW5iR1VnSVQwOUlIWnZhV1FnTUNBbUppQW9kQzV2WW1wbFkzUXVZVzVuYkdVZ1BTQjBhR2x6TG1GdVoyeGxLU3dnZEdocGN5NWtaV05oZVNBaFBUMGdkbTlwWkNBd0lDWW1JQ2gwTG05aWFtVmpkQzVrWldOaGVTQTlJSFJvYVhNdVpHVmpZWGtwTENCMGFHbHpMbkJsYm5WdFluSmhJQ0U5UFNCMmIybGtJREFnSmlZZ0tIUXViMkpxWldOMExuQmxiblZ0WW5KaElEMGdkR2hwY3k1d1pXNTFiV0p5WVNrc0lIUm9hWE11YzJoaFpHOTNJQ0U5UFNCMmIybGtJREFnSmlZZ0tIUXViMkpxWldOMExuTm9ZV1J2ZHlBOUlIUm9hWE11YzJoaFpHOTNMblJ2U2xOUFRpZ3BLU3dnZERzS0lDQWdJSDBLZlN3Z1UyTWdQU0JqYkdGemN5QmxlSFJsYm1SeklFVnVJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHBld29nSUNBZ0lDQWdJSE4xY0dWeUtHVXNJRzRwTENCMGFHbHpMbWx6U0dWdGFYTndhR1Z5WlV4cFoyaDBJRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pJWlcxcGMzQm9aWEpsVEdsbmFIUWlMQ0IwYUdsekxuQnZjMmwwYVc5dUxtTnZjSGtvU21VdVJFVkdRVlZNVkY5VlVDa3NJSFJvYVhNdWRYQmtZWFJsVFdGMGNtbDRLQ2tzSUhSb2FYTXVaM0p2ZFc1a1EyOXNiM0lnUFNCdVpYY2djR1VvZENrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsTENCMEtTd2dkR2hwY3k1bmNtOTFibVJEYjJ4dmNpNWpiM0I1S0dVdVozSnZkVzVrUTI5c2IzSXBMQ0IwYUdsek93b2dJQ0FnZlFwOUxDQnZieUE5SUc1bGR5QjZaU3dnZFhVZ1BTQnVaWGNnUVN3Z1pIVWdQU0J1WlhjZ1FTd2dlbk1nUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCMGFHbHpMbU5oYldWeVlTQTlJR1VzSUhSb2FYTXVZbWxoY3lBOUlEQXNJSFJvYVhNdWJtOXliV0ZzUW1saGN5QTlJREFzSUhSb2FYTXVjbUZrYVhWeklEMGdNU3dnZEdocGN5NWliSFZ5VTJGdGNHeGxjeUE5SURnc0lIUm9hWE11YldGd1UybDZaU0E5SUc1bGR5QmFLRFV4TWl3Z05URXlLU3dnZEdocGN5NXRZWEFnUFNCdWRXeHNMQ0IwYUdsekxtMWhjRkJoYzNNZ1BTQnVkV3hzTENCMGFHbHpMbTFoZEhKcGVDQTlJRzVsZHlCNlpTd2dkR2hwY3k1aGRYUnZWWEJrWVhSbElEMGdJVEFzSUhSb2FYTXVibVZsWkhOVmNHUmhkR1VnUFNBaE1Td2dkR2hwY3k1ZlpuSjFjM1IxYlNBOUlHNWxkeUJRY3l3Z2RHaHBjeTVmWm5KaGJXVkZlSFJsYm5SeklEMGdibVYzSUZvb01Td2dNU2tzSUhSb2FYTXVYM1pwWlhkd2IzSjBRMjkxYm5RZ1BTQXhMQ0IwYUdsekxsOTJhV1YzY0c5eWRITWdQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJxWlNnd0xDQXdMQ0F4TENBeEtRb2dJQ0FnSUNBZ0lGMDdDaUFnSUNCOUNpQWdJQ0JuWlhSV2FXVjNjRzl5ZEVOdmRXNTBLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTJhV1YzY0c5eWRFTnZkVzUwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBSbkoxYzNSMWJTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlpuSjFjM1IxYlRzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlUxaGRISnBZMlZ6S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WTJGdFpYSmhMQ0J1SUQwZ2RHaHBjeTV0WVhSeWFYZzdDaUFnSUNBZ0lDQWdkWFV1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtHVXViV0YwY21sNFYyOXliR1FwTENCMExuQnZjMmwwYVc5dUxtTnZjSGtvZFhVcExDQmtkUzV6WlhSR2NtOXRUV0YwY21sNFVHOXphWFJwYjI0b1pTNTBZWEpuWlhRdWJXRjBjbWw0VjI5eWJHUXBMQ0IwTG14dmIydEJkQ2hrZFNrc0lIUXVkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9LU3dnYjI4dWJYVnNkR2x3YkhsTllYUnlhV05sY3loMExuQnliMnBsWTNScGIyNU5ZWFJ5YVhnc0lIUXViV0YwY21sNFYyOXliR1JKYm5abGNuTmxLU3dnZEdocGN5NWZabkoxYzNSMWJTNXpaWFJHY205dFVISnZhbVZqZEdsdmJrMWhkSEpwZUNodmJ5a3NJRzR1YzJWMEtDNDFMQ0F3TENBd0xDQXVOU3dnTUN3Z0xqVXNJREFzSUM0MUxDQXdMQ0F3TENBdU5Td2dMalVzSURBc0lEQXNJREFzSURFcExDQnVMbTExYkhScGNHeDVLRzl2S1RzS0lDQWdJSDBLSUNBZ0lHZGxkRlpwWlhkd2IzSjBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkbWxsZDNCdmNuUnpXMlZkT3dvZ0lDQWdmUW9nSUNBZ1oyVjBSbkpoYldWRmVIUmxiblJ6S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDltY21GdFpVVjRkR1Z1ZEhNN0NpQWdJQ0I5Q2lBZ0lDQmthWE53YjNObEtDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWJXRndJQ1ltSUhSb2FYTXViV0Z3TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTV0WVhCUVlYTnpJQ1ltSUhSb2FYTXViV0Z3VUdGemN5NWthWE53YjNObEtDazdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1allXMWxjbUVnUFNCbExtTmhiV1Z5WVM1amJHOXVaU2dwTENCMGFHbHpMbUpwWVhNZ1BTQmxMbUpwWVhNc0lIUm9hWE11Y21Ga2FYVnpJRDBnWlM1eVlXUnBkWE1zSUhSb2FYTXViV0Z3VTJsNlpTNWpiM0I1S0dVdWJXRndVMmw2WlNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb0tTNWpiM0I1S0hSb2FYTXBPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZTMwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZbWxoY3lBaFBUMGdNQ0FtSmlBb1pTNWlhV0Z6SUQwZ2RHaHBjeTVpYVdGektTd2dkR2hwY3k1dWIzSnRZV3hDYVdGeklDRTlQU0F3SUNZbUlDaGxMbTV2Y20xaGJFSnBZWE1nUFNCMGFHbHpMbTV2Y20xaGJFSnBZWE1wTENCMGFHbHpMbkpoWkdsMWN5QWhQVDBnTVNBbUppQW9aUzV5WVdScGRYTWdQU0IwYUdsekxuSmhaR2wxY3lrc0lDaDBhR2x6TG0xaGNGTnBlbVV1ZUNBaFBUMGdOVEV5SUh4OElIUm9hWE11YldGd1UybDZaUzU1SUNFOVBTQTFNVElwSUNZbUlDaGxMbTFoY0ZOcGVtVWdQU0IwYUdsekxtMWhjRk5wZW1VdWRHOUJjbkpoZVNncEtTd2daUzVqWVcxbGNtRWdQU0IwYUdsekxtTmhiV1Z5WVM1MGIwcFRUMDRvSVRFcExtOWlhbVZqZEN3Z1pHVnNaWFJsSUdVdVkyRnRaWEpoTG0xaGRISnBlQ3dnWlRzS0lDQWdJSDBLZlN3Z1ltTWdQU0JqYkdGemN5QmxlSFJsYm1SeklIcHpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9ibVYzSUhsMEtEVXdMQ0F4TENBdU5Td2dOVEF3S1Nrc0lIUm9hWE11YVhOVGNHOTBUR2xuYUhSVGFHRmtiM2NnUFNBaE1Dd2dkR2hwY3k1bWIyTjFjeUE5SURFN0NpQWdJQ0I5Q2lBZ0lDQjFjR1JoZEdWTllYUnlhV05sY3lobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1OaGJXVnlZU3dnYmlBOUlGcHBJQ29nTWlBcUlHVXVZVzVuYkdVZ0tpQjBhR2x6TG1adlkzVnpMQ0JwSUQwZ2RHaHBjeTV0WVhCVGFYcGxMbmRwWkhSb0lDOGdkR2hwY3k1dFlYQlRhWHBsTG1obGFXZG9kQ3dnY2lBOUlHVXVaR2x6ZEdGdVkyVWdmSHdnZEM1bVlYSTdDaUFnSUNBZ0lDQWdLRzRnSVQwOUlIUXVabTkySUh4OElHa2dJVDA5SUhRdVlYTndaV04wSUh4OElISWdJVDA5SUhRdVptRnlLU0FtSmlBb2RDNW1iM1lnUFNCdUxDQjBMbUZ6Y0dWamRDQTlJR2tzSUhRdVptRnlJRDBnY2l3Z2RDNTFjR1JoZEdWUWNtOXFaV04wYVc5dVRXRjBjbWw0S0NrcExDQnpkWEJsY2k1MWNHUmhkR1ZOWVhSeWFXTmxjeWhsS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtWnZZM1Z6SUQwZ1pTNW1iMk4xY3l3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnUldNZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVWdUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0Z1BTQXdMQ0JwSUQwZ1RXRjBhQzVRU1NBdklETXNJSElnUFNBd0xDQmhJRDBnTWlsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlN3Z2RDa3NJSFJvYVhNdWFYTlRjRzkwVEdsbmFIUWdQU0FoTUN3Z2RHaHBjeTUwZVhCbElEMGdJbE53YjNSTWFXZG9kQ0lzSUhSb2FYTXVjRzl6YVhScGIyNHVZMjl3ZVNoS1pTNUVSVVpCVlV4VVgxVlFLU3dnZEdocGN5NTFjR1JoZEdWTllYUnlhWGdvS1N3Z2RHaHBjeTUwWVhKblpYUWdQU0J1WlhjZ1NtVXNJSFJvYVhNdVpHbHpkR0Z1WTJVZ1BTQnVMQ0IwYUdsekxtRnVaMnhsSUQwZ2FTd2dkR2hwY3k1d1pXNTFiV0p5WVNBOUlISXNJSFJvYVhNdVpHVmpZWGtnUFNCaExDQjBhR2x6TG0xaGNDQTlJRzUxYkd3c0lIUm9hWE11YzJoaFpHOTNJRDBnYm1WM0lHSmpPd29nSUNBZ2ZRb2dJQ0FnWjJWMElIQnZkMlZ5S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWx1ZEdWdWMybDBlU0FxSUUxaGRHZ3VVRWs3Q2lBZ0lDQjlDaUFnSUNCelpYUWdjRzkzWlhJb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdWFXNTBaVzV6YVhSNUlEMGdaU0F2SUUxaGRHZ3VVRWs3Q2lBZ0lDQjlDaUFnSUNCa2FYTndiM05sS0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YzJoaFpHOTNMbVJwYzNCdmMyVW9LVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXNJSFFwTENCMGFHbHpMbVJwYzNSaGJtTmxJRDBnWlM1a2FYTjBZVzVqWlN3Z2RHaHBjeTVoYm1kc1pTQTlJR1V1WVc1bmJHVXNJSFJvYVhNdWNHVnVkVzFpY21FZ1BTQmxMbkJsYm5WdFluSmhMQ0IwYUdsekxtUmxZMkY1SUQwZ1pTNWtaV05oZVN3Z2RHaHBjeTUwWVhKblpYUWdQU0JsTG5SaGNtZGxkQzVqYkc5dVpTZ3BMQ0IwYUdsekxuTm9ZV1J2ZHlBOUlHVXVjMmhoWkc5M0xtTnNiMjVsS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDbjBzSUdaMUlEMGdibVYzSUhwbExDQmZjeUE5SUc1bGR5QkJMQ0JqYnlBOUlHNWxkeUJCTENCVVl5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ2VuTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaHVaWGNnZVhRb09UQXNJREVzSUM0MUxDQTFNREFwS1N3Z2RHaHBjeTVwYzFCdmFXNTBUR2xuYUhSVGFHRmtiM2NnUFNBaE1Dd2dkR2hwY3k1ZlpuSmhiV1ZGZUhSbGJuUnpJRDBnYm1WM0lGb29OQ3dnTWlrc0lIUm9hWE11WDNacFpYZHdiM0owUTI5MWJuUWdQU0EyTENCMGFHbHpMbDkyYVdWM2NHOXlkSE1nUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCcVpTZ3lMQ0F4TENBeExDQXhLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJR3BsS0RBc0lERXNJREVzSURFcExBb2dJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ2FtVW9NeXdnTVN3Z01Td2dNU2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJxWlNneExDQXhMQ0F4TENBeEtTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lHcGxLRE1zSURBc0lERXNJREVwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnYW1Vb01Td2dNQ3dnTVN3Z01Ta0tJQ0FnSUNBZ0lDQmRMQ0IwYUdsekxsOWpkV0psUkdseVpXTjBhVzl1Y3lBOUlGc0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lFRW9NU3dnTUN3Z01Da3NDaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QkJLQzB4TENBd0xDQXdLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRUVvTUN3Z01Dd2dNU2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJCS0RBc0lEQXNJQzB4S1N3S0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUVFb01Dd2dNU3dnTUNrc0NpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCQktEQXNJQzB4TENBd0tRb2dJQ0FnSUNBZ0lGMHNJSFJvYVhNdVgyTjFZbVZWY0hNZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QkJLREFzSURFc0lEQXBMQW9nSUNBZ0lDQWdJQ0FnSUNCdVpYY2dRU2d3TENBeExDQXdLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRUVvTUN3Z01Td2dNQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJCS0RBc0lERXNJREFwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnUVNnd0xDQXdMQ0F4S1N3S0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUVFb01Dd2dNQ3dnTFRFcENpQWdJQ0FnSUNBZ1hUc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpVMWhkSEpwWTJWektHVXNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1OaGJXVnlZU3dnYVNBOUlIUm9hWE11YldGMGNtbDRMQ0J5SUQwZ1pTNWthWE4wWVc1alpTQjhmQ0J1TG1aaGNqc0tJQ0FnSUNBZ0lDQnlJQ0U5UFNCdUxtWmhjaUFtSmlBb2JpNW1ZWElnUFNCeUxDQnVMblZ3WkdGMFpWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb0tTa3NJRjl6TG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaGxMbTFoZEhKcGVGZHZjbXhrS1N3Z2JpNXdiM05wZEdsdmJpNWpiM0I1S0Y5ektTd2dZMjh1WTI5d2VTaHVMbkJ2YzJsMGFXOXVLU3dnWTI4dVlXUmtLSFJvYVhNdVgyTjFZbVZFYVhKbFkzUnBiMjV6VzNSZEtTd2diaTUxY0M1amIzQjVLSFJvYVhNdVgyTjFZbVZWY0hOYmRGMHBMQ0J1TG14dmIydEJkQ2hqYnlrc0lHNHVkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9LU3dnYVM1dFlXdGxWSEpoYm5Oc1lYUnBiMjRvTFY5ekxuZ3NJQzFmY3k1NUxDQXRYM011ZWlrc0lHWjFMbTExYkhScGNHeDVUV0YwY21salpYTW9iaTV3Y205cVpXTjBhVzl1VFdGMGNtbDRMQ0J1TG0xaGRISnBlRmR2Y214a1NXNTJaWEp6WlNrc0lIUm9hWE11WDJaeWRYTjBkVzB1YzJWMFJuSnZiVkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ29ablVwT3dvZ0lDQWdmUXA5TENCM1l5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1JXNGdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2JpQTlJREFzSUdrZ1BTQXlLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxMQ0IwS1N3Z2RHaHBjeTVwYzFCdmFXNTBUR2xuYUhRZ1BTQWhNQ3dnZEdocGN5NTBlWEJsSUQwZ0lsQnZhVzUwVEdsbmFIUWlMQ0IwYUdsekxtUnBjM1JoYm1ObElEMGdiaXdnZEdocGN5NWtaV05oZVNBOUlHa3NJSFJvYVhNdWMyaGhaRzkzSUQwZ2JtVjNJRlJqT3dvZ0lDQWdmUW9nSUNBZ1oyVjBJSEJ2ZDJWeUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1sdWRHVnVjMmwwZVNBcUlEUWdLaUJOWVhSb0xsQkpPd29nSUNBZ2ZRb2dJQ0FnYzJWMElIQnZkMlZ5S0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1sdWRHVnVjMmwwZVNBOUlHVWdMeUFvTkNBcUlFMWhkR2d1VUVrcE93b2dJQ0FnZlFvZ0lDQWdaR2x6Y0c5elpTZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuTm9ZV1J2ZHk1a2FYTndiM05sS0NrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsTENCMEtTd2dkR2hwY3k1a2FYTjBZVzVqWlNBOUlHVXVaR2x6ZEdGdVkyVXNJSFJvYVhNdVpHVmpZWGtnUFNCbExtUmxZMkY1TENCMGFHbHpMbk5vWVdSdmR5QTlJR1V1YzJoaFpHOTNMbU5zYjI1bEtDa3NJSFJvYVhNN0NpQWdJQ0I5Q24wc0lFRmpJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QjZjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLRzVsZHlCTWN5Z3ROU3dnTlN3Z05Td2dMVFVzSUM0MUxDQTFNREFwS1N3Z2RHaHBjeTVwYzBScGNtVmpkR2x2Ym1Gc1RHbG5hSFJUYUdGa2IzY2dQU0FoTURzS0lDQWdJSDBLZlN3Z1VtTWdQU0JqYkdGemN5QmxlSFJsYm1SeklFVnVJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVc0lIUXBMQ0IwYUdsekxtbHpSR2x5WldOMGFXOXVZV3hNYVdkb2RDQTlJQ0V3TENCMGFHbHpMblI1Y0dVZ1BTQWlSR2x5WldOMGFXOXVZV3hNYVdkb2RDSXNJSFJvYVhNdWNHOXphWFJwYjI0dVkyOXdlU2hLWlM1RVJVWkJWVXhVWDFWUUtTd2dkR2hwY3k1MWNHUmhkR1ZOWVhSeWFYZ29LU3dnZEdocGN5NTBZWEpuWlhRZ1BTQnVaWGNnU21Vc0lIUm9hWE11YzJoaFpHOTNJRDBnYm1WM0lFRmpPd29nSUNBZ2ZRb2dJQ0FnWkdsemNHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbk5vWVdSdmR5NWthWE53YjNObEtDazdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTUwWVhKblpYUWdQU0JsTG5SaGNtZGxkQzVqYkc5dVpTZ3BMQ0IwYUdsekxuTm9ZV1J2ZHlBOUlHVXVjMmhoWkc5M0xtTnNiMjVsS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDbjBzSUVOaklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCRmJpQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMEtTd2dkR2hwY3k1cGMwRnRZbWxsYm5STWFXZG9kQ0E5SUNFd0xDQjBhR2x6TG5SNWNHVWdQU0FpUVcxaWFXVnVkRXhwWjJoMElqc0tJQ0FnSUgwS2ZTd2dVR01nUFNCamJHRnpjeUJsZUhSbGJtUnpJRVZ1SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRnUFNBeE1Dd2dhU0E5SURFd0tYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBLU3dnZEdocGN5NXBjMUpsWTNSQmNtVmhUR2xuYUhRZ1BTQWhNQ3dnZEdocGN5NTBlWEJsSUQwZ0lsSmxZM1JCY21WaFRHbG5hSFFpTENCMGFHbHpMbmRwWkhSb0lEMGdiaXdnZEdocGN5NW9aV2xuYUhRZ1BTQnBPd29nSUNBZ2ZRb2dJQ0FnWjJWMElIQnZkMlZ5S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWx1ZEdWdWMybDBlU0FxSUhSb2FYTXVkMmxrZEdnZ0tpQjBhR2x6TG1obGFXZG9kQ0FxSUUxaGRHZ3VVRWs3Q2lBZ0lDQjlDaUFnSUNCelpYUWdjRzkzWlhJb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdWFXNTBaVzV6YVhSNUlEMGdaU0F2SUNoMGFHbHpMbmRwWkhSb0lDb2dkR2hwY3k1b1pXbG5hSFFnS2lCTllYUm9MbEJKS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxuZHBaSFJvSUQwZ1pTNTNhV1IwYUN3Z2RHaHBjeTVvWldsbmFIUWdQU0JsTG1obGFXZG9kQ3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0J6ZFhCbGNpNTBiMHBUVDA0b1pTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUXViMkpxWldOMExuZHBaSFJvSUQwZ2RHaHBjeTUzYVdSMGFDd2dkQzV2WW1wbFkzUXVhR1ZwWjJoMElEMGdkR2hwY3k1b1pXbG5hSFFzSUhRN0NpQWdJQ0I5Q24wc0lFeGpJRDBnWTJ4aGMzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LWHNLSUNBZ0lDQWdJQ0IwYUdsekxtbHpVM0JvWlhKcFkyRnNTR0Z5Ylc5dWFXTnpNeUE5SUNFd0xDQjBhR2x6TG1OdlpXWm1hV05wWlc1MGN5QTlJRnRkT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWlNBOUlEQTdJR1VnUENBNU95QmxLeXNwZEdocGN5NWpiMlZtWm1samFXVnVkSE11Y0hWemFDaHVaWGNnUVNrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFvWlNrZ2V3b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREE3SUhRZ1BDQTVPeUIwS3lzcGRHaHBjeTVqYjJWbVptbGphV1Z1ZEhOYmRGMHVZMjl3ZVNobFczUmRLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIcGxjbThvS1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbElEMGdNRHNnWlNBOElEazdJR1VyS3lsMGFHbHpMbU52WldabWFXTnBaVzUwYzF0bFhTNXpaWFFvTUN3Z01Dd2dNQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJCZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0JsTG5nc0lHa2dQU0JsTG5rc0lISWdQU0JsTG5vc0lHRWdQU0IwYUdsekxtTnZaV1ptYVdOcFpXNTBjenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQzVqYjNCNUtHRmJNRjBwTG0xMWJIUnBjR3g1VTJOaGJHRnlLQzR5T0RJd09UVXBMQ0IwTG1Ga1pGTmpZV3hsWkZabFkzUnZjaWhoV3pGZExDQXVORGc0TmpBeklDb2dhU2tzSUhRdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0dGYk1sMHNJQzQwT0RnMk1ETWdLaUJ5S1N3Z2RDNWhaR1JUWTJGc1pXUldaV04wYjNJb1lWc3pYU3dnTGpRNE9EWXdNeUFxSUc0cExDQjBMbUZrWkZOallXeGxaRlpsWTNSdmNpaGhXelJkTENBeExqQTVNalUwT0NBcUlDaHVJQ29nYVNrcExDQjBMbUZrWkZOallXeGxaRlpsWTNSdmNpaGhXelZkTENBeExqQTVNalUwT0NBcUlDaHBJQ29nY2lrcExDQjBMbUZrWkZOallXeGxaRlpsWTNSdmNpaGhXelpkTENBdU16RTFNemt5SUNvZ0tETWdLaUJ5SUNvZ2NpQXRJREVwS1N3Z2RDNWhaR1JUWTJGc1pXUldaV04wYjNJb1lWczNYU3dnTVM0d09USTFORGdnS2lBb2JpQXFJSElwS1N3Z2RDNWhaR1JUWTJGc1pXUldaV04wYjNJb1lWczRYU3dnTGpVME5qSTNOQ0FxSUNodUlDb2diaUF0SUdrZ0tpQnBLU2tzSUhRN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJKY25KaFpHbGhibU5sUVhRb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnWlM1NExDQnBJRDBnWlM1NUxDQnlJRDBnWlM1NkxDQmhJRDBnZEdocGN5NWpiMlZtWm1samFXVnVkSE03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFF1WTI5d2VTaGhXekJkS1M1dGRXeDBhWEJzZVZOallXeGhjaWd1T0RnMk1qSTNLU3dnZEM1aFpHUlRZMkZzWldSV1pXTjBiM0lvWVZzeFhTd2dNaUFxSUM0MU1URTJOalFnS2lCcEtTd2dkQzVoWkdSVFkyRnNaV1JXWldOMGIzSW9ZVnN5WFN3Z01pQXFJQzQxTVRFMk5qUWdLaUJ5S1N3Z2RDNWhaR1JUWTJGc1pXUldaV04wYjNJb1lWc3pYU3dnTWlBcUlDNDFNVEUyTmpRZ0tpQnVLU3dnZEM1aFpHUlRZMkZzWldSV1pXTjBiM0lvWVZzMFhTd2dNaUFxSUM0ME1qa3dORE1nS2lCdUlDb2dhU2tzSUhRdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0dGYk5WMHNJRElnS2lBdU5ESTVNRFF6SUNvZ2FTQXFJSElwTENCMExtRmtaRk5qWVd4bFpGWmxZM1J2Y2loaFd6WmRMQ0F1TnpRek1USTFJQ29nY2lBcUlISWdMU0F1TWpRM056QTRLU3dnZEM1aFpHUlRZMkZzWldSV1pXTjBiM0lvWVZzM1hTd2dNaUFxSUM0ME1qa3dORE1nS2lCdUlDb2djaWtzSUhRdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0dGYk9GMHNJQzQwTWprd05ETWdLaUFvYmlBcUlHNGdMU0JwSUNvZ2FTa3BMQ0IwT3dvZ0lDQWdmUW9nSUNBZ1lXUmtLR1VwSUhzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhRZ1BTQXdPeUIwSUR3Z09Uc2dkQ3NyS1hSb2FYTXVZMjlsWm1acFkybGxiblJ6VzNSZExtRmtaQ2hsTG1OdlpXWm1hV05wWlc1MGMxdDBYU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmhaR1JUWTJGc1pXUlRTQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnVJRDBnTURzZ2JpQThJRGs3SUc0ckt5bDBhR2x6TG1OdlpXWm1hV05wWlc1MGMxdHVYUzVoWkdSVFkyRnNaV1JXWldOMGIzSW9aUzVqYjJWbVptbGphV1Z1ZEhOYmJsMHNJSFFwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMk5oYkdVb1pTa2dld29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBN0lIUWdQQ0E1T3lCMEt5c3BkR2hwY3k1amIyVm1abWxqYVdWdWRITmJkRjB1YlhWc2RHbHdiSGxUWTJGc1lYSW9aU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnNaWEp3S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd095QnVJRHdnT1RzZ2Jpc3JLWFJvYVhNdVkyOWxabVpwWTJsbGJuUnpXMjVkTG14bGNuQW9aUzVqYjJWbVptbGphV1Z1ZEhOYmJsMHNJSFFwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWEYxWVd4ektHVXBJSHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd095QjBJRHdnT1RzZ2RDc3JLV2xtSUNnaGRHaHBjeTVqYjJWbVptbGphV1Z1ZEhOYmRGMHVaWEYxWVd4ektHVXVZMjlsWm1acFkybGxiblJ6VzNSZEtTa2djbVYwZFhKdUlDRXhPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQWhNRHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTmxkQ2hsTG1OdlpXWm1hV05wWlc1MGN5azdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvS1M1amIzQjVLSFJvYVhNcE93b2dJQ0FnZlFvZ0lDQWdabkp2YlVGeWNtRjVLR1VzSUhRZ1BTQXdLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxtTnZaV1ptYVdOcFpXNTBjenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2tnUFNBd095QnBJRHdnT1RzZ2FTc3JLVzViYVYwdVpuSnZiVUZ5Y21GNUtHVXNJSFFnS3lCcElDb2dNeWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBiMEZ5Y21GNUtHVWdQU0JiWFN3Z2RDQTlJREFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVZMjlsWm1acFkybGxiblJ6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQTdJR2tnUENBNU95QnBLeXNwYmx0cFhTNTBiMEZ5Y21GNUtHVXNJSFFnS3lCcElDb2dNeWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1U3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWjJWMFFtRnphWE5CZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0JsTG5nc0lHa2dQU0JsTG5rc0lISWdQU0JsTG5vN0NpQWdJQ0FnSUNBZ2RGc3dYU0E5SUM0eU9ESXdPVFVzSUhSYk1WMGdQU0F1TkRnNE5qQXpJQ29nYVN3Z2RGc3lYU0E5SUM0ME9EZzJNRE1nS2lCeUxDQjBXek5kSUQwZ0xqUTRPRFl3TXlBcUlHNHNJSFJiTkYwZ1BTQXhMakE1TWpVME9DQXFJRzRnS2lCcExDQjBXelZkSUQwZ01TNHdPVEkxTkRnZ0tpQnBJQ29nY2l3Z2RGczJYU0E5SUM0ek1UVXpPVElnS2lBb015QXFJSElnS2lCeUlDMGdNU2tzSUhSYk4xMGdQU0F4TGpBNU1qVTBPQ0FxSUc0Z0tpQnlMQ0IwV3poZElEMGdMalUwTmpJM05DQXFJQ2h1SUNvZ2JpQXRJR2tnS2lCcEtUc0tJQ0FnSUgwS2ZTd2dTV01nUFNCamJHRnpjeUJsZUhSbGJtUnpJRVZ1SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnVEdNc0lIUWdQU0F4S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWgyYjJsa0lEQXNJSFFwTENCMGFHbHpMbWx6VEdsbmFIUlFjbTlpWlNBOUlDRXdMQ0IwYUdsekxuTm9JRDBnWlRzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxuTm9MbU52Y0hrb1pTNXphQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JtY205dFNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhVzUwWlc1emFYUjVJRDBnWlM1cGJuUmxibk5wZEhrc0lIUm9hWE11YzJndVpuSnZiVUZ5Y21GNUtHVXVjMmdwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhOMWNHVnlMblJ2U2xOUFRpaGxLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQzV2WW1wbFkzUXVjMmdnUFNCMGFHbHpMbk5vTG5SdlFYSnlZWGtvS1N3Z2REc0tJQ0FnSUgwS2ZTd2dWV01nUFNCamJHRnpjeUJ6TVNCbGVIUmxibVJ6SUVSMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtHVXBMQ0IwYUdsekxuUmxlSFIxY21WeklEMGdlMzA3Q2lBZ0lDQjlDaUFnSUNCc2IyRmtLR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUhSb2FYTXNJR0VnUFNCdVpYY2djbTRvY2k1dFlXNWhaMlZ5S1RzS0lDQWdJQ0FnSUNCaExuTmxkRkJoZEdnb2NpNXdZWFJvS1N3Z1lTNXpaWFJTWlhGMVpYTjBTR1ZoWkdWeUtISXVjbVZ4ZFdWemRFaGxZV1JsY2lrc0lHRXVjMlYwVjJsMGFFTnlaV1JsYm5ScFlXeHpLSEl1ZDJsMGFFTnlaV1JsYm5ScFlXeHpLU3dnWVM1c2IyRmtLR1VzSUdaMWJtTjBhVzl1S0c4cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUW9jaTV3WVhKelpTaEtVMDlPTG5CaGNuTmxLRzhwS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR01wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrZ1B5QnBLR01wSURvZ1kyOXVjMjlzWlM1bGNuSnZjaWhqS1N3Z2NpNXRZVzVoWjJWeUxtbDBaVzFGY25KdmNpaGxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMHNJRzRzSUdrcE93b2dJQ0FnZlFvZ0lDQWdjR0Z5YzJVb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1MFpYaDBkWEpsY3pzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCdUtISXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSYmNsMGdQVDA5SUhadmFXUWdNQ0FtSmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrMWhkR1Z5YVdGc1RHOWhaR1Z5T2lCVmJtUmxabWx1WldRZ2RHVjRkSFZ5WlNJc0lISXBMQ0IwVzNKZE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlITXhMbU55WldGMFpVMWhkR1Z5YVdGc1JuSnZiVlI1Y0dVb1pTNTBlWEJsS1RzS0lDQWdJQ0FnSUNCcFppQW9aUzUxZFdsa0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWRYVnBaQ0E5SUdVdWRYVnBaQ2tzSUdVdWJtRnRaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbTVoYldVZ1BTQmxMbTVoYldVcExDQmxMbU52Ykc5eUlDRTlQU0IyYjJsa0lEQWdKaVlnYVM1amIyeHZjaUFoUFQwZ2RtOXBaQ0F3SUNZbUlHa3VZMjlzYjNJdWMyVjBTR1Y0S0dVdVkyOXNiM0lwTENCbExuSnZkV2RvYm1WemN5QWhQVDBnZG05cFpDQXdJQ1ltSUNocExuSnZkV2RvYm1WemN5QTlJR1V1Y205MVoyaHVaWE56S1N3Z1pTNXRaWFJoYkc1bGMzTWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXRaWFJoYkc1bGMzTWdQU0JsTG0xbGRHRnNibVZ6Y3lrc0lHVXVjMmhsWlc0Z0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1emFHVmxiaUE5SUdVdWMyaGxaVzRwTENCbExuTm9aV1Z1UTI5c2IzSWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXphR1ZsYmtOdmJHOXlJRDBnYm1WM0lIQmxLQ2t1YzJWMFNHVjRLR1V1YzJobFpXNURiMnh2Y2lrcExDQmxMbk5vWldWdVVtOTFaMmh1WlhOeklDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWMyaGxaVzVTYjNWbmFHNWxjM01nUFNCbExuTm9aV1Z1VW05MVoyaHVaWE56S1N3Z1pTNWxiV2x6YzJsMlpTQWhQVDBnZG05cFpDQXdJQ1ltSUdrdVpXMXBjM05wZG1VZ0lUMDlJSFp2YVdRZ01DQW1KaUJwTG1WdGFYTnphWFpsTG5ObGRFaGxlQ2hsTG1WdGFYTnphWFpsS1N3Z1pTNXpjR1ZqZFd4aGNpQWhQVDBnZG05cFpDQXdJQ1ltSUdrdWMzQmxZM1ZzWVhJZ0lUMDlJSFp2YVdRZ01DQW1KaUJwTG5Od1pXTjFiR0Z5TG5ObGRFaGxlQ2hsTG5Od1pXTjFiR0Z5S1N3Z1pTNXpjR1ZqZFd4aGNrbHVkR1Z1YzJsMGVTQWhQVDBnZG05cFpDQXdJQ1ltSUNocExuTndaV04xYkdGeVNXNTBaVzV6YVhSNUlEMGdaUzV6Y0dWamRXeGhja2x1ZEdWdWMybDBlU2tzSUdVdWMzQmxZM1ZzWVhKRGIyeHZjaUFoUFQwZ2RtOXBaQ0F3SUNZbUlHa3VjM0JsWTNWc1lYSkRiMnh2Y2lBaFBUMGdkbTlwWkNBd0lDWW1JR2t1YzNCbFkzVnNZWEpEYjJ4dmNpNXpaWFJJWlhnb1pTNXpjR1ZqZFd4aGNrTnZiRzl5S1N3Z1pTNXphR2x1YVc1bGMzTWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXphR2x1YVc1bGMzTWdQU0JsTG5Ob2FXNXBibVZ6Y3lrc0lHVXVZMnhsWVhKamIyRjBJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VZMnhsWVhKamIyRjBJRDBnWlM1amJHVmhjbU52WVhRcExDQmxMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjeUE5SUdVdVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOektTd2daUzVwY21sa1pYTmpaVzVqWlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1seWFXUmxjMk5sYm1ObElEMGdaUzVwY21sa1pYTmpaVzVqWlNrc0lHVXVhWEpwWkdWelkyVnVZMlZKVDFJZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1cGNtbGtaWE5qWlc1alpVbFBVaUE5SUdVdWFYSnBaR1Z6WTJWdVkyVkpUMUlwTENCbExtbHlhV1JsYzJObGJtTmxWR2hwWTJ0dVpYTnpVbUZ1WjJVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1cGNtbGtaWE5qWlc1alpWUm9hV05yYm1WemMxSmhibWRsSUQwZ1pTNXBjbWxrWlhOalpXNWpaVlJvYVdOcmJtVnpjMUpoYm1kbEtTd2daUzUwY21GdWMyMXBjM05wYjI0Z0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1MGNtRnVjMjFwYzNOcGIyNGdQU0JsTG5SeVlXNXpiV2x6YzJsdmJpa3NJR1V1ZEdocFkydHVaWE56SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1ZEdocFkydHVaWE56SUQwZ1pTNTBhR2xqYTI1bGMzTXBMQ0JsTG1GMGRHVnVkV0YwYVc5dVJHbHpkR0Z1WTJVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1aGRIUmxiblZoZEdsdmJrUnBjM1JoYm1ObElEMGdaUzVoZEhSbGJuVmhkR2x2YmtScGMzUmhibU5sS1N3Z1pTNWhkSFJsYm5WaGRHbHZia052Ykc5eUlDRTlQU0IyYjJsa0lEQWdKaVlnYVM1aGRIUmxiblZoZEdsdmJrTnZiRzl5SUNFOVBTQjJiMmxrSURBZ0ppWWdhUzVoZEhSbGJuVmhkR2x2YmtOdmJHOXlMbk5sZEVobGVDaGxMbUYwZEdWdWRXRjBhVzl1UTI5c2IzSXBMQ0JsTG1GdWFYTnZkSEp2Y0hrZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1aGJtbHpiM1J5YjNCNUlEMGdaUzVoYm1semIzUnliM0I1S1N3Z1pTNWhibWx6YjNSeWIzQjVVbTkwWVhScGIyNGdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNWhibWx6YjNSeWIzQjVVbTkwWVhScGIyNGdQU0JsTG1GdWFYTnZkSEp2Y0hsU2IzUmhkR2x2Ymlrc0lHVXVabTluSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1Wm05bklEMGdaUzVtYjJjcExDQmxMbVpzWVhSVGFHRmthVzVuSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1Wm14aGRGTm9ZV1JwYm1jZ1BTQmxMbVpzWVhSVGFHRmthVzVuS1N3Z1pTNWliR1Z1WkdsdVp5QWhQVDBnZG05cFpDQXdJQ1ltSUNocExtSnNaVzVrYVc1bklEMGdaUzVpYkdWdVpHbHVaeWtzSUdVdVkyOXRZbWx1WlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1OdmJXSnBibVVnUFNCbExtTnZiV0pwYm1VcExDQmxMbk5wWkdVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1emFXUmxJRDBnWlM1emFXUmxLU3dnWlM1emFHRmtiM2RUYVdSbElDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWMyaGhaRzkzVTJsa1pTQTlJR1V1YzJoaFpHOTNVMmxrWlNrc0lHVXViM0JoWTJsMGVTQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtOXdZV05wZEhrZ1BTQmxMbTl3WVdOcGRIa3BMQ0JsTG5SeVlXNXpjR0Z5Wlc1MElDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWRISmhibk53WVhKbGJuUWdQU0JsTG5SeVlXNXpjR0Z5Wlc1MEtTd2daUzVoYkhCb1lWUmxjM1FnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVoYkhCb1lWUmxjM1FnUFNCbExtRnNjR2hoVkdWemRDa3NJR1V1WVd4d2FHRklZWE5vSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1WVd4d2FHRklZWE5vSUQwZ1pTNWhiSEJvWVVoaGMyZ3BMQ0JsTG1SbGNIUm9WR1Z6ZENBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1SbGNIUm9WR1Z6ZENBOUlHVXVaR1Z3ZEdoVVpYTjBLU3dnWlM1a1pYQjBhRmR5YVhSbElDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVpHVndkR2hYY21sMFpTQTlJR1V1WkdWd2RHaFhjbWwwWlNrc0lHVXVZMjlzYjNKWGNtbDBaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbU52Ykc5eVYzSnBkR1VnUFNCbExtTnZiRzl5VjNKcGRHVXBMQ0JsTG5OMFpXNWphV3hYY21sMFpTQWhQVDBnZG05cFpDQXdJQ1ltSUNocExuTjBaVzVqYVd4WGNtbDBaU0E5SUdVdWMzUmxibU5wYkZkeWFYUmxLU3dnWlM1emRHVnVZMmxzVjNKcGRHVk5ZWE5ySUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1YzNSbGJtTnBiRmR5YVhSbFRXRnpheUE5SUdVdWMzUmxibU5wYkZkeWFYUmxUV0Z6YXlrc0lHVXVjM1JsYm1OcGJFWjFibU1nSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV6ZEdWdVkybHNSblZ1WXlBOUlHVXVjM1JsYm1OcGJFWjFibU1wTENCbExuTjBaVzVqYVd4U1pXWWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXpkR1Z1WTJsc1VtVm1JRDBnWlM1emRHVnVZMmxzVW1WbUtTd2daUzV6ZEdWdVkybHNSblZ1WTAxaGMyc2dJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXpkR1Z1WTJsc1JuVnVZMDFoYzJzZ1BTQmxMbk4wWlc1amFXeEdkVzVqVFdGemF5a3NJR1V1YzNSbGJtTnBiRVpoYVd3Z0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1emRHVnVZMmxzUm1GcGJDQTlJR1V1YzNSbGJtTnBiRVpoYVd3cExDQmxMbk4wWlc1amFXeGFSbUZwYkNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5OMFpXNWphV3hhUm1GcGJDQTlJR1V1YzNSbGJtTnBiRnBHWVdsc0tTd2daUzV6ZEdWdVkybHNXbEJoYzNNZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1emRHVnVZMmxzV2xCaGMzTWdQU0JsTG5OMFpXNWphV3hhVUdGemN5a3NJR1V1ZDJseVpXWnlZVzFsSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1ZDJseVpXWnlZVzFsSUQwZ1pTNTNhWEpsWm5KaGJXVXBMQ0JsTG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUNBOUlHVXVkMmx5WldaeVlXMWxUR2x1WlhkcFpIUm9LU3dnWlM1M2FYSmxabkpoYldWTWFXNWxZMkZ3SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1ZDJseVpXWnlZVzFsVEdsdVpXTmhjQ0E5SUdVdWQybHlaV1p5WVcxbFRHbHVaV05oY0Nrc0lHVXVkMmx5WldaeVlXMWxUR2x1WldwdmFXNGdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNTNhWEpsWm5KaGJXVk1hVzVsYW05cGJpQTlJR1V1ZDJseVpXWnlZVzFsVEdsdVpXcHZhVzRwTENCbExuSnZkR0YwYVc5dUlDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWNtOTBZWFJwYjI0Z1BTQmxMbkp2ZEdGMGFXOXVLU3dnWlM1c2FXNWxkMmxrZEdnZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1c2FXNWxkMmxrZEdnZ1BTQmxMbXhwYm1WM2FXUjBhQ2tzSUdVdVpHRnphRk5wZW1VZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1a1lYTm9VMmw2WlNBOUlHVXVaR0Z6YUZOcGVtVXBMQ0JsTG1kaGNGTnBlbVVnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVuWVhCVGFYcGxJRDBnWlM1bllYQlRhWHBsS1N3Z1pTNXpZMkZzWlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5OallXeGxJRDBnWlM1elkyRnNaU2tzSUdVdWNHOXNlV2R2Yms5bVpuTmxkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbkJ2YkhsbmIyNVBabVp6WlhRZ1BTQmxMbkJ2YkhsbmIyNVBabVp6WlhRcExDQmxMbkJ2YkhsbmIyNVBabVp6WlhSR1lXTjBiM0lnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV3YjJ4NVoyOXVUMlptYzJWMFJtRmpkRzl5SUQwZ1pTNXdiMng1WjI5dVQyWm1jMlYwUm1GamRHOXlLU3dnWlM1d2IyeDVaMjl1VDJabWMyVjBWVzVwZEhNZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1d2IyeDVaMjl1VDJabWMyVjBWVzVwZEhNZ1BTQmxMbkJ2YkhsbmIyNVBabVp6WlhSVmJtbDBjeWtzSUdVdVpHbDBhR1Z5YVc1bklDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVpHbDBhR1Z5YVc1bklEMGdaUzVrYVhSb1pYSnBibWNwTENCbExtRnNjR2hoVkc5RGIzWmxjbUZuWlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1Gc2NHaGhWRzlEYjNabGNtRm5aU0E5SUdVdVlXeHdhR0ZVYjBOdmRtVnlZV2RsS1N3Z1pTNXdjbVZ0ZFd4MGFYQnNhV1ZrUVd4d2FHRWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXdjbVZ0ZFd4MGFYQnNhV1ZrUVd4d2FHRWdQU0JsTG5CeVpXMTFiSFJwY0d4cFpXUkJiSEJvWVNrc0lHVXVabTl5WTJWVGFXNW5iR1ZRWVhOeklDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVptOXlZMlZUYVc1bmJHVlFZWE56SUQwZ1pTNW1iM0pqWlZOcGJtZHNaVkJoYzNNcExDQmxMblpwYzJsaWJHVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNTJhWE5wWW14bElEMGdaUzUyYVhOcFlteGxLU3dnWlM1MGIyNWxUV0Z3Y0dWa0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWRHOXVaVTFoY0hCbFpDQTlJR1V1ZEc5dVpVMWhjSEJsWkNrc0lHVXVkWE5sY2tSaGRHRWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNTFjMlZ5UkdGMFlTQTlJR1V1ZFhObGNrUmhkR0VwTENCbExuWmxjblJsZUVOdmJHOXljeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaDBlWEJsYjJZZ1pTNTJaWEowWlhoRGIyeHZjbk1nUFQwZ0ltNTFiV0psY2lJZ1B5QnBMblpsY25SbGVFTnZiRzl5Y3lBOUlHVXVkbVZ5ZEdWNFEyOXNiM0p6SUQ0Z01DQTZJR2t1ZG1WeWRHVjRRMjlzYjNKeklEMGdaUzUyWlhKMFpYaERiMnh2Y25NcExDQmxMblZ1YVdadmNtMXpJQ0U5UFNCMmIybGtJREFwSUdadmNpaHNaWFFnY2lCcGJpQmxMblZ1YVdadmNtMXpLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCbExuVnVhV1p2Y20xelczSmRPd29nSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdvYVM1MWJtbG1iM0p0YzF0eVhTQTlJSHQ5TENCaExuUjVjR1VwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlkQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTNTFibWxtYjNKdGMxdHlYUzUyWVd4MVpTQTlJRzRvWVM1MllXeDFaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSmpJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcExuVnVhV1p2Y20xelczSmRMblpoYkhWbElEMGdibVYzSUhCbEtDa3VjMlYwU0dWNEtHRXVkbUZzZFdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpZGpJaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2t1ZFc1cFptOXliWE5iY2wwdWRtRnNkV1VnUFNCdVpYY2dXaWdwTG1aeWIyMUJjbkpoZVNoaExuWmhiSFZsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbll6SWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBMblZ1YVdadmNtMXpXM0pkTG5aaGJIVmxJRDBnYm1WM0lFRW9LUzVtY205dFFYSnlZWGtvWVM1MllXeDFaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSjJOQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTNTFibWxtYjNKdGMxdHlYUzUyWVd4MVpTQTlJRzVsZHlCcVpTZ3BMbVp5YjIxQmNuSmhlU2hoTG5aaGJIVmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ltMHpJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcExuVnVhV1p2Y20xelczSmRMblpoYkhWbElEMGdibVYzSUVobEtDa3Vabkp2YlVGeWNtRjVLR0V1ZG1Gc2RXVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaWJUUWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrdWRXNXBabTl5YlhOYmNsMHVkbUZzZFdVZ1BTQnVaWGNnZW1Vb0tTNW1jbTl0UVhKeVlYa29ZUzUyWVd4MVpTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2t1ZFc1cFptOXliWE5iY2wwdWRtRnNkV1VnUFNCaExuWmhiSFZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNobExtUmxabWx1WlhNZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1a1pXWnBibVZ6SUQwZ1pTNWtaV1pwYm1WektTd2daUzUyWlhKMFpYaFRhR0ZrWlhJZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1MlpYSjBaWGhUYUdGa1pYSWdQU0JsTG5abGNuUmxlRk5vWVdSbGNpa3NJR1V1Wm5KaFoyMWxiblJUYUdGa1pYSWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNW1jbUZuYldWdWRGTm9ZV1JsY2lBOUlHVXVabkpoWjIxbGJuUlRhR0ZrWlhJcExDQmxMbWRzYzJ4V1pYSnphVzl1SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1WjJ4emJGWmxjbk5wYjI0Z1BTQmxMbWRzYzJ4V1pYSnphVzl1S1N3Z1pTNWxlSFJsYm5OcGIyNXpJQ0U5UFNCMmIybGtJREFwSUdadmNpaHNaWFFnY2lCcGJpQmxMbVY0ZEdWdWMybHZibk1wYVM1bGVIUmxibk5wYjI1elczSmRJRDBnWlM1bGVIUmxibk5wYjI1elczSmRPd29nSUNBZ0lDQWdJR2xtSUNobExteHBaMmgwY3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG14cFoyaDBjeUE5SUdVdWJHbG5hSFJ6S1N3Z1pTNWpiR2x3Y0dsdVp5QWhQVDBnZG05cFpDQXdJQ1ltSUNocExtTnNhWEJ3YVc1bklEMGdaUzVqYkdsd2NHbHVaeWtzSUdVdWMybDZaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbk5wZW1VZ1BTQmxMbk5wZW1VcExDQmxMbk5wZW1WQmRIUmxiblZoZEdsdmJpQWhQVDBnZG05cFpDQXdJQ1ltSUNocExuTnBlbVZCZEhSbGJuVmhkR2x2YmlBOUlHVXVjMmw2WlVGMGRHVnVkV0YwYVc5dUtTd2daUzV0WVhBZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1dFlYQWdQU0J1S0dVdWJXRndLU2tzSUdVdWJXRjBZMkZ3SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1YldGMFkyRndJRDBnYmlobExtMWhkR05oY0NrcExDQmxMbUZzY0doaFRXRndJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VZV3h3YUdGTllYQWdQU0J1S0dVdVlXeHdhR0ZOWVhBcEtTd2daUzVpZFcxd1RXRndJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VZblZ0Y0UxaGNDQTlJRzRvWlM1aWRXMXdUV0Z3S1Nrc0lHVXVZblZ0Y0ZOallXeGxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VZblZ0Y0ZOallXeGxJRDBnWlM1aWRXMXdVMk5oYkdVcExDQmxMbTV2Y20xaGJFMWhjQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbTV2Y20xaGJFMWhjQ0E5SUc0b1pTNXViM0p0WVd4TllYQXBLU3dnWlM1dWIzSnRZV3hOWVhCVWVYQmxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VibTl5YldGc1RXRndWSGx3WlNBOUlHVXVibTl5YldGc1RXRndWSGx3WlNrc0lHVXVibTl5YldGc1UyTmhiR1VnSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJR1V1Ym05eWJXRnNVMk5oYkdVN0NpQWdJQ0FnSUNBZ0lDQWdJRUZ5Y21GNUxtbHpRWEp5WVhrb2Npa2dQVDA5SUNFeElDWW1JQ2h5SUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2Npd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISUtJQ0FnSUNBZ0lDQWdJQ0FnWFNrc0lHa3VibTl5YldGc1UyTmhiR1VnUFNCdVpYY2dXaWdwTG1aeWIyMUJjbkpoZVNoeUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVpHbHpjR3hoWTJWdFpXNTBUV0Z3SUQwZ2JpaGxMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDa3BMQ0JsTG1ScGMzQnNZV05sYldWdWRGTmpZV3hsSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VnUFNCbExtUnBjM0JzWVdObGJXVnVkRk5qWVd4bEtTd2daUzVrYVhOd2JHRmpaVzFsYm5SQ2FXRnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeWtzSUdVdWNtOTFaMmh1WlhOelRXRndJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VjbTkxWjJodVpYTnpUV0Z3SUQwZ2JpaGxMbkp2ZFdkb2JtVnpjMDFoY0NrcExDQmxMbTFsZEdGc2JtVnpjMDFoY0NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG0xbGRHRnNibVZ6YzAxaGNDQTlJRzRvWlM1dFpYUmhiRzVsYzNOTllYQXBLU3dnWlM1bGJXbHpjMmwyWlUxaGNDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtVnRhWE56YVhabFRXRndJRDBnYmlobExtVnRhWE56YVhabFRXRndLU2tzSUdVdVpXMXBjM05wZG1WSmJuUmxibk5wZEhrZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1bGJXbHpjMmwyWlVsdWRHVnVjMmwwZVNBOUlHVXVaVzFwYzNOcGRtVkpiblJsYm5OcGRIa3BMQ0JsTG5Od1pXTjFiR0Z5VFdGd0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWMzQmxZM1ZzWVhKTllYQWdQU0J1S0dVdWMzQmxZM1ZzWVhKTllYQXBLU3dnWlM1emNHVmpkV3hoY2tsdWRHVnVjMmwwZVUxaGNDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExuTndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndJRDBnYmlobExuTndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndLU2tzSUdVdWMzQmxZM1ZzWVhKRGIyeHZjazFoY0NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEFnUFNCdUtHVXVjM0JsWTNWc1lYSkRiMnh2Y2sxaGNDa3BMQ0JsTG1WdWRrMWhjQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbVZ1ZGsxaGNDQTlJRzRvWlM1bGJuWk5ZWEFwS1N3Z1pTNWxiblpOWVhCSmJuUmxibk5wZEhrZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1bGJuWk5ZWEJKYm5SbGJuTnBkSGtnUFNCbExtVnVkazFoY0VsdWRHVnVjMmwwZVNrc0lHVXVjbVZtYkdWamRHbDJhWFI1SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1Y21WbWJHVmpkR2wyYVhSNUlEMGdaUzV5Wldac1pXTjBhWFpwZEhrcExDQmxMbkpsWm5KaFkzUnBiMjVTWVhScGJ5QWhQVDBnZG05cFpDQXdJQ1ltSUNocExuSmxabkpoWTNScGIyNVNZWFJwYnlBOUlHVXVjbVZtY21GamRHbHZibEpoZEdsdktTd2daUzVzYVdkb2RFMWhjQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbXhwWjJoMFRXRndJRDBnYmlobExteHBaMmgwVFdGd0tTa3NJR1V1YkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGtnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVzYVdkb2RFMWhjRWx1ZEdWdWMybDBlU0E5SUdVdWJHbG5hSFJOWVhCSmJuUmxibk5wZEhrcExDQmxMbUZ2VFdGd0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVlXOU5ZWEFnUFNCdUtHVXVZVzlOWVhBcEtTd2daUzVoYjAxaGNFbHVkR1Z1YzJsMGVTQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtRnZUV0Z3U1c1MFpXNXphWFI1SUQwZ1pTNWhiMDFoY0VsdWRHVnVjMmwwZVNrc0lHVXVaM0poWkdsbGJuUk5ZWEFnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVuY21Ga2FXVnVkRTFoY0NBOUlHNG9aUzVuY21Ga2FXVnVkRTFoY0NrcExDQmxMbU5zWldGeVkyOWhkRTFoY0NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1Oc1pXRnlZMjloZEUxaGNDQTlJRzRvWlM1amJHVmhjbU52WVhSTllYQXBLU3dnWlM1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNOTllYQWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNWpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTk5ZWEFnUFNCdUtHVXVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpUV0Z3S1Nrc0lHVXVZMnhsWVhKamIyRjBUbTl5YldGc1RXRndJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VZMnhsWVhKamIyRjBUbTl5YldGc1RXRndJRDBnYmlobExtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNDa3BMQ0JsTG1Oc1pXRnlZMjloZEU1dmNtMWhiRk5qWVd4bElDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVkyeGxZWEpqYjJGMFRtOXliV0ZzVTJOaGJHVWdQU0J1WlhjZ1dpZ3BMbVp5YjIxQmNuSmhlU2hsTG1Oc1pXRnlZMjloZEU1dmNtMWhiRk5qWVd4bEtTa3NJR1V1YVhKcFpHVnpZMlZ1WTJWTllYQWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXBjbWxrWlhOalpXNWpaVTFoY0NBOUlHNG9aUzVwY21sa1pYTmpaVzVqWlUxaGNDa3BMQ0JsTG1seWFXUmxjMk5sYm1ObFZHaHBZMnR1WlhOelRXRndJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VhWEpwWkdWelkyVnVZMlZVYUdsamEyNWxjM05OWVhBZ1BTQnVLR1V1YVhKcFpHVnpZMlZ1WTJWVWFHbGphMjVsYzNOTllYQXBLU3dnWlM1MGNtRnVjMjFwYzNOcGIyNU5ZWEFnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzUwY21GdWMyMXBjM05wYjI1TllYQWdQU0J1S0dVdWRISmhibk50YVhOemFXOXVUV0Z3S1Nrc0lHVXVkR2hwWTJ0dVpYTnpUV0Z3SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1ZEdocFkydHVaWE56VFdGd0lEMGdiaWhsTG5Sb2FXTnJibVZ6YzAxaGNDa3BMQ0JsTG1GdWFYTnZkSEp2Y0hsTllYQWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNWhibWx6YjNSeWIzQjVUV0Z3SUQwZ2JpaGxMbUZ1YVhOdmRISnZjSGxOWVhBcEtTd2daUzV6YUdWbGJrTnZiRzl5VFdGd0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWMyaGxaVzVEYjJ4dmNrMWhjQ0E5SUc0b1pTNXphR1ZsYmtOdmJHOXlUV0Z3S1Nrc0lHVXVjMmhsWlc1U2IzVm5hRzVsYzNOTllYQWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXphR1ZsYmxKdmRXZG9ibVZ6YzAxaGNDQTlJRzRvWlM1emFHVmxibEp2ZFdkb2JtVnpjMDFoY0NrcExDQnBPd29nSUNBZ2ZRb2dJQ0FnYzJWMFZHVjRkSFZ5WlhNb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5SbGVIUjFjbVZ6SUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCamNtVmhkR1ZOWVhSbGNtbGhiRVp5YjIxVWVYQmxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdVMmhoWkc5M1RXRjBaWEpwWVd3NklHTmpMQW9nSUNBZ0lDQWdJQ0FnSUNCVGNISnBkR1ZOWVhSbGNtbGhiRG9nWldFc0NpQWdJQ0FnSUNBZ0lDQWdJRkpoZDFOb1lXUmxjazFoZEdWeWFXRnNPaUJzWXl3S0lDQWdJQ0FnSUNBZ0lDQWdVMmhoWkdWeVRXRjBaWEpwWVd3NklHcDBMQW9nSUNBZ0lDQWdJQ0FnSUNCUWIybHVkSE5OWVhSbGNtbGhiRG9nYm1Fc0NpQWdJQ0FnSUNBZ0lDQWdJRTFsYzJoUWFIbHphV05oYkUxaGRHVnlhV0ZzT2lCb1l5d0tJQ0FnSUNBZ0lDQWdJQ0FnVFdWemFGTjBZVzVrWVhKa1RXRjBaWEpwWVd3NklHUmhMQW9nSUNBZ0lDQWdJQ0FnSUNCTlpYTm9VR2h2Ym1kTllYUmxjbWxoYkRvZ2RXTXNDaUFnSUNBZ0lDQWdJQ0FnSUUxbGMyaFViMjl1VFdGMFpYSnBZV3c2SUdSakxBb2dJQ0FnSUNBZ0lDQWdJQ0JOWlhOb1RtOXliV0ZzVFdGMFpYSnBZV3c2SUdaakxBb2dJQ0FnSUNBZ0lDQWdJQ0JOWlhOb1RHRnRZbVZ5ZEUxaGRHVnlhV0ZzT2lCd1l5d0tJQ0FnSUNBZ0lDQWdJQ0FnVFdWemFFUmxjSFJvVFdGMFpYSnBZV3c2SUZGeUxBb2dJQ0FnSUNBZ0lDQWdJQ0JOWlhOb1JHbHpkR0Z1WTJWTllYUmxjbWxoYkRvZ2FuSXNDaUFnSUNBZ0lDQWdJQ0FnSUUxbGMyaENZWE5wWTAxaGRHVnlhV0ZzT2lCVGJpd0tJQ0FnSUNBZ0lDQWdJQ0FnVFdWemFFMWhkR05oY0UxaGRHVnlhV0ZzT2lCdFl5d0tJQ0FnSUNBZ0lDQWdJQ0FnVEdsdVpVUmhjMmhsWkUxaGRHVnlhV0ZzT2lCbll5d0tJQ0FnSUNBZ0lDQWdJQ0FnVEdsdVpVSmhjMmxqVFdGMFpYSnBZV3c2SUhkMExBb2dJQ0FnSUNBZ0lDQWdJQ0JOWVhSbGNtbGhiRG9nWW5RS0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkRnRsWFRzS0lDQWdJSDBLZlN3Z1oyRWdQU0JqYkdGemN5QjdDaUFnSUNCemRHRjBhV01nWkdWamIyUmxWR1Y0ZENobEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJVWlhoMFJHVmpiMlJsY2lBOElDSjFJaWtnY21WMGRYSnVJRzVsZHlCVVpYaDBSR1ZqYjJSbGNpZ3BMbVJsWTI5a1pTaGxLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJQ0lpT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQXNJR2tnUFNCbExteGxibWQwYURzZ2JpQThJR2s3SUc0ckt5bDBJQ3M5SUZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1pWdHVYU2s3Q2lBZ0lDQWdJQ0FnZEhKNUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1JsWTI5a1pWVlNTVU52YlhCdmJtVnVkQ2hsYzJOaGNHVW9kQ2twT3dvZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJR1Y0ZEhKaFkzUlZjbXhDWVhObEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJR1V1YkdGemRFbHVaR1Y0VDJZb0lpOGlLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQ0E5UFQwZ0xURWdQeUFpTGk4aUlEb2daUzV6YkdsalpTZ3dMQ0IwSUNzZ01TazdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdjbVZ6YjJ4MlpWVlNUQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCbElDRTlJQ0p6ZEhKcGJtY2lJSHg4SUdVZ1BUMDlJQ0lpSUQ4Z0lpSWdPaUFvTDE1b2RIUndjejg2WEM5Y0x5OXBMblJsYzNRb2RDa2dKaVlnTDE1Y0x5OHVkR1Z6ZENobEtTQW1KaUFvZENBOUlIUXVjbVZ3YkdGalpTZ3ZLRjVvZEhSd2N6ODZYQzljTDF0ZVhDOWRLeWt1S2k5cExDQWlKREVpS1Nrc0lDOWVLR2gwZEhCelB6b3BQMXd2WEM4dmFTNTBaWE4wS0dVcElIeDhJQzllWkdGMFlUb3VLaXd1S2lRdmFTNTBaWE4wS0dVcElIeDhJQzllWW14dllqb3VLaVF2YVM1MFpYTjBLR1VwSUQ4Z1pTQTZJSFFnS3lCbEtUc0tJQ0FnSUgwS2ZTd2dSR01nUFNCamJHRnpjeUJsZUhSbGJtUnpJRWRsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0NsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1N3Z2RHaHBjeTVwYzBsdWMzUmhibU5sWkVKMVptWmxja2RsYjIxbGRISjVJRDBnSVRBc0lIUm9hWE11ZEhsd1pTQTlJQ0pKYm5OMFlXNWpaV1JDZFdabVpYSkhaVzl0WlhSeWVTSXNJSFJvYVhNdWFXNXpkR0Z1WTJWRGIzVnVkQ0E5SURFZ0x5QXdPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11YVc1emRHRnVZMlZEYjNWdWRDQTlJR1V1YVc1emRHRnVZMlZEYjNWdWRDd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlITjFjR1Z5TG5SdlNsTlBUaWdwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTG1sdWMzUmhibU5sUTI5MWJuUWdQU0IwYUdsekxtbHVjM1JoYm1ObFEyOTFiblFzSUdVdWFYTkpibk4wWVc1alpXUkNkV1ptWlhKSFpXOXRaWFJ5ZVNBOUlDRXdMQ0JsT3dvZ0lDQWdmUXA5TENCT1l5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1JIUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU2s3Q2lBZ0lDQjlDaUFnSUNCc2IyRmtLR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUhSb2FYTXNJR0VnUFNCdVpYY2djbTRvY2k1dFlXNWhaMlZ5S1RzS0lDQWdJQ0FnSUNCaExuTmxkRkJoZEdnb2NpNXdZWFJvS1N3Z1lTNXpaWFJTWlhGMVpYTjBTR1ZoWkdWeUtISXVjbVZ4ZFdWemRFaGxZV1JsY2lrc0lHRXVjMlYwVjJsMGFFTnlaV1JsYm5ScFlXeHpLSEl1ZDJsMGFFTnlaV1JsYm5ScFlXeHpLU3dnWVM1c2IyRmtLR1VzSUdaMWJtTjBhVzl1S0c4cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUW9jaTV3WVhKelpTaEtVMDlPTG5CaGNuTmxLRzhwS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR01wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrZ1B5QnBLR01wSURvZ1kyOXVjMjlzWlM1bGNuSnZjaWhqS1N3Z2NpNXRZVzVoWjJWeUxtbDBaVzFGY25KdmNpaGxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMHNJRzRzSUdrcE93b2dJQ0FnZlFvZ0lDQWdjR0Z5YzJVb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdlMzBzSUc0Z1BTQjdmVHNLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJwS0dZc0lHMHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJiYlYwZ0lUMDlJSFp2YVdRZ01Da2djbVYwZFhKdUlIUmJiVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JuSUQwZ1ppNXBiblJsY214bFlYWmxaRUoxWm1abGNuTmJiVjBzSUhBZ1BTQnlLR1lzSUdjdVluVm1abVZ5S1N3Z2RpQTlJR3RwS0djdWRIbHdaU3dnY0Nrc0lIZ2dQU0J1WlhjZ1NYTW9kaXdnWnk1emRISnBaR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2VDNTFkV2xrSUQwZ1p5NTFkV2xrTENCMFcyMWRJRDBnZUN3Z2VEc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdjaWhtTENCdEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVXMjFkSUNFOVBTQjJiMmxrSURBcElISmxkSFZ5YmlCdVcyMWRPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaeUE5SUdZdVlYSnlZWGxDZFdabVpYSnpXMjFkTENCd0lEMGdibVYzSUZWcGJuUXpNa0Z5Y21GNUtHY3BMbUoxWm1abGNqc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzViYlYwZ1BTQndMQ0J3T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUdVdWFYTkpibk4wWVc1alpXUkNkV1ptWlhKSFpXOXRaWFJ5ZVNBL0lHNWxkeUJFWXlBNklHNWxkeUJIWlN3Z2J5QTlJR1V1WkdGMFlTNXBibVJsZURzS0lDQWdJQ0FnSUNCcFppQW9ieUFoUFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbUlEMGdhMmtvYnk1MGVYQmxMQ0J2TG1GeWNtRjVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1lTNXpaWFJKYm1SbGVDaHVaWGNnWlhRb1ppd2dNU2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUdVdVpHRjBZUzVoZEhSeWFXSjFkR1Z6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWmlCcGJpQmpLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzBnUFNCalcyWmRMQ0JmT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYlM1cGMwbHVkR1Z5YkdWaGRtVmtRblZtWm1WeVFYUjBjbWxpZFhSbEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWnlBOUlHa29aUzVrWVhSaExDQnRMbVJoZEdFcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1h5QTlJRzVsZHlCUmFTaG5MQ0J0TG1sMFpXMVRhWHBsTENCdExtOW1abk5sZEN3Z2JTNXViM0p0WVd4cGVtVmtLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm5JRDBnYTJrb2JTNTBlWEJsTENCdExtRnljbUY1S1N3Z2NDQTlJRzB1YVhOSmJuTjBZVzVqWldSQ2RXWm1aWEpCZEhSeWFXSjFkR1VnUHlCMWFTQTZJR1YwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWHlBOUlHNWxkeUJ3S0djc0lHMHVhWFJsYlZOcGVtVXNJRzB1Ym05eWJXRnNhWHBsWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2JTNXVZVzFsSUNFOVBTQjJiMmxrSURBZ0ppWWdLRjh1Ym1GdFpTQTlJRzB1Ym1GdFpTa3NJRzB1ZFhOaFoyVWdJVDA5SUhadmFXUWdNQ0FtSmlCZkxuTmxkRlZ6WVdkbEtHMHVkWE5oWjJVcExDQnRMblZ3WkdGMFpWSmhibWRsSUNFOVBTQjJiMmxrSURBZ0ppWWdLRjh1ZFhCa1lYUmxVbUZ1WjJVdWIyWm1jMlYwSUQwZ2JTNTFjR1JoZEdWU1lXNW5aUzV2Wm1aelpYUXNJRjh1ZFhCa1lYUmxVbUZ1WjJVdVkyOTFiblFnUFNCdExuVndaR0YwWlZKaGJtZGxMbU52ZFc1MEtTd2dZUzV6WlhSQmRIUnlhV0oxZEdVb1ppd2dYeWs3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQnNJRDBnWlM1a1lYUmhMbTF2Y25Cb1FYUjBjbWxpZFhSbGN6c0tJQ0FnSUNBZ0lDQnBaaUFvYkNrZ1ptOXlLR3hsZENCbUlHbHVJR3dwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYlNBOUlHeGJabDBzSUY4Z1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbklEMGdNQ3dnY0NBOUlHMHViR1Z1WjNSb095Qm5JRHdnY0RzZ1p5c3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMklEMGdiVnRuWFN3Z2VEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyTG1selNXNTBaWEpzWldGMlpXUkNkV1ptWlhKQmRIUnlhV0oxZEdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VTQTlJR2tvWlM1a1lYUmhMQ0IyTG1SaGRHRXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnZ1BTQnVaWGNnVVdrb2VTd2dkaTVwZEdWdFUybDZaU3dnZGk1dlptWnpaWFFzSUhZdWJtOXliV0ZzYVhwbFpDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNUlEMGdhMmtvZGk1MGVYQmxMQ0IyTG1GeWNtRjVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNElEMGdibVYzSUdWMEtIa3NJSFl1YVhSbGJWTnBlbVVzSUhZdWJtOXliV0ZzYVhwbFpDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJMbTVoYldVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvZUM1dVlXMWxJRDBnZGk1dVlXMWxLU3dnWHk1d2RYTm9LSGdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdFdWJXOXljR2hCZEhSeWFXSjFkR1Z6VzJaZElEMGdYenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWlM1a1lYUmhMbTF2Y25Cb1ZHRnlaMlYwYzFKbGJHRjBhWFpsSUNZbUlDaGhMbTF2Y25Cb1ZHRnlaMlYwYzFKbGJHRjBhWFpsSUQwZ0lUQXBPd29nSUNBZ0lDQWdJR3hsZENCMUlEMGdaUzVrWVhSaExtZHliM1Z3Y3lCOGZDQmxMbVJoZEdFdVpISmhkMk5oYkd4eklIeDhJR1V1WkdGMFlTNXZabVp6WlhSek93b2dJQ0FnSUNBZ0lHbG1JQ2gxSUNFOVBTQjJiMmxrSURBcElHWnZjaWhzWlhRZ1ppQTlJREFzSUcwZ1BTQjFMbXhsYm1kMGFEc2daaUFoUFQwZ2JUc2dLeXRtS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUY4Z1BTQjFXMlpkT3dvZ0lDQWdJQ0FnSUNBZ0lDQmhMbUZrWkVkeWIzVndLRjh1YzNSaGNuUXNJRjh1WTI5MWJuUXNJRjh1YldGMFpYSnBZV3hKYm1SbGVDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCa0lEMGdaUzVrWVhSaExtSnZkVzVrYVc1blUzQm9aWEpsT3dvZ0lDQWdJQ0FnSUdsbUlDaGtJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdZZ1BTQnVaWGNnUVRzS0lDQWdJQ0FnSUNBZ0lDQWdaQzVqWlc1MFpYSWdJVDA5SUhadmFXUWdNQ0FtSmlCbUxtWnliMjFCY25KaGVTaGtMbU5sYm5SbGNpa3NJR0V1WW05MWJtUnBibWRUY0dobGNtVWdQU0J1WlhjZ1dYUW9aaXdnWkM1eVlXUnBkWE1wT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1dVlXMWxJQ1ltSUNoaExtNWhiV1VnUFNCbExtNWhiV1VwTENCbExuVnpaWEpFWVhSaElDWW1JQ2hoTG5WelpYSkVZWFJoSUQwZ1pTNTFjMlZ5UkdGMFlTa3NJR0U3Q2lBZ0lDQjlDbjBzSUhCMUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCRWRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxLVHNLSUNBZ0lIMEtJQ0FnSUd4dllXUW9aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnZEdocGN5d2dZU0E5SUhSb2FYTXVjR0YwYUNBOVBUMGdJaUlnUHlCbllTNWxlSFJ5WVdOMFZYSnNRbUZ6WlNobEtTQTZJSFJvYVhNdWNHRjBhRHNLSUNBZ0lDQWdJQ0IwYUdsekxuSmxjMjkxY21ObFVHRjBhQ0E5SUhSb2FYTXVjbVZ6YjNWeVkyVlFZWFJvSUh4OElHRTdDaUFnSUNBZ0lDQWdiR1YwSUc4Z1BTQnVaWGNnY200b2RHaHBjeTV0WVc1aFoyVnlLVHNLSUNBZ0lDQWdJQ0J2TG5ObGRGQmhkR2dvZEdocGN5NXdZWFJvS1N3Z2J5NXpaWFJTWlhGMVpYTjBTR1ZoWkdWeUtIUm9hWE11Y21WeGRXVnpkRWhsWVdSbGNpa3NJRzh1YzJWMFYybDBhRU55WldSbGJuUnBZV3h6S0hSb2FYTXVkMmwwYUVOeVpXUmxiblJwWVd4ektTd2dieTVzYjJGa0tHVXNJR1oxYm1OMGFXOXVLR01wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd3Z1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkNBOUlFcFRUMDR1Y0dGeWMyVW9ZeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tIVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tnSVQwOUlIWnZhV1FnTUNBbUppQnBLSFVwTENCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJUcFBZbXBsWTNSTWIyRmtaWEk2SUVOaGJpZDBJSEJoY25ObElDSWdLeUJsSUNzZ0lpNGlMQ0IxTG0xbGMzTmhaMlVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb0lEMGdiQzV0WlhSaFpHRjBZVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2dnUFQwOUlIWnZhV1FnTUNCOGZDQm9MblI1Y0dVZ1BUMDlJSFp2YVdRZ01DQjhmQ0JvTG5SNWNHVXVkRzlNYjNkbGNrTmhjMlVvS1NBOVBUMGdJbWRsYjIxbGRISjVJaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVNBaFBUMGdkbTlwWkNBd0lDWW1JR2tvYm1WM0lFVnljbTl5S0NKVVNGSkZSUzVQWW1wbFkzUk1iMkZrWlhJNklFTmhiaWQwSUd4dllXUWdJaUFySUdVcEtTd2dZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VDJKcVpXTjBURzloWkdWeU9pQkRZVzRuZENCc2IyRmtJQ0lnS3lCbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCeUxuQmhjbk5sS0d3c0lIUXBPd29nSUNBZ0lDQWdJSDBzSUc0c0lHa3BPd29nSUNBZ2ZRb2dJQ0FnWVhONWJtTWdiRzloWkVGemVXNWpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE1zSUdrZ1BTQjBhR2x6TG5CaGRHZ2dQVDA5SUNJaUlEOGdaMkV1WlhoMGNtRmpkRlZ5YkVKaGMyVW9aU2tnT2lCMGFHbHpMbkJoZEdnN0NpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOdmRYSmpaVkJoZEdnZ1BTQjBhR2x6TG5KbGMyOTFjbU5sVUdGMGFDQjhmQ0JwT3dvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnYm1WM0lISnVLSFJvYVhNdWJXRnVZV2RsY2lrN0NpQWdJQ0FnSUNBZ2NpNXpaWFJRWVhSb0tIUm9hWE11Y0dGMGFDa3NJSEl1YzJWMFVtVnhkV1Z6ZEVobFlXUmxjaWgwYUdsekxuSmxjWFZsYzNSSVpXRmtaWElwTENCeUxuTmxkRmRwZEdoRGNtVmtaVzUwYVdGc2N5aDBhR2x6TG5kcGRHaERjbVZrWlc1MGFXRnNjeWs3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0JoZDJGcGRDQnlMbXh2WVdSQmMzbHVZeWhsTENCMEtTd2dieUE5SUVwVFQwNHVjR0Z5YzJVb1lTa3NJR01nUFNCdkxtMWxkR0ZrWVhSaE93b2dJQ0FnSUNBZ0lHbG1JQ2hqSUQwOVBTQjJiMmxrSURBZ2ZId2dZeTUwZVhCbElEMDlQU0IyYjJsa0lEQWdmSHdnWXk1MGVYQmxMblJ2VEc5M1pYSkRZWE5sS0NrZ1BUMDlJQ0puWlc5dFpYUnllU0lwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWdpVkVoU1JVVXVUMkpxWldOMFRHOWhaR1Z5T2lCRFlXNG5kQ0JzYjJGa0lDSWdLeUJsS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVhkaGFYUWdiaTV3WVhKelpVRnplVzVqS0c4cE93b2dJQ0FnZlFvZ0lDQWdjR0Z5YzJVb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NXdZWEp6WlVGdWFXMWhkR2x2Ym5Nb1pTNWhibWx0WVhScGIyNXpLU3dnYVNBOUlIUm9hWE11Y0dGeWMyVlRhR0Z3WlhNb1pTNXphR0Z3WlhNcExDQnlJRDBnZEdocGN5NXdZWEp6WlVkbGIyMWxkSEpwWlhNb1pTNW5aVzl0WlhSeWFXVnpMQ0JwS1N3Z1lTQTlJSFJvYVhNdWNHRnljMlZKYldGblpYTW9aUzVwYldGblpYTXNJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBJQ0U5UFNCMmIybGtJREFnSmlZZ2RDaHNLVHNLSUNBZ0lDQWdJQ0I5S1N3Z2J5QTlJSFJvYVhNdWNHRnljMlZVWlhoMGRYSmxjeWhsTG5SbGVIUjFjbVZ6TENCaEtTd2dZeUE5SUhSb2FYTXVjR0Z5YzJWTllYUmxjbWxoYkhNb1pTNXRZWFJsY21saGJITXNJRzhwTENCc0lEMGdkR2hwY3k1d1lYSnpaVTlpYW1WamRDaGxMbTlpYW1WamRDd2djaXdnWXl3Z2J5d2diaWtzSUdnZ1BTQjBhR2x6TG5CaGNuTmxVMnRsYkdWMGIyNXpLR1V1YzJ0bGJHVjBiMjV6TENCc0tUc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWlhVzVrVTJ0bGJHVjBiMjV6S0d3c0lHZ3BMQ0IwSUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIVWdQU0FoTVRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmtJR2x1SUdFcGFXWWdLR0ZiWkYwdVpHRjBZU0JwYm5OMFlXNWpaVzltSUVoVVRVeEpiV0ZuWlVWc1pXMWxiblFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhVZ1BTQWhNRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIVWdQVDA5SUNFeElDWW1JSFFvYkNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCc093b2dJQ0FnZlFvZ0lDQWdZWE41Ym1NZ2NHRnljMlZCYzNsdVl5aGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuQmhjbk5sUVc1cGJXRjBhVzl1Y3lobExtRnVhVzFoZEdsdmJuTXBMQ0J1SUQwZ2RHaHBjeTV3WVhKelpWTm9ZWEJsY3lobExuTm9ZWEJsY3lrc0lHa2dQU0IwYUdsekxuQmhjbk5sUjJWdmJXVjBjbWxsY3lobExtZGxiMjFsZEhKcFpYTXNJRzRwTENCeUlEMGdZWGRoYVhRZ2RHaHBjeTV3WVhKelpVbHRZV2RsYzBGemVXNWpLR1V1YVcxaFoyVnpLU3dnWVNBOUlIUm9hWE11Y0dGeWMyVlVaWGgwZFhKbGN5aGxMblJsZUhSMWNtVnpMQ0J5S1N3Z2J5QTlJSFJvYVhNdWNHRnljMlZOWVhSbGNtbGhiSE1vWlM1dFlYUmxjbWxoYkhNc0lHRXBMQ0JqSUQwZ2RHaHBjeTV3WVhKelpVOWlhbVZqZENobExtOWlhbVZqZEN3Z2FTd2dieXdnWVN3Z2RDa3NJR3dnUFNCMGFHbHpMbkJoY25ObFUydGxiR1YwYjI1ektHVXVjMnRsYkdWMGIyNXpMQ0JqS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWlhVzVrVTJ0bGJHVjBiMjV6S0dNc0lHd3BMQ0JqT3dvZ0lDQWdmUW9nSUNBZ2NHRnljMlZUYUdGd1pYTW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZTMwN0NpQWdJQ0FnSUNBZ2FXWWdLR1VnSVQwOUlIWnZhV1FnTUNrZ1ptOXlLR3hsZENCdUlEMGdNQ3dnYVNBOUlHVXViR1Z1WjNSb095QnVJRHdnYVRzZ2Jpc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSElnUFNCdVpYY2dSbTRvS1M1bWNtOXRTbE5QVGlobFcyNWRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RGdHlMblYxYVdSZElEMGdjanNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFE3Q2lBZ0lDQjlDaUFnSUNCd1lYSnpaVk5yWld4bGRHOXVjeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjdmU3dnYVNBOUlIdDlPd29nSUNBZ0lDQWdJR2xtSUNoMExuUnlZWFpsY25ObEtHWjFibU4wYVc5dUtISXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NpNXBjMEp2Ym1VZ0ppWWdLR2xiY2k1MWRXbGtYU0E5SUhJcE93b2dJQ0FnSUNBZ0lIMHBMQ0JsSUNFOVBTQjJiMmxrSURBcElHWnZjaWhzWlhRZ2NpQTlJREFzSUdFZ1BTQmxMbXhsYm1kMGFEc2djaUE4SUdFN0lISXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2JtVjNJRTl2S0NrdVpuSnZiVXBUVDA0b1pWdHlYU3dnYVNrN0NpQWdJQ0FnSUNBZ0lDQWdJRzViYnk1MWRXbGtYU0E5SUc4N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdU93b2dJQ0FnZlFvZ0lDQWdjR0Z5YzJWSFpXOXRaWFJ5YVdWektHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUh0OU93b2dJQ0FnSUNBZ0lHbG1JQ2hsSUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0J1WlhjZ1RtTTdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY2lBOUlEQXNJR0VnUFNCbExteGxibWQwYURzZ2NpQThJR0U3SUhJckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYnl3Z1l5QTlJR1ZiY2wwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdvWXk1MGVYQmxLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pDZFdabVpYSkhaVzl0WlhSeWVTSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlTVzV6ZEdGdVkyVmtRblZtWm1WeVIyVnZiV1YwY25raU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdklEMGdhUzV3WVhKelpTaGpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1l5NTBlWEJsSUdsdUlISjFJRDhnYnlBOUlISjFXMk11ZEhsd1pWMHVabkp2YlVwVFQwNG9ZeXdnZENrZ09pQmpiMjV6YjJ4bExuZGhjbTRvWUZSSVVrVkZMazlpYW1WamRFeHZZV1JsY2pvZ1ZXNXpkWEJ3YjNKMFpXUWdaMlZ2YldWMGNua2dkSGx3WlNBaUpIdGpMblI1Y0dWOUltQXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieTUxZFdsa0lEMGdZeTUxZFdsa0xDQmpMbTVoYldVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYnk1dVlXMWxJRDBnWXk1dVlXMWxLU3dnWXk1MWMyVnlSR0YwWVNBaFBUMGdkbTlwWkNBd0lDWW1JQ2h2TG5WelpYSkVZWFJoSUQwZ1l5NTFjMlZ5UkdGMFlTa3NJRzViWXk1MWRXbGtYU0E5SUc4N0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzQ3Q2lBZ0lDQjlDaUFnSUNCd1lYSnpaVTFoZEdWeWFXRnNjeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjdmU3dnYVNBOUlIdDlPd29nSUNBZ0lDQWdJR2xtSUNobElDRTlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSElnUFNCdVpYY2dWV003Q2lBZ0lDQWdJQ0FnSUNBZ0lISXVjMlYwVkdWNGRIVnlaWE1vZENrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdZU0E5SURBc0lHOGdQU0JsTG14bGJtZDBhRHNnWVNBOElHODdJR0VyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUdWYllWMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVXMk11ZFhWcFpGMGdQVDA5SUhadmFXUWdNQ0FtSmlBb2JsdGpMblYxYVdSZElEMGdjaTV3WVhKelpTaGpLU2tzSUdsYll5NTFkV2xrWFNBOUlHNWJZeTUxZFdsa1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVRzS0lDQWdJSDBLSUNBZ0lIQmhjbk5sUVc1cGJXRjBhVzl1Y3lobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjdmVHNLSUNBZ0lDQWdJQ0JwWmlBb1pTQWhQVDBnZG05cFpDQXdLU0JtYjNJb2JHVjBJRzRnUFNBd095QnVJRHdnWlM1c1pXNW5kR2c3SUc0ckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnWlZ0dVhTd2djaUE5SUdsekxuQmhjbk5sS0drcE93b2dJQ0FnSUNBZ0lDQWdJQ0IwVzNJdWRYVnBaRjBnUFNCeU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2REc0tJQ0FnSUgwS0lDQWdJSEJoY25ObFNXMWhaMlZ6S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNc0lHa2dQU0I3ZlN3Z2Nqc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmhLR01wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNHViV0Z1WVdkbGNpNXBkR1Z0VTNSaGNuUW9ZeWtzSUhJdWJHOWhaQ2hqTENCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNHViV0Z1WVdkbGNpNXBkR1Z0Ulc1a0tHTXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUxDQjJiMmxrSURBc0lHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiaTV0WVc1aFoyVnlMbWwwWlcxRmNuSnZjaWhqS1N3Z2JpNXRZVzVoWjJWeUxtbDBaVzFGYm1Rb1l5azdDaUFnSUNBZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnZLR01wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqSUQwOUlDSnpkSEpwYm1jaUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlHTXNJR2dnUFNBdlhpaGNMMXd2S1h3b1cyRXRlbDByT2loY0wxd3ZLVDhwTDJrdWRHVnpkQ2hzS1NBL0lHd2dPaUJ1TG5KbGMyOTFjbU5sVUdGMGFDQXJJR3c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZU2hvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElISmxkSFZ5YmlCakxtUmhkR0VnUHlCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJyYVNoakxuUjVjR1VzSUdNdVpHRjBZU2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFEb2dZeTUzYVdSMGFDd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ1l5NW9aV2xuYUhRS0lDQWdJQ0FnSUNBZ0lDQWdmU0E2SUc1MWJHdzdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNobElDRTlQU0IyYjJsa0lEQWdKaVlnWlM1c1pXNW5kR2dnUGlBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnYm1WM0lHMWhLSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlJRDBnYm1WM0lISnpLR01wTENCeUxuTmxkRU55YjNOelQzSnBaMmx1S0hSb2FYTXVZM0p2YzNOUGNtbG5hVzRwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHd2dQU0F3TENCb0lEMGdaUzVzWlc1bmRHZzdJR3dnUENCb095QnNLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIVWdQU0JsVzJ4ZExDQmtJRDBnZFM1MWNtdzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGtLU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JtSUQwZ1cxMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J0SUQwZ01Dd2dYeUE5SUdRdWJHVnVaM1JvT3lCdElEd2dYenNnYlNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2NnUFNCa1cyMWRMQ0J3SUQwZ2J5aG5LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjQ0FoUFQwZ2JuVnNiQ0FtSmlBb2NDQnBibk4wWVc1alpXOW1JRWhVVFV4SmJXRm5aVVZzWlcxbGJuUWdQeUJtTG5CMWMyZ29jQ2tnT2lCbUxuQjFjMmdvYm1WM0lHOXBLSEF1WkdGMFlTd2djQzUzYVdSMGFDd2djQzVvWldsbmFIUXBLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xiZFM1MWRXbGtYU0E5SUc1bGR5QkpiaWhtS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1lnUFNCdktIVXVkWEpzS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBXM1V1ZFhWcFpGMGdQU0J1WlhjZ1NXNG9aaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHazdDaUFnSUNCOUNpQWdJQ0JoYzNsdVl5QndZWEp6WlVsdFlXZGxjMEZ6ZVc1aktHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNc0lHNGdQU0I3ZlN3Z2FUc0tJQ0FnSUNBZ0lDQmhjM2x1WXlCbWRXNWpkR2x2YmlCeUtHRXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmhJRDA5SUNKemRISnBibWNpS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdieUE5SUdFc0lHTWdQU0F2WGloY0wxd3ZLWHdvVzJFdGVsMHJPaWhjTDF3dktUOHBMMmt1ZEdWemRDaHZLU0EvSUc4Z09pQjBMbkpsYzI5MWNtTmxVR0YwYUNBcklHODdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lYZGhhWFFnYVM1c2IyRmtRWE41Ym1Nb1l5azdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J5WlhSMWNtNGdZUzVrWVhSaElEOGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVRvZ2Eya29ZUzUwZVhCbExDQmhMbVJoZEdFcExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c2SUdFdWQybGtkR2dzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJR0V1YUdWcFoyaDBDaUFnSUNBZ0lDQWdJQ0FnSUgwZ09pQnVkV3hzT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9aU0FoUFQwZ2RtOXBaQ0F3SUNZbUlHVXViR1Z1WjNSb0lENGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBJRDBnYm1WM0lISnpLSFJvYVhNdWJXRnVZV2RsY2lrc0lHa3VjMlYwUTNKdmMzTlBjbWxuYVc0b2RHaHBjeTVqY205emMwOXlhV2RwYmlrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdZU0E5SURBc0lHOGdQU0JsTG14bGJtZDBhRHNnWVNBOElHODdJR0VyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUdWYllWMHNJR3dnUFNCakxuVnliRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR3dwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdnZ1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhVZ1BTQXdMQ0JrSUQwZ2JDNXNaVzVuZEdnN0lIVWdQQ0JrT3lCMUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlHeGJkVjBzSUcwZ1BTQmhkMkZwZENCeUtHWXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRJQ0U5UFNCdWRXeHNJQ1ltSUNodElHbHVjM1JoYm1ObGIyWWdTRlJOVEVsdFlXZGxSV3hsYldWdWRDQS9JR2d1Y0hWemFDaHRLU0E2SUdndWNIVnphQ2h1WlhjZ2Iya29iUzVrWVhSaExDQnRMbmRwWkhSb0xDQnRMbWhsYVdkb2RDa3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibHRqTG5WMWFXUmRJRDBnYm1WM0lFbHVLR2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhQ0E5SUdGM1lXbDBJSElvWXk1MWNtd3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1Yll5NTFkV2xrWFNBOUlHNWxkeUJKYmlob0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmpzS0lDQWdJSDBLSUNBZ0lIQmhjbk5sVkdWNGRIVnlaWE1vWlN3Z2RDa2dld29nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJRzRvY2l3Z1lTa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhsd1pXOW1JSElnUFQwZ0ltNTFiV0psY2lJZ1B5QnlJRG9nS0dOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVQySnFaV04wVEc5aFpHVnlMbkJoY25ObFZHVjRkSFZ5WlRvZ1EyOXVjM1JoYm5RZ2MyaHZkV3hrSUdKbElHbHVJRzUxYldWeWFXTWdabTl5YlM0aUxDQnlLU3dnWVZ0eVhTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCcElEMGdlMzA3Q2lBZ0lDQWdJQ0FnYVdZZ0tHVWdJVDA5SUhadmFXUWdNQ2tnWm05eUtHeGxkQ0J5SUQwZ01Dd2dZU0E5SUdVdWJHVnVaM1JvT3lCeUlEd2dZVHNnY2lzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0JsVzNKZE93b2dJQ0FnSUNBZ0lDQWdJQ0J2TG1sdFlXZGxJRDA5UFNCMmIybGtJREFnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ2RVU0ZKRlJTNVBZbXBsWTNSTWIyRmtaWEk2SUU1dklDSnBiV0ZuWlNJZ2MzQmxZMmxtYVdWa0lHWnZjaWNzSUc4dWRYVnBaQ2tzSUhSYmJ5NXBiV0ZuWlYwZ1BUMDlJSFp2YVdRZ01DQW1KaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGs5aWFtVmpkRXh2WVdSbGNqb2dWVzVrWldacGJtVmtJR2x0WVdkbElpd2dieTVwYldGblpTazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnZEZ0dkxtbHRZV2RsWFN3Z2JDQTlJR011WkdGMFlTd2dhRHNLSUNBZ0lDQWdJQ0FnSUNBZ1FYSnlZWGt1YVhOQmNuSmhlU2hzS1NBL0lDaG9JRDBnYm1WM0lFdHBMQ0JzTG14bGJtZDBhQ0E5UFQwZ05pQW1KaUFvYUM1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3S1NrZ09pQW9iQ0FtSmlCc0xtUmhkR0VnUHlCb0lEMGdibVYzSUc5cElEb2dhQ0E5SUc1bGR5QlRkQ3dnYkNBbUppQW9hQzV1WldWa2MxVndaR0YwWlNBOUlDRXdLU2tzSUdndWMyOTFjbU5sSUQwZ1l5d2dhQzUxZFdsa0lEMGdieTUxZFdsa0xDQnZMbTVoYldVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYUM1dVlXMWxJRDBnYnk1dVlXMWxLU3dnYnk1dFlYQndhVzVuSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2d1YldGd2NHbHVaeUE5SUc0b2J5NXRZWEJ3YVc1bkxDQlVlQ2twTENCdkxtTm9ZVzV1Wld3Z0lUMDlJSFp2YVdRZ01DQW1KaUFvYUM1amFHRnVibVZzSUQwZ2J5NWphR0Z1Ym1Wc0tTd2dieTV2Wm1aelpYUWdJVDA5SUhadmFXUWdNQ0FtSmlCb0xtOW1abk5sZEM1bWNtOXRRWEp5WVhrb2J5NXZabVp6WlhRcExDQnZMbkpsY0dWaGRDQWhQVDBnZG05cFpDQXdJQ1ltSUdndWNtVndaV0YwTG1aeWIyMUJjbkpoZVNodkxuSmxjR1ZoZENrc0lHOHVZMlZ1ZEdWeUlDRTlQU0IyYjJsa0lEQWdKaVlnYUM1alpXNTBaWEl1Wm5KdmJVRnljbUY1S0c4dVkyVnVkR1Z5S1N3Z2J5NXliM1JoZEdsdmJpQWhQVDBnZG05cFpDQXdJQ1ltSUNob0xuSnZkR0YwYVc5dUlEMGdieTV5YjNSaGRHbHZiaWtzSUc4dWQzSmhjQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaG9MbmR5WVhCVElEMGdiaWh2TG5keVlYQmJNRjBzSUcxMUtTd2dhQzUzY21Gd1ZDQTlJRzRvYnk1M2NtRndXekZkTENCdGRTa3BMQ0J2TG1admNtMWhkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaG9MbVp2Y20xaGRDQTlJRzh1Wm05eWJXRjBLU3dnYnk1cGJuUmxjbTVoYkVadmNtMWhkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaG9MbWx1ZEdWeWJtRnNSbTl5YldGMElEMGdieTVwYm5SbGNtNWhiRVp2Y20xaGRDa3NJRzh1ZEhsd1pTQWhQVDBnZG05cFpDQXdJQ1ltSUNob0xuUjVjR1VnUFNCdkxuUjVjR1VwTENCdkxtTnZiRzl5VTNCaFkyVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FDNWpiMnh2Y2xOd1lXTmxJRDBnYnk1amIyeHZjbE53WVdObEtTd2dieTVsYm1OdlpHbHVaeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaG9MbVZ1WTI5a2FXNW5JRDBnYnk1bGJtTnZaR2x1Wnlrc0lHOHViV2x1Um1sc2RHVnlJQ0U5UFNCMmIybGtJREFnSmlZZ0tHZ3ViV2x1Um1sc2RHVnlJRDBnYmlodkxtMXBia1pwYkhSbGNpd2daM1VwS1N3Z2J5NXRZV2RHYVd4MFpYSWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FDNXRZV2RHYVd4MFpYSWdQU0J1S0c4dWJXRm5SbWxzZEdWeUxDQm5kU2twTENCdkxtRnVhWE52ZEhKdmNIa2dJVDA5SUhadmFXUWdNQ0FtSmlBb2FDNWhibWx6YjNSeWIzQjVJRDBnYnk1aGJtbHpiM1J5YjNCNUtTd2dieTVtYkdsd1dTQWhQVDBnZG05cFpDQXdJQ1ltSUNob0xtWnNhWEJaSUQwZ2J5NW1iR2x3V1Nrc0lHOHVaMlZ1WlhKaGRHVk5hWEJ0WVhCeklDRTlQU0IyYjJsa0lEQWdKaVlnS0dndVoyVnVaWEpoZEdWTmFYQnRZWEJ6SUQwZ2J5NW5aVzVsY21GMFpVMXBjRzFoY0hNcExDQnZMbkJ5WlcxMWJIUnBjR3g1UVd4d2FHRWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FDNXdjbVZ0ZFd4MGFYQnNlVUZzY0doaElEMGdieTV3Y21WdGRXeDBhWEJzZVVGc2NHaGhLU3dnYnk1MWJuQmhZMnRCYkdsbmJtMWxiblFnSVQwOUlIWnZhV1FnTUNBbUppQW9hQzUxYm5CaFkydEJiR2xuYm0xbGJuUWdQU0J2TG5WdWNHRmphMEZzYVdkdWJXVnVkQ2tzSUc4dVkyOXRjR0Z5WlVaMWJtTjBhVzl1SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2d1WTI5dGNHRnlaVVoxYm1OMGFXOXVJRDBnYnk1amIyMXdZWEpsUm5WdVkzUnBiMjRwTENCdkxuVnpaWEpFWVhSaElDRTlQU0IyYjJsa0lEQWdKaVlnS0dndWRYTmxja1JoZEdFZ1BTQnZMblZ6WlhKRVlYUmhLU3dnYVZ0dkxuVjFhV1JkSUQwZ2FEc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHazdDaUFnSUNCOUNpQWdJQ0J3WVhKelpVOWlhbVZqZENobExDQjBMQ0J1TENCcExDQnlLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHRTdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdieWhrS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBXMlJkSUQwOVBTQjJiMmxrSURBZ0ppWWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVQWW1wbFkzUk1iMkZrWlhJNklGVnVaR1ZtYVc1bFpDQm5aVzl0WlhSeWVTSXNJR1FwTENCMFcyUmRPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJqS0dRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUWdJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWkNrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJRnRkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JTQTlJREFzSUY4Z1BTQmtMbXhsYm1kMGFEc2diU0E4SUY4N0lHMHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbklEMGdaRnR0WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYmx0blhTQTlQVDBnZG05cFpDQXdJQ1ltSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVQySnFaV04wVEc5aFpHVnlPaUJWYm1SbFptbHVaV1FnYldGMFpYSnBZV3dpTENCbktTd2daaTV3ZFhOb0tHNWJaMTBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVXMlJkSUQwOVBTQjJiMmxrSURBZ0ppWWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVQWW1wbFkzUk1iMkZrWlhJNklGVnVaR1ZtYVc1bFpDQnRZWFJsY21saGJDSXNJR1FwTENCdVcyUmRPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHd29aQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FWdGtYU0E5UFQwZ2RtOXBaQ0F3SUNZbUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVUMkpxWldOMFRHOWhaR1Z5T2lCVmJtUmxabWx1WldRZ2RHVjRkSFZ5WlNJc0lHUXBMQ0JwVzJSZE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnYUN3Z2RUc0tJQ0FnSUNBZ0lDQnpkMmwwWTJnb1pTNTBlWEJsS1hzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVUyTmxibVVpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVNBOUlHNWxkeUJKYnl3Z1pTNWlZV05yWjNKdmRXNWtJQ0U5UFNCMmIybGtJREFnSmlZZ0tFNTFiV0psY2k1cGMwbHVkR1ZuWlhJb1pTNWlZV05yWjNKdmRXNWtLU0EvSUdFdVltRmphMmR5YjNWdVpDQTlJRzVsZHlCd1pTaGxMbUpoWTJ0bmNtOTFibVFwSURvZ1lTNWlZV05yWjNKdmRXNWtJRDBnYkNobExtSmhZMnRuY205MWJtUXBLU3dnWlM1bGJuWnBjbTl1YldWdWRDQWhQVDBnZG05cFpDQXdJQ1ltSUNoaExtVnVkbWx5YjI1dFpXNTBJRDBnYkNobExtVnVkbWx5YjI1dFpXNTBLU2tzSUdVdVptOW5JQ0U5UFNCMmIybGtJREFnSmlZZ0tHVXVabTluTG5SNWNHVWdQVDA5SUNKR2IyY2lJRDhnWVM1bWIyY2dQU0J1WlhjZ1RHOG9aUzVtYjJjdVkyOXNiM0lzSUdVdVptOW5MbTVsWVhJc0lHVXVabTluTG1aaGNpa2dPaUJsTG1adlp5NTBlWEJsSUQwOVBTQWlSbTluUlhod01pSWdKaVlnS0dFdVptOW5JRDBnYm1WM0lGQnZLR1V1Wm05bkxtTnZiRzl5TENCbExtWnZaeTVrWlc1emFYUjVLU2tzSUdVdVptOW5MbTVoYldVZ0lUMDlJQ0lpSUNZbUlDaGhMbVp2Wnk1dVlXMWxJRDBnWlM1bWIyY3VibUZ0WlNrcExDQmxMbUpoWTJ0bmNtOTFibVJDYkhWeWNtbHVaWE56SUNFOVBTQjJiMmxrSURBZ0ppWWdLR0V1WW1GamEyZHliM1Z1WkVKc2RYSnlhVzVsYzNNZ1BTQmxMbUpoWTJ0bmNtOTFibVJDYkhWeWNtbHVaWE56S1N3Z1pTNWlZV05yWjNKdmRXNWtTVzUwWlc1emFYUjVJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVZbUZqYTJkeWIzVnVaRWx1ZEdWdWMybDBlU0E5SUdVdVltRmphMmR5YjNWdVpFbHVkR1Z1YzJsMGVTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVVHVnljM0JsWTNScGRtVkRZVzFsY21FaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTQTlJRzVsZHlCNWRDaGxMbVp2ZGl3Z1pTNWhjM0JsWTNRc0lHVXVibVZoY2l3Z1pTNW1ZWElwTENCbExtWnZZM1Z6SUNFOVBTQjJiMmxrSURBZ0ppWWdLR0V1Wm05amRYTWdQU0JsTG1adlkzVnpLU3dnWlM1NmIyOXRJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVlbTl2YlNBOUlHVXVlbTl2YlNrc0lHVXVabWxzYlVkaGRXZGxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVabWxzYlVkaGRXZGxJRDBnWlM1bWFXeHRSMkYxWjJVcExDQmxMbVpwYkcxUFptWnpaWFFnSVQwOUlIWnZhV1FnTUNBbUppQW9ZUzVtYVd4dFQyWm1jMlYwSUQwZ1pTNW1hV3h0VDJabWMyVjBLU3dnWlM1MmFXVjNJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVkbWxsZHlBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZTMwc0lHVXVkbWxsZHlrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWs5eWRHaHZaM0poY0docFkwTmhiV1Z5WVNJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaElEMGdibVYzSUV4ektHVXViR1ZtZEN3Z1pTNXlhV2RvZEN3Z1pTNTBiM0FzSUdVdVltOTBkRzl0TENCbExtNWxZWElzSUdVdVptRnlLU3dnWlM1NmIyOXRJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVlbTl2YlNBOUlHVXVlbTl2YlNrc0lHVXVkbWxsZHlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hoTG5acFpYY2dQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0JsTG5acFpYY3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSkJiV0pwWlc1MFRHbG5hSFFpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVNBOUlHNWxkeUJEWXlobExtTnZiRzl5TENCbExtbHVkR1Z1YzJsMGVTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVJHbHlaV04wYVc5dVlXeE1hV2RvZENJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaElEMGdibVYzSUZKaktHVXVZMjlzYjNJc0lHVXVhVzUwWlc1emFYUjVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSlFiMmx1ZEV4cFoyaDBJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0VnUFNCdVpYY2dkMk1vWlM1amIyeHZjaXdnWlM1cGJuUmxibk5wZEhrc0lHVXVaR2x6ZEdGdVkyVXNJR1V1WkdWallYa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lsSmxZM1JCY21WaFRHbG5hSFFpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVNBOUlHNWxkeUJRWXlobExtTnZiRzl5TENCbExtbHVkR1Z1YzJsMGVTd2daUzUzYVdSMGFDd2daUzVvWldsbmFIUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lsTndiM1JNYVdkb2RDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhJRDBnYm1WM0lFVmpLR1V1WTI5c2IzSXNJR1V1YVc1MFpXNXphWFI1TENCbExtUnBjM1JoYm1ObExDQmxMbUZ1WjJ4bExDQmxMbkJsYm5WdFluSmhMQ0JsTG1SbFkyRjVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSklaVzFwYzNCb1pYSmxUR2xuYUhRaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTQTlJRzVsZHlCVFl5aGxMbU52Ykc5eUxDQmxMbWR5YjNWdVpFTnZiRzl5TENCbExtbHVkR1Z1YzJsMGVTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVRHbG5hSFJRY205aVpTSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhJRDBnYm1WM0lFbGpLQ2t1Wm5KdmJVcFRUMDRvWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpVTJ0cGJtNWxaRTFsYzJnaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FDQTlJRzhvWlM1blpXOXRaWFJ5ZVNrc0lIVWdQU0JqS0dVdWJXRjBaWEpwWVd3cExDQmhJRDBnYm1WM0lFNXZLR2dzSUhVcExDQmxMbUpwYm1STmIyUmxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVZbWx1WkUxdlpHVWdQU0JsTG1KcGJtUk5iMlJsS1N3Z1pTNWlhVzVrVFdGMGNtbDRJQ0U5UFNCMmIybGtJREFnSmlZZ1lTNWlhVzVrVFdGMGNtbDRMbVp5YjIxQmNuSmhlU2hsTG1KcGJtUk5ZWFJ5YVhncExDQmxMbk5yWld4bGRHOXVJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVjMnRsYkdWMGIyNGdQU0JsTG5OclpXeGxkRzl1S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pOWlhOb0lqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZ2dQU0J2S0dVdVoyVnZiV1YwY25rcExDQjFJRDBnWXlobExtMWhkR1Z5YVdGc0tTd2dZU0E5SUc1bGR5Qk5kQ2hvTENCMUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKSmJuTjBZVzVqWldSTlpYTm9Jam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2dnUFNCdktHVXVaMlZ2YldWMGNua3BMQ0IxSUQwZ1l5aGxMbTFoZEdWeWFXRnNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdaUzVqYjNWdWRDd2daaUE5SUdVdWFXNXpkR0Z1WTJWTllYUnlhWGdzSUcwZ1BTQmxMbWx1YzNSaGJtTmxRMjlzYjNJN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaElEMGdibVYzSUVadktHZ3NJSFVzSUdRcExDQmhMbWx1YzNSaGJtTmxUV0YwY21sNElEMGdibVYzSUhWcEtHNWxkeUJHYkc5aGRETXlRWEp5WVhrb1ppNWhjbkpoZVNrc0lERTJLU3dnYlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hoTG1sdWMzUmhibU5sUTI5c2IzSWdQU0J1WlhjZ2RXa29ibVYzSUVac2IyRjBNekpCY25KaGVTaHRMbUZ5Y21GNUtTd2diUzVwZEdWdFUybDZaU2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJa3hQUkNJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaElEMGdibVYzSUVSdk93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWt4cGJtVWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUc1bGR5QmliaWh2S0dVdVoyVnZiV1YwY25rcExDQmpLR1V1YldGMFpYSnBZV3dwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pNYVc1bFRHOXZjQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ2JtVjNJRUp2S0c4b1pTNW5aVzl0WlhSeWVTa3NJR01vWlM1dFlYUmxjbWxoYkNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWt4cGJtVlRaV2R0Wlc1MGN5STZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhJRDBnYm1WM0lHVnVLRzhvWlM1blpXOXRaWFJ5ZVNrc0lHTW9aUzV0WVhSbGNtbGhiQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbEJ2YVc1MFEyeHZkV1FpT2dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKUWIybHVkSE1pT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVNBOUlHNWxkeUJXYnlodktHVXVaMlZ2YldWMGNua3BMQ0JqS0dVdWJXRjBaWEpwWVd3cEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKVGNISnBkR1VpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVNBOUlHNWxkeUJWYnloaktHVXViV0YwWlhKcFlXd3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSkhjbTkxY0NJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaElEMGdibVYzSUhScE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWtKdmJtVWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUc1bGR5QjBZVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUc1bGR5QktaVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYVdZZ0tHRXVkWFZwWkNBOUlHVXVkWFZwWkN3Z1pTNXVZVzFsSUNFOVBTQjJiMmxrSURBZ0ppWWdLR0V1Ym1GdFpTQTlJR1V1Ym1GdFpTa3NJR1V1YldGMGNtbDRJQ0U5UFNCMmIybGtJREFnUHlBb1lTNXRZWFJ5YVhndVpuSnZiVUZ5Y21GNUtHVXViV0YwY21sNEtTd2daUzV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQTlJR1V1YldGMGNtbDRRWFYwYjFWd1pHRjBaU2tzSUdFdWJXRjBjbWw0UVhWMGIxVndaR0YwWlNBbUppQmhMbTFoZEhKcGVDNWtaV052YlhCdmMyVW9ZUzV3YjNOcGRHbHZiaXdnWVM1eGRXRjBaWEp1YVc5dUxDQmhMbk5qWVd4bEtTa2dPaUFvWlM1d2IzTnBkR2x2YmlBaFBUMGdkbTlwWkNBd0lDWW1JR0V1Y0c5emFYUnBiMjR1Wm5KdmJVRnljbUY1S0dVdWNHOXphWFJwYjI0cExDQmxMbkp2ZEdGMGFXOXVJQ0U5UFNCMmIybGtJREFnSmlZZ1lTNXliM1JoZEdsdmJpNW1jbTl0UVhKeVlYa29aUzV5YjNSaGRHbHZiaWtzSUdVdWNYVmhkR1Z5Ym1sdmJpQWhQVDBnZG05cFpDQXdJQ1ltSUdFdWNYVmhkR1Z5Ym1sdmJpNW1jbTl0UVhKeVlYa29aUzV4ZFdGMFpYSnVhVzl1S1N3Z1pTNXpZMkZzWlNBaFBUMGdkbTlwWkNBd0lDWW1JR0V1YzJOaGJHVXVabkp2YlVGeWNtRjVLR1V1YzJOaGJHVXBLU3dnWlM1MWNDQWhQVDBnZG05cFpDQXdJQ1ltSUdFdWRYQXVabkp2YlVGeWNtRjVLR1V1ZFhBcExDQmxMbU5oYzNSVGFHRmtiM2NnSVQwOUlIWnZhV1FnTUNBbUppQW9ZUzVqWVhOMFUyaGhaRzkzSUQwZ1pTNWpZWE4wVTJoaFpHOTNLU3dnWlM1eVpXTmxhWFpsVTJoaFpHOTNJQ0U5UFNCMmIybGtJREFnSmlZZ0tHRXVjbVZqWldsMlpWTm9ZV1J2ZHlBOUlHVXVjbVZqWldsMlpWTm9ZV1J2ZHlrc0lHVXVjMmhoWkc5M0lDWW1JQ2hsTG5Ob1lXUnZkeTVpYVdGeklDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdWMyaGhaRzkzTG1KcFlYTWdQU0JsTG5Ob1lXUnZkeTVpYVdGektTd2daUzV6YUdGa2IzY3VibTl5YldGc1FtbGhjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaGhMbk5vWVdSdmR5NXViM0p0WVd4Q2FXRnpJRDBnWlM1emFHRmtiM2N1Ym05eWJXRnNRbWxoY3lrc0lHVXVjMmhoWkc5M0xuSmhaR2wxY3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2hoTG5Ob1lXUnZkeTV5WVdScGRYTWdQU0JsTG5Ob1lXUnZkeTV5WVdScGRYTXBMQ0JsTG5Ob1lXUnZkeTV0WVhCVGFYcGxJQ0U5UFNCMmIybGtJREFnSmlZZ1lTNXphR0ZrYjNjdWJXRndVMmw2WlM1bWNtOXRRWEp5WVhrb1pTNXphR0ZrYjNjdWJXRndVMmw2WlNrc0lHVXVjMmhoWkc5M0xtTmhiV1Z5WVNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hoTG5Ob1lXUnZkeTVqWVcxbGNtRWdQU0IwYUdsekxuQmhjbk5sVDJKcVpXTjBLR1V1YzJoaFpHOTNMbU5oYldWeVlTa3BLU3dnWlM1MmFYTnBZbXhsSUNFOVBTQjJiMmxrSURBZ0ppWWdLR0V1ZG1semFXSnNaU0E5SUdVdWRtbHphV0pzWlNrc0lHVXVabkoxYzNSMWJVTjFiR3hsWkNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hoTG1aeWRYTjBkVzFEZFd4c1pXUWdQU0JsTG1aeWRYTjBkVzFEZFd4c1pXUXBMQ0JsTG5KbGJtUmxjazl5WkdWeUlDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdWNtVnVaR1Z5VDNKa1pYSWdQU0JsTG5KbGJtUmxjazl5WkdWeUtTd2daUzUxYzJWeVJHRjBZU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaGhMblZ6WlhKRVlYUmhJRDBnWlM1MWMyVnlSR0YwWVNrc0lHVXViR0Y1WlhKeklDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdWJHRjVaWEp6TG0xaGMyc2dQU0JsTG14aGVXVnljeWtzSUdVdVkyaHBiR1J5Wlc0Z0lUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaQ0E5SUdVdVkyaHBiR1J5Wlc0N0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaaUE5SURBN0lHWWdQQ0JrTG14bGJtZDBhRHNnWmlzcktXRXVZV1JrS0hSb2FYTXVjR0Z5YzJWUFltcGxZM1FvWkZ0bVhTd2dkQ3dnYml3Z2FTd2djaWtwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9aUzVoYm1sdFlYUnBiMjV6SUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0JsTG1GdWFXMWhkR2x2Ym5NN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaaUE5SURBN0lHWWdQQ0JrTG14bGJtZDBhRHNnWmlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0SUQwZ1pGdG1YVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0V1WVc1cGJXRjBhVzl1Y3k1d2RYTm9LSEpiYlYwcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdsbUlDaGxMblI1Y0dVZ1BUMDlJQ0pNVDBRaUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdVdVlYVjBiMVZ3WkdGMFpTQWhQVDBnZG05cFpDQXdJQ1ltSUNoaExtRjFkRzlWY0dSaGRHVWdQU0JsTG1GMWRHOVZjR1JoZEdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pDQTlJR1V1YkdWMlpXeHpPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdZZ1BTQXdPeUJtSUR3Z1pDNXNaVzVuZEdnN0lHWXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JTQTlJR1JiWmwwc0lGOGdQU0JoTG1kbGRFOWlhbVZqZEVKNVVISnZjR1Z5ZEhrb0luVjFhV1FpTENCdExtOWlhbVZqZENrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZklDRTlQU0IyYjJsa0lEQWdKaVlnWVM1aFpHUk1aWFpsYkNoZkxDQnRMbVJwYzNSaGJtTmxMQ0J0TG1oNWMzUmxjbVZ6YVhNcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJoT3dvZ0lDQWdmUW9nSUNBZ1ltbHVaRk5yWld4bGRHOXVjeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdUMkpxWldOMExtdGxlWE1vZENrdWJHVnVaM1JvSUNFOVBTQXdJQ1ltSUdVdWRISmhkbVZ5YzJVb1puVnVZM1JwYjI0b2Jpa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9iaTVwYzFOcmFXNXVaV1JOWlhOb0lEMDlQU0FoTUNBbUppQnVMbk5yWld4bGRHOXVJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEZ0dUxuTnJaV3hsZEc5dVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQVDA5SUhadmFXUWdNQ0EvSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVQySnFaV04wVEc5aFpHVnlPaUJPYnlCemEyVnNaWFJ2YmlCbWIzVnVaQ0IzYVhSb0lGVlZTVVE2SWl3Z2JpNXphMlZzWlhSdmJpa2dPaUJ1TG1KcGJtUW9hU3dnYmk1aWFXNWtUV0YwY21sNEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnZlFwOUxDQlVlQ0E5SUhzS0lDQWdJRlZXVFdGd2NHbHVaem9nUjJNc0NpQWdJQ0JEZFdKbFVtVm1iR1ZqZEdsdmJrMWhjSEJwYm1jNklIcHVMQW9nSUNBZ1EzVmlaVkpsWm5KaFkzUnBiMjVOWVhCd2FXNW5PaUJqYVN3S0lDQWdJRVZ4ZFdseVpXTjBZVzVuZFd4aGNsSmxabXhsWTNScGIyNU5ZWEJ3YVc1bk9pQkpjaXdLSUNBZ0lFVnhkV2x5WldOMFlXNW5kV3hoY2xKbFpuSmhZM1JwYjI1TllYQndhVzVuT2lCVmNpd0tJQ0FnSUVOMVltVlZWbEpsWm14bFkzUnBiMjVOWVhCd2FXNW5PaUJXY3dwOUxDQnRkU0E5SUhzS0lDQWdJRkpsY0dWaGRGZHlZWEJ3YVc1bk9pQkVjaXdLSUNBZ0lFTnNZVzF3Vkc5RlpHZGxWM0poY0hCcGJtYzZJRWwwTEFvZ0lDQWdUV2x5Y205eVpXUlNaWEJsWVhSWGNtRndjR2x1WnpvZ1RuSUtmU3dnWjNVZ1BTQjdDaUFnSUNCT1pXRnlaWE4wUm1sc2RHVnlPaUJ3ZEN3S0lDQWdJRTVsWVhKbGMzUk5hWEJ0WVhCT1pXRnlaWE4wUm1sc2RHVnlPaUJtYnl3S0lDQWdJRTVsWVhKbGMzUk5hWEJ0WVhCTWFXNWxZWEpHYVd4MFpYSTZJRXh5TEFvZ0lDQWdUR2x1WldGeVJtbHNkR1Z5T2lCdGRDd0tJQ0FnSUV4cGJtVmhjazFwY0cxaGNFNWxZWEpsYzNSR2FXeDBaWEk2SUhWa0xBb2dJQ0FnVEdsdVpXRnlUV2x3YldGd1RHbHVaV0Z5Um1sc2RHVnlPaUJzYVFwOUxDQmZkU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdSSFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlNrc0lIUm9hWE11YVhOSmJXRm5aVUpwZEcxaGNFeHZZV1JsY2lBOUlDRXdMQ0IwZVhCbGIyWWdZM0psWVhSbFNXMWhaMlZDYVhSdFlYQWdQaUFpZFNJZ0ppWWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVKYldGblpVSnBkRzFoY0V4dllXUmxjam9nWTNKbFlYUmxTVzFoWjJWQ2FYUnRZWEFvS1NCdWIzUWdjM1Z3Y0c5eWRHVmtMaUlwTENCMGVYQmxiMllnWm1WMFkyZ2dQaUFpZFNJZ0ppWWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVKYldGblpVSnBkRzFoY0V4dllXUmxjam9nWm1WMFkyZ29LU0J1YjNRZ2MzVndjRzl5ZEdWa0xpSXBMQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhCeVpXMTFiSFJwY0d4NVFXeHdhR0U2SUNKdWIyNWxJZ29nSUNBZ0lDQWdJSDA3Q2lBZ0lDQjlDaUFnSUNCelpYUlBjSFJwYjI1ektHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dmNIUnBiMjV6SUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHeHZZV1FvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHVWdQVDA5SUhadmFXUWdNQ0FtSmlBb1pTQTlJQ0lpS1N3Z2RHaHBjeTV3WVhSb0lDRTlQU0IyYjJsa0lEQWdKaVlnS0dVZ1BTQjBhR2x6TG5CaGRHZ2dLeUJsS1N3Z1pTQTlJSFJvYVhNdWJXRnVZV2RsY2k1eVpYTnZiSFpsVlZKTUtHVXBPd29nSUNBZ0lDQWdJR3hsZENCeUlEMGdkR2hwY3l3Z1lTQTlJSE56TG1kbGRDaGxLVHNLSUNBZ0lDQWdJQ0JwWmlBb1lTQWhQVDBnZG05cFpDQXdLU0J5WlhSMWNtNGdjaTV0WVc1aFoyVnlMbWwwWlcxVGRHRnlkQ2hsS1N3Z2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDQW1KaUIwS0dFcExDQnlMbTFoYm1GblpYSXVhWFJsYlVWdVpDaGxLVHNLSUNBZ0lDQWdJQ0I5TENBd0tTd2dZVHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJSHQ5T3dvZ0lDQWdJQ0FnSUc4dVkzSmxaR1Z1ZEdsaGJITWdQU0IwYUdsekxtTnliM056VDNKcFoybHVJRDA5UFNBaVlXNXZibmx0YjNWeklpQS9JQ0p6WVcxbExXOXlhV2RwYmlJZ09pQWlhVzVqYkhWa1pTSXNJRzh1YUdWaFpHVnljeUE5SUhSb2FYTXVjbVZ4ZFdWemRFaGxZV1JsY2l3Z1ptVjBZMmdvWlN3Z2J5a3VkR2hsYmlobWRXNWpkR2x2YmloaktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqTG1Kc2IySW9LVHNLSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVLR01wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTnlaV0YwWlVsdFlXZGxRbWwwYldGd0tHTXNJRTlpYW1WamRDNWhjM05wWjI0b2NpNXZjSFJwYjI1ekxDQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2xOd1lXTmxRMjl1ZG1WeWMybHZiam9nSW01dmJtVWlDaUFnSUNBZ0lDQWdJQ0FnSUgwcEtUc0tJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUtHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2MzTXVZV1JrS0dVc0lHTXBMQ0IwSUNZbUlIUW9ZeWtzSUhJdWJXRnVZV2RsY2k1cGRHVnRSVzVrS0dVcE93b2dJQ0FnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FTQW1KaUJwS0dNcExDQnlMbTFoYm1GblpYSXVhWFJsYlVWeWNtOXlLR1VwTENCeUxtMWhibUZuWlhJdWFYUmxiVVZ1WkNobEtUc0tJQ0FnSUNBZ0lDQjlLU3dnY2k1dFlXNWhaMlZ5TG1sMFpXMVRkR0Z5ZENobEtUc0tJQ0FnSUgwS2ZTd2dSWElzSUY5aElEMGdZMnhoYzNNZ2V3b2dJQ0FnYzNSaGRHbGpJR2RsZEVOdmJuUmxlSFFvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVWeUlEMDlQU0IyYjJsa0lEQWdKaVlnS0VWeUlEMGdibVYzSUNoM2FXNWtiM2N1UVhWa2FXOURiMjUwWlhoMElIeDhJSGRwYm1SdmR5NTNaV0pyYVhSQmRXUnBiME52Ym5SbGVIUXBLU3dnUlhJN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ2MyVjBRMjl1ZEdWNGRDaGxLU0I3Q2lBZ0lDQWdJQ0FnUlhJZ1BTQmxPd29nSUNBZ2ZRcDlMQ0I0ZFNBOUlHTnNZWE56SUdWNGRHVnVaSE1nUkhRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb1pTazdDaUFnSUNCOUNpQWdJQ0JzYjJGa0tHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFJvYVhNc0lHRWdQU0J1WlhjZ2NtNG9kR2hwY3k1dFlXNWhaMlZ5S1RzS0lDQWdJQ0FnSUNCaExuTmxkRkpsYzNCdmJuTmxWSGx3WlNnaVlYSnlZWGxpZFdabVpYSWlLU3dnWVM1elpYUlFZWFJvS0hSb2FYTXVjR0YwYUNrc0lHRXVjMlYwVW1WeGRXVnpkRWhsWVdSbGNpaDBhR2x6TG5KbGNYVmxjM1JJWldGa1pYSXBMQ0JoTG5ObGRGZHBkR2hEY21Wa1pXNTBhV0ZzY3loMGFHbHpMbmRwZEdoRGNtVmtaVzUwYVdGc2N5a3NJR0V1Ykc5aFpDaGxMQ0JtZFc1amRHbHZiaWhqS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUdNdWMyeHBZMlVvTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZllTNW5aWFJEYjI1MFpYaDBLQ2t1WkdWamIyUmxRWFZrYVc5RVlYUmhLR3dzSUdaMWJtTjBhVzl1S0hVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwS0hVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dieWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzhvYkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5TENCdUxDQnBLVHNLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ2S0dNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVNBL0lHa29ZeWtnT2lCamIyNXpiMnhsTG1WeWNtOXlLR01wTENCeUxtMWhibUZuWlhJdWFYUmxiVVZ5Y205eUtHVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtmU3dnZG5VZ1BTQnVaWGNnZW1Vc0lIbDFJRDBnYm1WM0lIcGxMQ0JhYmlBOUlHNWxkeUI2WlN3Z1RYVWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3Bld29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKVGRHVnlaVzlEWVcxbGNtRWlMQ0IwYUdsekxtRnpjR1ZqZENBOUlERXNJSFJvYVhNdVpYbGxVMlZ3SUQwZ0xqQTJOQ3dnZEdocGN5NWpZVzFsY21GTUlEMGdibVYzSUhsMExDQjBhR2x6TG1OaGJXVnlZVXd1YkdGNVpYSnpMbVZ1WVdKc1pTZ3hLU3dnZEdocGN5NWpZVzFsY21GTUxtMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ1BTQWhNU3dnZEdocGN5NWpZVzFsY21GU0lEMGdibVYzSUhsMExDQjBhR2x6TG1OaGJXVnlZVkl1YkdGNVpYSnpMbVZ1WVdKc1pTZ3lLU3dnZEdocGN5NWpZVzFsY21GU0xtMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ1BTQWhNU3dnZEdocGN5NWZZMkZqYUdVZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdadlkzVnpPaUJ1ZFd4c0xBb2dJQ0FnSUNBZ0lDQWdJQ0JtYjNZNklHNTFiR3dzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRnpjR1ZqZERvZ2JuVnNiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVmhjam9nYm5Wc2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnWm1GeU9pQnVkV3hzTEFvZ0lDQWdJQ0FnSUNBZ0lDQjZiMjl0T2lCdWRXeHNMQW9nSUNBZ0lDQWdJQ0FnSUNCbGVXVlRaWEE2SUc1MWJHd0tJQ0FnSUNBZ0lDQjlPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVYMk5oWTJobE93b2dJQ0FnSUNBZ0lHbG1JQ2gwTG1adlkzVnpJQ0U5UFNCbExtWnZZM1Z6SUh4OElIUXVabTkySUNFOVBTQmxMbVp2ZGlCOGZDQjBMbUZ6Y0dWamRDQWhQVDBnWlM1aGMzQmxZM1FnS2lCMGFHbHpMbUZ6Y0dWamRDQjhmQ0IwTG01bFlYSWdJVDA5SUdVdWJtVmhjaUI4ZkNCMExtWmhjaUFoUFQwZ1pTNW1ZWElnZkh3Z2RDNTZiMjl0SUNFOVBTQmxMbnB2YjIwZ2ZId2dkQzVsZVdWVFpYQWdJVDA5SUhSb2FYTXVaWGxsVTJWd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhRdVptOWpkWE1nUFNCbExtWnZZM1Z6TENCMExtWnZkaUE5SUdVdVptOTJMQ0IwTG1GemNHVmpkQ0E5SUdVdVlYTndaV04wSUNvZ2RHaHBjeTVoYzNCbFkzUXNJSFF1Ym1WaGNpQTlJR1V1Ym1WaGNpd2dkQzVtWVhJZ1BTQmxMbVpoY2l3Z2RDNTZiMjl0SUQwZ1pTNTZiMjl0TENCMExtVjVaVk5sY0NBOUlIUm9hWE11WlhsbFUyVndMQ0JhYmk1amIzQjVLR1V1Y0hKdmFtVmpkR2x2YmsxaGRISnBlQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ2RDNWxlV1ZUWlhBZ0x5QXlMQ0J5SUQwZ2FTQXFJSFF1Ym1WaGNpQXZJSFF1Wm05amRYTXNJR0VnUFNCMExtNWxZWElnS2lCTllYUm9MblJoYmloaGFTQXFJSFF1Wm05MklDb2dMalVwSUM4Z2RDNTZiMjl0TENCdkxDQmpPd29nSUNBZ0lDQWdJQ0FnSUNCNWRTNWxiR1Z0Wlc1MGMxc3hNbDBnUFNBdGFTd2dkblV1Wld4bGJXVnVkSE5iTVRKZElEMGdhU3dnYnlBOUlDMWhJQ29nZEM1aGMzQmxZM1FnS3lCeUxDQmpJRDBnWVNBcUlIUXVZWE53WldOMElDc2djaXdnV200dVpXeGxiV1Z1ZEhOYk1GMGdQU0F5SUNvZ2RDNXVaV0Z5SUM4Z0tHTWdMU0J2S1N3Z1dtNHVaV3hsYldWdWRITmJPRjBnUFNBb1l5QXJJRzhwSUM4Z0tHTWdMU0J2S1N3Z2RHaHBjeTVqWVcxbGNtRk1MbkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ3VZMjl3ZVNoYWJpa3NJRzhnUFNBdFlTQXFJSFF1WVhOd1pXTjBJQzBnY2l3Z1l5QTlJR0VnS2lCMExtRnpjR1ZqZENBdElISXNJRnB1TG1Wc1pXMWxiblJ6V3pCZElEMGdNaUFxSUhRdWJtVmhjaUF2SUNoaklDMGdieWtzSUZwdUxtVnNaVzFsYm5Seld6aGRJRDBnS0dNZ0t5QnZLU0F2SUNoaklDMGdieWtzSUhSb2FYTXVZMkZ0WlhKaFVpNXdjbTlxWldOMGFXOXVUV0YwY21sNExtTnZjSGtvV200cE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBhR2x6TG1OaGJXVnlZVXd1YldGMGNtbDRWMjl5YkdRdVkyOXdlU2hsTG0xaGRISnBlRmR2Y214a0tTNXRkV3gwYVhCc2VTaDVkU2tzSUhSb2FYTXVZMkZ0WlhKaFVpNXRZWFJ5YVhoWGIzSnNaQzVqYjNCNUtHVXViV0YwY21sNFYyOXliR1FwTG0xMWJIUnBjR3g1S0haMUtUc0tJQ0FnSUgwS2ZTd2dUMk1nUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ0lUQXBld29nSUNBZ0lDQWdJSFJvYVhNdVlYVjBiMU4wWVhKMElEMGdaU3dnZEdocGN5NXpkR0Z5ZEZScGJXVWdQU0F3TENCMGFHbHpMbTlzWkZScGJXVWdQU0F3TENCMGFHbHpMbVZzWVhCelpXUlVhVzFsSUQwZ01Dd2dkR2hwY3k1eWRXNXVhVzVuSUQwZ0lURTdDaUFnSUNCOUNpQWdJQ0J6ZEdGeWRDZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuTjBZWEowVkdsdFpTQTlJRk4xS0Nrc0lIUm9hWE11YjJ4a1ZHbHRaU0E5SUhSb2FYTXVjM1JoY25SVWFXMWxMQ0IwYUdsekxtVnNZWEJ6WldSVWFXMWxJRDBnTUN3Z2RHaHBjeTV5ZFc1dWFXNW5JRDBnSVRBN0NpQWdJQ0I5Q2lBZ0lDQnpkRzl3S0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WjJWMFJXeGhjSE5sWkZScGJXVW9LU3dnZEdocGN5NXlkVzV1YVc1bklEMGdJVEVzSUhSb2FYTXVZWFYwYjFOMFlYSjBJRDBnSVRFN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJGYkdGd2MyVmtWR2x0WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhSRVpXeDBZU2dwTENCMGFHbHpMbVZzWVhCelpXUlVhVzFsT3dvZ0lDQWdmUW9nSUNBZ1oyVjBSR1ZzZEdFb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQXdPd29nSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbUYxZEc5VGRHRnlkQ0FtSmlBaGRHaHBjeTV5ZFc1dWFXNW5LU0J5WlhSMWNtNGdkR2hwY3k1emRHRnlkQ2dwTENBd093b2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuSjFibTVwYm1jcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIUWdQU0JUZFNncE93b2dJQ0FnSUNBZ0lDQWdJQ0JsSUQwZ0tIUWdMU0IwYUdsekxtOXNaRlJwYldVcElDOGdNV1V6TENCMGFHbHpMbTlzWkZScGJXVWdQU0IwTENCMGFHbHpMbVZzWVhCelpXUlVhVzFsSUNzOUlHVTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQmxPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUJUZFNncElIc0tJQ0FnSUhKbGRIVnliaUFvZEhsd1pXOW1JSEJsY21admNtMWhibU5sSUQ0Z0luVWlJRDhnUkdGMFpTQTZJSEJsY21admNtMWhibU5sS1M1dWIzY29LVHNLZlFwMllYSWdTbTRnUFNCdVpYY2dRU3dnWW5VZ1BTQnVaWGNnVlhRc0lIZDRJRDBnYm1WM0lFRXNJQ1J1SUQwZ2JtVjNJRUVzSUVWMUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCS1pTQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3Bld29nSUNBZ0lDQWdJSE4xY0dWeUtDa3NJSFJvYVhNdWRIbHdaU0E5SUNKQmRXUnBiMHhwYzNSbGJtVnlJaXdnZEdocGN5NWpiMjUwWlhoMElEMGdYMkV1WjJWMFEyOXVkR1Y0ZENncExDQjBhR2x6TG1kaGFXNGdQU0IwYUdsekxtTnZiblJsZUhRdVkzSmxZWFJsUjJGcGJpZ3BMQ0IwYUdsekxtZGhhVzR1WTI5dWJtVmpkQ2gwYUdsekxtTnZiblJsZUhRdVpHVnpkR2x1WVhScGIyNHBMQ0IwYUdsekxtWnBiSFJsY2lBOUlHNTFiR3dzSUhSb2FYTXVkR2x0WlVSbGJIUmhJRDBnTUN3Z2RHaHBjeTVmWTJ4dlkyc2dQU0J1WlhjZ1QyTTdDaUFnSUNCOUNpQWdJQ0JuWlhSSmJuQjFkQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5ZV2x1T3dvZ0lDQWdmUW9nSUNBZ2NtVnRiM1psUm1sc2RHVnlLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnBiSFJsY2lBaFBUMGdiblZzYkNBbUppQW9kR2hwY3k1bllXbHVMbVJwYzJOdmJtNWxZM1FvZEdocGN5NW1hV3gwWlhJcExDQjBhR2x6TG1acGJIUmxjaTVrYVhOamIyNXVaV04wS0hSb2FYTXVZMjl1ZEdWNGRDNWtaWE4wYVc1aGRHbHZiaWtzSUhSb2FYTXVaMkZwYmk1amIyNXVaV04wS0hSb2FYTXVZMjl1ZEdWNGRDNWtaWE4wYVc1aGRHbHZiaWtzSUhSb2FYTXVabWxzZEdWeUlEMGdiblZzYkNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUkdhV3gwWlhJb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wm1sc2RHVnlPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJtbHNkR1Z5S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVtYVd4MFpYSWdJVDA5SUc1MWJHd2dQeUFvZEdocGN5NW5ZV2x1TG1ScGMyTnZibTVsWTNRb2RHaHBjeTVtYVd4MFpYSXBMQ0IwYUdsekxtWnBiSFJsY2k1a2FYTmpiMjV1WldOMEtIUm9hWE11WTI5dWRHVjRkQzVrWlhOMGFXNWhkR2x2YmlrcElEb2dkR2hwY3k1bllXbHVMbVJwYzJOdmJtNWxZM1FvZEdocGN5NWpiMjUwWlhoMExtUmxjM1JwYm1GMGFXOXVLU3dnZEdocGN5NW1hV3gwWlhJZ1BTQmxMQ0IwYUdsekxtZGhhVzR1WTI5dWJtVmpkQ2gwYUdsekxtWnBiSFJsY2lrc0lIUm9hWE11Wm1sc2RHVnlMbU52Ym01bFkzUW9kR2hwY3k1amIyNTBaWGgwTG1SbGMzUnBibUYwYVc5dUtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHZGxkRTFoYzNSbGNsWnZiSFZ0WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWVdsdUxtZGhhVzR1ZG1Gc2RXVTdDaUFnSUNCOUNpQWdJQ0J6WlhSTllYTjBaWEpXYjJ4MWJXVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGhhVzR1WjJGcGJpNXpaWFJVWVhKblpYUkJkRlJwYldVb1pTd2dkR2hwY3k1amIyNTBaWGgwTG1OMWNuSmxiblJVYVcxbExDQXVNREVwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxUV0YwY21sNFYyOXliR1FvWlNrZ2V3b2dJQ0FnSUNBZ0lITjFjR1Z5TG5Wd1pHRjBaVTFoZEhKcGVGZHZjbXhrS0dVcE93b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVqYjI1MFpYaDBMbXhwYzNSbGJtVnlMQ0J1SUQwZ2RHaHBjeTUxY0RzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1MGFXMWxSR1ZzZEdFZ1BTQjBhR2x6TGw5amJHOWpheTVuWlhSRVpXeDBZU2dwTENCMGFHbHpMbTFoZEhKcGVGZHZjbXhrTG1SbFkyOXRjRzl6WlNoS2Jpd2dZblVzSUhkNEtTd2dKRzR1YzJWMEtEQXNJREFzSUMweEtTNWhjSEJzZVZGMVlYUmxjbTVwYjI0b1luVXBMQ0IwTG5CdmMybDBhVzl1V0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdVkyOXVkR1Y0ZEM1amRYSnlaVzUwVkdsdFpTQXJJSFJvYVhNdWRHbHRaVVJsYkhSaE93b2dJQ0FnSUNBZ0lDQWdJQ0IwTG5CdmMybDBhVzl1V0M1c2FXNWxZWEpTWVcxd1ZHOVdZV3gxWlVGMFZHbHRaU2hLYmk1NExDQnBLU3dnZEM1d2IzTnBkR2x2YmxrdWJHbHVaV0Z5VW1GdGNGUnZWbUZzZFdWQmRGUnBiV1VvU200dWVTd2dhU2tzSUhRdWNHOXphWFJwYjI1YUxteHBibVZoY2xKaGJYQlViMVpoYkhWbFFYUlVhVzFsS0VwdUxub3NJR2twTENCMExtWnZjbmRoY21SWUxteHBibVZoY2xKaGJYQlViMVpoYkhWbFFYUlVhVzFsS0NSdUxuZ3NJR2twTENCMExtWnZjbmRoY21SWkxteHBibVZoY2xKaGJYQlViMVpoYkhWbFFYUlVhVzFsS0NSdUxua3NJR2twTENCMExtWnZjbmRoY21SYUxteHBibVZoY2xKaGJYQlViMVpoYkhWbFFYUlVhVzFsS0NSdUxub3NJR2twTENCMExuVndXQzVzYVc1bFlYSlNZVzF3Vkc5V1lXeDFaVUYwVkdsdFpTaHVMbmdzSUdrcExDQjBMblZ3V1M1c2FXNWxZWEpTWVcxd1ZHOVdZV3gxWlVGMFZHbHRaU2h1TG5rc0lHa3BMQ0IwTG5Wd1dpNXNhVzVsWVhKU1lXMXdWRzlXWVd4MVpVRjBWR2x0WlNodUxub3NJR2twT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0IwTG5ObGRGQnZjMmwwYVc5dUtFcHVMbmdzSUVwdUxua3NJRXB1TG5vcExDQjBMbk5sZEU5eWFXVnVkR0YwYVc5dUtDUnVMbmdzSUNSdUxua3NJQ1J1TG5vc0lHNHVlQ3dnYmk1NUxDQnVMbm9wT3dvZ0lDQWdmUXA5TENCR1l5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1NtVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NTBlWEJsSUQwZ0lrRjFaR2x2SWl3Z2RHaHBjeTVzYVhOMFpXNWxjaUE5SUdVc0lIUm9hWE11WTI5dWRHVjRkQ0E5SUdVdVkyOXVkR1Y0ZEN3Z2RHaHBjeTVuWVdsdUlEMGdkR2hwY3k1amIyNTBaWGgwTG1OeVpXRjBaVWRoYVc0b0tTd2dkR2hwY3k1bllXbHVMbU52Ym01bFkzUW9aUzVuWlhSSmJuQjFkQ2dwS1N3Z2RHaHBjeTVoZFhSdmNHeGhlU0E5SUNFeExDQjBhR2x6TG1KMVptWmxjaUE5SUc1MWJHd3NJSFJvYVhNdVpHVjBkVzVsSUQwZ01Dd2dkR2hwY3k1c2IyOXdJRDBnSVRFc0lIUm9hWE11Ykc5dmNGTjBZWEowSUQwZ01Dd2dkR2hwY3k1c2IyOXdSVzVrSUQwZ01Dd2dkR2hwY3k1dlptWnpaWFFnUFNBd0xDQjBhR2x6TG1SMWNtRjBhVzl1SUQwZ2RtOXBaQ0F3TENCMGFHbHpMbkJzWVhsaVlXTnJVbUYwWlNBOUlERXNJSFJvYVhNdWFYTlFiR0Y1YVc1bklEMGdJVEVzSUhSb2FYTXVhR0Z6VUd4aGVXSmhZMnREYjI1MGNtOXNJRDBnSVRBc0lIUm9hWE11YzI5MWNtTmxJRDBnYm5Wc2JDd2dkR2hwY3k1emIzVnlZMlZVZVhCbElEMGdJbVZ0Y0hSNUlpd2dkR2hwY3k1ZmMzUmhjblJsWkVGMElEMGdNQ3dnZEdocGN5NWZjSEp2WjNKbGMzTWdQU0F3TENCMGFHbHpMbDlqYjI1dVpXTjBaV1FnUFNBaE1Td2dkR2hwY3k1bWFXeDBaWEp6SUQwZ1cxMDdDaUFnSUNCOUNpQWdJQ0JuWlhSUGRYUndkWFFvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMkZwYmpzS0lDQWdJSDBLSUNBZ0lITmxkRTV2WkdWVGIzVnlZMlVvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWhoYzFCc1lYbGlZV05yUTI5dWRISnZiQ0E5SUNFeExDQjBhR2x6TG5OdmRYSmpaVlI1Y0dVZ1BTQWlZWFZrYVc5T2IyUmxJaXdnZEdocGN5NXpiM1Z5WTJVZ1BTQmxMQ0IwYUdsekxtTnZibTVsWTNRb0tTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRTFsWkdsaFJXeGxiV1Z1ZEZOdmRYSmpaU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhR0Z6VUd4aGVXSmhZMnREYjI1MGNtOXNJRDBnSVRFc0lIUm9hWE11YzI5MWNtTmxWSGx3WlNBOUlDSnRaV1JwWVU1dlpHVWlMQ0IwYUdsekxuTnZkWEpqWlNBOUlIUm9hWE11WTI5dWRHVjRkQzVqY21WaGRHVk5aV1JwWVVWc1pXMWxiblJUYjNWeVkyVW9aU2tzSUhSb2FYTXVZMjl1Ym1WamRDZ3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwVFdWa2FXRlRkSEpsWVcxVGIzVnlZMlVvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWhoYzFCc1lYbGlZV05yUTI5dWRISnZiQ0E5SUNFeExDQjBhR2x6TG5OdmRYSmpaVlI1Y0dVZ1BTQWliV1ZrYVdGVGRISmxZVzFPYjJSbElpd2dkR2hwY3k1emIzVnlZMlVnUFNCMGFHbHpMbU52Ym5SbGVIUXVZM0psWVhSbFRXVmthV0ZUZEhKbFlXMVRiM1Z5WTJVb1pTa3NJSFJvYVhNdVkyOXVibVZqZENncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBRblZtWm1WeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aWRXWm1aWElnUFNCbExDQjBhR2x6TG5OdmRYSmpaVlI1Y0dVZ1BTQWlZblZtWm1WeUlpd2dkR2hwY3k1aGRYUnZjR3hoZVNBbUppQjBhR2x6TG5Cc1lYa29LU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSEJzWVhrb1pTQTlJREFwSUhzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1cGMxQnNZWGxwYm1jZ1BUMDlJQ0V3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UVhWa2FXODZJRUYxWkdsdklHbHpJR0ZzY21WaFpIa2djR3hoZVdsdVp5NGlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1b1lYTlFiR0Y1WW1GamEwTnZiblJ5YjJ3Z1BUMDlJQ0V4S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UVhWa2FXODZJSFJvYVhNZ1FYVmthVzhnYUdGeklHNXZJSEJzWVhsaVlXTnJJR052Ym5SeWIyd3VJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSaGNuUmxaRUYwSUQwZ2RHaHBjeTVqYjI1MFpYaDBMbU4xY25KbGJuUlVhVzFsSUNzZ1pUc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WTI5dWRHVjRkQzVqY21WaGRHVkNkV1ptWlhKVGIzVnlZMlVvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEM1aWRXWm1aWElnUFNCMGFHbHpMbUoxWm1abGNpd2dkQzVzYjI5d0lEMGdkR2hwY3k1c2IyOXdMQ0IwTG14dmIzQlRkR0Z5ZENBOUlIUm9hWE11Ykc5dmNGTjBZWEowTENCMExteHZiM0JGYm1RZ1BTQjBhR2x6TG14dmIzQkZibVFzSUhRdWIyNWxibVJsWkNBOUlIUm9hWE11YjI1RmJtUmxaQzVpYVc1a0tIUm9hWE1wTENCMExuTjBZWEowS0hSb2FYTXVYM04wWVhKMFpXUkJkQ3dnZEdocGN5NWZjSEp2WjNKbGMzTWdLeUIwYUdsekxtOW1abk5sZEN3Z2RHaHBjeTVrZFhKaGRHbHZiaWtzSUhSb2FYTXVhWE5RYkdGNWFXNW5JRDBnSVRBc0lIUm9hWE11YzI5MWNtTmxJRDBnZEN3Z2RHaHBjeTV6WlhSRVpYUjFibVVvZEdocGN5NWtaWFIxYm1VcExDQjBhR2x6TG5ObGRGQnNZWGxpWVdOclVtRjBaU2gwYUdsekxuQnNZWGxpWVdOclVtRjBaU2tzSUhSb2FYTXVZMjl1Ym1WamRDZ3BPd29nSUNBZ2ZRb2dJQ0FnY0dGMWMyVW9LU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YUdGelVHeGhlV0poWTJ0RGIyNTBjbTlzSUQwOVBTQWhNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMa0YxWkdsdk9pQjBhR2x6SUVGMVpHbHZJR2hoY3lCdWJ5QndiR0Y1WW1GamF5QmpiMjUwY205c0xpSXBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtbHpVR3hoZVdsdVp5QTlQVDBnSVRBZ0ppWWdLSFJvYVhNdVgzQnliMmR5WlhOeklDczlJRTFoZEdndWJXRjRLSFJvYVhNdVkyOXVkR1Y0ZEM1amRYSnlaVzUwVkdsdFpTQXRJSFJvYVhNdVgzTjBZWEowWldSQmRDd2dNQ2tnS2lCMGFHbHpMbkJzWVhsaVlXTnJVbUYwWlN3Z2RHaHBjeTVzYjI5d0lEMDlQU0FoTUNBbUppQW9kR2hwY3k1ZmNISnZaM0psYzNNZ1BTQjBhR2x6TGw5d2NtOW5jbVZ6Y3lBbElDaDBhR2x6TG1SMWNtRjBhVzl1SUh4OElIUm9hWE11WW5WbVptVnlMbVIxY21GMGFXOXVLU2tzSUhSb2FYTXVjMjkxY21ObExuTjBiM0FvS1N3Z2RHaHBjeTV6YjNWeVkyVXViMjVsYm1SbFpDQTlJRzUxYkd3c0lIUm9hWE11YVhOUWJHRjVhVzVuSUQwZ0lURXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjM1J2Y0NncElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW9ZWE5RYkdGNVltRmphME52Ym5SeWIyd2dQVDA5SUNFeEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVFYVmthVzg2SUhSb2FYTWdRWFZrYVc4Z2FHRnpJRzV2SUhCc1lYbGlZV05ySUdOdmJuUnliMnd1SWlrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNCeWIyZHlaWE56SUQwZ01Dd2dkR2hwY3k1emIzVnlZMlVnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11YzI5MWNtTmxMbk4wYjNBb0tTd2dkR2hwY3k1emIzVnlZMlV1YjI1bGJtUmxaQ0E5SUc1MWJHd3BMQ0IwYUdsekxtbHpVR3hoZVdsdVp5QTlJQ0V4TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5dWJtVmpkQ2dwSUhzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1bWFXeDBaWEp6TG14bGJtZDBhQ0ErSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpiM1Z5WTJVdVkyOXVibVZqZENoMGFHbHpMbVpwYkhSbGNuTmJNRjBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHVWdQU0F4TENCMElEMGdkR2hwY3k1bWFXeDBaWEp6TG14bGJtZDBhRHNnWlNBOElIUTdJR1VyS3lsMGFHbHpMbVpwYkhSbGNuTmJaU0F0SURGZExtTnZibTVsWTNRb2RHaHBjeTVtYVd4MFpYSnpXMlZkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWFXeDBaWEp6VzNSb2FYTXVabWxzZEdWeWN5NXNaVzVuZEdnZ0xTQXhYUzVqYjI1dVpXTjBLSFJvYVhNdVoyVjBUM1YwY0hWMEtDa3BPd29nSUNBZ0lDQWdJSDBnWld4elpTQjBhR2x6TG5OdmRYSmpaUzVqYjI1dVpXTjBLSFJvYVhNdVoyVjBUM1YwY0hWMEtDa3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5amIyNXVaV04wWldRZ1BTQWhNQ3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR1JwYzJOdmJtNWxZM1FvS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyTnZibTVsWTNSbFpDQWhQVDBnSVRFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wm1sc2RHVnljeTVzWlc1bmRHZ2dQaUF3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk52ZFhKalpTNWthWE5qYjI1dVpXTjBLSFJvYVhNdVptbHNkR1Z5YzFzd1hTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHVWdQU0F4TENCMElEMGdkR2hwY3k1bWFXeDBaWEp6TG14bGJtZDBhRHNnWlNBOElIUTdJR1VyS3lsMGFHbHpMbVpwYkhSbGNuTmJaU0F0SURGZExtUnBjMk52Ym01bFkzUW9kR2hwY3k1bWFXeDBaWEp6VzJWZEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wm1sc2RHVnljMXQwYUdsekxtWnBiSFJsY25NdWJHVnVaM1JvSUMwZ01WMHVaR2x6WTI5dWJtVmpkQ2gwYUdsekxtZGxkRTkxZEhCMWRDZ3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhSb2FYTXVjMjkxY21ObExtUnBjMk52Ym01bFkzUW9kR2hwY3k1blpYUlBkWFJ3ZFhRb0tTazdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpiMjV1WldOMFpXUWdQU0FoTVN3Z2RHaHBjenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCblpYUkdhV3gwWlhKektDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1acGJIUmxjbk03Q2lBZ0lDQjlDaUFnSUNCelpYUkdhV3gwWlhKektHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaU0I4ZkNBb1pTQTlJRnRkS1N3Z2RHaHBjeTVmWTI5dWJtVmpkR1ZrSUQwOVBTQWhNQ0EvSUNoMGFHbHpMbVJwYzJOdmJtNWxZM1FvS1N3Z2RHaHBjeTVtYVd4MFpYSnpJRDBnWlM1emJHbGpaU2dwTENCMGFHbHpMbU52Ym01bFkzUW9LU2tnT2lCMGFHbHpMbVpwYkhSbGNuTWdQU0JsTG5Oc2FXTmxLQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSRVpYUjFibVVvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtUmxkSFZ1WlNBOUlHVXNJSFJvYVhNdWMyOTFjbU5sTG1SbGRIVnVaU0FoUFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnZEdocGN5NXBjMUJzWVhscGJtY2dQVDA5SUNFd0lDWW1JSFJvYVhNdWMyOTFjbU5sTG1SbGRIVnVaUzV6WlhSVVlYSm5aWFJCZEZScGJXVW9kR2hwY3k1a1pYUjFibVVzSUhSb2FYTXVZMjl1ZEdWNGRDNWpkWEp5Wlc1MFZHbHRaU3dnTGpBeEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHZGxkRVJsZEhWdVpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1a1pYUjFibVU3Q2lBZ0lDQjlDaUFnSUNCblpYUkdhV3gwWlhJb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFJtbHNkR1Z5Y3lncFd6QmRPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJtbHNkR1Z5S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhSR2FXeDBaWEp6S0dVZ1B5QmJDaUFnSUNBZ0lDQWdJQ0FnSUdVS0lDQWdJQ0FnSUNCZElEb2dXMTBwT3dvZ0lDQWdmUW9nSUNBZ2MyVjBVR3hoZVdKaFkydFNZWFJsS0dVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW9ZWE5RYkdGNVltRmphME52Ym5SeWIyd2dQVDA5SUNFeEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVFYVmthVzg2SUhSb2FYTWdRWFZrYVc4Z2FHRnpJRzV2SUhCc1lYbGlZV05ySUdOdmJuUnliMnd1SWlrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y0d4aGVXSmhZMnRTWVhSbElEMGdaU3dnZEdocGN5NXBjMUJzWVhscGJtY2dQVDA5SUNFd0lDWW1JSFJvYVhNdWMyOTFjbU5sTG5Cc1lYbGlZV05yVW1GMFpTNXpaWFJVWVhKblpYUkJkRlJwYldVb2RHaHBjeTV3YkdGNVltRmphMUpoZEdVc0lIUm9hWE11WTI5dWRHVjRkQzVqZFhKeVpXNTBWR2x0WlN3Z0xqQXhLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2RsZEZCc1lYbGlZV05yVW1GMFpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2JHRjVZbUZqYTFKaGRHVTdDaUFnSUNCOUNpQWdJQ0J2YmtWdVpHVmtLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVhWE5RYkdGNWFXNW5JRDBnSVRFN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJNYjI5d0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1oaGMxQnNZWGxpWVdOclEyOXVkSEp2YkNBOVBUMGdJVEVnUHlBb1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUJkV1JwYnpvZ2RHaHBjeUJCZFdScGJ5Qm9ZWE1nYm04Z2NHeGhlV0poWTJzZ1kyOXVkSEp2YkM0aUtTd2dJVEVwSURvZ2RHaHBjeTVzYjI5d093b2dJQ0FnZlFvZ0lDQWdjMlYwVEc5dmNDaGxLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YUdGelVHeGhlV0poWTJ0RGIyNTBjbTlzSUQwOVBTQWhNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMa0YxWkdsdk9pQjBhR2x6SUVGMVpHbHZJR2hoY3lCdWJ5QndiR0Y1WW1GamF5QmpiMjUwY205c0xpSXBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxteHZiM0FnUFNCbExDQjBhR2x6TG1selVHeGhlV2x1WnlBOVBUMGdJVEFnSmlZZ0tIUm9hWE11YzI5MWNtTmxMbXh2YjNBZ1BTQjBhR2x6TG14dmIzQXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwVEc5dmNGTjBZWEowS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVzYjI5d1UzUmhjblFnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBURzl2Y0VWdVpDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJHOXZjRVZ1WkNBOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJXYjJ4MWJXVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyRnBiaTVuWVdsdUxuWmhiSFZsT3dvZ0lDQWdmUW9nSUNBZ2MyVjBWbTlzZFcxbEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bllXbHVMbWRoYVc0dWMyVjBWR0Z5WjJWMFFYUlVhVzFsS0dVc0lIUm9hWE11WTI5dWRHVjRkQzVqZFhKeVpXNTBWR2x0WlN3Z0xqQXhLU3dnZEdocGN6c0tJQ0FnSUgwS2ZTd2dTMjRnUFNCdVpYY2dRU3dnVkhVZ1BTQnVaWGNnVlhRc0lFRjRJRDBnYm1WM0lFRXNJRkZ1SUQwZ2JtVjNJRUVzSUhkMUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCR1l5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxLU3dnZEdocGN5NXdZVzV1WlhJZ1BTQjBhR2x6TG1OdmJuUmxlSFF1WTNKbFlYUmxVR0Z1Ym1WeUtDa3NJSFJvYVhNdWNHRnVibVZ5TG5CaGJtNXBibWROYjJSbGJDQTlJQ0pJVWxSR0lpd2dkR2hwY3k1d1lXNXVaWEl1WTI5dWJtVmpkQ2gwYUdsekxtZGhhVzRwT3dvZ0lDQWdmUW9nSUNBZ1kyOXVibVZqZENncElIc0tJQ0FnSUNBZ0lDQnpkWEJsY2k1amIyNXVaV04wS0Nrc0lIUm9hWE11Y0dGdWJtVnlMbU52Ym01bFkzUW9kR2hwY3k1bllXbHVLVHNLSUNBZ0lIMEtJQ0FnSUdScGMyTnZibTVsWTNRb0tTQjdDaUFnSUNBZ0lDQWdjM1Z3WlhJdVpHbHpZMjl1Ym1WamRDZ3BMQ0IwYUdsekxuQmhibTVsY2k1a2FYTmpiMjV1WldOMEtIUm9hWE11WjJGcGJpazdDaUFnSUNCOUNpQWdJQ0JuWlhSUGRYUndkWFFvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR0Z1Ym1WeU93b2dJQ0FnZlFvZ0lDQWdaMlYwVW1WbVJHbHpkR0Z1WTJVb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y0dGdWJtVnlMbkpsWmtScGMzUmhibU5sT3dvZ0lDQWdmUW9nSUNBZ2MyVjBVbVZtUkdsemRHRnVZMlVvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJoYm01bGNpNXlaV1pFYVhOMFlXNWpaU0E5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUlNiMnhzYjJabVJtRmpkRzl5S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJoYm01bGNpNXliMnhzYjJabVJtRmpkRzl5T3dvZ0lDQWdmUW9nSUNBZ2MyVjBVbTlzYkc5bVprWmhZM1J2Y2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y0dGdWJtVnlMbkp2Ykd4dlptWkdZV04wYjNJZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaMlYwUkdsemRHRnVZMlZOYjJSbGJDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d1lXNXVaWEl1WkdsemRHRnVZMlZOYjJSbGJEc0tJQ0FnSUgwS0lDQWdJSE5sZEVScGMzUmhibU5sVFc5a1pXd29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQmhibTVsY2k1a2FYTjBZVzVqWlUxdlpHVnNJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRFMWhlRVJwYzNSaGJtTmxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQmhibTVsY2k1dFlYaEVhWE4wWVc1alpUc0tJQ0FnSUgwS0lDQWdJSE5sZEUxaGVFUnBjM1JoYm1ObEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d1lXNXVaWEl1YldGNFJHbHpkR0Z1WTJVZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUkdseVpXTjBhVzl1WVd4RGIyNWxLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d1lXNXVaWEl1WTI5dVpVbHVibVZ5UVc1bmJHVWdQU0JsTENCMGFHbHpMbkJoYm01bGNpNWpiMjVsVDNWMFpYSkJibWRzWlNBOUlIUXNJSFJvYVhNdWNHRnVibVZ5TG1OdmJtVlBkWFJsY2tkaGFXNGdQU0J1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxUV0YwY21sNFYyOXliR1FvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2h6ZFhCbGNpNTFjR1JoZEdWTllYUnlhWGhYYjNKc1pDaGxLU3dnZEdocGN5NW9ZWE5RYkdGNVltRmphME52Ym5SeWIyd2dQVDA5SUNFd0lDWW1JSFJvYVhNdWFYTlFiR0Y1YVc1bklEMDlQU0FoTVNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUhSb2FYTXViV0YwY21sNFYyOXliR1F1WkdWamIyMXdiM05sS0V0dUxDQlVkU3dnUVhncExDQlJiaTV6WlhRb01Dd2dNQ3dnTVNrdVlYQndiSGxSZFdGMFpYSnVhVzl1S0ZSMUtUc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11Y0dGdWJtVnlPd29nSUNBZ0lDQWdJR2xtSUNoMExuQnZjMmwwYVc5dVdDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVZMjl1ZEdWNGRDNWpkWEp5Wlc1MFZHbHRaU0FySUhSb2FYTXViR2x6ZEdWdVpYSXVkR2x0WlVSbGJIUmhPd29nSUNBZ0lDQWdJQ0FnSUNCMExuQnZjMmwwYVc5dVdDNXNhVzVsWVhKU1lXMXdWRzlXWVd4MVpVRjBWR2x0WlNoTGJpNTRMQ0J1S1N3Z2RDNXdiM05wZEdsdmJsa3ViR2x1WldGeVVtRnRjRlJ2Vm1Gc2RXVkJkRlJwYldVb1MyNHVlU3dnYmlrc0lIUXVjRzl6YVhScGIyNWFMbXhwYm1WaGNsSmhiWEJVYjFaaGJIVmxRWFJVYVcxbEtFdHVMbm9zSUc0cExDQjBMbTl5YVdWdWRHRjBhVzl1V0M1c2FXNWxZWEpTWVcxd1ZHOVdZV3gxWlVGMFZHbHRaU2hSYmk1NExDQnVLU3dnZEM1dmNtbGxiblJoZEdsdmJsa3ViR2x1WldGeVVtRnRjRlJ2Vm1Gc2RXVkJkRlJwYldVb1VXNHVlU3dnYmlrc0lIUXViM0pwWlc1MFlYUnBiMjVhTG14cGJtVmhjbEpoYlhCVWIxWmhiSFZsUVhSVWFXMWxLRkZ1TG5vc0lHNHBPd29nSUNBZ0lDQWdJSDBnWld4elpTQjBMbk5sZEZCdmMybDBhVzl1S0V0dUxuZ3NJRXR1TG5rc0lFdHVMbm9wTENCMExuTmxkRTl5YVdWdWRHRjBhVzl1S0ZGdUxuZ3NJRkZ1TG5rc0lGRnVMbm9wT3dvZ0lDQWdmUXA5TENCQmRTQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFnUFNBeU1EUTRLWHNLSUNBZ0lDQWdJQ0IwYUdsekxtRnVZV3g1YzJWeUlEMGdaUzVqYjI1MFpYaDBMbU55WldGMFpVRnVZV3g1YzJWeUtDa3NJSFJvYVhNdVlXNWhiSGx6WlhJdVptWjBVMmw2WlNBOUlIUXNJSFJvYVhNdVpHRjBZU0E5SUc1bGR5QlZhVzUwT0VGeWNtRjVLSFJvYVhNdVlXNWhiSGx6WlhJdVpuSmxjWFZsYm1ONVFtbHVRMjkxYm5RcExDQmxMbWRsZEU5MWRIQjFkQ2dwTG1OdmJtNWxZM1FvZEdocGN5NWhibUZzZVhObGNpazdDaUFnSUNCOUNpQWdJQ0JuWlhSR2NtVnhkV1Z1WTNsRVlYUmhLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRnVZV3g1YzJWeUxtZGxkRUo1ZEdWR2NtVnhkV1Z1WTNsRVlYUmhLSFJvYVhNdVpHRjBZU2tzSUhSb2FYTXVaR0YwWVRzS0lDQWdJSDBLSUNBZ0lHZGxkRUYyWlhKaFoyVkdjbVZ4ZFdWdVkza29LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0F3TENCMElEMGdkR2hwY3k1blpYUkdjbVZ4ZFdWdVkzbEVZWFJoS0NrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNRHNnYmlBOElIUXViR1Z1WjNSb095QnVLeXNwWlNBclBTQjBXMjVkT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsSUM4Z2RDNXNaVzVuZEdnN0NpQWdJQ0I5Q24wc0lFSmpJRDBnWTJ4aGMzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2JpbDdDaUFnSUNBZ0lDQWdkR2hwY3k1aWFXNWthVzVuSUQwZ1pTd2dkR2hwY3k1MllXeDFaVk5wZW1VZ1BTQnVPd29nSUNBZ0lDQWdJR3hsZENCcExDQnlMQ0JoT3dvZ0lDQWdJQ0FnSUhOM2FYUmphQ2gwS1hzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaWNYVmhkR1Z5Ym1sdmJpSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBJRDBnZEdocGN5NWZjMnhsY25Bc0lISWdQU0IwYUdsekxsOXpiR1Z5Y0VGa1pHbDBhWFpsTENCaElEMGdkR2hwY3k1ZmMyVjBRV1JrYVhScGRtVkpaR1Z1ZEdsMGVWRjFZWFJsY201cGIyNHNJSFJvYVhNdVluVm1abVZ5SUQwZ2JtVjNJRVpzYjJGME5qUkJjbkpoZVNodUlDb2dOaWtzSUhSb2FYTXVYM2R2Y210SmJtUmxlQ0E5SURVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpYzNSeWFXNW5Jam9LSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpWW05dmJDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBJRDBnZEdocGN5NWZjMlZzWldOMExDQnlJRDBnZEdocGN5NWZjMlZzWldOMExDQmhJRDBnZEdocGN5NWZjMlYwUVdSa2FYUnBkbVZKWkdWdWRHbDBlVTkwYUdWeUxDQjBhR2x6TG1KMVptWmxjaUE5SUc1bGR5QkJjbkpoZVNodUlDb2dOU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tnUFNCMGFHbHpMbDlzWlhKd0xDQnlJRDBnZEdocGN5NWZiR1Z5Y0VGa1pHbDBhWFpsTENCaElEMGdkR2hwY3k1ZmMyVjBRV1JrYVhScGRtVkpaR1Z1ZEdsMGVVNTFiV1Z5YVdNc0lIUm9hWE11WW5WbVptVnlJRDBnYm1WM0lFWnNiMkYwTmpSQmNuSmhlU2h1SUNvZ05TazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFJvYVhNdVgyMXBlRUoxWm1abGNsSmxaMmx2YmlBOUlHa3NJSFJvYVhNdVgyMXBlRUoxWm1abGNsSmxaMmx2YmtGa1pHbDBhWFpsSUQwZ2Npd2dkR2hwY3k1ZmMyVjBTV1JsYm5ScGRIa2dQU0JoTENCMGFHbHpMbDl2Y21sblNXNWtaWGdnUFNBekxDQjBhR2x6TGw5aFpHUkpibVJsZUNBOUlEUXNJSFJvYVhNdVkzVnRkV3hoZEdsMlpWZGxhV2RvZENBOUlEQXNJSFJvYVhNdVkzVnRkV3hoZEdsMlpWZGxhV2RvZEVGa1pHbDBhWFpsSUQwZ01Dd2dkR2hwY3k1MWMyVkRiM1Z1ZENBOUlEQXNJSFJvYVhNdWNtVm1aWEpsYm1ObFEyOTFiblFnUFNBd093b2dJQ0FnZlFvZ0lDQWdZV05qZFcxMWJHRjBaU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1KMVptWmxjaXdnYVNBOUlIUm9hWE11ZG1Gc2RXVlRhWHBsTENCeUlEMGdaU0FxSUdrZ0t5QnBMQ0JoSUQwZ2RHaHBjeTVqZFcxMWJHRjBhWFpsVjJWcFoyaDBPd29nSUNBZ0lDQWdJR2xtSUNoaElEMDlQU0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdieUE5SURBN0lHOGdJVDA5SUdrN0lDc3JieWx1VzNJZ0t5QnZYU0E5SUc1YmIxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdFZ1BTQjBPd29nSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdFZ0t6MGdkRHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCMElDOGdZVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYldsNFFuVm1abVZ5VW1WbmFXOXVLRzRzSUhJc0lEQXNJRzhzSUdrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBhR2x6TG1OMWJYVnNZWFJwZG1WWFpXbG5hSFFnUFNCaE93b2dJQ0FnZlFvZ0lDQWdZV05qZFcxMWJHRjBaVUZrWkdsMGFYWmxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVZblZtWm1WeUxDQnVJRDBnZEdocGN5NTJZV3gxWlZOcGVtVXNJR2tnUFNCdUlDb2dkR2hwY3k1ZllXUmtTVzVrWlhnN0NpQWdJQ0FnSUNBZ2RHaHBjeTVqZFcxMWJHRjBhWFpsVjJWcFoyaDBRV1JrYVhScGRtVWdQVDA5SURBZ0ppWWdkR2hwY3k1ZmMyVjBTV1JsYm5ScGRIa29LU3dnZEdocGN5NWZiV2w0UW5WbVptVnlVbVZuYVc5dVFXUmthWFJwZG1Vb2RDd2dhU3dnTUN3Z1pTd2diaWtzSUhSb2FYTXVZM1Z0ZFd4aGRHbDJaVmRsYVdkb2RFRmtaR2wwYVhabElDczlJR1U3Q2lBZ0lDQjlDaUFnSUNCaGNIQnNlU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMblpoYkhWbFUybDZaU3dnYmlBOUlIUm9hWE11WW5WbVptVnlMQ0JwSUQwZ1pTQXFJSFFnS3lCMExDQnlJRDBnZEdocGN5NWpkVzExYkdGMGFYWmxWMlZwWjJoMExDQmhJRDBnZEdocGN5NWpkVzExYkdGMGFYWmxWMlZwWjJoMFFXUmthWFJwZG1Vc0lHOGdQU0IwYUdsekxtSnBibVJwYm1jN0NpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkzVnRkV3hoZEdsMlpWZGxhV2RvZENBOUlEQXNJSFJvYVhNdVkzVnRkV3hoZEdsMlpWZGxhV2RvZEVGa1pHbDBhWFpsSUQwZ01Dd2djaUE4SURFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTWdQU0IwSUNvZ2RHaHBjeTVmYjNKcFowbHVaR1Y0T3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5dGFYaENkV1ptWlhKU1pXZHBiMjRvYml3Z2FTd2dZeXdnTVNBdElISXNJSFFwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCaElENGdNQ0FtSmlCMGFHbHpMbDl0YVhoQ2RXWm1aWEpTWldkcGIyNUJaR1JwZEdsMlpTaHVMQ0JwTENCMGFHbHpMbDloWkdSSmJtUmxlQ0FxSUhRc0lERXNJSFFwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWXlBOUlIUXNJR3dnUFNCMElDc2dkRHNnWXlBaFBUMGdiRHNnS3l0aktXbG1JQ2h1VzJOZElDRTlQU0J1VzJNZ0t5QjBYU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnZMbk5sZEZaaGJIVmxLRzRzSUdrcE93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0J6WVhabFQzSnBaMmx1WVd4VGRHRjBaU2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVZbWx1WkdsdVp5d2dkQ0E5SUhSb2FYTXVZblZtWm1WeUxDQnVJRDBnZEdocGN5NTJZV3gxWlZOcGVtVXNJR2tnUFNCdUlDb2dkR2hwY3k1ZmIzSnBaMGx1WkdWNE93b2dJQ0FnSUNBZ0lHVXVaMlYwVm1Gc2RXVW9kQ3dnYVNrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCeUlEMGdiaXdnWVNBOUlHazdJSElnSVQwOUlHRTdJQ3NyY2lsMFczSmRJRDBnZEZ0cElDc2djaUFsSUc1ZE93b2dJQ0FnSUNBZ0lIUm9hWE11WDNObGRFbGtaVzUwYVhSNUtDa3NJSFJvYVhNdVkzVnRkV3hoZEdsMlpWZGxhV2RvZENBOUlEQXNJSFJvYVhNdVkzVnRkV3hoZEdsMlpWZGxhV2RvZEVGa1pHbDBhWFpsSUQwZ01Ec0tJQ0FnSUgwS0lDQWdJSEpsYzNSdmNtVlBjbWxuYVc1aGJGTjBZWFJsS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTUyWVd4MVpWTnBlbVVnS2lBek93b2dJQ0FnSUNBZ0lIUm9hWE11WW1sdVpHbHVaeTV6WlhSV1lXeDFaU2gwYUdsekxtSjFabVpsY2l3Z1pTazdDaUFnSUNCOUNpQWdJQ0JmYzJWMFFXUmthWFJwZG1WSlpHVnVkR2wwZVU1MWJXVnlhV01vS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbDloWkdSSmJtUmxlQ0FxSUhSb2FYTXVkbUZzZFdWVGFYcGxMQ0IwSUQwZ1pTQXJJSFJvYVhNdWRtRnNkV1ZUYVhwbE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJR1U3SUc0Z1BDQjBPeUJ1S3lzcGRHaHBjeTVpZFdabVpYSmJibDBnUFNBd093b2dJQ0FnZlFvZ0lDQWdYM05sZEVGa1pHbDBhWFpsU1dSbGJuUnBkSGxSZFdGMFpYSnVhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WDNObGRFRmtaR2wwYVhabFNXUmxiblJwZEhsT2RXMWxjbWxqS0Nrc0lIUm9hWE11WW5WbVptVnlXM1JvYVhNdVgyRmtaRWx1WkdWNElDb2dkR2hwY3k1MllXeDFaVk5wZW1VZ0t5QXpYU0E5SURFN0NpQWdJQ0I5Q2lBZ0lDQmZjMlYwUVdSa2FYUnBkbVZKWkdWdWRHbDBlVTkwYUdWeUtDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3k1ZmIzSnBaMGx1WkdWNElDb2dkR2hwY3k1MllXeDFaVk5wZW1Vc0lIUWdQU0IwYUdsekxsOWhaR1JKYm1SbGVDQXFJSFJvYVhNdWRtRnNkV1ZUYVhwbE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJREE3SUc0Z1BDQjBhR2x6TG5aaGJIVmxVMmw2WlRzZ2Jpc3JLWFJvYVhNdVluVm1abVZ5VzNRZ0t5QnVYU0E5SUhSb2FYTXVZblZtWm1WeVcyVWdLeUJ1WFRzS0lDQWdJSDBLSUNBZ0lGOXpaV3hsWTNRb1pTd2dkQ3dnYml3Z2FTd2djaWtnZXdvZ0lDQWdJQ0FnSUdsbUlDaHBJRDQ5SUM0MUtTQm1iM0lvYkdWMElHRWdQU0F3T3lCaElDRTlQU0J5T3lBcksyRXBaVnQwSUNzZ1lWMGdQU0JsVzI0Z0t5QmhYVHNLSUNBZ0lIMEtJQ0FnSUY5emJHVnljQ2hsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0FnSUNBZ1ZYUXVjMnhsY25CR2JHRjBLR1VzSUhRc0lHVXNJSFFzSUdVc0lHNHNJR2twT3dvZ0lDQWdmUW9nSUNBZ1gzTnNaWEp3UVdSa2FYUnBkbVVvWlN3Z2RDd2diaXdnYVN3Z2Npa2dld29nSUNBZ0lDQWdJR3hsZENCaElEMGdkR2hwY3k1ZmQyOXlhMGx1WkdWNElDb2djanNLSUNBZ0lDQWdJQ0JWZEM1dGRXeDBhWEJzZVZGMVlYUmxjbTVwYjI1elJteGhkQ2hsTENCaExDQmxMQ0IwTENCbExDQnVLU3dnVlhRdWMyeGxjbkJHYkdGMEtHVXNJSFFzSUdVc0lIUXNJR1VzSUdFc0lHa3BPd29nSUNBZ2ZRb2dJQ0FnWDJ4bGNuQW9aU3dnZEN3Z2Jpd2dhU3dnY2lrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ01TQXRJR2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J2SUQwZ01Ec2dieUFoUFQwZ2Nqc2dLeXR2S1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdNZ1BTQjBJQ3NnYnpzS0lDQWdJQ0FnSUNBZ0lDQWdaVnRqWFNBOUlHVmJZMTBnS2lCaElDc2daVnR1SUNzZ2IxMGdLaUJwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lGOXNaWEp3UVdSa2FYUnBkbVVvWlN3Z2RDd2diaXdnYVN3Z2Npa2dld29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdZU0E5SURBN0lHRWdJVDA5SUhJN0lDc3JZU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2RDQXJJR0U3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVmJiMTBnUFNCbFcyOWRJQ3NnWlZ0dUlDc2dZVjBnS2lCcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS2ZTd2dTMk1nUFNBaVhGeGJYRnhkWEZ3dU9seGNMeUlzSUZKNElEMGdibVYzSUZKbFowVjRjQ2dpV3lJZ0t5QkxZeUFySUNKZElpd2dJbWNpS1N3Z1VXTWdQU0FpVzE0aUlDc2dTMk1nS3lBaVhTSXNJRU40SUQwZ0lsdGVJaUFySUV0akxuSmxjR3hoWTJVb0lseGNMaUlzSUNJaUtTQXJJQ0pkSWl3Z1VIZ2dQU0F2S0NnL09sZERLMXRjTHpwZEtTb3BMeTV6YjNWeVkyVXVjbVZ3YkdGalpTZ2lWME1pTENCUll5a3NJRXg0SUQwZ0x5aFhRMDlFS3lrL0x5NXpiM1Z5WTJVdWNtVndiR0ZqWlNnaVYwTlBSQ0lzSUVONEtTd2dTWGdnUFNBdktEODZYQzRvVjBNcktTZy9PbHhiS0M0cktWeGRLVDhwUHk4dWMyOTFjbU5sTG5KbGNHeGhZMlVvSWxkRElpd2dVV01wTENCVmVDQTlJQzljTGloWFF5c3BLRDg2WEZzb0xpc3BYRjBwUHk4dWMyOTFjbU5sTG5KbGNHeGhZMlVvSWxkRElpd2dVV01wTENCRWVDQTlJRzVsZHlCU1pXZEZlSEFvSWw0aUlDc2dVSGdnS3lCTWVDQXJJRWw0SUNzZ1ZYZ2dLeUFpSkNJcExDQk9lQ0E5SUZzS0lDQWdJQ0p0WVhSbGNtbGhiQ0lzQ2lBZ0lDQWliV0YwWlhKcFlXeHpJaXdLSUNBZ0lDSmliMjVsY3lJc0NpQWdJQ0FpYldGd0lncGRMQ0I2WXlBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRwZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnYmlCOGZDQkxaUzV3WVhKelpWUnlZV05yVG1GdFpTaDBLVHNLSUNBZ0lDQWdJQ0IwYUdsekxsOTBZWEpuWlhSSGNtOTFjQ0E5SUdVc0lIUm9hWE11WDJKcGJtUnBibWR6SUQwZ1pTNXpkV0p6WTNKcFltVmZLSFFzSUdrcE93b2dJQ0FnZlFvZ0lDQWdaMlYwVm1Gc2RXVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WW1sdVpDZ3BPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1ZmRHRnlaMlYwUjNKdmRYQXVia05oWTJobFpFOWlhbVZqZEhOZkxDQnBJRDBnZEdocGN5NWZZbWx1WkdsdVozTmJibDA3Q2lBZ0lDQWdJQ0FnYVNBaFBUMGdkbTlwWkNBd0lDWW1JR2t1WjJWMFZtRnNkV1VvWlN3Z2RDazdDaUFnSUNCOUNpQWdJQ0J6WlhSV1lXeDFaU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TGw5aWFXNWthVzVuY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdrZ1BTQjBhR2x6TGw5MFlYSm5aWFJIY205MWNDNXVRMkZqYUdWa1QySnFaV04wYzE4c0lISWdQU0J1TG14bGJtZDBhRHNnYVNBaFBUMGdjanNnS3l0cEtXNWJhVjB1YzJWMFZtRnNkV1VvWlN3Z2RDazdDaUFnSUNCOUNpQWdJQ0JpYVc1a0tDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3k1ZlltbHVaR2x1WjNNN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdkR2hwY3k1ZmRHRnlaMlYwUjNKdmRYQXVia05oWTJobFpFOWlhbVZqZEhOZkxDQnVJRDBnWlM1c1pXNW5kR2c3SUhRZ0lUMDlJRzQ3SUNzcmRDbGxXM1JkTG1KcGJtUW9LVHNLSUNBZ0lIMEtJQ0FnSUhWdVltbHVaQ2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVYMkpwYm1ScGJtZHpPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SUhSb2FYTXVYM1JoY21kbGRFZHliM1Z3TG01RFlXTm9aV1JQWW1wbFkzUnpYeXdnYmlBOUlHVXViR1Z1WjNSb095QjBJQ0U5UFNCdU95QXJLM1FwWlZ0MFhTNTFibUpwYm1Rb0tUc0tJQ0FnSUgwS2ZTd2dTMlVnUFNCamJHRnpjeUJ6TVNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1S1hzS0lDQWdJQ0FnSUNCMGFHbHpMbkJoZEdnZ1BTQjBMQ0IwYUdsekxuQmhjbk5sWkZCaGRHZ2dQU0J1SUh4OElITXhMbkJoY25ObFZISmhZMnRPWVcxbEtIUXBMQ0IwYUdsekxtNXZaR1VnUFNCek1TNW1hVzVrVG05a1pTaGxMQ0IwYUdsekxuQmhjbk5sWkZCaGRHZ3VibTlrWlU1aGJXVXBMQ0IwYUdsekxuSnZiM1JPYjJSbElEMGdaU3dnZEdocGN5NW5aWFJXWVd4MVpTQTlJSFJvYVhNdVgyZGxkRlpoYkhWbFgzVnVZbTkxYm1Rc0lIUm9hWE11YzJWMFZtRnNkV1VnUFNCMGFHbHpMbDl6WlhSV1lXeDFaVjkxYm1KdmRXNWtPd29nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJR055WldGMFpTaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVWdKaVlnWlM1cGMwRnVhVzFoZEdsdmJrOWlhbVZqZEVkeWIzVndJRDhnYm1WM0lITXhMa052YlhCdmMybDBaU2hsTENCMExDQnVLU0E2SUc1bGR5QnpNU2hsTENCMExDQnVLVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJ6WVc1cGRHbDZaVTV2WkdWT1lXMWxLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1eVpYQnNZV05sS0M5Y2N5OW5MQ0FpWHlJcExuSmxjR3hoWTJVb1VuZ3NJQ0lpS1RzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCd1lYSnpaVlJ5WVdOclRtRnRaU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCRWVDNWxlR1ZqS0dVcE93b2dJQ0FnSUNBZ0lHbG1JQ2gwSUQwOVBTQnVkV3hzS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSWxCeWIzQmxjblI1UW1sdVpHbHVaem9nUTJGdWJtOTBJSEJoY25ObElIUnlZV05yVG1GdFpUb2dJaUFySUdVcE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J1YjJSbFRtRnRaVG9nZEZzeVhTd0tJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBUbUZ0WlRvZ2RGc3pYU3dLSUNBZ0lDQWdJQ0FnSUNBZ2IySnFaV04wU1c1a1pYZzZJSFJiTkYwc0NpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUjVUbUZ0WlRvZ2RGczFYU3dLSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEhsSmJtUmxlRG9nZEZzMlhRb2dJQ0FnSUNBZ0lIMHNJR2tnUFNCdUxtNXZaR1ZPWVcxbElDWW1JRzR1Ym05a1pVNWhiV1V1YkdGemRFbHVaR1Y0VDJZb0lpNGlLVHNLSUNBZ0lDQWdJQ0JwWmlBb2FTQWhQVDBnZG05cFpDQXdJQ1ltSUdrZ0lUMDlJQzB4S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeUlEMGdiaTV1YjJSbFRtRnRaUzV6ZFdKemRISnBibWNvYVNBcklERXBPd29nSUNBZ0lDQWdJQ0FnSUNCT2VDNXBibVJsZUU5bUtISXBJQ0U5UFNBdE1TQW1KaUFvYmk1dWIyUmxUbUZ0WlNBOUlHNHVibTlrWlU1aGJXVXVjM1ZpYzNSeWFXNW5LREFzSUdrcExDQnVMbTlpYW1WamRFNWhiV1VnUFNCeUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0c0dWNISnZjR1Z5ZEhsT1lXMWxJRDA5UFNCdWRXeHNJSHg4SUc0dWNISnZjR1Z5ZEhsT1lXMWxMbXhsYm1kMGFDQTlQVDBnTUNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NKUWNtOXdaWEowZVVKcGJtUnBibWM2SUdOaGJpQnViM1FnY0dGeWMyVWdjSEp2Y0dWeWRIbE9ZVzFsSUdaeWIyMGdkSEpoWTJ0T1lXMWxPaUFpSUNzZ1pTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNDdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdabWx1WkU1dlpHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2gwSUQwOVBTQjJiMmxrSURBZ2ZId2dkQ0E5UFQwZ0lpSWdmSHdnZENBOVBUMGdJaTRpSUh4OElIUWdQVDA5SUMweElIeDhJSFFnUFQwOUlHVXVibUZ0WlNCOGZDQjBJRDA5UFNCbExuVjFhV1FwSUhKbGRIVnliaUJsT3dvZ0lDQWdJQ0FnSUdsbUlDaGxMbk5yWld4bGRHOXVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1pTNXphMlZzWlhSdmJpNW5aWFJDYjI1bFFubE9ZVzFsS0hRcE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JpQWhQVDBnZG05cFpDQXdLU0J5WlhSMWNtNGdianNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYVdZZ0tHVXVZMmhwYkdSeVpXNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCbWRXNWpkR2x2YmloeUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHRWdQU0F3T3lCaElEd2djaTVzWlc1bmRHZzdJR0VyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc4Z1BTQnlXMkZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2TG01aGJXVWdQVDA5SUhRZ2ZId2dieTUxZFdsa0lEMDlQU0IwS1NCeVpYUjFjbTRnYnpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlHNG9ieTVqYUdsc1pISmxiaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR01wSUhKbGRIVnliaUJqT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N0NpQWdJQ0FnSUNBZ0lDQWdJSDBzSUdrZ1BTQnVLR1V1WTJocGJHUnlaVzRwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNrZ2NtVjBkWEp1SUdrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPd29nSUNBZ2ZRb2dJQ0FnWDJkbGRGWmhiSFZsWDNWdVlYWmhhV3hoWW14bEtDa2dlMzBLSUNBZ0lGOXpaWFJXWVd4MVpWOTFibUYyWVdsc1lXSnNaU2dwSUh0OUNpQWdJQ0JmWjJWMFZtRnNkV1ZmWkdseVpXTjBLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQmxXM1JkSUQwZ2RHaHBjeTUwWVhKblpYUlBZbXBsWTNSYmRHaHBjeTV3Y205d1pYSjBlVTVoYldWZE93b2dJQ0FnZlFvZ0lDQWdYMmRsZEZaaGJIVmxYMkZ5Y21GNUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVjbVZ6YjJ4MlpXUlFjbTl3WlhKMGVUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dQU0F3TENCeUlEMGdiaTVzWlc1bmRHZzdJR2tnSVQwOUlISTdJQ3NyYVNsbFczUXJLMTBnUFNCdVcybGRPd29nSUNBZ2ZRb2dJQ0FnWDJkbGRGWmhiSFZsWDJGeWNtRjVSV3hsYldWdWRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ1pWdDBYU0E5SUhSb2FYTXVjbVZ6YjJ4MlpXUlFjbTl3WlhKMGVWdDBhR2x6TG5CeWIzQmxjblI1U1c1a1pYaGRPd29nSUNBZ2ZRb2dJQ0FnWDJkbGRGWmhiSFZsWDNSdlFYSnlZWGtvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWNtVnpiMngyWldSUWNtOXdaWEowZVM1MGIwRnljbUY1S0dVc0lIUXBPd29nSUNBZ2ZRb2dJQ0FnWDNObGRGWmhiSFZsWDJScGNtVmpkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1MFlYSm5aWFJQWW1wbFkzUmJkR2hwY3k1d2NtOXdaWEowZVU1aGJXVmRJRDBnWlZ0MFhUc0tJQ0FnSUgwS0lDQWdJRjl6WlhSV1lXeDFaVjlrYVhKbFkzUmZjMlYwVG1WbFpITlZjR1JoZEdVb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVkR0Z5WjJWMFQySnFaV04wVzNSb2FYTXVjSEp2Y0dWeWRIbE9ZVzFsWFNBOUlHVmJkRjBzSUhSb2FYTXVkR0Z5WjJWMFQySnFaV04wTG01bFpXUnpWWEJrWVhSbElEMGdJVEE3Q2lBZ0lDQjlDaUFnSUNCZmMyVjBWbUZzZFdWZlpHbHlaV04wWDNObGRFMWhkSEpwZUZkdmNteGtUbVZsWkhOVmNHUmhkR1VvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWRHRnlaMlYwVDJKcVpXTjBXM1JvYVhNdWNISnZjR1Z5ZEhsT1lXMWxYU0E5SUdWYmRGMHNJSFJvYVhNdWRHRnlaMlYwVDJKcVpXTjBMbTFoZEhKcGVGZHZjbXhrVG1WbFpITlZjR1JoZEdVZ1BTQWhNRHNLSUNBZ0lIMEtJQ0FnSUY5elpYUldZV3gxWlY5aGNuSmhlU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG5KbGMyOXNkbVZrVUhKdmNHVnlkSGs3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Dd2djaUE5SUc0dWJHVnVaM1JvT3lCcElDRTlQU0J5T3lBcksya3BibHRwWFNBOUlHVmJkQ3NyWFRzS0lDQWdJSDBLSUNBZ0lGOXpaWFJXWVd4MVpWOWhjbkpoZVY5elpYUk9aV1ZrYzFWd1pHRjBaU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG5KbGMyOXNkbVZrVUhKdmNHVnlkSGs3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Dd2djaUE5SUc0dWJHVnVaM1JvT3lCcElDRTlQU0J5T3lBcksya3BibHRwWFNBOUlHVmJkQ3NyWFRzS0lDQWdJQ0FnSUNCMGFHbHpMblJoY21kbGRFOWlhbVZqZEM1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3T3dvZ0lDQWdmUW9nSUNBZ1gzTmxkRlpoYkhWbFgyRnljbUY1WDNObGRFMWhkSEpwZUZkdmNteGtUbVZsWkhOVmNHUmhkR1VvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1eVpYTnZiSFpsWkZCeWIzQmxjblI1T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQXNJSElnUFNCdUxteGxibWQwYURzZ2FTQWhQVDBnY2pzZ0t5dHBLVzViYVYwZ1BTQmxXM1FySzEwN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwWVhKblpYUlBZbXBsWTNRdWJXRjBjbWw0VjI5eWJHUk9aV1ZrYzFWd1pHRjBaU0E5SUNFd093b2dJQ0FnZlFvZ0lDQWdYM05sZEZaaGJIVmxYMkZ5Y21GNVJXeGxiV1Z1ZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXlaWE52YkhabFpGQnliM0JsY25SNVczUm9hWE11Y0hKdmNHVnlkSGxKYm1SbGVGMGdQU0JsVzNSZE93b2dJQ0FnZlFvZ0lDQWdYM05sZEZaaGJIVmxYMkZ5Y21GNVJXeGxiV1Z1ZEY5elpYUk9aV1ZrYzFWd1pHRjBaU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTnZiSFpsWkZCeWIzQmxjblI1VzNSb2FYTXVjSEp2Y0dWeWRIbEpibVJsZUYwZ1BTQmxXM1JkTENCMGFHbHpMblJoY21kbGRFOWlhbVZqZEM1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3T3dvZ0lDQWdmUW9nSUNBZ1gzTmxkRlpoYkhWbFgyRnljbUY1Uld4bGJXVnVkRjl6WlhSTllYUnlhWGhYYjNKc1pFNWxaV1J6VlhCa1lYUmxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMyOXNkbVZrVUhKdmNHVnlkSGxiZEdocGN5NXdjbTl3WlhKMGVVbHVaR1Y0WFNBOUlHVmJkRjBzSUhSb2FYTXVkR0Z5WjJWMFQySnFaV04wTG0xaGRISnBlRmR2Y214a1RtVmxaSE5WY0dSaGRHVWdQU0FoTURzS0lDQWdJSDBLSUNBZ0lGOXpaWFJXWVd4MVpWOW1jbTl0UVhKeVlYa29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11Y21WemIyeDJaV1JRY205d1pYSjBlUzVtY205dFFYSnlZWGtvWlN3Z2RDazdDaUFnSUNCOUNpQWdJQ0JmYzJWMFZtRnNkV1ZmWm5KdmJVRnljbUY1WDNObGRFNWxaV1J6VlhCa1lYUmxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMyOXNkbVZrVUhKdmNHVnlkSGt1Wm5KdmJVRnljbUY1S0dVc0lIUXBMQ0IwYUdsekxuUmhjbWRsZEU5aWFtVmpkQzV1WldWa2MxVndaR0YwWlNBOUlDRXdPd29nSUNBZ2ZRb2dJQ0FnWDNObGRGWmhiSFZsWDJaeWIyMUJjbkpoZVY5elpYUk5ZWFJ5YVhoWGIzSnNaRTVsWldSelZYQmtZWFJsS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuSmxjMjlzZG1Wa1VISnZjR1Z5ZEhrdVpuSnZiVUZ5Y21GNUtHVXNJSFFwTENCMGFHbHpMblJoY21kbGRFOWlhbVZqZEM1dFlYUnlhWGhYYjNKc1pFNWxaV1J6VlhCa1lYUmxJRDBnSVRBN0NpQWdJQ0I5Q2lBZ0lDQmZaMlYwVm1Gc2RXVmZkVzVpYjNWdVpDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVpYVc1a0tDa3NJSFJvYVhNdVoyVjBWbUZzZFdVb1pTd2dkQ2s3Q2lBZ0lDQjlDaUFnSUNCZmMyVjBWbUZzZFdWZmRXNWliM1Z1WkNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWlhVzVrS0Nrc0lIUm9hWE11YzJWMFZtRnNkV1VvWlN3Z2RDazdDaUFnSUNCOUNpQWdJQ0JpYVc1a0tDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3k1dWIyUmxMQ0IwSUQwZ2RHaHBjeTV3WVhKelpXUlFZWFJvTENCdUlEMGdkQzV2WW1wbFkzUk9ZVzFsTENCcElEMGdkQzV3Y205d1pYSjBlVTVoYldVc0lISWdQU0IwTG5CeWIzQmxjblI1U1c1a1pYZzdDaUFnSUNBZ0lDQWdhV1lnS0dVZ2ZId2dLR1VnUFNCek1TNW1hVzVrVG05a1pTaDBhR2x6TG5KdmIzUk9iMlJsTENCMExtNXZaR1ZPWVcxbEtTd2dkR2hwY3k1dWIyUmxJRDBnWlNrc0lIUm9hWE11WjJWMFZtRnNkV1VnUFNCMGFHbHpMbDluWlhSV1lXeDFaVjkxYm1GMllXbHNZV0pzWlN3Z2RHaHBjeTV6WlhSV1lXeDFaU0E5SUhSb2FYTXVYM05sZEZaaGJIVmxYM1Z1WVhaaGFXeGhZbXhsTENBaFpTa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsQnliM0JsY25SNVFtbHVaR2x1WnpvZ1RtOGdkR0Z5WjJWMElHNXZaR1VnWm05MWJtUWdabTl5SUhSeVlXTnJPaUFpSUNzZ2RHaHBjeTV3WVhSb0lDc2dJaTRpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvYmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJSFF1YjJKcVpXTjBTVzVrWlhnN0NpQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDaHVLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ltMWhkR1Z5YVdGc2N5STZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmxMbTFoZEdWeWFXRnNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxCeWIzQmxjblI1UW1sdVpHbHVaem9nUTJGdUlHNXZkQ0JpYVc1a0lIUnZJRzFoZEdWeWFXRnNJR0Z6SUc1dlpHVWdaRzlsY3lCdWIzUWdhR0YyWlNCaElHMWhkR1Z5YVdGc0xpSXNJSFJvYVhNcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpTNXRZWFJsY21saGJDNXRZWFJsY21saGJITXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VUhKdmNHVnlkSGxDYVc1a2FXNW5PaUJEWVc0Z2JtOTBJR0pwYm1RZ2RHOGdiV0YwWlhKcFlXd3ViV0YwWlhKcFlXeHpJR0Z6SUc1dlpHVXViV0YwWlhKcFlXd2daRzlsY3lCdWIzUWdhR0YyWlNCaElHMWhkR1Z5YVdGc2N5QmhjbkpoZVM0aUxDQjBhR2x6S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnWlM1dFlYUmxjbWxoYkM1dFlYUmxjbWxoYkhNN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0ppYjI1bGN5STZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmxMbk5yWld4bGRHOXVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxCeWIzQmxjblI1UW1sdVpHbHVaem9nUTJGdUlHNXZkQ0JpYVc1a0lIUnZJR0p2Ym1WeklHRnpJRzV2WkdVZ1pHOWxjeUJ1YjNRZ2FHRjJaU0JoSUhOclpXeGxkRzl1TGlJc0lIUm9hWE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVWdQU0JsTG5OclpXeGxkRzl1TG1KdmJtVnpPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYUNBOUlEQTdJR2dnUENCbExteGxibWQwYURzZ2FDc3JLV2xtSUNobFcyaGRMbTVoYldVZ1BUMDlJR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkNBOUlHZzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSW0xaGNDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDSnRZWEFpSUdsdUlHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaU0E5SUdVdWJXRndPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmxMbTFoZEdWeWFXRnNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxCeWIzQmxjblI1UW1sdVpHbHVaem9nUTJGdUlHNXZkQ0JpYVc1a0lIUnZJRzFoZEdWeWFXRnNJR0Z6SUc1dlpHVWdaRzlsY3lCdWIzUWdhR0YyWlNCaElHMWhkR1Z5YVdGc0xpSXNJSFJvYVhNcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpTNXRZWFJsY21saGJDNXRZWEFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVVISnZjR1Z5ZEhsQ2FXNWthVzVuT2lCRFlXNGdibTkwSUdKcGJtUWdkRzhnYldGMFpYSnBZV3d1YldGd0lHRnpJRzV2WkdVdWJXRjBaWEpwWVd3Z1pHOWxjeUJ1YjNRZ2FHRjJaU0JoSUcxaGNDNGlMQ0IwYUdsektUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsSUQwZ1pTNXRZWFJsY21saGJDNXRZWEE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxXMjVkSUQwOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVVSEp2Y0dWeWRIbENhVzVrYVc1bk9pQkRZVzRnYm05MElHSnBibVFnZEc4Z2IySnFaV04wVG1GdFpTQnZaaUJ1YjJSbElIVnVaR1ZtYVc1bFpDNGlMQ0IwYUdsektUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsSUQwZ1pWdHVYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JDQWhQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pWdHNYU0E5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VUhKdmNHVnlkSGxDYVc1a2FXNW5PaUJVY25scGJtY2dkRzhnWW1sdVpDQjBieUJ2WW1wbFkzUkpibVJsZUNCdlppQnZZbXBsWTNST1lXMWxMQ0JpZFhRZ2FYTWdkVzVrWldacGJtVmtMaUlzSUhSb2FYTXNJR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdVZ1BTQmxXMnhkT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCaElEMGdaVnRwWFRzS0lDQWdJQ0FnSUNCcFppQW9ZU0E5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCc0lEMGdkQzV1YjJSbFRtRnRaVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVVSEp2Y0dWeWRIbENhVzVrYVc1bk9pQlVjbmxwYm1jZ2RHOGdkWEJrWVhSbElIQnliM0JsY25SNUlHWnZjaUIwY21GamF6b2dJaUFySUd3Z0t5QWlMaUlnS3lCcElDc2dJaUJpZFhRZ2FYUWdkMkZ6YmlkMElHWnZkVzVrTGlJc0lHVXBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnZEdocGN5NVdaWEp6YVc5dWFXNW5MazV2Ym1VN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwWVhKblpYUlBZbXBsWTNRZ1BTQmxMQ0JsTG01bFpXUnpWWEJrWVhSbElDRTlQU0IyYjJsa0lEQWdQeUJ2SUQwZ2RHaHBjeTVXWlhKemFXOXVhVzVuTGs1bFpXUnpWWEJrWVhSbElEb2daUzV0WVhSeWFYaFhiM0pzWkU1bFpXUnpWWEJrWVhSbElDRTlQU0IyYjJsa0lEQWdKaVlnS0c4Z1BTQjBhR2x6TGxabGNuTnBiMjVwYm1jdVRXRjBjbWw0VjI5eWJHUk9aV1ZrYzFWd1pHRjBaU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHTWdQU0IwYUdsekxrSnBibVJwYm1kVWVYQmxMa1JwY21WamREc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBaFBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRDA5UFNBaWJXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpJaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmxMbWRsYjIxbGRISjVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVVSEp2Y0dWeWRIbENhVzVrYVc1bk9pQkRZVzRnYm05MElHSnBibVFnZEc4Z2JXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpJR0psWTJGMWMyVWdibTlrWlNCa2IyVnpJRzV2ZENCb1lYWmxJR0VnWjJWdmJXVjBjbmt1SWl3Z2RHaHBjeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmxMbWRsYjIxbGRISjVMbTF2Y25Cb1FYUjBjbWxpZFhSbGN5a2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxsQnliM0JsY25SNVFtbHVaR2x1WnpvZ1EyRnVJRzV2ZENCaWFXNWtJSFJ2SUcxdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGN5QmlaV05oZFhObElHNXZaR1VnWkc5bGN5QnViM1FnYUdGMlpTQmhJR2RsYjIxbGRISjVMbTF2Y25Cb1FYUjBjbWxpZFhSbGN5NGlMQ0IwYUdsektUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbTF2Y25Cb1ZHRnlaMlYwUkdsamRHbHZibUZ5ZVZ0eVhTQWhQVDBnZG05cFpDQXdJQ1ltSUNoeUlEMGdaUzV0YjNKd2FGUmhjbWRsZEVScFkzUnBiMjVoY25sYmNsMHBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR01nUFNCMGFHbHpMa0pwYm1ScGJtZFVlWEJsTGtGeWNtRjVSV3hsYldWdWRDd2dkR2hwY3k1eVpYTnZiSFpsWkZCeWIzQmxjblI1SUQwZ1lTd2dkR2hwY3k1d2NtOXdaWEowZVVsdVpHVjRJRDBnY2pzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnWVM1bWNtOXRRWEp5WVhrZ0lUMDlJSFp2YVdRZ01DQW1KaUJoTG5SdlFYSnlZWGtnSVQwOUlIWnZhV1FnTUNBL0lDaGpJRDBnZEdocGN5NUNhVzVrYVc1blZIbHdaUzVJWVhOR2NtOXRWRzlCY25KaGVTd2dkR2hwY3k1eVpYTnZiSFpsWkZCeWIzQmxjblI1SUQwZ1lTa2dPaUJCY25KaGVTNXBjMEZ5Y21GNUtHRXBJRDhnS0dNZ1BTQjBhR2x6TGtKcGJtUnBibWRVZVhCbExrVnVkR2x5WlVGeWNtRjVMQ0IwYUdsekxuSmxjMjlzZG1Wa1VISnZjR1Z5ZEhrZ1BTQmhLU0E2SUhSb2FYTXVjSEp2Y0dWeWRIbE9ZVzFsSUQwZ2FUc0tJQ0FnSUNBZ0lDQjBhR2x6TG1kbGRGWmhiSFZsSUQwZ2RHaHBjeTVIWlhSMFpYSkNlVUpwYm1ScGJtZFVlWEJsVzJOZExDQjBhR2x6TG5ObGRGWmhiSFZsSUQwZ2RHaHBjeTVUWlhSMFpYSkNlVUpwYm1ScGJtZFVlWEJsUVc1a1ZtVnljMmx2Ym1sdVoxdGpYVnR2WFRzS0lDQWdJSDBLSUNBZ0lIVnVZbWx1WkNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG01dlpHVWdQU0J1ZFd4c0xDQjBhR2x6TG1kbGRGWmhiSFZsSUQwZ2RHaHBjeTVmWjJWMFZtRnNkV1ZmZFc1aWIzVnVaQ3dnZEdocGN5NXpaWFJXWVd4MVpTQTlJSFJvYVhNdVgzTmxkRlpoYkhWbFgzVnVZbTkxYm1RN0NpQWdJQ0I5Q24wN0NrdGxMa052YlhCdmMybDBaU0E5SUhwak93cExaUzV3Y205MGIzUjVjR1V1UW1sdVpHbHVaMVI1Y0dVZ1BTQjdDaUFnSUNCRWFYSmxZM1E2SURBc0NpQWdJQ0JGYm5ScGNtVkJjbkpoZVRvZ01Td0tJQ0FnSUVGeWNtRjVSV3hsYldWdWREb2dNaXdLSUNBZ0lFaGhjMFp5YjIxVWIwRnljbUY1T2lBekNuMDdDa3RsTG5CeWIzUnZkSGx3WlM1V1pYSnphVzl1YVc1bklEMGdld29nSUNBZ1RtOXVaVG9nTUN3S0lDQWdJRTVsWldSelZYQmtZWFJsT2lBeExBb2dJQ0FnVFdGMGNtbDRWMjl5YkdST1pXVmtjMVZ3WkdGMFpUb2dNZ3A5T3dwTFpTNXdjbTkwYjNSNWNHVXVSMlYwZEdWeVFubENhVzVrYVc1blZIbHdaU0E5SUZzS0lDQWdJRXRsTG5CeWIzUnZkSGx3WlM1ZloyVjBWbUZzZFdWZlpHbHlaV04wTEFvZ0lDQWdTMlV1Y0hKdmRHOTBlWEJsTGw5blpYUldZV3gxWlY5aGNuSmhlU3dLSUNBZ0lFdGxMbkJ5YjNSdmRIbHdaUzVmWjJWMFZtRnNkV1ZmWVhKeVlYbEZiR1Z0Wlc1MExBb2dJQ0FnUzJVdWNISnZkRzkwZVhCbExsOW5aWFJXWVd4MVpWOTBiMEZ5Y21GNUNsMDdDa3RsTG5CeWIzUnZkSGx3WlM1VFpYUjBaWEpDZVVKcGJtUnBibWRVZVhCbFFXNWtWbVZ5YzJsdmJtbHVaeUE5SUZzS0lDQWdJRnNLSUNBZ0lDQWdJQ0JMWlM1d2NtOTBiM1I1Y0dVdVgzTmxkRlpoYkhWbFgyUnBjbVZqZEN3S0lDQWdJQ0FnSUNCTFpTNXdjbTkwYjNSNWNHVXVYM05sZEZaaGJIVmxYMlJwY21WamRGOXpaWFJPWldWa2MxVndaR0YwWlN3S0lDQWdJQ0FnSUNCTFpTNXdjbTkwYjNSNWNHVXVYM05sZEZaaGJIVmxYMlJwY21WamRGOXpaWFJOWVhSeWFYaFhiM0pzWkU1bFpXUnpWWEJrWVhSbENpQWdJQ0JkTEFvZ0lDQWdXd29nSUNBZ0lDQWdJRXRsTG5CeWIzUnZkSGx3WlM1ZmMyVjBWbUZzZFdWZllYSnlZWGtzQ2lBZ0lDQWdJQ0FnUzJVdWNISnZkRzkwZVhCbExsOXpaWFJXWVd4MVpWOWhjbkpoZVY5elpYUk9aV1ZrYzFWd1pHRjBaU3dLSUNBZ0lDQWdJQ0JMWlM1d2NtOTBiM1I1Y0dVdVgzTmxkRlpoYkhWbFgyRnljbUY1WDNObGRFMWhkSEpwZUZkdmNteGtUbVZsWkhOVmNHUmhkR1VLSUNBZ0lGMHNDaUFnSUNCYkNpQWdJQ0FnSUNBZ1MyVXVjSEp2ZEc5MGVYQmxMbDl6WlhSV1lXeDFaVjloY25KaGVVVnNaVzFsYm5Rc0NpQWdJQ0FnSUNBZ1MyVXVjSEp2ZEc5MGVYQmxMbDl6WlhSV1lXeDFaVjloY25KaGVVVnNaVzFsYm5SZmMyVjBUbVZsWkhOVmNHUmhkR1VzQ2lBZ0lDQWdJQ0FnUzJVdWNISnZkRzkwZVhCbExsOXpaWFJXWVd4MVpWOWhjbkpoZVVWc1pXMWxiblJmYzJWMFRXRjBjbWw0VjI5eWJHUk9aV1ZrYzFWd1pHRjBaUW9nSUNBZ1hTd0tJQ0FnSUZzS0lDQWdJQ0FnSUNCTFpTNXdjbTkwYjNSNWNHVXVYM05sZEZaaGJIVmxYMlp5YjIxQmNuSmhlU3dLSUNBZ0lDQWdJQ0JMWlM1d2NtOTBiM1I1Y0dVdVgzTmxkRlpoYkhWbFgyWnliMjFCY25KaGVWOXpaWFJPWldWa2MxVndaR0YwWlN3S0lDQWdJQ0FnSUNCTFpTNXdjbTkwYjNSNWNHVXVYM05sZEZaaGJIVmxYMlp5YjIxQmNuSmhlVjl6WlhSTllYUnlhWGhYYjNKc1pFNWxaV1J6VlhCa1lYUmxDaUFnSUNCZENsMDdDblpoY2lCU2RTQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdDaUFnSUNBZ0lDQWdkR2hwY3k1cGMwRnVhVzFoZEdsdmJrOWlhbVZqZEVkeWIzVndJRDBnSVRBc0lIUm9hWE11ZFhWcFpDQTlJR3QwS0Nrc0lIUm9hWE11WDI5aWFtVmpkSE1nUFNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNcExDQjBhR2x6TG01RFlXTm9aV1JQWW1wbFkzUnpYeUE5SURBN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCN2ZUc0tJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJtUnBZMlZ6UW5sVlZVbEVJRDBnWlRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdMQ0JwSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2JpQWhQVDBnYVRzZ0t5dHVLV1ZiWVhKbmRXMWxiblJ6VzI1ZExuVjFhV1JkSUQwZ2Jqc0tJQ0FnSUNBZ0lDQjBhR2x6TGw5d1lYUm9jeUE5SUZ0ZExDQjBhR2x6TGw5d1lYSnpaV1JRWVhSb2N5QTlJRnRkTENCMGFHbHpMbDlpYVc1a2FXNW5jeUE5SUZ0ZExDQjBhR2x6TGw5aWFXNWthVzVuYzBsdVpHbGpaWE5DZVZCaGRHZ2dQU0I3ZlRzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTTdDaUFnSUNBZ0lDQWdkR2hwY3k1emRHRjBjeUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdiMkpxWldOMGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaMlYwSUhSdmRHRnNJQ2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDNWZiMkpxWldOMGN5NXNaVzVuZEdnN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyVjBJR2x1VlhObElDZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTBiM1JoYkNBdElIUXVia05oWTJobFpFOWlhbVZqZEhOZk93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQm5aWFFnWW1sdVpHbHVaM05RWlhKUFltcGxZM1FnS0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRdVgySnBibVJwYm1kekxteGxibWQwYURzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQjlDaUFnSUNCaFpHUW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxsOXZZbXBsWTNSekxDQjBJRDBnZEdocGN5NWZhVzVrYVdObGMwSjVWVlZKUkN3Z2JpQTlJSFJvYVhNdVgzQmhkR2h6TENCcElEMGdkR2hwY3k1ZmNHRnljMlZrVUdGMGFITXNJSElnUFNCMGFHbHpMbDlpYVc1a2FXNW5jeXdnWVNBOUlISXViR1Z1WjNSb0xDQnZMQ0JqSUQwZ1pTNXNaVzVuZEdnc0lHd2dQU0IwYUdsekxtNURZV05vWldSUFltcGxZM1J6WHpzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdnZ1BTQXdMQ0IxSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FDQWhQVDBnZFRzZ0t5dG9LWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCaGNtZDFiV1Z1ZEhOYmFGMHNJR1lnUFNCa0xuVjFhV1FzSUcwZ1BTQjBXMlpkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYlNBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRJRDBnWXlzckxDQjBXMlpkSUQwZ2JTd2daUzV3ZFhOb0tHUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmZJRDBnTUN3Z1p5QTlJR0U3SUY4Z0lUMDlJR2M3SUNzclh5bHlXMTlkTG5CMWMyZ29ibVYzSUV0bEtHUXNJRzViWDEwc0lHbGJYMTBwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h0SUR3Z2JDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieUE5SUdWYmJWMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWHlBOUlDMHRiQ3dnWnlBOUlHVmJYMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwVzJjdWRYVnBaRjBnUFNCdExDQmxXMjFkSUQwZ1p5d2dkRnRtWFNBOUlGOHNJR1ZiWDEwZ1BTQmtPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQndJRDBnTUN3Z2RpQTlJR0U3SUhBZ0lUMDlJSFk3SUNzcmNDbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIZ2dQU0J5VzNCZExDQjVJRDBnZUZ0ZlhTd2dZaUE5SUhoYmJWMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUZ0dFhTQTlJSGtzSUdJZ1BUMDlJSFp2YVdRZ01DQW1KaUFvWWlBOUlHNWxkeUJMWlNoa0xDQnVXM0JkTENCcFczQmRLU2tzSUhoYlgxMGdQU0JpT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ1pWdHRYU0FoUFQwZ2J5QW1KaUJqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1QmJtbHRZWFJwYjI1UFltcGxZM1JIY205MWNEb2dSR2xtWm1WeVpXNTBJRzlpYW1WamRITWdkMmwwYUNCMGFHVWdjMkZ0WlNCVlZVbEVJR1JsZEdWamRHVmtMaUJEYkdWaGJpQjBhR1VnWTJGamFHVnpJRzl5SUhKbFkzSmxZWFJsSUhsdmRYSWdhVzVtY21GemRISjFZM1IxY21VZ2QyaGxiaUJ5Wld4dllXUnBibWNnYzJObGJtVnpMaUlwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMbTVEWVdOb1pXUlBZbXBsWTNSelh5QTlJR3c3Q2lBZ0lDQjlDaUFnSUNCeVpXMXZkbVVvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbDl2WW1wbFkzUnpMQ0IwSUQwZ2RHaHBjeTVmYVc1a2FXTmxjMEo1VlZWSlJDd2diaUE5SUhSb2FYTXVYMkpwYm1ScGJtZHpMQ0JwSUQwZ2JpNXNaVzVuZEdnc0lISWdQU0IwYUdsekxtNURZV05vWldSUFltcGxZM1J6WHpzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdFZ1BTQXdMQ0J2SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ1lTQWhQVDBnYnpzZ0t5dGhLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCaGNtZDFiV1Z1ZEhOYllWMHNJR3dnUFNCakxuVjFhV1FzSUdnZ1BTQjBXMnhkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYUNBaFBUMGdkbTlwWkNBd0lDWW1JR2dnUGowZ2Npa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhVZ1BTQnlLeXNzSUdRZ1BTQmxXM1ZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEZ0a0xuVjFhV1JkSUQwZ2FDd2daVnRvWFNBOUlHUXNJSFJiYkYwZ1BTQjFMQ0JsVzNWZElEMGdZenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaaUE5SURBc0lHMGdQU0JwT3lCbUlDRTlQU0J0T3lBcksyWXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmZJRDBnYmx0bVhTd2daeUE5SUY5YmRWMHNJSEFnUFNCZlcyaGRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5YmFGMGdQU0JuTENCZlczVmRJRDBnY0RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwYUdsekxtNURZV05vWldSUFltcGxZM1J6WHlBOUlISTdDaUFnSUNCOUNpQWdJQ0IxYm1OaFkyaGxLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NWZiMkpxWldOMGN5d2dkQ0E5SUhSb2FYTXVYMmx1WkdsalpYTkNlVlZWU1VRc0lHNGdQU0IwYUdsekxsOWlhVzVrYVc1bmN5d2dhU0E5SUc0dWJHVnVaM1JvTENCeUlEMGdkR2hwY3k1dVEyRmphR1ZrVDJKcVpXTjBjMThzSUdFZ1BTQmxMbXhsYm1kMGFEc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHOGdQU0F3TENCaklEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dieUFoUFQwZ1l6c2dLeXR2S1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd3Z1BTQmhjbWQxYldWdWRITmJiMTBzSUdnZ1BTQnNMblYxYVdRc0lIVWdQU0IwVzJoZE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RTQWhQVDBnZG05cFpDQXdLU0JwWmlBb1pHVnNaWFJsSUhSYmFGMHNJSFVnUENCeUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkNBOUlDMHRjaXdnWmlBOUlHVmJaRjBzSUcwZ1BTQXRMV0VzSUY4Z1BTQmxXMjFkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEZ0bUxuVjFhV1JkSUQwZ2RTd2daVnQxWFNBOUlHWXNJSFJiWHk1MWRXbGtYU0E5SUdRc0lHVmJaRjBnUFNCZkxDQmxMbkJ2Y0NncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbklEMGdNQ3dnY0NBOUlHazdJR2NnSVQwOUlIQTdJQ3NyWnlsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhZZ1BTQnVXMmRkTENCNElEMGdkbHRrWFN3Z2VTQTlJSFpiYlYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbHQxWFNBOUlIZ3NJSFpiWkYwZ1BTQjVMQ0IyTG5CdmNDZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0F0TFdFc0lHWWdQU0JsVzJSZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pDQStJREFnSmlZZ0tIUmJaaTUxZFdsa1hTQTlJSFVwTENCbFczVmRJRDBnWml3Z1pTNXdiM0FvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYlNBOUlEQXNJRjhnUFNCcE95QnRJQ0U5UFNCZk95QXJLMjBwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JuSUQwZ2JsdHRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCblczVmRJRDBnWjF0a1hTd2daeTV3YjNBb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMbTVEWVdOb1pXUlBZbXBsWTNSelh5QTlJSEk3Q2lBZ0lDQjlDaUFnSUNCemRXSnpZM0pwWW1WZktHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVYMkpwYm1ScGJtZHpTVzVrYVdObGMwSjVVR0YwYUN3Z2FTQTlJRzViWlYwc0lISWdQU0IwYUdsekxsOWlhVzVrYVc1bmN6c0tJQ0FnSUNBZ0lDQnBaaUFvYVNBaFBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2NsdHBYVHNLSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJSFJvYVhNdVgzQmhkR2h6TENCdklEMGdkR2hwY3k1ZmNHRnljMlZrVUdGMGFITXNJR01nUFNCMGFHbHpMbDl2WW1wbFkzUnpMQ0JzSUQwZ1l5NXNaVzVuZEdnc0lHZ2dQU0IwYUdsekxtNURZV05vWldSUFltcGxZM1J6WHl3Z2RTQTlJRzVsZHlCQmNuSmhlU2hzS1RzS0lDQWdJQ0FnSUNCcElEMGdjaTVzWlc1bmRHZ3NJRzViWlYwZ1BTQnBMQ0JoTG5CMWMyZ29aU2tzSUc4dWNIVnphQ2gwS1N3Z2NpNXdkWE5vS0hVcE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1pDQTlJR2dzSUdZZ1BTQmpMbXhsYm1kMGFEc2daQ0FoUFQwZ1pqc2dLeXRrS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcwZ1BTQmpXMlJkT3dvZ0lDQWdJQ0FnSUNBZ0lDQjFXMlJkSUQwZ2JtVjNJRXRsS0cwc0lHVXNJSFFwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZFRzS0lDQWdJSDBLSUNBZ0lIVnVjM1ZpYzJOeWFXSmxYeWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbDlpYVc1a2FXNW5jMGx1WkdsalpYTkNlVkJoZEdnc0lHNGdQU0IwVzJWZE93b2dJQ0FnSUNBZ0lHbG1JQ2h1SUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0IwYUdsekxsOXdZWFJvY3l3Z2NpQTlJSFJvYVhNdVgzQmhjbk5sWkZCaGRHaHpMQ0JoSUQwZ2RHaHBjeTVmWW1sdVpHbHVaM01zSUc4Z1BTQmhMbXhsYm1kMGFDQXRJREVzSUdNZ1BTQmhXMjlkTENCc0lEMGdaVnR2WFRzS0lDQWdJQ0FnSUNBZ0lDQWdkRnRzWFNBOUlHNHNJR0ZiYmwwZ1BTQmpMQ0JoTG5CdmNDZ3BMQ0J5VzI1ZElEMGdjbHR2WFN3Z2NpNXdiM0FvS1N3Z2FWdHVYU0E5SUdsYmIxMHNJR2t1Y0c5d0tDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRcDlMQ0JXWXlBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRnUFNCdWRXeHNMQ0JwSUQwZ2RDNWliR1Z1WkUxdlpHVXBld29nSUNBZ0lDQWdJSFJvYVhNdVgyMXBlR1Z5SUQwZ1pTd2dkR2hwY3k1ZlkyeHBjQ0E5SUhRc0lIUm9hWE11WDJ4dlkyRnNVbTl2ZENBOUlHNHNJSFJvYVhNdVlteGxibVJOYjJSbElEMGdhVHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFF1ZEhKaFkydHpMQ0JoSUQwZ2NpNXNaVzVuZEdnc0lHOGdQU0J1WlhjZ1FYSnlZWGtvWVNrc0lHTWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnVaR2x1WjFOMFlYSjBPaUI2YVN3S0lDQWdJQ0FnSUNBZ0lDQWdaVzVrYVc1blJXNWtPaUI2YVFvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCc0lEMGdNRHNnYkNBaFBUMGdZVHNnS3l0c0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHZ2dQU0J5VzJ4ZExtTnlaV0YwWlVsdWRHVnljRzlzWVc1MEtHNTFiR3dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnZXMnhkSUQwZ2FDd2dhQzV6WlhSMGFXNW5jeUE5SUdNN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIUm9hWE11WDJsdWRHVnljRzlzWVc1MFUyVjBkR2x1WjNNZ1BTQmpMQ0IwYUdsekxsOXBiblJsY25CdmJHRnVkSE1nUFNCdkxDQjBhR2x6TGw5d2NtOXdaWEowZVVKcGJtUnBibWR6SUQwZ2JtVjNJRUZ5Y21GNUtHRXBMQ0IwYUdsekxsOWpZV05vWlVsdVpHVjRJRDBnYm5Wc2JDd2dkR2hwY3k1ZllubERiR2x3UTJGamFHVkpibVJsZUNBOUlHNTFiR3dzSUhSb2FYTXVYM1JwYldWVFkyRnNaVWx1ZEdWeWNHOXNZVzUwSUQwZ2JuVnNiQ3dnZEdocGN5NWZkMlZwWjJoMFNXNTBaWEp3YjJ4aGJuUWdQU0J1ZFd4c0xDQjBhR2x6TG14dmIzQWdQU0JCWml3Z2RHaHBjeTVmYkc5dmNFTnZkVzUwSUQwZ0xURXNJSFJvYVhNdVgzTjBZWEowVkdsdFpTQTlJRzUxYkd3c0lIUm9hWE11ZEdsdFpTQTlJREFzSUhSb2FYTXVkR2x0WlZOallXeGxJRDBnTVN3Z2RHaHBjeTVmWldabVpXTjBhWFpsVkdsdFpWTmpZV3hsSUQwZ01Td2dkR2hwY3k1M1pXbG5hSFFnUFNBeExDQjBhR2x6TGw5bFptWmxZM1JwZG1WWFpXbG5hSFFnUFNBeExDQjBhR2x6TG5KbGNHVjBhWFJwYjI1eklEMGdNU0F2SURBc0lIUm9hWE11Y0dGMWMyVmtJRDBnSVRFc0lIUm9hWE11Wlc1aFlteGxaQ0E5SUNFd0xDQjBhR2x6TG1Oc1lXMXdWMmhsYmtacGJtbHphR1ZrSUQwZ0lURXNJSFJvYVhNdWVtVnliMU5zYjNCbFFYUlRkR0Z5ZENBOUlDRXdMQ0IwYUdsekxucGxjbTlUYkc5d1pVRjBSVzVrSUQwZ0lUQTdDaUFnSUNCOUNpQWdJQ0J3YkdGNUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dGFYaGxjaTVmWVdOMGFYWmhkR1ZCWTNScGIyNG9kR2hwY3lrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCemRHOXdLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRhWGhsY2k1ZlpHVmhZM1JwZG1GMFpVRmpkR2x2YmloMGFHbHpLU3dnZEdocGN5NXlaWE5sZENncE93b2dJQ0FnZlFvZ0lDQWdjbVZ6WlhRb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y0dGMWMyVmtJRDBnSVRFc0lIUm9hWE11Wlc1aFlteGxaQ0E5SUNFd0xDQjBhR2x6TG5ScGJXVWdQU0F3TENCMGFHbHpMbDlzYjI5d1EyOTFiblFnUFNBdE1Td2dkR2hwY3k1ZmMzUmhjblJVYVcxbElEMGdiblZzYkN3Z2RHaHBjeTV6ZEc5d1JtRmthVzVuS0NrdWMzUnZjRmRoY25CcGJtY29LVHNLSUNBZ0lIMEtJQ0FnSUdselVuVnVibWx1WnlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVsYm1GaWJHVmtJQ1ltSUNGMGFHbHpMbkJoZFhObFpDQW1KaUIwYUdsekxuUnBiV1ZUWTJGc1pTQWhQVDBnTUNBbUppQjBhR2x6TGw5emRHRnlkRlJwYldVZ1BUMDlJRzUxYkd3Z0ppWWdkR2hwY3k1ZmJXbDRaWEl1WDJselFXTjBhWFpsUVdOMGFXOXVLSFJvYVhNcE93b2dJQ0FnZlFvZ0lDQWdhWE5UWTJobFpIVnNaV1FvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjFwZUdWeUxsOXBjMEZqZEdsMlpVRmpkR2x2YmloMGFHbHpLVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYSjBRWFFvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6ZEdGeWRGUnBiV1VnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBURzl2Y0NobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJHOXZjQ0E5SUdVc0lIUm9hWE11Y21Wd1pYUnBkR2x2Ym5NZ1BTQjBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUldabVpXTjBhWFpsVjJWcFoyaDBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTNaV2xuYUhRZ1BTQmxMQ0IwYUdsekxsOWxabVpsWTNScGRtVlhaV2xuYUhRZ1BTQjBhR2x6TG1WdVlXSnNaV1FnUHlCbElEb2dNQ3dnZEdocGN5NXpkRzl3Um1Ga2FXNW5LQ2s3Q2lBZ0lDQjlDaUFnSUNCblpYUkZabVpsWTNScGRtVlhaV2xuYUhRb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJWbVptVmpkR2wyWlZkbGFXZG9kRHNLSUNBZ0lIMEtJQ0FnSUdaaFpHVkpiaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM05qYUdWa2RXeGxSbUZrYVc1bktHVXNJREFzSURFcE93b2dJQ0FnZlFvZ0lDQWdabUZrWlU5MWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTmphR1ZrZFd4bFJtRmthVzVuS0dVc0lERXNJREFwT3dvZ0lDQWdmUW9nSUNBZ1kzSnZjM05HWVdSbFJuSnZiU2hsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tHVXVabUZrWlU5MWRDaDBLU3dnZEdocGN5NW1ZV1JsU1c0b2RDa3NJRzRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQjBhR2x6TGw5amJHbHdMbVIxY21GMGFXOXVMQ0J5SUQwZ1pTNWZZMnhwY0M1a2RYSmhkR2x2Yml3Z1lTQTlJSElnTHlCcExDQnZJRDBnYVNBdklISTdDaUFnSUNBZ0lDQWdJQ0FnSUdVdWQyRnljQ2d4TENCaExDQjBLU3dnZEdocGN5NTNZWEp3S0c4c0lERXNJSFFwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR055YjNOelJtRmtaVlJ2S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1amNtOXpjMFpoWkdWR2NtOXRLSFJvYVhNc0lIUXNJRzRwT3dvZ0lDQWdmUW9nSUNBZ2MzUnZjRVpoWkdsdVp5Z3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVgzZGxhV2RvZEVsdWRHVnljRzlzWVc1ME93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbElDRTlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxsOTNaV2xuYUhSSmJuUmxjbkJ2YkdGdWRDQTlJRzUxYkd3c0lIUm9hWE11WDIxcGVHVnlMbDkwWVd0bFFtRmphME52Ym5SeWIyeEpiblJsY25CdmJHRnVkQ2hsS1Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkZabVpsWTNScGRtVlVhVzFsVTJOaGJHVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuUnBiV1ZUWTJGc1pTQTlJR1VzSUhSb2FYTXVYMlZtWm1WamRHbDJaVlJwYldWVFkyRnNaU0E5SUhSb2FYTXVjR0YxYzJWa0lEOGdNQ0E2SUdVc0lIUm9hWE11YzNSdmNGZGhjbkJwYm1jb0tUc0tJQ0FnSUgwS0lDQWdJR2RsZEVWbVptVmpkR2wyWlZScGJXVlRZMkZzWlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWldabVpXTjBhWFpsVkdsdFpWTmpZV3hsT3dvZ0lDQWdmUW9nSUNBZ2MyVjBSSFZ5WVhScGIyNG9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuUnBiV1ZUWTJGc1pTQTlJSFJvYVhNdVgyTnNhWEF1WkhWeVlYUnBiMjRnTHlCbExDQjBhR2x6TG5OMGIzQlhZWEp3YVc1bktDazdDaUFnSUNCOUNpQWdJQ0J6ZVc1alYybDBhQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkR2x0WlNBOUlHVXVkR2x0WlN3Z2RHaHBjeTUwYVcxbFUyTmhiR1VnUFNCbExuUnBiV1ZUWTJGc1pTd2dkR2hwY3k1emRHOXdWMkZ5Y0dsdVp5Z3BPd29nSUNBZ2ZRb2dJQ0FnYUdGc2RDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWQyRnljQ2gwYUdsekxsOWxabVpsWTNScGRtVlVhVzFsVTJOaGJHVXNJREFzSUdVcE93b2dJQ0FnZlFvZ0lDQWdkMkZ5Y0NobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMbDl0YVhobGNpd2djaUE5SUdrdWRHbHRaU3dnWVNBOUlIUm9hWE11ZEdsdFpWTmpZV3hsTENCdklEMGdkR2hwY3k1ZmRHbHRaVk5qWVd4bFNXNTBaWEp3YjJ4aGJuUTdDaUFnSUNBZ0lDQWdieUE5UFQwZ2JuVnNiQ0FtSmlBb2J5QTlJR2t1WDJ4bGJtUkRiMjUwY205c1NXNTBaWEp3YjJ4aGJuUW9LU3dnZEdocGN5NWZkR2x0WlZOallXeGxTVzUwWlhKd2IyeGhiblFnUFNCdktUc0tJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlHOHVjR0Z5WVcxbGRHVnlVRzl6YVhScGIyNXpMQ0JzSUQwZ2J5NXpZVzF3YkdWV1lXeDFaWE03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR05iTUYwZ1BTQnlMQ0JqV3pGZElEMGdjaUFySUc0c0lHeGJNRjBnUFNCbElDOGdZU3dnYkZzeFhTQTlJSFFnTHlCaExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MzUnZjRmRoY25CcGJtY29LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxsOTBhVzFsVTJOaGJHVkpiblJsY25CdmJHRnVkRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaU0FoUFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVmZEdsdFpWTmpZV3hsU1c1MFpYSndiMnhoYm5RZ1BTQnVkV3hzTENCMGFHbHpMbDl0YVhobGNpNWZkR0ZyWlVKaFkydERiMjUwY205c1NXNTBaWEp3YjJ4aGJuUW9aU2twTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWjJWMFRXbDRaWElvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjFwZUdWeU93b2dJQ0FnZlFvZ0lDQWdaMlYwUTJ4cGNDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlkyeHBjRHNLSUNBZ0lIMEtJQ0FnSUdkbGRGSnZiM1FvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMnh2WTJGc1VtOXZkQ0I4ZkNCMGFHbHpMbDl0YVhobGNpNWZjbTl2ZERzS0lDQWdJSDBLSUNBZ0lGOTFjR1JoZEdVb1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVsYm1GaWJHVmtLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNWd1pHRjBaVmRsYVdkb2RDaGxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUhSb2FYTXVYM04wWVhKMFZHbHRaVHNLSUNBZ0lDQWdJQ0JwWmlBb2NpQWhQVDBnYm5Wc2JDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUNobElDMGdjaWtnS2lCdU93b2dJQ0FnSUNBZ0lDQWdJQ0JqSUR3Z01DQjhmQ0J1SUQwOVBTQXdJRDhnZENBOUlEQWdPaUFvZEdocGN5NWZjM1JoY25SVWFXMWxJRDBnYm5Wc2JDd2dkQ0E5SUc0Z0tpQmpLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZENBcVBTQjBhR2x6TGw5MWNHUmhkR1ZVYVcxbFUyTmhiR1VvWlNrN0NpQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCMGFHbHpMbDkxY0dSaGRHVlVhVzFsS0hRcExDQnZJRDBnZEdocGN5NWZkWEJrWVhSbFYyVnBaMmgwS0dVcE93b2dJQ0FnSUNBZ0lHbG1JQ2h2SUQ0Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUhSb2FYTXVYMmx1ZEdWeWNHOXNZVzUwY3l3Z2JDQTlJSFJvYVhNdVgzQnliM0JsY25SNVFtbHVaR2x1WjNNN0NpQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDaDBhR2x6TG1Kc1pXNWtUVzlrWlNsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJSGhrT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FDQTlJREFzSUhVZ1BTQmpMbXhsYm1kMGFEc2dhQ0FoUFQwZ2RUc2dLeXRvS1dOYmFGMHVaWFpoYkhWaGRHVW9ZU2tzSUd4YmFGMHVZV05qZFcxMWJHRjBaVUZrWkdsMGFYWmxLRzhwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQllZem9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JvSUQwZ01Dd2dkU0E5SUdNdWJHVnVaM1JvT3lCb0lDRTlQU0IxT3lBcksyZ3BZMXRvWFM1bGRtRnNkV0YwWlNoaEtTd2diRnRvWFM1aFkyTjFiWFZzWVhSbEtHa3NJRzhwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWDNWd1pHRjBaVmRsYVdkb2RDaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0F3T3dvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1WdVlXSnNaV1FwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkQ0E5SUhSb2FYTXVkMlZwWjJoME93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVgzZGxhV2RvZEVsdWRHVnljRzlzWVc1ME93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JpQWhQVDBnYm5Wc2JDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVMbVYyWVd4MVlYUmxLR1VwV3pCZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDQXFQU0JwTENCbElENGdiaTV3WVhKaGJXVjBaWEpRYjNOcGRHbHZibk5iTVYwZ0ppWWdLSFJvYVhNdWMzUnZjRVpoWkdsdVp5Z3BMQ0JwSUQwOVBTQXdJQ1ltSUNoMGFHbHpMbVZ1WVdKc1pXUWdQU0FoTVNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWxabVpsWTNScGRtVlhaV2xuYUhRZ1BTQjBMQ0IwT3dvZ0lDQWdmUW9nSUNBZ1gzVndaR0YwWlZScGJXVlRZMkZzWlNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQXdPd29nSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTV3WVhWelpXUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJSFJvYVhNdWRHbHRaVk5qWVd4bE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVgzUnBiV1ZUWTJGc1pVbHVkR1Z5Y0c5c1lXNTBPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9iaUFoUFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0J1TG1WMllXeDFZWFJsS0dVcFd6QmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkQ0FxUFNCcExDQmxJRDRnYmk1d1lYSmhiV1YwWlhKUWIzTnBkR2x2Ym5OYk1WMGdKaVlnS0hSb2FYTXVjM1J2Y0ZkaGNuQnBibWNvS1N3Z2RDQTlQVDBnTUNBL0lIUm9hWE11Y0dGMWMyVmtJRDBnSVRBZ09pQjBhR2x6TG5ScGJXVlRZMkZzWlNBOUlIUXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlsWm1abFkzUnBkbVZVYVcxbFUyTmhiR1VnUFNCMExDQjBPd29nSUNBZ2ZRb2dJQ0FnWDNWd1pHRjBaVlJwYldVb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1ZlkyeHBjQzVrZFhKaGRHbHZiaXdnYmlBOUlIUm9hWE11Ykc5dmNDd2dhU0E5SUhSb2FYTXVkR2x0WlNBcklHVXNJSElnUFNCMGFHbHpMbDlzYjI5d1EyOTFiblFzSUdFZ1BTQnVJRDA5UFNCU1pqc0tJQ0FnSUNBZ0lDQnBaaUFvWlNBOVBUMGdNQ2tnY21WMGRYSnVJSElnUFQwOUlDMHhJRDhnYVNBNklHRWdKaVlnS0hJZ0ppQXhLU0E5UFQwZ01TQS9JSFFnTFNCcElEb2dhVHNLSUNBZ0lDQWdJQ0JwWmlBb2JpQTlQVDBnZDJZcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY2lBOVBUMGdMVEVnSmlZZ0tIUm9hWE11WDJ4dmIzQkRiM1Z1ZENBOUlEQXNJSFJvYVhNdVgzTmxkRVZ1WkdsdVozTW9JVEFzSUNFd0xDQWhNU2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQmxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FTQStQU0IwS1NCcElEMGdkRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR2tnUENBd0tTQnBJRDBnTURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkR2x0WlNBOUlHazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXc2daVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyeGhiWEJYYUdWdVJtbHVhWE5vWldRZ1B5QjBhR2x6TG5CaGRYTmxaQ0E5SUNFd0lEb2dkR2hwY3k1bGJtRmliR1ZrSUQwZ0lURXNJSFJvYVhNdWRHbHRaU0E5SUdrc0lIUm9hWE11WDIxcGVHVnlMbVJwYzNCaGRHTm9SWFpsYm5Rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDSm1hVzVwYzJobFpDSXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGFXOXVPaUIwYUdsekxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwY21WamRHbHZiam9nWlNBOElEQWdQeUF0TVNBNklERUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJQzB4SUNZbUlDaGxJRDQ5SURBZ1B5QW9jaUE5SURBc0lIUm9hWE11WDNObGRFVnVaR2x1WjNNb0lUQXNJSFJvYVhNdWNtVndaWFJwZEdsdmJuTWdQVDA5SURBc0lHRXBLU0E2SUhSb2FYTXVYM05sZEVWdVpHbHVaM01vZEdocGN5NXlaWEJsZEdsMGFXOXVjeUE5UFQwZ01Dd2dJVEFzSUdFcEtTd2dhU0ErUFNCMElIeDhJR2tnUENBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlFMWhkR2d1Wm14dmIzSW9hU0F2SUhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTQXRQU0IwSUNvZ2J5d2djaUFyUFNCTllYUm9MbUZpY3lodktUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ2RHaHBjeTV5WlhCbGRHbDBhVzl1Y3lBdElISTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWXlBOFBTQXdLU0IwYUdsekxtTnNZVzF3VjJobGJrWnBibWx6YUdWa0lEOGdkR2hwY3k1d1lYVnpaV1FnUFNBaE1DQTZJSFJvYVhNdVpXNWhZbXhsWkNBOUlDRXhMQ0JwSUQwZ1pTQStJREFnUHlCMElEb2dNQ3dnZEdocGN5NTBhVzFsSUQwZ2FTd2dkR2hwY3k1ZmJXbDRaWEl1WkdsemNHRjBZMmhGZG1WdWRDaDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dJbVpwYm1semFHVmtJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFkzUnBiMjQ2SUhSb2FYTXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdseVpXTjBhVzl1T2lCbElENGdNQ0EvSURFZ09pQXRNUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1l5QTlQVDBnTVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUdVZ1BDQXdPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5elpYUkZibVJwYm1kektHd3NJQ0ZzTENCaEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdkR2hwY3k1ZmMyVjBSVzVrYVc1bmN5Z2hNU3dnSVRFc0lHRXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2YjNCRGIzVnVkQ0E5SUhJc0lIUm9hWE11ZEdsdFpTQTlJR2tzSUhSb2FYTXVYMjFwZUdWeUxtUnBjM0JoZEdOb1JYWmxiblFvZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWliRzl2Y0NJc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGamRHbHZiam9nZEdocGN5d0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHOXZjRVJsYkhSaE9pQnZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjBhR2x6TG5ScGJXVWdQU0JwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVNBbUppQW9jaUFtSURFcElEMDlQU0F4S1NCeVpYUjFjbTRnZENBdElHazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQnBPd29nSUNBZ2ZRb2dJQ0FnWDNObGRFVnVaR2x1WjNNb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ2RHaHBjeTVmYVc1MFpYSndiMnhoYm5SVFpYUjBhVzVuY3pzS0lDQWdJQ0FnSUNCdUlEOGdLR2t1Wlc1a2FXNW5VM1JoY25RZ1BTQldhU3dnYVM1bGJtUnBibWRGYm1RZ1BTQldhU2tnT2lBb1pTQS9JR2t1Wlc1a2FXNW5VM1JoY25RZ1BTQjBhR2x6TG5wbGNtOVRiRzl3WlVGMFUzUmhjblFnUHlCV2FTQTZJSHBwSURvZ2FTNWxibVJwYm1kVGRHRnlkQ0E5SUVKeUxDQjBJRDhnYVM1bGJtUnBibWRGYm1RZ1BTQjBhR2x6TG5wbGNtOVRiRzl3WlVGMFJXNWtJRDhnVm1rZ09pQjZhU0E2SUdrdVpXNWthVzVuUlc1a0lEMGdRbklwT3dvZ0lDQWdmUW9nSUNBZ1gzTmphR1ZrZFd4bFJtRmthVzVuS0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXVYMjFwZUdWeUxDQnlJRDBnYVM1MGFXMWxMQ0JoSUQwZ2RHaHBjeTVmZDJWcFoyaDBTVzUwWlhKd2IyeGhiblE3Q2lBZ0lDQWdJQ0FnWVNBOVBUMGdiblZzYkNBbUppQW9ZU0E5SUdrdVgyeGxibVJEYjI1MGNtOXNTVzUwWlhKd2IyeGhiblFvS1N3Z2RHaHBjeTVmZDJWcFoyaDBTVzUwWlhKd2IyeGhiblFnUFNCaEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlHRXVjR0Z5WVcxbGRHVnlVRzl6YVhScGIyNXpMQ0JqSUQwZ1lTNXpZVzF3YkdWV1lXeDFaWE03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzliTUYwZ1BTQnlMQ0JqV3pCZElEMGdkQ3dnYjFzeFhTQTlJSElnS3lCbExDQmpXekZkSUQwZ2Jpd2dkR2hwY3pzS0lDQWdJSDBLZlN3Z1QzZ2dQU0J1WlhjZ1JteHZZWFF6TWtGeWNtRjVLREVwTENCRGRTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ2MyNGdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LU3dnZEdocGN5NWZjbTl2ZENBOUlHVXNJSFJvYVhNdVgybHVhWFJOWlcxdmNubE5ZVzVoWjJWeUtDa3NJSFJvYVhNdVgyRmpZM1ZKYm1SbGVDQTlJREFzSUhSb2FYTXVkR2x0WlNBOUlEQXNJSFJvYVhNdWRHbHRaVk5qWVd4bElEMGdNVHNLSUNBZ0lIMEtJQ0FnSUY5aWFXNWtRV04wYVc5dUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdVdVgyeHZZMkZzVW05dmRDQjhmQ0IwYUdsekxsOXliMjkwTENCcElEMGdaUzVmWTJ4cGNDNTBjbUZqYTNNc0lISWdQU0JwTG14bGJtZDBhQ3dnWVNBOUlHVXVYM0J5YjNCbGNuUjVRbWx1WkdsdVozTXNJRzhnUFNCbExsOXBiblJsY25CdmJHRnVkSE1zSUdNZ1BTQnVMblYxYVdRc0lHd2dQU0IwYUdsekxsOWlhVzVrYVc1bmMwSjVVbTl2ZEVGdVpFNWhiV1VzSUdnZ1BTQnNXMk5kT3dvZ0lDQWdJQ0FnSUdnZ1BUMDlJSFp2YVdRZ01DQW1KaUFvYUNBOUlIdDlMQ0JzVzJOZElEMGdhQ2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IxSUQwZ01Ec2dkU0FoUFQwZ2Nqc2dLeXQxS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQnBXM1ZkTENCbUlEMGdaQzV1WVcxbExDQnRJRDBnYUZ0bVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMGdJVDA5SUhadmFXUWdNQ2tnS3l0dExuSmxabVZ5Wlc1alpVTnZkVzUwTENCaFczVmRJRDBnYlRzS0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iU0E5SUdGYmRWMHNJRzBnSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzB1WDJOaFkyaGxTVzVrWlhnZ1BUMDlJRzUxYkd3Z0ppWWdLQ3NyYlM1eVpXWmxjbVZ1WTJWRGIzVnVkQ3dnZEdocGN5NWZZV1JrU1c1aFkzUnBkbVZDYVc1a2FXNW5LRzBzSUdNc0lHWXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmZJRDBnZENBbUppQjBMbDl3Y205d1pYSjBlVUpwYm1ScGJtZHpXM1ZkTG1KcGJtUnBibWN1Y0dGeWMyVmtVR0YwYURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcwZ1BTQnVaWGNnUW1Nb1MyVXVZM0psWVhSbEtHNHNJR1lzSUY4cExDQmtMbFpoYkhWbFZIbHdaVTVoYldVc0lHUXVaMlYwVm1Gc2RXVlRhWHBsS0NrcExDQXJLMjB1Y21WbVpYSmxibU5sUTI5MWJuUXNJSFJvYVhNdVgyRmtaRWx1WVdOMGFYWmxRbWx1WkdsdVp5aHRMQ0JqTENCbUtTd2dZVnQxWFNBOUlHMDdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdiMXQxWFM1eVpYTjFiSFJDZFdabVpYSWdQU0J0TG1KMVptWmxjanNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCZllXTjBhWFpoZEdWQlkzUnBiMjRvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZhWE5CWTNScGRtVkJZM1JwYjI0b1pTa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1V1WDJOaFkyaGxTVzVrWlhnZ1BUMDlJRzUxYkd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ0tHVXVYMnh2WTJGc1VtOXZkQ0I4ZkNCMGFHbHpMbDl5YjI5MEtTNTFkV2xrTENCcElEMGdaUzVmWTJ4cGNDNTFkV2xrTENCeUlEMGdkR2hwY3k1ZllXTjBhVzl1YzBKNVEyeHBjRnRwWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkpwYm1SQlkzUnBiMjRvWlN3Z2NpQW1KaUJ5TG10dWIzZHVRV04wYVc5dWMxc3dYU2tzSUhSb2FYTXVYMkZrWkVsdVlXTjBhWFpsUVdOMGFXOXVLR1VzSUdrc0lHNHBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMElEMGdaUzVmY0hKdmNHVnlkSGxDYVc1a2FXNW5jenNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNQ3dnYVNBOUlIUXViR1Z1WjNSb095QnVJQ0U5UFNCcE95QXJLMjRwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISWdQU0IwVzI1ZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NpNTFjMlZEYjNWdWRDc3JJRDA5UFNBd0lDWW1JQ2gwYUdsekxsOXNaVzVrUW1sdVpHbHVaeWh5S1N3Z2NpNXpZWFpsVDNKcFoybHVZV3hUZEdGMFpTZ3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNaVzVrUVdOMGFXOXVLR1VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lGOWtaV0ZqZEdsMllYUmxRV04wYVc5dUtHVXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYVhOQlkzUnBkbVZCWTNScGIyNG9aU2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbDl3Y205d1pYSjBlVUpwYm1ScGJtZHpPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdMQ0JwSUQwZ2RDNXNaVzVuZEdnN0lHNGdJVDA5SUdrN0lDc3JiaWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFJiYmwwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdExYSXVkWE5sUTI5MWJuUWdQVDA5SURBZ0ppWWdLSEl1Y21WemRHOXlaVTl5YVdkcGJtRnNVM1JoZEdVb0tTd2dkR2hwY3k1ZmRHRnJaVUpoWTJ0Q2FXNWthVzVuS0hJcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MFlXdGxRbUZqYTBGamRHbHZiaWhsS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmZhVzVwZEUxbGJXOXllVTFoYm1GblpYSW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZZV04wYVc5dWN5QTlJRnRkTENCMGFHbHpMbDl1UVdOMGFYWmxRV04wYVc5dWN5QTlJREFzSUhSb2FYTXVYMkZqZEdsdmJuTkNlVU5zYVhBZ1BTQjdmU3dnZEdocGN5NWZZbWx1WkdsdVozTWdQU0JiWFN3Z2RHaHBjeTVmYmtGamRHbDJaVUpwYm1ScGJtZHpJRDBnTUN3Z2RHaHBjeTVmWW1sdVpHbHVaM05DZVZKdmIzUkJibVJPWVcxbElEMGdlMzBzSUhSb2FYTXVYMk52Ym5SeWIyeEpiblJsY25CdmJHRnVkSE1nUFNCYlhTd2dkR2hwY3k1ZmJrRmpkR2wyWlVOdmJuUnliMnhKYm5SbGNuQnZiR0Z1ZEhNZ1BTQXdPd29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3pzS0lDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCaFkzUnBiMjV6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCblpYUWdkRzkwWVd3Z0tDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTGw5aFkzUnBiMjV6TG14bGJtZDBhRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuWlhRZ2FXNVZjMlVnS0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbDl1UVdOMGFYWmxRV04wYVc5dWN6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdZbWx1WkdsdVozTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsZENCMGIzUmhiQ0FvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVXVYMkpwYm1ScGJtZHpMbXhsYm1kMGFEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5aWFFnYVc1VmMyVWdLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbExsOXVRV04wYVhabFFtbHVaR2x1WjNNN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJ5YjJ4SmJuUmxjbkJ2YkdGdWRITTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsZENCMGIzUmhiQ0FvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVXVYMk52Ym5SeWIyeEpiblJsY25CdmJHRnVkSE11YkdWdVozUm9Pd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsZENCcGJsVnpaU0FvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVXVYMjVCWTNScGRtVkRiMjUwY205c1NXNTBaWEp3YjJ4aGJuUnpPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUgwS0lDQWdJRjlwYzBGamRHbDJaVUZqZEdsdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JsTGw5allXTm9aVWx1WkdWNE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMElDRTlQU0J1ZFd4c0lDWW1JSFFnUENCMGFHbHpMbDl1UVdOMGFYWmxRV04wYVc5dWN6c0tJQ0FnSUgwS0lDQWdJRjloWkdSSmJtRmpkR2wyWlVGamRHbHZiaWhsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0IwYUdsekxsOWhZM1JwYjI1ekxDQnlJRDBnZEdocGN5NWZZV04wYVc5dWMwSjVRMnhwY0N3Z1lTQTlJSEpiZEYwN0NpQWdJQ0FnSUNBZ2FXWWdLR0VnUFQwOUlIWnZhV1FnTUNrZ1lTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2EyNXZkMjVCWTNScGIyNXpPaUJiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsQ2lBZ0lDQWdJQ0FnSUNBZ0lGMHNDaUFnSUNBZ0lDQWdJQ0FnSUdGamRHbHZia0o1VW05dmREb2dlMzBLSUNBZ0lDQWdJQ0I5TENCbExsOWllVU5zYVhCRFlXTm9aVWx1WkdWNElEMGdNQ3dnY2x0MFhTQTlJR0U3Q2lBZ0lDQWdJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnWVM1cmJtOTNia0ZqZEdsdmJuTTdDaUFnSUNBZ0lDQWdJQ0FnSUdVdVgySjVRMnhwY0VOaFkyaGxTVzVrWlhnZ1BTQnZMbXhsYm1kMGFDd2dieTV3ZFhOb0tHVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JsTGw5allXTm9aVWx1WkdWNElEMGdhUzVzWlc1bmRHZ3NJR2t1Y0hWemFDaGxLU3dnWVM1aFkzUnBiMjVDZVZKdmIzUmJibDBnUFNCbE93b2dJQ0FnZlFvZ0lDQWdYM0psYlc5MlpVbHVZV04wYVhabFFXTjBhVzl1S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WDJGamRHbHZibk1zSUc0Z1BTQjBXM1F1YkdWdVozUm9JQzBnTVYwc0lHa2dQU0JsTGw5allXTm9aVWx1WkdWNE93b2dJQ0FnSUNBZ0lHNHVYMk5oWTJobFNXNWtaWGdnUFNCcExDQjBXMmxkSUQwZ2Jpd2dkQzV3YjNBb0tTd2daUzVmWTJGamFHVkpibVJsZUNBOUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0JsTGw5amJHbHdMblYxYVdRc0lHRWdQU0IwYUdsekxsOWhZM1JwYjI1elFubERiR2x3TENCdklEMGdZVnR5WFN3Z1l5QTlJRzh1YTI1dmQyNUJZM1JwYjI1ekxDQnNJRDBnWTF0akxteGxibWQwYUNBdElERmRMQ0JvSUQwZ1pTNWZZbmxEYkdsd1EyRmphR1ZKYm1SbGVEc0tJQ0FnSUNBZ0lDQnNMbDlpZVVOc2FYQkRZV05vWlVsdVpHVjRJRDBnYUN3Z1kxdG9YU0E5SUd3c0lHTXVjRzl3S0Nrc0lHVXVYMko1UTJ4cGNFTmhZMmhsU1c1a1pYZ2dQU0J1ZFd4c093b2dJQ0FnSUNBZ0lHeGxkQ0IxSUQwZ2J5NWhZM1JwYjI1Q2VWSnZiM1FzSUdRZ1BTQW9aUzVmYkc5allXeFNiMjkwSUh4OElIUm9hWE11WDNKdmIzUXBMblYxYVdRN0NpQWdJQ0FnSUNBZ1pHVnNaWFJsSUhWYlpGMHNJR011YkdWdVozUm9JRDA5UFNBd0lDWW1JR1JsYkdWMFpTQmhXM0pkTENCMGFHbHpMbDl5WlcxdmRtVkpibUZqZEdsMlpVSnBibVJwYm1kelJtOXlRV04wYVc5dUtHVXBPd29nSUNBZ2ZRb2dJQ0FnWDNKbGJXOTJaVWx1WVdOMGFYWmxRbWx1WkdsdVozTkdiM0pCWTNScGIyNG9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlM1ZmNISnZjR1Z5ZEhsQ2FXNWthVzVuY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdMQ0JwSUQwZ2RDNXNaVzVuZEdnN0lHNGdJVDA5SUdrN0lDc3JiaWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RGdHVYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0xTMXlMbkpsWm1WeVpXNWpaVU52ZFc1MElEMDlQU0F3SUNZbUlIUm9hWE11WDNKbGJXOTJaVWx1WVdOMGFYWmxRbWx1WkdsdVp5aHlLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCZmJHVnVaRUZqZEdsdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxsOWhZM1JwYjI1ekxDQnVJRDBnWlM1ZlkyRmphR1ZKYm1SbGVDd2dhU0E5SUhSb2FYTXVYMjVCWTNScGRtVkJZM1JwYjI1ekt5c3NJSElnUFNCMFcybGRPd29nSUNBZ0lDQWdJR1V1WDJOaFkyaGxTVzVrWlhnZ1BTQnBMQ0IwVzJsZElEMGdaU3dnY2k1ZlkyRmphR1ZKYm1SbGVDQTlJRzRzSUhSYmJsMGdQU0J5T3dvZ0lDQWdmUW9nSUNBZ1gzUmhhMlZDWVdOclFXTjBhVzl1S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WDJGamRHbHZibk1zSUc0Z1BTQmxMbDlqWVdOb1pVbHVaR1Y0TENCcElEMGdMUzEwYUdsekxsOXVRV04wYVhabFFXTjBhVzl1Y3l3Z2NpQTlJSFJiYVYwN0NpQWdJQ0FnSUNBZ1pTNWZZMkZqYUdWSmJtUmxlQ0E5SUdrc0lIUmJhVjBnUFNCbExDQnlMbDlqWVdOb1pVbHVaR1Y0SUQwZ2Jpd2dkRnR1WFNBOUlISTdDaUFnSUNCOUNpQWdJQ0JmWVdSa1NXNWhZM1JwZG1WQ2FXNWthVzVuS0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXVYMkpwYm1ScGJtZHpRbmxTYjI5MFFXNWtUbUZ0WlN3Z2NpQTlJSFJvYVhNdVgySnBibVJwYm1kekxDQmhJRDBnYVZ0MFhUc0tJQ0FnSUNBZ0lDQmhJRDA5UFNCMmIybGtJREFnSmlZZ0tHRWdQU0I3ZlN3Z2FWdDBYU0E5SUdFcExDQmhXMjVkSUQwZ1pTd2daUzVmWTJGamFHVkpibVJsZUNBOUlISXViR1Z1WjNSb0xDQnlMbkIxYzJnb1pTazdDaUFnSUNCOUNpQWdJQ0JmY21WdGIzWmxTVzVoWTNScGRtVkNhVzVrYVc1bktHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVgySnBibVJwYm1kekxDQnVJRDBnWlM1aWFXNWthVzVuTENCcElEMGdiaTV5YjI5MFRtOWtaUzUxZFdsa0xDQnlJRDBnYmk1d1lYUm9MQ0JoSUQwZ2RHaHBjeTVmWW1sdVpHbHVaM05DZVZKdmIzUkJibVJPWVcxbExDQnZJRDBnWVZ0cFhTd2dZeUE5SUhSYmRDNXNaVzVuZEdnZ0xTQXhYU3dnYkNBOUlHVXVYMk5oWTJobFNXNWtaWGc3Q2lBZ0lDQWdJQ0FnWXk1ZlkyRmphR1ZKYm1SbGVDQTlJR3dzSUhSYmJGMGdQU0JqTENCMExuQnZjQ2dwTENCa1pXeGxkR1VnYjF0eVhTd2dUMkpxWldOMExtdGxlWE1vYnlrdWJHVnVaM1JvSUQwOVBTQXdJQ1ltSUdSbGJHVjBaU0JoVzJsZE93b2dJQ0FnZlFvZ0lDQWdYMnhsYm1SQ2FXNWthVzVuS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WDJKcGJtUnBibWR6TENCdUlEMGdaUzVmWTJGamFHVkpibVJsZUN3Z2FTQTlJSFJvYVhNdVgyNUJZM1JwZG1WQ2FXNWthVzVuY3lzckxDQnlJRDBnZEZ0cFhUc0tJQ0FnSUNBZ0lDQmxMbDlqWVdOb1pVbHVaR1Y0SUQwZ2FTd2dkRnRwWFNBOUlHVXNJSEl1WDJOaFkyaGxTVzVrWlhnZ1BTQnVMQ0IwVzI1ZElEMGdjanNLSUNBZ0lIMEtJQ0FnSUY5MFlXdGxRbUZqYTBKcGJtUnBibWNvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVmWW1sdVpHbHVaM01zSUc0Z1BTQmxMbDlqWVdOb1pVbHVaR1Y0TENCcElEMGdMUzEwYUdsekxsOXVRV04wYVhabFFtbHVaR2x1WjNNc0lISWdQU0IwVzJsZE93b2dJQ0FnSUNBZ0lHVXVYMk5oWTJobFNXNWtaWGdnUFNCcExDQjBXMmxkSUQwZ1pTd2djaTVmWTJGamFHVkpibVJsZUNBOUlHNHNJSFJiYmwwZ1BTQnlPd29nSUNBZ2ZRb2dJQ0FnWDJ4bGJtUkRiMjUwY205c1NXNTBaWEp3YjJ4aGJuUW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxsOWpiMjUwY205c1NXNTBaWEp3YjJ4aGJuUnpMQ0IwSUQwZ2RHaHBjeTVmYmtGamRHbDJaVU52Ym5SeWIyeEpiblJsY25CdmJHRnVkSE1yS3l3Z2JpQTlJR1ZiZEYwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0Z1BUMDlJSFp2YVdRZ01DQW1KaUFvYmlBOUlHNWxkeUJtWVNodVpYY2dSbXh2WVhRek1rRnljbUY1S0RJcExDQnVaWGNnUm14dllYUXpNa0Z5Y21GNUtESXBMQ0F4TENCUGVDa3NJRzR1WDE5allXTm9aVWx1WkdWNElEMGdkQ3dnWlZ0MFhTQTlJRzRwTENCdU93b2dJQ0FnZlFvZ0lDQWdYM1JoYTJWQ1lXTnJRMjl1ZEhKdmJFbHVkR1Z5Y0c5c1lXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVYMk52Ym5SeWIyeEpiblJsY25CdmJHRnVkSE1zSUc0Z1BTQmxMbDlmWTJGamFHVkpibVJsZUN3Z2FTQTlJQzB0ZEdocGN5NWZia0ZqZEdsMlpVTnZiblJ5YjJ4SmJuUmxjbkJ2YkdGdWRITXNJSElnUFNCMFcybGRPd29nSUNBZ0lDQWdJR1V1WDE5allXTm9aVWx1WkdWNElEMGdhU3dnZEZ0cFhTQTlJR1VzSUhJdVgxOWpZV05vWlVsdVpHVjRJRDBnYml3Z2RGdHVYU0E5SUhJN0NpQWdJQ0I5Q2lBZ0lDQmpiR2x3UVdOMGFXOXVLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFFnZkh3Z2RHaHBjeTVmY205dmRDd2djaUE5SUdrdWRYVnBaQ3dnWVNBOUlIUjVjR1Z2WmlCbElEMDlJQ0p6ZEhKcGJtY2lJRDhnYVhNdVptbHVaRUo1VG1GdFpTaHBMQ0JsS1NBNklHVXNJRzhnUFNCaElDRTlQU0J1ZFd4c0lEOGdZUzUxZFdsa0lEb2daU3dnWXlBOUlIUm9hWE11WDJGamRHbHZibk5DZVVOc2FYQmJiMTBzSUd3Z1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUdsbUlDaHVJRDA5UFNCMmIybGtJREFnSmlZZ0tHRWdJVDA5SUc1MWJHd2dQeUJ1SUQwZ1lTNWliR1Z1WkUxdlpHVWdPaUJ1SUQwZ1dHTXBMQ0JqSUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIVWdQU0JqTG1GamRHbHZia0o1VW05dmRGdHlYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFVnSVQwOUlIWnZhV1FnTUNBbUppQjFMbUpzWlc1a1RXOWtaU0E5UFQwZ2Jpa2djbVYwZFhKdUlIVTdDaUFnSUNBZ0lDQWdJQ0FnSUd3Z1BTQmpMbXR1YjNkdVFXTjBhVzl1YzFzd1hTd2dZU0E5UFQwZ2JuVnNiQ0FtSmlBb1lTQTlJR3d1WDJOc2FYQXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb1lTQTlQVDBnYm5Wc2JDa2djbVYwZFhKdUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnYkdWMElHZ2dQU0J1WlhjZ1ZtTW9kR2hwY3l3Z1lTd2dkQ3dnYmlrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMkpwYm1SQlkzUnBiMjRvYUN3Z2JDa3NJSFJvYVhNdVgyRmtaRWx1WVdOMGFYWmxRV04wYVc5dUtHZ3NJRzhzSUhJcExDQm9Pd29nSUNBZ2ZRb2dJQ0FnWlhocGMzUnBibWRCWTNScGIyNG9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RDQjhmQ0IwYUdsekxsOXliMjkwTENCcElEMGdiaTUxZFdsa0xDQnlJRDBnZEhsd1pXOW1JR1VnUFQwZ0luTjBjbWx1WnlJZ1B5QnBjeTVtYVc1a1FubE9ZVzFsS0c0c0lHVXBJRG9nWlN3Z1lTQTlJSElnUHlCeUxuVjFhV1FnT2lCbExDQnZJRDBnZEdocGN5NWZZV04wYVc5dWMwSjVRMnhwY0Z0aFhUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2J5QWhQVDBnZG05cFpDQXdJQ1ltSUc4dVlXTjBhVzl1UW5sU2IyOTBXMmxkSUh4OElHNTFiR3c3Q2lBZ0lDQjlDaUFnSUNCemRHOXdRV3hzUVdOMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NWZZV04wYVc5dWN5d2dkQ0E5SUhSb2FYTXVYMjVCWTNScGRtVkJZM1JwYjI1ek93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJSFFnTFNBeE95QnVJRDQ5SURBN0lDMHRiaWxsVzI1ZExuTjBiM0FvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnWlNBcVBTQjBhR2x6TG5ScGJXVlRZMkZzWlRzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVYMkZqZEdsdmJuTXNJRzRnUFNCMGFHbHpMbDl1UVdOMGFYWmxRV04wYVc5dWN5d2dhU0E5SUhSb2FYTXVkR2x0WlNBclBTQmxMQ0J5SUQwZ1RXRjBhQzV6YVdkdUtHVXBMQ0JoSUQwZ2RHaHBjeTVmWVdOamRVbHVaR1Y0SUY0OUlERTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnNJRDBnTURzZ2JDQWhQVDBnYmpzZ0t5dHNLWFJiYkYwdVgzVndaR0YwWlNocExDQmxMQ0J5TENCaEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlIUm9hWE11WDJKcGJtUnBibWR6TENCaklEMGdkR2hwY3k1ZmJrRmpkR2wyWlVKcGJtUnBibWR6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYkNBOUlEQTdJR3dnSVQwOUlHTTdJQ3NyYkNsdlcyeGRMbUZ3Y0d4NUtHRXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBWR2x0WlNobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1MGFXMWxJRDBnTURzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhRZ1BTQXdPeUIwSUR3Z2RHaHBjeTVmWVdOMGFXOXVjeTVzWlc1bmRHZzdJSFFyS3lsMGFHbHpMbDloWTNScGIyNXpXM1JkTG5ScGJXVWdQU0F3T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuVndaR0YwWlNobEtUc0tJQ0FnSUgwS0lDQWdJR2RsZEZKdmIzUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSnZiM1E3Q2lBZ0lDQjlDaUFnSUNCMWJtTmhZMmhsUTJ4cGNDaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxsOWhZM1JwYjI1ekxDQnVJRDBnWlM1MWRXbGtMQ0JwSUQwZ2RHaHBjeTVmWVdOMGFXOXVjMEo1UTJ4cGNDd2djaUE5SUdsYmJsMDdDaUFnSUNBZ0lDQWdhV1lnS0hJZ0lUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUhJdWEyNXZkMjVCWTNScGIyNXpPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc4Z1BTQXdMQ0JqSUQwZ1lTNXNaVzVuZEdnN0lHOGdJVDA5SUdNN0lDc3JieWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJR0ZiYjEwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlrWldGamRHbDJZWFJsUVdOMGFXOXVLR3dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHZ2dQU0JzTGw5allXTm9aVWx1WkdWNExDQjFJRDBnZEZ0MExteGxibWQwYUNBdElERmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiQzVmWTJGamFHVkpibVJsZUNBOUlHNTFiR3dzSUd3dVgySjVRMnhwY0VOaFkyaGxTVzVrWlhnZ1BTQnVkV3hzTENCMUxsOWpZV05vWlVsdVpHVjRJRDBnYUN3Z2RGdG9YU0E5SUhVc0lIUXVjRzl3S0Nrc0lIUm9hWE11WDNKbGJXOTJaVWx1WVdOMGFYWmxRbWx1WkdsdVozTkdiM0pCWTNScGIyNG9iQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJR2xiYmwwN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdkVzVqWVdOb1pWSnZiM1FvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTNTFkV2xrTENCdUlEMGdkR2hwY3k1ZllXTjBhVzl1YzBKNVEyeHBjRHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR0VnYVc0Z2JpbDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnYmx0aFhTNWhZM1JwYjI1Q2VWSnZiM1FzSUdNZ1BTQnZXM1JkT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpJQ0U5UFNCMmIybGtJREFnSmlZZ0tIUm9hWE11WDJSbFlXTjBhWFpoZEdWQlkzUnBiMjRvWXlrc0lIUm9hWE11WDNKbGJXOTJaVWx1WVdOMGFYWmxRV04wYVc5dUtHTXBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0IwYUdsekxsOWlhVzVrYVc1bmMwSjVVbTl2ZEVGdVpFNWhiV1VzSUhJZ1BTQnBXM1JkT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJQ0U5UFNCMmIybGtJREFwSUdadmNpaHNaWFFnWVNCcGJpQnlLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCeVcyRmRPd29nSUNBZ0lDQWdJQ0FnSUNCdkxuSmxjM1J2Y21WUGNtbG5hVzVoYkZOMFlYUmxLQ2tzSUhSb2FYTXVYM0psYlc5MlpVbHVZV04wYVhabFFtbHVaR2x1WnlodktUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0IxYm1OaFkyaGxRV04wYVc5dUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVaWGhwYzNScGJtZEJZM1JwYjI0b1pTd2dkQ2s3Q2lBZ0lDQWdJQ0FnYmlBaFBUMGdiblZzYkNBbUppQW9kR2hwY3k1ZlpHVmhZM1JwZG1GMFpVRmpkR2x2YmlodUtTd2dkR2hwY3k1ZmNtVnRiM1psU1c1aFkzUnBkbVZCWTNScGIyNG9iaWtwT3dvZ0lDQWdmUXA5TENCUWRTQTlJR05zWVhOeklITXhJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVkbUZzZFdVZ1BTQmxPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCek1TaDBhR2x6TG5aaGJIVmxMbU5zYjI1bElEMDlQU0IyYjJsa0lEQWdQeUIwYUdsekxuWmhiSFZsSURvZ2RHaHBjeTUyWVd4MVpTNWpiRzl1WlNncEtUc0tJQ0FnSUgwS2ZTd2dSbmdnUFNBd0xDQk1kU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdjMjRnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwTENCMGFHbHpMbWx6Vlc1cFptOXliWE5IY205MWNDQTlJQ0V3TENCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR2hwY3l3Z0ltbGtJaXdnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1JuZ3JLd29nSUNBZ0lDQWdJSDBwTENCMGFHbHpMbTVoYldVZ1BTQWlJaXdnZEdocGN5NTFjMkZuWlNBOUlFaHlMQ0IwYUdsekxuVnVhV1p2Y20xeklEMGdXMTA3Q2lBZ0lDQjlDaUFnSUNCaFpHUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuVnVhV1p2Y20xekxuQjFjMmdvWlNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeVpXMXZkbVVvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTUxYm1sbWIzSnRjeTVwYm1SbGVFOW1LR1VwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwSUNFOVBTQXRNU0FtSmlCMGFHbHpMblZ1YVdadmNtMXpMbk53YkdsalpTaDBMQ0F4S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFNWhiV1VvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTVoYldVZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwVlhOaFoyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuVnpZV2RsSUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHUnBjM0J2YzJVb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WkdsemNHRjBZMmhGZG1WdWRDaDdDaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ0prYVhOd2IzTmxJZ29nSUNBZ0lDQWdJSDBwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXVZVzFsSUQwZ1pTNXVZVzFsTENCMGFHbHpMblZ6WVdkbElEMGdaUzUxYzJGblpUc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlHVXVkVzVwWm05eWJYTTdDaUFnSUNBZ0lDQWdkR2hwY3k1MWJtbG1iM0p0Y3k1c1pXNW5kR2dnUFNBd093b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJREFzSUdrZ1BTQjBMbXhsYm1kMGFEc2diaUE4SUdrN0lHNHJLeWwwYUdsekxuVnVhV1p2Y20xekxuQjFjMmdvZEZ0dVhTNWpiRzl1WlNncEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lncExtTnZjSGtvZEdocGN5azdDaUFnSUNCOUNuMHNJRWwxSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJKY3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1SUQwZ01TbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb1pTd2dkQ2tzSUhSb2FYTXVhWE5KYm5OMFlXNWpaV1JKYm5SbGNteGxZWFpsWkVKMVptWmxjaUE5SUNFd0xDQjBhR2x6TG0xbGMyaFFaWEpCZEhSeWFXSjFkR1VnUFNCdU93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXViV1Z6YUZCbGNrRjBkSEpwWW5WMFpTQTlJR1V1YldWemFGQmxja0YwZEhKcFluVjBaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSE4xY0dWeUxtTnNiMjVsS0dVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtMWxjMmhRWlhKQmRIUnlhV0oxZEdVZ1BTQjBhR2x6TG0xbGMyaFFaWEpCZEhSeWFXSjFkR1VzSUhRN0NpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdjM1Z3WlhJdWRHOUtVMDlPS0dVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtbHpTVzV6ZEdGdVkyVmtTVzUwWlhKc1pXRjJaV1JDZFdabVpYSWdQU0FoTUN3Z2RDNXRaWE5vVUdWeVFYUjBjbWxpZFhSbElEMGdkR2hwY3k1dFpYTm9VR1Z5UVhSMGNtbGlkWFJsTENCME93b2dJQ0FnZlFwOUxDQlZkU0E5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHNJR2tzSUhJcGV3b2dJQ0FnSUNBZ0lIUm9hWE11YVhOSFRFSjFabVpsY2tGMGRISnBZblYwWlNBOUlDRXdMQ0IwYUdsekxtNWhiV1VnUFNBaUlpd2dkR2hwY3k1aWRXWm1aWElnUFNCbExDQjBhR2x6TG5SNWNHVWdQU0IwTENCMGFHbHpMbWwwWlcxVGFYcGxJRDBnYml3Z2RHaHBjeTVsYkdWdFpXNTBVMmw2WlNBOUlHa3NJSFJvYVhNdVkyOTFiblFnUFNCeUxDQjBhR2x6TG5abGNuTnBiMjRnUFNBd093b2dJQ0FnZlFvZ0lDQWdjMlYwSUc1bFpXUnpWWEJrWVhSbEtHVXBJSHNLSUNBZ0lDQWdJQ0JsSUQwOVBTQWhNQ0FtSmlCMGFHbHpMblpsY25OcGIyNHJLenNLSUNBZ0lIMEtJQ0FnSUhObGRFSjFabVpsY2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WW5WbVptVnlJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRGUjVjR1VvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5SNWNHVWdQU0JsTENCMGFHbHpMbVZzWlcxbGJuUlRhWHBsSUQwZ2RDd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRWwwWlcxVGFYcGxLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXBkR1Z0VTJsNlpTQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSRGIzVnVkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjkxYm5RZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFwOUxDQkVkU0E5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNGdQU0F3TENCcElEMGdNU0F2SURBcGV3b2dJQ0FnSUNBZ0lIUm9hWE11Y21GNUlEMGdibVYzSUdocEtHVXNJSFFwTENCMGFHbHpMbTVsWVhJZ1BTQnVMQ0IwYUdsekxtWmhjaUE5SUdrc0lIUm9hWE11WTJGdFpYSmhJRDBnYm5Wc2JDd2dkR2hwY3k1c1lYbGxjbk1nUFNCdVpYY2dVbk1zSUhSb2FYTXVjR0Z5WVcxeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCTlpYTm9PaUI3ZlN3S0lDQWdJQ0FnSUNBZ0lDQWdUR2x1WlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHlaWE5vYjJ4a09pQXhDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJRXhQUkRvZ2UzMHNDaUFnSUNBZ0lDQWdJQ0FnSUZCdmFXNTBjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeVpYTm9iMnhrT2lBeENpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lGTndjbWwwWlRvZ2UzMEtJQ0FnSUNBZ0lDQjlPd29nSUNBZ2ZRb2dJQ0FnYzJWMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbkpoZVM1elpYUW9aU3dnZENrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFEyRnRaWEpoS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwTG1selVHVnljM0JsWTNScGRtVkRZVzFsY21FZ1B5QW9kR2hwY3k1eVlYa3ViM0pwWjJsdUxuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWgwTG0xaGRISnBlRmR2Y214a0tTd2dkR2hwY3k1eVlYa3VaR2x5WldOMGFXOXVMbk5sZENobExuZ3NJR1V1ZVN3Z0xqVXBMblZ1Y0hKdmFtVmpkQ2gwS1M1emRXSW9kR2hwY3k1eVlYa3ViM0pwWjJsdUtTNXViM0p0WVd4cGVtVW9LU3dnZEdocGN5NWpZVzFsY21FZ1BTQjBLU0E2SUhRdWFYTlBjblJvYjJkeVlYQm9hV05EWVcxbGNtRWdQeUFvZEdocGN5NXlZWGt1YjNKcFoybHVMbk5sZENobExuZ3NJR1V1ZVN3Z0tIUXVibVZoY2lBcklIUXVabUZ5S1NBdklDaDBMbTVsWVhJZ0xTQjBMbVpoY2lrcExuVnVjSEp2YW1WamRDaDBLU3dnZEdocGN5NXlZWGt1WkdseVpXTjBhVzl1TG5ObGRDZ3dMQ0F3TENBdE1Ta3VkSEpoYm5ObWIzSnRSR2x5WldOMGFXOXVLSFF1YldGMGNtbDRWMjl5YkdRcExDQjBhR2x6TG1OaGJXVnlZU0E5SUhRcElEb2dZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VW1GNVkyRnpkR1Z5T2lCVmJuTjFjSEJ2Y25SbFpDQmpZVzFsY21FZ2RIbHdaVG9nSWlBcklIUXVkSGx3WlNrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUlBZbXBsWTNRb1pTd2dkQ0E5SUNFd0xDQnVJRDBnVzEwcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2EyTW9aU3dnZEdocGN5d2diaXdnZENrc0lHNHVjMjl5ZENoT2RTa3NJRzQ3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbk5sWTNSUFltcGxZM1J6S0dVc0lIUWdQU0FoTUN3Z2JpQTlJRnRkS1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcElEMGdNQ3dnY2lBOUlHVXViR1Z1WjNSb095QnBJRHdnY2pzZ2FTc3JLV3RqS0dWYmFWMHNJSFJvYVhNc0lHNHNJSFFwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1TG5OdmNuUW9UblVwTENCdU93b2dJQ0FnZlFwOU93cG1kVzVqZEdsdmJpQk9kU2h6TVN3Z1pTa2dld29nSUNBZ2NtVjBkWEp1SUhNeExtUnBjM1JoYm1ObElDMGdaUzVrYVhOMFlXNWpaVHNLZlFwbWRXNWpkR2x2YmlCcll5aHpNU3dnWlN3Z2RDd2diaWtnZXdvZ0lDQWdhV1lnS0hNeExteGhlV1Z5Y3k1MFpYTjBLR1V1YkdGNVpYSnpLU0FtSmlCek1TNXlZWGxqWVhOMEtHVXNJSFFwTENCdUlEMDlQU0FoTUNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ2N6RXVZMmhwYkdSeVpXNDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnlJRDBnTUN3Z1lTQTlJR2t1YkdWdVozUm9PeUJ5SUR3Z1lUc2djaXNyS1d0aktHbGJjbDBzSUdVc0lIUXNJQ0V3S1RzS0lDQWdJSDBLZlFwMllYSWdUM1VnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ01Td2dkQ0E5SURBc0lHNGdQU0F3S1hzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlZV1JwZFhNZ1BTQmxMQ0IwYUdsekxuQm9hU0E5SUhRc0lIUm9hWE11ZEdobGRHRWdQU0J1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMEtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WVdScGRYTWdQU0JsTENCMGFHbHpMbkJvYVNBOUlIUXNJSFJvYVhNdWRHaGxkR0VnUFNCdUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbUZrYVhWeklEMGdaUzV5WVdScGRYTXNJSFJvYVhNdWNHaHBJRDBnWlM1d2FHa3NJSFJvYVhNdWRHaGxkR0VnUFNCbExuUm9aWFJoTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYldGclpWTmhabVVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR2hwSUQwZ1RXRjBhQzV0WVhnb01XVXROaXdnVFdGMGFDNXRhVzRvVFdGMGFDNVFTU0F0SURGbExUWXNJSFJvYVhNdWNHaHBLU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSR2NtOXRWbVZqZEc5eU15aGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBSbkp2YlVOaGNuUmxjMmxoYmtOdmIzSmtjeWhsTG5nc0lHVXVlU3dnWlM1NktUc0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMURZWEowWlhOcFlXNURiMjl5WkhNb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpoWkdsMWN5QTlJRTFoZEdndWMzRnlkQ2hsSUNvZ1pTQXJJSFFnS2lCMElDc2diaUFxSUc0cExDQjBhR2x6TG5KaFpHbDFjeUE5UFQwZ01DQS9JQ2gwYUdsekxuUm9aWFJoSUQwZ01Dd2dkR2hwY3k1d2FHa2dQU0F3S1NBNklDaDBhR2x6TG5Sb1pYUmhJRDBnVFdGMGFDNWhkR0Z1TWlobExDQnVLU3dnZEdocGN5NXdhR2tnUFNCTllYUm9MbUZqYjNNb1kzUW9kQ0F2SUhSb2FYTXVjbUZrYVhWekxDQXRNU3dnTVNrcEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnNiMjVsS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpZ3BMbU52Y0hrb2RHaHBjeWs3Q2lBZ0lDQjlDbjBzSUVaMUlEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJREVzSUhRZ1BTQXdMQ0J1SUQwZ01DbDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21Ga2FYVnpJRDBnWlN3Z2RHaHBjeTUwYUdWMFlTQTlJSFFzSUhSb2FYTXVlU0E5SUc0c0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KaFpHbDFjeUE5SUdVc0lIUm9hWE11ZEdobGRHRWdQU0IwTENCMGFHbHpMbmtnUFNCdUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbUZrYVhWeklEMGdaUzV5WVdScGRYTXNJSFJvYVhNdWRHaGxkR0VnUFNCbExuUm9aWFJoTENCMGFHbHpMbmtnUFNCbExua3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFZtVmpkRzl5TXlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMFJuSnZiVU5oY25SbGMybGhia052YjNKa2N5aGxMbmdzSUdVdWVTd2daUzU2S1RzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxRFlYSjBaWE5wWVc1RGIyOXlaSE1vWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmhaR2wxY3lBOUlFMWhkR2d1YzNGeWRDaGxJQ29nWlNBcklHNGdLaUJ1S1N3Z2RHaHBjeTUwYUdWMFlTQTlJRTFoZEdndVlYUmhiaklvWlN3Z2Jpa3NJSFJvYVhNdWVTQTlJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvS1M1amIzQjVLSFJvYVhNcE93b2dJQ0FnZlFwOUxDQkNkU0E5SUc1bGR5QmFMQ0I2ZFNBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnV2lneElDOGdNQ3dnTVNBdklEQXBMQ0IwSUQwZ2JtVjNJRm9vTFRFZ0x5QXdMQ0F0TVNBdklEQXBLWHNLSUNBZ0lDQWdJQ0IwYUdsekxtbHpRbTk0TWlBOUlDRXdMQ0IwYUdsekxtMXBiaUE5SUdVc0lIUm9hWE11YldGNElEMGdkRHNLSUNBZ0lIMEtJQ0FnSUhObGRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV2x1TG1OdmNIa29aU2tzSUhSb2FYTXViV0Y0TG1OdmNIa29kQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSR2NtOXRVRzlwYm5SektHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtMWhhMlZGYlhCMGVTZ3BPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBc0lHNGdQU0JsTG14bGJtZDBhRHNnZENBOElHNDdJSFFyS3lsMGFHbHpMbVY0Y0dGdVpFSjVVRzlwYm5Rb1pWdDBYU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFEyVnVkR1Z5UVc1a1UybDZaU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQkNkUzVqYjNCNUtIUXBMbTExYkhScGNHeDVVMk5oYkdGeUtDNDFLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dGFXNHVZMjl3ZVNobEtTNXpkV0lvYmlrc0lIUm9hWE11YldGNExtTnZjSGtvWlNrdVlXUmtLRzRwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0NrdVkyOXdlU2gwYUdsektUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNWpiM0I1S0dVdWJXbHVLU3dnZEdocGN5NXRZWGd1WTI5d2VTaGxMbTFoZUNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdFlXdGxSVzF3ZEhrb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldsdUxuZ2dQU0IwYUdsekxtMXBiaTU1SUQwZ01TQXZJREFzSUhSb2FYTXViV0Y0TG5nZ1BTQjBhR2x6TG0xaGVDNTVJRDBnTFRFZ0x5QXdMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdhWE5GYlhCMGVTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dFlYZ3VlQ0E4SUhSb2FYTXViV2x1TG5nZ2ZId2dkR2hwY3k1dFlYZ3VlU0E4SUhSb2FYTXViV2x1TG5rN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJEWlc1MFpYSW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtbHpSVzF3ZEhrb0tTQS9JR1V1YzJWMEtEQXNJREFwSURvZ1pTNWhaR1JXWldOMGIzSnpLSFJvYVhNdWJXbHVMQ0IwYUdsekxtMWhlQ2t1YlhWc2RHbHdiSGxUWTJGc1lYSW9MalVwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBVMmw2WlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YVhORmJYQjBlU2dwSUQ4Z1pTNXpaWFFvTUN3Z01Da2dPaUJsTG5OMVlsWmxZM1J2Y25Nb2RHaHBjeTV0WVhnc0lIUm9hWE11YldsdUtUc0tJQ0FnSUgwS0lDQWdJR1Y0Y0dGdVpFSjVVRzlwYm5Rb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNXRhVzRvWlNrc0lIUm9hWE11YldGNExtMWhlQ2hsS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdWNGNHRnVaRUo1Vm1WamRHOXlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRhVzR1YzNWaUtHVXBMQ0IwYUdsekxtMWhlQzVoWkdRb1pTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmxlSEJoYm1SQ2VWTmpZV3hoY2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldsdUxtRmtaRk5qWVd4aGNpZ3RaU2tzSUhSb2FYTXViV0Y0TG1Ga1pGTmpZV3hoY2lobEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnZiblJoYVc1elVHOXBiblFvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlBaEtHVXVlQ0E4SUhSb2FYTXViV2x1TG5nZ2ZId2daUzU0SUQ0Z2RHaHBjeTV0WVhndWVDQjhmQ0JsTG5rZ1BDQjBhR2x6TG0xcGJpNTVJSHg4SUdVdWVTQStJSFJvYVhNdWJXRjRMbmtwT3dvZ0lDQWdmUW9nSUNBZ1kyOXVkR0ZwYm5OQ2IzZ29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMXBiaTU0SUR3OUlHVXViV2x1TG5nZ0ppWWdaUzV0WVhndWVDQThQU0IwYUdsekxtMWhlQzU0SUNZbUlIUm9hWE11YldsdUxua2dQRDBnWlM1dGFXNHVlU0FtSmlCbExtMWhlQzU1SUR3OUlIUm9hWE11YldGNExuazdDaUFnSUNCOUNpQWdJQ0JuWlhSUVlYSmhiV1YwWlhJb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwTG5ObGRDZ29aUzU0SUMwZ2RHaHBjeTV0YVc0dWVDa2dMeUFvZEdocGN5NXRZWGd1ZUNBdElIUm9hWE11YldsdUxuZ3BMQ0FvWlM1NUlDMGdkR2hwY3k1dGFXNHVlU2tnTHlBb2RHaHBjeTV0WVhndWVTQXRJSFJvYVhNdWJXbHVMbmtwS1RzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5YzJWamRITkNiM2dvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlBaEtHVXViV0Y0TG5nZ1BDQjBhR2x6TG0xcGJpNTRJSHg4SUdVdWJXbHVMbmdnUGlCMGFHbHpMbTFoZUM1NElIeDhJR1V1YldGNExua2dQQ0IwYUdsekxtMXBiaTU1SUh4OElHVXViV2x1TG5rZ1BpQjBhR2x6TG0xaGVDNTVLVHNLSUNBZ0lIMEtJQ0FnSUdOc1lXMXdVRzlwYm5Rb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwTG1OdmNIa29aU2t1WTJ4aGJYQW9kR2hwY3k1dGFXNHNJSFJvYVhNdWJXRjRLVHNLSUNBZ0lIMEtJQ0FnSUdScGMzUmhibU5sVkc5UWIybHVkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMnhoYlhCUWIybHVkQ2hsTENCQ2RTa3VaR2x6ZEdGdVkyVlVieWhsS1RzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5YzJWamRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXbHVMbTFoZUNobExtMXBiaWtzSUhSb2FYTXViV0Y0TG0xcGJpaGxMbTFoZUNrc0lIUm9hWE11YVhORmJYQjBlU2dwSUNZbUlIUm9hWE11YldGclpVVnRjSFI1S0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMWJtbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV2x1TG0xcGJpaGxMbTFwYmlrc0lIUm9hWE11YldGNExtMWhlQ2hsTG0xaGVDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBjbUZ1YzJ4aGRHVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMXBiaTVoWkdRb1pTa3NJSFJvYVhNdWJXRjRMbUZrWkNobEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHVnhkV0ZzY3lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXViV2x1TG1WeGRXRnNjeWgwYUdsekxtMXBiaWtnSmlZZ1pTNXRZWGd1WlhGMVlXeHpLSFJvYVhNdWJXRjRLVHNLSUNBZ0lIMEtmU3dnVm5VZ1BTQnVaWGNnUVN3Z1ZISWdQU0J1WlhjZ1FTd2dhM1VnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ2JtVjNJRUVzSUhRZ1BTQnVaWGNnUVNsN0NpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGeWRDQTlJR1VzSUhSb2FYTXVaVzVrSUQwZ2REc0tJQ0FnSUgwS0lDQWdJSE5sZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUmhjblF1WTI5d2VTaGxLU3dnZEdocGN5NWxibVF1WTI5d2VTaDBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5OMFlYSjBMbU52Y0hrb1pTNXpkR0Z5ZENrc0lIUm9hWE11Wlc1a0xtTnZjSGtvWlM1bGJtUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaMlYwUTJWdWRHVnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1aFpHUldaV04wYjNKektIUm9hWE11YzNSaGNuUXNJSFJvYVhNdVpXNWtLUzV0ZFd4MGFYQnNlVk5qWVd4aGNpZ3VOU2s3Q2lBZ0lDQjlDaUFnSUNCa1pXeDBZU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWMzVmlWbVZqZEc5eWN5aDBhR2x6TG1WdVpDd2dkR2hwY3k1emRHRnlkQ2s3Q2lBZ0lDQjlDaUFnSUNCa2FYTjBZVzVqWlZOeEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5OMFlYSjBMbVJwYzNSaGJtTmxWRzlUY1hWaGNtVmtLSFJvYVhNdVpXNWtLVHNLSUNBZ0lIMEtJQ0FnSUdScGMzUmhibU5sS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wWVhKMExtUnBjM1JoYm1ObFZHOG9kR2hwY3k1bGJtUXBPd29nSUNBZ2ZRb2dJQ0FnWVhRb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtUmxiSFJoS0hRcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0dVcExtRmtaQ2gwYUdsekxuTjBZWEowS1RzS0lDQWdJSDBLSUNBZ0lHTnNiM05sYzNSUWIybHVkRlJ2VUc5cGJuUlFZWEpoYldWMFpYSW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lGWjFMbk4xWWxabFkzUnZjbk1vWlN3Z2RHaHBjeTV6ZEdGeWRDa3NJRlJ5TG5OMVlsWmxZM1J2Y25Nb2RHaHBjeTVsYm1Rc0lIUm9hWE11YzNSaGNuUXBPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdWSEl1Wkc5MEtGUnlLU3dnY2lBOUlGUnlMbVJ2ZENoV2RTa2dMeUJ1T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwSUNZbUlDaHlJRDBnWTNRb2Npd2dNQ3dnTVNrcExDQnlPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmMyVnpkRkJ2YVc1MFZHOVFiMmx1ZENobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMbU5zYjNObGMzUlFiMmx1ZEZSdlVHOXBiblJRWVhKaGJXVjBaWElvWlN3Z2RDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WkdWc2RHRW9iaWt1YlhWc2RHbHdiSGxUWTJGc1lYSW9hU2t1WVdSa0tIUm9hWE11YzNSaGNuUXBPd29nSUNBZ2ZRb2dJQ0FnWVhCd2JIbE5ZWFJ5YVhnMEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emRHRnlkQzVoY0hCc2VVMWhkSEpwZURRb1pTa3NJSFJvYVhNdVpXNWtMbUZ3Y0d4NVRXRjBjbWw0TkNobEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHVnhkV0ZzY3lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVjM1JoY25RdVpYRjFZV3h6S0hSb2FYTXVjM1JoY25RcElDWW1JR1V1Wlc1a0xtVnhkV0ZzY3loMGFHbHpMbVZ1WkNrN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9LUzVqYjNCNUtIUm9hWE1wT3dvZ0lDQWdmUXA5TENCSWRTQTlJRzVsZHlCQkxDQkhkU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdTbVVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tTd2dkR2hwY3k1c2FXZG9kQ0E5SUdVc0lIUm9hWE11YldGMGNtbDRJRDBnWlM1dFlYUnlhWGhYYjNKc1pDd2dkR2hwY3k1dFlYUnlhWGhCZFhSdlZYQmtZWFJsSUQwZ0lURXNJSFJvYVhNdVkyOXNiM0lnUFNCMExDQjBhR2x6TG5SNWNHVWdQU0FpVTNCdmRFeHBaMmgwU0dWc2NHVnlJanNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJRzVsZHlCSFpTd2dhU0E5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBeENpQWdJQ0FnSUNBZ1hUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHRWdQU0F3TENCdklEMGdNU3dnWXlBOUlETXlPeUJoSUR3Z1l6c2dZU3NyTENCdkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUdFZ0x5QmpJQ29nVFdGMGFDNVFTU0FxSURJc0lHZ2dQU0J2SUM4Z1l5QXFJRTFoZEdndVVFa2dLaUF5T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBMbkIxYzJnb1RXRjBhQzVqYjNNb2JDa3NJRTFoZEdndWMybHVLR3dwTENBeExDQk5ZWFJvTG1OdmN5aG9LU3dnVFdGMGFDNXphVzRvYUNrc0lERXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J1TG5ObGRFRjBkSEpwWW5WMFpTZ2ljRzl6YVhScGIyNGlMQ0J1WlhjZ2RtVW9hU3dnTXlrcE93b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2JtVjNJSGQwS0hzS0lDQWdJQ0FnSUNBZ0lDQWdabTluT2lBaE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnZEc5dVpVMWhjSEJsWkRvZ0lURUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtTnZibVVnUFNCdVpYY2daVzRvYml3Z2Npa3NJSFJvYVhNdVlXUmtLSFJvYVhNdVkyOXVaU2tzSUhSb2FYTXVkWEJrWVhSbEtDazdDaUFnSUNCOUNpQWdJQ0JrYVhOd2IzTmxLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1WlM1blpXOXRaWFJ5ZVM1a2FYTndiM05sS0Nrc0lIUm9hWE11WTI5dVpTNXRZWFJsY21saGJDNWthWE53YjNObEtDazdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXNhV2RvZEM1MWNHUmhkR1ZYYjNKc1pFMWhkSEpwZUNnaE1Dd2dJVEVwTENCMGFHbHpMbXhwWjJoMExuUmhjbWRsZEM1MWNHUmhkR1ZYYjNKc1pFMWhkSEpwZUNnaE1Dd2dJVEVwT3dvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NXNhV2RvZEM1a2FYTjBZVzVqWlNBL0lIUm9hWE11YkdsbmFIUXVaR2x6ZEdGdVkyVWdPaUF4WlRNc0lIUWdQU0JsSUNvZ1RXRjBhQzUwWVc0b2RHaHBjeTVzYVdkb2RDNWhibWRzWlNrN0NpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1bExuTmpZV3hsTG5ObGRDaDBMQ0IwTENCbEtTd2dTSFV1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtIUm9hWE11YkdsbmFIUXVkR0Z5WjJWMExtMWhkSEpwZUZkdmNteGtLU3dnZEdocGN5NWpiMjVsTG14dmIydEJkQ2hJZFNrc0lIUm9hWE11WTI5c2IzSWdJVDA5SUhadmFXUWdNQ0EvSUhSb2FYTXVZMjl1WlM1dFlYUmxjbWxoYkM1amIyeHZjaTV6WlhRb2RHaHBjeTVqYjJ4dmNpa2dPaUIwYUdsekxtTnZibVV1YldGMFpYSnBZV3d1WTI5c2IzSXVZMjl3ZVNoMGFHbHpMbXhwWjJoMExtTnZiRzl5S1RzS0lDQWdJSDBLZlN3Z1VHNGdQU0J1WlhjZ1FTd2dkM0lnUFNCdVpYY2dlbVVzSUd4dklEMGdibVYzSUhwbExDQlhkU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdaVzRnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCT1pDaGxLU3dnYmlBOUlHNWxkeUJIWlN3Z2FTQTlJRnRkTENCeUlEMGdXMTBzSUdFZ1BTQnVaWGNnY0dVb01Dd2dNQ3dnTVNrc0lHOGdQU0J1WlhjZ2NHVW9NQ3dnTVN3Z01DazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnNJRDBnTURzZ2JDQThJSFF1YkdWdVozUm9PeUJzS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJSFJiYkYwN0NpQWdJQ0FnSUNBZ0lDQWdJR2d1Y0dGeVpXNTBJQ1ltSUdndWNHRnlaVzUwTG1selFtOXVaU0FtSmlBb2FTNXdkWE5vS0RBc0lEQXNJREFwTENCcExuQjFjMmdvTUN3Z01Dd2dNQ2tzSUhJdWNIVnphQ2hoTG5Jc0lHRXVaeXdnWVM1aUtTd2djaTV3ZFhOb0tHOHVjaXdnYnk1bkxDQnZMbUlwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JpNXpaWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWl3Z2JtVjNJSFpsS0drc0lETXBLU3dnYmk1elpYUkJkSFJ5YVdKMWRHVW9JbU52Ykc5eUlpd2dibVYzSUhabEtISXNJRE1wS1RzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUc1bGR5QjNkQ2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJsZUVOdmJHOXljem9nSVRBc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb1ZHVnpkRG9nSVRFc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb1YzSnBkR1U2SUNFeExBb2dJQ0FnSUNBZ0lDQWdJQ0IwYjI1bFRXRndjR1ZrT2lBaE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTndZWEpsYm5RNklDRXdDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9iaXdnWXlrc0lIUm9hWE11YVhOVGEyVnNaWFJ2YmtobGJIQmxjaUE5SUNFd0xDQjBhR2x6TG5SNWNHVWdQU0FpVTJ0bGJHVjBiMjVJWld4d1pYSWlMQ0IwYUdsekxuSnZiM1FnUFNCbExDQjBhR2x6TG1KdmJtVnpJRDBnZEN3Z2RHaHBjeTV0WVhSeWFYZ2dQU0JsTG0xaGRISnBlRmR2Y214a0xDQjBhR2x6TG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNBaE1Uc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpVMWhkSEpwZUZkdmNteGtLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVZbTl1WlhNc0lHNGdQU0IwYUdsekxtZGxiMjFsZEhKNUxDQnBJRDBnYmk1blpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaWs3Q2lBZ0lDQWdJQ0FnYkc4dVkyOXdlU2gwYUdsekxuSnZiM1F1YldGMGNtbDRWMjl5YkdRcExtbHVkbVZ5ZENncE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2NpQTlJREFzSUdFZ1BTQXdPeUJ5SUR3Z2RDNXNaVzVuZEdnN0lISXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2RGdHlYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2J5NXdZWEpsYm5RZ0ppWWdieTV3WVhKbGJuUXVhWE5DYjI1bElDWW1JQ2gzY2k1dGRXeDBhWEJzZVUxaGRISnBZMlZ6S0d4dkxDQnZMbTFoZEhKcGVGZHZjbXhrS1N3Z1VHNHVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0hkeUtTd2dhUzV6WlhSWVdWb29ZU3dnVUc0dWVDd2dVRzR1ZVN3Z1VHNHVlaWtzSUhkeUxtMTFiSFJwY0d4NVRXRjBjbWxqWlhNb2JHOHNJRzh1Y0dGeVpXNTBMbTFoZEhKcGVGZHZjbXhrS1N3Z1VHNHVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0hkeUtTd2dhUzV6WlhSWVdWb29ZU0FySURFc0lGQnVMbmdzSUZCdUxua3NJRkJ1TG5vcExDQmhJQ3M5SURJcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnVMbWRsZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUtTNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQnpkWEJsY2k1MWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNobEtUc0tJQ0FnSUgwS0lDQWdJR1JwYzNCdmMyVW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NW5aVzl0WlhSeWVTNWthWE53YjNObEtDa3NJSFJvYVhNdWJXRjBaWEpwWVd3dVpHbHpjRzl6WlNncE93b2dJQ0FnZlFwOU93cG1kVzVqZEdsdmJpQk9aQ2h6TVNrZ2V3b2dJQ0FnYkdWMElHVWdQU0JiWFRzS0lDQWdJSE14TG1selFtOXVaU0E5UFQwZ0lUQWdKaVlnWlM1d2RYTm9LSE14S1RzS0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBN0lIUWdQQ0J6TVM1amFHbHNaSEpsYmk1c1pXNW5kR2c3SUhRckt5bGxMbkIxYzJndVlYQndiSGtvWlN3Z1RtUW9jekV1WTJocGJHUnlaVzViZEYwcEtUc0tJQ0FnSUhKbGRIVnliaUJsT3dwOUNuWmhjaUJZZFNBOUlHTnNZWE56SUdWNGRHVnVaSE1nVFhRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYmlsN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCdVpYY2dkV0VvZEN3Z05Dd2dNaWtzSUhJZ1BTQnVaWGNnVTI0b2V3b2dJQ0FnSUNBZ0lDQWdJQ0IzYVhKbFpuSmhiV1U2SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JtYjJjNklDRXhMQW9nSUNBZ0lDQWdJQ0FnSUNCMGIyNWxUV0Z3Y0dWa09pQWhNUW9nSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUhOMWNHVnlLR2tzSUhJcExDQjBhR2x6TG14cFoyaDBJRDBnWlN3Z2RHaHBjeTVqYjJ4dmNpQTlJRzRzSUhSb2FYTXVkSGx3WlNBOUlDSlFiMmx1ZEV4cFoyaDBTR1ZzY0dWeUlpd2dkR2hwY3k1dFlYUnlhWGdnUFNCMGFHbHpMbXhwWjJoMExtMWhkSEpwZUZkdmNteGtMQ0IwYUdsekxtMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ1BTQWhNU3dnZEdocGN5NTFjR1JoZEdVb0tUc0tJQ0FnSUgwS0lDQWdJR1JwYzNCdmMyVW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NW5aVzl0WlhSeWVTNWthWE53YjNObEtDa3NJSFJvYVhNdWJXRjBaWEpwWVd3dVpHbHpjRzl6WlNncE93b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbEtDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWJHbG5hSFF1ZFhCa1lYUmxWMjl5YkdSTllYUnlhWGdvSVRBc0lDRXhLU3dnZEdocGN5NWpiMnh2Y2lBaFBUMGdkbTlwWkNBd0lEOGdkR2hwY3k1dFlYUmxjbWxoYkM1amIyeHZjaTV6WlhRb2RHaHBjeTVqYjJ4dmNpa2dPaUIwYUdsekxtMWhkR1Z5YVdGc0xtTnZiRzl5TG1OdmNIa29kR2hwY3k1c2FXZG9kQzVqYjJ4dmNpazdDaUFnSUNCOUNuMHNJRUo0SUQwZ2JtVjNJRUVzSUhGMUlEMGdibVYzSUhCbExDQlpkU0E5SUc1bGR5QndaU3dnV25VZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVwbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0cGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0Nrc0lIUm9hWE11YkdsbmFIUWdQU0JsTENCMGFHbHpMbTFoZEhKcGVDQTlJR1V1YldGMGNtbDRWMjl5YkdRc0lIUm9hWE11YldGMGNtbDRRWFYwYjFWd1pHRjBaU0E5SUNFeExDQjBhR2x6TG1OdmJHOXlJRDBnYml3Z2RHaHBjeTUwZVhCbElEMGdJa2hsYldsemNHaGxjbVZNYVdkb2RFaGxiSEJsY2lJN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCdVpYY2dhR0VvZENrN0NpQWdJQ0FnSUNBZ2FTNXliM1JoZEdWWktFMWhkR2d1VUVrZ0tpQXVOU2tzSUhSb2FYTXViV0YwWlhKcFlXd2dQU0J1WlhjZ1UyNG9ld29nSUNBZ0lDQWdJQ0FnSUNCM2FYSmxabkpoYldVNklDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNCbWIyYzZJQ0V4TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBiMjVsVFdGd2NHVmtPaUFoTVFvZ0lDQWdJQ0FnSUgwcExDQjBhR2x6TG1OdmJHOXlJRDA5UFNCMmIybGtJREFnSmlZZ0tIUm9hWE11YldGMFpYSnBZV3d1ZG1WeWRHVjRRMjlzYjNKeklEMGdJVEFwT3dvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnYVM1blpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaWtzSUdFZ1BTQnVaWGNnUm14dllYUXpNa0Z5Y21GNUtISXVZMjkxYm5RZ0tpQXpLVHNLSUNBZ0lDQWdJQ0JwTG5ObGRFRjBkSEpwWW5WMFpTZ2lZMjlzYjNJaUxDQnVaWGNnWlhRb1lTd2dNeWtwTENCMGFHbHpMbUZrWkNodVpYY2dUWFFvYVN3Z2RHaHBjeTV0WVhSbGNtbGhiQ2twTENCMGFHbHpMblZ3WkdGMFpTZ3BPd29nSUNBZ2ZRb2dJQ0FnWkdsemNHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbU5vYVd4a2NtVnVXekJkTG1kbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTVqYUdsc1pISmxibHN3WFM1dFlYUmxjbWxoYkM1a2FYTndiM05sS0NrN0NpQWdJQ0I5Q2lBZ0lDQjFjR1JoZEdVb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG1Ob2FXeGtjbVZ1V3pCZE93b2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtTnZiRzl5SUNFOVBTQjJiMmxrSURBcElIUm9hWE11YldGMFpYSnBZV3d1WTI5c2IzSXVjMlYwS0hSb2FYTXVZMjlzYjNJcE93b2dJQ0FnSUNBZ0lHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZENBOUlHVXVaMlZ2YldWMGNua3VaMlYwUVhSMGNtbGlkWFJsS0NKamIyeHZjaUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnhkUzVqYjNCNUtIUm9hWE11YkdsbmFIUXVZMjlzYjNJcExDQlpkUzVqYjNCNUtIUm9hWE11YkdsbmFIUXVaM0p2ZFc1a1EyOXNiM0lwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3TENCcElEMGdkQzVqYjNWdWREc2diaUE4SUdrN0lHNHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJRzRnUENCcElDOGdNaUEvSUhGMUlEb2dXWFU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwTG5ObGRGaFpXaWh1TENCeUxuSXNJSEl1Wnl3Z2NpNWlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0IwTG01bFpXUnpWWEJrWVhSbElEMGdJVEE3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSb2FYTXViR2xuYUhRdWRYQmtZWFJsVjI5eWJHUk5ZWFJ5YVhnb0lUQXNJQ0V4S1N3Z1pTNXNiMjlyUVhRb1FuZ3VjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0hSb2FYTXViR2xuYUhRdWJXRjBjbWw0VjI5eWJHUXBMbTVsWjJGMFpTZ3BLVHNLSUNBZ0lIMEtmU3dnU25VZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdWdUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F4TUN3Z2RDQTlJREV3TENCdUlEMGdORFEzTXpreU5Dd2dhU0E5SURnNU5EYzRORGdwZXdvZ0lDQWdJQ0FnSUc0Z1BTQnVaWGNnY0dVb2Jpa3NJR2tnUFNCdVpYY2djR1VvYVNrN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCMElDOGdNaXdnWVNBOUlHVWdMeUIwTENCdklEMGdaU0F2SURJc0lHTWdQU0JiWFN3Z2JDQTlJRnRkT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWkNBOUlEQXNJR1lnUFNBd0xDQnRJRDBnTFc4N0lHUWdQRDBnZERzZ1pDc3JMQ0J0SUNzOUlHRXBld29nSUNBZ0lDQWdJQ0FnSUNCakxuQjFjMmdvTFc4c0lEQXNJRzBzSUc4c0lEQXNJRzBwTENCakxuQjFjMmdvYlN3Z01Dd2dMVzhzSUcwc0lEQXNJRzhwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWHlBOUlHUWdQVDA5SUhJZ1B5QnVJRG9nYVRzS0lDQWdJQ0FnSUNBZ0lDQWdYeTUwYjBGeWNtRjVLR3dzSUdZcExDQm1JQ3M5SURNc0lGOHVkRzlCY25KaGVTaHNMQ0JtS1N3Z1ppQXJQU0F6TENCZkxuUnZRWEp5WVhrb2JDd2daaWtzSUdZZ0t6MGdNeXdnWHk1MGIwRnljbUY1S0d3c0lHWXBMQ0JtSUNzOUlETTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCb0lEMGdibVYzSUVkbE93b2dJQ0FnSUNBZ0lHZ3VjMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJc0lHNWxkeUIyWlNoakxDQXpLU2tzSUdndWMyVjBRWFIwY21saWRYUmxLQ0pqYjJ4dmNpSXNJRzVsZHlCMlpTaHNMQ0F6S1NrN0NpQWdJQ0FnSUNBZ2JHVjBJSFVnUFNCdVpYY2dkM1FvZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJaWEowWlhoRGIyeHZjbk02SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0IwYjI1bFRXRndjR1ZrT2lBaE1Rb2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJSE4xY0dWeUtHZ3NJSFVwTENCMGFHbHpMblI1Y0dVZ1BTQWlSM0pwWkVobGJIQmxjaUk3Q2lBZ0lDQjlDaUFnSUNCa2FYTndiM05sS0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WjJWdmJXVjBjbmt1WkdsemNHOXpaU2dwTENCMGFHbHpMbTFoZEdWeWFXRnNMbVJwYzNCdmMyVW9LVHNLSUNBZ0lIMEtmU3dnSkhVZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdWdUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F4TUN3Z2RDQTlJREUyTENCdUlEMGdPQ3dnYVNBOUlEWTBMQ0J5SUQwZ05EUTNNemt5TkN3Z1lTQTlJRGc1TkRjNE5EZ3Bld29nSUNBZ0lDQWdJSElnUFNCdVpYY2djR1VvY2lrc0lHRWdQU0J1WlhjZ2NHVW9ZU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0JiWFN3Z1l5QTlJRnRkT3dvZ0lDQWdJQ0FnSUdsbUlDaDBJRDRnTVNrZ1ptOXlLR3hsZENCMUlEMGdNRHNnZFNBOElIUTdJSFVyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdkU0F2SUhRZ0tpQW9UV0YwYUM1UVNTQXFJRElwTENCbUlEMGdUV0YwYUM1emFXNG9aQ2tnS2lCbExDQnRJRDBnVFdGMGFDNWpiM01vWkNrZ0tpQmxPd29nSUNBZ0lDQWdJQ0FnSUNCdkxuQjFjMmdvTUN3Z01Dd2dNQ2tzSUc4dWNIVnphQ2htTENBd0xDQnRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRjhnUFNCMUlDWWdNU0EvSUhJZ09pQmhPd29nSUNBZ0lDQWdJQ0FnSUNCakxuQjFjMmdvWHk1eUxDQmZMbWNzSUY4dVlpa3NJR011Y0hWemFDaGZMbklzSUY4dVp5d2dYeTVpS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMUlEMGdNRHNnZFNBOElHNDdJSFVyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdkU0FtSURFZ1B5QnlJRG9nWVN3Z1ppQTlJR1VnTFNCbElDOGdiaUFxSUhVN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiU0E5SURBN0lHMGdQQ0JwT3lCdEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUY4Z1BTQnRJQzhnYVNBcUlDaE5ZWFJvTGxCSklDb2dNaWtzSUdjZ1BTQk5ZWFJvTG5OcGJpaGZLU0FxSUdZc0lIQWdQU0JOWVhSb0xtTnZjeWhmS1NBcUlHWTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZMbkIxYzJnb1p5d2dNQ3dnY0Nrc0lHTXVjSFZ6YUNoa0xuSXNJR1F1Wnl3Z1pDNWlLU3dnWHlBOUlDaHRJQ3NnTVNrZ0x5QnBJQ29nS0UxaGRHZ3VVRWtnS2lBeUtTd2daeUE5SUUxaGRHZ3VjMmx1S0Y4cElDb2daaXdnY0NBOUlFMWhkR2d1WTI5ektGOHBJQ29nWml3Z2J5NXdkWE5vS0djc0lEQXNJSEFwTENCakxuQjFjMmdvWkM1eUxDQmtMbWNzSUdRdVlpazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCdVpYY2dSMlU3Q2lBZ0lDQWdJQ0FnYkM1elpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaXdnYm1WM0lIWmxLRzhzSURNcEtTd2diQzV6WlhSQmRIUnlhV0oxZEdVb0ltTnZiRzl5SWl3Z2JtVjNJSFpsS0dNc0lETXBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJRzVsZHlCM2RDaDdDaUFnSUNBZ0lDQWdJQ0FnSUhabGNuUmxlRU52Ykc5eWN6b2dJVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUnZibVZOWVhCd1pXUTZJQ0V4Q2lBZ0lDQWdJQ0FnZlNrN0NpQWdJQ0FnSUNBZ2MzVndaWElvYkN3Z2FDa3NJSFJvYVhNdWRIbHdaU0E5SUNKUWIyeGhja2R5YVdSSVpXeHdaWElpT3dvZ0lDQWdmUW9nSUNBZ1pHbHpjRzl6WlNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1kbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTV0WVhSbGNtbGhiQzVrYVhOd2IzTmxLQ2s3Q2lBZ0lDQjlDbjBzSUV0MUlEMGdibVYzSUVFc0lFRnlJRDBnYm1WM0lFRXNJRkYxSUQwZ2JtVjNJRUVzSUdwMUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCS1pTQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG14cFoyaDBJRDBnWlN3Z2RHaHBjeTV0WVhSeWFYZ2dQU0JsTG0xaGRISnBlRmR2Y214a0xDQjBhR2x6TG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNBaE1Td2dkR2hwY3k1amIyeHZjaUE5SUc0c0lIUm9hWE11ZEhsd1pTQTlJQ0pFYVhKbFkzUnBiMjVoYkV4cFoyaDBTR1ZzY0dWeUlpd2dkQ0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaDBJRDBnTVNrN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCdVpYY2dSMlU3Q2lBZ0lDQWdJQ0FnYVM1elpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaXdnYm1WM0lIWmxLRnNLSUNBZ0lDQWdJQ0FnSUNBZ0xYUXNDaUFnSUNBZ0lDQWdJQ0FnSUhRc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUXNDaUFnSUNBZ0lDQWdJQ0FnSUhRc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUXNDaUFnSUNBZ0lDQWdJQ0FnSUMxMExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xYUXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQzEwTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBMQW9nSUNBZ0lDQWdJQ0FnSUNBd0NpQWdJQ0FnSUNBZ1hTd2dNeWtwT3dvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnYm1WM0lIZDBLSHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOW5PaUFoTVN3S0lDQWdJQ0FnSUNBZ0lDQWdkRzl1WlUxaGNIQmxaRG9nSVRFS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG14cFoyaDBVR3hoYm1VZ1BTQnVaWGNnWW00b2FTd2djaWtzSUhSb2FYTXVZV1JrS0hSb2FYTXViR2xuYUhSUWJHRnVaU2tzSUdrZ1BTQnVaWGNnUjJVc0lHa3VjMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJc0lHNWxkeUIyWlNoYkNpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFS0lDQWdJQ0FnSUNCZExDQXpLU2tzSUhSb2FYTXVkR0Z5WjJWMFRHbHVaU0E5SUc1bGR5QmliaWhwTENCeUtTd2dkR2hwY3k1aFpHUW9kR2hwY3k1MFlYSm5aWFJNYVc1bEtTd2dkR2hwY3k1MWNHUmhkR1VvS1RzS0lDQWdJSDBLSUNBZ0lHUnBjM0J2YzJVb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1c2FXZG9kRkJzWVc1bExtZGxiMjFsZEhKNUxtUnBjM0J2YzJVb0tTd2dkR2hwY3k1c2FXZG9kRkJzWVc1bExtMWhkR1Z5YVdGc0xtUnBjM0J2YzJVb0tTd2dkR2hwY3k1MFlYSm5aWFJNYVc1bExtZGxiMjFsZEhKNUxtUnBjM0J2YzJVb0tTd2dkR2hwY3k1MFlYSm5aWFJNYVc1bExtMWhkR1Z5YVdGc0xtUnBjM0J2YzJVb0tUc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpTZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxteHBaMmgwTG5Wd1pHRjBaVmR2Y214a1RXRjBjbWw0S0NFd0xDQWhNU2tzSUhSb2FYTXViR2xuYUhRdWRHRnlaMlYwTG5Wd1pHRjBaVmR2Y214a1RXRjBjbWw0S0NFd0xDQWhNU2tzSUV0MUxuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWgwYUdsekxteHBaMmgwTG0xaGRISnBlRmR2Y214a0tTd2dRWEl1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtIUm9hWE11YkdsbmFIUXVkR0Z5WjJWMExtMWhkSEpwZUZkdmNteGtLU3dnVVhVdWMzVmlWbVZqZEc5eWN5aEJjaXdnUzNVcExDQjBhR2x6TG14cFoyaDBVR3hoYm1VdWJHOXZhMEYwS0VGeUtTd2dkR2hwY3k1amIyeHZjaUFoUFQwZ2RtOXBaQ0F3SUQ4Z0tIUm9hWE11YkdsbmFIUlFiR0Z1WlM1dFlYUmxjbWxoYkM1amIyeHZjaTV6WlhRb2RHaHBjeTVqYjJ4dmNpa3NJSFJvYVhNdWRHRnlaMlYwVEdsdVpTNXRZWFJsY21saGJDNWpiMnh2Y2k1elpYUW9kR2hwY3k1amIyeHZjaWtwSURvZ0tIUm9hWE11YkdsbmFIUlFiR0Z1WlM1dFlYUmxjbWxoYkM1amIyeHZjaTVqYjNCNUtIUm9hWE11YkdsbmFIUXVZMjlzYjNJcExDQjBhR2x6TG5SaGNtZGxkRXhwYm1VdWJXRjBaWEpwWVd3dVkyOXNiM0l1WTI5d2VTaDBhR2x6TG14cFoyaDBMbU52Ykc5eUtTa3NJSFJvYVhNdWRHRnlaMlYwVEdsdVpTNXNiMjlyUVhRb1FYSXBMQ0IwYUdsekxuUmhjbWRsZEV4cGJtVXVjMk5oYkdVdWVpQTlJRkYxTG14bGJtZDBhQ2dwT3dvZ0lDQWdmUXA5TENCU2NpQTlJRzVsZHlCQkxDQnZkQ0E5SUc1bGR5QkRjeXdnWldRZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdWdUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJR3hsZENCMElEMGdibVYzSUVkbExDQnVJRDBnYm1WM0lIZDBLSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k2SURFMk56YzNNakUxTEFvZ0lDQWdJQ0FnSUNBZ0lDQjJaWEowWlhoRGIyeHZjbk02SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0IwYjI1bFRXRndjR1ZrT2lBaE1Rb2dJQ0FnSUNBZ0lIMHBMQ0JwSUQwZ1cxMHNJSElnUFNCYlhTd2dZU0E5SUh0OU93b2dJQ0FnSUNBZ0lHOG9JbTR4SWl3Z0ltNHlJaWtzSUc4b0ltNHlJaXdnSW00MElpa3NJRzhvSW00MElpd2dJbTR6SWlrc0lHOG9JbTR6SWl3Z0ltNHhJaWtzSUc4b0ltWXhJaXdnSW1ZeUlpa3NJRzhvSW1ZeUlpd2dJbVkwSWlrc0lHOG9JbVkwSWl3Z0ltWXpJaWtzSUc4b0ltWXpJaXdnSW1ZeElpa3NJRzhvSW00eElpd2dJbVl4SWlrc0lHOG9JbTR5SWl3Z0ltWXlJaWtzSUc4b0ltNHpJaXdnSW1Zeklpa3NJRzhvSW00MElpd2dJbVkwSWlrc0lHOG9JbkFpTENBaWJqRWlLU3dnYnlnaWNDSXNJQ0p1TWlJcExDQnZLQ0p3SWl3Z0ltNHpJaWtzSUc4b0luQWlMQ0FpYmpRaUtTd2dieWdpZFRFaUxDQWlkVElpS1N3Z2J5Z2lkVElpTENBaWRUTWlLU3dnYnlnaWRUTWlMQ0FpZFRFaUtTd2dieWdpWXlJc0lDSjBJaWtzSUc4b0luQWlMQ0FpWXlJcExDQnZLQ0pqYmpFaUxDQWlZMjR5SWlrc0lHOG9JbU51TXlJc0lDSmpialFpS1N3Z2J5Z2lZMll4SWl3Z0ltTm1NaUlwTENCdktDSmpaak1pTENBaVkyWTBJaWs3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYnlodExDQmZLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTW9iU2tzSUdNb1h5azdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR01vYlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwTG5CMWMyZ29NQ3dnTUN3Z01Da3NJSEl1Y0hWemFDZ3dMQ0F3TENBd0tTd2dZVnR0WFNBOVBUMGdkbTlwWkNBd0lDWW1JQ2hoVzIxZElEMGdXMTBwTENCaFcyMWRMbkIxYzJnb2FTNXNaVzVuZEdnZ0x5QXpJQzBnTVNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIUXVjMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJc0lHNWxkeUIyWlNocExDQXpLU2tzSUhRdWMyVjBRWFIwY21saWRYUmxLQ0pqYjJ4dmNpSXNJRzVsZHlCMlpTaHlMQ0F6S1Nrc0lITjFjR1Z5S0hRc0lHNHBMQ0IwYUdsekxuUjVjR1VnUFNBaVEyRnRaWEpoU0dWc2NHVnlJaXdnZEdocGN5NWpZVzFsY21FZ1BTQmxMQ0IwYUdsekxtTmhiV1Z5WVM1MWNHUmhkR1ZRY205cVpXTjBhVzl1VFdGMGNtbDRJQ1ltSUhSb2FYTXVZMkZ0WlhKaExuVndaR0YwWlZCeWIycGxZM1JwYjI1TllYUnlhWGdvS1N3Z2RHaHBjeTV0WVhSeWFYZ2dQU0JsTG0xaGRISnBlRmR2Y214a0xDQjBhR2x6TG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNBaE1Td2dkR2hwY3k1d2IybHVkRTFoY0NBOUlHRXNJSFJvYVhNdWRYQmtZWFJsS0NrN0NpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCdVpYY2djR1VvTVRZM05UVXlNREFwTENCb0lEMGdibVYzSUhCbEtERTJOekV4Tmpnd0tTd2dkU0E5SUc1bGR5QndaU2cwTXpjM05Ta3NJR1FnUFNCdVpYY2djR1VvTVRZM056Y3lNVFVwTENCbUlEMGdibVYzSUhCbEtETXpOVFUwTkRNcE93b2dJQ0FnSUNBZ0lIUm9hWE11YzJWMFEyOXNiM0p6S0d3c0lHZ3NJSFVzSUdRc0lHWXBPd29nSUNBZ2ZRb2dJQ0FnYzJWMFEyOXNiM0p6S0dVc0lIUXNJRzRzSUdrc0lISXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJSFJvYVhNdVoyVnZiV1YwY25rdVoyVjBRWFIwY21saWRYUmxLQ0pqYjJ4dmNpSXBPd29nSUNBZ0lDQWdJRzh1YzJWMFdGbGFLREFzSUdVdWNpd2daUzVuTENCbExtSXBMQ0J2TG5ObGRGaFpXaWd4TENCbExuSXNJR1V1Wnl3Z1pTNWlLU3dnYnk1elpYUllXVm9vTWl3Z1pTNXlMQ0JsTG1jc0lHVXVZaWtzSUc4dWMyVjBXRmxhS0RNc0lHVXVjaXdnWlM1bkxDQmxMbUlwTENCdkxuTmxkRmhaV2lnMExDQmxMbklzSUdVdVp5d2daUzVpS1N3Z2J5NXpaWFJZV1Zvb05Td2daUzV5TENCbExtY3NJR1V1WWlrc0lHOHVjMlYwV0ZsYUtEWXNJR1V1Y2l3Z1pTNW5MQ0JsTG1JcExDQnZMbk5sZEZoWldpZzNMQ0JsTG5Jc0lHVXVaeXdnWlM1aUtTd2dieTV6WlhSWVdWb29PQ3dnWlM1eUxDQmxMbWNzSUdVdVlpa3NJRzh1YzJWMFdGbGFLRGtzSUdVdWNpd2daUzVuTENCbExtSXBMQ0J2TG5ObGRGaFpXaWd4TUN3Z1pTNXlMQ0JsTG1jc0lHVXVZaWtzSUc4dWMyVjBXRmxhS0RFeExDQmxMbklzSUdVdVp5d2daUzVpS1N3Z2J5NXpaWFJZV1Zvb01USXNJR1V1Y2l3Z1pTNW5MQ0JsTG1JcExDQnZMbk5sZEZoWldpZ3hNeXdnWlM1eUxDQmxMbWNzSUdVdVlpa3NJRzh1YzJWMFdGbGFLREUwTENCbExuSXNJR1V1Wnl3Z1pTNWlLU3dnYnk1elpYUllXVm9vTVRVc0lHVXVjaXdnWlM1bkxDQmxMbUlwTENCdkxuTmxkRmhaV2lneE5pd2daUzV5TENCbExtY3NJR1V1WWlrc0lHOHVjMlYwV0ZsYUtERTNMQ0JsTG5Jc0lHVXVaeXdnWlM1aUtTd2dieTV6WlhSWVdWb29NVGdzSUdVdWNpd2daUzVuTENCbExtSXBMQ0J2TG5ObGRGaFpXaWd4T1N3Z1pTNXlMQ0JsTG1jc0lHVXVZaWtzSUc4dWMyVjBXRmxhS0RJd0xDQmxMbklzSUdVdVp5d2daUzVpS1N3Z2J5NXpaWFJZV1Zvb01qRXNJR1V1Y2l3Z1pTNW5MQ0JsTG1JcExDQnZMbk5sZEZoWldpZ3lNaXdnWlM1eUxDQmxMbWNzSUdVdVlpa3NJRzh1YzJWMFdGbGFLREl6TENCbExuSXNJR1V1Wnl3Z1pTNWlLU3dnYnk1elpYUllXVm9vTWpRc0lIUXVjaXdnZEM1bkxDQjBMbUlwTENCdkxuTmxkRmhaV2lneU5Td2dkQzV5TENCMExtY3NJSFF1WWlrc0lHOHVjMlYwV0ZsYUtESTJMQ0IwTG5Jc0lIUXVaeXdnZEM1aUtTd2dieTV6WlhSWVdWb29NamNzSUhRdWNpd2dkQzVuTENCMExtSXBMQ0J2TG5ObGRGaFpXaWd5T0N3Z2RDNXlMQ0IwTG1jc0lIUXVZaWtzSUc4dWMyVjBXRmxhS0RJNUxDQjBMbklzSUhRdVp5d2dkQzVpS1N3Z2J5NXpaWFJZV1Zvb016QXNJSFF1Y2l3Z2RDNW5MQ0IwTG1JcExDQnZMbk5sZEZoWldpZ3pNU3dnZEM1eUxDQjBMbWNzSUhRdVlpa3NJRzh1YzJWMFdGbGFLRE15TENCdUxuSXNJRzR1Wnl3Z2JpNWlLU3dnYnk1elpYUllXVm9vTXpNc0lHNHVjaXdnYmk1bkxDQnVMbUlwTENCdkxuTmxkRmhaV2lnek5Dd2diaTV5TENCdUxtY3NJRzR1WWlrc0lHOHVjMlYwV0ZsYUtETTFMQ0J1TG5Jc0lHNHVaeXdnYmk1aUtTd2dieTV6WlhSWVdWb29NellzSUc0dWNpd2diaTVuTENCdUxtSXBMQ0J2TG5ObGRGaFpXaWd6Tnl3Z2JpNXlMQ0J1TG1jc0lHNHVZaWtzSUc4dWMyVjBXRmxhS0RNNExDQnBMbklzSUdrdVp5d2dhUzVpS1N3Z2J5NXpaWFJZV1Zvb016a3NJR2t1Y2l3Z2FTNW5MQ0JwTG1JcExDQnZMbk5sZEZoWldpZzBNQ3dnY2k1eUxDQnlMbWNzSUhJdVlpa3NJRzh1YzJWMFdGbGFLRFF4TENCeUxuSXNJSEl1Wnl3Z2NpNWlLU3dnYnk1elpYUllXVm9vTkRJc0lISXVjaXdnY2k1bkxDQnlMbUlwTENCdkxuTmxkRmhaV2lnME15d2djaTV5TENCeUxtY3NJSEl1WWlrc0lHOHVjMlYwV0ZsYUtEUTBMQ0J5TG5Jc0lISXVaeXdnY2k1aUtTd2dieTV6WlhSWVdWb29ORFVzSUhJdWNpd2djaTVuTENCeUxtSXBMQ0J2TG5ObGRGaFpXaWcwTml3Z2NpNXlMQ0J5TG1jc0lISXVZaWtzSUc4dWMyVjBXRmxhS0RRM0xDQnlMbklzSUhJdVp5d2djaTVpS1N3Z2J5NXpaWFJZV1Zvb05EZ3NJSEl1Y2l3Z2NpNW5MQ0J5TG1JcExDQnZMbk5sZEZoWldpZzBPU3dnY2k1eUxDQnlMbWNzSUhJdVlpa3NJRzh1Ym1WbFpITlZjR1JoZEdVZ1BTQWhNRHNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaU2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVaMlZ2YldWMGNua3NJSFFnUFNCMGFHbHpMbkJ2YVc1MFRXRndMQ0J1SUQwZ01Td2dhU0E5SURFN0NpQWdJQ0FnSUNBZ2IzUXVjSEp2YW1WamRHbHZiazFoZEhKcGVFbHVkbVZ5YzJVdVkyOXdlU2gwYUdsekxtTmhiV1Z5WVM1d2NtOXFaV04wYVc5dVRXRjBjbWw0U1c1MlpYSnpaU2tzSUdoMEtDSmpJaXdnZEN3Z1pTd2diM1FzSURBc0lEQXNJQzB4S1N3Z2FIUW9JblFpTENCMExDQmxMQ0J2ZEN3Z01Dd2dNQ3dnTVNrc0lHaDBLQ0p1TVNJc0lIUXNJR1VzSUc5MExDQXRiaXdnTFdrc0lDMHhLU3dnYUhRb0ltNHlJaXdnZEN3Z1pTd2diM1FzSUc0c0lDMXBMQ0F0TVNrc0lHaDBLQ0p1TXlJc0lIUXNJR1VzSUc5MExDQXRiaXdnYVN3Z0xURXBMQ0JvZENnaWJqUWlMQ0IwTENCbExDQnZkQ3dnYml3Z2FTd2dMVEVwTENCb2RDZ2laakVpTENCMExDQmxMQ0J2ZEN3Z0xXNHNJQzFwTENBeEtTd2dhSFFvSW1ZeUlpd2dkQ3dnWlN3Z2IzUXNJRzRzSUMxcExDQXhLU3dnYUhRb0ltWXpJaXdnZEN3Z1pTd2diM1FzSUMxdUxDQnBMQ0F4S1N3Z2FIUW9JbVkwSWl3Z2RDd2daU3dnYjNRc0lHNHNJR2tzSURFcExDQm9kQ2dpZFRFaUxDQjBMQ0JsTENCdmRDd2diaUFxSUM0M0xDQnBJQ29nTVM0eExDQXRNU2tzSUdoMEtDSjFNaUlzSUhRc0lHVXNJRzkwTENBdGJpQXFJQzQzTENCcElDb2dNUzR4TENBdE1Ta3NJR2gwS0NKMU15SXNJSFFzSUdVc0lHOTBMQ0F3TENCcElDb2dNaXdnTFRFcExDQm9kQ2dpWTJZeElpd2dkQ3dnWlN3Z2IzUXNJQzF1TENBd0xDQXhLU3dnYUhRb0ltTm1NaUlzSUhRc0lHVXNJRzkwTENCdUxDQXdMQ0F4S1N3Z2FIUW9JbU5tTXlJc0lIUXNJR1VzSUc5MExDQXdMQ0F0YVN3Z01Ta3NJR2gwS0NKalpqUWlMQ0IwTENCbExDQnZkQ3dnTUN3Z2FTd2dNU2tzSUdoMEtDSmpiakVpTENCMExDQmxMQ0J2ZEN3Z0xXNHNJREFzSUMweEtTd2dhSFFvSW1OdU1pSXNJSFFzSUdVc0lHOTBMQ0J1TENBd0xDQXRNU2tzSUdoMEtDSmpiak1pTENCMExDQmxMQ0J2ZEN3Z01Dd2dMV2tzSUMweEtTd2dhSFFvSW1OdU5DSXNJSFFzSUdVc0lHOTBMQ0F3TENCcExDQXRNU2tzSUdVdVoyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlwTG01bFpXUnpWWEJrWVhSbElEMGdJVEE3Q2lBZ0lDQjlDaUFnSUNCa2FYTndiM05sS0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WjJWdmJXVjBjbmt1WkdsemNHOXpaU2dwTENCMGFHbHpMbTFoZEdWeWFXRnNMbVJwYzNCdmMyVW9LVHNLSUNBZ0lIMEtmVHNLWm5WdVkzUnBiMjRnYUhRb2N6RXNJR1VzSUhRc0lHNHNJR2tzSUhJc0lHRXBJSHNLSUNBZ0lGSnlMbk5sZENocExDQnlMQ0JoS1M1MWJuQnliMnBsWTNRb2JpazdDaUFnSUNCc1pYUWdieUE5SUdWYmN6RmRPd29nSUNBZ2FXWWdLRzhnSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ2RDNW5aWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWlrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCc0lEMGdNQ3dnYUNBOUlHOHViR1Z1WjNSb095QnNJRHdnYURzZ2JDc3JLV011YzJWMFdGbGFLRzliYkYwc0lGSnlMbmdzSUZKeUxua3NJRkp5TG5vcE93b2dJQ0FnZlFwOUNuWmhjaUJEY2lBOUlHNWxkeUJSZEN3Z2RHUWdQU0JqYkdGemN5QmxlSFJsYm1SeklHVnVJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRZ1BTQXhOamMzTmprMk1DbDdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQnVaWGNnVldsdWRERTJRWEp5WVhrb1d3b2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F5TEFvZ0lDQWdJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJQ0FnSUNBekxBb2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBMExBb2dJQ0FnSUNBZ0lDQWdJQ0ExTEFvZ0lDQWdJQ0FnSUNBZ0lDQTFMQW9nSUNBZ0lDQWdJQ0FnSUNBMkxBb2dJQ0FnSUNBZ0lDQWdJQ0EyTEFvZ0lDQWdJQ0FnSUNBZ0lDQTNMQW9nSUNBZ0lDQWdJQ0FnSUNBM0xBb2dJQ0FnSUNBZ0lDQWdJQ0EwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBMExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQTFMQW9nSUNBZ0lDQWdJQ0FnSUNBeUxBb2dJQ0FnSUNBZ0lDQWdJQ0EyTEFvZ0lDQWdJQ0FnSUNBZ0lDQXpMQW9nSUNBZ0lDQWdJQ0FnSUNBM0NpQWdJQ0FnSUNBZ1hTa3NJR2tnUFNCdVpYY2dSbXh2WVhRek1rRnljbUY1S0RnZ0tpQXpLU3dnY2lBOUlHNWxkeUJIWlRzS0lDQWdJQ0FnSUNCeUxuTmxkRWx1WkdWNEtHNWxkeUJsZENodUxDQXhLU2tzSUhJdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QmxkQ2hwTENBektTa3NJSE4xY0dWeUtISXNJRzVsZHlCM2RDaDdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUIwTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBiMjVsVFdGd2NHVmtPaUFoTVFvZ0lDQWdJQ0FnSUgwcEtTd2dkR2hwY3k1dlltcGxZM1FnUFNCbExDQjBhR2x6TG5SNWNHVWdQU0FpUW05NFNHVnNjR1Z5SWl3Z2RHaHBjeTV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnSVRFc0lIUm9hWE11ZFhCa1lYUmxLQ2s3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hsSUNFOVBTQjJiMmxrSURBZ0ppWWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVDYjNoSVpXeHdaWEk2SUM1MWNHUmhkR1VvS1NCb1lYTWdibThnYkc5dVoyVnlJR0Z5WjNWdFpXNTBjeTRpS1N3Z2RHaHBjeTV2WW1wbFkzUWdJVDA5SUhadmFXUWdNQ0FtSmlCRGNpNXpaWFJHY205dFQySnFaV04wS0hSb2FYTXViMkpxWldOMEtTd2dRM0l1YVhORmJYQjBlU2dwS1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JEY2k1dGFXNHNJRzRnUFNCRGNpNXRZWGdzSUdrZ1BTQjBhR2x6TG1kbGIyMWxkSEo1TG1GMGRISnBZblYwWlhNdWNHOXphWFJwYjI0c0lISWdQU0JwTG1GeWNtRjVPd29nSUNBZ0lDQWdJSEpiTUYwZ1BTQnVMbmdzSUhKYk1WMGdQU0J1TG5rc0lISmJNbDBnUFNCdUxub3NJSEpiTTEwZ1BTQjBMbmdzSUhKYk5GMGdQU0J1TG5rc0lISmJOVjBnUFNCdUxub3NJSEpiTmwwZ1BTQjBMbmdzSUhKYk4xMGdQU0IwTG5rc0lISmJPRjBnUFNCdUxub3NJSEpiT1YwZ1BTQnVMbmdzSUhKYk1UQmRJRDBnZEM1NUxDQnlXekV4WFNBOUlHNHVlaXdnY2xzeE1sMGdQU0J1TG5nc0lISmJNVE5kSUQwZ2JpNTVMQ0J5V3pFMFhTQTlJSFF1ZWl3Z2Nsc3hOVjBnUFNCMExuZ3NJSEpiTVRaZElEMGdiaTU1TENCeVd6RTNYU0E5SUhRdWVpd2djbHN4T0YwZ1BTQjBMbmdzSUhKYk1UbGRJRDBnZEM1NUxDQnlXekl3WFNBOUlIUXVlaXdnY2xzeU1WMGdQU0J1TG5nc0lISmJNakpkSUQwZ2RDNTVMQ0J5V3pJelhTQTlJSFF1ZWl3Z2FTNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQjBhR2x6TG1kbGIyMWxkSEo1TG1OdmJYQjFkR1ZDYjNWdVpHbHVaMU53YUdWeVpTZ3BPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVTlpYW1WamRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWIySnFaV04wSUQwZ1pTd2dkR2hwY3k1MWNHUmhkR1VvS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXNJSFFwTENCMGFHbHpMbTlpYW1WamRDQTlJR1V1YjJKcVpXTjBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaR2x6Y0c5elpTZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtZGxiMjFsZEhKNUxtUnBjM0J2YzJVb0tTd2dkR2hwY3k1dFlYUmxjbWxoYkM1a2FYTndiM05sS0NrN0NpQWdJQ0I5Q24wc0lHNWtJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmxiaUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMElEMGdNVFkzTnpZNU5qQXBld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdibVYzSUZWcGJuUXhOa0Z5Y21GNUtGc0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTWl3S0lDQWdJQ0FnSUNBZ0lDQWdNaXdLSUNBZ0lDQWdJQ0FnSUNBZ015d0tJQ0FnSUNBZ0lDQWdJQ0FnTXl3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ05Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTlN3S0lDQWdJQ0FnSUNBZ0lDQWdOU3dLSUNBZ0lDQWdJQ0FnSUNBZ05pd0tJQ0FnSUNBZ0lDQWdJQ0FnTml3S0lDQWdJQ0FnSUNBZ0lDQWdOeXdLSUNBZ0lDQWdJQ0FnSUNBZ055d0tJQ0FnSUNBZ0lDQWdJQ0FnTkN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ05Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdOU3dLSUNBZ0lDQWdJQ0FnSUNBZ01pd0tJQ0FnSUNBZ0lDQWdJQ0FnTml3S0lDQWdJQ0FnSUNBZ0lDQWdNeXdLSUNBZ0lDQWdJQ0FnSUNBZ053b2dJQ0FnSUNBZ0lGMHBMQ0JwSUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhDaUFnSUNBZ0lDQWdYU3dnY2lBOUlHNWxkeUJIWlRzS0lDQWdJQ0FnSUNCeUxuTmxkRWx1WkdWNEtHNWxkeUJsZENodUxDQXhLU2tzSUhJdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QjJaU2hwTENBektTa3NJSE4xY0dWeUtISXNJRzVsZHlCM2RDaDdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUIwTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBiMjVsVFdGd2NHVmtPaUFoTVFvZ0lDQWdJQ0FnSUgwcEtTd2dkR2hwY3k1aWIzZ2dQU0JsTENCMGFHbHpMblI1Y0dVZ1BTQWlRbTk0TTBobGJIQmxjaUlzSUhSb2FYTXVaMlZ2YldWMGNua3VZMjl0Y0hWMFpVSnZkVzVrYVc1blUzQm9aWEpsS0NrN0NpQWdJQ0I5Q2lBZ0lDQjFjR1JoZEdWTllYUnlhWGhYYjNKc1pDaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxtSnZlRHNLSUNBZ0lDQWdJQ0IwTG1selJXMXdkSGtvS1NCOGZDQW9kQzVuWlhSRFpXNTBaWElvZEdocGN5NXdiM05wZEdsdmJpa3NJSFF1WjJWMFUybDZaU2gwYUdsekxuTmpZV3hsS1N3Z2RHaHBjeTV6WTJGc1pTNXRkV3gwYVhCc2VWTmpZV3hoY2lndU5Ta3NJSE4xY0dWeUxuVndaR0YwWlUxaGRISnBlRmR2Y214a0tHVXBLVHNLSUNBZ0lIMEtJQ0FnSUdScGMzQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVuWlc5dFpYUnllUzVrYVhOd2IzTmxLQ2tzSUhSb2FYTXViV0YwWlhKcFlXd3VaR2x6Y0c5elpTZ3BPd29nSUNBZ2ZRcDlMQ0JwWkNBOUlHTnNZWE56SUdWNGRHVnVaSE1nWW00Z2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ0E5SURFc0lHNGdQU0F4TmpjM05qazJNQ2w3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0J1TENCeUlEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQUtJQ0FnSUNBZ0lDQmRMQ0JoSUQwZ2JtVjNJRWRsT3dvZ0lDQWdJQ0FnSUdFdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QjJaU2h5TENBektTa3NJR0V1WTI5dGNIVjBaVUp2ZFc1a2FXNW5VM0JvWlhKbEtDa3NJSE4xY0dWeUtHRXNJRzVsZHlCM2RDaDdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUJwTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBiMjVsVFdGd2NHVmtPaUFoTVFvZ0lDQWdJQ0FnSUgwcEtTd2dkR2hwY3k1MGVYQmxJRDBnSWxCc1lXNWxTR1ZzY0dWeUlpd2dkR2hwY3k1d2JHRnVaU0E5SUdVc0lIUm9hWE11YzJsNlpTQTlJSFE3Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQUtJQ0FnSUNBZ0lDQmRMQ0JqSUQwZ2JtVjNJRWRsT3dvZ0lDQWdJQ0FnSUdNdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QjJaU2h2TENBektTa3NJR011WTI5dGNIVjBaVUp2ZFc1a2FXNW5VM0JvWlhKbEtDa3NJSFJvYVhNdVlXUmtLRzVsZHlCTmRDaGpMQ0J1WlhjZ1UyNG9ld29nSUNBZ0lDQWdJQ0FnSUNCamIyeHZjam9nYVN3S0lDQWdJQ0FnSUNBZ0lDQWdiM0JoWTJsMGVUb2dMaklzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Y0dGeVpXNTBPaUFoTUN3S0lDQWdJQ0FnSUNBZ0lDQWdaR1Z3ZEdoWGNtbDBaVG9nSVRFc0NpQWdJQ0FnSUNBZ0lDQWdJSFJ2Ym1WTllYQndaV1E2SUNFeENpQWdJQ0FnSUNBZ2ZTa3BLVHNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaVTFoZEhKcGVGZHZjbXhrS0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5CdmMybDBhVzl1TG5ObGRDZ3dMQ0F3TENBd0tTd2dkR2hwY3k1elkyRnNaUzV6WlhRb0xqVWdLaUIwYUdsekxuTnBlbVVzSUM0MUlDb2dkR2hwY3k1emFYcGxMQ0F4S1N3Z2RHaHBjeTVzYjI5clFYUW9kR2hwY3k1d2JHRnVaUzV1YjNKdFlXd3BMQ0IwYUdsekxuUnlZVzV6YkdGMFpWb29MWFJvYVhNdWNHeGhibVV1WTI5dWMzUmhiblFwTENCemRYQmxjaTUxY0dSaGRHVk5ZWFJ5YVhoWGIzSnNaQ2hsS1RzS0lDQWdJSDBLSUNBZ0lHUnBjM0J2YzJVb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1blpXOXRaWFJ5ZVM1a2FYTndiM05sS0Nrc0lIUm9hWE11YldGMFpYSnBZV3d1WkdsemNHOXpaU2dwTENCMGFHbHpMbU5vYVd4a2NtVnVXekJkTG1kbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTVqYUdsc1pISmxibHN3WFM1dFlYUmxjbWxoYkM1a2FYTndiM05sS0NrN0NpQWdJQ0I5Q24wc0lITmtJRDBnYm1WM0lFRXNJRkJ5TENCb2J5d2djbVFnUFNCamJHRnpjeUJsZUhSbGJtUnpJRXBsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnUVNnd0xDQXdMQ0F4S1N3Z2RDQTlJRzVsZHlCQktEQXNJREFzSURBcExDQnVJRDBnTVN3Z2FTQTlJREUyTnpjMk9UWXdMQ0J5SUQwZ2JpQXFJQzR5TENCaElEMGdjaUFxSUM0eUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncExDQjBhR2x6TG5SNWNHVWdQU0FpUVhKeWIzZElaV3h3WlhJaUxDQlFjaUE5UFQwZ2RtOXBaQ0F3SUNZbUlDaFFjaUE5SUc1bGR5QkhaU3dnVUhJdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QjJaU2hiQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFLSUNBZ0lDQWdJQ0JkTENBektTa3NJR2h2SUQwZ2JtVjNJRTV6S0RBc0lDNDFMQ0F4TENBMUxDQXhLU3dnYUc4dWRISmhibk5zWVhSbEtEQXNJQzB1TlN3Z01Da3BMQ0IwYUdsekxuQnZjMmwwYVc5dUxtTnZjSGtvZENrc0lIUm9hWE11YkdsdVpTQTlJRzVsZHlCaWJpaFFjaXdnYm1WM0lIZDBLSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k2SUdrc0NpQWdJQ0FnSUNBZ0lDQWdJSFJ2Ym1WTllYQndaV1E2SUNFeENpQWdJQ0FnSUNBZ2ZTa3BMQ0IwYUdsekxteHBibVV1YldGMGNtbDRRWFYwYjFWd1pHRjBaU0E5SUNFeExDQjBhR2x6TG1Ga1pDaDBhR2x6TG14cGJtVXBMQ0IwYUdsekxtTnZibVVnUFNCdVpYY2dUWFFvYUc4c0lHNWxkeUJUYmloN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9pQnBMQW9nSUNBZ0lDQWdJQ0FnSUNCMGIyNWxUV0Z3Y0dWa09pQWhNUW9nSUNBZ0lDQWdJSDBwS1N3Z2RHaHBjeTVqYjI1bExtMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ1BTQWhNU3dnZEdocGN5NWhaR1FvZEdocGN5NWpiMjVsS1N3Z2RHaHBjeTV6WlhSRWFYSmxZM1JwYjI0b1pTa3NJSFJvYVhNdWMyVjBUR1Z1WjNSb0tHNHNJSElzSUdFcE93b2dJQ0FnZlFvZ0lDQWdjMlYwUkdseVpXTjBhVzl1S0dVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvWlM1NUlENGdMams1T1RrNUtTQjBhR2x6TG5GMVlYUmxjbTVwYjI0dWMyVjBLREFzSURBc0lEQXNJREVwT3dvZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0dVdWVTQThJQzB1T1RrNU9Ua3BJSFJvYVhNdWNYVmhkR1Z5Ym1sdmJpNXpaWFFvTVN3Z01Dd2dNQ3dnTUNrN0NpQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lITmtMbk5sZENobExub3NJREFzSUMxbExuZ3BMbTV2Y20xaGJHbDZaU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZENBOUlFMWhkR2d1WVdOdmN5aGxMbmtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5GMVlYUmxjbTVwYjI0dWMyVjBSbkp2YlVGNGFYTkJibWRzWlNoelpDd2dkQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ2MyVjBUR1Z1WjNSb0tHVXNJSFFnUFNCbElDb2dMaklzSUc0Z1BTQjBJQ29nTGpJcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG14cGJtVXVjMk5oYkdVdWMyVjBLREVzSUUxaGRHZ3ViV0Y0S0RGbExUUXNJR1VnTFNCMEtTd2dNU2tzSUhSb2FYTXViR2x1WlM1MWNHUmhkR1ZOWVhSeWFYZ29LU3dnZEdocGN5NWpiMjVsTG5OallXeGxMbk5sZENodUxDQjBMQ0J1S1N3Z2RHaHBjeTVqYjI1bExuQnZjMmwwYVc5dUxua2dQU0JsTENCMGFHbHpMbU52Ym1VdWRYQmtZWFJsVFdGMGNtbDRLQ2s3Q2lBZ0lDQjlDaUFnSUNCelpYUkRiMnh2Y2lobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1c2FXNWxMbTFoZEdWeWFXRnNMbU52Ykc5eUxuTmxkQ2hsS1N3Z2RHaHBjeTVqYjI1bExtMWhkR1Z5YVdGc0xtTnZiRzl5TG5ObGRDaGxLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVc0lDRXhLU3dnZEdocGN5NXNhVzVsTG1OdmNIa29aUzVzYVc1bEtTd2dkR2hwY3k1amIyNWxMbU52Y0hrb1pTNWpiMjVsS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdScGMzQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVzYVc1bExtZGxiMjFsZEhKNUxtUnBjM0J2YzJVb0tTd2dkR2hwY3k1c2FXNWxMbTFoZEdWeWFXRnNMbVJwYzNCdmMyVW9LU3dnZEdocGN5NWpiMjVsTG1kbGIyMWxkSEo1TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTVqYjI1bExtMWhkR1Z5YVdGc0xtUnBjM0J2YzJVb0tUc0tJQ0FnSUgwS2ZTd2dZV1FnUFNCamJHRnpjeUJsZUhSbGJtUnpJR1Z1SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhLWHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnWlN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdaUW9nSUNBZ0lDQWdJRjBzSUc0Z1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJQzQyTEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBdU5pd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTGpZc0NpQWdJQ0FnSUNBZ0lDQWdJREVLSUNBZ0lDQWdJQ0JkTENCcElEMGdibVYzSUVkbE93b2dJQ0FnSUNBZ0lHa3VjMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJc0lHNWxkeUIyWlNoMExDQXpLU2tzSUdrdWMyVjBRWFIwY21saWRYUmxLQ0pqYjJ4dmNpSXNJRzVsZHlCMlpTaHVMQ0F6S1NrN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCdVpYY2dkM1FvZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJaWEowWlhoRGIyeHZjbk02SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0IwYjI1bFRXRndjR1ZrT2lBaE1Rb2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJSE4xY0dWeUtHa3NJSElwTENCMGFHbHpMblI1Y0dVZ1BTQWlRWGhsYzBobGJIQmxjaUk3Q2lBZ0lDQjlDaUFnSUNCelpYUkRiMnh2Y25Nb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ2JtVjNJSEJsTENCeUlEMGdkR2hwY3k1blpXOXRaWFJ5ZVM1aGRIUnlhV0oxZEdWekxtTnZiRzl5TG1GeWNtRjVPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnBMbk5sZENobEtTd2dhUzUwYjBGeWNtRjVLSElzSURBcExDQnBMblJ2UVhKeVlYa29jaXdnTXlrc0lHa3VjMlYwS0hRcExDQnBMblJ2UVhKeVlYa29jaXdnTmlrc0lHa3VkRzlCY25KaGVTaHlMQ0E1S1N3Z2FTNXpaWFFvYmlrc0lHa3VkRzlCY25KaGVTaHlMQ0F4TWlrc0lHa3VkRzlCY25KaGVTaHlMQ0F4TlNrc0lIUm9hWE11WjJWdmJXVjBjbmt1WVhSMGNtbGlkWFJsY3k1amIyeHZjaTV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaR2x6Y0c5elpTZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtZGxiMjFsZEhKNUxtUnBjM0J2YzJVb0tTd2dkR2hwY3k1dFlYUmxjbWxoYkM1a2FYTndiM05sS0NrN0NpQWdJQ0I5Q24wc0lHOWtJRDBnWTJ4aGMzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LWHNLSUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNBaVUyaGhjR1ZRWVhSb0lpd2dkR2hwY3k1amIyeHZjaUE5SUc1bGR5QndaU3dnZEdocGN5NXpkV0pRWVhSb2N5QTlJRnRkTENCMGFHbHpMbU4xY25KbGJuUlFZWFJvSUQwZ2JuVnNiRHNLSUNBZ0lIMEtJQ0FnSUcxdmRtVlVieWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNWeWNtVnVkRkJoZEdnZ1BTQnVaWGNnYW1rc0lIUm9hWE11YzNWaVVHRjBhSE11Y0hWemFDaDBhR2x6TG1OMWNuSmxiblJRWVhSb0tTd2dkR2hwY3k1amRYSnlaVzUwVUdGMGFDNXRiM1psVkc4b1pTd2dkQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JzYVc1bFZHOG9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU4xY25KbGJuUlFZWFJvTG14cGJtVlVieWhsTENCMEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIRjFZV1J5WVhScFkwTjFjblpsVkc4b1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OMWNuSmxiblJRWVhSb0xuRjFZV1J5WVhScFkwTjFjblpsVkc4b1pTd2dkQ3dnYml3Z2FTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmlaWHBwWlhKRGRYSjJaVlJ2S0dVc0lIUXNJRzRzSUdrc0lISXNJR0VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpkWEp5Wlc1MFVHRjBhQzVpWlhwcFpYSkRkWEoyWlZSdktHVXNJSFFzSUc0c0lHa3NJSElzSUdFcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MzQnNhVzVsVkdoeWRTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzVnljbVZ1ZEZCaGRHZ3VjM0JzYVc1bFZHaHlkU2hsS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlUyaGhjR1Z6S0dVcElIc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQjBLSEFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhZZ1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCNElEMGdNQ3dnZVNBOUlIQXViR1Z1WjNSb095QjRJRHdnZVRzZ2VDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaUlEMGdjRnQ0WFN3Z2R5QTlJRzVsZHlCR2Jqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIY3VZM1Z5ZG1WeklEMGdZaTVqZFhKMlpYTXNJSFl1Y0hWemFDaDNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkanNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYmlod0xDQjJLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0I0SUQwZ2RpNXNaVzVuZEdnc0lIa2dQU0FoTVRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmlJRDBnZUNBdElERXNJSGNnUFNBd095QjNJRHdnZURzZ1lpQTlJSGNyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdVaUE5SUhaYllsMHNJRWtnUFNCMlczZGRMQ0JOSUQwZ1NTNTRJQzBnVWk1NExDQlVJRDBnU1M1NUlDMGdVaTU1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFMWhkR2d1WVdKektGUXBJRDRnVG5WdFltVnlMa1ZRVTBsTVQwNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9WQ0E4SURBZ0ppWWdLRklnUFNCMlczZGRMQ0JOSUQwZ0xVMHNJRWtnUFNCMlcySmRMQ0JVSUQwZ0xWUXBMQ0J3TG5rZ1BDQlNMbmtnZkh3Z2NDNTVJRDRnU1M1NUtTQmpiMjUwYVc1MVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NDNTVJRDA5UFNCU0xua3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hBdWVDQTlQVDBnVWk1NEtTQnlaWFIxY200Z0lUQTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUU4Z1BTQlVJQ29nS0hBdWVDQXRJRkl1ZUNrZ0xTQk5JQ29nS0hBdWVTQXRJRkl1ZVNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaFBJRDA5UFNBd0tTQnlaWFIxY200Z0lUQTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hQSUR3Z01Da2dZMjl1ZEdsdWRXVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIa2dQU0FoZVRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod0xua2dJVDA5SUZJdWVTa2dZMjl1ZEdsdWRXVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFa3VlQ0E4UFNCd0xuZ2dKaVlnY0M1NElEdzlJRkl1ZUNCOGZDQlNMbmdnUEQwZ2NDNTRJQ1ltSUhBdWVDQThQU0JKTG5ncElISmxkSFZ5YmlBaE1Ec0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2VUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQjViaTVwYzBOc2IyTnJWMmx6WlN3Z2NpQTlJSFJvYVhNdWMzVmlVR0YwYUhNN0NpQWdJQ0FnSUNBZ2FXWWdLSEl1YkdWdVozUm9JRDA5UFNBd0tTQnlaWFIxY200Z1cxMDdDaUFnSUNBZ0lDQWdiR1YwSUdFc0lHOHNJR01zSUd3Z1BTQmJYVHNLSUNBZ0lDQWdJQ0JwWmlBb2NpNXNaVzVuZEdnZ1BUMDlJREVwSUhKbGRIVnliaUJ2SUQwZ2Nsc3dYU3dnWXlBOUlHNWxkeUJHYml3Z1l5NWpkWEoyWlhNZ1BTQnZMbU4xY25abGN5d2diQzV3ZFhOb0tHTXBMQ0JzT3dvZ0lDQWdJQ0FnSUd4bGRDQm9JRDBnSVdrb2Nsc3dYUzVuWlhSUWIybHVkSE1vS1NrN0NpQWdJQ0FnSUNBZ2FDQTlJR1VnUHlBaGFDQTZJR2c3Q2lBZ0lDQWdJQ0FnYkdWMElIVWdQU0JiWFN3Z1pDQTlJRnRkTENCbUlEMGdXMTBzSUcwZ1BTQXdMQ0JmT3dvZ0lDQWdJQ0FnSUdSYmJWMGdQU0IyYjJsa0lEQXNJR1piYlYwZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSEFnUFNBd0xDQjJJRDBnY2k1c1pXNW5kR2c3SUhBZ1BDQjJPeUJ3S3lzcGJ5QTlJSEpiY0Ywc0lGOGdQU0J2TG1kbGRGQnZhVzUwY3lncExDQmhJRDBnYVNoZktTd2dZU0E5SUdVZ1B5QWhZU0E2SUdFc0lHRWdQeUFvSVdnZ0ppWWdaRnR0WFNBbUppQnRLeXNzSUdSYmJWMGdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lITTZJRzVsZHlCR2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnY0RvZ1h3b2dJQ0FnSUNBZ0lIMHNJR1JiYlYwdWN5NWpkWEoyWlhNZ1BTQnZMbU4xY25abGN5d2dhQ0FtSmlCdEt5c3NJR1piYlYwZ1BTQmJYU2tnT2lCbVcyMWRMbkIxYzJnb2V3b2dJQ0FnSUNBZ0lDQWdJQ0JvT2lCdkxBb2dJQ0FnSUNBZ0lDQWdJQ0J3T2lCZld6QmRDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tDRmtXekJkS1NCeVpYUjFjbTRnZENoeUtUc0tJQ0FnSUNBZ0lDQnBaaUFvWkM1c1pXNW5kR2dnUGlBeEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQndJRDBnSVRFc0lIWWdQU0F3T3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIZ2dQU0F3TENCNUlEMGdaQzVzWlc1bmRHZzdJSGdnUENCNU95QjRLeXNwZFZ0NFhTQTlJRnRkT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIZ2dQU0F3TENCNUlEMGdaQzVzWlc1bmRHZzdJSGdnUENCNU95QjRLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHSWdQU0JtVzNoZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCM0lEMGdNRHNnZHlBOElHSXViR1Z1WjNSb095QjNLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JTSUQwZ1lsdDNYU3dnU1NBOUlDRXdPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnVFNBOUlEQTdJRTBnUENCa0xteGxibWQwYURzZ1RTc3JLVzRvVWk1d0xDQmtXMDFkTG5BcElDWW1JQ2g0SUNFOVBTQk5JQ1ltSUhZckt5d2dTU0EvSUNoSklEMGdJVEVzSUhWYlRWMHVjSFZ6YUNoU0tTa2dPaUJ3SUQwZ0lUQXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVrZ0ppWWdkVnQ0WFM1d2RYTm9LRklwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUhZZ1BpQXdJQ1ltSUhBZ1BUMDlJQ0V4SUNZbUlDaG1JRDBnZFNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JuT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY0NBOUlEQXNJSFlnUFNCa0xteGxibWQwYURzZ2NDQThJSFk3SUhBckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUdNZ1BTQmtXM0JkTG5Nc0lHd3VjSFZ6YUNoaktTd2daeUE5SUdaYmNGMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZUNBOUlEQXNJSGtnUFNCbkxteGxibWQwYURzZ2VDQThJSGs3SUhnckt5bGpMbWh2YkdWekxuQjFjMmdvWjF0NFhTNW9LVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR3c3Q2lBZ0lDQjlDbjA3Q25SNWNHVnZaaUJmWDFSSVVrVkZYMFJGVmxSUFQweFRYMThnUENBaWRTSWdKaVlnWDE5VVNGSkZSVjlFUlZaVVQwOU1VMTlmTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDSnlaV2RwYzNSbGNpSXNJSHNLSUNBZ0lHUmxkR0ZwYkRvZ2V3b2dJQ0FnSUNBZ0lISmxkbWx6YVc5dU9pQklZd29nSUNBZ2ZRcDlLU2s3Q25SNWNHVnZaaUIzYVc1a2IzY2dQQ0FpZFNJZ0ppWWdLSGRwYm1SdmR5NWZYMVJJVWtWRlgxOGdQeUJqYjI1emIyeGxMbmRoY200b0lsZEJVazVKVGtjNklFMTFiSFJwY0d4bElHbHVjM1JoYm1ObGN5QnZaaUJVYUhKbFpTNXFjeUJpWldsdVp5QnBiWEJ2Y25SbFpDNGlLU0E2SUhkcGJtUnZkeTVmWDFSSVVrVkZYMThnUFNCSVl5azdDbU52Ym5OMElHMXZaQ0E5SUhzS0lDQWdJRUZEUlZOR2FXeHRhV05VYjI1bFRXRndjR2x1WnpvZ2JXWXNDaUFnSUNCQlpHUkZjWFZoZEdsdmJqb2dRbWtzQ2lBZ0lDQkJaR1JQY0dWeVlYUnBiMjQ2SUhWbUxBb2dJQ0FnUVdSa2FYUnBkbVZCYm1sdFlYUnBiMjVDYkdWdVpFMXZaR1U2SUhoa0xBb2dJQ0FnUVdSa2FYUnBkbVZDYkdWdVpHbHVaem9nWVd3c0NpQWdJQ0JCYkhCb1lVWnZjbTFoZERvZ2RtWXNDaUFnSUNCQmJIZGhlWE5EYjIxd1lYSmxPaUJXWml3S0lDQWdJRUZzZDJGNWMwUmxjSFJvT2lCelppd0tJQ0FnSUVGc2QyRjVjMU4wWlc1amFXeEdkVzVqT2lCSlppd0tJQ0FnSUVGdFltbGxiblJNYVdkb2REb2dRMk1zQ2lBZ0lDQkJibWx0WVhScGIyNUJZM1JwYjI0NklGWmpMQW9nSUNBZ1FXNXBiV0YwYVc5dVEyeHBjRG9nYVhNc0NpQWdJQ0JCYm1sdFlYUnBiMjVNYjJGa1pYSTZJR0YxTEFvZ0lDQWdRVzVwYldGMGFXOXVUV2w0WlhJNklFTjFMQW9nSUNBZ1FXNXBiV0YwYVc5dVQySnFaV04wUjNKdmRYQTZJRkoxTEFvZ0lDQWdRVzVwYldGMGFXOXVWWFJwYkhNNklGTjJMQW9nSUNBZ1FYSmpRM1Z5ZG1VNklHdHZMQW9nSUNBZ1FYSnlZWGxEWVcxbGNtRTZJRlJ2TEFvZ0lDQWdRWEp5YjNkSVpXeHdaWEk2SUhKa0xBb2dJQ0FnUVhWa2FXODZJRVpqTEFvZ0lDQWdRWFZrYVc5QmJtRnNlWE5sY2pvZ1FYVXNDaUFnSUNCQmRXUnBiME52Ym5SbGVIUTZJRjloTEFvZ0lDQWdRWFZrYVc5TWFYTjBaVzVsY2pvZ1JYVXNDaUFnSUNCQmRXUnBiMHh2WVdSbGNqb2dlSFVzQ2lBZ0lDQkJlR1Z6U0dWc2NHVnlPaUJoWkN3S0lDQWdJRUpoWTJ0VGFXUmxPaUJHZEN3S0lDQWdJRUpoYzJsalJHVndkR2hRWVdOcmFXNW5PaUJEWml3S0lDQWdJRUpoYzJsalUyaGhaRzkzVFdGd09pQkllQ3dLSUNBZ0lFSnZibVU2SUhSaExBb2dJQ0FnUW05dmJHVmhia3RsZVdaeVlXMWxWSEpoWTJzNklGWnVMQW9nSUNBZ1FtOTRNam9nZW5Vc0NpQWdJQ0JDYjNnek9pQlJkQ3dLSUNBZ0lFSnZlRE5JWld4d1pYSTZJRzVrTEFvZ0lDQWdRbTk0UjJWdmJXVjBjbms2SUVwcExBb2dJQ0FnUW05NFNHVnNjR1Z5T2lCMFpDd0tJQ0FnSUVKMVptWmxja0YwZEhKcFluVjBaVG9nWlhRc0NpQWdJQ0JDZFdabVpYSkhaVzl0WlhSeWVUb2dSMlVzQ2lBZ0lDQkNkV1ptWlhKSFpXOXRaWFJ5ZVV4dllXUmxjam9nVG1Nc0NpQWdJQ0JDZVhSbFZIbHdaVG9nWDJZc0NpQWdJQ0JEWVdOb1pUb2djM01zQ2lBZ0lDQkRZVzFsY21FNklFTnpMQW9nSUNBZ1EyRnRaWEpoU0dWc2NHVnlPaUJsWkN3S0lDQWdJRU5oYm5aaGMxUmxlSFIxY21VNklHcG9MQW9nSUNBZ1EyRndjM1ZzWlVkbGIyMWxkSEo1T2lCeGJ5d0tJQ0FnSUVOaGRHMTFiR3hTYjIxRGRYSjJaVE02SUVodkxBb2dJQ0FnUTJsdVpXOXVWRzl1WlUxaGNIQnBibWM2SUhCbUxBb2dJQ0FnUTJseVkyeGxSMlZ2YldWMGNuazZJRmx2TEFvZ0lDQWdRMnhoYlhCVWIwVmtaMlZYY21Gd2NHbHVaem9nU1hRc0NpQWdJQ0JEYkc5amF6b2dUMk1zQ2lBZ0lDQkRiMnh2Y2pvZ2NHVXNDaUFnSUNCRGIyeHZja3RsZVdaeVlXMWxWSEpoWTJzNklIQmhMQW9nSUNBZ1EyOXNiM0pOWVc1aFoyVnRaVzUwT2lCUlpTd0tJQ0FnSUVOdmJYQnlaWE56WldSQmNuSmhlVlJsZUhSMWNtVTZJRXRvTEFvZ0lDQWdRMjl0Y0hKbGMzTmxaRU4xWW1WVVpYaDBkWEpsT2lCUmFDd0tJQ0FnSUVOdmJYQnlaWE56WldSVVpYaDBkWEpsT2lCVmN5d0tJQ0FnSUVOdmJYQnlaWE56WldSVVpYaDBkWEpsVEc5aFpHVnlPaUJ2ZFN3S0lDQWdJRU52Ym1WSFpXOXRaWFJ5ZVRvZ1dtOHNDaUFnSUNCRGRXSmxRMkZ0WlhKaE9pQmZieXdLSUNBZ0lFTjFZbVZTWldac1pXTjBhVzl1VFdGd2NHbHVaem9nZW00c0NpQWdJQ0JEZFdKbFVtVm1jbUZqZEdsdmJrMWhjSEJwYm1jNklHTnBMQW9nSUNBZ1EzVmlaVlJsZUhSMWNtVTZJRXRwTEFvZ0lDQWdRM1ZpWlZSbGVIUjFjbVZNYjJGa1pYSTZJR04xTEFvZ0lDQWdRM1ZpWlZWV1VtVm1iR1ZqZEdsdmJrMWhjSEJwYm1jNklGWnpMQW9nSUNBZ1EzVmlhV05DWlhwcFpYSkRkWEoyWlRvZ2FXRXNDaUFnSUNCRGRXSnBZMEpsZW1sbGNrTjFjblpsTXpvZ1IyOHNDaUFnSUNCRGRXSnBZMGx1ZEdWeWNHOXNZVzUwT2lCNFl5d0tJQ0FnSUVOMWJHeEdZV05sUW1GamF6b2djbXdzQ2lBZ0lDQkRkV3hzUm1GalpVWnliMjUwT2lCSVpDd0tJQ0FnSUVOMWJHeEdZV05sUm5KdmJuUkNZV05yT2lCcmVDd0tJQ0FnSUVOMWJHeEdZV05sVG05dVpUb2dhMlFzQ2lBZ0lDQkRkWEoyWlRvZ1duUXNDaUFnSUNCRGRYSjJaVkJoZEdnNklGaHZMQW9nSUNBZ1EzVnpkRzl0UW14bGJtUnBibWM2SUZka0xBb2dJQ0FnUTNWemRHOXRWRzl1WlUxaGNIQnBibWM2SUdkbUxBb2dJQ0FnUTNsc2FXNWtaWEpIWlc5dFpYUnllVG9nVG5Nc0NpQWdJQ0JEZVd4cGJtUnlhV05oYkRvZ1JuVXNDaUFnSUNCRVlYUmhNMFJVWlhoMGRYSmxPaUJ4Y2l3S0lDQWdJRVJoZEdGQmNuSmhlVlJsZUhSMWNtVTZJRUZ6TEFvZ0lDQWdSR0YwWVZSbGVIUjFjbVU2SUc5cExBb2dJQ0FnUkdGMFlWUmxlSFIxY21WTWIyRmtaWEk2SUd4MUxBb2dJQ0FnUkdGMFlWVjBhV3h6T2lCTmRpd0tJQ0FnSUVSbFkzSmxiV1Z1ZEZOMFpXNWphV3hQY0RvZ1pYWXNDaUFnSUNCRVpXTnlaVzFsYm5SWGNtRndVM1JsYm1OcGJFOXdPaUJ1ZGl3S0lDQWdJRVJsWm1GMWJIUk1iMkZrYVc1blRXRnVZV2RsY2pvZ1JYZ3NDaUFnSUNCRVpYQjBhRVp2Y20xaGREb2djMmtzQ2lBZ0lDQkVaWEIwYUZOMFpXNWphV3hHYjNKdFlYUTZJRmxwTEFvZ0lDQWdSR1Z3ZEdoVVpYaDBkWEpsT2lCM2J5d0tJQ0FnSUVScGNtVmpkR2x2Ym1Gc1RHbG5hSFE2SUZKakxBb2dJQ0FnUkdseVpXTjBhVzl1WVd4TWFXZG9kRWhsYkhCbGNqb2dhblVzQ2lBZ0lDQkVhWE5qY21WMFpVbHVkR1Z5Y0c5c1lXNTBPaUIyWXl3S0lDQWdJRVJwYzNCc1lYbFFNME52Ykc5eVUzQmhZMlU2SUhGakxBb2dJQ0FnUkc5a1pXTmhhR1ZrY205dVIyVnZiV1YwY25rNklFcHZMQW9nSUNBZ1JHOTFZbXhsVTJsa1pUb2daMjRzQ2lBZ0lDQkVjM1JCYkhCb1lVWmhZM1J2Y2pvZ1MyUXNDaUFnSUNCRWMzUkRiMnh2Y2taaFkzUnZjam9nYW1Rc0NpQWdJQ0JFZVc1aGJXbGpRMjl3ZVZWellXZGxPaUJmZGl3S0lDQWdJRVI1Ym1GdGFXTkVjbUYzVlhOaFoyVTZJSFYyTEFvZ0lDQWdSSGx1WVcxcFkxSmxZV1JWYzJGblpUb2djSFlzQ2lBZ0lDQkZaR2RsYzBkbGIyMWxkSEo1T2lBa2J5d0tJQ0FnSUVWc2JHbHdjMlZEZFhKMlpUb2dSSE1zQ2lBZ0lDQkZjWFZoYkVOdmJYQmhjbVU2SUU1bUxBb2dJQ0FnUlhGMVlXeEVaWEIwYURvZ1lXWXNDaUFnSUNCRmNYVmhiRk4wWlc1amFXeEdkVzVqT2lCaGRpd0tJQ0FnSUVWeGRXbHlaV04wWVc1bmRXeGhjbEpsWm14bFkzUnBiMjVOWVhCd2FXNW5PaUJKY2l3S0lDQWdJRVZ4ZFdseVpXTjBZVzVuZFd4aGNsSmxabkpoWTNScGIyNU5ZWEJ3YVc1bk9pQlZjaXdLSUNBZ0lFVjFiR1Z5T2lCWmNpd0tJQ0FnSUVWMlpXNTBSR2x6Y0dGMFkyaGxjam9nYzI0c0NpQWdJQ0JGZUhSeWRXUmxSMlZ2YldWMGNuazZJR3B2TEFvZ0lDQWdSbWxzWlV4dllXUmxjam9nY200c0NpQWdJQ0JHYkc5aGRERTJRblZtWm1WeVFYUjBjbWxpZFhSbE9pQnBhQ3dLSUNBZ0lFWnNiMkYwTXpKQ2RXWm1aWEpCZEhSeWFXSjFkR1U2SUhabExBb2dJQ0FnUm14dllYUTJORUoxWm1abGNrRjBkSEpwWW5WMFpUb2djMmdzQ2lBZ0lDQkdiRzloZEZSNWNHVTZJSGh1TEFvZ0lDQWdSbTluT2lCTWJ5d0tJQ0FnSUVadlowVjRjREk2SUZCdkxBb2dJQ0FnUm5KaGJXVmlkV1ptWlhKVVpYaDBkWEpsT2lBa2FDd0tJQ0FnSUVaeWIyNTBVMmxrWlRvZ1FtNHNDaUFnSUNCR2NuVnpkSFZ0T2lCUWN5d0tJQ0FnSUVkTVFuVm1abVZ5UVhSMGNtbGlkWFJsT2lCVmRTd0tJQ0FnSUVkTVUwd3hPaUIyZGl3S0lDQWdJRWRNVTB3ek9pQlBiQ3dLSUNBZ0lFZHlaV0YwWlhKRGIyMXdZWEpsT2lCR1ppd0tJQ0FnSUVkeVpXRjBaWEpFWlhCMGFEb2dZMllzQ2lBZ0lDQkhjbVZoZEdWeVJYRjFZV3hEYjIxd1lYSmxPaUI2Wml3S0lDQWdJRWR5WldGMFpYSkZjWFZoYkVSbGNIUm9PaUJ2Wml3S0lDQWdJRWR5WldGMFpYSkZjWFZoYkZOMFpXNWphV3hHZFc1ak9pQm9kaXdLSUNBZ0lFZHlaV0YwWlhKVGRHVnVZMmxzUm5WdVl6b2dZM1lzQ2lBZ0lDQkhjbWxrU0dWc2NHVnlPaUJLZFN3S0lDQWdJRWR5YjNWd09pQjBhU3dLSUNBZ0lFaGhiR1pHYkc5aGRGUjVjR1U2SUZSekxBb2dJQ0FnU0dWdGFYTndhR1Z5WlV4cFoyaDBPaUJUWXl3S0lDQWdJRWhsYldsemNHaGxjbVZNYVdkb2RFaGxiSEJsY2pvZ1duVXNDaUFnSUNCSlkyOXpZV2hsWkhKdmJrZGxiMjFsZEhKNU9pQmxZeXdLSUNBZ0lFbHRZV2RsUW1sMGJXRndURzloWkdWeU9pQmZkU3dLSUNBZ0lFbHRZV2RsVEc5aFpHVnlPaUJ5Y3l3S0lDQWdJRWx0WVdkbFZYUnBiSE02SUZoeUxBb2dJQ0FnU1c1amNtVnRaVzUwVTNSbGJtTnBiRTl3T2lCcWVDd0tJQ0FnSUVsdVkzSmxiV1Z1ZEZkeVlYQlRkR1Z1WTJsc1QzQTZJSFIyTEFvZ0lDQWdTVzV6ZEdGdVkyVmtRblZtWm1WeVFYUjBjbWxpZFhSbE9pQjFhU3dLSUNBZ0lFbHVjM1JoYm1ObFpFSjFabVpsY2tkbGIyMWxkSEo1T2lCRVl5d0tJQ0FnSUVsdWMzUmhibU5sWkVsdWRHVnliR1ZoZG1Wa1FuVm1abVZ5T2lCSmRTd0tJQ0FnSUVsdWMzUmhibU5sWkUxbGMyZzZJRVp2TEFvZ0lDQWdTVzUwTVRaQ2RXWm1aWEpCZEhSeWFXSjFkR1U2SUhSb0xBb2dJQ0FnU1c1ME16SkNkV1ptWlhKQmRIUnlhV0oxZEdVNklHNW9MQW9nSUNBZ1NXNTBPRUoxWm1abGNrRjBkSEpwWW5WMFpUb2dVV3dzQ2lBZ0lDQkpiblJVZVhCbE9pQmtaQ3dLSUNBZ0lFbHVkR1Z5YkdWaGRtVmtRblZtWm1WeU9pQkpjeXdLSUNBZ0lFbHVkR1Z5YkdWaGRtVmtRblZtWm1WeVFYUjBjbWxpZFhSbE9pQlJhU3dLSUNBZ0lFbHVkR1Z5Y0c5c1lXNTBPaUJsY3l3S0lDQWdJRWx1ZEdWeWNHOXNZWFJsUkdselkzSmxkR1U2SUU5eUxBb2dJQ0FnU1c1MFpYSndiMnhoZEdWTWFXNWxZWEk2SUVaeUxBb2dJQ0FnU1c1MFpYSndiMnhoZEdWVGJXOXZkR2c2SUV4aExBb2dJQ0FnU1c1MlpYSjBVM1JsYm1OcGJFOXdPaUJwZGl3S0lDQWdJRXRsWlhCVGRHVnVZMmxzVDNBNklFbGhMQW9nSUNBZ1MyVjVabkpoYldWVWNtRmphem9nU25Rc0NpQWdJQ0JNVDBRNklFUnZMQW9nSUNBZ1RHRjBhR1ZIWlc5dFpYUnllVG9nYkdFc0NpQWdJQ0JNWVhsbGNuTTZJRkp6TEFvZ0lDQWdUR1Z6YzBOdmJYQmhjbVU2SUVSbUxBb2dJQ0FnVEdWemMwUmxjSFJvT2lCeVppd0tJQ0FnSUV4bGMzTkZjWFZoYkVOdmJYQmhjbVU2SUU5bUxBb2dJQ0FnVEdWemMwVnhkV0ZzUkdWd2RHZzZJSFZ2TEFvZ0lDQWdUR1Z6YzBWeGRXRnNVM1JsYm1OcGJFWjFibU02SUc5MkxBb2dJQ0FnVEdWemMxTjBaVzVqYVd4R2RXNWpPaUJ5ZGl3S0lDQWdJRXhwWjJoME9pQkZiaXdLSUNBZ0lFeHBaMmgwVUhKdlltVTZJRWxqTEFvZ0lDQWdUR2x1WlRvZ1ltNHNDaUFnSUNCTWFXNWxNem9nYTNVc0NpQWdJQ0JNYVc1bFFtRnphV05OWVhSbGNtbGhiRG9nZDNRc0NpQWdJQ0JNYVc1bFEzVnlkbVU2SUhOaExBb2dJQ0FnVEdsdVpVTjFjblpsTXpvZ1YyOHNDaUFnSUNCTWFXNWxSR0Z6YUdWa1RXRjBaWEpwWVd3NklHZGpMQW9nSUNBZ1RHbHVaVXh2YjNBNklFSnZMQW9nSUNBZ1RHbHVaVk5sWjIxbGJuUnpPaUJsYml3S0lDQWdJRXhwYm1WaGNrUnBjM0JzWVhsUU0wTnZiRzl5VTNCaFkyVTZJSFpoTEFvZ0lDQWdUR2x1WldGeVJXNWpiMlJwYm1jNklIWmtMQW9nSUNBZ1RHbHVaV0Z5Um1sc2RHVnlPaUJ0ZEN3S0lDQWdJRXhwYm1WaGNrbHVkR1Z5Y0c5c1lXNTBPaUJtWVN3S0lDQWdJRXhwYm1WaGNrMXBjRTFoY0V4cGJtVmhja1pwYkhSbGNqb2dXWGdzQ2lBZ0lDQk1hVzVsWVhKTmFYQk5ZWEJPWldGeVpYTjBSbWxzZEdWeU9pQnhlQ3dLSUNBZ0lFeHBibVZoY2sxcGNHMWhjRXhwYm1WaGNrWnBiSFJsY2pvZ2JHa3NDaUFnSUNCTWFXNWxZWEpOYVhCdFlYQk9aV0Z5WlhOMFJtbHNkR1Z5T2lCMVpDd0tJQ0FnSUV4cGJtVmhjbE5TUjBKRGIyeHZjbE53WVdObE9pQk5iaXdLSUNBZ0lFeHBibVZoY2xSdmJtVk5ZWEJ3YVc1bk9pQmtaaXdLSUNBZ0lFeHBibVZoY2xSeVlXNXpabVZ5T2lCNmNpd0tJQ0FnSUV4dllXUmxjam9nUkhRc0NpQWdJQ0JNYjJGa1pYSlZkR2xzY3pvZ1oyRXNDaUFnSUNCTWIyRmthVzVuVFdGdVlXZGxjam9nYldFc0NpQWdJQ0JNYjI5d1QyNWpaVG9nZDJZc0NpQWdJQ0JNYjI5d1VHbHVaMUJ2Ym1jNklGSm1MQW9nSUNBZ1RHOXZjRkpsY0dWaGREb2dRV1lzQ2lBZ0lDQk1kVzFwYm1GdVkyVkJiSEJvWVVadmNtMWhkRG9nVFdZc0NpQWdJQ0JNZFcxcGJtRnVZMlZHYjNKdFlYUTZJSGxtTEFvZ0lDQWdUVTlWVTBVNklIcDRMQW9nSUNBZ1RXRjBaWEpwWVd3NklHSjBMQW9nSUNBZ1RXRjBaWEpwWVd4TWIyRmtaWEk2SUZWakxBb2dJQ0FnVFdGMGFGVjBhV3h6T2lCNWRpd0tJQ0FnSUUxaGRISnBlRE02SUVobExBb2dJQ0FnVFdGMGNtbDRORG9nZW1Vc0NpQWdJQ0JOWVhoRmNYVmhkR2x2YmpvZ2FHd3NDaUFnSUNCTlpYTm9PaUJOZEN3S0lDQWdJRTFsYzJoQ1lYTnBZMDFoZEdWeWFXRnNPaUJUYml3S0lDQWdJRTFsYzJoRVpYQjBhRTFoZEdWeWFXRnNPaUJSY2l3S0lDQWdJRTFsYzJoRWFYTjBZVzVqWlUxaGRHVnlhV0ZzT2lCcWNpd0tJQ0FnSUUxbGMyaE1ZVzFpWlhKMFRXRjBaWEpwWVd3NklIQmpMQW9nSUNBZ1RXVnphRTFoZEdOaGNFMWhkR1Z5YVdGc09pQnRZeXdLSUNBZ0lFMWxjMmhPYjNKdFlXeE5ZWFJsY21saGJEb2dabU1zQ2lBZ0lDQk5aWE5vVUdodmJtZE5ZWFJsY21saGJEb2dkV01zQ2lBZ0lDQk5aWE5vVUdoNWMybGpZV3hOWVhSbGNtbGhiRG9nYUdNc0NpQWdJQ0JOWlhOb1UzUmhibVJoY21STllYUmxjbWxoYkRvZ1pHRXNDaUFnSUNCTlpYTm9WRzl2YmsxaGRHVnlhV0ZzT2lCa1l5d0tJQ0FnSUUxcGJrVnhkV0YwYVc5dU9pQnNiQ3dLSUNBZ0lFMXBjbkp2Y21Wa1VtVndaV0YwVjNKaGNIQnBibWM2SUU1eUxBb2dJQ0FnVFdsNFQzQmxjbUYwYVc5dU9pQm9aaXdLSUNBZ0lFMTFiSFJwY0d4NVFteGxibVJwYm1jNklHTnNMQW9nSUNBZ1RYVnNkR2x3YkhsUGNHVnlZWFJwYjI0NklIaGhMQW9nSUNBZ1RtVmhjbVZ6ZEVacGJIUmxjam9nY0hRc0NpQWdJQ0JPWldGeVpYTjBUV2x3VFdGd1RHbHVaV0Z5Um1sc2RHVnlPaUJZZUN3S0lDQWdJRTVsWVhKbGMzUk5hWEJOWVhCT1pXRnlaWE4wUm1sc2RHVnlPaUJYZUN3S0lDQWdJRTVsWVhKbGMzUk5hWEJ0WVhCTWFXNWxZWEpHYVd4MFpYSTZJRXh5TEFvZ0lDQWdUbVZoY21WemRFMXBjRzFoY0U1bFlYSmxjM1JHYVd4MFpYSTZJR1p2TEFvZ0lDQWdUbVYyWlhKRGIyMXdZWEpsT2lCVlppd0tJQ0FnSUU1bGRtVnlSR1Z3ZEdnNklHNW1MQW9nSUNBZ1RtVjJaWEpUZEdWdVkybHNSblZ1WXpvZ2MzWXNDaUFnSUNCT2IwSnNaVzVrYVc1bk9pQkViaXdLSUNBZ0lFNXZRMjlzYjNKVGNHRmpaVG9nV0hRc0NpQWdJQ0JPYjFSdmJtVk5ZWEJ3YVc1bk9pQk9iaXdLSUNBZ0lFNXZjbTFoYkVGdWFXMWhkR2x2YmtKc1pXNWtUVzlrWlRvZ1dHTXNDaUFnSUNCT2IzSnRZV3hDYkdWdVpHbHVaem9nVjJrc0NpQWdJQ0JPYjNSRmNYVmhiRU52YlhCaGNtVTZJRUptTEFvZ0lDQWdUbTkwUlhGMVlXeEVaWEIwYURvZ2JHWXNDaUFnSUNCT2IzUkZjWFZoYkZOMFpXNWphV3hHZFc1ak9pQnNkaXdLSUNBZ0lFNTFiV0psY2t0bGVXWnlZVzFsVkhKaFkyczZJSFJ6TEFvZ0lDQWdUMkpxWldOME0wUTZJRXBsTEFvZ0lDQWdUMkpxWldOMFRHOWhaR1Z5T2lCd2RTd0tJQ0FnSUU5aWFtVmpkRk53WVdObFRtOXliV0ZzVFdGd09pQk1aaXdLSUNBZ0lFOWpkR0ZvWldSeWIyNUhaVzl0WlhSeWVUb2dhR0VzQ2lBZ0lDQlBibVZHWVdOMGIzSTZJRnBrTEFvZ0lDQWdUMjVsVFdsdWRYTkVjM1JCYkhCb1lVWmhZM1J2Y2pvZ1VXUXNDaUFnSUNCUGJtVk5hVzUxYzBSemRFTnZiRzl5Um1GamRHOXlPaUJsWml3S0lDQWdJRTl1WlUxcGJuVnpVM0pqUVd4d2FHRkdZV04wYjNJNklHaGtMQW9nSUNBZ1QyNWxUV2x1ZFhOVGNtTkRiMnh2Y2taaFkzUnZjam9nSkdRc0NpQWdJQ0JQY25Sb2IyZHlZWEJvYVdORFlXMWxjbUU2SUV4ekxBb2dJQ0FnVUROUWNtbHRZWEpwWlhNNklHdHlMQW9nSUNBZ1VFTkdVMmhoWkc5M1RXRndPaUJqWkN3S0lDQWdJRkJEUmxOdlpuUlRhR0ZrYjNkTllYQTZJRWRrTEFvZ0lDQWdVRTFTUlUxSFpXNWxjbUYwYjNJNklFdHlMQW9nSUNBZ1VHRjBhRG9nYW1rc0NpQWdJQ0JRWlhKemNHVmpkR2wyWlVOaGJXVnlZVG9nZVhRc0NpQWdJQ0JRYkdGdVpUb2diVzRzQ2lBZ0lDQlFiR0Z1WlVkbGIyMWxkSEo1T2lBa2Npd0tJQ0FnSUZCc1lXNWxTR1ZzY0dWeU9pQnBaQ3dLSUNBZ0lGQnZhVzUwVEdsbmFIUTZJSGRqTEFvZ0lDQWdVRzlwYm5STWFXZG9kRWhsYkhCbGNqb2dXSFVzQ2lBZ0lDQlFiMmx1ZEhNNklGWnZMQW9nSUNBZ1VHOXBiblJ6VFdGMFpYSnBZV3c2SUc1aExBb2dJQ0FnVUc5c1lYSkhjbWxrU0dWc2NHVnlPaUFrZFN3S0lDQWdJRkJ2Ykhsb1pXUnliMjVIWlc5dFpYUnllVG9nWkdrc0NpQWdJQ0JRYjNOcGRHbHZibUZzUVhWa2FXODZJSGQxTEFvZ0lDQWdVSEp2Y0dWeWRIbENhVzVrYVc1bk9pQkxaU3dLSUNBZ0lGQnliM0JsY25SNVRXbDRaWEk2SUVKakxBb2dJQ0FnVVhWaFpISmhkR2xqUW1WNmFXVnlRM1Z5ZG1VNklISmhMQW9nSUNBZ1VYVmhaSEpoZEdsalFtVjZhV1Z5UTNWeWRtVXpPaUJoWVN3S0lDQWdJRkYxWVhSbGNtNXBiMjQ2SUZWMExBb2dJQ0FnVVhWaGRHVnlibWx2Ymt0bGVXWnlZVzFsVkhKaFkyczZJSEJwTEFvZ0lDQWdVWFZoZEdWeWJtbHZia3hwYm1WaGNrbHVkR1Z5Y0c5c1lXNTBPaUI1WXl3S0lDQWdJRkpGUkY5SFVrVkZUbDlTUjFSRE1sOUdiM0p0WVhRNklFUnNMQW9nSUNBZ1VrVkVYMUpIVkVNeFgwWnZjbTFoZERvZ1ZHWXNDaUFnSUNCU1JWWkpVMGxQVGpvZ1NHTXNDaUFnSUNCU1IwSkJSR1Z3ZEdoUVlXTnJhVzVuT2lCUVppd0tJQ0FnSUZKSFFrRkdiM0p0WVhRNklGZDBMQW9nSUNBZ1VrZENRVWx1ZEdWblpYSkdiM0p0WVhRNklGOWtMQW9nSUNBZ1VrZENRVjlCVTFSRFh6RXdlREV3WDBadmNtMWhkRG9nVW13c0NpQWdJQ0JTUjBKQlgwRlRWRU5mTVRCNE5WOUdiM0p0WVhRNklGUnNMQW9nSUNBZ1VrZENRVjlCVTFSRFh6RXdlRFpmUm05eWJXRjBPaUIzYkN3S0lDQWdJRkpIUWtGZlFWTlVRMTh4TUhnNFgwWnZjbTFoZERvZ1FXd3NDaUFnSUNCU1IwSkJYMEZUVkVOZk1USjRNVEJmUm05eWJXRjBPaUJEYkN3S0lDQWdJRkpIUWtGZlFWTlVRMTh4TW5neE1sOUdiM0p0WVhRNklGQnNMQW9nSUNBZ1VrZENRVjlCVTFSRFh6UjRORjlHYjNKdFlYUTZJRjlzTEFvZ0lDQWdVa2RDUVY5QlUxUkRYelY0TkY5R2IzSnRZWFE2SUhoc0xBb2dJQ0FnVWtkQ1FWOUJVMVJEWHpWNE5WOUdiM0p0WVhRNklIWnNMQW9nSUNBZ1VrZENRVjlCVTFSRFh6WjROVjlHYjNKdFlYUTZJSGxzTEFvZ0lDQWdVa2RDUVY5QlUxUkRYelo0Tmw5R2IzSnRZWFE2SUUxc0xBb2dJQ0FnVWtkQ1FWOUJVMVJEWHpoNE5WOUdiM0p0WVhRNklGTnNMQW9nSUNBZ1VrZENRVjlCVTFSRFh6aDRObDlHYjNKdFlYUTZJR0pzTEFvZ0lDQWdVa2RDUVY5QlUxUkRYemg0T0Y5R2IzSnRZWFE2SUVWc0xBb2dJQ0FnVWtkQ1FWOUNVRlJEWDBadmNtMWhkRG9nVUdFc0NpQWdJQ0JTUjBKQlgwVlVRekpmUlVGRFgwWnZjbTFoZERvZ1oyd3NDaUFnSUNCU1IwSkJYMUJXVWxSRFh6SkNVRkJXTVY5R2IzSnRZWFE2SUhCc0xBb2dJQ0FnVWtkQ1FWOVFWbEpVUTE4MFFsQlFWakZmUm05eWJXRjBPaUJtYkN3S0lDQWdJRkpIUWtGZlV6TlVRMTlFV0ZReFgwWnZjbTFoZERvZ1FXRXNDaUFnSUNCU1IwSkJYMU16VkVOZlJGaFVNMTlHYjNKdFlYUTZJRkpoTEFvZ0lDQWdVa2RDUVY5VE0xUkRYMFJZVkRWZlJtOXliV0YwT2lCRFlTd0tJQ0FnSUZKSFFsOUNVRlJEWDFOSlIwNUZSRjlHYjNKdFlYUTZJRXhzTEFvZ0lDQWdVa2RDWDBKUVZFTmZWVTVUU1VkT1JVUmZSbTl5YldGME9pQkpiQ3dLSUNBZ0lGSkhRbDlGVkVNeFgwWnZjbTFoZERvZ1JXWXNDaUFnSUNCU1IwSmZSVlJETWw5R2IzSnRZWFE2SUcxc0xBb2dJQ0FnVWtkQ1gxQldVbFJEWHpKQ1VGQldNVjlHYjNKdFlYUTZJR1JzTEFvZ0lDQWdVa2RDWDFCV1VsUkRYelJDVUZCV01WOUdiM0p0WVhRNklIVnNMQW9nSUNBZ1VrZENYMU16VkVOZlJGaFVNVjlHYjNKdFlYUTZJSGRoTEFvZ0lDQWdVa2RHYjNKdFlYUTZJR0ptTEFvZ0lDQWdVa2RKYm5SbFoyVnlSbTl5YldGME9pQm5aQ3dLSUNBZ0lGSmhkMU5vWVdSbGNrMWhkR1Z5YVdGc09pQnNZeXdLSUNBZ0lGSmhlVG9nYUdrc0NpQWdJQ0JTWVhsallYTjBaWEk2SUVSMUxBb2dJQ0FnVW1Wak56QTVVSEpwYldGeWFXVnpPaUJXY2l3S0lDQWdJRkpsWTNSQmNtVmhUR2xuYUhRNklGQmpMQW9nSUNBZ1VtVmtSbTl5YldGME9pQlRaaXdLSUNBZ0lGSmxaRWx1ZEdWblpYSkdiM0p0WVhRNklHMWtMQW9nSUNBZ1VtVnBibWhoY21SVWIyNWxUV0Z3Y0dsdVp6b2dabVlzQ2lBZ0lDQlNaVzVrWlhKVVlYSm5aWFE2SUdkdkxBb2dJQ0FnVW1Wd1pXRjBWM0poY0hCcGJtYzZJRVJ5TEFvZ0lDQWdVbVZ3YkdGalpWTjBaVzVqYVd4UGNEb2dVWGdzQ2lBZ0lDQlNaWFpsY25ObFUzVmlkSEpoWTNSRmNYVmhkR2x2YmpvZ2NXUXNDaUFnSUNCU2FXNW5SMlZ2YldWMGNuazZJSFJqTEFvZ0lDQWdVMGxIVGtWRVgxSkZSRjlIVWtWRlRsOVNSMVJETWw5R2IzSnRZWFE2SUU1c0xBb2dJQ0FnVTBsSFRrVkVYMUpGUkY5U1IxUkRNVjlHYjNKdFlYUTZJRlZzTEFvZ0lDQWdVMUpIUWtOdmJHOXlVM0JoWTJVNklIWjBMQW9nSUNBZ1UxSkhRbFJ5WVc1elptVnlPaUJ1ZEN3S0lDQWdJRk5qWlc1bE9pQkpieXdLSUNBZ0lGTm9ZV1JsY2tOb2RXNXJPaUJyWlN3S0lDQWdJRk5vWVdSbGNreHBZam9nYm00c0NpQWdJQ0JUYUdGa1pYSk5ZWFJsY21saGJEb2dhblFzQ2lBZ0lDQlRhR0ZrYjNkTllYUmxjbWxoYkRvZ1kyTXNDaUFnSUNCVGFHRndaVG9nUm00c0NpQWdJQ0JUYUdGd1pVZGxiMjFsZEhKNU9pQnVZeXdLSUNBZ0lGTm9ZWEJsVUdGMGFEb2diMlFzQ2lBZ0lDQlRhR0Z3WlZWMGFXeHpPaUI1Yml3S0lDQWdJRk5vYjNKMFZIbHdaVG9nZUdZc0NpQWdJQ0JUYTJWc1pYUnZiam9nVDI4c0NpQWdJQ0JUYTJWc1pYUnZia2hsYkhCbGNqb2dWM1VzQ2lBZ0lDQlRhMmx1Ym1Wa1RXVnphRG9nVG04c0NpQWdJQ0JUYjNWeVkyVTZJRWx1TEFvZ0lDQWdVM0JvWlhKbE9pQlpkQ3dLSUNBZ0lGTndhR1Z5WlVkbGIyMWxkSEo1T2lCMVlTd0tJQ0FnSUZOd2FHVnlhV05oYkRvZ1QzVXNDaUFnSUNCVGNHaGxjbWxqWVd4SVlYSnRiMjVwWTNNek9pQk1ZeXdLSUNBZ0lGTndiR2x1WlVOMWNuWmxPaUJ2WVN3S0lDQWdJRk53YjNSTWFXZG9kRG9nUldNc0NpQWdJQ0JUY0c5MFRHbG5hSFJJWld4d1pYSTZJRWQxTEFvZ0lDQWdVM0J5YVhSbE9pQlZieXdLSUNBZ0lGTndjbWwwWlUxaGRHVnlhV0ZzT2lCbFlTd0tJQ0FnSUZOeVkwRnNjR2hoUm1GamRHOXlPaUJzWkN3S0lDQWdJRk55WTBGc2NHaGhVMkYwZFhKaGRHVkdZV04wYjNJNklIUm1MQW9nSUNBZ1UzSmpRMjlzYjNKR1lXTjBiM0k2SUVwa0xBb2dJQ0FnVTNSaGRHbGpRMjl3ZVZWellXZGxPaUJuZGl3S0lDQWdJRk4wWVhScFkwUnlZWGRWYzJGblpUb2dTSElzQ2lBZ0lDQlRkR0YwYVdOU1pXRmtWWE5oWjJVNklHWjJMQW9nSUNBZ1UzUmxjbVZ2UTJGdFpYSmhPaUJOZFN3S0lDQWdJRk4wY21WaGJVTnZjSGxWYzJGblpUb2dlSFlzQ2lBZ0lDQlRkSEpsWVcxRWNtRjNWWE5oWjJVNklHUjJMQW9nSUNBZ1UzUnlaV0Z0VW1WaFpGVnpZV2RsT2lCdGRpd0tJQ0FnSUZOMGNtbHVaMHRsZVdaeVlXMWxWSEpoWTJzNklHdHVMQW9nSUNBZ1UzVmlkSEpoWTNSRmNYVmhkR2x2YmpvZ1dHUXNDaUFnSUNCVGRXSjBjbUZqZEdsMlpVSnNaVzVrYVc1bk9pQnZiQ3dLSUNBZ0lGUlBWVU5JT2lCV2VDd0tJQ0FnSUZSaGJtZGxiblJUY0dGalpVNXZjbTFoYkUxaGNEb2diV2tzQ2lBZ0lDQlVaWFJ5WVdobFpISnZia2RsYjIxbGRISjVPaUJwWXl3S0lDQWdJRlJsZUhSMWNtVTZJRk4wTEFvZ0lDQWdWR1Y0ZEhWeVpVeHZZV1JsY2pvZ2FIVXNDaUFnSUNCVWIzSjFjMGRsYjIxbGRISjVPaUJ6WXl3S0lDQWdJRlJ2Y25WelMyNXZkRWRsYjIxbGRISjVPaUJ5WXl3S0lDQWdJRlJ5YVdGdVoyeGxPaUJWYml3S0lDQWdJRlJ5YVdGdVoyeGxSbUZ1UkhKaGQwMXZaR1U2SUNSNExBb2dJQ0FnVkhKcFlXNW5iR1ZUZEhKcGNFUnlZWGROYjJSbE9pQktlQ3dLSUNBZ0lGUnlhV0Z1WjJ4bGMwUnlZWGROYjJSbE9pQmFlQ3dLSUNBZ0lGUjFZbVZIWlc5dFpYUnllVG9nWVdNc0NpQWdJQ0JVZDI5UVlYTnpSRzkxWW14bFUybGtaVG9nUjNnc0NpQWdJQ0JWVmsxaGNIQnBibWM2SUVkakxBb2dJQ0FnVldsdWRERTJRblZtWm1WeVFYUjBjbWxpZFhSbE9pQmFjaXdLSUNBZ0lGVnBiblF6TWtKMVptWmxja0YwZEhKcFluVjBaVG9nU25Jc0NpQWdJQ0JWYVc1ME9FSjFabVpsY2tGMGRISnBZblYwWlRvZ2Ftd3NDaUFnSUNCVmFXNTBPRU5zWVcxd1pXUkNkV1ptWlhKQmRIUnlhV0oxZEdVNklHVm9MQW9nSUNBZ1ZXNXBabTl5YlRvZ1VIVXNDaUFnSUNCVmJtbG1iM0p0YzBkeWIzVndPaUJNZFN3S0lDQWdJRlZ1YVdadmNtMXpUR2xpT2lCc1pTd0tJQ0FnSUZWdWFXWnZjbTF6VlhScGJITTZJSGh3TEFvZ0lDQWdWVzV6YVdkdVpXUkNlWFJsVkhsd1pUb2dUMjRzQ2lBZ0lDQlZibk5wWjI1bFpFbHVkREkwT0ZSNWNHVTZJR2xwTEFvZ0lDQWdWVzV6YVdkdVpXUkpiblJVZVhCbE9pQk1iaXdLSUNBZ0lGVnVjMmxuYm1Wa1UyaHZjblEwTkRRMFZIbHdaVG9nWm1Rc0NpQWdJQ0JWYm5OcFoyNWxaRk5vYjNKME5UVTFNVlI1Y0dVNklIQmtMQW9nSUNBZ1ZXNXphV2R1WldSVGFHOXlkRlI1Y0dVNklGZGpMQW9nSUNBZ1ZsTk5VMmhoWkc5M1RXRndPaUJ3Yml3S0lDQWdJRlpsWTNSdmNqSTZJRm9zQ2lBZ0lDQldaV04wYjNJek9pQkJMQW9nSUNBZ1ZtVmpkRzl5TkRvZ2FtVXNDaUFnSUNCV1pXTjBiM0pMWlhsbWNtRnRaVlJ5WVdOck9pQnVjeXdLSUNBZ0lGWnBaR1Z2VkdWNGRIVnlaVG9nU21nc0NpQWdJQ0JYWldKSFRERlNaVzVrWlhKbGNqb2dRMjhzQ2lBZ0lDQlhaV0pIVERORVVtVnVaR1Z5VkdGeVoyVjBPaUJJYkN3S0lDQWdJRmRsWWtkTVFYSnlZWGxTWlc1a1pYSlVZWEpuWlhRNklHdHNMQW9nSUNBZ1YyVmlSMHhEYjI5eVpHbHVZWFJsVTNsemRHVnRPaUIyYml3S0lDQWdJRmRsWWtkTVEzVmlaVkpsYm1SbGNsUmhjbWRsZERvZ2VHOHNDaUFnSUNCWFpXSkhURTExYkhScGNHeGxVbVZ1WkdWeVZHRnlaMlYwY3pvZ1Iyd3NDaUFnSUNCWFpXSkhURkpsYm1SbGNsUmhjbWRsZERvZ2NYUXNDaUFnSUNCWFpXSkhURkpsYm1SbGNtVnlPaUJTYnl3S0lDQWdJRmRsWWtkTVZYUnBiSE02SUZZd0xBb2dJQ0FnVjJWaVIxQlZRMjl2Y21ScGJtRjBaVk41YzNSbGJUb2dSM0lzQ2lBZ0lDQlhhWEpsWm5KaGJXVkhaVzl0WlhSeWVUb2diMk1zQ2lBZ0lDQlhjbUZ3UVhKdmRXNWtSVzVrYVc1bk9pQkNjaXdLSUNBZ0lGcGxjbTlEZFhKMllYUjFjbVZGYm1ScGJtYzZJSHBwTEFvZ0lDQWdXbVZ5YjBaaFkzUnZjam9nV1dRc0NpQWdJQ0JhWlhKdlUyeHZjR1ZGYm1ScGJtYzZJRlpwTEFvZ0lDQWdXbVZ5YjFOMFpXNWphV3hQY0RvZ1MzZ3NDaUFnSUNCZlUxSkhRa0ZHYjNKdFlYUTZJSEJ2TEFvZ0lDQWdZM0psWVhSbFEyRnVkbUZ6Uld4bGJXVnVkRG9nZEhBc0NpQWdJQ0J6VWtkQ1JXNWpiMlJwYm1jNklISnBDbjA3Q21aMWJtTjBhVzl1SUdkbGRGZGxZa2RNUlhKeWIzSk5aWE56WVdkbEtDa2dld29nSUNBZ2NtVjBkWEp1SUdkbGRFVnljbTl5VFdWemMyRm5aU2d4S1RzS2ZRcG1kVzVqZEdsdmJpQm5aWFJGY25KdmNrMWxjM05oWjJVb2RtVnljMmx2YmlrZ2V3b2dJQ0FnZG1GeUlHNWhiV1Z6SUQwZ2V3b2dJQ0FnSUNBZ0lERTZJQ0pYWldKSFRDSXNDaUFnSUNBZ0lDQWdNam9nSWxkbFlrZE1JRElpQ2lBZ0lDQjlPd29nSUNBZ2RtRnlJR052Ym5SbGVIUnpJRDBnZXdvZ0lDQWdJQ0FnSURFNklIZHBibVJ2ZHk1WFpXSkhURkpsYm1SbGNtbHVaME52Ym5SbGVIUXNDaUFnSUNBZ0lDQWdNam9nZDJsdVpHOTNMbGRsWWtkTU1sSmxibVJsY21sdVowTnZiblJsZUhRS0lDQWdJSDA3Q2lBZ0lDQjJZWElnYldWemMyRm5aU0E5SUNkWmIzVnlJQ1F3SUdSdlpYTWdibTkwSUhObFpXMGdkRzhnYzNWd2NHOXlkQ0E4WVNCb2NtVm1QU0pvZEhSd09pOHZhMmh5YjI1dmN5NXZjbWN2ZDJWaVoyd3ZkMmxyYVM5SFpYUjBhVzVuWDJGZlYyVmlSMHhmU1cxd2JHVnRaVzUwWVhScGIyNGlJSE4wZVd4bFBTSmpiMnh2Y2pvak1EQXdJajRrTVR3dllUNG5Pd29nSUNBZ2RtRnlJR1ZzWlcxbGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDSmthWFlpS1RzS0lDQWdJR1ZzWlcxbGJuUXVhV1FnUFNBaWQyVmlaMnh0WlhOellXZGxJanNLSUNBZ0lHVnNaVzFsYm5RdWMzUjViR1V1Wm05dWRFWmhiV2xzZVNBOUlDSnRiMjV2YzNCaFkyVWlPd29nSUNBZ1pXeGxiV1Z1ZEM1emRIbHNaUzVtYjI1MFUybDZaU0E5SUNJeE0zQjRJanNLSUNBZ0lHVnNaVzFsYm5RdWMzUjViR1V1Wm05dWRGZGxhV2RvZENBOUlDSnViM0p0WVd3aU93b2dJQ0FnWld4bGJXVnVkQzV6ZEhsc1pTNTBaWGgwUVd4cFoyNGdQU0FpWTJWdWRHVnlJanNLSUNBZ0lHVnNaVzFsYm5RdWMzUjViR1V1WW1GamEyZHliM1Z1WkNBOUlDSWpabVptSWpzS0lDQWdJR1ZzWlcxbGJuUXVjM1I1YkdVdVkyOXNiM0lnUFNBaUl6QXdNQ0k3Q2lBZ0lDQmxiR1Z0Wlc1MExuTjBlV3hsTG5CaFpHUnBibWNnUFNBaU1TNDFaVzBpT3dvZ0lDQWdaV3hsYldWdWRDNXpkSGxzWlM1M2FXUjBhQ0E5SUNJME1EQndlQ0k3Q2lBZ0lDQmxiR1Z0Wlc1MExuTjBlV3hsTG0xaGNtZHBiaUE5SUNJMVpXMGdZWFYwYnlBd0lqc0tJQ0FnSUdsbUlDaGpiMjUwWlhoMGMxdDJaWEp6YVc5dVhTa2dld29nSUNBZ0lDQWdJRzFsYzNOaFoyVWdQU0J0WlhOellXZGxMbkpsY0d4aFkyVW9JaVF3SWl3Z0ltZHlZWEJvYVdOeklHTmhjbVFpS1RzS0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdiV1Z6YzJGblpTQTlJRzFsYzNOaFoyVXVjbVZ3YkdGalpTZ2lKREFpTENBaVluSnZkM05sY2lJcE93b2dJQ0FnZlFvZ0lDQWdiV1Z6YzJGblpTQTlJRzFsYzNOaFoyVXVjbVZ3YkdGalpTZ2lKREVpTENCdVlXMWxjMXQyWlhKemFXOXVYU2s3Q2lBZ0lDQmxiR1Z0Wlc1MExtbHVibVZ5U0ZSTlRDQTlJRzFsYzNOaFoyVTdDaUFnSUNCeVpYUjFjbTRnWld4bGJXVnVkRHNLZlFwbWRXNWpkR2x2YmlCMGVYQmxaR0Z5Y21GNVgzUnZYM1psWTNSNWNHVW9kSGx3WldSQmNuSmhlU3dnYm1ScGJTa2dld29nSUNBZ2FXWWdLRzVrYVcwZ1BUMDlJREVwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnSW1ac2IyRjBJanNLSUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3WldSQmNuSmhlU0JwYm5OMFlXNWpaVzltSUVac2IyRjBNekpCY25KaGVTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQWlkbVZqSWlBcklHNWthVzA3Q2lBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWa1FYSnlZWGtnYVc1emRHRnVZMlZ2WmlCSmJuUXpNa0Z5Y21GNUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlDSnBkbVZqSWlBcklHNWthVzA3Q2lBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWa1FYSnlZWGtnYVc1emRHRnVZMlZ2WmlCVmFXNTBNekpCY25KaGVTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQWlkWFpsWXlJZ0t5QnVaR2x0T3dvZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0I5Q24wS1puVnVZM1JwYjI0Z1lYUjBjbWxpZFhSbFgzUjVjR1VvWVhSMGNtbGlkWFJsS1NCN0NpQWdJQ0JwWmlBb1lYUjBjbWxpZFhSbEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUjVjR1ZrWVhKeVlYbGZkRzlmZG1WamRIbHdaU2hoZEhSeWFXSjFkR1V1WVhKeVlYa3NJR0YwZEhKcFluVjBaUzVwZEdWdFUybDZaU2s3Q2lBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJSDBLZlFwbWRXNWpkR2x2YmlCMWJtbG1iM0p0WDNSNWNHVW9iMkpxS1NCN0NpQWdJQ0JwWmlBb2IySnFJR2x1YzNSaGJtTmxiMllnVkVoU1JVVXVWVzVwWm05eWJTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjFibWxtYjNKdFgzUjVjR1VvYjJKcUxuWmhiSFZsS1RzS0lDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JRzlpYWlBOVBUMGdJbTUxYldKbGNpSXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdJbVpzYjJGMElqc0tJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUc5aWFpQTlQVDBnSW1KdmIyeGxZVzRpS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNKaWIyOXNJanNLSUNBZ0lIMGdaV3h6WlNCcFppQW9iMkpxSUdsdWMzUmhibU5sYjJZZ1ZFaFNSVVV1Vm1WamRHOXlNaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUFpZG1Wak1pSTdDaUFnSUNCOUlHVnNjMlVnYVdZZ0tHOWlhaUJwYm5OMFlXNWpaVzltSUZSSVVrVkZMbFpsWTNSdmNqTXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdJblpsWXpNaU93b2dJQ0FnZlNCbGJITmxJR2xtSUNodlltb2dhVzV6ZEdGdVkyVnZaaUJVU0ZKRlJTNVdaV04wYjNJMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlDSjJaV00wSWpzS0lDQWdJSDBnWld4elpTQnBaaUFvYjJKcUlHbHVjM1JoYm1ObGIyWWdWRWhTUlVVdVEyOXNiM0lwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnSW5abFl6UWlPd29nSUNBZ2ZTQmxiSE5sSUdsbUlDaHZZbW9nYVc1emRHRnVZMlZ2WmlCVVNGSkZSUzVOWVhSeWFYZ3pLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJQ0p0WVhReklqc0tJQ0FnSUgwZ1pXeHpaU0JwWmlBb2IySnFJR2x1YzNSaGJtTmxiMllnVkVoU1JVVXVUV0YwY21sNE5Da2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQWliV0YwTkNJN0NpQWdJQ0I5SUdWc2MyVWdhV1lnS0c5aWFpQnBibk4wWVc1alpXOW1JRlJJVWtWRkxsUmxlSFIxY21VcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z0luTmhiWEJzWlhJeVJDSTdDaUFnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lIMEtmUXBtZFc1amRHbHZiaUIxYm1sbWIzSnRjMTkwYjE5MGVYQmxYMlJsWTJ4aGNtRjBhVzl1S0hWdWFXWnZjbTFmWkdsamRDa2dld29nSUNBZ2JHVjBJSEpsYzNWc2RDQTlJQ0lpT3dvZ0lDQWdabTl5S0dOdmJuTjBJRzVoYldVZ2FXNGdkVzVwWm05eWJWOWthV04wS1hzS0lDQWdJQ0FnSUNCamIyNXpkQ0IxYm1sbWIzSnRJRDBnZFc1cFptOXliVjlrYVdOMFcyNWhiV1ZkT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSFI1Y0dVZ1BTQjFibWxtYjNKdFgzUjVjR1VvZFc1cFptOXliU2s3Q2lBZ0lDQWdJQ0FnY21WemRXeDBJQ3M5SUdCMWJtbG1iM0p0SUNSN2RIbHdaWDBnSkh0dVlXMWxmVHRjYm1BN0NpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2NtVnpkV3gwT3dwOUNtWjFibU4wYVc5dUlHRjBkSEpwWW5WMFpYTmZkRzlmZEhsd1pWOWtaV05zWVhKaGRHbHZiaWhoZEhSeWFXSjFkR1Z6WDJScFkzUXBJSHNLSUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0FpSWpzS0lDQWdJR1p2Y2loamIyNXpkQ0J1WVcxbElHbHVJR0YwZEhKcFluVjBaWE5mWkdsamRDbDdDaUFnSUNBZ0lDQWdZMjl1YzNRZ1lYUjBjbWxpZFhSbElEMGdZWFIwY21saWRYUmxjMTlrYVdOMFcyNWhiV1ZkT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSFI1Y0dVZ1BTQmhkSFJ5YVdKMWRHVmZkSGx3WlNoaGRIUnlhV0oxZEdVcE93b2dJQ0FnSUNBZ0lISmxjM1ZzZENBclBTQmdhVzRnSkh0MGVYQmxmU0FrZTI1aGJXVjlPMXh1WURzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3Q24wS1kyOXVjM1FnWDJOb1lXNW5aVVYyWlc1MElEMGdld29nSUNBZ2RIbHdaVG9nSW1Ob1lXNW5aU0lLZlRzS1kyOXVjM1FnWDNOMFlYSjBSWFpsYm5RZ1BTQjdDaUFnSUNCMGVYQmxPaUFpYzNSaGNuUWlDbjA3Q21OdmJuTjBJRjlsYm1SRmRtVnVkQ0E5SUhzS0lDQWdJSFI1Y0dVNklDSmxibVFpQ24wN0NtTnZibk4wSUY5eVlYa2dQU0J1WlhjZ2FHa29LVHNLWTI5dWMzUWdYM0JzWVc1bElEMGdibVYzSUcxdUtDazdDbU52Ym5OMElGUkpURlJmVEVsTlNWUWdQU0JOWVhSb0xtTnZjeWczTUNBcUlIbDJMa1JGUnpKU1FVUXBPd3BqYkdGemN5QlBjbUpwZEVOdmJuUnliMnh6SUdWNGRHVnVaSE1nYzI0Z2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb2IySnFaV04wTENCa2IyMUZiR1Z0Wlc1MExDQmhiR3h2ZDE5MWNHUmhkR1VzSUdselgybHVYM05qWlc1bEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncE93b2dJQ0FnSUNBZ0lIUm9hWE11YjJKcVpXTjBJRDBnYjJKcVpXTjBPd29nSUNBZ0lDQWdJSFJvYVhNdVpHOXRSV3hsYldWdWRDQTlJR1J2YlVWc1pXMWxiblE3Q2lBZ0lDQWdJQ0FnZEdocGN5NWtiMjFGYkdWdFpXNTBMbk4wZVd4bExuUnZkV05vUVdOMGFXOXVJRDBnSW01dmJtVWlPd29nSUNBZ0lDQWdJSFJvYVhNdVpXNWhZbXhsWkNBOUlIUnlkV1U3Q2lBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhRZ1BTQnVaWGNnUVNncE93b2dJQ0FnSUNBZ0lIUm9hWE11WTNWeWMyOXlJRDBnYm1WM0lFRW9LVHNLSUNBZ0lDQWdJQ0IwYUdsekxtMXBia1JwYzNSaGJtTmxJRDBnTURzS0lDQWdJQ0FnSUNCMGFHbHpMbTFoZUVScGMzUmhibU5sSUQwZ1NXNW1hVzVwZEhrN0NpQWdJQ0FnSUNBZ2RHaHBjeTV0YVc1YWIyOXRJRDBnTURzS0lDQWdJQ0FnSUNCMGFHbHpMbTFoZUZwdmIyMGdQU0JKYm1acGJtbDBlVHNLSUNBZ0lDQWdJQ0IwYUdsekxtMXBibFJoY21kbGRGSmhaR2wxY3lBOUlEQTdDaUFnSUNBZ0lDQWdkR2hwY3k1dFlYaFVZWEpuWlhSU1lXUnBkWE1nUFNCSmJtWnBibWwwZVRzS0lDQWdJQ0FnSUNCMGFHbHpMbTFwYmxCdmJHRnlRVzVuYkdVZ1BTQXdPd29nSUNBZ0lDQWdJSFJvYVhNdWJXRjRVRzlzWVhKQmJtZHNaU0E5SUUxaGRHZ3VVRWs3Q2lBZ0lDQWdJQ0FnZEdocGN5NXRhVzVCZW1sdGRYUm9RVzVuYkdVZ1BTQXRTVzVtYVc1cGRIazdDaUFnSUNBZ0lDQWdkR2hwY3k1dFlYaEJlbWx0ZFhSb1FXNW5iR1VnUFNCSmJtWnBibWwwZVRzS0lDQWdJQ0FnSUNCMGFHbHpMbVZ1WVdKc1pVUmhiWEJwYm1jZ1BTQm1ZV3h6WlRzS0lDQWdJQ0FnSUNCMGFHbHpMbVJoYlhCcGJtZEdZV04wYjNJZ1BTQXdMakExT3dvZ0lDQWdJQ0FnSUhSb2FYTXVaVzVoWW14bFdtOXZiU0E5SUhSeWRXVTdDaUFnSUNBZ0lDQWdkR2hwY3k1NmIyOXRVM0JsWldRZ1BTQXhMakE3Q2lBZ0lDQWdJQ0FnZEdocGN5NWxibUZpYkdWU2IzUmhkR1VnUFNCMGNuVmxPd29nSUNBZ0lDQWdJSFJvYVhNdWNtOTBZWFJsVTNCbFpXUWdQU0F4TGpBN0NpQWdJQ0FnSUNBZ2RHaHBjeTVsYm1GaWJHVlFZVzRnUFNCMGNuVmxPd29nSUNBZ0lDQWdJSFJvYVhNdWNHRnVVM0JsWldRZ1BTQXhMakE3Q2lBZ0lDQWdJQ0FnZEdocGN5NXpZM0psWlc1VGNHRmpaVkJoYm01cGJtY2dQU0IwY25WbE93b2dJQ0FnSUNBZ0lIUm9hWE11YTJWNVVHRnVVM0JsWldRZ1BTQTNMakE3Q2lBZ0lDQWdJQ0FnZEdocGN5NTZiMjl0Vkc5RGRYSnpiM0lnUFNCbVlXeHpaVHNLSUNBZ0lDQWdJQ0IwYUdsekxtRjFkRzlTYjNSaGRHVWdQU0JtWVd4elpUc0tJQ0FnSUNBZ0lDQjBhR2x6TG1GMWRHOVNiM1JoZEdWVGNHVmxaQ0E5SURJdU1Ec0tJQ0FnSUNBZ0lDQjBhR2x6TG10bGVYTWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lFeEZSbFE2SUNKQmNuSnZkMHhsWm5RaUxBb2dJQ0FnSUNBZ0lDQWdJQ0JWVURvZ0lrRnljbTkzVlhBaUxBb2dJQ0FnSUNBZ0lDQWdJQ0JTU1VkSVZEb2dJa0Z5Y205M1VtbG5hSFFpTEFvZ0lDQWdJQ0FnSUNBZ0lDQkNUMVJVVDAwNklDSkJjbkp2ZDBSdmQyNGlDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUW5WMGRHOXVjeUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdURVZHVkRvZ2VuZ3VVazlVUVZSRkxBb2dJQ0FnSUNBZ0lDQWdJQ0JOU1VSRVRFVTZJSHA0TGtSUFRFeFpMQW9nSUNBZ0lDQWdJQ0FnSUNCU1NVZElWRG9nZW5ndVVFRk9DaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUnZkV05vWlhNZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUU5T1JUb2dWbmd1VWs5VVFWUkZMQW9nSUNBZ0lDQWdJQ0FnSUNCVVYwODZJRlo0TGtSUFRFeFpYMUJCVGdvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwWVhKblpYUXdJRDBnZEdocGN5NTBZWEpuWlhRdVkyeHZibVVvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbkJ2YzJsMGFXOXVNQ0E5SUhSb2FYTXViMkpxWldOMExuQnZjMmwwYVc5dUxtTnNiMjVsS0NrN0NpQWdJQ0FnSUNBZ2RHaHBjeTU2YjI5dE1DQTlJSFJvYVhNdWIySnFaV04wTG5wdmIyMDdDaUFnSUNBZ0lDQWdkR2hwY3k1ZlpHOXRSV3hsYldWdWRFdGxlVVYyWlc1MGN5QTlJRzUxYkd3N0NpQWdJQ0FnSUNBZ2RHaHBjeTVuWlhSUWIyeGhja0Z1WjJ4bElEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemNHaGxjbWxqWVd3dWNHaHBPd29nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnZEdocGN5NW5aWFJCZW1sdGRYUm9ZV3hCYm1kc1pTQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzQm9aWEpwWTJGc0xuUm9aWFJoT3dvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ2RHaHBjeTVuWlhSRWFYTjBZVzVqWlNBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXZZbXBsWTNRdWNHOXphWFJwYjI0dVpHbHpkR0Z1WTJWVWJ5aDBhR2x6TG5SaGNtZGxkQ2s3Q2lBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCMGFHbHpMbXhwYzNSbGJsUnZTMlY1UlhabGJuUnpJRDBnWm5WdVkzUnBiMjRvWkc5dFJXeGxiV1Z1ZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JrYjIxRmJHVnRaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW10bGVXUnZkMjRpTENCdmJrdGxlVVJ2ZDI0cE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWtiMjFGYkdWdFpXNTBTMlY1UlhabGJuUnpJRDBnWkc5dFJXeGxiV1Z1ZERzS0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lIUm9hWE11YzNSdmNFeHBjM1JsYmxSdlMyVjVSWFpsYm5SeklEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJSdmJVVnNaVzFsYm5STFpYbEZkbVZ1ZEhNdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2lhMlY1Wkc5M2JpSXNJRzl1UzJWNVJHOTNiaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJSdmJVVnNaVzFsYm5STFpYbEZkbVZ1ZEhNZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ2RHaHBjeTV6WVhabFUzUmhkR1VnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXVkR0Z5WjJWME1DNWpiM0I1S0hOamIzQmxMblJoY21kbGRDazdDaUFnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMbkJ2YzJsMGFXOXVNQzVqYjNCNUtITmpiM0JsTG05aWFtVmpkQzV3YjNOcGRHbHZiaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG5wdmIyMHdJRDBnYzJOdmNHVXViMkpxWldOMExucHZiMjA3Q2lBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzJWMElEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG5SaGNtZGxkQzVqYjNCNUtITmpiM0JsTG5SaGNtZGxkREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1dlltcGxZM1F1Y0c5emFYUnBiMjR1WTI5d2VTaHpZMjl3WlM1d2IzTnBkR2x2YmpBcE93b2dJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNXZZbXBsWTNRdWVtOXZiU0E5SUhOamIzQmxMbnB2YjIwd093b2dJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNXZZbXBsWTNRdWRYQmtZWFJsVUhKdmFtVmpkR2x2YmsxaGRISnBlQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1a2FYTndZWFJqYUVWMlpXNTBLRjlqYUdGdVoyVkZkbVZ1ZENrN0NpQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExuVndaR0YwWlNncE93b2dJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMFpTQTlJRk5VUVZSRkxrNVBUa1U3Q2lBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpTQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdlptWnpaWFFnUFNCdVpYY2dRU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeGRXRjBJRDBnYm1WM0lGVjBLQ2t1YzJWMFJuSnZiVlZ1YVhSV1pXTjBiM0p6S0c5aWFtVmpkQzUxY0N3Z2JtVjNJRUVvTUN3Z01Td2dNQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeGRXRjBTVzUyWlhKelpTQTlJSEYxWVhRdVkyeHZibVVvS1M1cGJuWmxjblFvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JHRnpkRkJ2YzJsMGFXOXVJRDBnYm1WM0lFRW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYkdGemRGRjFZWFJsY201cGIyNGdQU0J1WlhjZ1ZYUW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYkdGemRGUmhjbWRsZEZCdmMybDBhVzl1SUQwZ2JtVjNJRUVvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RIZHZVRWtnUFNBeUlDb2dUV0YwYUM1UVNUc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVJSFZ3WkdGMFpTaGtaV3gwWVZScGJXVWdQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdGc2JHOTNYM1Z3WkdGMFpTZ3BLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjRzl6YVhScGIyNGdQU0J6WTI5d1pTNXZZbXBsWTNRdWNHOXphWFJwYjI0N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFF1WTI5d2VTaHdiM05wZEdsdmJpa3VjM1ZpS0hOamIzQmxMblJoY21kbGRDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZabVp6WlhRdVlYQndiSGxSZFdGMFpYSnVhVzl1S0hGMVlYUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JvWlhKcFkyRnNMbk5sZEVaeWIyMVdaV04wYjNJektHOW1abk5sZENrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk52Y0dVdVlYVjBiMUp2ZEdGMFpTQW1KaUJ6ZEdGMFpTQTlQVDBnVTFSQlZFVXVUazlPUlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEp2ZEdGMFpVeGxablFvWjJWMFFYVjBiMUp2ZEdGMGFXOXVRVzVuYkdVb1pHVnNkR0ZVYVcxbEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOdmNHVXVaVzVoWW14bFJHRnRjR2x1WnlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53YUdWeWFXTmhiQzUwYUdWMFlTQXJQU0J6Y0dobGNtbGpZV3hFWld4MFlTNTBhR1YwWVNBcUlITmpiM0JsTG1SaGJYQnBibWRHWVdOMGIzSTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCb1pYSnBZMkZzTG5Cb2FTQXJQU0J6Y0dobGNtbGpZV3hFWld4MFlTNXdhR2tnS2lCelkyOXdaUzVrWVcxd2FXNW5SbUZqZEc5eU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjR2hsY21sallXd3VkR2hsZEdFZ0t6MGdjM0JvWlhKcFkyRnNSR1ZzZEdFdWRHaGxkR0U3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzQm9aWEpwWTJGc0xuQm9hU0FyUFNCemNHaGxjbWxqWVd4RVpXeDBZUzV3YUdrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiV2x1SUQwZ2MyTnZjR1V1YldsdVFYcHBiWFYwYUVGdVoyeGxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcxaGVDQTlJSE5qYjNCbExtMWhlRUY2YVcxMWRHaEJibWRzWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMFpwYm1sMFpTaHRhVzRwSUNZbUlHbHpSbWx1YVhSbEtHMWhlQ2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYldsdUlEd2dMVTFoZEdndVVFa3BJRzFwYmlBclBTQjBkMjlRU1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaHRhVzRnUGlCTllYUm9MbEJKS1NCdGFXNGdMVDBnZEhkdlVFazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWhlQ0E4SUMxTllYUm9MbEJKS1NCdFlYZ2dLejBnZEhkdlVFazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvYldGNElENGdUV0YwYUM1UVNTa2diV0Y0SUMwOUlIUjNiMUJKT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0YVc0Z1BEMGdiV0Y0S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOd2FHVnlhV05oYkM1MGFHVjBZU0E5SUUxaGRHZ3ViV0Y0S0cxcGJpd2dUV0YwYUM1dGFXNG9iV0Y0TENCemNHaGxjbWxqWVd3dWRHaGxkR0VwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNHaGxjbWxqWVd3dWRHaGxkR0VnUFNCemNHaGxjbWxqWVd3dWRHaGxkR0VnUGlBb2JXbHVJQ3NnYldGNEtTQXZJRElnUHlCTllYUm9MbTFoZUNodGFXNHNJSE53YUdWeWFXTmhiQzUwYUdWMFlTa2dPaUJOWVhSb0xtMXBiaWh0WVhnc0lITndhR1Z5YVdOaGJDNTBhR1YwWVNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0JvWlhKcFkyRnNMbkJvYVNBOUlFMWhkR2d1YldGNEtITmpiM0JsTG0xcGJsQnZiR0Z5UVc1bmJHVXNJRTFoZEdndWJXbHVLSE5qYjNCbExtMWhlRkJ2YkdGeVFXNW5iR1VzSUhOd2FHVnlhV05oYkM1d2FHa3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53YUdWeWFXTmhiQzV0WVd0bFUyRm1aU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmpiM0JsTG1WdVlXSnNaVVJoYlhCcGJtY2dQVDA5SUhSeWRXVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyOXdaUzUwWVhKblpYUXVZV1JrVTJOaGJHVmtWbVZqZEc5eUtIQmhiazltWm5ObGRDd2djMk52Y0dVdVpHRnRjR2x1WjBaaFkzUnZjaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMblJoY21kbGRDNWhaR1FvY0dGdVQyWm1jMlYwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMblJoY21kbGRDNXpkV0lvYzJOdmNHVXVZM1Z5YzI5eUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG5SaGNtZGxkQzVqYkdGdGNFeGxibWQwYUNoelkyOXdaUzV0YVc1VVlYSm5aWFJTWVdScGRYTXNJSE5qYjNCbExtMWhlRlJoY21kbGRGSmhaR2wxY3lrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyOXdaUzUwWVhKblpYUXVZV1JrS0hOamIzQmxMbU4xY25OdmNpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOdmNHVXVlbTl2YlZSdlEzVnljMjl5SUNZbUlIQmxjbVp2Y20xRGRYSnpiM0phYjI5dElIeDhJSE5qYjNCbExtOWlhbVZqZEM1cGMwOXlkR2h2WjNKaGNHaHBZME5oYldWeVlTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOd2FHVnlhV05oYkM1eVlXUnBkWE1nUFNCamJHRnRjRVJwYzNSaGJtTmxLSE53YUdWeWFXTmhiQzV5WVdScGRYTXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dobGNtbGpZV3d1Y21Ga2FYVnpJRDBnWTJ4aGJYQkVhWE4wWVc1alpTaHpjR2hsY21sallXd3VjbUZrYVhWeklDb2djMk5oYkdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyWm1jMlYwTG5ObGRFWnliMjFUY0dobGNtbGpZV3dvYzNCb1pYSnBZMkZzS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkQzVoY0hCc2VWRjFZWFJsY201cGIyNG9jWFZoZEVsdWRtVnljMlVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjR1WTI5d2VTaHpZMjl3WlM1MFlYSm5aWFFwTG1Ga1pDaHZabVp6WlhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1YjJKcVpXTjBMbXh2YjJ0QmRDaHpZMjl3WlM1MFlYSm5aWFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmpiM0JsTG1WdVlXSnNaVVJoYlhCcGJtY2dQVDA5SUhSeWRXVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNHaGxjbWxqWVd4RVpXeDBZUzUwYUdWMFlTQXFQU0F4SUMwZ2MyTnZjR1V1WkdGdGNHbHVaMFpoWTNSdmNqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dobGNtbGpZV3hFWld4MFlTNXdhR2tnS2owZ01TQXRJSE5qYjNCbExtUmhiWEJwYm1kR1lXTjBiM0k3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRnVUMlptYzJWMExtMTFiSFJwY0d4NVUyTmhiR0Z5S0RFZ0xTQnpZMjl3WlM1a1lXMXdhVzVuUm1GamRHOXlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCb1pYSnBZMkZzUkdWc2RHRXVjMlYwS0RBc0lEQXNJREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhiazltWm5ObGRDNXpaWFFvTUN3Z01Dd2dNQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VtOXZiVU5vWVc1blpXUWdQU0JtWVd4elpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6WTI5d1pTNTZiMjl0Vkc5RGRYSnpiM0lnSmlZZ2NHVnlabTl5YlVOMWNuTnZjbHB2YjIwcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JtVjNVbUZrYVhWeklEMGdiblZzYkRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOdmNHVXViMkpxWldOMExtbHpVR1Z5YzNCbFkzUnBkbVZEWVcxbGNtRXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NISmxkbEpoWkdsMWN5QTlJRzltWm5ObGRDNXNaVzVuZEdnb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNVbUZrYVhWeklEMGdZMnhoYlhCRWFYTjBZVzVqWlNod2NtVjJVbUZrYVhWeklDb2djMk5oYkdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5WVdScGRYTkVaV3gwWVNBOUlIQnlaWFpTWVdScGRYTWdMU0J1WlhkU1lXUnBkWE03Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExtOWlhbVZqZEM1d2IzTnBkR2x2Ymk1aFpHUlRZMkZzWldSV1pXTjBiM0lvWkc5c2JIbEVhWEpsWTNScGIyNHNJSEpoWkdsMWMwUmxiSFJoS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXViMkpxWldOMExuVndaR0YwWlUxaGRISnBlRmR2Y214a0tDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoelkyOXdaUzV2WW1wbFkzUXVhWE5QY25Sb2IyZHlZWEJvYVdORFlXMWxjbUVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiVzkxYzJWQ1pXWnZjbVVnUFNCdVpYY2dRU2h0YjNWelpTNTRMQ0J0YjNWelpTNTVMQ0F3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVkNaV1p2Y21VdWRXNXdjbTlxWldOMEtITmpiM0JsTG05aWFtVmpkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExtOWlhbVZqZEM1NmIyOXRJRDBnVFdGMGFDNXRZWGdvYzJOdmNHVXViV2x1V205dmJTd2dUV0YwYUM1dGFXNG9jMk52Y0dVdWJXRjRXbTl2YlN3Z2MyTnZjR1V1YjJKcVpXTjBMbnB2YjIwZ0x5QnpZMkZzWlNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyOXdaUzV2WW1wbFkzUXVkWEJrWVhSbFVISnZhbVZqZEdsdmJrMWhkSEpwZUNncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNmIyOXRRMmhoYm1kbFpDQTlJSFJ5ZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzF2ZFhObFFXWjBaWElnUFNCdVpYY2dRU2h0YjNWelpTNTRMQ0J0YjNWelpTNTVMQ0F3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVkJablJsY2k1MWJuQnliMnBsWTNRb2MyTnZjR1V1YjJKcVpXTjBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk52Y0dVdWIySnFaV04wTG5CdmMybDBhVzl1TG5OMVlpaHRiM1Z6WlVGbWRHVnlLUzVoWkdRb2JXOTFjMlZDWldadmNtVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1dlltcGxZM1F1ZFhCa1lYUmxUV0YwY21sNFYyOXliR1FvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1VtRmthWFZ6SUQwZ2IyWm1jMlYwTG14bGJtZDBhQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWMEZTVGtsT1J6b2dUM0ppYVhSRGIyNTBjbTlzY3k1cWN5QmxibU52ZFc1MFpYSmxaQ0JoYmlCMWJtdHViM2R1SUdOaGJXVnlZU0IwZVhCbElDMGdlbTl2YlNCMGJ5QmpkWEp6YjNJZ1pHbHpZV0pzWldRdUlpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG5wdmIyMVViME4xY25OdmNpQTlJR1poYkhObE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ibVYzVW1Ga2FYVnpJQ0U5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk5qY21WbGJsTndZV05sVUdGdWJtbHVaeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1ZEdGeVoyVjBMbk5sZENnd0xDQXdMQ0F0TVNrdWRISmhibk5tYjNKdFJHbHlaV04wYVc5dUtITmpiM0JsTG05aWFtVmpkQzV0WVhSeWFYZ3BMbTExYkhScGNHeDVVMk5oYkdGeUtHNWxkMUpoWkdsMWN5a3VZV1JrS0hOamIzQmxMbTlpYW1WamRDNXdiM05wZEdsdmJpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZjbUY1TG05eWFXZHBiaTVqYjNCNUtITmpiM0JsTG05aWFtVmpkQzV3YjNOcGRHbHZiaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmNtRjVMbVJwY21WamRHbHZiaTV6WlhRb01Dd2dNQ3dnTFRFcExuUnlZVzV6Wm05eWJVUnBjbVZqZEdsdmJpaHpZMjl3WlM1dlltcGxZM1F1YldGMGNtbDRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaE5ZWFJvTG1GaWN5aHpZMjl3WlM1dlltcGxZM1F1ZFhBdVpHOTBLRjl5WVhrdVpHbHlaV04wYVc5dUtTa2dQQ0JVU1V4VVgweEpUVWxVS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBMbXh2YjJ0QmRDaHpZMjl3WlM1MFlYSm5aWFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmY0d4aGJtVXVjMlYwUm5KdmJVNXZjbTFoYkVGdVpFTnZjR3hoYm1GeVVHOXBiblFvYzJOdmNHVXViMkpxWldOMExuVndMQ0J6WTI5d1pTNTBZWEpuWlhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5eVlYa3VhVzUwWlhKelpXTjBVR3hoYm1Vb1gzQnNZVzVsTENCelkyOXdaUzUwWVhKblpYUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpZMjl3WlM1dlltcGxZM1F1YVhOUGNuUm9iMmR5WVhCb2FXTkRZVzFsY21FcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNXZZbXBsWTNRdWVtOXZiU0E5SUUxaGRHZ3ViV0Y0S0hOamIzQmxMbTFwYmxwdmIyMHNJRTFoZEdndWJXbHVLSE5qYjNCbExtMWhlRnB2YjIwc0lITmpiM0JsTG05aWFtVmpkQzU2YjI5dElDOGdjMk5oYkdVcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNXZZbXBsWTNRdWRYQmtZWFJsVUhKdmFtVmpkR2x2YmsxaGRISnBlQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIcHZiMjFEYUdGdVoyVmtJRDBnZEhKMVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpZV3hsSUQwZ01Uc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmxjbVp2Y20xRGRYSnpiM0phYjI5dElEMGdabUZzYzJVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9lbTl2YlVOb1lXNW5aV1FnZkh3Z2JHRnpkRkJ2YzJsMGFXOXVMbVJwYzNSaGJtTmxWRzlUY1hWaGNtVmtLSE5qYjNCbExtOWlhbVZqZEM1d2IzTnBkR2x2YmlrZ1BpQkZVRk1nZkh3Z09DQXFJQ2d4SUMwZ2JHRnpkRkYxWVhSbGNtNXBiMjR1Wkc5MEtITmpiM0JsTG05aWFtVmpkQzV4ZFdGMFpYSnVhVzl1S1NrZ1BpQkZVRk1nZkh3Z2JHRnpkRlJoY21kbGRGQnZjMmwwYVc5dUxtUnBjM1JoYm1ObFZHOVRjWFZoY21Wa0tITmpiM0JsTG5SaGNtZGxkQ2tnUGlBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOdmNHVXVaR2x6Y0dGMFkyaEZkbVZ1ZENoZlkyaGhibWRsUlhabGJuUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aGMzUlFiM05wZEdsdmJpNWpiM0I1S0hOamIzQmxMbTlpYW1WamRDNXdiM05wZEdsdmJpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGemRGRjFZWFJsY201cGIyNHVZMjl3ZVNoelkyOXdaUzV2WW1wbFkzUXVjWFZoZEdWeWJtbHZiaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRnpkRlJoY21kbGRGQnZjMmwwYVc5dUxtTnZjSGtvYzJOdmNHVXVkR0Z5WjJWMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I2YjI5dFEyaGhibWRsWkNBOUlHWmhiSE5sT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJSDBvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbVJwYzNCdmMyVWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjMk52Y0dVdVpHOXRSV3hsYldWdWRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ0pqYjI1MFpYaDBiV1Z1ZFNJc0lHOXVRMjl1ZEdWNGRFMWxiblVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1a2IyMUZiR1Z0Wlc1MExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9JbkJ2YVc1MFpYSmtiM2R1SWl3Z2IyNVFiMmx1ZEdWeVJHOTNiaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG1SdmJVVnNaVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2ljRzlwYm5SbGNtTmhibU5sYkNJc0lHOXVVRzlwYm5SbGNsVndLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1Wkc5dFJXeGxiV1Z1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDSjNhR1ZsYkNJc0lHOXVUVzkxYzJWWGFHVmxiQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG1SdmJVVnNaVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2ljRzlwYm5SbGNtMXZkbVVpTENCdmJsQnZhVzUwWlhKTmIzWmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1Wkc5dFJXeGxiV1Z1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDSndiMmx1ZEdWeWRYQWlMQ0J2YmxCdmFXNTBaWEpWY0NrN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelkyOXdaUzVmWkc5dFJXeGxiV1Z1ZEV0bGVVVjJaVzUwY3lBaFBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1WDJSdmJVVnNaVzFsYm5STFpYbEZkbVZ1ZEhNdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2lhMlY1Wkc5M2JpSXNJRzl1UzJWNVJHOTNiaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNWZaRzl0Uld4bGJXVnVkRXRsZVVWMlpXNTBjeUE5SUc1MWJHdzdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lHTnZibk4wSUhOamIzQmxJRDBnZEdocGN6c0tJQ0FnSUNBZ0lDQmpiMjV6ZENCVFZFRlVSU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdUazlPUlRvZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUZKUFZFRlVSVG9nTUN3S0lDQWdJQ0FnSUNBZ0lDQWdSRTlNVEZrNklERXNDaUFnSUNBZ0lDQWdJQ0FnSUZCQlRqb2dNaXdLSUNBZ0lDQWdJQ0FnSUNBZ1ZFOVZRMGhmVWs5VVFWUkZPaUF6TEFvZ0lDQWdJQ0FnSUNBZ0lDQlVUMVZEU0Y5UVFVNDZJRFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lGUlBWVU5JWDBSUFRFeFpYMUJCVGpvZ05Td0tJQ0FnSUNBZ0lDQWdJQ0FnVkU5VlEwaGZSRTlNVEZsZlVrOVVRVlJGT2lBMkNpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQnNaWFFnYzNSaGRHVWdQU0JUVkVGVVJTNU9UMDVGT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJRVZRVXlBOUlEQXVNREF3TURBeE93b2dJQ0FnSUNBZ0lHTnZibk4wSUhOd2FHVnlhV05oYkNBOUlHNWxkeUJQZFNncE93b2dJQ0FnSUNBZ0lHTnZibk4wSUhOd2FHVnlhV05oYkVSbGJIUmhJRDBnYm1WM0lFOTFLQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElITmpZV3hsSUQwZ01Uc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lXNVBabVp6WlhRZ1BTQnVaWGNnUVNncE93b2dJQ0FnSUNBZ0lHTnZibk4wSUhKdmRHRjBaVk4wWVhKMElEMGdibVYzSUZvb0tUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCeWIzUmhkR1ZGYm1RZ1BTQnVaWGNnV2lncE93b2dJQ0FnSUNBZ0lHTnZibk4wSUhKdmRHRjBaVVJsYkhSaElEMGdibVYzSUZvb0tUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lXNVRkR0Z5ZENBOUlHNWxkeUJhS0NrN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGdVJXNWtJRDBnYm1WM0lGb29LVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQndZVzVFWld4MFlTQTlJRzVsZHlCYUtDazdDaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHOXNiSGxUZEdGeWRDQTlJRzVsZHlCYUtDazdDaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHOXNiSGxGYm1RZ1BTQnVaWGNnV2lncE93b2dJQ0FnSUNBZ0lHTnZibk4wSUdSdmJHeDVSR1ZzZEdFZ1BTQnVaWGNnV2lncE93b2dJQ0FnSUNBZ0lHTnZibk4wSUdSdmJHeDVSR2x5WldOMGFXOXVJRDBnYm1WM0lFRW9LVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQnRiM1Z6WlNBOUlHNWxkeUJhS0NrN0NpQWdJQ0FnSUNBZ2JHVjBJSEJsY21admNtMURkWEp6YjNKYWIyOXRJRDBnWm1Gc2MyVTdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2NHOXBiblJsY25NZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQndiMmx1ZEdWeVVHOXphWFJwYjI1eklEMGdlMzA3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWjJWMFFYVjBiMUp2ZEdGMGFXOXVRVzVuYkdVb1pHVnNkR0ZVYVcxbEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtaV3gwWVZScGJXVWdJVDA5SUc1MWJHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQXlJQ29nVFdGMGFDNVFTU0F2SURZd0lDb2djMk52Y0dVdVlYVjBiMUp2ZEdGMFpWTndaV1ZrSUNvZ1pHVnNkR0ZVYVcxbE93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlESWdLaUJOWVhSb0xsQkpJQzhnTmpBZ0x5QTJNQ0FxSUhOamIzQmxMbUYxZEc5U2IzUmhkR1ZUY0dWbFpEc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCblpYUmFiMjl0VTJOaGJHVW9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbkJ2ZHlnd0xqazFMQ0J6WTI5d1pTNTZiMjl0VTNCbFpXUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ5YjNSaGRHVk1aV1owS0dGdVoyeGxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lITndhR1Z5YVdOaGJFUmxiSFJoTG5Sb1pYUmhJQzA5SUdGdVoyeGxPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ5YjNSaGRHVlZjQ2hoYm1kc1pTa2dld29nSUNBZ0lDQWdJQ0FnSUNCemNHaGxjbWxqWVd4RVpXeDBZUzV3YUdrZ0xUMGdZVzVuYkdVN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHTnZibk4wSUhCaGJreGxablFnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkaUE5SUc1bGR5QkJLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCd1lXNU1aV1owS0dScGMzUmhibU5sTENCdlltcGxZM1JOWVhSeWFYZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFl1YzJWMFJuSnZiVTFoZEhKcGVFTnZiSFZ0YmlodlltcGxZM1JOWVhSeWFYZ3NJREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZGk1dGRXeDBhWEJzZVZOallXeGhjaWd0WkdsemRHRnVZMlVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGdVQyWm1jMlYwTG1Ga1pDaDJLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQjlLQ2s3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdjR0Z1VlhBZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZGlBOUlHNWxkeUJCS0NrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQndZVzVWY0Noa2FYTjBZVzVqWlN3Z2IySnFaV04wVFdGMGNtbDRLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyTnZjR1V1YzJOeVpXVnVVM0JoWTJWUVlXNXVhVzVuSUQwOVBTQjBjblZsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkaTV6WlhSR2NtOXRUV0YwY21sNFEyOXNkVzF1S0c5aWFtVmpkRTFoZEhKcGVDd2dNU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZdWMyVjBSbkp2YlUxaGRISnBlRU52YkhWdGJpaHZZbXBsWTNSTllYUnlhWGdzSURBcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFl1WTNKdmMzTldaV04wYjNKektITmpiM0JsTG05aWFtVmpkQzUxY0N3Z2RpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJMbTExYkhScGNHeDVVMk5oYkdGeUtHUnBjM1JoYm1ObEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhiazltWm5ObGRDNWhaR1FvZGlrN0NpQWdJQ0FnSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnZlNncE93b2dJQ0FnSUNBZ0lHTnZibk4wSUhCaGJpQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdlptWnpaWFFnUFNCdVpYY2dRU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2NHRnVLR1JsYkhSaFdDd2daR1ZzZEdGWktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbGJHVnRaVzUwSUQwZ2MyTnZjR1V1Wkc5dFJXeGxiV1Z1ZERzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMjl3WlM1dlltcGxZM1F1YVhOUVpYSnpjR1ZqZEdsMlpVTmhiV1Z5WVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQnZjMmwwYVc5dUlEMGdjMk52Y0dVdWIySnFaV04wTG5CdmMybDBhVzl1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZEM1amIzQjVLSEJ2YzJsMGFXOXVLUzV6ZFdJb2MyTnZjR1V1ZEdGeVoyVjBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkR0Z5WjJWMFJHbHpkR0Z1WTJVZ1BTQnZabVp6WlhRdWJHVnVaM1JvS0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFJHbHpkR0Z1WTJVZ0tqMGdUV0YwYUM1MFlXNG9jMk52Y0dVdWIySnFaV04wTG1admRpQXZJRElnS2lCTllYUm9MbEJKSUM4Z01UZ3dMakFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhia3hsWm5Rb01pQXFJR1JsYkhSaFdDQXFJSFJoY21kbGRFUnBjM1JoYm1ObElDOGdaV3hsYldWdWRDNWpiR2xsYm5SSVpXbG5hSFFzSUhOamIzQmxMbTlpYW1WamRDNXRZWFJ5YVhncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoYmxWd0tESWdLaUJrWld4MFlWa2dLaUIwWVhKblpYUkVhWE4wWVc1alpTQXZJR1ZzWlcxbGJuUXVZMnhwWlc1MFNHVnBaMmgwTENCelkyOXdaUzV2WW1wbFkzUXViV0YwY21sNEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jMk52Y0dVdWIySnFaV04wTG1selQzSjBhRzluY21Gd2FHbGpRMkZ0WlhKaEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGdVRHVm1kQ2hrWld4MFlWZ2dLaUFvYzJOdmNHVXViMkpxWldOMExuSnBaMmgwSUMwZ2MyTnZjR1V1YjJKcVpXTjBMbXhsWm5RcElDOGdjMk52Y0dVdWIySnFaV04wTG5wdmIyMGdMeUJsYkdWdFpXNTBMbU5zYVdWdWRGZHBaSFJvTENCelkyOXdaUzV2WW1wbFkzUXViV0YwY21sNEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVc1VmNDaGtaV3gwWVZrZ0tpQW9jMk52Y0dVdWIySnFaV04wTG5SdmNDQXRJSE5qYjNCbExtOWlhbVZqZEM1aWIzUjBiMjBwSUM4Z2MyTnZjR1V1YjJKcVpXTjBMbnB2YjIwZ0x5QmxiR1Z0Wlc1MExtTnNhV1Z1ZEVobGFXZG9kQ3dnYzJOdmNHVXViMkpxWldOMExtMWhkSEpwZUNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVjBGU1RrbE9Sem9nVDNKaWFYUkRiMjUwY205c2N5NXFjeUJsYm1OdmRXNTBaWEpsWkNCaGJpQjFibXR1YjNkdUlHTmhiV1Z5WVNCMGVYQmxJQzBnY0dGdUlHUnBjMkZpYkdWa0xpSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMbVZ1WVdKc1pWQmhiaUE5SUdaaGJITmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lIMG9LVHNLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJrYjJ4c2VVOTFkQ2hrYjJ4c2VWTmpZV3hsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelkyOXdaUzV2WW1wbFkzUXVhWE5RWlhKemNHVmpkR2wyWlVOaGJXVnlZU0I4ZkNCelkyOXdaUzV2WW1wbFkzUXVhWE5QY25Sb2IyZHlZWEJvYVdORFlXMWxjbUVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOallXeGxJQzg5SUdSdmJHeDVVMk5oYkdVN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxkQlVrNUpUa2M2SUU5eVltbDBRMjl1ZEhKdmJITXVhbk1nWlc1amIzVnVkR1Z5WldRZ1lXNGdkVzVyYm05M2JpQmpZVzFsY21FZ2RIbHdaU0F0SUdSdmJHeDVMM3B2YjIwZ1pHbHpZV0pzWldRdUlpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1bGJtRmliR1ZhYjI5dElEMGdabUZzYzJVN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWkc5c2JIbEpiaWhrYjJ4c2VWTmpZV3hsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelkyOXdaUzV2WW1wbFkzUXVhWE5RWlhKemNHVmpkR2wyWlVOaGJXVnlZU0I4ZkNCelkyOXdaUzV2WW1wbFkzUXVhWE5QY25Sb2IyZHlZWEJvYVdORFlXMWxjbUVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOallXeGxJQ285SUdSdmJHeDVVMk5oYkdVN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxkQlVrNUpUa2M2SUU5eVltbDBRMjl1ZEhKdmJITXVhbk1nWlc1amIzVnVkR1Z5WldRZ1lXNGdkVzVyYm05M2JpQmpZVzFsY21FZ2RIbHdaU0F0SUdSdmJHeDVMM3B2YjIwZ1pHbHpZV0pzWldRdUlpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1bGJtRmliR1ZhYjI5dElEMGdabUZzYzJVN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnZFhCa1lYUmxUVzkxYzJWUVlYSmhiV1YwWlhKektHVjJaVzUwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMyTnZjR1V1ZW05dmJWUnZRM1Z5YzI5eUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2NHVnlabTl5YlVOMWNuTnZjbHB2YjIwZ1BTQjBjblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpXTjBJRDBnYzJOdmNHVXVaRzl0Uld4bGJXVnVkQzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdlQ0E5SUdWMlpXNTBMbU5zYVdWdWRGZ2dMU0J5WldOMExteGxablE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhrZ1BTQmxkbVZ1ZEM1amJHbGxiblJaSUMwZ2NtVmpkQzUwYjNBN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIY2dQU0J5WldOMExuZHBaSFJvT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCb0lEMGdjbVZqZEM1b1pXbG5hSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sTG5nZ1BTQjRJQzhnZHlBcUlESWdMU0F4T3dvZ0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlM1NUlEMGdMU2g1SUM4Z2FDa2dLaUF5SUNzZ01Uc0tJQ0FnSUNBZ0lDQWdJQ0FnWkc5c2JIbEVhWEpsWTNScGIyNHVjMlYwS0cxdmRYTmxMbmdzSUcxdmRYTmxMbmtzSURFcExuVnVjSEp2YW1WamRDaHpZMjl3WlM1dlltcGxZM1FwTG5OMVlpaHpZMjl3WlM1dlltcGxZM1F1Y0c5emFYUnBiMjRwTG01dmNtMWhiR2w2WlNncE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmpiR0Z0Y0VScGMzUmhibU5sS0dScGMzUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3ViV0Y0S0hOamIzQmxMbTFwYmtScGMzUmhibU5sTENCTllYUm9MbTFwYmloelkyOXdaUzV0WVhoRWFYTjBZVzVqWlN3Z1pHbHpkQ2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCb1lXNWtiR1ZOYjNWelpVUnZkMjVTYjNSaGRHVW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY205MFlYUmxVM1JoY25RdWMyVjBLR1YyWlc1MExtTnNhV1Z1ZEZnc0lHVjJaVzUwTG1Oc2FXVnVkRmtwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCb1lXNWtiR1ZOYjNWelpVUnZkMjVFYjJ4c2VTaGxkbVZ1ZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVk5iM1Z6WlZCaGNtRnRaWFJsY25Nb1pYWmxiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmtiMnhzZVZOMFlYSjBMbk5sZENobGRtVnVkQzVqYkdsbGJuUllMQ0JsZG1WdWRDNWpiR2xsYm5SWktUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhR0Z1Wkd4bFRXOTFjMlZFYjNkdVVHRnVLR1YyWlc1MEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhCaGJsTjBZWEowTG5ObGRDaGxkbVZ1ZEM1amJHbGxiblJZTENCbGRtVnVkQzVqYkdsbGJuUlpLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYUdGdVpHeGxUVzkxYzJWTmIzWmxVbTkwWVhSbEtHVjJaVzUwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEp2ZEdGMFpVVnVaQzV6WlhRb1pYWmxiblF1WTJ4cFpXNTBXQ3dnWlhabGJuUXVZMnhwWlc1MFdTazdDaUFnSUNBZ0lDQWdJQ0FnSUhKdmRHRjBaVVJsYkhSaExuTjFZbFpsWTNSdmNuTW9jbTkwWVhSbFJXNWtMQ0J5YjNSaGRHVlRkR0Z5ZENrdWJYVnNkR2x3YkhsVFkyRnNZWElvYzJOdmNHVXVjbTkwWVhSbFUzQmxaV1FwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbGJHVnRaVzUwSUQwZ2MyTnZjR1V1Wkc5dFJXeGxiV1Z1ZERzS0lDQWdJQ0FnSUNBZ0lDQWdjbTkwWVhSbFRHVm1kQ2d5SUNvZ1RXRjBhQzVRU1NBcUlISnZkR0YwWlVSbGJIUmhMbmdnTHlCbGJHVnRaVzUwTG1Oc2FXVnVkRWhsYVdkb2RDazdDaUFnSUNBZ0lDQWdJQ0FnSUhKdmRHRjBaVlZ3S0RJZ0tpQk5ZWFJvTGxCSklDb2djbTkwWVhSbFJHVnNkR0V1ZVNBdklHVnNaVzFsYm5RdVkyeHBaVzUwU0dWcFoyaDBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtOTBZWFJsVTNSaGNuUXVZMjl3ZVNoeWIzUmhkR1ZGYm1RcE93b2dJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNTFjR1JoZEdVb0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhR0Z1Wkd4bFRXOTFjMlZOYjNabFJHOXNiSGtvWlhabGJuUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1pHOXNiSGxGYm1RdWMyVjBLR1YyWlc1MExtTnNhV1Z1ZEZnc0lHVjJaVzUwTG1Oc2FXVnVkRmtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmtiMnhzZVVSbGJIUmhMbk4xWWxabFkzUnZjbk1vWkc5c2JIbEZibVFzSUdSdmJHeDVVM1JoY25RcE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHOXNiSGxFWld4MFlTNTVJRDRnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOXNiSGxQZFhRb1oyVjBXbTl2YlZOallXeGxLQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1J2Ykd4NVJHVnNkR0V1ZVNBOElEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2Ykd4NVNXNG9aMlYwV205dmJWTmpZV3hsS0NrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHUnZiR3g1VTNSaGNuUXVZMjl3ZVNoa2IyeHNlVVZ1WkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExuVndaR0YwWlNncE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQm9ZVzVrYkdWTmIzVnpaVTF2ZG1WUVlXNG9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY0dGdVJXNWtMbk5sZENobGRtVnVkQzVqYkdsbGJuUllMQ0JsZG1WdWRDNWpiR2xsYm5SWktUc0tJQ0FnSUNBZ0lDQWdJQ0FnY0dGdVJHVnNkR0V1YzNWaVZtVmpkRzl5Y3lod1lXNUZibVFzSUhCaGJsTjBZWEowS1M1dGRXeDBhWEJzZVZOallXeGhjaWh6WTI5d1pTNXdZVzVUY0dWbFpDazdDaUFnSUNBZ0lDQWdJQ0FnSUhCaGJpaHdZVzVFWld4MFlTNTRMQ0J3WVc1RVpXeDBZUzU1S1RzS0lDQWdJQ0FnSUNBZ0lDQWdjR0Z1VTNSaGNuUXVZMjl3ZVNod1lXNUZibVFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnpZMjl3WlM1MWNHUmhkR1VvS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FHRnVaR3hsVFc5MWMyVlhhR1ZsYkNobGRtVnVkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjFjR1JoZEdWTmIzVnpaVkJoY21GdFpYUmxjbk1vWlhabGJuUXBPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9aWFpsYm5RdVpHVnNkR0ZaSUR3Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRzlzYkhsSmJpaG5aWFJhYjI5dFUyTmhiR1VvS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWlhabGJuUXVaR1ZzZEdGWklENGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5c2JIbFBkWFFvWjJWMFdtOXZiVk5qWVd4bEtDa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExuVndaR0YwWlNncE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQm9ZVzVrYkdWTFpYbEViM2R1S0dWMlpXNTBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1WldWa2MxVndaR0YwWlNBOUlHWmhiSE5sT3dvZ0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnb1pYWmxiblF1WTI5a1pTbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUhOamIzQmxMbXRsZVhNdVZWQTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVjJaVzUwTG1OMGNteExaWGtnZkh3Z1pYWmxiblF1YldWMFlVdGxlU0I4ZkNCbGRtVnVkQzV6YUdsbWRFdGxlU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjNSaGRHVlZjQ2d5SUNvZ1RXRjBhQzVRU1NBcUlITmpiM0JsTG5KdmRHRjBaVk53WldWa0lDOGdjMk52Y0dVdVpHOXRSV3hsYldWdWRDNWpiR2xsYm5SSVpXbG5hSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGJpZ3dMQ0J6WTI5d1pTNXJaWGxRWVc1VGNHVmxaQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsWldSelZYQmtZWFJsSUQwZ2RISjFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ2MyTnZjR1V1YTJWNWN5NUNUMVJVVDAwNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWMlpXNTBMbU4wY214TFpYa2dmSHdnWlhabGJuUXViV1YwWVV0bGVTQjhmQ0JsZG1WdWRDNXphR2xtZEV0bGVTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliM1JoZEdWVmNDZ3RNaUFxSUUxaGRHZ3VVRWtnS2lCelkyOXdaUzV5YjNSaGRHVlRjR1ZsWkNBdklITmpiM0JsTG1SdmJVVnNaVzFsYm5RdVkyeHBaVzUwU0dWcFoyaDBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVc0b01Dd2dMWE5qYjNCbExtdGxlVkJoYmxOd1pXVmtLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVZsWkhOVmNHUmhkR1VnUFNCMGNuVmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCelkyOXdaUzVyWlhsekxreEZSbFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1YyWlc1MExtTjBjbXhMWlhrZ2ZId2daWFpsYm5RdWJXVjBZVXRsZVNCOGZDQmxkbVZ1ZEM1emFHbG1kRXRsZVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWIzUmhkR1ZNWldaMEtESWdLaUJOWVhSb0xsQkpJQ29nYzJOdmNHVXVjbTkwWVhSbFUzQmxaV1FnTHlCelkyOXdaUzVrYjIxRmJHVnRaVzUwTG1Oc2FXVnVkRWhsYVdkb2RDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z1S0hOamIzQmxMbXRsZVZCaGJsTndaV1ZrTENBd0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVmxaSE5WY0dSaGRHVWdQU0IwY25WbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0J6WTI5d1pTNXJaWGx6TGxKSlIwaFVPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxkbVZ1ZEM1amRISnNTMlY1SUh4OElHVjJaVzUwTG0xbGRHRkxaWGtnZkh3Z1pYWmxiblF1YzJocFpuUkxaWGtwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205MFlYUmxUR1ZtZENndE1pQXFJRTFoZEdndVVFa2dLaUJ6WTI5d1pTNXliM1JoZEdWVGNHVmxaQ0F2SUhOamIzQmxMbVJ2YlVWc1pXMWxiblF1WTJ4cFpXNTBTR1ZwWjJoMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZVzRvTFhOamIzQmxMbXRsZVZCaGJsTndaV1ZrTENBd0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVmxaSE5WY0dSaGRHVWdQU0IwY25WbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1WldWa2MxVndaR0YwWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExuVndaR0YwWlNncE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdoaGJtUnNaVlJ2ZFdOb1UzUmhjblJTYjNSaGRHVW9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3YjJsdWRHVnljeTVzWlc1bmRHZ2dQVDA5SURFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZkR0YwWlZOMFlYSjBMbk5sZENod2IybHVkR1Z5YzFzd1hTNXdZV2RsV0N3Z2NHOXBiblJsY25OYk1GMHVjR0ZuWlZrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2VDQTlJREF1TlNBcUlDaHdiMmx1ZEdWeWMxc3dYUzV3WVdkbFdDQXJJSEJ2YVc1MFpYSnpXekZkTG5CaFoyVllLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIa2dQU0F3TGpVZ0tpQW9jRzlwYm5SbGNuTmJNRjB1Y0dGblpWa2dLeUJ3YjJsdWRHVnljMXN4WFM1d1lXZGxXU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjNSaGRHVlRkR0Z5ZEM1elpYUW9lQ3dnZVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYUdGdVpHeGxWRzkxWTJoVGRHRnlkRkJoYmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnZhVzUwWlhKekxteGxibWQwYUNBOVBUMGdNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGdVUzUmhjblF1YzJWMEtIQnZhVzUwWlhKeld6QmRMbkJoWjJWWUxDQndiMmx1ZEdWeWMxc3dYUzV3WVdkbFdTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjRJRDBnTUM0MUlDb2dLSEJ2YVc1MFpYSnpXekJkTG5CaFoyVllJQ3NnY0c5cGJuUmxjbk5iTVYwdWNHRm5aVmdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdlU0E5SURBdU5TQXFJQ2h3YjJsdWRHVnljMXN3WFM1d1lXZGxXU0FySUhCdmFXNTBaWEp6V3pGZExuQmhaMlZaS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGJsTjBZWEowTG5ObGRDaDRMQ0I1S1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJvWVc1a2JHVlViM1ZqYUZOMFlYSjBSRzlzYkhrb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1I0SUQwZ2NHOXBiblJsY25OYk1GMHVjR0ZuWlZnZ0xTQndiMmx1ZEdWeWMxc3hYUzV3WVdkbFdEc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaSGtnUFNCd2IybHVkR1Z5YzFzd1hTNXdZV2RsV1NBdElIQnZhVzUwWlhKeld6RmRMbkJoWjJWWk93b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmthWE4wWVc1alpTQTlJRTFoZEdndWMzRnlkQ2hrZUNBcUlHUjRJQ3NnWkhrZ0tpQmtlU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUnZiR3g1VTNSaGNuUXVjMlYwS0RBc0lHUnBjM1JoYm1ObEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhR0Z1Wkd4bFZHOTFZMmhUZEdGeWRFUnZiR3g1VUdGdUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk52Y0dVdVpXNWhZbXhsV205dmJTa2dhR0Z1Wkd4bFZHOTFZMmhUZEdGeWRFUnZiR3g1S0NrN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelkyOXdaUzVsYm1GaWJHVlFZVzRwSUdoaGJtUnNaVlJ2ZFdOb1UzUmhjblJRWVc0b0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhR0Z1Wkd4bFZHOTFZMmhUZEdGeWRFUnZiR3g1VW05MFlYUmxLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOdmNHVXVaVzVoWW14bFdtOXZiU2tnYUdGdVpHeGxWRzkxWTJoVGRHRnlkRVJ2Ykd4NUtDazdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMjl3WlM1bGJtRmliR1ZTYjNSaGRHVXBJR2hoYm1Sc1pWUnZkV05vVTNSaGNuUlNiM1JoZEdVb0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhR0Z1Wkd4bFZHOTFZMmhOYjNabFVtOTBZWFJsS0dWMlpXNTBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3YjJsdWRHVnljeTVzWlc1bmRHZ2dQVDBnTVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtOTBZWFJsUlc1a0xuTmxkQ2hsZG1WdWRDNXdZV2RsV0N3Z1pYWmxiblF1Y0dGblpWa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjRzl6YVhScGIyNGdQU0JuWlhSVFpXTnZibVJRYjJsdWRHVnlVRzl6YVhScGIyNG9aWFpsYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZUNBOUlEQXVOU0FxSUNobGRtVnVkQzV3WVdkbFdDQXJJSEJ2YzJsMGFXOXVMbmdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdlU0E5SURBdU5TQXFJQ2hsZG1WdWRDNXdZV2RsV1NBcklIQnZjMmwwYVc5dUxua3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbTkwWVhSbFJXNWtMbk5sZENoNExDQjVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0J5YjNSaGRHVkVaV3gwWVM1emRXSldaV04wYjNKektISnZkR0YwWlVWdVpDd2djbTkwWVhSbFUzUmhjblFwTG0xMWJIUnBjR3g1VTJOaGJHRnlLSE5qYjNCbExuSnZkR0YwWlZOd1pXVmtLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWld4bGJXVnVkQ0E5SUhOamIzQmxMbVJ2YlVWc1pXMWxiblE3Q2lBZ0lDQWdJQ0FnSUNBZ0lISnZkR0YwWlV4bFpuUW9NaUFxSUUxaGRHZ3VVRWtnS2lCeWIzUmhkR1ZFWld4MFlTNTRJQzhnWld4bGJXVnVkQzVqYkdsbGJuUklaV2xuYUhRcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5YjNSaGRHVlZjQ2d5SUNvZ1RXRjBhQzVRU1NBcUlISnZkR0YwWlVSbGJIUmhMbmtnTHlCbGJHVnRaVzUwTG1Oc2FXVnVkRWhsYVdkb2RDazdDaUFnSUNBZ0lDQWdJQ0FnSUhKdmRHRjBaVk4wWVhKMExtTnZjSGtvY205MFlYUmxSVzVrS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FHRnVaR3hsVkc5MVkyaE5iM1psVUdGdUtHVjJaVzUwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod2IybHVkR1Z5Y3k1c1pXNW5kR2dnUFQwOUlERXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoYmtWdVpDNXpaWFFvWlhabGJuUXVjR0ZuWlZnc0lHVjJaVzUwTG5CaFoyVlpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEJ2YzJsMGFXOXVJRDBnWjJWMFUyVmpiMjVrVUc5cGJuUmxjbEJ2YzJsMGFXOXVLR1YyWlc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhnZ1BTQXdMalVnS2lBb1pYWmxiblF1Y0dGblpWZ2dLeUJ3YjNOcGRHbHZiaTU0S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSGtnUFNBd0xqVWdLaUFvWlhabGJuUXVjR0ZuWlZrZ0t5QndiM05wZEdsdmJpNTVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoYmtWdVpDNXpaWFFvZUN3Z2VTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdjR0Z1UkdWc2RHRXVjM1ZpVm1WamRHOXljeWh3WVc1RmJtUXNJSEJoYmxOMFlYSjBLUzV0ZFd4MGFYQnNlVk5qWVd4aGNpaHpZMjl3WlM1d1lXNVRjR1ZsWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEJoYmlod1lXNUVaV3gwWVM1NExDQndZVzVFWld4MFlTNTVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NHRnVVM1JoY25RdVkyOXdlU2h3WVc1RmJtUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJvWVc1a2JHVlViM1ZqYUUxdmRtVkViMnhzZVNobGRtVnVkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd2IzTnBkR2x2YmlBOUlHZGxkRk5sWTI5dVpGQnZhVzUwWlhKUWIzTnBkR2x2YmlobGRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdSNElEMGdaWFpsYm5RdWNHRm5aVmdnTFNCd2IzTnBkR2x2Ymk1NE93b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmtlU0E5SUdWMlpXNTBMbkJoWjJWWklDMGdjRzl6YVhScGIyNHVlVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkdsemRHRnVZMlVnUFNCTllYUm9Mbk54Y25Rb1pIZ2dLaUJrZUNBcklHUjVJQ29nWkhrcE93b2dJQ0FnSUNBZ0lDQWdJQ0JrYjJ4c2VVVnVaQzV6WlhRb01Dd2daR2x6ZEdGdVkyVXBPd29nSUNBZ0lDQWdJQ0FnSUNCa2IyeHNlVVJsYkhSaExuTmxkQ2d3TENCTllYUm9MbkJ2ZHloa2IyeHNlVVZ1WkM1NUlDOGdaRzlzYkhsVGRHRnlkQzU1TENCelkyOXdaUzU2YjI5dFUzQmxaV1FwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdaRzlzYkhsUGRYUW9aRzlzYkhsRVpXeDBZUzU1S1RzS0lDQWdJQ0FnSUNBZ0lDQWdaRzlzYkhsVGRHRnlkQzVqYjNCNUtHUnZiR3g1Ulc1a0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhR0Z1Wkd4bFZHOTFZMmhOYjNabFJHOXNiSGxRWVc0b1pYWmxiblFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOamIzQmxMbVZ1WVdKc1pWcHZiMjBwSUdoaGJtUnNaVlJ2ZFdOb1RXOTJaVVJ2Ykd4NUtHVjJaVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOamIzQmxMbVZ1WVdKc1pWQmhiaWtnYUdGdVpHeGxWRzkxWTJoTmIzWmxVR0Z1S0dWMlpXNTBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYUdGdVpHeGxWRzkxWTJoTmIzWmxSRzlzYkhsU2IzUmhkR1VvWlhabGJuUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5qYjNCbExtVnVZV0pzWlZwdmIyMHBJR2hoYm1Sc1pWUnZkV05vVFc5MlpVUnZiR3g1S0dWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5qYjNCbExtVnVZV0pzWlZKdmRHRjBaU2tnYUdGdVpHeGxWRzkxWTJoTmIzWmxVbTkwWVhSbEtHVjJaVzUwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2IyNVFiMmx1ZEdWeVJHOTNiaWhsZG1WdWRDa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk52Y0dVdVpXNWhZbXhsWkNBOVBUMGdabUZzYzJVcElISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCdmFXNTBaWEp6TG14bGJtZDBhQ0E5UFQwZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk52Y0dVdVpHOXRSV3hsYldWdWRDNXpaWFJRYjJsdWRHVnlRMkZ3ZEhWeVpTaGxkbVZ1ZEM1d2IybHVkR1Z5U1dRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1Wkc5dFJXeGxiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKd2IybHVkR1Z5Ylc5MlpTSXNJRzl1VUc5cGJuUmxjazF2ZG1VcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1Wkc5dFJXeGxiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKd2IybHVkR1Z5ZFhBaUxDQnZibEJ2YVc1MFpYSlZjQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWVdSa1VHOXBiblJsY2lobGRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsZG1WdWRDNXdiMmx1ZEdWeVZIbHdaU0E5UFQwZ0luUnZkV05vSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNVViM1ZqYUZOMFlYSjBLR1YyWlc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1VFc5MWMyVkViM2R1S0dWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnZibEJ2YVc1MFpYSk5iM1psS0dWMlpXNTBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6WTI5d1pTNWxibUZpYkdWa0lEMDlQU0JtWVd4elpTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXbHpYMmx1WDNOalpXNWxLR1YyWlc1MEtTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pYWmxiblF1Y0c5cGJuUmxjbFI1Y0dVZ1BUMDlJQ0owYjNWamFDSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1Vkc5MVkyaE5iM1psS0dWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVRXOTFjMlZOYjNabEtHVjJaVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ2YmxCdmFXNTBaWEpWY0NobGRtVnVkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaVzF2ZG1WUWIybHVkR1Z5S0dWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ2YVc1MFpYSnpMbXhsYm1kMGFDQTlQVDBnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1Wkc5dFJXeGxiV1Z1ZEM1eVpXeGxZWE5sVUc5cGJuUmxja05oY0hSMWNtVW9aWFpsYm5RdWNHOXBiblJsY2tsa0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpiM0JsTG1SdmJVVnNaVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2ljRzlwYm5SbGNtMXZkbVVpTENCdmJsQnZhVzUwWlhKTmIzWmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExtUnZiVVZzWlcxbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWdpY0c5cGJuUmxjblZ3SWl3Z2IyNVFiMmx1ZEdWeVZYQXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExtUnBjM0JoZEdOb1JYWmxiblFvWDJWdVpFVjJaVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjM1JoZEdVZ1BTQlRWRUZVUlM1T1QwNUZPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ2YmsxdmRYTmxSRzkzYmlobGRtVnVkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYlc5MWMyVkJZM1JwYjI0N0NpQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDaGxkbVZ1ZEM1aWRYUjBiMjRwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXdPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxRV04wYVc5dUlEMGdjMk52Y0dVdWJXOTFjMlZDZFhSMGIyNXpMa3hGUmxRN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJREU2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXOTFjMlZCWTNScGIyNGdQU0J6WTI5d1pTNXRiM1Z6WlVKMWRIUnZibk11VFVsRVJFeEZPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBeU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzF2ZFhObFFXTjBhVzl1SUQwZ2MyTnZjR1V1Ylc5MWMyVkNkWFIwYjI1ekxsSkpSMGhVT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVUZqZEdsdmJpQTlJQzB4T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ2h0YjNWelpVRmpkR2x2YmlsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJSHA0TGtSUFRFeFpPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMjl3WlM1bGJtRmliR1ZhYjI5dElEMDlQU0JtWVd4elpTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pVMXZkWE5sUkc5M2JrUnZiR3g1S0dWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRjBaU0E5SUZOVVFWUkZMa1JQVEV4Wk93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0I2ZUM1U1QxUkJWRVU2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1YyWlc1MExtTjBjbXhMWlhrZ2ZId2daWFpsYm5RdWJXVjBZVXRsZVNCOGZDQmxkbVZ1ZEM1emFHbG1kRXRsZVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk52Y0dVdVpXNWhZbXhsVUdGdUlEMDlQU0JtWVd4elpTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZOYjNWelpVUnZkMjVRWVc0b1pYWmxiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMFpTQTlJRk5VUVZSRkxsQkJUanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyTnZjR1V1Wlc1aFlteGxVbTkwWVhSbElEMDlQU0JtWVd4elpTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZOYjNWelpVUnZkMjVTYjNSaGRHVW9aWFpsYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRjBaU0E5SUZOVVFWUkZMbEpQVkVGVVJUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElIcDRMbEJCVGpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlhabGJuUXVZM1J5YkV0bGVTQjhmQ0JsZG1WdWRDNXRaWFJoUzJWNUlIeDhJR1YyWlc1MExuTm9hV1owUzJWNUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6WTI5d1pTNWxibUZpYkdWU2IzUmhkR1VnUFQwOUlHWmhiSE5sS1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pVMXZkWE5sUkc5M2JsSnZkR0YwWlNobGRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWVhSbElEMGdVMVJCVkVVdVVrOVVRVlJGT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMjl3WlM1bGJtRmliR1ZRWVc0Z1BUMDlJR1poYkhObEtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGJtUnNaVTF2ZFhObFJHOTNibEJoYmlobGRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWVhSbElEMGdVMVJCVkVVdVVFRk9Pd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1VnUFNCVFZFRlVSUzVPVDA1Rk93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTQWhQVDBnVTFSQlZFVXVUazlPUlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1WkdsemNHRjBZMmhGZG1WdWRDaGZjM1JoY25SRmRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdiMjVOYjNWelpVMXZkbVVvWlhabGJuUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vS0hOMFlYUmxLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1UxUkJWRVV1VWs5VVFWUkZPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMjl3WlM1bGJtRmliR1ZTYjNSaGRHVWdQVDA5SUdaaGJITmxLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxUVzkxYzJWTmIzWmxVbTkwWVhSbEtHVjJaVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdVMVJCVkVVdVJFOU1URms2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5qYjNCbExtVnVZV0pzWlZwdmIyMGdQVDA5SUdaaGJITmxLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxUVzkxYzJWTmIzWmxSRzlzYkhrb1pYWmxiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlRWRUZVUlM1UVFVNDZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmpiM0JsTG1WdVlXSnNaVkJoYmlBOVBUMGdabUZzYzJVcElISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWTmIzVnpaVTF2ZG1WUVlXNG9aWFpsYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUc5dVRXOTFjMlZYYUdWbGJDaGxkbVZ1ZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyTnZjR1V1Wlc1aFlteGxaQ0E5UFQwZ1ptRnNjMlVnZkh3Z2MyTnZjR1V1Wlc1aFlteGxXbTl2YlNBOVBUMGdabUZzYzJVZ2ZId2djM1JoZEdVZ0lUMDlJRk5VUVZSRkxrNVBUa1VnZkh3Z0lXbHpYMmx1WDNOalpXNWxLR1YyWlc1MEtTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE93b2dJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNWthWE53WVhSamFFVjJaVzUwS0Y5emRHRnlkRVYyWlc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxUVzkxYzJWWGFHVmxiQ2hsZG1WdWRDazdDaUFnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMbVJwYzNCaGRHTm9SWFpsYm5Rb1gyVnVaRVYyWlc1MEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdiMjVMWlhsRWIzZHVLR1YyWlc1MEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMjl3WlM1bGJtRmliR1ZrSUQwOVBTQm1ZV3h6WlNCOGZDQnpZMjl3WlM1bGJtRmliR1ZRWVc0Z1BUMDlJR1poYkhObEtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pVdGxlVVJ2ZDI0b1pYWmxiblFwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCdmJsUnZkV05vVTNSaGNuUW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEhKaFkydFFiMmx1ZEdWeUtHVjJaVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0tIQnZhVzUwWlhKekxteGxibWQwYUNsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJREU2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vS0hOamIzQmxMblJ2ZFdOb1pYTXVUMDVGS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQldlQzVTVDFSQlZFVTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyTnZjR1V1Wlc1aFlteGxVbTkwWVhSbElEMDlQU0JtWVd4elpTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFZHOTFZMmhUZEdGeWRGSnZkR0YwWlNncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoZEdVZ1BTQlRWRUZVUlM1VVQxVkRTRjlTVDFSQlZFVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JXZUM1UVFVNDZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyTnZjR1V1Wlc1aFlteGxVR0Z1SUQwOVBTQm1ZV3h6WlNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaR3hsVkc5MVkyaFRkR0Z5ZEZCaGJpZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRHVWdQU0JUVkVGVVJTNVVUMVZEU0Y5UVFVNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWFJsSUQwZ1UxUkJWRVV1VGs5T1JUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElESTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9LSE5qYjNCbExuUnZkV05vWlhNdVZGZFBLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCV2VDNUVUMHhNV1Y5UVFVNDZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyTnZjR1V1Wlc1aFlteGxXbTl2YlNBOVBUMGdabUZzYzJVZ0ppWWdjMk52Y0dVdVpXNWhZbXhsVUdGdUlEMDlQU0JtWVd4elpTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFZHOTFZMmhUZEdGeWRFUnZiR3g1VUdGdUtDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMFpTQTlJRk5VUVZSRkxsUlBWVU5JWDBSUFRFeFpYMUJCVGpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGWjRMa1JQVEV4WlgxSlBWRUZVUlRvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6WTI5d1pTNWxibUZpYkdWYWIyOXRJRDA5UFNCbVlXeHpaU0FtSmlCelkyOXdaUzVsYm1GaWJHVlNiM1JoZEdVZ1BUMDlJR1poYkhObEtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWVWIzVmphRk4wWVhKMFJHOXNiSGxTYjNSaGRHVW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYUmxJRDBnVTFSQlZFVXVWRTlWUTBoZlJFOU1URmxmVWs5VVFWUkZPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkR0YwWlNBOUlGTlVRVlJGTGs1UFRrVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRjBaU0E5SUZOVVFWUkZMazVQVGtVN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE4wWVhSbElDRTlQU0JUVkVGVVJTNU9UMDVGS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyOXdaUzVrYVhOd1lYUmphRVYyWlc1MEtGOXpkR0Z5ZEVWMlpXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnZibFJ2ZFdOb1RXOTJaU2hsZG1WdWRDa2dld29nSUNBZ0lDQWdJQ0FnSUNCMGNtRmphMUJ2YVc1MFpYSW9aWFpsYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ29jM1JoZEdVcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JUVkVGVVJTNVVUMVZEU0Y5U1QxUkJWRVU2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5qYjNCbExtVnVZV0pzWlZKdmRHRjBaU0E5UFQwZ1ptRnNjMlVwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZVYjNWamFFMXZkbVZTYjNSaGRHVW9aWFpsYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExuVndaR0YwWlNncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JUVkVGVVJTNVVUMVZEU0Y5UVFVNDZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmpiM0JsTG1WdVlXSnNaVkJoYmlBOVBUMGdabUZzYzJVcElISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWVWIzVmphRTF2ZG1WUVlXNG9aWFpsYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qYjNCbExuVndaR0YwWlNncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JUVkVGVVJTNVVUMVZEU0Y5RVQweE1XVjlRUVU0NkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOamIzQmxMbVZ1WVdKc1pWcHZiMjBnUFQwOUlHWmhiSE5sSUNZbUlITmpiM0JsTG1WdVlXSnNaVkJoYmlBOVBUMGdabUZzYzJVcElISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWVWIzVmphRTF2ZG1WRWIyeHNlVkJoYmlobGRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1V1ZFhCa1lYUmxLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGTlVRVlJGTGxSUFZVTklYMFJQVEV4WlgxSlBWRUZVUlRvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOdmNHVXVaVzVoWW14bFdtOXZiU0E5UFQwZ1ptRnNjMlVnSmlZZ2MyTnZjR1V1Wlc1aFlteGxVbTkwWVhSbElEMDlQU0JtWVd4elpTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pWUnZkV05vVFc5MlpVUnZiR3g1VW05MFlYUmxLR1YyWlc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTNTFjR1JoZEdVb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoZEdVZ1BTQlRWRUZVUlM1T1QwNUZPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHOXVRMjl1ZEdWNGRFMWxiblVvWlhabGJuUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5qYjNCbExtVnVZV0pzWldRZ1BUMDlJR1poYkhObEtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHRmtaRkJ2YVc1MFpYSW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY0c5cGJuUmxjbk11Y0hWemFDaGxkbVZ1ZENrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlISmxiVzkyWlZCdmFXNTBaWElvWlhabGJuUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhCdmFXNTBaWEpRYjNOcGRHbHZibk5iWlhabGJuUXVjRzlwYm5SbGNrbGtYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcElEMGdNRHNnYVNBOElIQnZhVzUwWlhKekxteGxibWQwYURzZ2FTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod2IybHVkR1Z5YzF0cFhTNXdiMmx1ZEdWeVNXUWdQVDBnWlhabGJuUXVjRzlwYm5SbGNrbGtLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXBiblJsY25NdWMzQnNhV05sS0drc0lERXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQjBjbUZqYTFCdmFXNTBaWElvWlhabGJuUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEJ2YzJsMGFXOXVJRDBnY0c5cGJuUmxjbEJ2YzJsMGFXOXVjMXRsZG1WdWRDNXdiMmx1ZEdWeVNXUmRPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jRzl6YVhScGIyNGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0Z1BTQnVaWGNnV2lncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXBiblJsY2xCdmMybDBhVzl1YzF0bGRtVnVkQzV3YjJsdWRHVnlTV1JkSUQwZ2NHOXphWFJwYjI0N0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0dWMyVjBLR1YyWlc1MExuQmhaMlZZTENCbGRtVnVkQzV3WVdkbFdTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR2RsZEZObFkyOXVaRkJ2YVc1MFpYSlFiM05wZEdsdmJpaGxkbVZ1ZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndiMmx1ZEdWeUlEMGdaWFpsYm5RdWNHOXBiblJsY2tsa0lEMDlQU0J3YjJsdWRHVnljMXN3WFM1d2IybHVkR1Z5U1dRZ1B5QndiMmx1ZEdWeWMxc3hYU0E2SUhCdmFXNTBaWEp6V3pCZE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjRzlwYm5SbGNsQnZjMmwwYVc5dWMxdHdiMmx1ZEdWeUxuQnZhVzUwWlhKSlpGMDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSE5qYjNCbExtUnZiVVZzWlcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2lZMjl1ZEdWNGRHMWxiblVpTENCdmJrTnZiblJsZUhSTlpXNTFLVHNLSUNBZ0lDQWdJQ0J6WTI5d1pTNWtiMjFGYkdWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JbkJ2YVc1MFpYSmtiM2R1SWl3Z2IyNVFiMmx1ZEdWeVJHOTNiaWs3Q2lBZ0lDQWdJQ0FnYzJOdmNHVXVaRzl0Uld4bGJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0p3YjJsdWRHVnlZMkZ1WTJWc0lpd2diMjVRYjJsdWRHVnlWWEFwT3dvZ0lDQWdJQ0FnSUhOamIzQmxMbVJ2YlVWc1pXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpZDJobFpXd2lMQ0J2YmsxdmRYTmxWMmhsWld3c0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnY0dGemMybDJaVG9nWm1Gc2MyVUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0IwYUdsekxuVndaR0YwWlNncE93b2dJQ0FnZlFwOUNtWjFibU4wYVc5dUlHVjJaVzUwY3pKMWJtbDBiR1Z6Y3loelkzSmxaVzRzSUdWMlpXNTBLU0I3Q2lBZ0lDQmpiMjV6ZENCN0lHTmhiblpoY3lBc0lIZHBibk5qWVd4bElDd2djbVZ1WkdWeVpYSWdJSDBnUFNCelkzSmxaVzQ3Q2lBZ0lDQmpiMjV6ZENCeVpXTjBJRDBnWTJGdWRtRnpMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncE93b2dJQ0FnWTI5dWMzUWdlQ0E5SUNobGRtVnVkQzVqYkdsbGJuUllJQzBnY21WamRDNXNaV1owS1NBdklIZHBibk5qWVd4bE93b2dJQ0FnWTI5dWMzUWdlU0E5SUNobGRtVnVkQzVqYkdsbGJuUlpJQzBnY21WamRDNTBiM0FwSUM4Z2QybHVjMk5oYkdVN0NpQWdJQ0J5WlhSMWNtNGdXd29nSUNBZ0lDQWdJSGdzQ2lBZ0lDQWdJQ0FnY21WdVpHVnlaWEl1WDJobGFXZG9kQ0F0SUhrS0lDQWdJRjA3Q24wS1puVnVZM1JwYjI0Z1NXUmxiblJwZEhrMGVEUW9LU0I3Q2lBZ0lDQnlaWFIxY200Z2JtVjNJSHBsS0NrN0NuMEtablZ1WTNScGIyNGdhVzVmYzJObGJtVW9jMk5sYm1Vc0lHMXZkWE5sWDJWMlpXNTBLU0I3Q2lBZ0lDQmpiMjV6ZENCYmVDd2dlVjBnUFNCbGRtVnVkSE15ZFc1cGRHeGxjM01vYzJObGJtVXVjMk55WldWdUxDQnRiM1Z6WlY5bGRtVnVkQ2s3Q2lBZ0lDQmpiMjV6ZENCYmMzZ3NJSE41TENCemR5d2djMmhkSUQwZ2MyTmxibVV1ZG1sbGQzQnZjblF1ZG1Gc2RXVTdDaUFnSUNCeVpYUjFjbTRnZUNBK1BTQnplQ0FtSmlCNElEd2djM2dnS3lCemR5QW1KaUI1SUQ0OUlITjVJQ1ltSUhrZ1BDQnplU0FySUhOb093cDlDbVoxYm1OMGFXOXVJR0YwZEdGamFGOHpaRjlqWVcxbGNtRW9ZMkZ1ZG1GekxDQnRZV3RwWlY5allXMWxjbUVzSUdOaGJUTmtMQ0JzYVdkb2RGOWthWElzSUhOalpXNWxLU0I3Q2lBZ0lDQnBaaUFvWTJGdE0yUWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJSDBLSUNBZ0lHTnZibk4wSUZ0M0xDQm9YU0E5SUcxaGEybGxYMk5oYldWeVlTNXlaWE52YkhWMGFXOXVMblpoYkhWbE93b2dJQ0FnWTI5dWMzUWdZMkZ0WlhKaElEMGdibVYzSUhsMEtHTmhiVE5rTG1admRpNTJZV3gxWlN3Z2R5QXZJR2dzSURBdU1ERXNJREV3TUM0d0tUc0tJQ0FnSUdOdmJuTjBJR05sYm5SbGNpQTlJRzVsZHlCQktDNHVMbU5oYlROa0xteHZiMnRoZEM1MllXeDFaU2s3Q2lBZ0lDQmpZVzFsY21FdWRYQWdQU0J1WlhjZ1FTZ3VMaTVqWVcwelpDNTFjSFpsWTNSdmNpNTJZV3gxWlNrN0NpQWdJQ0JqWVcxbGNtRXVjRzl6YVhScGIyNHVjMlYwS0M0dUxtTmhiVE5rTG1WNVpYQnZjMmwwYVc5dUxuWmhiSFZsS1RzS0lDQWdJR05oYldWeVlTNXNiMjlyUVhRb1kyVnVkR1Z5S1RzS0lDQWdJR052Ym5OMElIVnpaVjl2Y21KcGRGOWpZVzBnUFNBb0tUMCtJU2hDYjI1cGRHOHVZMkZ1WDNObGJtUmZkRzlmYW5Wc2FXRWdKaVlnUW05dWFYUnZMbU5oYmw5elpXNWtYM1J2WDJwMWJHbGhLQ2twT3dvZ0lDQWdZMjl1YzNRZ1kyOXVkSEp2YkhNZ1BTQnVaWGNnVDNKaWFYUkRiMjUwY205c2N5aGpZVzFsY21Fc0lHTmhiblpoY3l3Z2RYTmxYMjl5WW1sMFgyTmhiU3dnS0dVcFBUNXBibDl6WTJWdVpTaHpZMlZ1WlN3Z1pTa3BPd29nSUNBZ1kyOXVkSEp2YkhNdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnaVkyaGhibWRsSWl3Z0tHVXBQVDU3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdkbWxsZHlBOUlHTmhiV1Z5WVM1dFlYUnlhWGhYYjNKc1pFbHVkbVZ5YzJVN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKdmFtVmpkR2x2YmlBOUlHTmhiV1Z5WVM1d2NtOXFaV04wYVc5dVRXRjBjbWw0T3dvZ0lDQWdJQ0FnSUdOdmJuTjBJRnQzYVdSMGFDd2dhR1ZwWjJoMFhTQTlJR05oYlROa0xuSmxjMjlzZFhScGIyNHVkbUZzZFdVN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnVzNnc0lIa3NJSHBkSUQwZ1kyRnRaWEpoTG5CdmMybDBhVzl1T3dvZ0lDQWdJQ0FnSUdOaGJXVnlZUzVoYzNCbFkzUWdQU0IzYVdSMGFDQXZJR2hsYVdkb2REc0tJQ0FnSUNBZ0lDQmpZVzFsY21FdWRYQmtZWFJsVUhKdmFtVmpkR2x2YmsxaGRISnBlQ2dwT3dvZ0lDQWdJQ0FnSUdOaGJXVnlZUzUxY0dSaGRHVlhiM0pzWkUxaGRISnBlQ2dwT3dvZ0lDQWdJQ0FnSUcxaGEybGxYMk5oYldWeVlTNTFjR1JoZEdWZmJXRjBjbWxqWlhNb2RtbGxkeTVsYkdWdFpXNTBjeXdnY0hKdmFtVmpkR2x2Ymk1bGJHVnRaVzUwY3l3Z1d3b2dJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFDd0tJQ0FnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBDaUFnSUNBZ0lDQWdYU3dnV3dvZ0lDQWdJQ0FnSUNBZ0lDQjRMQW9nSUNBZ0lDQWdJQ0FnSUNCNUxBb2dJQ0FnSUNBZ0lDQWdJQ0I2Q2lBZ0lDQWdJQ0FnWFNrN0NpQWdJQ0FnSUNBZ2JXRnJhV1ZmWTJGdFpYSmhMblZ3WkdGMFpWOXNhV2RvZEY5a2FYSW9iR2xuYUhSZlpHbHlMblpoYkhWbEtUc0tJQ0FnSUgwcE93cDlDbVoxYm1OMGFXOXVJRzExYkNoaExDQmlLU0I3Q2lBZ0lDQnlaWFIxY200Z1lpNWpiRzl1WlNncExtMTFiSFJwY0d4NUtHRXBPd3A5Q21aMWJtTjBhVzl1SUc5eWRHaHZaM0poY0docFkzQnliMnBsWTNScGIyNG9iR1ZtZEN3Z2NtbG5hSFFzSUdKdmRIUnZiU3dnZEc5d0xDQjZibVZoY2l3Z2VtWmhjaWtnZXdvZ0lDQWdjbVYwZFhKdUlGc0tJQ0FnSUNBZ0lDQXlJQzhnS0hKcFoyaDBJQzBnYkdWbWRDa3NDaUFnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXlJQzhnS0hSdmNDQXRJR0p2ZEhSdmJTa3NDaUFnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXRNaUF2SUNoNlptRnlJQzBnZW01bFlYSXBMQW9nSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnTFNoeWFXZG9kQ0FySUd4bFpuUXBJQzhnS0hKcFoyaDBJQzBnYkdWbWRDa3NDaUFnSUNBZ0lDQWdMU2gwYjNBZ0t5QmliM1IwYjIwcElDOGdLSFJ2Y0NBdElHSnZkSFJ2YlNrc0NpQWdJQ0FnSUNBZ0xTaDZabUZ5SUNzZ2VtNWxZWElwSUM4Z0tIcG1ZWElnTFNCNmJtVmhjaWtzQ2lBZ0lDQWdJQ0FnTVFvZ0lDQWdYVHNLZlFwbWRXNWpkR2x2YmlCd2FYaGxiRjl6Y0dGalpWOXBiblpsY25ObEtIY3NJR2dzSUc1bFlYSXBJSHNLSUNBZ0lISmxkSFZ5YmlCYkNpQWdJQ0FnSUNBZ01DNDFJQ29nZHl3S0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSURBdU5TQXFJR2dzQ2lBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0J1WldGeUxBb2dJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdNQzQxSUNvZ2R5d0tJQ0FnSUNBZ0lDQXdMalVnS2lCb0xBb2dJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdNUW9nSUNBZ1hUc0tmUXBtZFc1amRHbHZiaUJ5Wld4aGRHbDJaVjl6Y0dGalpTZ3BJSHNLSUNBZ0lHTnZibk4wSUhKbGJHRjBhWFpsSUQwZ1NXUmxiblJwZEhrMGVEUW9LVHNLSUNBZ0lISmxiR0YwYVhabExtWnliMjFCY25KaGVTaGJDaUFnSUNBZ0lDQWdNaXdLSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJRElzQ2lBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBeENpQWdJQ0JkS1RzS0lDQWdJSEpsZEhWeWJpQnlaV3hoZEdsMlpUc0tmUXBqYkdGemN5Qk5ZV3RwWlVOaGJXVnlZU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVkbWxsZHlBOUlHNWxkeUJRZFNoSlpHVnVkR2wwZVRSNE5DZ3BLVHNLSUNBZ0lDQWdJQ0IwYUdsekxuQnliMnBsWTNScGIyNGdQU0J1WlhjZ1VIVW9TV1JsYm5ScGRIazBlRFFvS1NrN0NpQWdJQ0FnSUNBZ2RHaHBjeTV3Y205cVpXTjBhVzl1ZG1sbGR5QTlJRzVsZHlCUWRTaEpaR1Z1ZEdsMGVUUjROQ2dwS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbkJwZUdWc1gzTndZV05sSUQwZ2JtVjNJRkIxS0Vsa1pXNTBhWFI1TkhnMEtDa3BPd29nSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hmYzNCaFkyVmZhVzUyWlhKelpTQTlJRzVsZHlCUWRTaEpaR1Z1ZEdsMGVUUjROQ2dwS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjJwbFkzUnBiMjUyYVdWM1gybHVkbVZ5YzJVZ1BTQnVaWGNnVUhVb1NXUmxiblJwZEhrMGVEUW9LU2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NXlaV3hoZEdsMlpWOXpjR0ZqWlNBOUlHNWxkeUJRZFNoeVpXeGhkR2wyWlY5emNHRmpaU2dwS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbkpsYkdGMGFYWmxYMmx1ZG1WeWMyVWdQU0J1WlhjZ1VIVW9jbVZzWVhScGRtVmZjM0JoWTJVb0tTNXBiblpsY25Rb0tTazdDaUFnSUNBZ0lDQWdkR2hwY3k1amJHbHdYM053WVdObElEMGdibVYzSUZCMUtFbGtaVzUwYVhSNU5IZzBLQ2twT3dvZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ6YjJ4MWRHbHZiaUE5SUc1bGR5QlFkU2h1WlhjZ1dpZ3BLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtVjVaWEJ2YzJsMGFXOXVJRDBnYm1WM0lGQjFLRzVsZHlCQktDa3BPd29nSUNBZ0lDQWdJSFJvYVhNdWNISmxjSEp2YW1WamRHbHZibk1nUFNCN2ZUc0tJQ0FnSUNBZ0lDQjBhR2x6TG14cFoyaDBYMlJwY21WamRHbHZiaUE5SUc1bGR5QlFkU2h1WlhjZ1FTZ3RNU3dnTFRFc0lDMHhLUzV1YjNKdFlXeHBlbVVvS1NrN0NpQWdJQ0I5Q2lBZ0lDQmpZV3hqZFd4aGRHVmZiV0YwY21salpYTW9LU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdXM2NzSUdoZElEMGdkR2hwY3k1eVpYTnZiSFYwYVc5dUxuWmhiSFZsT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJRzVsWVhKamJHbHdJRDBnTFRFd1h6QXdNRHNLSUNBZ0lDQWdJQ0IwYUdsekxuQnBlR1ZzWDNOd1lXTmxMblpoYkhWbExtWnliMjFCY25KaGVTaHZjblJvYjJkeVlYQm9hV053Y205cVpXTjBhVzl1S0RBc0lIY3NJREFzSUdnc0lHNWxZWEpqYkdsd0xDQXhNRjh3TURBcEtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5CcGVHVnNYM053WVdObFgybHVkbVZ5YzJVdWRtRnNkV1V1Wm5KdmJVRnljbUY1S0hCcGVHVnNYM053WVdObFgybHVkbVZ5YzJVb2R5d2dhQ3dnYm1WaGNtTnNhWEFwS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0J3Y205cVgzWnBaWGNnUFNCdGRXd29kR2hwY3k1MmFXVjNMblpoYkhWbExDQjBhR2x6TG5CeWIycGxZM1JwYjI0dWRtRnNkV1VwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2YW1WamRHbHZiblpwWlhjdWRtRnNkV1VnUFNCd2NtOXFYM1pwWlhjN0NpQWdJQ0FnSUNBZ2RHaHBjeTV3Y205cVpXTjBhVzl1ZG1sbGQxOXBiblpsY25ObExuWmhiSFZsSUQwZ2NISnZhbDkyYVdWM0xtTnNiMjVsS0NrdWFXNTJaWEowS0NrN0NpQWdJQ0FnSUNBZ1QySnFaV04wTG10bGVYTW9kR2hwY3k1d2NtVndjbTlxWldOMGFXOXVjeWt1Wm05eVJXRmphQ2dvYTJWNUtUMCtld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JiYzNCaFkyVXNJRzFoY210bGNuTndZV05sWFNBOUlHdGxlUzV6Y0d4cGRDZ2lMQ0lwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeVpYQnliMnBsWTNScGIyNXpXMnRsZVYwdWRtRnNkV1VnUFNCMGFHbHpMbU5oYkdOMWJHRjBaVjl3Y21Wd2NtOXFaV04wYVc5dVgyMWhkSEpwZUNoemNHRmpaU3dnYldGeWEyVnljM0JoWTJVcE93b2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxYMjFoZEhKcFkyVnpLSFpwWlhjc0lIQnliMnBsWTNScGIyNHNJSEpsYzI5c2RYUnBiMjRzSUdWNVpYQnZjeWtnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVkbWxsZHk1MllXeDFaUzVtY205dFFYSnlZWGtvZG1sbGR5azdDaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXFaV04wYVc5dUxuWmhiSFZsTG1aeWIyMUJjbkpoZVNod2NtOXFaV04wYVc5dUtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMyOXNkWFJwYjI0dWRtRnNkV1V1Wm5KdmJVRnljbUY1S0hKbGMyOXNkWFJwYjI0cE93b2dJQ0FnSUNBZ0lIUm9hWE11WlhsbGNHOXphWFJwYjI0dWRtRnNkV1V1Wm5KdmJVRnljbUY1S0dWNVpYQnZjeWs3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpZV3hqZFd4aGRHVmZiV0YwY21salpYTW9LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVmZiR2xuYUhSZlpHbHlLR3hwWjJoMFgyUnBjaWtnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJRlFnUFNCdVpYY2dTR1VvS1M1elpYUkdjbTl0VFdGMGNtbDROQ2gwYUdsekxuWnBaWGN1ZG1Gc2RXVXBMbWx1ZG1WeWRDZ3BPd29nSUNBZ0lDQWdJR052Ym5OMElHNWxkMTlrYVhJZ1BTQnVaWGNnUVNncExtWnliMjFCY25KaGVTaHNhV2RvZEY5a2FYSXBPd29nSUNBZ0lDQWdJRzVsZDE5a2FYSXVZWEJ3YkhsTllYUnlhWGd6S0ZRcExtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ0lDQWdJSFJvYVhNdWJHbG5hSFJmWkdseVpXTjBhVzl1TG5aaGJIVmxJRDBnYm1WM1gyUnBjanNLSUNBZ0lIMEtJQ0FnSUdOc2FYQmZkRzlmYzNCaFkyVW9jM0JoWTJVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvYzNCaFkyVWdQVDA5SUNKa1lYUmhJaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV3Y205cVpXTjBhVzl1ZG1sbGQxOXBiblpsY25ObExuWmhiSFZsT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MzQmhZMlVnUFQwOUlDSndhWGhsYkNJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHbDRaV3hmYzNCaFkyVmZhVzUyWlhKelpTNTJZV3gxWlRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITndZV05sSUQwOVBTQWljbVZzWVhScGRtVWlLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsYkdGMGFYWmxYMmx1ZG1WeWMyVXVkbUZzZFdVN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpjR0ZqWlNBOVBUMGdJbU5zYVhBaUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnNhWEJmYzNCaFkyVXVkbUZzZFdVN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQlRjR0ZqWlNBa2UzTndZV05sZlNCdWIzUWdjbVZqYjJkdWFYcGxaR0FwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lITndZV05sWDNSdlgyTnNhWEFvYzNCaFkyVXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2MzQmhZMlVnUFQwOUlDSmtZWFJoSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2NtOXFaV04wYVc5dWRtbGxkeTUyWVd4MVpUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE53WVdObElEMDlQU0FpY0dsNFpXd2lLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJwZUdWc1gzTndZV05sTG5aaGJIVmxPd29nSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYzNCaFkyVWdQVDA5SUNKeVpXeGhkR2wyWlNJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVnNZWFJwZG1WZmMzQmhZMlV1ZG1Gc2RXVTdDaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6Y0dGalpTQTlQVDBnSW1Oc2FYQWlLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5zYVhCZmMzQmhZMlV1ZG1Gc2RXVTdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JUY0dGalpTQWtlM053WVdObGZTQnViM1FnY21WamIyZHVhWHBsWkdBcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJR05oYkdOMWJHRjBaVjl3Y21Wd2NtOXFaV04wYVc5dVgyMWhkSEpwZUNoemNHRmpaU3dnYldGeWEyVnljM0JoWTJVcElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCamNDQTlJSFJvYVhNdVkyeHBjRjkwYjE5emNHRmpaU2h0WVhKclpYSnpjR0ZqWlNrN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJNZ1BTQjBhR2x6TG5Od1lXTmxYM1J2WDJOc2FYQW9jM0JoWTJVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdGRXd29jMk1zSUdOd0tUc0tJQ0FnSUgwS0lDQWdJSEJ5WlhCeWIycGxZM1JwYjI1ZmJXRjBjbWw0S0hOd1lXTmxMQ0J0WVhKclpYSnpjR0ZqWlNrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUd0bGVTQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ2MzQmhZMlVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHMWhjbXRsY25Od1lXTmxDaUFnSUNBZ0lDQWdYVHNLSUNBZ0lDQWdJQ0JqYjI1emRDQnRZWFJ5YVhoZmRXNXBabTl5YlNBOUlIUm9hWE11Y0hKbGNISnZhbVZqZEdsdmJuTmJhMlY1WFRzS0lDQWdJQ0FnSUNCcFppQW9iV0YwY21sNFgzVnVhV1p2Y20wcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzFoZEhKcGVGOTFibWxtYjNKdE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHMWhkSEpwZUNBOUlIUm9hWE11WTJGc1kzVnNZWFJsWDNCeVpYQnliMnBsWTNScGIyNWZiV0YwY21sNEtITndZV05sTENCdFlYSnJaWEp6Y0dGalpTazdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFZ1YVdadmNtMGdQU0J1WlhjZ1VIVW9iV0YwY21sNEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbVZ3Y205cVpXTjBhVzl1YzF0clpYbGRJRDBnZFc1cFptOXliVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWdWFXWnZjbTA3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUXA5Q21OdmJuTjBJSE5qWlc1bFgyTmhZMmhsSUQwZ2UzMDdDbVoxYm1OMGFXOXVJR1pwYkhSbGNsOWllVjlyWlhrb1pHbGpkQ3dnYTJWNWN5d2daR1ZtWVhWc2RGOTJZV3gxWlNBOUlHWmhiSE5sS1NCN0NpQWdJQ0JqYjI1emRDQnlaWE4xYkhRZ1BTQjdmVHNLSUNBZ0lHdGxlWE11Wm05eVJXRmphQ2dvYTJWNUtUMCtld29nSUNBZ0lDQWdJR052Ym5OMElIWmhiQ0E5SUdScFkzUmJhMlY1WFRzS0lDQWdJQ0FnSUNCcFppQW9kbUZzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RGdHJaWGxkSUQwZ2RtRnNPd29nSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkRnRyWlhsZElEMGdaR1ZtWVhWc2RGOTJZV3gxWlRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5S1RzS0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN0NuMEtZMjl1YzNRZ2NHeHZkRjlqWVdOb1pTQTlJSHQ5T3dwamIyNXpkQ0JVUlZoVVZWSkZYMEZVVEVGVElEMGdXd29nSUNBZ2RXNWtaV1pwYm1Wa0NsMDdDbVoxYm1OMGFXOXVJR0ZrWkY5elkyVnVaU2h6WTJWdVpWOXBaQ3dnZEdoeVpXVmZjMk5sYm1VcElIc0tJQ0FnSUhOalpXNWxYMk5oWTJobFczTmpaVzVsWDJsa1hTQTlJSFJvY21WbFgzTmpaVzVsT3dwOUNtWjFibU4wYVc5dUlHWnBibVJmYzJObGJtVW9jMk5sYm1WZmFXUXBJSHNLSUNBZ0lISmxkSFZ5YmlCelkyVnVaVjlqWVdOb1pWdHpZMlZ1WlY5cFpGMDdDbjBLWm5WdVkzUnBiMjRnWkdWc1pYUmxYM05qWlc1bEtITmpaVzVsWDJsa0tTQjdDaUFnSUNCamIyNXpkQ0J6WTJWdVpTQTlJSE5qWlc1bFgyTmhZMmhsVzNOalpXNWxYMmxrWFRzS0lDQWdJR2xtSUNnaGMyTmxibVVwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQjlDaUFnSUNCa1pXeGxkR1ZmZEdoeVpXVmZjMk5sYm1Vb2MyTmxibVVwT3dvZ0lDQWdkMmhwYkdVb2MyTmxibVV1WTJocGJHUnlaVzR1YkdWdVozUm9JRDRnTUNsN0NpQWdJQ0FnSUNBZ2MyTmxibVV1Y21WdGIzWmxLSE5qWlc1bExtTm9hV3hrY21WdVd6QmRLVHNLSUNBZ0lIMEtJQ0FnSUdSbGJHVjBaU0J6WTJWdVpWOWpZV05vWlZ0elkyVnVaVjlwWkYwN0NuMEtablZ1WTNScGIyNGdabWx1WkY5d2JHOTBjeWh3Ykc5MFgzVjFhV1J6S1NCN0NpQWdJQ0JqYjI1emRDQndiRzkwY3lBOUlGdGRPd29nSUNBZ2NHeHZkRjkxZFdsa2N5NW1iM0pGWVdOb0tDaHBaQ2s5UG5zS0lDQWdJQ0FnSUNCamIyNXpkQ0J3Ykc5MElEMGdjR3h2ZEY5allXTm9aVnRwWkYwN0NpQWdJQ0FnSUNBZ2FXWWdLSEJzYjNRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY0d4dmRITXVjSFZ6YUNod2JHOTBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlLVHNLSUNBZ0lISmxkSFZ5YmlCd2JHOTBjenNLZlFwbWRXNWpkR2x2YmlCa1pXeGxkR1ZmYzJObGJtVnpLSE5qWlc1bFgzVjFhV1J6TENCd2JHOTBYM1YxYVdSektTQjdDaUFnSUNCd2JHOTBYM1YxYVdSekxtWnZja1ZoWTJnb0tIQnNiM1JmYVdRcFBUNTdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2NHeHZkQ0E5SUhCc2IzUmZZMkZqYUdWYmNHeHZkRjlwWkYwN0NpQWdJQ0FnSUNBZ2FXWWdLSEJzYjNRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxYM0JzYjNRb2NHeHZkQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU2s3Q2lBZ0lDQnpZMlZ1WlY5MWRXbGtjeTVtYjNKRllXTm9LQ2h6WTJWdVpWOXBaQ2s5UG5zS0lDQWdJQ0FnSUNCa1pXeGxkR1ZmYzJObGJtVW9jMk5sYm1WZmFXUXBPd29nSUNBZ2ZTazdDbjBLWm5WdVkzUnBiMjRnYVc1elpYSjBYM0JzYjNRb2MyTmxibVZmYVdRc0lIQnNiM1JmWkdGMFlTa2dld29nSUNBZ1kyOXVjM1FnYzJObGJtVWdQU0JtYVc1a1gzTmpaVzVsS0hOalpXNWxYMmxrS1RzS0lDQWdJSEJzYjNSZlpHRjBZUzVtYjNKRllXTm9LQ2h3Ykc5MEtUMCtld29nSUNBZ0lDQWdJR0ZrWkY5d2JHOTBLSE5qWlc1bExDQndiRzkwS1RzS0lDQWdJSDBwT3dwOUNtWjFibU4wYVc5dUlHUmxiR1YwWlY5d2JHOTBjeWh3Ykc5MFgzVjFhV1J6S1NCN0NpQWdJQ0JqYjI1emRDQndiRzkwY3lBOUlHWnBibVJmY0d4dmRITW9jR3h2ZEY5MWRXbGtjeWs3Q2lBZ0lDQndiRzkwY3k1bWIzSkZZV05vS0dSbGJHVjBaVjl3Ykc5MEtUc0tmUXBtZFc1amRHbHZiaUJqYjI1MlpYSjBYM1JsZUhSMWNtVW9jMk5sYm1Vc0lHUmhkR0VwSUhzS0lDQWdJR052Ym5OMElIUmxlQ0E5SUdOeVpXRjBaVjkwWlhoMGRYSmxLSE5qWlc1bExDQmtZWFJoS1RzS0lDQWdJSFJsZUM1dVpXVmtjMVZ3WkdGMFpTQTlJSFJ5ZFdVN0NpQWdJQ0IwWlhndWJXbHVSbWxzZEdWeUlEMGdiVzlrVzJSaGRHRXViV2x1Um1sc2RHVnlYVHNLSUNBZ0lIUmxlQzV0WVdkR2FXeDBaWElnUFNCdGIyUmJaR0YwWVM1dFlXZEdhV3gwWlhKZE93b2dJQ0FnZEdWNExtRnVhWE52ZEhKdmNIa2dQU0JrWVhSaExtRnVhWE52ZEhKdmNIazdDaUFnSUNCMFpYZ3VkM0poY0ZNZ1BTQnRiMlJiWkdGMFlTNTNjbUZ3VTEwN0NpQWdJQ0JwWmlBb1pHRjBZUzV6YVhwbExteGxibWQwYUNBK0lERXBJSHNLSUNBZ0lDQWdJQ0IwWlhndWQzSmhjRlFnUFNCdGIyUmJaR0YwWVM1M2NtRndWRjA3Q2lBZ0lDQjlDaUFnSUNCcFppQW9aR0YwWVM1emFYcGxMbXhsYm1kMGFDQStJRElwSUhzS0lDQWdJQ0FnSUNCMFpYZ3VkM0poY0ZJZ1BTQnRiMlJiWkdGMFlTNTNjbUZ3VWwwN0NpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2RHVjRPd3A5Q21aMWJtTjBhVzl1SUdselgzUm9jbVZsWDJacGVHVmtYMkZ5Y21GNUtIWmhiSFZsS1NCN0NpQWdJQ0J5WlhSMWNtNGdkbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQnRiMlF1Vm1WamRHOXlNaUI4ZkNCMllXeDFaU0JwYm5OMFlXNWpaVzltSUcxdlpDNVdaV04wYjNJeklIeDhJSFpoYkhWbElHbHVjM1JoYm1ObGIyWWdiVzlrTGxabFkzUnZjalFnZkh3Z2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCdGIyUXVUV0YwY21sNE5Ec0tmUXBtZFc1amRHbHZiaUIwYjE5MWJtbG1iM0p0S0hOalpXNWxMQ0JrWVhSaEtTQjdDaUFnSUNCcFppQW9aR0YwWVM1MGVYQmxJQ0U5UFNCMWJtUmxabWx1WldRcElIc0tJQ0FnSUNBZ0lDQnBaaUFvWkdGMFlTNTBlWEJsSUQwOUlDSlRZVzF3YkdWeUlpa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTI5dWRtVnlkRjkwWlhoMGRYSmxLSE5qWlc1bExDQmtZWFJoS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCVWVYQmxJQ1I3WkdGMFlTNTBlWEJsZlNCdWIzUWdhMjV2ZDI1Z0tUc0tJQ0FnSUgwS0lDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1JoZEdFcElIeDhJRUZ5Y21GNVFuVm1abVZ5TG1selZtbGxkeWhrWVhSaEtTa2dld29nSUNBZ0lDQWdJR2xtSUNnaFpHRjBZUzVsZG1WeWVTZ29lQ2s5UG5SNWNHVnZaaUI0SUQwOVBTQWliblZ0WW1WeUlpa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSaGRHRTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNoa1lYUmhMbXhsYm1kMGFDQTlQU0F5S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnYlc5a0xsWmxZM1J2Y2pJb0tTNW1jbTl0UVhKeVlYa29aR0YwWVNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2hrWVhSaExteGxibWQwYUNBOVBTQXpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2diVzlrTGxabFkzUnZjak1vS1M1bWNtOXRRWEp5WVhrb1pHRjBZU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdsbUlDaGtZWFJoTG14bGJtZDBhQ0E5UFNBMEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2JXOWtMbFpsWTNSdmNqUW9LUzVtY205dFFYSnlZWGtvWkdGMFlTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNoa1lYUmhMbXhsYm1kMGFDQTlQU0F4TmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnRZWFFnUFNCdVpYY2diVzlrTGsxaGRISnBlRFFvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiV0YwTG1aeWIyMUJjbkpoZVNoa1lYUmhLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxaGREc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdaR0YwWVRzS2ZRcG1kVzVqZEdsdmJpQmtaWE5sY21saGJHbDZaVjkxYm1sbWIzSnRjeWh6WTJWdVpTd2daR0YwWVNrZ2V3b2dJQ0FnWTI5dWMzUWdjbVZ6ZFd4MElEMGdlMzA3Q2lBZ0lDQm1iM0lvWTI5dWMzUWdibUZ0WlNCcGJpQmtZWFJoS1hzS0lDQWdJQ0FnSUNCamIyNXpkQ0IyWVd4MVpTQTlJR1JoZEdGYmJtRnRaVjA3Q2lBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ2JXOWtMbFZ1YVdadmNtMHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwVzI1aGJXVmRJRDBnZG1Gc2RXVTdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjMlZ5SUQwZ2RHOWZkVzVwWm05eWJTaHpZMlZ1WlN3Z2RtRnNkV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSYmJtRnRaVjBnUFNCdVpYY2diVzlrTGxWdWFXWnZjbTBvYzJWeUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME93cDlDbVoxYm1OMGFXOXVJR3hwYm1WelpXZHRaVzUwYzE5MlpYSjBaWGhmYzJoaFpHVnlLSFZ1YVdadmNtMXpMQ0JoZEhSeWFXSjFkR1Z6S1NCN0NpQWdJQ0JqYjI1emRDQmhkSFJ5YVdKMWRHVmZaR1ZqYkNBOUlHRjBkSEpwWW5WMFpYTmZkRzlmZEhsd1pWOWtaV05zWVhKaGRHbHZiaWhoZEhSeWFXSjFkR1Z6S1RzS0lDQWdJR052Ym5OMElIVnVhV1p2Y20xZlpHVmpiQ0E5SUhWdWFXWnZjbTF6WDNSdlgzUjVjR1ZmWkdWamJHRnlZWFJwYjI0b2RXNXBabTl5YlhNcE93b2dJQ0FnWTI5dWMzUWdZMjlzYjNJZ1BTQmhkSFJ5YVdKMWRHVmZkSGx3WlNoaGRIUnlhV0oxZEdWekxtTnZiRzl5WDNOMFlYSjBLU0I4ZkNCMWJtbG1iM0p0WDNSNWNHVW9kVzVwWm05eWJYTXVZMjlzYjNKZmMzUmhjblFwT3dvZ0lDQWdjbVYwZFhKdUlHQndjbVZqYVhOcGIyNGdiV1ZrYVhWdGNDQnBiblE3Q2lBZ0lDQWdJQ0FnY0hKbFkybHphVzl1SUdocFoyaHdJR1pzYjJGME93b0tJQ0FnSUNBZ0lDQWtlMkYwZEhKcFluVjBaVjlrWldOc2ZRb2dJQ0FnSUNBZ0lDUjdkVzVwWm05eWJWOWtaV05zZlFvZ0lDQWdJQ0FnSUhWdWFXWnZjbTBnYVc1MElHbHpYM05sWjIxbGJuUnpYMjExYkhScE93b0tJQ0FnSUNBZ0lDQnZkWFFnZG1Wak1pQm1YM1YyT3dvZ0lDQWdJQ0FnSUc5MWRDQWtlMk52Ykc5eWZTQm1YMk52Ykc5eU93b2dJQ0FnSUNBZ0lHWnNZWFFnYjNWMElIVnBiblFnWm5KaFoxOXBibk4wWVc1alpWOXBaRHNLQ2lBZ0lDQWdJQ0FnZG1Wak1pQm5aWFJmY21WemIyeDFkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z01pQXFJSEI0WDNCbGNsOTFibWwwSUdSdlpYTnVKM1FnYldGclpTQmhibmtnYzJWdWMyVXNJR0oxZENCM2IzSnJjd29nSUNBZ0lDQWdJQ0FnSUNBdkx5QlVUMFJQTENCbWFXZDFjbVVnYjNWMElIZG9ZWFFuY3lCbmIybHVaeUJ2YmlFS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjMjlzZFhScGIyNGdMeUF5TGpBZ0tpQndlRjl3WlhKZmRXNXBkRHNLSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUhabFl6TWdjMk55WldWdVgzTndZV05sS0habFl6TWdjRzlwYm5RcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Wak5DQjJaWEowWlhnZ1BTQndjbTlxWldOMGFXOXVkbWxsZHlBcUlHMXZaR1ZzSUNvZ2RtVmpOQ2h3YjJsdWRDd2dNU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMlpXTXpLSFpsY25SbGVDNTRlU0FxSUdkbGRGOXlaWE52YkhWMGFXOXVLQ2tzSUhabGNuUmxlQzU2SUNzZ2RtVnlkR1Y0TG5jZ0tpQmtaWEIwYUY5emFHbG1kQ2tnTHlCMlpYSjBaWGd1ZHpzS0lDQWdJQ0FnSUNCOUNnb2dJQ0FnSUNBZ0lIWmxZek1nYzJOeVpXVnVYM053WVdObEtIWmxZeklnY0c5cGJuUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOamNtVmxibDl6Y0dGalpTaDJaV016S0hCdmFXNTBMQ0F3S1NrN0NpQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQjJiMmxrSUcxaGFXNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmxZek1nY0Y5aElEMGdjMk55WldWdVgzTndZV05sS0d4cGJtVndiMmx1ZEY5emRHRnlkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmxZek1nY0Y5aUlEMGdjMk55WldWdVgzTndZV05sS0d4cGJtVndiMmx1ZEY5bGJtUXBPd29nSUNBZ0lDQWdJQ0FnSUNCbWJHOWhkQ0IzYVdSMGFDQTlJQ2h3ZUY5d1pYSmZkVzVwZENBcUlDaHdiM05wZEdsdmJpNTRJRDA5SURFdU1DQS9JR3hwYm1WM2FXUjBhRjlsYm1RZ09pQnNhVzVsZDJsa2RHaGZjM1JoY25RcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWmw5amIyeHZjaUE5SUhCdmMybDBhVzl1TG5nZ1BUMGdNUzR3SUQ4Z1kyOXNiM0pmWlc1a0lEb2dZMjlzYjNKZmMzUmhjblE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWmZkWFlnUFNCMlpXTXlLSEJ2YzJsMGFXOXVMbmdzSUhCdmMybDBhVzl1TG5rZ0t5QXdMalVwT3dvS0lDQWdJQ0FnSUNBZ0lDQWdkbVZqTWlCd2IybHVkRUVnUFNCd1gyRXVlSGs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmxZeklnY0c5cGJuUkNJRDBnY0Y5aUxuaDVPd29LSUNBZ0lDQWdJQ0FnSUNBZ2RtVmpNaUI0UW1GemFYTWdQU0J3YjJsdWRFSWdMU0J3YjJsdWRFRTdDaUFnSUNBZ0lDQWdJQ0FnSUhabFl6SWdlVUpoYzJseklEMGdibTl5YldGc2FYcGxLSFpsWXpJb0xYaENZWE5wY3k1NUxDQjRRbUZ6YVhNdWVDa3BPd29nSUNBZ0lDQWdJQ0FnSUNCMlpXTXlJSEJ2YVc1MElEMGdjRzlwYm5SQklDc2dlRUpoYzJseklDb2djRzl6YVhScGIyNHVlQ0FySUhsQ1lYTnBjeUFxSUhkcFpIUm9JQ29nY0c5emFYUnBiMjR1ZVRzS0NpQWdJQ0FnSUNBZ0lDQWdJR2RzWDFCdmMybDBhVzl1SUQwZ2RtVmpOQ2h3YjJsdWRDNTRlU0F2SUdkbGRGOXlaWE52YkhWMGFXOXVLQ2tzSUhCdmMybDBhVzl1TG5nZ1BUMGdNUzR3SUQ4Z2NGOWlMbm9nT2lCd1gyRXVlaXdnTVM0d0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm5KaFoxOXBibk4wWVc1alpWOXBaQ0E5SUhWcGJuUW9LR2RzWDBsdWMzUmhibU5sU1VRZ0tpQnBjMTl6WldkdFpXNTBjMTl0ZFd4MGFTa2dLeUJwYm5Rb2NHOXphWFJwYjI0dWVDQTlQU0F4TGpBcEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdZRHNLZlFwbWRXNWpkR2x2YmlCc2FXNWxjMTltY21GbmJXVnVkRjl6YUdGa1pYSW9kVzVwWm05eWJYTXNJR0YwZEhKcFluVjBaWE1wSUhzS0lDQWdJR052Ym5OMElHTnZiRzl5SUQwZ1lYUjBjbWxpZFhSbFgzUjVjR1VvWVhSMGNtbGlkWFJsY3k1amIyeHZjbDl6ZEdGeWRDa2dmSHdnZFc1cFptOXliVjkwZVhCbEtIVnVhV1p2Y20xekxtTnZiRzl5WDNOMFlYSjBLVHNLSUNBZ0lHTnZibk4wSUdOdmJHOXlYM1Z1YVdadmNtMXpJRDBnWm1sc2RHVnlYMko1WDJ0bGVTaDFibWxtYjNKdGN5d2dXd29nSUNBZ0lDQWdJQ0pqYjJ4dmNuSmhibWRsSWl3S0lDQWdJQ0FnSUNBaVkyOXNiM0p0WVhBaUxBb2dJQ0FnSUNBZ0lDSnVZVzVmWTI5c2IzSWlMQW9nSUNBZ0lDQWdJQ0pvYVdkb1kyeHBjQ0lzQ2lBZ0lDQWdJQ0FnSW14dmQyTnNhWEFpTEFvZ0lDQWdJQ0FnSUNKd2FXTnJhVzVuSWdvZ0lDQWdYU2s3Q2lBZ0lDQmpiMjV6ZENCMWJtbG1iM0p0WDJSbFkyd2dQU0IxYm1sbWIzSnRjMTkwYjE5MGVYQmxYMlJsWTJ4aGNtRjBhVzl1S0dOdmJHOXlYM1Z1YVdadmNtMXpLVHNLSUNBZ0lISmxkSFZ5YmlCZ0kyVjRkR1Z1YzJsdmJpQkhURjlQUlZOZmMzUmhibVJoY21SZlpHVnlhWFpoZEdsMlpYTWdPaUJsYm1GaWJHVUtDaUFnSUNCd2NtVmphWE5wYjI0Z2JXVmthWFZ0Y0NCcGJuUTdDaUFnSUNCd2NtVmphWE5wYjI0Z2FHbG5hSEFnWm14dllYUTdDaUFnSUNCd2NtVmphWE5wYjI0Z2JXVmthWFZ0Y0NCellXMXdiR1Z5TWtRN0NpQWdJQ0J3Y21WamFYTnBiMjRnYldWa2FYVnRjQ0J6WVcxd2JHVnlNMFE3Q2dvZ0lDQWdhVzRnZG1Wak1pQm1YM1YyT3dvZ0lDQWdhVzRnSkh0amIyeHZjbjBnWmw5amIyeHZjanNLSUNBZ0lDUjdkVzVwWm05eWJWOWtaV05zZlFvS0lDQWdJRzkxZENCMlpXTTBJR1p5WVdkdFpXNTBYMk52Ykc5eU93b0tJQ0FnSUM4dklFaGhiR1lnZDJsa2RHZ2diMllnWVc1MGFXRnNhV0Z6YVc1bklITnRiMjkwYUhOMFpYQUtJQ0FnSUNOa1pXWnBibVVnUVU1VVNVRk1TVUZUWDFKQlJFbFZVeUF3TGpjd056RXdOamM0TVRFNE5qVTBOellLQ2lBZ0lDQjJaV00wSUdkbGRGOWpiMnh2Y2w5bWNtOXRYMk50WVhBb1pteHZZWFFnZG1Gc2RXVXNJSE5oYlhCc1pYSXlSQ0JqYjJ4dmNtMWhjQ3dnZG1Wak1pQmpiMnh2Y25KaGJtZGxLU0I3Q2lBZ0lDQWdJQ0FnWm14dllYUWdZMjFwYmlBOUlHTnZiRzl5Y21GdVoyVXVlRHNLSUNBZ0lDQWdJQ0JtYkc5aGRDQmpiV0Y0SUQwZ1kyOXNiM0p5WVc1blpTNTVPd29nSUNBZ0lDQWdJR2xtSUNoMllXeDFaU0E4UFNCamJXRjRJQ1ltSUhaaGJIVmxJRDQ5SUdOdGFXNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhVzRnZG1Gc2RXVWdjbUZ1WjJVc0lHTnZiblJwYm5WbElRb2dJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kbUZzZFdVZ1BDQmpiV2x1S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnNiM2RqYkdsd093b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kbUZzZFdVZ1BpQmpiV0Y0S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm9hV2RvWTJ4cGNEc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0F2THlCcGMyNWhiaUJEUVU0Z1ltVWdZbkp2YTJWdUlDaHZaaUJqYjNWeWMyVXBJQzB1TFFvZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6YnlCcFppQnZkWFJ6YVdSbElIWmhiSFZsSUhKaGJtZGxJR0Z1WkNCdWIzUWdjMjFoYkd4bGNpOWlhV2RuWlhJZ2JXbHVMMjFoZUNCM1pTQmhjM04xYldVZ1RtRk9DaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WVc1ZlkyOXNiM0k3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdac2IyRjBJR2t3TVNBOUlHTnNZVzF3S0NoMllXeDFaU0F0SUdOdGFXNHBJQzhnS0dOdFlYZ2dMU0JqYldsdUtTd2dNQzR3TENBeExqQXBPd29nSUNBZ0lDQWdJQzh2SURFdk1DQmpiM0p5WlhOd2IyNWtjeUIwYnlCMGFHVWdZMjl5Ym1WeUlHOW1JSFJvWlNCamIyeHZjbTFoY0N3Z2MyOGdkRzhnY0hKdmNHVnliSGtnYVc1MFpYSndiMnhoZEdVS0lDQWdJQ0FnSUNBdkx5QmlaWFIzWldWdUlIUm9aU0JqYjJ4dmNuTXNJSGRsSUc1bFpXUWdkRzhnYzJOaGJHVWdhWFFzSUhOdklIUm9ZWFFnZEdobElHVnVaSE1nWVhKbElHRjBJREVnTFNBb2MzUmxjSE5wZW1Vdk1pa2dZVzVrSURBcktITjBaWEJ6YVhwbEx6SXBMZ29nSUNBZ0lDQWdJR1pzYjJGMElITjBaWEJ6YVhwbElEMGdNUzR3SUM4Z1pteHZZWFFvZEdWNGRIVnlaVk5wZW1Vb1kyOXNiM0p0WVhBc0lEQXBLVHNLSUNBZ0lDQWdJQ0JwTURFZ1BTQW9NUzR3SUMwZ2MzUmxjSE5wZW1VcElDb2dhVEF4SUNzZ01DNDFJQ29nYzNSbGNITnBlbVU3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJsZUhSMWNtVW9ZMjlzYjNKdFlYQXNJSFpsWXpJb2FUQXhMQ0F3TGpBcEtUc0tJQ0FnSUgwS0NpQWdJQ0IyWldNMElHZGxkRjlqYjJ4dmNpaG1iRzloZENCamIyeHZjaXdnYzJGdGNHeGxjakpFSUdOdmJHOXliV0Z3TENCMlpXTXlJR052Ykc5eWNtRnVaMlVwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWjJWMFgyTnZiRzl5WDJaeWIyMWZZMjFoY0NoamIyeHZjaXdnWTI5c2IzSnRZWEFzSUdOdmJHOXljbUZ1WjJVcE93b2dJQ0FnZlFvS0lDQWdJSFpsWXpRZ1oyVjBYMk52Ykc5eUtIWmxZelFnWTI5c2IzSXNJR0p2YjJ3Z1kyOXNiM0p0WVhBc0lHSnZiMndnWTI5c2IzSnlZVzVuWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyeHZjanNLSUNBZ0lIMEtJQ0FnSUhabFl6UWdaMlYwWDJOdmJHOXlLSFpsWXpNZ1kyOXNiM0lzSUdKdmIyd2dZMjlzYjNKdFlYQXNJR0p2YjJ3Z1kyOXNiM0p5WVc1blpTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjJaV00wS0dOdmJHOXlMQ0F4TGpBcE93b2dJQ0FnZlFvS0lDQWdJR1pzYjJGMElHRmhjM1JsY0NobWJHOWhkQ0IwYUhKbGMyaHZiR1FzSUdac2IyRjBJSFpoYkhWbEtTQjdDaUFnSUNBZ0lDQWdabXh2WVhRZ1lXWjNhV1IwYUNBOUlHeGxibWQwYUNoMlpXTXlLR1JHWkhnb2RtRnNkV1VwTENCa1JtUjVLSFpoYkhWbEtTa3BJQ29nUVU1VVNVRk1TVUZUWDFKQlJFbFZVenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMjF2YjNSb2MzUmxjQ2gwYUhKbGMyaHZiR1F0WVdaM2FXUjBhQ3dnZEdoeVpYTm9iMnhrSzJGbWQybGtkR2dzSUhaaGJIVmxLVHNLSUNBZ0lIMEtDaUFnSUNCbWJHOWhkQ0JoWVhOMFpYQW9abXh2WVhRZ2RHaHlaWE5vYjJ4a01Td2dabXh2WVhRZ2RHaHlaWE5vYjJ4a01pd2dabXh2WVhRZ1pHbHpkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJoWVhOMFpYQW9kR2h5WlhOb2IyeGtNU3dnWkdsemRDa2dLaUJoWVhOMFpYQW9kR2h5WlhOb2IyeGtNaXdnTVM0d0lDMGdaR2x6ZENrN0NpQWdJQ0I5Q2dvZ0lDQWdabXhoZENCcGJpQjFhVzUwSUdaeVlXZGZhVzV6ZEdGdVkyVmZhV1E3Q2lBZ0lDQjFibWxtYjNKdElIVnBiblFnYjJKcVpXTjBYMmxrT3dvS0lDQWdJSFpsWXpRZ2NHRmphMTlwYm5Rb2RXbHVkQ0JwWkN3Z2RXbHVkQ0JwYm1SbGVDa2dld29nSUNBZ0lDQWdJSFpsWXpRZ2RXNXdZV05yT3dvZ0lDQWdJQ0FnSUhWdWNHRmpheTU0SUQwZ1pteHZZWFFvS0dsa0lDWWdkV2x1ZENnd2VHWm1NREFwS1NBK1BpQTRLU0F2SURJMU5TNHdPd29nSUNBZ0lDQWdJSFZ1Y0dGamF5NTVJRDBnWm14dllYUW9LR2xrSUNZZ2RXbHVkQ2d3ZURBd1ptWXBLU0ErUGlBd0tTQXZJREkxTlM0d093b2dJQ0FnSUNBZ0lIVnVjR0ZqYXk1NklEMGdabXh2WVhRb0tHbHVaR1Y0SUNZZ2RXbHVkQ2d3ZUdabU1EQXBLU0ErUGlBNEtTQXZJREkxTlM0d093b2dJQ0FnSUNBZ0lIVnVjR0ZqYXk1M0lEMGdabXh2WVhRb0tHbHVaR1Y0SUNZZ2RXbHVkQ2d3ZURBd1ptWXBLU0ErUGlBd0tTQXZJREkxTlM0d093b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMWJuQmhZMnM3Q2lBZ0lDQjlDaUFnSUNCMmIybGtJRzFoYVc0b0tYc0tDaUFnSUNBZ0lDQWdabXh2WVhRZ2VHRnNjR2hoSUQwZ1lXRnpkR1Z3S0RBdU1Dd2dNQzR3TENCbVgzVjJMbmdwT3dvZ0lDQWdJQ0FnSUdac2IyRjBJSGxoYkhCb1lTQTlJR0ZoYzNSbGNDZ3dMakFzSURBdU1Dd2dabDkxZGk1NUtUc0tJQ0FnSUNBZ0lDQjJaV00wSUdOdmJHOXlJRDBnWjJWMFgyTnZiRzl5S0daZlkyOXNiM0lzSUdOdmJHOXliV0Z3TENCamIyeHZjbkpoYm1kbEtUc0tJQ0FnSUNBZ0lDQnBaaUFvY0dsamEybHVaeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5c2IzSXVZU0ErSURBdU1Ta2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabkpoWjIxbGJuUmZZMjlzYjNJZ1BTQndZV05yWDJsdWRDaHZZbXBsWTNSZmFXUXNJR1p5WVdkZmFXNXpkR0Z1WTJWZmFXUXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdabkpoWjIxbGJuUmZZMjlzYjNJZ1BTQjJaV00wS0dOdmJHOXlMbkpuWWl3Z1kyOXNiM0l1WVNrN0NpQWdJQ0I5Q2lBZ0lDQmdPd3A5Q21aMWJtTjBhVzl1SUdOeVpXRjBaVjlzYVc1bFgyMWhkR1Z5YVdGc0tITmpaVzVsTENCMWJtbG1iM0p0Y3l3Z1lYUjBjbWxpZFhSbGN5a2dld29nSUNBZ1kyOXVjM1FnZFc1cFptOXliWE5mWkdWeklEMGdaR1Z6WlhKcFlXeHBlbVZmZFc1cFptOXliWE1vYzJObGJtVXNJSFZ1YVdadmNtMXpLVHNLSUNBZ0lHTnZibk4wSUcxaGRDQTlJRzVsZHlCVVNGSkZSUzVTWVhkVGFHRmtaWEpOWVhSbGNtbGhiQ2g3Q2lBZ0lDQWdJQ0FnZFc1cFptOXliWE02SUhWdWFXWnZjbTF6WDJSbGN5d0tJQ0FnSUNBZ0lDQm5iSE5zVm1WeWMybHZiam9nVkVoU1JVVXVSMHhUVERNc0NpQWdJQ0FnSUNBZ2RtVnlkR1Y0VTJoaFpHVnlPaUJzYVc1bGMyVm5iV1Z1ZEhOZmRtVnlkR1Y0WDNOb1lXUmxjaWgxYm1sbWIzSnRjMTlrWlhNc0lHRjBkSEpwWW5WMFpYTXBMQW9nSUNBZ0lDQWdJR1p5WVdkdFpXNTBVMmhoWkdWeU9pQnNhVzVsYzE5bWNtRm5iV1Z1ZEY5emFHRmtaWElvZFc1cFptOXliWE5mWkdWekxDQmhkSFJ5YVdKMWRHVnpLU3dLSUNBZ0lDQWdJQ0IwY21GdWMzQmhjbVZ1ZERvZ2RISjFaUW9nSUNBZ2ZTazdDaUFnSUNCdFlYUXVkVzVwWm05eWJYTXViMkpxWldOMFgybGtJRDBnZXdvZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4Q2lBZ0lDQjlPd29nSUNBZ2NtVjBkWEp1SUcxaGREc0tmUXBtZFc1amRHbHZiaUJoZEhSaFkyaGZhVzUwWlhKc1pXRjJaV1JmYkdsdVpWOWlkV1ptWlhJb1lYUjBjbDl1WVcxbExDQm5aVzl0WlhSeWVTd2djRzlwYm5SekxDQnVaR2x0TENCcGMxOXpaV2R0Wlc1MGN5a2dld29nSUNBZ1kyOXVjM1FnYzJ0cGNGOWxiR1Z0Y3lBOUlHbHpYM05sWjIxbGJuUnpJRDhnTWlBcUlHNWthVzBnT2lCdVpHbHRPd29nSUNBZ1kyOXVjM1FnWW5WbVptVnlJRDBnYm1WM0lGUklVa1ZGTGtsdWMzUmhibU5sWkVsdWRHVnliR1ZoZG1Wa1FuVm1abVZ5S0hCdmFXNTBjeXdnYzJ0cGNGOWxiR1Z0Y3l3Z01TazdDaUFnSUNCblpXOXRaWFJ5ZVM1elpYUkJkSFJ5YVdKMWRHVW9ZWFIwY2w5dVlXMWxJQ3NnSWw5emRHRnlkQ0lzSUc1bGR5QlVTRkpGUlM1SmJuUmxjbXhsWVhabFpFSjFabVpsY2tGMGRISnBZblYwWlNoaWRXWm1aWElzSUc1a2FXMHNJREFwS1RzS0lDQWdJR2RsYjIxbGRISjVMbk5sZEVGMGRISnBZblYwWlNoaGRIUnlYMjVoYldVZ0t5QWlYMlZ1WkNJc0lHNWxkeUJVU0ZKRlJTNUpiblJsY214bFlYWmxaRUoxWm1abGNrRjBkSEpwWW5WMFpTaGlkV1ptWlhJc0lHNWthVzBzSUc1a2FXMHBLVHNLSUNBZ0lISmxkSFZ5YmlCaWRXWm1aWEk3Q24wS1puVnVZM1JwYjI0Z1kzSmxZWFJsWDJ4cGJtVmZhVzV6ZEdGdVkyVmZaMlZ2YldWMGNua29LU0I3Q2lBZ0lDQmpiMjV6ZENCblpXOXRaWFJ5ZVNBOUlHNWxkeUJVU0ZKRlJTNUpibk4wWVc1alpXUkNkV1ptWlhKSFpXOXRaWFJ5ZVNncE93b2dJQ0FnWTI5dWMzUWdhVzV6ZEdGdVkyVmZjRzl6YVhScGIyNXpJRDBnV3dvZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0xUQXVOU3dLSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUMwd0xqVXNDaUFnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0F3TGpVc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXRNQzQxTEFvZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ01DNDFMQW9nSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnTUM0MUNpQWdJQ0JkT3dvZ0lDQWdaMlZ2YldWMGNua3VjMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJc0lHNWxkeUJVU0ZKRlJTNUdiRzloZERNeVFuVm1abVZ5UVhSMGNtbGlkWFJsS0dsdWMzUmhibU5sWDNCdmMybDBhVzl1Y3l3Z01pa3BPd29nSUNBZ1oyVnZiV1YwY25rdVltOTFibVJwYm1kVGNHaGxjbVVnUFNCdVpYY2dWRWhTUlVVdVUzQm9aWEpsS0NrN0NpQWdJQ0JuWlc5dFpYUnllUzVpYjNWdVpHbHVaMU53YUdWeVpTNXlZV1JwZFhNZ1BTQXhNREF3TURBd01EQXdNREF3TURzS0lDQWdJR2RsYjIxbGRISjVMbVp5ZFhOMGRXMURkV3hzWldRZ1BTQm1ZV3h6WlRzS0lDQWdJSEpsZEhWeWJpQm5aVzl0WlhSeWVUc0tmUXBtZFc1amRHbHZiaUJqY21WaGRHVmZiR2x1WlY5aWRXWm1aWElvWjJWdmJXVjBjbmtzSUdKMVptWmxjbk1zSUc1aGJXVXNJR0YwZEhJc0lHbHpYM05sWjIxbGJuUnpLU0I3Q2lBZ0lDQmpiMjV6ZENCbWJHRjBYMkoxWm1abGNpQTlJR0YwZEhJdWRtRnNkV1V1Wm14aGREc0tJQ0FnSUdOdmJuTjBJRzVrYVcxeklEMGdZWFIwY2k1MllXeDFaUzUwZVhCbFgyeGxibWQwYURzS0lDQWdJR052Ym5OMElHeHBibVZpZFdabVpYSWdQU0JoZEhSaFkyaGZhVzUwWlhKc1pXRjJaV1JmYkdsdVpWOWlkV1ptWlhJb2JtRnRaU3dnWjJWdmJXVjBjbmtzSUdac1lYUmZZblZtWm1WeUxDQnVaR2x0Y3l3Z2FYTmZjMlZuYldWdWRITXBPd29nSUNBZ1luVm1abVZ5YzF0dVlXMWxYU0E5SUd4cGJtVmlkV1ptWlhJN0NpQWdJQ0J5WlhSMWNtNGdabXhoZEY5aWRXWm1aWEk3Q24wS1puVnVZM1JwYjI0Z1kzSmxZWFJsWDJ4cGJtVmZZblZtWm1WeWN5aG5aVzl0WlhSeWVTd2dZblZtWm1WeWN5d2dZWFIwY21saWRYUmxjeXdnYVhOZmMyVm5iV1Z1ZEhNcElIc0tJQ0FnSUdadmNpaHNaWFFnYm1GdFpTQnBiaUJoZEhSeWFXSjFkR1Z6S1hzS0lDQWdJQ0FnSUNCamIyNXpkQ0JoZEhSeUlEMGdZWFIwY21saWRYUmxjMXR1WVcxbFhUc0tJQ0FnSUNBZ0lDQmpjbVZoZEdWZmJHbHVaVjlpZFdabVpYSW9aMlZ2YldWMGNua3NJR0oxWm1abGNuTXNJRzVoYldVc0lHRjBkSElzSUdselgzTmxaMjFsYm5SektUc0tJQ0FnSUgwS2ZRcG1kVzVqZEdsdmJpQmhkSFJoWTJoZmRYQmtZWFJsY3lodFpYTm9MQ0JpZFdabVpYSnpMQ0JoZEhSeWFXSjFkR1Z6TENCcGMxOXpaV2R0Wlc1MGN5a2dld29nSUNBZ2JHVjBJR2RsYjIxbGRISjVJRDBnYldWemFDNW5aVzl0WlhSeWVUc0tJQ0FnSUdadmNpaHNaWFFnYm1GdFpTQnBiaUJoZEhSeWFXSjFkR1Z6S1hzS0lDQWdJQ0FnSUNCamIyNXpkQ0JoZEhSeUlEMGdZWFIwY21saWRYUmxjMXR1WVcxbFhUc0tJQ0FnSUNBZ0lDQmhkSFJ5TG05dUtDaHVaWGRmY0c5cGJuUnpLVDArZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWW5WbVppQTlJR0oxWm1abGNuTmJibUZ0WlYwN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHNWthVzF6SUQwZ2JtVjNYM0J2YVc1MGN5NTBlWEJsWDJ4bGJtZDBhRHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm1WM1gyeHBibVZmY0c5cGJuUnpJRDBnYm1WM1gzQnZhVzUwY3k1bWJHRjBPd29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J2YkdSZlkyOTFiblFnUFNCaWRXWm1MbUZ5Y21GNUxteGxibWQwYURzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JtVjNYMk52ZFc1MElEMGdibVYzWDJ4cGJtVmZjRzlwYm5SekxteGxibWQwYUNBdklHNWthVzF6T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjJ4a1gyTnZkVzUwSUR3Z2JtVjNYMnhwYm1WZmNHOXBiblJ6TG14bGJtZDBhQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemFDNW5aVzl0WlhSeWVTNWthWE53YjNObEtDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5aVzl0WlhSeWVTQTlJR055WldGMFpWOXNhVzVsWDJsdWMzUmhibU5sWDJkbGIyMWxkSEo1S0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWRXWm1JRDBnWVhSMFlXTm9YMmx1ZEdWeWJHVmhkbVZrWDJ4cGJtVmZZblZtWm1WeUtHNWhiV1VzSUdkbGIyMWxkSEo1TENCdVpYZGZiR2x1WlY5d2IybHVkSE1zSUc1a2FXMXpMQ0JwYzE5elpXZHRaVzUwY3lrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTm9MbWRsYjIxbGRISjVJRDBnWjJWdmJXVjBjbms3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpZFdabVpYSnpXMjVoYldWZElEMGdZblZtWmpzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSjFabVl1YzJWMEtHNWxkMTlzYVc1bFgzQnZhVzUwY3lrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYkhOZlptRmpkRzl5SUQwZ2FYTmZjMlZuYldWdWRITWdQeUF5SURvZ01Uc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiMlptYzJWMElEMGdhWE5mYzJWbmJXVnVkSE1nUHlBd0lEb2dNVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JXVnphQzVuWlc5dFpYUnllUzVwYm5OMFlXNWpaVU52ZFc1MElEMGdUV0YwYUM1dFlYZ29NQ3dnYm1WM1gyTnZkVzUwSUM4Z2JITmZabUZqZEc5eUlDMGdiMlptYzJWMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWW5WbVppNXVaV1ZrYzFWd1pHRjBaU0E5SUhSeWRXVTdDaUFnSUNBZ0lDQWdJQ0FnSUcxbGMyZ3VibVZsWkhOVmNHUmhkR1VnUFNCMGNuVmxPd29nSUNBZ0lDQWdJSDBwT3dvZ0lDQWdmUXA5Q21aMWJtTjBhVzl1SUY5amNtVmhkR1ZmYkdsdVpTaHpZMlZ1WlN3Z2JHbHVaVjlrWVhSaExDQnBjMTl6WldkdFpXNTBjeWtnZXdvZ0lDQWdZMjl1YzNRZ1oyVnZiV1YwY25rZ1BTQmpjbVZoZEdWZmJHbHVaVjlwYm5OMFlXNWpaVjluWlc5dFpYUnllU2dwT3dvZ0lDQWdZMjl1YzNRZ1luVm1abVZ5Y3lBOUlIdDlPd29nSUNBZ1kzSmxZWFJsWDJ4cGJtVmZZblZtWm1WeWN5aG5aVzl0WlhSeWVTd2dZblZtWm1WeWN5d2diR2x1WlY5a1lYUmhMbUYwZEhKcFluVjBaWE1zSUdselgzTmxaMjFsYm5SektUc0tJQ0FnSUdOdmJuTjBJRzFoZEdWeWFXRnNJRDBnWTNKbFlYUmxYMnhwYm1WZmJXRjBaWEpwWVd3b2MyTmxibVVzSUd4cGJtVmZaR0YwWVM1MWJtbG1iM0p0Y3l3Z1oyVnZiV1YwY25rdVlYUjBjbWxpZFhSbGN5azdDaUFnSUNCdFlYUmxjbWxoYkM1MWJtbG1iM0p0Y3k1cGMxOXpaV2R0Wlc1MGMxOXRkV3gwYVNBOUlIc0tJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2FYTmZjMlZuYldWdWRITWdQeUF5SURvZ01Rb2dJQ0FnZlRzS0lDQWdJR052Ym5OMElHMWxjMmdnUFNCdVpYY2dWRWhTUlVVdVRXVnphQ2huWlc5dFpYUnllU3dnYldGMFpYSnBZV3dwT3dvZ0lDQWdZMjl1YzNRZ2IyWm1jMlYwSUQwZ2FYTmZjMlZuYldWdWRITWdQeUF3SURvZ01Uc0tJQ0FnSUdOdmJuTjBJRzVsZDE5amIzVnVkQ0E5SUdkbGIyMWxkSEo1TG1GMGRISnBZblYwWlhNdWJHbHVaWEJ2YVc1MFgzTjBZWEowTG1OdmRXNTBPd29nSUNBZ2JXVnphQzVuWlc5dFpYUnllUzVwYm5OMFlXNWpaVU52ZFc1MElEMGdUV0YwYUM1dFlYZ29NQ3dnYm1WM1gyTnZkVzUwSUMwZ2IyWm1jMlYwS1RzS0lDQWdJR0YwZEdGamFGOTFjR1JoZEdWektHMWxjMmdzSUdKMVptWmxjbk1zSUd4cGJtVmZaR0YwWVM1aGRIUnlhV0oxZEdWekxDQnBjMTl6WldkdFpXNTBjeWs3Q2lBZ0lDQnlaWFIxY200Z2JXVnphRHNLZlFwbWRXNWpkR2x2YmlCamNtVmhkR1ZmYkdsdVpTaHpZMlZ1WlN3Z2JHbHVaVjlrWVhSaEtTQjdDaUFnSUNCeVpYUjFjbTRnWDJOeVpXRjBaVjlzYVc1bEtITmpaVzVsTENCc2FXNWxYMlJoZEdFc0lHWmhiSE5sS1RzS2ZRcG1kVzVqZEdsdmJpQmpjbVZoZEdWZmJHbHVaWE5sWjIxbGJuUnpLSE5qWlc1bExDQnNhVzVsWDJSaGRHRXBJSHNLSUNBZ0lISmxkSFZ5YmlCZlkzSmxZWFJsWDJ4cGJtVW9jMk5sYm1Vc0lHeHBibVZmWkdGMFlTd2dkSEoxWlNrN0NuMEtablZ1WTNScGIyNGdaR1Z6WlhKcFlXeHBlbVZmY0d4dmRDaHpZMlZ1WlN3Z1pHRjBZU2tnZXdvZ0lDQWdiR1YwSUcxbGMyZzdDaUFnSUNCamIyNXpkQ0IxY0dSaGRHVmZkbWx6YVdKc1pTQTlJQ2gyS1QwK2V3b2dJQ0FnSUNBZ0lHMWxjMmd1ZG1semFXSnNaU0E5SUhZN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdmVHNLSUNBZ0lHbG1JQ2hrWVhSaExuQnNiM1JmZEhsd1pTQTlQVDBnSW14cGJtVnpJaWtnZXdvZ0lDQWdJQ0FnSUcxbGMyZ2dQU0JqY21WaGRHVmZiR2x1WlNoelkyVnVaU3dnWkdGMFlTazdDaUFnSUNCOUlHVnNjMlVnYVdZZ0tHUmhkR0V1Y0d4dmRGOTBlWEJsSUQwOVBTQWliR2x1WlhObFoyMWxiblJ6SWlrZ2V3b2dJQ0FnSUNBZ0lHMWxjMmdnUFNCamNtVmhkR1ZmYkdsdVpYTmxaMjFsYm5SektITmpaVzVsTENCa1lYUmhLVHNLSUNBZ0lIMGdaV3h6WlNCcFppQW9JbWx1YzNSaGJtTmxYMkYwZEhKcFluVjBaWE1pSUdsdUlHUmhkR0VwSUhzS0lDQWdJQ0FnSUNCdFpYTm9JRDBnWTNKbFlYUmxYMmx1YzNSaGJtTmxaRjl0WlhOb0tITmpaVzVsTENCa1lYUmhLVHNLSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ2JXVnphQ0E5SUdOeVpXRjBaVjl0WlhOb0tITmpaVzVsTENCa1lYUmhLVHNLSUNBZ0lIMEtJQ0FnSUcxbGMyZ3VibUZ0WlNBOUlHUmhkR0V1Ym1GdFpUc0tJQ0FnSUcxbGMyZ3VabkoxYzNSMWJVTjFiR3hsWkNBOUlHWmhiSE5sT3dvZ0lDQWdiV1Z6YUM1dFlYUnlhWGhCZFhSdlZYQmtZWFJsSUQwZ1ptRnNjMlU3Q2lBZ0lDQnRaWE5vTG5Cc2IzUmZkWFZwWkNBOUlHUmhkR0V1ZFhWcFpEc0tJQ0FnSUhWd1pHRjBaVjkyYVhOcFlteGxLR1JoZEdFdWRtbHphV0pzWlM1MllXeDFaU2s3Q2lBZ0lDQmtZWFJoTG5acGMybGliR1V1YjI0b2RYQmtZWFJsWDNacGMybGliR1VwT3dvZ0lDQWdZMjl1Ym1WamRGOTFibWxtYjNKdGN5aHRaWE5vTENCa1lYUmhMblZ1YVdadmNtMWZkWEJrWVhSbGNpazdDaUFnSUNCcFppQW9JU2hrWVhSaExuQnNiM1JmZEhsd1pTQTlQVDBnSW14cGJtVnpJaUI4ZkNCa1lYUmhMbkJzYjNSZmRIbHdaU0E5UFQwZ0lteHBibVZ6WldkdFpXNTBjeUlwS1NCN0NpQWdJQ0FnSUNBZ1kyOXVibVZqZEY5aGRIUnlhV0oxZEdWektHMWxjMmdzSUdSaGRHRXVZWFIwY21saWRYUmxYM1Z3WkdGMFpYSXBPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJRzFsYzJnN0NuMEtZMjl1YzNRZ1QwNWZUa1ZZVkY5SlRsTkZVbFFnUFNCdVpYY2dVMlYwS0NrN0NtWjFibU4wYVc5dUlHOXVYMjVsZUhSZmFXNXpaWEowS0dZcElIc0tJQ0FnSUU5T1gwNUZXRlJmU1U1VFJWSlVMbUZrWkNobUtUc0tmUXBtZFc1amRHbHZiaUJoWkdSZmNHeHZkQ2h6WTJWdVpTd2djR3h2ZEY5a1lYUmhLU0I3Q2lBZ0lDQmpiMjV6ZENCallXMGdQU0J6WTJWdVpTNTNaMnhmWTJGdFpYSmhPd29nSUNBZ1kyOXVjM1FnYVdSbGJuUnBkSGtnUFNCdVpYY2diVzlrTGxWdWFXWnZjbTBvYm1WM0lHMXZaQzVOWVhSeWFYZzBLQ2twT3dvZ0lDQWdhV1lnS0hCc2IzUmZaR0YwWVM1allXMWZjM0JoWTJVZ1BUMGdJbVJoZEdFaUtTQjdDaUFnSUNBZ0lDQWdjR3h2ZEY5a1lYUmhMblZ1YVdadmNtMXpMblpwWlhjZ1BTQmpZVzB1ZG1sbGR6c0tJQ0FnSUNBZ0lDQndiRzkwWDJSaGRHRXVkVzVwWm05eWJYTXVjSEp2YW1WamRHbHZiaUE5SUdOaGJTNXdjbTlxWldOMGFXOXVPd29nSUNBZ0lDQWdJSEJzYjNSZlpHRjBZUzUxYm1sbWIzSnRjeTV3Y205cVpXTjBhVzl1ZG1sbGR5QTlJR05oYlM1d2NtOXFaV04wYVc5dWRtbGxkenNLSUNBZ0lDQWdJQ0J3Ykc5MFgyUmhkR0V1ZFc1cFptOXliWE11WlhsbGNHOXphWFJwYjI0Z1BTQmpZVzB1WlhsbGNHOXphWFJwYjI0N0NpQWdJQ0I5SUdWc2MyVWdhV1lnS0hCc2IzUmZaR0YwWVM1allXMWZjM0JoWTJVZ1BUMGdJbkJwZUdWc0lpa2dld29nSUNBZ0lDQWdJSEJzYjNSZlpHRjBZUzUxYm1sbWIzSnRjeTUyYVdWM0lEMGdhV1JsYm5ScGRIazdDaUFnSUNBZ0lDQWdjR3h2ZEY5a1lYUmhMblZ1YVdadmNtMXpMbkJ5YjJwbFkzUnBiMjRnUFNCallXMHVjR2w0Wld4ZmMzQmhZMlU3Q2lBZ0lDQWdJQ0FnY0d4dmRGOWtZWFJoTG5WdWFXWnZjbTF6TG5CeWIycGxZM1JwYjI1MmFXVjNJRDBnWTJGdExuQnBlR1ZzWDNOd1lXTmxPd29nSUNBZ2ZTQmxiSE5sSUdsbUlDaHdiRzkwWDJSaGRHRXVZMkZ0WDNOd1lXTmxJRDA5SUNKeVpXeGhkR2wyWlNJcElIc0tJQ0FnSUNBZ0lDQndiRzkwWDJSaGRHRXVkVzVwWm05eWJYTXVkbWxsZHlBOUlHbGtaVzUwYVhSNU93b2dJQ0FnSUNBZ0lIQnNiM1JmWkdGMFlTNTFibWxtYjNKdGN5NXdjbTlxWldOMGFXOXVJRDBnWTJGdExuSmxiR0YwYVhabFgzTndZV05sT3dvZ0lDQWdJQ0FnSUhCc2IzUmZaR0YwWVM1MWJtbG1iM0p0Y3k1d2NtOXFaV04wYVc5dWRtbGxkeUE5SUdOaGJTNXlaV3hoZEdsMlpWOXpjR0ZqWlRzS0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdjR3h2ZEY5a1lYUmhMblZ1YVdadmNtMXpMblpwWlhjZ1BTQnBaR1Z1ZEdsMGVUc0tJQ0FnSUNBZ0lDQndiRzkwWDJSaGRHRXVkVzVwWm05eWJYTXVjSEp2YW1WamRHbHZiaUE5SUdsa1pXNTBhWFI1T3dvZ0lDQWdJQ0FnSUhCc2IzUmZaR0YwWVM1MWJtbG1iM0p0Y3k1d2NtOXFaV04wYVc5dWRtbGxkeUE5SUdsa1pXNTBhWFI1T3dvZ0lDQWdmUW9nSUNBZ1kyOXVjM1FnZXlCd2VGOXdaWEpmZFc1cGRDQWdmU0E5SUhOalpXNWxMbk5qY21WbGJqc0tJQ0FnSUhCc2IzUmZaR0YwWVM1MWJtbG1iM0p0Y3k1eVpYTnZiSFYwYVc5dUlEMGdZMkZ0TG5KbGMyOXNkWFJwYjI0N0NpQWdJQ0J3Ykc5MFgyUmhkR0V1ZFc1cFptOXliWE11Y0hoZmNHVnlYM1Z1YVhRZ1BTQnVaWGNnYlc5a0xsVnVhV1p2Y20wb2NIaGZjR1Z5WDNWdWFYUXBPd29nSUNBZ2FXWWdLSEJzYjNSZlpHRjBZUzUxYm1sbWIzSnRjeTV3Y21Wd2NtOXFaV04wYVc5dUtTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QnpjR0ZqWlNBc0lHMWhjbXRsY25Od1lXTmxJQ0I5SUQwZ2NHeHZkRjlrWVhSaE93b2dJQ0FnSUNBZ0lIQnNiM1JmWkdGMFlTNTFibWxtYjNKdGN5NXdjbVZ3Y205cVpXTjBhVzl1SUQwZ1kyRnRMbkJ5WlhCeWIycGxZM1JwYjI1ZmJXRjBjbWw0S0hOd1lXTmxMblpoYkhWbExDQnRZWEpyWlhKemNHRmpaUzUyWVd4MVpTazdDaUFnSUNCOUNpQWdJQ0JwWmlBb2MyTmxibVV1WTJGdFpYSmhYM0psYkdGMGFYWmxYMnhwWjJoMEtTQjdDaUFnSUNBZ0lDQWdjR3h2ZEY5a1lYUmhMblZ1YVdadmNtMXpMbXhwWjJoMFgyUnBjbVZqZEdsdmJpQTlJR05oYlM1c2FXZG9kRjlrYVhKbFkzUnBiMjQ3Q2lBZ0lDQWdJQ0FnYzJObGJtVXViR2xuYUhSZlpHbHlaV04wYVc5dUxtOXVLQ2gyWVd4MVpTazlQbnNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnRMblZ3WkdGMFpWOXNhV2RvZEY5a2FYSW9kbUZzZFdVcE93b2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNCamIyNXpkQ0JzYVdkb2RGOWthWElnUFNCdVpYY2diVzlrTGxabFkzUnZjak1vS1M1bWNtOXRRWEp5WVhrb2MyTmxibVV1YkdsbmFIUmZaR2x5WldOMGFXOXVMblpoYkhWbEtUc0tJQ0FnSUNBZ0lDQndiRzkwWDJSaGRHRXVkVzVwWm05eWJYTXViR2xuYUhSZlpHbHlaV04wYVc5dUlEMGdibVYzSUcxdlpDNVZibWxtYjNKdEtHeHBaMmgwWDJScGNpazdDaUFnSUNBZ0lDQWdjMk5sYm1VdWJHbG5hSFJmWkdseVpXTjBhVzl1TG05dUtDaDJZV3gxWlNrOVBuc0tJQ0FnSUNBZ0lDQWdJQ0FnY0d4dmRGOWtZWFJoTG5WdWFXWnZjbTF6TG14cFoyaDBYMlJwY21WamRHbHZiaTUyWVd4MVpTNW1jbTl0UVhKeVlYa29kbUZzZFdVcE93b2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ2ZRb2dJQ0FnWTI5dWMzUWdjQ0E5SUdSbGMyVnlhV0ZzYVhwbFgzQnNiM1FvYzJObGJtVXNJSEJzYjNSZlpHRjBZU2s3Q2lBZ0lDQndiRzkwWDJOaFkyaGxXM0F1Y0d4dmRGOTFkV2xrWFNBOUlIQTdDaUFnSUNCelkyVnVaUzVoWkdRb2NDazdDaUFnSUNCamIyNXpkQ0J1WlhoMFgybHVjMlZ5ZENBOUlHNWxkeUJUWlhRb1QwNWZUa1ZZVkY5SlRsTkZVbFFwT3dvZ0lDQWdibVY0ZEY5cGJuTmxjblF1Wm05eVJXRmphQ2dvWmlrOVBtWW9LU2s3Q24wS1puVnVZM1JwYjI0Z1kyOXVibVZqZEY5MWJtbG1iM0p0Y3lodFpYTm9MQ0IxY0dSaGRHVnlLU0I3Q2lBZ0lDQjFjR1JoZEdWeUxtOXVLQ2hiYm1GdFpTd2daR0YwWVYwcFBUNTdDaUFnSUNBZ0lDQWdhV1lnS0c1aGJXVWdQVDA5SUNKdWIyNWxJaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHTnZibk4wSUhWdWFXWnZjbTBnUFNCdFpYTm9MbTFoZEdWeWFXRnNMblZ1YVdadmNtMXpXMjVoYldWZE93b2dJQ0FnSUNBZ0lHbG1JQ2gxYm1sbWIzSnRMblpoYkhWbExtbHpWR1Y0ZEhWeVpTa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JwYlY5a1lYUmhJRDBnZFc1cFptOXliUzUyWVd4MVpTNXBiV0ZuWlRzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1czTnBlbVVzSUhSbGVGOWtZWFJoWFNBOUlHUmhkR0U3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwWlhoZlpHRjBZUzVzWlc1bmRHZ2dQVDBnYVcxZlpHRjBZUzVrWVhSaExteGxibWQwYUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXMWZaR0YwWVM1a1lYUmhMbk5sZENoMFpYaGZaR0YwWVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdmJHUmZkR1Y0ZEhWeVpTQTlJSFZ1YVdadmNtMHVkbUZzZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWJtbG1iM0p0TG5aaGJIVmxJRDBnY21WZlkzSmxZWFJsWDNSbGVIUjFjbVVvYjJ4a1gzUmxlSFIxY21Vc0lIUmxlRjlrWVhSaExDQnphWHBsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5c1pGOTBaWGgwZFhKbExtUnBjM0J2YzJVb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjFibWxtYjNKdExuWmhiSFZsTG01bFpXUnpWWEJrWVhSbElEMGdkSEoxWlRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOZmRHaHlaV1ZmWm1sNFpXUmZZWEp5WVhrb2RXNXBabTl5YlM1MllXeDFaU2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWdWFXWnZjbTB1ZG1Gc2RXVXVabkp2YlVGeWNtRjVLR1JoZEdFcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkVzVwWm05eWJTNTJZV3gxWlNBOUlHUmhkR0U3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNCOUtUc0tmUXBtZFc1amRHbHZiaUJqYjI1MlpYSjBYMUpIUWw5MGIxOVNSMEpCS0hKbllrRnljbUY1S1NCN0NpQWdJQ0JqYjI1emRDQnNaVzVuZEdnZ1BTQnlaMkpCY25KaGVTNXNaVzVuZEdnN0NpQWdJQ0JqYjI1emRDQnlaMkpoUVhKeVlYa2dQU0J1WlhjZ1JteHZZWFF6TWtGeWNtRjVLR3hsYm1kMGFDQXZJRE1nS2lBMEtUc0tJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQXNJR29nUFNBd095QnBJRHdnYkdWdVozUm9PeUJwSUNzOUlETXNJR29nS3owZ05DbDdDaUFnSUNBZ0lDQWdjbWRpWVVGeWNtRjVXMnBkSUQwZ2NtZGlRWEp5WVhsYmFWMDdDaUFnSUNBZ0lDQWdjbWRpWVVGeWNtRjVXMm9nS3lBeFhTQTlJSEpuWWtGeWNtRjVXMmtnS3lBeFhUc0tJQ0FnSUNBZ0lDQnlaMkpoUVhKeVlYbGJhaUFySURKZElEMGdjbWRpUVhKeVlYbGJhU0FySURKZE93b2dJQ0FnSUNBZ0lISm5ZbUZCY25KaGVWdHFJQ3NnTTEwZ1BTQXhMakE3Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnY21kaVlVRnljbUY1T3dwOUNtWjFibU4wYVc5dUlHTnlaV0YwWlY5MFpYaDBkWEpsWDJaeWIyMWZaR0YwWVNoa1lYUmhLU0I3Q2lBZ0lDQnNaWFFnWW5WbVptVnlJRDBnWkdGMFlTNWtZWFJoT3dvZ0lDQWdhV1lnS0dSaGRHRXVjMmw2WlM1c1pXNW5kR2dnUFQwZ015a2dld29nSUNBZ0lDQWdJR052Ym5OMElIUmxlQ0E5SUc1bGR5QnRiMlF1UkdGMFlUTkVWR1Y0ZEhWeVpTaGlkV1ptWlhJc0lHUmhkR0V1YzJsNlpWc3dYU3dnWkdGMFlTNXphWHBsV3pGZExDQmtZWFJoTG5OcGVtVmJNbDBwT3dvZ0lDQWdJQ0FnSUhSbGVDNW1iM0p0WVhRZ1BTQnRiMlJiWkdGMFlTNTBhSEpsWlY5bWIzSnRZWFJkT3dvZ0lDQWdJQ0FnSUhSbGVDNTBlWEJsSUQwZ2JXOWtXMlJoZEdFdWRHaHlaV1ZmZEhsd1pWMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUmxlRHNLSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ2JHVjBJR1p2Y20xaGRDQTlJRzF2WkZ0a1lYUmhMblJvY21WbFgyWnZjbTFoZEYwN0NpQWdJQ0FnSUNBZ2FXWWdLR1JoZEdFdWRHaHlaV1ZmWm05eWJXRjBJRDA5SUNKU1IwSkdiM0p0WVhRaUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdKMVptWmxjaUE5SUdOdmJuWmxjblJmVWtkQ1gzUnZYMUpIUWtFb1luVm1abVZ5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5YldGMElEMGdiVzlrTGxKSFFrRkdiM0p0WVhRN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2diVzlrTGtSaGRHRlVaWGgwZFhKbEtHSjFabVpsY2l3Z1pHRjBZUzV6YVhwbFd6QmRMQ0JrWVhSaExuTnBlbVZiTVYwc0lHWnZjbTFoZEN3Z2JXOWtXMlJoZEdFdWRHaHlaV1ZmZEhsd1pWMHBPd29nSUNBZ2ZRcDlDbVoxYm1OMGFXOXVJR055WldGMFpWOTBaWGgwZFhKbEtITmpaVzVsTENCa1lYUmhLU0I3Q2lBZ0lDQmpiMjV6ZENCaWRXWm1aWElnUFNCa1lYUmhMbVJoZEdFN0NpQWdJQ0JwWmlBb1luVm1abVZ5SUQwOUlDSjBaWGgwZFhKbFgyRjBiR0Z6SWlrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUhzZ2RHVjRkSFZ5WlY5aGRHeGhjeUFnZlNBOUlITmpaVzVsTG5OamNtVmxianNLSUNBZ0lDQWdJQ0JwWmlBb2RHVjRkSFZ5WlY5aGRHeGhjeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHVjRkSFZ5WlY5aGRHeGhjenNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMbVJoZEdFZ1BTQlVSVmhVVlZKRlgwRlVURUZUV3pCZExuWmhiSFZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMFpYaDBkWEpsSUQwZ1kzSmxZWFJsWDNSbGVIUjFjbVZmWm5KdmJWOWtZWFJoS0dSaGRHRXBPd29nSUNBZ0lDQWdJQ0FnSUNCelkyVnVaUzV6WTNKbFpXNHVkR1Y0ZEhWeVpWOWhkR3hoY3lBOUlIUmxlSFIxY21VN0NpQWdJQ0FnSUNBZ0lDQWdJRlJGV0ZSVlVrVmZRVlJNUVZOYk1GMHViMjRvS0c1bGQxOWtZWFJoS1QwK2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzVsZDE5a1lYUmhJRDA5UFNCMFpYaDBkWEpsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBkWEpsTG1sdFlXZGxMbVJoZEdFdWMyVjBLRzVsZDE5a1lYUmhLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBkWEpsTG01bFpXUnpWWEJrWVhSbElEMGdkSEoxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHVjRkSFZ5WlRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmpjbVZoZEdWZmRHVjRkSFZ5WlY5bWNtOXRYMlJoZEdFb1pHRjBZU2s3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnY21WZlkzSmxZWFJsWDNSbGVIUjFjbVVvYjJ4a1gzUmxlSFIxY21Vc0lHSjFabVpsY2l3Z2MybDZaU2tnZXdvZ0lDQWdiR1YwSUhSbGVEc0tJQ0FnSUdsbUlDaHphWHBsTG14bGJtZDBhQ0E5UFNBektTQjdDaUFnSUNBZ0lDQWdkR1Y0SUQwZ2JtVjNJRzF2WkM1RVlYUmhNMFJVWlhoMGRYSmxLR0oxWm1abGNpd2djMmw2WlZzd1hTd2djMmw2WlZzeFhTd2djMmw2WlZzeVhTazdDaUFnSUNBZ0lDQWdkR1Y0TG1admNtMWhkQ0E5SUc5c1pGOTBaWGgwZFhKbExtWnZjbTFoZERzS0lDQWdJQ0FnSUNCMFpYZ3VkSGx3WlNBOUlHOXNaRjkwWlhoMGRYSmxMblI1Y0dVN0NpQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJSFJsZUNBOUlHNWxkeUJ0YjJRdVJHRjBZVlJsZUhSMWNtVW9ZblZtWm1WeUxDQnphWHBsV3pCZExDQnphWHBsV3pGZElEOGdjMmw2WlZzeFhTQTZJREVzSUc5c1pGOTBaWGgwZFhKbExtWnZjbTFoZEN3Z2IyeGtYM1JsZUhSMWNtVXVkSGx3WlNrN0NpQWdJQ0I5Q2lBZ0lDQjBaWGd1YldsdVJtbHNkR1Z5SUQwZ2IyeGtYM1JsZUhSMWNtVXViV2x1Um1sc2RHVnlPd29nSUNBZ2RHVjRMbTFoWjBacGJIUmxjaUE5SUc5c1pGOTBaWGgwZFhKbExtMWhaMFpwYkhSbGNqc0tJQ0FnSUhSbGVDNWhibWx6YjNSeWIzQjVJRDBnYjJ4a1gzUmxlSFIxY21VdVlXNXBjMjkwY205d2VUc0tJQ0FnSUhSbGVDNTNjbUZ3VXlBOUlHOXNaRjkwWlhoMGRYSmxMbmR5WVhCVE93b2dJQ0FnYVdZZ0tITnBlbVV1YkdWdVozUm9JRDRnTVNrZ2V3b2dJQ0FnSUNBZ0lIUmxlQzUzY21Gd1ZDQTlJRzlzWkY5MFpYaDBkWEpsTG5keVlYQlVPd29nSUNBZ2ZRb2dJQ0FnYVdZZ0tITnBlbVV1YkdWdVozUm9JRDRnTWlrZ2V3b2dJQ0FnSUNBZ0lIUmxlQzUzY21Gd1VpQTlJRzlzWkY5MFpYaDBkWEpsTG5keVlYQlNPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSFJsZURzS2ZRcG1kVzVqZEdsdmJpQkNkV1ptWlhKQmRIUnlhV0oxZEdVb1luVm1abVZ5S1NCN0NpQWdJQ0JqYjI1emRDQnFjMkoxWm1ZZ1BTQnVaWGNnYlc5a0xrSjFabVpsY2tGMGRISnBZblYwWlNoaWRXWm1aWEl1Wm14aGRDd2dZblZtWm1WeUxuUjVjR1ZmYkdWdVozUm9LVHNLSUNBZ0lHcHpZblZtWmk1elpYUlZjMkZuWlNodGIyUXVSSGx1WVcxcFkwUnlZWGRWYzJGblpTazdDaUFnSUNCeVpYUjFjbTRnYW5OaWRXWm1Pd3A5Q21aMWJtTjBhVzl1SUVsdWMzUmhibU5sUW5WbVptVnlRWFIwY21saWRYUmxLR0oxWm1abGNpa2dld29nSUNBZ1kyOXVjM1FnYW5OaWRXWm1JRDBnYm1WM0lHMXZaQzVKYm5OMFlXNWpaV1JDZFdabVpYSkJkSFJ5YVdKMWRHVW9ZblZtWm1WeUxtWnNZWFFzSUdKMVptWmxjaTUwZVhCbFgyeGxibWQwYUNrN0NpQWdJQ0JxYzJKMVptWXVjMlYwVlhOaFoyVW9iVzlrTGtSNWJtRnRhV05FY21GM1ZYTmhaMlVwT3dvZ0lDQWdjbVYwZFhKdUlHcHpZblZtWmpzS2ZRcG1kVzVqZEdsdmJpQmhkSFJoWTJoZloyVnZiV1YwY25rb1luVm1abVZ5WDJkbGIyMWxkSEo1TENCMlpYSjBaWGhoY25KaGVYTXNJR1poWTJWektTQjdDaUFnSUNCbWIzSW9ZMjl1YzNRZ2JtRnRaU0JwYmlCMlpYSjBaWGhoY25KaGVYTXBld29nSUNBZ0lDQWdJR052Ym5OMElHSjFabVlnUFNCMlpYSjBaWGhoY25KaGVYTmJibUZ0WlYwN0NpQWdJQ0FnSUNBZ2JHVjBJR0oxWm1abGNqc0tJQ0FnSUNBZ0lDQnBaaUFvWW5WbVppNTBiMTkxY0dSaGRHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1luVm1abVZ5SUQwZ2JtVjNJRzF2WkM1Q2RXWm1aWEpCZEhSeWFXSjFkR1VvWW5WbVppNTBiMTkxY0dSaGRHVXNJR0oxWm1ZdWFYUmxiVk5wZW1VcE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR0oxWm1abGNpQTlJRUoxWm1abGNrRjBkSEpwWW5WMFpTaGlkV1ptS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1luVm1abVZ5WDJkbGIyMWxkSEo1TG5ObGRFRjBkSEpwWW5WMFpTaHVZVzFsTENCaWRXWm1aWElwT3dvZ0lDQWdmUW9nSUNBZ1luVm1abVZ5WDJkbGIyMWxkSEo1TG5ObGRFbHVaR1Y0S0daaFkyVnpLVHNLSUNBZ0lHSjFabVpsY2w5blpXOXRaWFJ5ZVM1aWIzVnVaR2x1WjFOd2FHVnlaU0E5SUc1bGR5QnRiMlF1VTNCb1pYSmxLQ2s3Q2lBZ0lDQmlkV1ptWlhKZloyVnZiV1YwY25rdVltOTFibVJwYm1kVGNHaGxjbVV1Y21Ga2FYVnpJRDBnTVRBd01EQXdNREF3TURBd01EQTdDaUFnSUNCaWRXWm1aWEpmWjJWdmJXVjBjbmt1Wm5KMWMzUjFiVU4xYkd4bFpDQTlJR1poYkhObE93b2dJQ0FnY21WMGRYSnVJR0oxWm1abGNsOW5aVzl0WlhSeWVUc0tmUXBtZFc1amRHbHZiaUJoZEhSaFkyaGZhVzV6ZEdGdVkyVmtYMmRsYjIxbGRISjVLR0oxWm1abGNsOW5aVzl0WlhSeWVTd2dhVzV6ZEdGdVkyVmZZWFIwY21saWRYUmxjeWtnZXdvZ0lDQWdabTl5S0dOdmJuTjBJRzVoYldVZ2FXNGdhVzV6ZEdGdVkyVmZZWFIwY21saWRYUmxjeWw3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdZblZtWm1WeUlEMGdTVzV6ZEdGdVkyVkNkV1ptWlhKQmRIUnlhV0oxZEdVb2FXNXpkR0Z1WTJWZllYUjBjbWxpZFhSbGMxdHVZVzFsWFNrN0NpQWdJQ0FnSUNBZ1luVm1abVZ5WDJkbGIyMWxkSEo1TG5ObGRFRjBkSEpwWW5WMFpTaHVZVzFsTENCaWRXWm1aWElwT3dvZ0lDQWdmUXA5Q21aMWJtTjBhVzl1SUhKbFkzSmxZWFJsWDJkbGIyMWxkSEo1S0cxbGMyZ3NJSFpsY25SbGVHRnljbUY1Y3l3Z1ptRmpaWE1wSUhzS0lDQWdJR052Ym5OMElHSjFabVpsY2w5blpXOXRaWFJ5ZVNBOUlHNWxkeUJ0YjJRdVFuVm1abVZ5UjJWdmJXVjBjbmtvS1RzS0lDQWdJR0YwZEdGamFGOW5aVzl0WlhSeWVTaGlkV1ptWlhKZloyVnZiV1YwY25rc0lIWmxjblJsZUdGeWNtRjVjeXdnWm1GalpYTXBPd29nSUNBZ2JXVnphQzVuWlc5dFpYUnllUzVrYVhOd2IzTmxLQ2s3Q2lBZ0lDQnRaWE5vTG1kbGIyMWxkSEo1SUQwZ1luVm1abVZ5WDJkbGIyMWxkSEo1T3dvZ0lDQWdiV1Z6YUM1dVpXVmtjMVZ3WkdGMFpTQTlJSFJ5ZFdVN0NuMEtablZ1WTNScGIyNGdjbVZqY21WaGRHVmZhVzV6ZEdGdVkyVmtYMmRsYjIxbGRISjVLRzFsYzJncElIc0tJQ0FnSUdOdmJuTjBJR0oxWm1abGNsOW5aVzl0WlhSeWVTQTlJRzVsZHlCdGIyUXVTVzV6ZEdGdVkyVmtRblZtWm1WeVIyVnZiV1YwY25rb0tUc0tJQ0FnSUdOdmJuTjBJSFpsY25SbGVHRnljbUY1Y3lBOUlIdDlPd29nSUNBZ1kyOXVjM1FnYVc1emRHRnVZMlZmWVhSMGNtbGlkWFJsY3lBOUlIdDlPd29nSUNBZ1kyOXVjM1FnWm1GalpYTWdQU0JiQ2lBZ0lDQWdJQ0FnTGk0dWJXVnphQzVuWlc5dFpYUnllUzVwYm1SbGVDNWhjbkpoZVFvZ0lDQWdYVHNLSUNBZ0lFOWlhbVZqZEM1clpYbHpLRzFsYzJndVoyVnZiV1YwY25rdVlYUjBjbWxpZFhSbGN5a3VabTl5UldGamFDZ29ibUZ0WlNrOVBuc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCaWRXWm1aWElnUFNCdFpYTm9MbWRsYjIxbGRISjVMbUYwZEhKcFluVjBaWE5iYm1GdFpWMDdDaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyOXdlU0E5SUdKMVptWmxjaTUwYjE5MWNHUmhkR1VnUHlCaWRXWm1aWEl1ZEc5ZmRYQmtZWFJsSURvZ1luVm1abVZ5TG1GeWNtRjVMbTFoY0Nnb2VDazlQbmdwT3dvZ0lDQWdJQ0FnSUdsbUlDaGlkV1ptWlhJdWFYTkpibk4wWVc1alpXUkNkV1ptWlhKQmRIUnlhV0oxZEdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVc1emRHRnVZMlZmWVhSMGNtbGlkWFJsYzF0dVlXMWxYU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdac1lYUTZJR052Y0hrc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxYMnhsYm1kMGFEb2dZblZtWm1WeUxtbDBaVzFUYVhwbENpQWdJQ0FnSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtVnlkR1Y0WVhKeVlYbHpXMjVoYldWZElEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabXhoZERvZ1kyOXdlU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dWZmJHVnVaM1JvT2lCaWRXWm1aWEl1YVhSbGJWTnBlbVVLSUNBZ0lDQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUtUc0tJQ0FnSUdGMGRHRmphRjluWlc5dFpYUnllU2hpZFdabVpYSmZaMlZ2YldWMGNua3NJSFpsY25SbGVHRnljbUY1Y3l3Z1ptRmpaWE1wT3dvZ0lDQWdZWFIwWVdOb1gybHVjM1JoYm1ObFpGOW5aVzl0WlhSeWVTaGlkV1ptWlhKZloyVnZiV1YwY25rc0lHbHVjM1JoYm1ObFgyRjBkSEpwWW5WMFpYTXBPd29nSUNBZ2JXVnphQzVuWlc5dFpYUnllUzVrYVhOd2IzTmxLQ2s3Q2lBZ0lDQnRaWE5vTG1kbGIyMWxkSEo1SUQwZ1luVm1abVZ5WDJkbGIyMWxkSEo1T3dvZ0lDQWdiV1Z6YUM1dVpXVmtjMVZ3WkdGMFpTQTlJSFJ5ZFdVN0NuMEtablZ1WTNScGIyNGdZM0psWVhSbFgyMWhkR1Z5YVdGc0tITmpaVzVsTENCd2NtOW5jbUZ0S1NCN0NpQWdJQ0JqYjI1emRDQnBjMTkyYjJ4MWJXVWdQU0FpZG05c2RXMWxaR0YwWVNJZ2FXNGdjSEp2WjNKaGJTNTFibWxtYjNKdGN6c0tJQ0FnSUhKbGRIVnliaUJ1WlhjZ2JXOWtMbEpoZDFOb1lXUmxjazFoZEdWeWFXRnNLSHNLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nWkdWelpYSnBZV3hwZW1WZmRXNXBabTl5YlhNb2MyTmxibVVzSUhCeWIyZHlZVzB1ZFc1cFptOXliWE1wTEFvZ0lDQWdJQ0FnSUhabGNuUmxlRk5vWVdSbGNqb2djSEp2WjNKaGJTNTJaWEowWlhoZmMyOTFjbU5sTEFvZ0lDQWdJQ0FnSUdaeVlXZHRaVzUwVTJoaFpHVnlPaUJ3Y205bmNtRnRMbVp5WVdkdFpXNTBYM052ZFhKalpTd0tJQ0FnSUNBZ0lDQnphV1JsT2lCcGMxOTJiMngxYldVZ1B5QnRiMlF1UW1GamExTnBaR1VnT2lCdGIyUXVSRzkxWW14bFUybGtaU3dLSUNBZ0lDQWdJQ0IwY21GdWMzQmhjbVZ1ZERvZ2RISjFaU3dLSUNBZ0lDQWdJQ0JuYkhOc1ZtVnljMmx2YmpvZ2JXOWtMa2RNVTB3ekxBb2dJQ0FnSUNBZ0lHUmxjSFJvVkdWemREb2dJWEJ5YjJkeVlXMHViM1psY21SeVlYY3VkbUZzZFdVc0NpQWdJQ0FnSUNBZ1pHVndkR2hYY21sMFpUb2dJWEJ5YjJkeVlXMHVkSEpoYm5Od1lYSmxibU41TG5aaGJIVmxDaUFnSUNCOUtUc0tmUXBtZFc1amRHbHZiaUJqY21WaGRHVmZiV1Z6YUNoelkyVnVaU3dnY0hKdlozSmhiU2tnZXdvZ0lDQWdZMjl1YzNRZ1luVm1abVZ5WDJkbGIyMWxkSEo1SUQwZ2JtVjNJRzF2WkM1Q2RXWm1aWEpIWlc5dFpYUnllU2dwT3dvZ0lDQWdZMjl1YzNRZ1ptRmpaWE1nUFNCdVpYY2diVzlrTGtKMVptWmxja0YwZEhKcFluVjBaU2h3Y205bmNtRnRMbVpoWTJWekxuWmhiSFZsTENBeEtUc0tJQ0FnSUdGMGRHRmphRjluWlc5dFpYUnllU2hpZFdabVpYSmZaMlZ2YldWMGNua3NJSEJ5YjJkeVlXMHVkbVZ5ZEdWNFlYSnlZWGx6TENCbVlXTmxjeWs3Q2lBZ0lDQmpiMjV6ZENCdFlYUmxjbWxoYkNBOUlHTnlaV0YwWlY5dFlYUmxjbWxoYkNoelkyVnVaU3dnY0hKdlozSmhiU2s3Q2lBZ0lDQmpiMjV6ZENCdFpYTm9JRDBnYm1WM0lHMXZaQzVOWlhOb0tHSjFabVpsY2w5blpXOXRaWFJ5ZVN3Z2JXRjBaWEpwWVd3cE93b2dJQ0FnY0hKdlozSmhiUzVtWVdObGN5NXZiaWdvZUNrOVBuc0tJQ0FnSUNBZ0lDQnRaWE5vTG1kbGIyMWxkSEo1TG5ObGRFbHVaR1Y0S0c1bGR5QnRiMlF1UW5WbVptVnlRWFIwY21saWRYUmxLSGdzSURFcEtUc0tJQ0FnSUgwcE93b2dJQ0FnY21WMGRYSnVJRzFsYzJnN0NuMEtablZ1WTNScGIyNGdZM0psWVhSbFgybHVjM1JoYm1ObFpGOXRaWE5vS0hOalpXNWxMQ0J3Y205bmNtRnRLU0I3Q2lBZ0lDQmpiMjV6ZENCaWRXWm1aWEpmWjJWdmJXVjBjbmtnUFNCdVpYY2diVzlrTGtsdWMzUmhibU5sWkVKMVptWmxja2RsYjIxbGRISjVLQ2s3Q2lBZ0lDQmpiMjV6ZENCbVlXTmxjeUE5SUc1bGR5QnRiMlF1UW5WbVptVnlRWFIwY21saWRYUmxLSEJ5YjJkeVlXMHVabUZqWlhNdWRtRnNkV1VzSURFcE93b2dJQ0FnWVhSMFlXTm9YMmRsYjIxbGRISjVLR0oxWm1abGNsOW5aVzl0WlhSeWVTd2djSEp2WjNKaGJTNTJaWEowWlhoaGNuSmhlWE1zSUdaaFkyVnpLVHNLSUNBZ0lHRjBkR0ZqYUY5cGJuTjBZVzVqWldSZloyVnZiV1YwY25rb1luVm1abVZ5WDJkbGIyMWxkSEo1TENCd2NtOW5jbUZ0TG1sdWMzUmhibU5sWDJGMGRISnBZblYwWlhNcE93b2dJQ0FnWTI5dWMzUWdiV0YwWlhKcFlXd2dQU0JqY21WaGRHVmZiV0YwWlhKcFlXd29jMk5sYm1Vc0lIQnliMmR5WVcwcE93b2dJQ0FnWTI5dWMzUWdiV1Z6YUNBOUlHNWxkeUJ0YjJRdVRXVnphQ2hpZFdabVpYSmZaMlZ2YldWMGNua3NJRzFoZEdWeWFXRnNLVHNLSUNBZ0lIQnliMmR5WVcwdVptRmpaWE11YjI0b0tIZ3BQVDU3Q2lBZ0lDQWdJQ0FnYldWemFDNW5aVzl0WlhSeWVTNXpaWFJKYm1SbGVDaHVaWGNnYlc5a0xrSjFabVpsY2tGMGRISnBZblYwWlNoNExDQXhLU2s3Q2lBZ0lDQjlLVHNLSUNBZ0lISmxkSFZ5YmlCdFpYTm9Pd3A5Q21aMWJtTjBhVzl1SUdacGNuTjBLSGdwSUhzS0lDQWdJSEpsZEhWeWJpQjRXMDlpYW1WamRDNXJaWGx6S0hncFd6QmRYVHNLZlFwbWRXNWpkR2x2YmlCamIyNXVaV04wWDJGMGRISnBZblYwWlhNb2JXVnphQ3dnZFhCa1lYUmxjaWtnZXdvZ0lDQWdZMjl1YzNRZ2FXNXpkR0Z1WTJWZlluVm1abVZ5Y3lBOUlIdDlPd29nSUNBZ1kyOXVjM1FnWjJWdmJXVjBjbmxmWW5WbVptVnljeUE5SUh0OU93b2dJQ0FnYkdWMElHWnBjbk4wWDJsdWMzUmhibU5sWDJKMVptWmxjanNLSUNBZ0lHTnZibk4wSUhKbFlXeGZhVzV6ZEdGdVkyVmZiR1Z1WjNSb0lEMGdXd29nSUNBZ0lDQWdJREFLSUNBZ0lGMDdDaUFnSUNCc1pYUWdabWx5YzNSZloyVnZiV1YwY25sZlluVm1abVZ5T3dvZ0lDQWdZMjl1YzNRZ2NtVmhiRjluWlc5dFpYUnllVjlzWlc1bmRHZ2dQU0JiQ2lBZ0lDQWdJQ0FnTUFvZ0lDQWdYVHNLSUNBZ0lHWjFibU4wYVc5dUlISmxYMkZ6YzJsbmJsOWlkV1ptWlhKektDa2dld29nSUNBZ0lDQWdJR052Ym5OMElHRjBkSEpwWW5WMFpYTWdQU0J0WlhOb0xtZGxiMjFsZEhKNUxtRjBkSEpwWW5WMFpYTTdDaUFnSUNBZ0lDQWdUMkpxWldOMExtdGxlWE1vWVhSMGNtbGlkWFJsY3lrdVptOXlSV0ZqYUNnb2JtRnRaU2s5UG5zS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1luVm1abVZ5SUQwZ1lYUjBjbWxpZFhSbGMxdHVZVzFsWFRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dKMVptWmxjaTVwYzBsdWMzUmhibU5sWkVKMVptWmxja0YwZEhKcFluVjBaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1emRHRnVZMlZmWW5WbVptVnljMXR1WVcxbFhTQTlJR0oxWm1abGNqc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsYjIxbGRISjVYMkoxWm1abGNuTmJibUZ0WlYwZ1BTQmlkV1ptWlhJN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNCbWFYSnpkRjlwYm5OMFlXNWpaVjlpZFdabVpYSWdQU0JtYVhKemRDaHBibk4wWVc1alpWOWlkV1ptWlhKektUc0tJQ0FnSUNBZ0lDQnBaaUFvWm1seWMzUmZhVzV6ZEdGdVkyVmZZblZtWm1WeUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbFlXeGZhVzV6ZEdGdVkyVmZiR1Z1WjNSb1d6QmRJRDBnWm1seWMzUmZhVzV6ZEdGdVkyVmZZblZtWm1WeUxtTnZkVzUwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWFYSnpkRjluWlc5dFpYUnllVjlpZFdabVpYSWdQU0JtYVhKemRDaG5aVzl0WlhSeWVWOWlkV1ptWlhKektUc0tJQ0FnSUNBZ0lDQnlaV0ZzWDJkbGIyMWxkSEo1WDJ4bGJtZDBhRnN3WFNBOUlHWnBjbk4wWDJkbGIyMWxkSEo1WDJKMVptWmxjaTVqYjNWdWREc0tJQ0FnSUgwS0lDQWdJSEpsWDJGemMybG5ibDlpZFdabVpYSnpLQ2s3Q2lBZ0lDQjFjR1JoZEdWeUxtOXVLQ2hiYm1GdFpTd2dibVYzWDNaaGJIVmxjeXdnYkdWdVozUm9YU2s5UG5zS0lDQWdJQ0FnSUNCamIyNXpkQ0JpZFdabVpYSWdQU0J0WlhOb0xtZGxiMjFsZEhKNUxtRjBkSEpwWW5WMFpYTmJibUZ0WlYwN0NpQWdJQ0FnSUNBZ2JHVjBJR0oxWm1abGNuTTdDaUFnSUNBZ0lDQWdiR1YwSUhKbFlXeGZiR1Z1WjNSb093b2dJQ0FnSUNBZ0lHeGxkQ0JwYzE5cGJuTjBZVzVqWlNBOUlHWmhiSE5sT3dvZ0lDQWdJQ0FnSUdsbUlDaHVZVzFsSUdsdUlHbHVjM1JoYm1ObFgySjFabVpsY25NcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWW5WbVptVnljeUE5SUdsdWMzUmhibU5sWDJKMVptWmxjbk03Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnBjbk4wWDJsdWMzUmhibU5sWDJKMVptWmxjanNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVmhiRjlzWlc1bmRHZ2dQU0J5WldGc1gybHVjM1JoYm1ObFgyeGxibWQwYURzS0lDQWdJQ0FnSUNBZ0lDQWdhWE5mYVc1emRHRnVZMlVnUFNCMGNuVmxPd29nSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdKMVptWmxjbk1nUFNCblpXOXRaWFJ5ZVY5aWRXWm1aWEp6T3dvZ0lDQWdJQ0FnSUNBZ0lDQm1hWEp6ZEY5blpXOXRaWFJ5ZVY5aWRXWm1aWEk3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxZV3hmYkdWdVozUm9JRDBnY21WaGJGOW5aVzl0WlhSeWVWOXNaVzVuZEdnN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2hzWlc1bmRHZ2dQRDBnY21WaGJGOXNaVzVuZEdoYk1GMHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1luVm1abVZ5TG5ObGRDaHVaWGRmZG1Gc2RXVnpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1luVm1abVZ5TG01bFpXUnpWWEJrWVhSbElEMGdkSEoxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dselgybHVjM1JoYm1ObEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE5vTG1kbGIyMWxkSEo1TG1sdWMzUmhibU5sUTI5MWJuUWdQU0JzWlc1bmRHZzdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmlkV1ptWlhJdWRHOWZkWEJrWVhSbElEMGdibVYzWDNaaGJIVmxjenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWVd4c1gyaGhkbVZmYzJGdFpWOXNaVzVuZEdnZ1BTQlBZbXBsWTNRdWRtRnNkV1Z6S0dKMVptWmxjbk1wTG1WMlpYSjVLQ2g0S1QwK2VDNTBiMTkxY0dSaGRHVWdKaVlnZUM1MGIxOTFjR1JoZEdVdWJHVnVaM1JvSUM4Z2VDNXBkR1Z0VTJsNlpTQTlQU0JzWlc1bmRHZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZV3hzWDJoaGRtVmZjMkZ0WlY5c1pXNW5kR2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMTlwYm5OMFlXNWpaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxZM0psWVhSbFgybHVjM1JoYm1ObFpGOW5aVzl0WlhSeWVTaHRaWE5vS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaVjloYzNOcFoyNWZZblZtWm1WeWN5Z3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMyZ3VaMlZ2YldWMGNua3VhVzV6ZEdGdVkyVkRiM1Z1ZENBOUlHNWxkMTkyWVd4MVpYTXViR1Z1WjNSb0lDOGdZblZtWm1WeUxtbDBaVzFUYVhwbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV055WldGMFpWOW5aVzl0WlhSeWVTaHRaWE5vTENCaWRXWm1aWEp6TENCdFpYTm9MbWRsYjIxbGRISjVMbWx1WkdWNEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlY5aGMzTnBaMjVmWW5WbVptVnljeWdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZTazdDbjBLWm5WdVkzUnBiMjRnWkdWelpYSnBZV3hwZW1WZmMyTmxibVVvWkdGMFlTd2djMk55WldWdUtTQjdDaUFnSUNCamIyNXpkQ0J6WTJWdVpTQTlJRzVsZHlCdGIyUXVVMk5sYm1Vb0tUc0tJQ0FnSUhOalpXNWxMbk5qY21WbGJpQTlJSE5qY21WbGJqc0tJQ0FnSUdOdmJuTjBJSHNnWTJGdWRtRnpJQ0I5SUQwZ2MyTnlaV1Z1T3dvZ0lDQWdZV1JrWDNOalpXNWxLR1JoZEdFdWRYVnBaQ3dnYzJObGJtVXBPd29nSUNBZ2MyTmxibVV1YzJObGJtVmZkWFZwWkNBOUlHUmhkR0V1ZFhWcFpEc0tJQ0FnSUhOalpXNWxMbVp5ZFhOMGRXMURkV3hzWldRZ1BTQm1ZV3h6WlRzS0lDQWdJSE5qWlc1bExuWnBaWGR3YjNKMElEMGdaR0YwWVM1MmFXVjNjRzl5ZERzS0lDQWdJSE5qWlc1bExtSmhZMnRuY205MWJtUmpiMnh2Y2lBOUlHUmhkR0V1WW1GamEyZHliM1Z1WkdOdmJHOXlPd29nSUNBZ2MyTmxibVV1WW1GamEyZHliM1Z1WkdOdmJHOXlYMkZzY0doaElEMGdaR0YwWVM1aVlXTnJaM0p2ZFc1a1kyOXNiM0pmWVd4d2FHRTdDaUFnSUNCelkyVnVaUzVqYkdWaGNuTmpaVzVsSUQwZ1pHRjBZUzVqYkdWaGNuTmpaVzVsT3dvZ0lDQWdjMk5sYm1VdWRtbHphV0pzWlNBOUlHUmhkR0V1ZG1semFXSnNaVHNLSUNBZ0lITmpaVzVsTG1OaGJXVnlZVjl5Wld4aGRHbDJaVjlzYVdkb2RDQTlJR1JoZEdFdVkyRnRaWEpoWDNKbGJHRjBhWFpsWDJ4cFoyaDBPd29nSUNBZ2MyTmxibVV1YkdsbmFIUmZaR2x5WldOMGFXOXVJRDBnWkdGMFlTNXNhV2RvZEY5a2FYSmxZM1JwYjI0N0NpQWdJQ0JqYjI1emRDQmpZVzFsY21FZ1BTQnVaWGNnVFdGcmFXVkRZVzFsY21Fb0tUc0tJQ0FnSUhOalpXNWxMbmRuYkY5allXMWxjbUVnUFNCallXMWxjbUU3Q2lBZ0lDQm1kVzVqZEdsdmJpQjFjR1JoZEdWZlkyRnRLR05oYldWeVlWOXRZWFJ5YVdObGN5d2dabTl5WTJVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvSVdadmNtTmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doS0VKdmJtbDBieTVqWVc1ZmMyVnVaRjkwYjE5cWRXeHBZU0FtSmlCQ2IyNXBkRzh1WTJGdVgzTmxibVJmZEc5ZmFuVnNhV0VvS1NrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JqYjI1emRDQmJkbWxsZHl3Z2NISnZhbVZqZEdsdmJpd2djbVZ6YjJ4MWRHbHZiaXdnWlhsbGNHOXpYU0E5SUdOaGJXVnlZVjl0WVhSeWFXTmxjenNLSUNBZ0lDQWdJQ0JqWVcxbGNtRXVkWEJrWVhSbFgyMWhkSEpwWTJWektIWnBaWGNzSUhCeWIycGxZM1JwYjI0c0lISmxjMjlzZFhScGIyNHNJR1Y1WlhCdmN5azdDaUFnSUNCOUNpQWdJQ0JwWmlBb1pHRjBZUzVqWVcwelpGOXpkR0YwWlNrZ2V3b2dJQ0FnSUNBZ0lHRjBkR0ZqYUY4elpGOWpZVzFsY21Fb1kyRnVkbUZ6TENCallXMWxjbUVzSUdSaGRHRXVZMkZ0TTJSZmMzUmhkR1VzSUdSaGRHRXViR2xuYUhSZlpHbHlaV04wYVc5dUxDQnpZMlZ1WlNrN0NpQWdJQ0I5Q2lBZ0lDQjFjR1JoZEdWZlkyRnRLR1JoZEdFdVkyRnRaWEpoTG5aaGJIVmxMQ0IwY25WbEtUc0tJQ0FnSUdOaGJXVnlZUzUxY0dSaGRHVmZiR2xuYUhSZlpHbHlLR1JoZEdFdWJHbG5hSFJmWkdseVpXTjBhVzl1TG5aaGJIVmxLVHNLSUNBZ0lHUmhkR0V1WTJGdFpYSmhMbTl1S0hWd1pHRjBaVjlqWVcwcE93b2dJQ0FnWkdGMFlTNXdiRzkwY3k1bWIzSkZZV05vS0Nod2JHOTBYMlJoZEdFcFBUNTdDaUFnSUNBZ0lDQWdZV1JrWDNCc2IzUW9jMk5sYm1Vc0lIQnNiM1JmWkdGMFlTazdDaUFnSUNCOUtUc0tJQ0FnSUhOalpXNWxMbk5qWlc1bFgyTm9hV3hrY21WdUlEMGdaR0YwWVM1amFHbHNaSEpsYmk1dFlYQW9LR05vYVd4a0tUMCtld29nSUNBZ0lDQWdJR052Ym5OMElHTm9hV3hrYzJObGJtVWdQU0JrWlhObGNtbGhiR2w2WlY5elkyVnVaU2hqYUdsc1pDd2djMk55WldWdUtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyaHBiR1J6WTJWdVpUc0tJQ0FnSUgwcE93b2dJQ0FnY21WMGRYSnVJSE5qWlc1bE93cDlDbVoxYm1OMGFXOXVJR1JsYkdWMFpWOXdiRzkwS0hCc2IzUXBJSHNLSUNBZ0lHUmxiR1YwWlNCd2JHOTBYMk5oWTJobFczQnNiM1F1Y0d4dmRGOTFkV2xrWFRzS0lDQWdJR052Ym5OMElIc2djR0Z5Wlc1MElDQjlJRDBnY0d4dmREc0tJQ0FnSUdsbUlDaHdZWEpsYm5RcElIc0tJQ0FnSUNBZ0lDQndZWEpsYm5RdWNtVnRiM1psS0hCc2IzUXBPd29nSUNBZ2ZRb2dJQ0FnY0d4dmRDNW5aVzl0WlhSeWVTNWthWE53YjNObEtDazdDaUFnSUNCd2JHOTBMbTFoZEdWeWFXRnNMbVJwYzNCdmMyVW9LVHNLZlFwbWRXNWpkR2x2YmlCa1pXeGxkR1ZmZEdoeVpXVmZjMk5sYm1Vb2MyTmxibVVwSUhzS0lDQWdJR1JsYkdWMFpTQnpZMlZ1WlY5allXTm9aVnR6WTJWdVpTNXpZMlZ1WlY5MWRXbGtYVHNLSUNBZ0lITmpaVzVsTG5OalpXNWxYMk5vYVd4a2NtVnVMbVp2Y2tWaFkyZ29aR1ZzWlhSbFgzUm9jbVZsWDNOalpXNWxLVHNLSUNBZ0lIZG9hV3hsS0hOalpXNWxMbU5vYVd4a2NtVnVMbXhsYm1kMGFDQStJREFwZXdvZ0lDQWdJQ0FnSUdSbGJHVjBaVjl3Ykc5MEtITmpaVzVsTG1Ob2FXeGtjbVZ1V3pCZEtUc0tJQ0FnSUgwS2ZRcDNhVzVrYjNjdVZFaFNSVVVnUFNCdGIyUTdDbVoxYm1OMGFXOXVJSEpsYm1SbGNsOXpZMlZ1WlNoelkyVnVaU3dnY0dsamEybHVaeUE5SUdaaGJITmxLU0I3Q2lBZ0lDQmpiMjV6ZENCN0lHTmhiV1Z5WVNBc0lISmxibVJsY21WeUlDd2djSGhmY0dWeVgzVnVhWFFnSUgwZ1BTQnpZMlZ1WlM1elkzSmxaVzQ3Q2lBZ0lDQmpiMjV6ZENCallXNTJZWE1nUFNCeVpXNWtaWEpsY2k1a2IyMUZiR1Z0Wlc1ME93b2dJQ0FnYVdZZ0tDRmtiMk4xYldWdWRDNWliMlI1TG1OdmJuUmhhVzV6S0dOaGJuWmhjeWtwSUhzS0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z2ljbVZ0YjNacGJtY2dWMGRNSUdOdmJuUmxlSFFzSUdOaGJuWmhjeUJwY3lCdWIzUWdhVzRnZEdobElFUlBUU0JoYm5sdGIzSmxJU0lwT3dvZ0lDQWdJQ0FnSUdsbUlDaHpZMlZ1WlM1elkzSmxaVzR1ZEdWNGRIVnlaVjloZEd4aGN5a2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrWVhSaElEMGdWRVZZVkZWU1JWOUJWRXhCVTFzd1hTNTJZV3gxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdWRVZZVkZWU1JWOUJWRXhCVTFzd1hTNXViM1JwWm5rb2MyTmxibVV1YzJOeVpXVnVMblJsZUhSMWNtVmZZWFJzWVhNc0lIUnlkV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQlVSVmhVVlZKRlgwRlVURUZUV3pCZExuWmhiSFZsSUQwZ1pHRjBZVHNLSUNBZ0lDQWdJQ0FnSUNBZ2MyTmxibVV1YzJOeVpXVnVMblJsZUhSMWNtVmZZWFJzWVhNZ1BTQjFibVJsWm1sdVpXUTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1JsYkdWMFpWOTBhSEpsWlY5elkyVnVaU2h6WTJWdVpTazdDaUFnSUNBZ0lDQWdjbVZ1WkdWeVpYSXVjM1JoZEdVdWNtVnpaWFFvS1RzS0lDQWdJQ0FnSUNCeVpXNWtaWEpsY2k1a2FYTndiM05sS0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPd29nSUNBZ2ZRb2dJQ0FnYVdZZ0tDRnpZMlZ1WlM1MmFYTnBZbXhsTG5aaGJIVmxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN0NpQWdJQ0I5Q2lBZ0lDQnlaVzVrWlhKbGNpNWhkWFJ2UTJ4bFlYSWdQU0J6WTJWdVpTNWpiR1ZoY25OalpXNWxMblpoYkhWbE93b2dJQ0FnWTI5dWMzUWdZWEpsWVNBOUlITmpaVzVsTG5acFpYZHdiM0owTG5aaGJIVmxPd29nSUNBZ2FXWWdLR0Z5WldFcElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCYmVDd2dlU3dnZHl3Z2FGMGdQU0JoY21WaExtMWhjQ2dvZUNrOVBuZ2dLaUJ3ZUY5d1pYSmZkVzVwZENrN0NpQWdJQ0FnSUNBZ2NtVnVaR1Z5WlhJdWMyVjBWbWxsZDNCdmNuUW9lQ3dnZVN3Z2R5d2dhQ2s3Q2lBZ0lDQWdJQ0FnY21WdVpHVnlaWEl1YzJWMFUyTnBjM052Y2loNExDQjVMQ0IzTENCb0tUc0tJQ0FnSUNBZ0lDQnlaVzVrWlhKbGNpNXpaWFJUWTJsemMyOXlWR1Z6ZENoMGNuVmxLVHNLSUNBZ0lDQWdJQ0JwWmlBb2NHbGphMmx1WnlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSmxjaTV6WlhSRGJHVmhja0ZzY0doaEtEQXBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpXNWtaWEpsY2k1elpYUkRiR1ZoY2tOdmJHOXlLRzVsZHlCdGIyUXVRMjlzYjNJb01Da3NJREF1TUNrN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1lXeHdhR0VnUFNCelkyVnVaUzVpWVdOclozSnZkVzVrWTI5c2IzSmZZV3h3YUdFdWRtRnNkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxibVJsY21WeUxuTmxkRU5zWldGeVEyOXNiM0lvYzJObGJtVXVZbUZqYTJkeWIzVnVaR052Ykc5eUxuWmhiSFZsTENCaGJIQm9ZU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGJtUmxjbVZ5TG5KbGJtUmxjaWh6WTJWdVpTd2dZMkZ0WlhKaEtUc0tJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQnpZMlZ1WlM1elkyVnVaVjlqYUdsc1pISmxiaTVsZG1WeWVTZ29lQ2s5UG5KbGJtUmxjbDl6WTJWdVpTaDRMQ0J3YVdOcmFXNW5LU2s3Q24wS1puVnVZM1JwYjI0Z2MzUmhjblJmY21WdVpHVnliRzl2Y0NoMGFISmxaVjl6WTJWdVpTa2dld29nSUNBZ1kyOXVjM1FnZXlCbWNITWdJSDBnUFNCMGFISmxaVjl6WTJWdVpTNXpZM0psWlc0N0NpQWdJQ0JqYjI1emRDQjBhVzFsWDNCbGNsOW1jbUZ0WlNBOUlERWdMeUJtY0hNZ0tpQXhNREF3T3dvZ0lDQWdiR1YwSUd4aGMzUmZkR2x0WlY5emRHRnRjQ0E5SUhCbGNtWnZjbTFoYm1ObExtNXZkeWdwT3dvZ0lDQWdablZ1WTNScGIyNGdjbVZ1WkdWeWJHOXZjQ2gwYVcxbGMzUmhiWEFwSUhzS0lDQWdJQ0FnSUNCcFppQW9kR2x0WlhOMFlXMXdJQzBnYkdGemRGOTBhVzFsWDNOMFlXMXdJRDRnZEdsdFpWOXdaWEpmWm5KaGJXVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWVd4c1gzSmxibVJsY21Wa0lEMGdjbVZ1WkdWeVgzTmpaVzVsS0hSb2NtVmxYM05qWlc1bEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmhiR3hmY21WdVpHVnlaV1FwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JzWVhOMFgzUnBiV1ZmYzNSaGJYQWdQU0J3WlhKbWIzSnRZVzVqWlM1dWIzY29LVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZDJsdVpHOTNMbkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNoeVpXNWtaWEpzYjI5d0tUc0tJQ0FnSUgwS0lDQWdJSEpsYm1SbGNsOXpZMlZ1WlNoMGFISmxaVjl6WTJWdVpTazdDaUFnSUNCeVpXNWtaWEpzYjI5d0tDazdDbjBLWm5WdVkzUnBiMjRnZEdoeWIzUjBiR1ZmWm5WdVkzUnBiMjRvWm5WdVl5d2daR1ZzWVhrcElIc0tJQ0FnSUd4bGRDQndjbVYySUQwZ01Ec0tJQ0FnSUd4bGRDQm1kWFIxY21WZmFXUWdQU0IxYm1SbFptbHVaV1E3Q2lBZ0lDQm1kVzVqZEdsdmJpQnBibTVsY2w5MGFISnZkSFJzWlNndUxpNWhjbWR6S1NCN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnYm05M0lEMGdibVYzSUVSaGRHVW9LUzVuWlhSVWFXMWxLQ2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tHWjFkSFZ5WlY5cFpDQWhQVDBnZFc1a1pXWnBibVZrS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENobWRYUjFjbVZmYVdRcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtZFhSMWNtVmZhV1FnUFNCMWJtUmxabWx1WldRN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2h1YjNjZ0xTQndjbVYySUQ0Z1pHVnNZWGtwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjSEpsZGlBOUlHNXZkenNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTW9MaTR1WVhKbmN5azdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWm5WMGRYSmxYMmxrSUQwZ2MyVjBWR2x0Wlc5MWRDZ29LVDArYVc1dVpYSmZkR2h5YjNSMGJHVW9MaTR1WVhKbmN5a3NJRzV2ZHlBdElIQnlaWFlnS3lBeEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdhVzV1WlhKZmRHaHliM1IwYkdVN0NuMEtablZ1WTNScGIyNGdaMlYwWDJKdlpIbGZjMmw2WlNncElIc0tJQ0FnSUdOdmJuTjBJR0p2WkhsVGRIbHNaU0E5SUhkcGJtUnZkeTVuWlhSRGIyMXdkWFJsWkZOMGVXeGxLR1J2WTNWdFpXNTBMbUp2WkhrcE93b2dJQ0FnWTI5dWMzUWdkMmxrZEdoZmNHRmtaR2x1WnlBOUlIQmhjbk5sU1c1MEtHSnZaSGxUZEhsc1pTNXdZV1JrYVc1blRHVm1kQ3dnTVRBcElDc2djR0Z5YzJWSmJuUW9ZbTlrZVZOMGVXeGxMbkJoWkdScGJtZFNhV2RvZEN3Z01UQXBJQ3NnY0dGeWMyVkpiblFvWW05a2VWTjBlV3hsTG0xaGNtZHBia3hsWm5Rc0lERXdLU0FySUhCaGNuTmxTVzUwS0dKdlpIbFRkSGxzWlM1dFlYSm5hVzVTYVdkb2RDd2dNVEFwT3dvZ0lDQWdZMjl1YzNRZ2FHVnBaMmgwWDNCaFpHUnBibWNnUFNCd1lYSnpaVWx1ZENoaWIyUjVVM1I1YkdVdWNHRmtaR2x1WjFSdmNDd2dNVEFwSUNzZ2NHRnljMlZKYm5Rb1ltOWtlVk4wZVd4bExuQmhaR1JwYm1kQ2IzUjBiMjBzSURFd0tTQXJJSEJoY25ObFNXNTBLR0p2WkhsVGRIbHNaUzV0WVhKbmFXNVViM0FzSURFd0tTQXJJSEJoY25ObFNXNTBLR0p2WkhsVGRIbHNaUzV0WVhKbmFXNUNiM1IwYjIwc0lERXdLVHNLSUNBZ0lHTnZibk4wSUhkcFpIUm9JRDBnZDJsdVpHOTNMbWx1Ym1WeVYybGtkR2dnTFNCM2FXUjBhRjl3WVdSa2FXNW5Pd29nSUNBZ1kyOXVjM1FnYUdWcFoyaDBJRDBnZDJsdVpHOTNMbWx1Ym1WeVNHVnBaMmgwSUMwZ2FHVnBaMmgwWDNCaFpHUnBibWM3Q2lBZ0lDQnlaWFIxY200Z1d3b2dJQ0FnSUNBZ0lIZHBaSFJvTEFvZ0lDQWdJQ0FnSUdobGFXZG9kQW9nSUNBZ1hUc0tmUXBtZFc1amRHbHZiaUJuWlhSZmNHRnlaVzUwWDNOcGVtVW9ZMkZ1ZG1GektTQjdDaUFnSUNCamIyNXpkQ0J5WldOMElEMGdZMkZ1ZG1GekxuQmhjbVZ1ZEVWc1pXMWxiblF1WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtDazdDaUFnSUNCeVpYUjFjbTRnV3dvZ0lDQWdJQ0FnSUhKbFkzUXVkMmxrZEdnc0NpQWdJQ0FnSUNBZ2NtVmpkQzVvWldsbmFIUUtJQ0FnSUYwN0NuMEtablZ1WTNScGIyNGdkMmRzWlhKeWIzSW9aMndzSUdWeWNtOXlLU0I3Q2lBZ0lDQnpkMmwwWTJnb1pYSnliM0lwZXdvZ0lDQWdJQ0FnSUdOaGMyVWdaMnd1VGs5ZlJWSlNUMUk2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBaVRtOGdaWEp5YjNJaU93b2dJQ0FnSUNBZ0lHTmhjMlVnWjJ3dVNVNVdRVXhKUkY5RlRsVk5PZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSWtsdWRtRnNhV1FnWlc1MWJTSTdDaUFnSUNBZ0lDQWdZMkZ6WlNCbmJDNUpUbFpCVEVsRVgxWkJURlZGT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0lrbHVkbUZzYVdRZ2RtRnNkV1VpT3dvZ0lDQWdJQ0FnSUdOaGMyVWdaMnd1U1U1V1FVeEpSRjlQVUVWU1FWUkpUMDQ2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBaVNXNTJZV3hwWkNCdmNHVnlZWFJwYjI0aU93b2dJQ0FnSUNBZ0lHTmhjMlVnWjJ3dVQxVlVYMDlHWDAxRlRVOVNXVG9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNKUGRYUWdiMllnYldWdGIzSjVJanNLSUNBZ0lDQWdJQ0JqWVhObElHZHNMa05QVGxSRldGUmZURTlUVkY5WFJVSkhURG9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNKRGIyNTBaWGgwSUd4dmMzUWlPd29nSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFpVlc1cmJtOTNiaUJsY25KdmNpSTdDaUFnSUNCOUNuMEtablZ1WTNScGIyNGdhR0Z1Wkd4bFUyOTFjbU5sS0hOMGNtbHVaeXdnWlhKeWIzSk1hVzVsS1NCN0NpQWdJQ0JqYjI1emRDQnNhVzVsY3lBOUlITjBjbWx1Wnk1emNHeHBkQ2dpWEc0aUtUc0tJQ0FnSUdOdmJuTjBJR3hwYm1Wek1pQTlJRnRkT3dvZ0lDQWdZMjl1YzNRZ1puSnZiU0E5SUUxaGRHZ3ViV0Y0S0dWeWNtOXlUR2x1WlNBdElEWXNJREFwT3dvZ0lDQWdZMjl1YzNRZ2RHOGdQU0JOWVhSb0xtMXBiaWhsY25KdmNreHBibVVnS3lBMkxDQnNhVzVsY3k1c1pXNW5kR2dwT3dvZ0lDQWdabTl5S0d4bGRDQnBJRDBnWm5KdmJUc2dhU0E4SUhSdk95QnBLeXNwZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJR3hwYm1VZ1BTQnBJQ3NnTVRzS0lDQWdJQ0FnSUNCc2FXNWxjekl1Y0hWemFDaGdKSHRzYVc1bElEMDlQU0JsY25KdmNreHBibVVnUHlBaVBpSWdPaUFpSUNKOUlDUjdiR2x1WlgwNklDUjdiR2x1WlhOYmFWMTlZQ2s3Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnYkdsdVpYTXlMbXB2YVc0b0lseHVJaWs3Q24wS1puVnVZM1JwYjI0Z1oyVjBVMmhoWkdWeVJYSnliM0p6S0dkc0xDQnphR0ZrWlhJc0lIUjVjR1VwSUhzS0lDQWdJR052Ym5OMElITjBZWFIxY3lBOUlHZHNMbWRsZEZOb1lXUmxjbEJoY21GdFpYUmxjaWh6YUdGa1pYSXNJR2RzTGtOUFRWQkpURVZmVTFSQlZGVlRLVHNLSUNBZ0lHTnZibk4wSUdWeWNtOXljeUE5SUdkc0xtZGxkRk5vWVdSbGNrbHVabTlNYjJjb2MyaGhaR1Z5S1M1MGNtbHRLQ2s3Q2lBZ0lDQnBaaUFvYzNSaGRIVnpJQ1ltSUdWeWNtOXljeUE5UFQwZ0lpSXBJSEpsZEhWeWJpQWlJanNLSUNBZ0lHTnZibk4wSUdWeWNtOXlUV0YwWTJobGN5QTlJQzlGVWxKUFVqb2dNRG9vWEdRcktTOHVaWGhsWXlobGNuSnZjbk1wT3dvZ0lDQWdhV1lnS0dWeWNtOXlUV0YwWTJobGN5a2dld29nSUNBZ0lDQWdJR052Ym5OMElHVnljbTl5VEdsdVpTQTlJSEJoY25ObFNXNTBLR1Z5Y205eVRXRjBZMmhsYzFzeFhTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUjVjR1V1ZEc5VmNIQmxja05oYzJVb0tTQXJJQ0pjYmx4dUlpQXJJR1Z5Y205eWN5QXJJQ0pjYmx4dUlpQXJJR2hoYm1Sc1pWTnZkWEpqWlNobmJDNW5aWFJUYUdGa1pYSlRiM1Z5WTJVb2MyaGhaR1Z5S1N3Z1pYSnliM0pNYVc1bEtUc0tJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z5Y205eWN6c0tJQ0FnSUgwS2ZRcG1kVzVqZEdsdmJpQnZibDl6YUdGa1pYSmZaWEp5YjNJb1oyd3NJSEJ5YjJkeVlXMHNJR2RzVm1WeWRHVjRVMmhoWkdWeUxDQm5iRVp5WVdkdFpXNTBVMmhoWkdWeUtTQjdDaUFnSUNCamIyNXpkQ0J3Y205bmNtRnRURzluSUQwZ1oyd3VaMlYwVUhKdlozSmhiVWx1Wm05TWIyY29jSEp2WjNKaGJTa3VkSEpwYlNncE93b2dJQ0FnWTI5dWMzUWdkbVZ5ZEdWNFJYSnliM0p6SUQwZ1oyVjBVMmhoWkdWeVJYSnliM0p6S0dkc0xDQm5iRlpsY25SbGVGTm9ZV1JsY2l3Z0luWmxjblJsZUNJcE93b2dJQ0FnWTI5dWMzUWdabkpoWjIxbGJuUkZjbkp2Y25NZ1BTQm5aWFJUYUdGa1pYSkZjbkp2Y25Nb1oyd3NJR2RzUm5KaFoyMWxiblJUYUdGa1pYSXNJQ0ptY21GbmJXVnVkQ0lwT3dvZ0lDQWdZMjl1YzNRZ2RtVnlkR1Y0VEc5bklEMGdaMnd1WjJWMFUyaGhaR1Z5U1c1bWIweHZaeWhuYkZabGNuUmxlRk5vWVdSbGNpa3VkSEpwYlNncE93b2dJQ0FnWTI5dWMzUWdabkpoWjIxbGJuUk1iMmNnUFNCbmJDNW5aWFJUYUdGa1pYSkpibVp2VEc5bktHZHNSbkpoWjIxbGJuUlRhR0ZrWlhJcExuUnlhVzBvS1RzS0lDQWdJR052Ym5OMElHVnljaUE5SUNKVVNGSkZSUzVYWldKSFRGQnliMmR5WVcwNklGTm9ZV1JsY2lCRmNuSnZjaUFpSUNzZ2QyZHNaWEp5YjNJb1oyd3NJR2RzTG1kbGRFVnljbTl5S0NrcElDc2dJaUF0SUNJZ0t5QWlWa0ZNU1VSQlZFVmZVMVJCVkZWVElDSWdLeUJuYkM1blpYUlFjbTluY21GdFVHRnlZVzFsZEdWeUtIQnliMmR5WVcwc0lHZHNMbFpCVEVsRVFWUkZYMU5VUVZSVlV5a2dLeUFpWEc1Y2JpSWdLeUFpVUhKdlozSmhiU0JKYm1adklFeHZaenBjYmlJZ0t5QndjbTluY21GdFRHOW5JQ3NnSWx4dUlpQXJJSFpsY25SbGVFVnljbTl5Y3lBcklDSmNiaUlnS3lCbWNtRm5iV1Z1ZEVWeWNtOXljeUFySUNKY2JpSWdLeUFpUm5KaFoyMWxiblFnYkc5bk9seHVJaUFySUdaeVlXZHRaVzUwVEc5bklDc2dJbFpsY25SbGVDQnNiMmM2WEc0aUlDc2dkbVZ5ZEdWNFRHOW5Pd29nSUNBZ1FtOXVhWFJ2TGtOdmJtNWxZM1JwYjI0dWMyVnVaRjkzWVhKdWFXNW5LR1Z5Y2lrN0NuMEtablZ1WTNScGIyNGdZV1JrWDJOaGJuWmhjMTlsZG1WdWRITW9jMk55WldWdUxDQmpiMjF0TENCeVpYTnBlbVZmZEc4cElIc0tJQ0FnSUdOdmJuTjBJSHNnWTJGdWRtRnpJQ3dnZDJsdWMyTmhiR1VnSUgwZ1BTQnpZM0psWlc0N0NpQWdJQ0JtZFc1amRHbHZiaUJ0YjNWelpWOWpZV3hzWW1GamF5aGxkbVZ1ZENrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUZ0NExDQjVYU0E5SUdWMlpXNTBjekoxYm1sMGJHVnpjeWh6WTNKbFpXNHNJR1YyWlc1MEtUc0tJQ0FnSUNBZ0lDQmpiMjF0TG01dmRHbG1lU2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sY0c5emFYUnBiMjQ2SUZzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNUNpQWdJQ0FnSUNBZ0lDQWdJRjBLSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJSDBLSUNBZ0lHTnZibk4wSUc1dmRHbG1lVjl0YjNWelpWOTBhSEp2ZEhSc1pXUWdQU0IwYUhKdmRIUnNaVjltZFc1amRHbHZiaWh0YjNWelpWOWpZV3hzWW1GamF5d2dOREFwT3dvZ0lDQWdablZ1WTNScGIyNGdiVzkxYzJWdGIzWmxLR1YyWlc1MEtTQjdDaUFnSUNBZ0lDQWdibTkwYVdaNVgyMXZkWE5sWDNSb2NtOTBkR3hsWkNobGRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE93b2dJQ0FnZlFvZ0lDQWdZMkZ1ZG1GekxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltMXZkWE5sYlc5MlpTSXNJRzF2ZFhObGJXOTJaU2s3Q2lBZ0lDQm1kVzVqZEdsdmJpQnRiM1Z6WldSdmQyNG9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQmpiMjF0TG01dmRHbG1lU2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sWkc5M2Jqb2daWFpsYm5RdVluVjBkRzl1Y3dvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNBZ0lIMEtJQ0FnSUdOaGJuWmhjeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0p0YjNWelpXUnZkMjRpTENCdGIzVnpaV1J2ZDI0cE93b2dJQ0FnWm5WdVkzUnBiMjRnYlc5MWMyVjFjQ2hsZG1WdWRDa2dld29nSUNBZ0lDQWdJR052YlcwdWJtOTBhV1o1S0hzS0lDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWMWNEb2daWFpsYm5RdVluVjBkRzl1Y3dvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNBZ0lIMEtJQ0FnSUdOaGJuWmhjeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0p0YjNWelpYVndJaXdnYlc5MWMyVjFjQ2s3Q2lBZ0lDQm1kVzVqZEdsdmJpQjNhR1ZsYkNobGRtVnVkQ2tnZXdvZ0lDQWdJQ0FnSUdOdmJXMHVibTkwYVdaNUtIc0tJQ0FnSUNBZ0lDQWdJQ0FnYzJOeWIyeHNPaUJiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRDNWtaV3gwWVZnc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdFpYWmxiblF1WkdWc2RHRlpDaUFnSUNBZ0lDQWdJQ0FnSUYwS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQmxkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUc0tJQ0FnSUgwS0lDQWdJR05oYm5aaGN5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSjNhR1ZsYkNJc0lIZG9aV1ZzS1RzS0lDQWdJR1oxYm1OMGFXOXVJR3RsZVdSdmQyNG9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQmpiMjF0TG01dmRHbG1lU2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHdGxlV1J2ZDI0NklHVjJaVzUwTG1OdlpHVUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN0NpQWdJQ0I5Q2lBZ0lDQmpZVzUyWVhNdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnaWEyVjVaRzkzYmlJc0lHdGxlV1J2ZDI0cE93b2dJQ0FnWm5WdVkzUnBiMjRnYTJWNWRYQW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQmpiMjF0TG01dmRHbG1lU2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHdGxlWFZ3T2lCbGRtVnVkQzVqYjJSbENpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sT3dvZ0lDQWdmUW9nSUNBZ1kyRnVkbUZ6TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW10bGVYVndJaXdnYTJWNWRYQXBPd29nSUNBZ1puVnVZM1JwYjI0Z1kyOXVkR1Y0ZEcxbGJuVW9aWFpsYm5RcElIc0tJQ0FnSUNBZ0lDQmpiMjF0TG01dmRHbG1lU2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHdGxlWFZ3T2lBaVpHVnNaWFJsWDJ0bGVYTWlDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE93b2dJQ0FnZlFvZ0lDQWdZMkZ1ZG1GekxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltTnZiblJsZUhSdFpXNTFJaXdnS0dVcFBUNWxMbkJ5WlhabGJuUkVaV1poZFd4MEtDa3BPd29nSUNBZ1kyRnVkbUZ6TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW1adlkzVnpiM1YwSWl3Z1kyOXVkR1Y0ZEcxbGJuVXBPd29nSUNBZ1puVnVZM1JwYjI0Z2NtVnphWHBsWDJOaGJHeGlZV05yS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IzYVdSMGFDd2dhR1ZwWjJoME93b2dJQ0FnSUNBZ0lHbG1JQ2h5WlhOcGVtVmZkRzhnUFQwZ0ltSnZaSGtpS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRnQzYVdSMGFDd2dhR1ZwWjJoMFhTQTlJR2RsZEY5aWIyUjVYM05wZW1Vb0tUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsYzJsNlpWOTBieUE5UFNBaWNHRnlaVzUwSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JiZDJsa2RHZ3NJR2hsYVdkb2RGMGdQU0JuWlhSZmNHRnlaVzUwWDNOcGVtVW9ZMkZ1ZG1GektUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdZMjl0YlM1dWIzUnBabmtvZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWE5wZW1VNklGc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvSUM4Z2QybHVjMk5oYkdVc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFFnTHlCM2FXNXpZMkZzWlFvZ0lDQWdJQ0FnSUNBZ0lDQmRDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQjlDaUFnSUNCcFppQW9jbVZ6YVhwbFgzUnZLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdjbVZ6YVhwbFgyTmhiR3hpWVdOclgzUm9jbTkwZEd4bFpDQTlJSFJvY205MGRHeGxYMloxYm1OMGFXOXVLSEpsYzJsNlpWOWpZV3hzWW1GamF5d2dNVEF3S1RzS0lDQWdJQ0FnSUNCM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpY21WemFYcGxJaXdnS0dWMlpXNTBLVDArY21WemFYcGxYMk5oYkd4aVlXTnJYM1JvY205MGRHeGxaQ2dwS1RzS0lDQWdJQ0FnSUNCeVpYTnBlbVZmWTJGc2JHSmhZMnRmZEdoeWIzUjBiR1ZrS0NrN0NpQWdJQ0I5Q24wS1puVnVZM1JwYjI0Z2RHaHlaV1ZxYzE5dGIyUjFiR1VvWTJGdWRtRnpLU0I3Q2lBZ0lDQnNaWFFnWTI5dWRHVjRkQ0E5SUdOaGJuWmhjeTVuWlhSRGIyNTBaWGgwS0NKM1pXSm5iRElpTENCN0NpQWdJQ0FnSUNBZ2NISmxjMlZ5ZG1WRWNtRjNhVzVuUW5WbVptVnlPaUIwY25WbENpQWdJQ0I5S1RzS0lDQWdJR2xtSUNnaFkyOXVkR1Y0ZENrZ2V3b2dJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVjJWaVIwd2dNaTR3SUc1dmRDQnpkWEJ3YjNKMFpXUWdZbmtnWW5KdmQzTmxjaXdnWm1Gc2JHbHVaeUJpWVdOcklIUnZJRmRsWWtkTUlERXVNQ0FvVm05c2RXMWxJSEJzYjNSeklIZHBiR3dnYm05MElIZHZjbXNwSWlrN0NpQWdJQ0FnSUNBZ1kyOXVkR1Y0ZENBOUlHTmhiblpoY3k1blpYUkRiMjUwWlhoMEtDSjNaV0puYkNJc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGMyVnlkbVZFY21GM2FXNW5RblZtWm1WeU9pQjBjblZsQ2lBZ0lDQWdJQ0FnZlNrN0NpQWdJQ0I5Q2lBZ0lDQnBaaUFvSVdOdmJuUmxlSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQjlDaUFnSUNCamIyNXpkQ0J5Wlc1a1pYSmxjaUE5SUc1bGR5QnRiMlF1VjJWaVIweFNaVzVrWlhKbGNpaDdDaUFnSUNBZ0lDQWdZVzUwYVdGc2FXRnpPaUIwY25WbExBb2dJQ0FnSUNBZ0lHTmhiblpoY3pvZ1kyRnVkbUZ6TEFvZ0lDQWdJQ0FnSUdOdmJuUmxlSFE2SUdOdmJuUmxlSFFzQ2lBZ0lDQWdJQ0FnY0c5M1pYSlFjbVZtWlhKbGJtTmxPaUFpYUdsbmFDMXdaWEptYjNKdFlXNWpaU0lLSUNBZ0lIMHBPd29nSUNBZ2NtVnVaR1Z5WlhJdVpHVmlkV2N1YjI1VGFHRmtaWEpGY25KdmNpQTlJRzl1WDNOb1lXUmxjbDlsY25KdmNqc0tJQ0FnSUhKbGJtUmxjbVZ5TG5ObGRFTnNaV0Z5UTI5c2IzSW9JaU5tWm1abVptWWlLVHNLSUNBZ0lISmxkSFZ5YmlCeVpXNWtaWEpsY2pzS2ZRcG1kVzVqZEdsdmJpQnpaWFJmY21WdVpHVnlYM05wZW1Vb2MyTnlaV1Z1TENCM2FXUjBhQ3dnYUdWcFoyaDBLU0I3Q2lBZ0lDQmpiMjV6ZENCN0lISmxibVJsY21WeUlDd2dZMkZ1ZG1GeklDd2djMk5oYkdWbVlXTjBiM0lnTENCM2FXNXpZMkZzWlNBc0lIQjRYM0JsY2w5MWJtbDBJQ0I5SUQwZ2MyTnlaV1Z1T3dvZ0lDQWdZMjl1YzNRZ1czTjNhV1IwYUN3Z2MyaGxhV2RvZEYwZ1BTQmJDaUFnSUNBZ0lDQWdkMmx1YzJOaGJHVWdLaUIzYVdSMGFDd0tJQ0FnSUNBZ0lDQjNhVzV6WTJGc1pTQXFJR2hsYVdkb2RBb2dJQ0FnWFRzS0lDQWdJR052Ym5OMElISmxZV3hmY0dsNFpXeGZkMmxrZEdnZ1BTQk5ZWFJvTG1ObGFXd29kMmxrZEdnZ0tpQndlRjl3WlhKZmRXNXBkQ2s3Q2lBZ0lDQmpiMjV6ZENCeVpXRnNYM0JwZUdWc1gyaGxhV2RvZENBOUlFMWhkR2d1WTJWcGJDaG9aV2xuYUhRZ0tpQndlRjl3WlhKZmRXNXBkQ2s3Q2lBZ0lDQnlaVzVrWlhKbGNpNWZkMmxrZEdnZ1BTQjNhV1IwYURzS0lDQWdJSEpsYm1SbGNtVnlMbDlvWldsbmFIUWdQU0JvWldsbmFIUTdDaUFnSUNCallXNTJZWE11ZDJsa2RHZ2dQU0J5WldGc1gzQnBlR1ZzWDNkcFpIUm9Pd29nSUNBZ1kyRnVkbUZ6TG1obGFXZG9kQ0E5SUhKbFlXeGZjR2w0Wld4ZmFHVnBaMmgwT3dvZ0lDQWdZMkZ1ZG1GekxuTjBlV3hsTG5kcFpIUm9JRDBnYzNkcFpIUm9JQ3NnSW5CNElqc0tJQ0FnSUdOaGJuWmhjeTV6ZEhsc1pTNW9aV2xuYUhRZ1BTQnphR1ZwWjJoMElDc2dJbkI0SWpzS0lDQWdJSEpsYm1SbGNtVnlMbk5sZEZacFpYZHdiM0owS0RBc0lEQXNJSEpsWVd4ZmNHbDRaV3hmZDJsa2RHZ3NJSEpsWVd4ZmNHbDRaV3hmYUdWcFoyaDBLVHNLSUNBZ0lHRmtaRjl3YVdOcmFXNW5YM1JoY21kbGRDaHpZM0psWlc0cE93b2dJQ0FnY21WMGRYSnVPd3A5Q21aMWJtTjBhVzl1SUdGa1pGOXdhV05yYVc1blgzUmhjbWRsZENoelkzSmxaVzRwSUhzS0lDQWdJR052Ym5OMElIc2djR2xqYTJsdVoxOTBZWEpuWlhRZ0xDQmpZVzUyWVhNZ0lIMGdQU0J6WTNKbFpXNDdDaUFnSUNCamIyNXpkQ0JiZHl3Z2FGMGdQU0JiQ2lBZ0lDQWdJQ0FnWTJGdWRtRnpMbmRwWkhSb0xBb2dJQ0FnSUNBZ0lHTmhiblpoY3k1b1pXbG5hSFFLSUNBZ0lGMDdDaUFnSUNCcFppQW9jR2xqYTJsdVoxOTBZWEpuWlhRcElIc0tJQ0FnSUNBZ0lDQnBaaUFvY0dsamEybHVaMTkwWVhKblpYUXVkMmxrZEdnZ1BUMGdkeUFtSmlCd2FXTnJhVzVuWDNSaGNtZGxkQzVvWldsbmFIUWdQVDBnYUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY0dsamEybHVaMTkwWVhKblpYUXVaR2x6Y0c5elpTZ3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUhOamNtVmxiaTV3YVdOcmFXNW5YM1JoY21kbGRDQTlJRzVsZHlCdGIyUXVWMlZpUjB4U1pXNWtaWEpVWVhKblpYUW9keXdnYUNrN0NpQWdJQ0J5WlhSMWNtNDdDbjBLWm5WdVkzUnBiMjRnWTNKbFlYUmxYM05qWlc1bEtIZHlZWEJ3WlhJc0lHTmhiblpoY3l3Z1kyRnVkbUZ6WDNkcFpIUm9MQ0J6WTJWdVpYTXNJR052Ylcwc0lIZHBaSFJvTENCb1pXbG5hSFFzSUhSbGVIUjFjbVZmWVhSc1lYTmZiMkp6TENCbWNITXNJSEpsYzJsNlpWOTBieXdnY0hoZmNHVnlYM1Z1YVhRc0lITmpZV3hsWm1GamRHOXlLU0I3Q2lBZ0lDQnBaaUFvSVhOallXeGxabUZqZEc5eUtTQjdDaUFnSUNBZ0lDQWdjMk5oYkdWbVlXTjBiM0lnUFNCM2FXNWtiM2N1WkdWMmFXTmxVR2w0Wld4U1lYUnBieUI4ZkNBeExqQTdDaUFnSUNCOUNpQWdJQ0JwWmlBb0lYQjRYM0JsY2w5MWJtbDBLU0I3Q2lBZ0lDQWdJQ0FnY0hoZmNHVnlYM1Z1YVhRZ1BTQnpZMkZzWldaaFkzUnZjanNLSUNBZ0lIMEtJQ0FnSUdOdmJuTjBJSEpsYm1SbGNtVnlJRDBnZEdoeVpXVnFjMTl0YjJSMWJHVW9ZMkZ1ZG1GektUc0tJQ0FnSUZSRldGUlZVa1ZmUVZSTVFWTmJNRjBnUFNCMFpYaDBkWEpsWDJGMGJHRnpYMjlpY3pzS0lDQWdJR2xtSUNnaGNtVnVaR1Z5WlhJcElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCM1lYSnVhVzVuSUQwZ1oyVjBWMlZpUjB4RmNuSnZjazFsYzNOaFoyVW9LVHNLSUNBZ0lDQWdJQ0IzY21Gd2NHVnlMbUZ3Y0dWdVpFTm9hV3hrS0hkaGNtNXBibWNwT3dvZ0lDQWdmUW9nSUNBZ1kyOXVjM1FnWTJGdFpYSmhJRDBnYm1WM0lHMXZaQzVRWlhKemNHVmpkR2wyWlVOaGJXVnlZU2cwTlN3Z01Td2dNQ3dnTVRBd0tUc0tJQ0FnSUdOaGJXVnlZUzUxY0dSaGRHVlFjbTlxWldOMGFXOXVUV0YwY21sNEtDazdDaUFnSUNCamIyNXpkQ0J3YVhobGJGOXlZWFJwYnlBOUlIZHBibVJ2ZHk1a1pYWnBZMlZRYVhobGJGSmhkR2x2SUh4OElERXVNRHNLSUNBZ0lHTnZibk4wSUhkcGJuTmpZV3hsSUQwZ2MyTmhiR1ZtWVdOMGIzSWdMeUJ3YVhobGJGOXlZWFJwYnpzS0lDQWdJR052Ym5OMElITmpjbVZsYmlBOUlIc0tJQ0FnSUNBZ0lDQnlaVzVrWlhKbGNpd0tJQ0FnSUNBZ0lDQmpZVzFsY21Fc0NpQWdJQ0FnSUNBZ1puQnpMQW9nSUNBZ0lDQWdJR05oYm5aaGN5d0tJQ0FnSUNBZ0lDQndlRjl3WlhKZmRXNXBkQ3dLSUNBZ0lDQWdJQ0J6WTJGc1pXWmhZM1J2Y2l3S0lDQWdJQ0FnSUNCM2FXNXpZMkZzWlN3S0lDQWdJQ0FnSUNCMFpYaDBkWEpsWDJGMGJHRnpPaUIxYm1SbFptbHVaV1FLSUNBZ0lIMDdDaUFnSUNCaFpHUmZZMkZ1ZG1GelgyVjJaVzUwY3loelkzSmxaVzRzSUdOdmJXMHNJSEpsYzJsNlpWOTBieWs3Q2lBZ0lDQnpaWFJmY21WdVpHVnlYM05wZW1Vb2MyTnlaV1Z1TENCM2FXUjBhQ3dnYUdWcFoyaDBLVHNLSUNBZ0lHTnZibk4wSUhSb2NtVmxYM05qWlc1bElEMGdaR1Z6WlhKcFlXeHBlbVZmYzJObGJtVW9jMk5sYm1WekxDQnpZM0psWlc0cE93b2dJQ0FnYzNSaGNuUmZjbVZ1WkdWeWJHOXZjQ2gwYUhKbFpWOXpZMlZ1WlNrN0NpQWdJQ0JqWVc1MllYTmZkMmxrZEdndWIyNG9LSGRmYUNrOVBuc0tJQ0FnSUNBZ0lDQnpaWFJmY21WdVpHVnlYM05wZW1Vb2MyTnlaV1Z1TENBdUxpNTNYMmdwT3dvZ0lDQWdmU2s3Q2lBZ0lDQnlaWFIxY200Z2NtVnVaR1Z5WlhJN0NuMEtablZ1WTNScGIyNGdjMlYwWDNCcFkydHBibWRmZFc1cFptOXliWE1vYzJObGJtVXNJR3hoYzNSZmFXUXNJSEJwWTJ0cGJtY3NJSEJwWTJ0bFpGOXdiRzkwY3l3Z2NHeHZkSE1zSUdsa1gzUnZYM0JzYjNRcElIc0tJQ0FnSUhOalpXNWxMbU5vYVd4a2NtVnVMbVp2Y2tWaFkyZ29LSEJzYjNRc0lHbHVaR1Y0S1QwK2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUhzZ2JXRjBaWEpwWVd3Z0lIMGdQU0J3Ykc5ME93b2dJQ0FnSUNBZ0lHTnZibk4wSUhzZ2RXNXBabTl5YlhNZ0lIMGdQU0J0WVhSbGNtbGhiRHNLSUNBZ0lDQWdJQ0JwWmlBb2NHbGphMmx1WnlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjeTV2WW1wbFkzUmZhV1F1ZG1Gc2RXVWdQU0JzWVhOMFgybGtJQ3NnYVc1a1pYZzdDaUFnSUNBZ0lDQWdJQ0FnSUhWdWFXWnZjbTF6TG5CcFkydHBibWN1ZG1Gc2RXVWdQU0IwY25WbE93b2dJQ0FnSUNBZ0lDQWdJQ0J0WVhSbGNtbGhiQzVpYkdWdVpHbHVaeUE5SUcxdlpDNU9iMEpzWlc1a2FXNW5Pd29nSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhWdWFXWnZjbTF6TG5CcFkydHBibWN1ZG1Gc2RXVWdQU0JtWVd4elpUc0tJQ0FnSUNBZ0lDQWdJQ0FnYldGMFpYSnBZV3d1WW14bGJtUnBibWNnUFNCdGIyUXVUbTl5YldGc1FteGxibVJwYm1jN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHbGtJRDBnZFc1cFptOXliWE11YjJKcVpXTjBYMmxrTG5aaGJIVmxPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9hV1FnYVc0Z2NHbGphMlZrWDNCc2IzUnpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Ykc5MGN5NXdkWE5vS0ZzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiRzkwTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnBZMnRsWkY5d2JHOTBjMXRwWkYwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUYwcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUmZkRzlmY0d4dmRGdHBaRjBnUFNCd2JHOTBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlNrN0NpQWdJQ0JzWlhRZ2JtVjRkRjlwWkNBOUlHeGhjM1JmYVdRZ0t5QnpZMlZ1WlM1amFHbHNaSEpsYmk1c1pXNW5kR2c3Q2lBZ0lDQnpZMlZ1WlM1elkyVnVaVjlqYUdsc1pISmxiaTVtYjNKRllXTm9LQ2h6WTJWdVpTazlQbnNLSUNBZ0lDQWdJQ0J1WlhoMFgybGtJRDBnYzJWMFgzQnBZMnRwYm1kZmRXNXBabTl5YlhNb2MyTmxibVVzSUc1bGVIUmZhV1FzSUhCcFkydHBibWNzSUhCcFkydGxaRjl3Ykc5MGN5d2djR3h2ZEhNc0lHbGtYM1J2WDNCc2IzUXBPd29nSUNBZ2ZTazdDaUFnSUNCeVpYUjFjbTRnYm1WNGRGOXBaRHNLZlFwbWRXNWpkR2x2YmlCd2FXTnJYMjVoZEdsMlpTaHpZMlZ1WlN3Z1gzZ3NJRjk1TENCZmR5d2dYMmdwSUhzS0lDQWdJR052Ym5OMElIc2djbVZ1WkdWeVpYSWdMQ0J3YVdOcmFXNW5YM1JoY21kbGRDQXNJSEI0WDNCbGNsOTFibWwwSUNCOUlEMGdjMk5sYm1VdWMyTnlaV1Z1T3dvZ0lDQWdXMTk0TENCZmVTd2dYM2NzSUY5b1hTQTlJRnNLSUNBZ0lDQWdJQ0JmZUN3S0lDQWdJQ0FnSUNCZmVTd0tJQ0FnSUNBZ0lDQmZkeXdLSUNBZ0lDQWdJQ0JmYUFvZ0lDQWdYUzV0WVhBb0tIZ3BQVDVOWVhSb0xtTmxhV3dvZUNBcUlIQjRYM0JsY2w5MWJtbDBLU2s3Q2lBZ0lDQmpiMjV6ZENCYmVDd2dlU3dnZHl3Z2FGMGdQU0JiQ2lBZ0lDQWdJQ0FnWDNnc0NpQWdJQ0FnSUNBZ1gza3NDaUFnSUNBZ0lDQWdYM2NzQ2lBZ0lDQWdJQ0FnWDJnS0lDQWdJRjA3Q2lBZ0lDQnlaVzVrWlhKbGNpNXpaWFJTWlc1a1pYSlVZWEpuWlhRb2NHbGphMmx1WjE5MFlYSm5aWFFwT3dvZ0lDQWdjMlYwWDNCcFkydHBibWRmZFc1cFptOXliWE1vYzJObGJtVXNJREVzSUhSeWRXVXBPd29nSUNBZ2NtVnVaR1Z5WDNOalpXNWxLSE5qWlc1bExDQjBjblZsS1RzS0lDQWdJSEpsYm1SbGNtVnlMbk5sZEZKbGJtUmxjbFJoY21kbGRDaHVkV3hzS1RzS0lDQWdJR052Ym5OMElHNWllWFJsY3lBOUlIY2dLaUJvSUNvZ05Ec0tJQ0FnSUdOdmJuTjBJSEJwZUdWc1gySjVkR1Z6SUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvYm1KNWRHVnpLVHNLSUNBZ0lISmxibVJsY21WeUxuSmxZV1JTWlc1a1pYSlVZWEpuWlhSUWFYaGxiSE1vY0dsamEybHVaMTkwWVhKblpYUXNJSGdzSUhrc0lIY3NJR2dzSUhCcGVHVnNYMko1ZEdWektUc0tJQ0FnSUdOdmJuTjBJSEJwWTJ0bFpGOXdiRzkwY3lBOUlIdDlPd29nSUNBZ1kyOXVjM1FnY0dsamEyVmtYM0JzYjNSelgyRnljbUY1SUQwZ1cxMDdDaUFnSUNCamIyNXpkQ0J5WldsdWRHVnljSEpsZEY5MmFXVjNJRDBnYm1WM0lFUmhkR0ZXYVdWM0tIQnBlR1ZzWDJKNWRHVnpMbUoxWm1abGNpazdDaUFnSUNCbWIzSW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2NHbDRaV3hmWW5sMFpYTXViR1Z1WjNSb0lDOGdORHNnYVNzcktYc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCcFpDQTlJSEpsYVc1MFpYSndjbVYwWDNacFpYY3VaMlYwVldsdWRERTJLR2tnS2lBMEtUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCcGJtUmxlQ0E5SUhKbGFXNTBaWEp3Y21WMFgzWnBaWGN1WjJWMFZXbHVkREUyS0drZ0tpQTBJQ3NnTWlrN0NpQWdJQ0FnSUNBZ2NHbGphMlZrWDNCc2IzUnpYMkZ5Y21GNUxuQjFjMmdvV3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGdLSUNBZ0lDQWdJQ0JkS1RzS0lDQWdJQ0FnSUNCd2FXTnJaV1JmY0d4dmRITmJhV1JkSUQwZ2FXNWtaWGc3Q2lBZ0lDQjlDaUFnSUNCamIyNXpkQ0J3Ykc5MGN5QTlJRnRkT3dvZ0lDQWdZMjl1YzNRZ2FXUmZkRzlmY0d4dmRDQTlJSHQ5T3dvZ0lDQWdjMlYwWDNCcFkydHBibWRmZFc1cFptOXliWE1vYzJObGJtVXNJREFzSUdaaGJITmxMQ0J3YVdOclpXUmZjR3h2ZEhNc0lIQnNiM1J6TENCcFpGOTBiMTl3Ykc5MEtUc0tJQ0FnSUdOdmJuTjBJSEJwWTJ0bFpGOXdiRzkwYzE5dFlYUnlhWGdnUFNCd2FXTnJaV1JmY0d4dmRITmZZWEp5WVhrdWJXRndLQ2hiYVdRc0lHbHVaR1Y0WFNrOVBuc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCd0lEMGdhV1JmZEc5ZmNHeHZkRnRwWkYwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZzS0lDQWdJQ0FnSUNBZ0lDQWdjQ0EvSUhBdWNHeHZkRjkxZFdsa0lEb2diblZzYkN3S0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnS0lDQWdJQ0FnSUNCZE93b2dJQ0FnZlNrN0NpQWdJQ0JqYjI1emRDQndiRzkwWDIxaGRISnBlQ0E5SUhzS0lDQWdJQ0FnSUNCa1lYUmhPaUJ3YVdOclpXUmZjR3h2ZEhOZmJXRjBjbWw0TEFvZ0lDQWdJQ0FnSUhOcGVtVTZJRnNLSUNBZ0lDQWdJQ0FnSUNBZ2R5d0tJQ0FnSUNBZ0lDQWdJQ0FnYUFvZ0lDQWdJQ0FnSUYwS0lDQWdJSDA3Q2lBZ0lDQnlaWFIxY200Z1d3b2dJQ0FnSUNBZ0lIQnNiM1JmYldGMGNtbDRMQW9nSUNBZ0lDQWdJSEJzYjNSekNpQWdJQ0JkT3dwOUNtWjFibU4wYVc5dUlIQnBZMnRmWTJ4dmMyVnpkQ2h6WTJWdVpTd2dlSGtzSUhKaGJtZGxLU0I3Q2lBZ0lDQmpiMjV6ZENCN0lISmxibVJsY21WeUlDQjlJRDBnYzJObGJtVXVjMk55WldWdU93b2dJQ0FnWTI5dWMzUWdXM2RwWkhSb0xDQm9aV2xuYUhSZElEMGdXd29nSUNBZ0lDQWdJSEpsYm1SbGNtVnlMbDkzYVdSMGFDd0tJQ0FnSUNBZ0lDQnlaVzVrWlhKbGNpNWZhR1ZwWjJoMENpQWdJQ0JkT3dvZ0lDQWdhV1lnS0NFb01TNHdJRHc5SUhoNVd6QmRJRHc5SUhkcFpIUm9JQ1ltSURFdU1DQThQU0I0ZVZzeFhTQThQU0JvWldsbmFIUXBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRnNLSUNBZ0lDQWdJQ0FnSUNBZ2JuVnNiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Bb2dJQ0FnSUNBZ0lGMDdDaUFnSUNCOUNpQWdJQ0JqYjI1emRDQjRNQ0E5SUUxaGRHZ3ViV0Y0S0RFc0lIaDVXekJkSUMwZ2NtRnVaMlVwT3dvZ0lDQWdZMjl1YzNRZ2VUQWdQU0JOWVhSb0xtMWhlQ2d4TENCNGVWc3hYU0F0SUhKaGJtZGxLVHNLSUNBZ0lHTnZibk4wSUhneElEMGdUV0YwYUM1dGFXNG9kMmxrZEdnc0lFMWhkR2d1Wm14dmIzSW9lSGxiTUYwZ0t5QnlZVzVuWlNrcE93b2dJQ0FnWTI5dWMzUWdlVEVnUFNCTllYUm9MbTFwYmlob1pXbG5hSFFzSUUxaGRHZ3VabXh2YjNJb2VIbGJNVjBnS3lCeVlXNW5aU2twT3dvZ0lDQWdZMjl1YzNRZ1pIZ2dQU0I0TVNBdElIZ3dPd29nSUNBZ1kyOXVjM1FnWkhrZ1BTQjVNU0F0SUhrd093b2dJQ0FnWTI5dWMzUWdXM0JzYjNSZlpHRjBZU3dnWDEwZ1BTQndhV05yWDI1aGRHbDJaU2h6WTJWdVpTd2dlREFzSUhrd0xDQmtlQ3dnWkhrcE93b2dJQ0FnWTI5dWMzUWdjR3h2ZEY5dFlYUnlhWGdnUFNCd2JHOTBYMlJoZEdFdVpHRjBZVHNLSUNBZ0lHeGxkQ0J0YVc1ZlpHbHpkQ0E5SUhKaGJtZGxJRjRnTWpzS0lDQWdJR3hsZENCelpXeGxZM1JwYjI0Z1BTQmJDaUFnSUNBZ0lDQWdiblZzYkN3S0lDQWdJQ0FnSUNBd0NpQWdJQ0JkT3dvZ0lDQWdZMjl1YzNRZ2VDQTlJSGg1V3pCZElDc2dNU0F0SUhnd093b2dJQ0FnWTI5dWMzUWdlU0E5SUhoNVd6RmRJQ3NnTVNBdElIa3dPd29nSUNBZ2JHVjBJSEJwYm1SbGVDQTlJREE3Q2lBZ0lDQm1iM0lvYkdWMElHa2dQU0F4T3lCcElEdzlJR1I0T3lCcEt5c3Bld29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhaUE5SURFN0lHb2dQRDBnWkhnN0lHb3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdRZ1BTQjRJQzBnYVNCZUlESWdLeUFvZVNBdElHb3BJRjRnTWpzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1czQnNiM1JmZFhWcFpDd2dhVzVrWlhoZElEMGdjR3h2ZEY5dFlYUnlhWGhiY0dsdVpHVjRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NHbHVaR1Y0SUQwZ2NHbHVaR1Y0SUNzZ01Uc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUWdQQ0J0YVc1ZlpHbHpkQ0FtSmlCd2JHOTBYM1YxYVdRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXBibDlrYVhOMElEMGdaRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdWamRHbHZiaUE5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiRzkwWDNWMWFXUXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZ0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMDdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2MyVnNaV04wYVc5dU93cDlDbVoxYm1OMGFXOXVJSEJwWTJ0ZmMyOXlkR1ZrS0hOalpXNWxMQ0I0ZVN3Z2NtRnVaMlVwSUhzS0lDQWdJR052Ym5OMElIc2djbVZ1WkdWeVpYSWdJSDBnUFNCelkyVnVaUzV6WTNKbFpXNDdDaUFnSUNCamIyNXpkQ0JiZDJsa2RHZ3NJR2hsYVdkb2RGMGdQU0JiQ2lBZ0lDQWdJQ0FnY21WdVpHVnlaWEl1WDNkcFpIUm9MQW9nSUNBZ0lDQWdJSEpsYm1SbGNtVnlMbDlvWldsbmFIUUtJQ0FnSUYwN0NpQWdJQ0JwWmlBb0lTZ3hMakFnUEQwZ2VIbGJNRjBnUEQwZ2QybGtkR2dnSmlZZ01TNHdJRHc5SUhoNVd6RmRJRHc5SUdobGFXZG9kQ2twSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUgwS0lDQWdJR052Ym5OMElIZ3dJRDBnVFdGMGFDNXRZWGdvTVN3Z2VIbGJNRjBnTFNCeVlXNW5aU2s3Q2lBZ0lDQmpiMjV6ZENCNU1DQTlJRTFoZEdndWJXRjRLREVzSUhoNVd6RmRJQzBnY21GdVoyVXBPd29nSUNBZ1kyOXVjM1FnZURFZ1BTQk5ZWFJvTG0xcGJpaDNhV1IwYUN3Z1RXRjBhQzVtYkc5dmNpaDRlVnN3WFNBcklISmhibWRsS1NrN0NpQWdJQ0JqYjI1emRDQjVNU0E5SUUxaGRHZ3ViV2x1S0dobGFXZG9kQ3dnVFdGMGFDNW1iRzl2Y2loNGVWc3hYU0FySUhKaGJtZGxLU2s3Q2lBZ0lDQmpiMjV6ZENCa2VDQTlJSGd4SUMwZ2VEQTdDaUFnSUNCamIyNXpkQ0JrZVNBOUlIa3hJQzBnZVRBN0NpQWdJQ0JqYjI1emRDQmJjR3h2ZEY5a1lYUmhMQ0J6Wld4bFkzUmxaRjBnUFNCd2FXTnJYMjVoZEdsMlpTaHpZMlZ1WlN3Z2VEQXNJSGt3TENCa2VDd2daSGtwT3dvZ0lDQWdhV1lnS0hObGJHVmpkR1ZrTG14bGJtZDBhQ0E5UFNBd0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3Q2lBZ0lDQjlDaUFnSUNCamIyNXpkQ0J3Ykc5MFgyMWhkSEpwZUNBOUlIQnNiM1JmWkdGMFlTNWtZWFJoT3dvZ0lDQWdZMjl1YzNRZ1pHbHpkR0Z1WTJWeklEMGdjMlZzWldOMFpXUXViV0Z3S0NoNEtUMCtjbUZ1WjJVZ1hpQXlLVHNLSUNBZ0lHTnZibk4wSUhnZ1BTQjRlVnN3WFNBcklERWdMU0I0TURzS0lDQWdJR052Ym5OMElIa2dQU0I0ZVZzeFhTQXJJREVnTFNCNU1Ec0tJQ0FnSUd4bGRDQndhVzVrWlhnZ1BTQXdPd29nSUNBZ1ptOXlLR3hsZENCcElEMGdNVHNnYVNBOFBTQmtlRHNnYVNzcktYc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHb2dQU0F4T3lCcUlEdzlJR1I0T3lCcUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrSUQwZ2VDQXRJR2tnWGlBeUlDc2dLSGtnTFNCcUtTQmVJREk3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3Ykc5MFgyMWhkSEpwZUM1c1pXNW5kR2dnUEQwZ2NHbHVaR1Y0S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JiY0d4dmRGOTFkV2xrTENCcGJtUmxlRjBnUFNCd2JHOTBYMjFoZEhKcGVGdHdhVzVrWlhoZE93b2dJQ0FnSUNBZ0lDQWdJQ0J3YVc1a1pYZ2dQU0J3YVc1a1pYZ2dLeUF4T3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd2JHOTBYMmx1WkdWNElEMGdjMlZzWldOMFpXUXVabWx1WkVsdVpHVjRLQ2g0S1QwK2VGc3dYUzV3Ykc5MFgzVjFhV1FnUFQwZ2NHeHZkRjkxZFdsa0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnNiM1JmYVc1a1pYZ2dQajBnTUNBbUppQmtJRHdnWkdsemRHRnVZMlZ6VzNCc2IzUmZhVzVrWlhoZEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE4wWVc1alpYTmJjR3h2ZEY5cGJtUmxlRjBnUFNCa093b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1kyOXVjM1FnYzI5eWRHVmtYMmx1WkdsalpYTWdQU0JCY25KaGVTNW1jbTl0S0VGeWNtRjVLR1JwYzNSaGJtTmxjeTVzWlc1bmRHZ3BMbXRsZVhNb0tTa3VjMjl5ZENnb1lTd2dZaWs5UG1ScGMzUmhibU5sYzF0aFhTQThJR1JwYzNSaGJtTmxjMXRpWFNBL0lDMHhJRG9nWkdsemRHRnVZMlZ6VzJKZElEd2daR2x6ZEdGdVkyVnpXMkZkSUh3Z01DazdDaUFnSUNCeVpYUjFjbTRnYzI5eWRHVmtYMmx1WkdsalpYTXViV0Z3S0NocFpIZ3BQVDU3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdXM0JzYjNRc0lHbHVaR1Y0WFNBOUlITmxiR1ZqZEdWa1cybGtlRjA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRnNLSUNBZ0lDQWdJQ0FnSUNBZ2NHeHZkQzV3Ykc5MFgzVjFhV1FzQ2lBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0Q2lBZ0lDQWdJQ0FnWFRzS0lDQWdJSDBwT3dwOUNtWjFibU4wYVc5dUlIQnBZMnRmYm1GMGFYWmxYM1YxYVdRb2MyTmxibVVzSUhnc0lIa3NJSGNzSUdncElIc0tJQ0FnSUdOdmJuTjBJRnRmTENCd2FXTnJaV1JmY0d4dmRITmRJRDBnY0dsamExOXVZWFJwZG1Vb2MyTmxibVVzSUhnc0lIa3NJSGNzSUdncE93b2dJQ0FnY21WMGRYSnVJSEJwWTJ0bFpGOXdiRzkwY3k1dFlYQW9LRnR3TENCcGJtUmxlRjBwUFQ1YkNpQWdJQ0FnSUNBZ0lDQWdJSEF1Y0d4dmRGOTFkV2xrTEFvZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZUFvZ0lDQWdJQ0FnSUYwcE93cDlDbVoxYm1OMGFXOXVJSEJwWTJ0ZmJtRjBhWFpsWDIxaGRISnBlQ2h6WTJWdVpTd2dlQ3dnZVN3Z2R5d2dhQ2tnZXdvZ0lDQWdZMjl1YzNRZ1cyMWhkSEpwZUN3Z1gxMGdQU0J3YVdOclgyNWhkR2wyWlNoelkyVnVaU3dnZUN3Z2VTd2dkeXdnYUNrN0NpQWdJQ0J5WlhSMWNtNGdiV0YwY21sNE93cDlDbVoxYm1OMGFXOXVJSEpsWjJsemRHVnlYM0J2Y0hWd0tIQnZjSFZ3TENCelkyVnVaU3dnY0d4dmRITmZkRzlmY0dsamF5d2dZMkZzYkdKaFkyc3BJSHNLSUNBZ0lHbG1JQ2doYzJObGJtVWdmSHdnSVhOalpXNWxMbk5qY21WbGJpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUgwS0lDQWdJR052Ym5OMElIc2dZMkZ1ZG1GeklDQjlJRDBnYzJObGJtVXVjMk55WldWdU93b2dJQ0FnWTJGdWRtRnpMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JbTF2ZFhObFpHOTNiaUlzSUNobGRtVnVkQ2s5UG5zS0lDQWdJQ0FnSUNCamIyNXpkQ0JiZUN3Z2VWMGdQU0JsZG1WdWRITXlkVzVwZEd4bGMzTW9jMk5sYm1VdWMyTnlaV1Z1TENCbGRtVnVkQ2s3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdXMThzSUhCcFkydHpYU0E5SUhCcFkydGZibUYwYVhabEtITmpaVzVsTENCNExDQjVMQ0F4TENBeEtUc0tJQ0FnSUNBZ0lDQnBaaUFvY0dsamEzTXViR1Z1WjNSb0lEMDlJREVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1czQnNiM1FzSUdsdVpHVjRYU0E5SUhCcFkydHpXekJkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0d4dmRITmZkRzlmY0dsamF5NW9ZWE1vY0d4dmRDNXdiRzkwWDNWMWFXUXBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnlaWE4xYkhRZ1BTQmpZV3hzWW1GamF5aHdiRzkwTENCcGJtUmxlQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYQnZjSFZ3TG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3lnaWMyaHZkeUlwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRzl3ZFhBdVkyeGhjM05NYVhOMExtRmtaQ2dpYzJodmR5SXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRzl3ZFhBdWMzUjViR1V1YkdWbWRDQTlJR1YyWlc1MExuQmhaMlZZSUNzZ0luQjRJanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ2Y0hWd0xuTjBlV3hsTG5SdmNDQTlJR1YyWlc1MExuQmhaMlZaSUNzZ0luQjRJanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnY21WemRXeDBJRDA5UFNBaWMzUnlhVzVuSWlCOGZDQnlaWE4xYkhRZ2FXNXpkR0Z1WTJWdlppQlRkSEpwYm1jcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNCMWNDNXBibTVsY2xSbGVIUWdQU0J5WlhOMWJIUTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ2Y0hWd0xtbHVibVZ5U0ZSTlRDQTlJSEpsYzNWc2REc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIQnZjSFZ3TG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSW5Ob2IzY2lLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlLVHNLSUNBZ0lHTmhiblpoY3k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKclpYbDFjQ0lzSUNobGRtVnVkQ2s5UG5zS0lDQWdJQ0FnSUNCcFppQW9aWFpsYm5RdWEyVjVJRDA5UFNBaVJYTmpZWEJsSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J3YjNCMWNDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtDSnphRzkzSWlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlNrN0NuMEtkMmx1Wkc5M0xsZEhUQ0E5SUhzS0lDQWdJR1JsYzJWeWFXRnNhWHBsWDNOalpXNWxMQW9nSUNBZ2RHaHlaV1ZxYzE5dGIyUjFiR1VzQ2lBZ0lDQnpkR0Z5ZEY5eVpXNWtaWEpzYjI5d0xBb2dJQ0FnWkdWc1pYUmxYM0JzYjNSekxBb2dJQ0FnYVc1elpYSjBYM0JzYjNRc0NpQWdJQ0JtYVc1a1gzQnNiM1J6TEFvZ0lDQWdaR1ZzWlhSbFgzTmpaVzVsTEFvZ0lDQWdabWx1WkY5elkyVnVaU3dLSUNBZ0lITmpaVzVsWDJOaFkyaGxMQW9nSUNBZ2NHeHZkRjlqWVdOb1pTd0tJQ0FnSUdSbGJHVjBaVjl6WTJWdVpYTXNDaUFnSUNCamNtVmhkR1ZmYzJObGJtVXNDaUFnSUNCbGRtVnVkSE15ZFc1cGRHeGxjM01zQ2lBZ0lDQnZibDl1WlhoMFgybHVjMlZ5ZEN3S0lDQWdJSEpsWjJsemRHVnlYM0J2Y0hWd0xBb2dJQ0FnY21WdVpHVnlYM05qWlc1bExBb2dJQ0FnVkVWWVZGVlNSVjlCVkV4QlV3cDlPd3BsZUhCdmNuUWdleUJrWlhObGNtbGhiR2w2WlY5elkyVnVaU0JoY3lCa1pYTmxjbWxoYkdsNlpWOXpZMlZ1WlN3Z2RHaHlaV1ZxYzE5dGIyUjFiR1VnWVhNZ2RHaHlaV1ZxYzE5dGIyUjFiR1VzSUhOMFlYSjBYM0psYm1SbGNteHZiM0FnWVhNZ2MzUmhjblJmY21WdVpHVnliRzl2Y0N3Z1pHVnNaWFJsWDNCc2IzUnpJR0Z6SUdSbGJHVjBaVjl3Ykc5MGN5d2dhVzV6WlhKMFgzQnNiM1FnWVhNZ2FXNXpaWEowWDNCc2IzUXNJR1pwYm1SZmNHeHZkSE1nWVhNZ1ptbHVaRjl3Ykc5MGN5d2daR1ZzWlhSbFgzTmpaVzVsSUdGeklHUmxiR1YwWlY5elkyVnVaU3dnWm1sdVpGOXpZMlZ1WlNCaGN5Qm1hVzVrWDNOalpXNWxMQ0J6WTJWdVpWOWpZV05vWlNCaGN5QnpZMlZ1WlY5allXTm9aU3dnY0d4dmRGOWpZV05vWlNCaGN5QndiRzkwWDJOaFkyaGxMQ0JrWld4bGRHVmZjMk5sYm1WeklHRnpJR1JsYkdWMFpWOXpZMlZ1WlhNc0lHTnlaV0YwWlY5elkyVnVaU0JoY3lCamNtVmhkR1ZmYzJObGJtVXNJR1YyWlc1MGN6SjFibWwwYkdWemN5QmhjeUJsZG1WdWRITXlkVzVwZEd4bGMzTXNJRzl1WDI1bGVIUmZhVzV6WlhKMElHRnpJRzl1WDI1bGVIUmZhVzV6WlhKMElIMDdDbVY0Y0c5eWRDQjdJSEpsYm1SbGNsOXpZMlZ1WlNCaGN5QnlaVzVrWlhKZmMyTmxibVVnZlRzS1pYaHdiM0owSUhzZ2QyZHNaWEp5YjNJZ1lYTWdkMmRzWlhKeWIzSWdmVHNLWlhod2IzSjBJSHNnY0dsamExOXVZWFJwZG1VZ1lYTWdjR2xqYTE5dVlYUnBkbVVnZlRzS1pYaHdiM0owSUhzZ2NHbGphMTlqYkc5elpYTjBJR0Z6SUhCcFkydGZZMnh2YzJWemRDQjlPd3BsZUhCdmNuUWdleUJ3YVdOclgzTnZjblJsWkNCaGN5QndhV05yWDNOdmNuUmxaQ0I5T3dwbGVIQnZjblFnZXlCd2FXTnJYMjVoZEdsMlpWOTFkV2xrSUdGeklIQnBZMnRmYm1GMGFYWmxYM1YxYVdRZ2ZUc0taWGh3YjNKMElIc2djR2xqYTE5dVlYUnBkbVZmYldGMGNtbDRJR0Z6SUhCcFkydGZibUYwYVhabFgyMWhkSEpwZUNCOU93cGxlSEJ2Y25RZ2V5QnlaV2RwYzNSbGNsOXdiM0IxY0NCaGN5QnlaV2RwYzNSbGNsOXdiM0IxY0NCOU93b0tgOwogICAgICAgICAgICByZXR1cm4gaW1wb3J0KEJPTklUT19JTVBPUlRTWydjYzRjNmFhNmExZjA2YTFiNTAxM2JjYTAxNzAyZjM2YTE4NGMwNDM5LXdnbG1ha2llLmpzJ10pOwogICAgICAgIH0pKCkudGhlbihXR0wgPT4gewogICAgdHJ5IHsKICAgICAgICBjb25zdCByZW5kZXJlciA9IFdHTC5jcmVhdGVfc2NlbmUoCiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWpzY2FsbC1pZD0iMzciXScpLCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1qc2NhbGwtaWQ9IjM4Il0nKSwgX19sb29rdXBfaW50ZXJwb2xhdGVkKCc2MzE0NjM5MTc3Mjg1MTU0ODQxJyksIF9fbG9va3VwX2ludGVycG9sYXRlZCgnMTU4MzUzODM1OTk1ODQxNTk1ODgnKSwgX19sb29rdXBfaW50ZXJwb2xhdGVkKCc1OTQ2OTEwNDc5OTQ5MTAzMTg5JyksIDMwMCwgMzAwLAogICAgICAgICAgICBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzM0NjA4OTUzNjY2MzgwMTcwMDInKSwgMzAuMCwgX19sb29rdXBfaW50ZXJwb2xhdGVkKCc3MjE0NTc3MTg0OTI3MDg3MzEyJyksIF9fbG9va3VwX2ludGVycG9sYXRlZCgnNzIxNDU3NzE4NDkyNzA4NzMxMicpLCBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzcyMTQ1NzcxODQ5MjcwODczMTInKQogICAgICAgICkKICAgICAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdldENvbnRleHQoKQogICAgICAgIGNvbnN0IGVyciA9IGdsLmdldEVycm9yKCkKICAgICAgICBpZiAoZXJyICE9IGdsLk5PX0VSUk9SKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiV2ViR0wgZXJyb3I6ICIgKyBXR0wud2dsZXJyb3IoZ2wsIGVycikpCiAgICAgICAgfQogICAgICAgIF9fbG9va3VwX2ludGVycG9sYXRlZCgnMTI4NDgzOTA0MTU5NjM0NTIyMDAnKS5ub3RpZnkodHJ1ZSkKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBCb25pdG8uQ29ubmVjdGlvbi5zZW5kX2Vycm9yKCJlcnJvciBpbml0aWFsaXppbmcgc2NlbmUiLCBlKQogICAgICAgIF9fbG9va3VwX2ludGVycG9sYXRlZCgnMTI4NDgzOTA0MTU5NjM0NTIyMDAnKS5ub3RpZnkoZmFsc2UpCiAgICAgICAgcmV0dXJuCiAgICB9Cn0pCtlBL2hvbWUvcnVubmVyL3dvcmsvTWFraWUuamwvTWFraWUuamwvV0dMTWFraWUvc3JjL3RocmVlX3Bsb3Quamw6NDKobXNnX3R5cGWhMsgLimuSx1Jqk9kkNzZlMzJiMWYtNGY1OS00YTRiLThiYzItNjBlYjlhZjU3N2QwgqY5NDgwNzfHCWWSpjk0ODA3NwGmOTQ4MDc5xwllkqY5NDgwNzlko3N1YoKncGF5bG9hZMgLHGaTgrQxMTgxMDY3MjA0NTQ4NjA0NzY5OMcHaKY5NDgwNzmzODk5NDI1ODkzNTM4OTY2NDUzN8cHaKY5NDgwNzfaCpkoKGNvbnRhaW5lcik9PiB7CiAgICBjb25zdCB0aHVtYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWpzY2FsbC1pZD0iMzUiXScpOwogICAgY29uc3QgdHJhY2tfYWN0aXZlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtanNjYWxsLWlkPSIzNCJdJyk7CiAgICBjb25zdCB0cmFjayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWpzY2FsbC1pZD0iMzMiXScpOwogICAgbGV0IGlzRHJhZ2dpbmcgPSBmYWxzZTsKICAgIGNvbnN0IG5zdGVwc19vYnMgPSBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzExODEwNjcyMDQ1NDg2MDQ3Njk4JykKICAgIGxldCBsYXN0X2luZGV4ID0gLTE7CiAgICBmdW5jdGlvbiBzZXRfdGh1bWJfaW5kZXgoaW5kZXgpIHsKICAgICAgICBpZiAoaW5kZXggPT09IGxhc3RfaW5kZXgpIHsKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgICAgIGxhc3RfaW5kZXggPSBpbmRleDsKICAgICAgICBjb25zdCB0aHVtYl93aWR0aCA9IHRodW1iLm9mZnNldFdpZHRoIC8gMjsKICAgICAgICBjb25zdCBuc3RlcHMgPSBuc3RlcHNfb2JzLnZhbHVlOwogICAgICAgIGNvbnN0IHN0ZXBfd2lkdGggPSB0cmFjay5vZmZzZXRXaWR0aCAvIChuc3RlcHMtMSk7CiAgICAgICAgY29uc3QgbmV3X2xlZnQgPSAoaW5kZXggLSAxKSAqIHN0ZXBfd2lkdGg7CiAgICAgICAgdGh1bWIuc3R5bGUubGVmdCA9IChuZXdfbGVmdCAtIHRodW1iX3dpZHRoKSArICdweCc7ICAvLyBVcGRhdGUgdGhlIGxlZnQgcG9zaXRpb24gb2YgdGhlIHRodW1iCiAgICAgICAgdHJhY2tfYWN0aXZlLnN0eWxlLndpZHRoID0gbmV3X2xlZnQgKyAncHgnOyAgLy8gVXBkYXRlIHRoZSBhY3RpdmUgdHJhY2sKICAgIH0KICAgIF9fbG9va3VwX2ludGVycG9sYXRlZCgnODk5NDI1ODkzNTM4OTY2NDUzNycpLm9uKGlkeD0+IHNldF90aHVtYl9pbmRleChpZHgpKTsKICAgIGZ1bmN0aW9uIHNldF90aHVtYihlKSB7CiAgICAgICAgY29uc3QgbnN0ZXBzID0gbnN0ZXBzX29icy52YWx1ZTsKICAgICAgICBjb25zdCB0aHVtYl93aWR0aCA9IHRodW1iLm9mZnNldFdpZHRoIC8gMjsKICAgICAgICBjb25zdCB3aWR0aCA9IHRyYWNrLm9mZnNldFdpZHRoOwogICAgICAgIGNvbnN0IHN0ZXBfd2lkdGggPSB3aWR0aCAvIChuc3RlcHMgLSAxKTsKICAgICAgICBsZXQgbmV3X2xlZnQgPSBlLmNsaWVudFggLSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDsKICAgICAgICBuZXdfbGVmdCA9IE1hdGgubWF4KG5ld19sZWZ0LCAwKTsKICAgICAgICBuZXdfbGVmdCA9IE1hdGgubWluKG5ld19sZWZ0LCB3aWR0aCk7CiAgICAgICAgbmV3X2xlZnQgPSBNYXRoLnJvdW5kKG5ld19sZWZ0IC8gc3RlcF93aWR0aCkgKiBzdGVwX3dpZHRoOwogICAgICAgIHRodW1iLnN0eWxlLmxlZnQgPSAobmV3X2xlZnQgLSB0aHVtYl93aWR0aCkgKyAncHgnOyAgLy8gVXBkYXRlIHRoZSBsZWZ0IHBvc2l0aW9uIG9mIHRoZSB0aHVtYgogICAgICAgIHRyYWNrX2FjdGl2ZS5zdHlsZS53aWR0aCA9IG5ld19sZWZ0ICsgJ3B4JzsgIC8vIFVwZGF0ZSB0aGUgYWN0aXZlIHRyYWNrCiAgICAgICAgY29uc3QgaW5kZXggPSBNYXRoLnJvdW5kKChuZXdfbGVmdCAvIHdpZHRoKSAqIChuc3RlcHMgLSAxKSk7CiAgICAgICAgbGFzdF9pbmRleCA9IGluZGV4OwogICAgICAgIGlmIChpbmRleCAhPT0gX19sb29rdXBfaW50ZXJwb2xhdGVkKCc4OTk0MjU4OTM1Mzg5NjY0NTM3JykudmFsdWUpIHsKICAgICAgICAgICAgX19sb29rdXBfaW50ZXJwb2xhdGVkKCc4OTk0MjU4OTM1Mzg5NjY0NTM3Jykubm90aWZ5KGluZGV4ICsgMSk7CiAgICAgICAgfQogICAgfQogICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTsKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYoZS50YXJnZXQgPT09IHRodW1iIHx8IGUudGFyZ2V0ID09PSB0cmFja19hY3RpdmUgfHwgZS50YXJnZXQgPT09IHRyYWNrIHx8IGUudGFyZ2FyID09PSBjb250YWluZXIpewogICAgICAgICAgICBpc0RyYWdnaW5nID0gdHJ1ZTsKICAgICAgICAgICAgc2V0X3RodW1iKGUpOwogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7ICAvLyBQcmV2ZW50IGRlZmF1bHQgYmVoYXZpb3IKICAgICAgICB9CiAgICB9LCB7IHNpZ25hbDogY29udHJvbGxlci5zaWduYWx9KTsKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGNvbnRhaW5lcikpIHsKICAgICAgICAgICAgY29udHJvbGxlci5hYm9ydCgpOwogICAgICAgIH0KICAgICAgICBpc0RyYWdnaW5nID0gZmFsc2U7CiAgICB9LCB7IHNpZ25hbDogY29udHJvbGxlci5zaWduYWwgfSk7CiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGlmIChpc0RyYWdnaW5nKSB7CiAgICAgICAgICAgIHNldF90aHVtYihlKTsKICAgICAgICB9CiAgICB9LCB7IHNpZ25hbDogY29udHJvbGxlci5zaWduYWwgfSk7CiAgICBzZXRfdGh1bWJfaW5kZXgoX19sb29rdXBfaW50ZXJwb2xhdGVkKCc4OTk0MjU4OTM1Mzg5NjY0NTM3JykudmFsdWUpCn0KKShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1qc2NhbGwtaWQ9IjMyIl0nKSk72T8vaG9tZS9ydW5uZXIvLmp1bGlhL3BhY2thZ2VzL0Jvbml0by9BaXBXeC9zcmMvY29tcG9uZW50cy5qbDozMziobXNnX3R5cGWhMqhtc2dfdHlwZaE5').then(msgs=> Bonito.init_session('76e32b1f-4f59-4a4b-8bc2-60eb9af577d0', msgs, 'sub'));
    })
" type="module"></script>
    <div data-jscall-id="27">
      <div class=" style_8" style="" data-jscall-id="28">
        <div class=" style_4" style="" data-jscall-id="29">
          <div class=" style_3" style="" data-jscall-id="30">
            <h1 data-jscall-id="31">Hello</h1>
          </div>
          <div class=" style_5" style="" data-jscall-id="32">
            <div class=" style_9" style="" data-jscall-id="33"></div>
            <div class=" style_6" style="" data-jscall-id="34"></div>
            <div class=" style_7" style="" data-jscall-id="35"></div>
          </div>
          <img data-jscall-id="36" src="https://julialang.org/assets/infra/logo.svg" />
          <div style="width: 100%; height: 100%" data-jscall-id="37">
            <canvas style="display: block" data-jscall-id="38" tabindex="0"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>~~~
